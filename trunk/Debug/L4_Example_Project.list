
L4_Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000522c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000f8  20000000  080058c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
  8 .bss          000008b0  200000f8  200000f8  000200f8  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  200009a8  200009a8  000200f8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002eb19  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000622d  00000000  00000000  0004ec41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000014f8  00000000  00000000  00054e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001348  00000000  00000000  00056368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ea2c  00000000  00000000  000576b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000071c2  00000000  00000000  000660dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006d29e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003648  00000000  00000000  0006d31c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000c352  00000000  00000000  00070964  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f8 	.word	0x200000f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053b4 	.word	0x080053b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000fc 	.word	0x200000fc
 80001dc:	080053b4 	.word	0x080053b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
 *
 * @details Initializes applications.
 * @details Call system application to execute active applications.
 ****************************************************************************/
int  main()
{
 80005a0:	b508      	push	{r3, lr}
	/* Call to initial specific platform configuration */
    systemPreConfiguration();
 80005a2:	f001 fb9f 	bl	8001ce4 <systemPreConfiguration>

    /* HAL TEST */
    GPIOInit();
 80005a6:	f001 f997 	bl	80018d8 <GPIOInit>
    stm32L4Init();
 80005aa:	f001 fb85 	bl	8001cb8 <stm32L4Init>

    interruptsInit();
 80005ae:	f001 f9bd 	bl	800192c <interruptsInit>
    interruptsStart();
 80005b2:	f001 f9d3 	bl	800195c <interruptsStart>

    spiInit();
 80005b6:	f001 fc77 	bl	8001ea8 <spiInit>
    spiStart();
 80005ba:	f001 fcbd 	bl	8001f38 <spiStart>

    uartInit();
 80005be:	f001 fdfb 	bl	80021b8 <uartInit>
    uartStart();
 80005c2:	f001 fe33 	bl	800222c <uartStart>

    FlashInit();
 80005c6:	f001 f88b 	bl	80016e0 <FlashInit>
    SwTimerInit();
 80005ca:	f000 ff27 	bl	800141c <SwTimerInit>
    pipeDeviceInit();
 80005ce:	f000 ff99 	bl	8001504 <pipeDeviceInit>
    sdInit();
    sdStart();*/
    /*\ HAL TEST */

	/* Applications Initialization */
    SchedulerInit();
 80005d2:	f000 f993 	bl	80008fc <SchedulerInit>

    while (TRUE)
    {
        SchedulerNextSystemProcess();
 80005d6:	f000 fa3f 	bl	8000a58 <SchedulerNextSystemProcess>
 80005da:	e7fc      	b.n	80005d6 <main+0x36>

080005dc <initSystemApp>:
 *
 * @details Initializes HREG and SREG layers.
 * @details Initializes all applications
 ****************************************************************************/
void initSystemApp( void )
{
 80005dc:	b508      	push	{r3, lr}
    requestPowerState = POWER_STATE_NO_REQUEST;
 80005de:	2200      	movs	r2, #0
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <initSystemApp+0x10>)
 80005e2:	701a      	strb	r2, [r3, #0]

    initSregAll();    /* Initialise the SREG layer */
 80005e4:	f000 f916 	bl	8000814 <initSregAll>
 80005e8:	bd08      	pop	{r3, pc}
 80005ea:	bf00      	nop
 80005ec:	200002b8 	.word	0x200002b8

080005f0 <callSystemApp>:
 *
 * @details depending on current state, executes active applications.
 * @details calls system middleware task
 ****************************************************************************/
void callSystemApp( void )
{
 80005f0:	b510      	push	{r4, lr}
 80005f2:	b084      	sub	sp, #16
    uint8_t systemState;

    /* HAL TEST */
    // GPIO
    GPIOWritePort(GPIO_LED_1, GPIO_TOGGLE);
 80005f4:	2102      	movs	r1, #2
 80005f6:	2000      	movs	r0, #0
 80005f8:	f001 f8ca 	bl	8001790 <GPIOWritePort>
//    uint8_t cmd[9] = "AT+CGREG";
    //uint8_t cmd[32] = "AT+CGCLASS=1,0,0,\"movistar.com\"";
	tAtRequest req;/* = {0, 0, 0, 0, cmd};*/
	req.delay = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8ad 3008 	strh.w	r3, [sp, #8]
	req.errorRetries = 0;
 8000602:	f88d 3004 	strb.w	r3, [sp, #4]
	req.timeout = 0;
 8000606:	f8ad 3006 	strh.w	r3, [sp, #6]
	req.timeoutRetries = 0;
 800060a:	f88d 3005 	strb.w	r3, [sp, #5]
	req.command = (uint8_t *)"AT+CGCLASS=1,0,0,\"movistar.com\"";
 800060e:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <callSystemApp+0xd0>)
 8000610:	9303      	str	r3, [sp, #12]
    /* END HAL TEST */

    /* System state machine */
    systemState = READ_SREG(SREG_SYSTEM_STATE);
 8000612:	2004      	movs	r0, #4
 8000614:	f000 f91d 	bl	8000852 <readSreg>
 8000618:	b2c4      	uxtb	r4, r0
    //systemState = SYSTEM_APP_INIT_SHELL;
    switch ( systemState )
 800061a:	2c04      	cmp	r4, #4
 800061c:	d849      	bhi.n	80006b2 <callSystemApp+0xc2>
 800061e:	e8df f004 	tbb	[pc, r4]
 8000622:	0347      	.short	0x0347
 8000624:	4810      	.short	0x4810
 8000626:	07          	.byte	0x07
 8000627:	00          	.byte	0x00
			systemState = SYSTEM_APP_INIT;
			break;
        
		case SYSTEM_APP_INIT:
			/* Application init dispather */
			AtCommandStart();
 8000628:	f000 fe98 	bl	800135c <AtCommandStart>
			systemState = SYSTEM_APP_ON;
 800062c:	2402      	movs	r4, #2
            break;
 800062e:	e040      	b.n	80006b2 <callSystemApp+0xc2>

        case SYSTEM_APP_SLEPT:
			/* Application sleep dispather */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_WAKE_UP ) 
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <callSystemApp+0xd4>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d13c      	bne.n	80006b2 <callSystemApp+0xc2>
            {
				/* Wake up */
                systemState = SYSTEM_APP_ON;
                requestPowerState = POWER_STATE_NO_REQUEST;
 8000638:	2100      	movs	r1, #0
 800063a:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <callSystemApp+0xd4>)
 800063c:	7011      	strb	r1, [r2, #0]
                systemState = SYSTEM_APP_ON;
 800063e:	461c      	mov	r4, r3
 8000640:	e037      	b.n	80006b2 <callSystemApp+0xc2>
			}
            break;

        case SYSTEM_APP_ON:
			/* Application dispatcher */
        	if(x)
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <callSystemApp+0xd8>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b1ab      	cbz	r3, 8000674 <callSystemApp+0x84>
        	{
        		if(ATCommandSetRequest(AT_CLIENT_GPS, req)==RET_OK)
 8000648:	ab04      	add	r3, sp, #16
 800064a:	e913 000e 	ldmdb	r3, {r1, r2, r3}
 800064e:	2000      	movs	r0, #0
 8000650:	f000 feaa 	bl	80013a8 <ATCommandSetRequest>
 8000654:	b910      	cbnz	r0, 800065c <callSystemApp+0x6c>
        		{
        			x=0;
 8000656:	2200      	movs	r2, #0
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <callSystemApp+0xd8>)
 800065a:	701a      	strb	r2, [r3, #0]
        		{
        			x=1;
        		}
        	}
			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_START_SHUTDOWN )
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <callSystemApp+0xd4>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d013      	beq.n	800068c <callSystemApp+0x9c>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
                
                /* Power off */
                systemState = SYSTEM_APP_POWER_OFF;
            }
            else if ( requestPowerState == POWER_STATE_GO_TO_SLEEP )
 8000664:	2b03      	cmp	r3, #3
 8000666:	d017      	beq.n	8000698 <callSystemApp+0xa8>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
                
                /* Slept */
                systemState = SYSTEM_APP_SLEPT;
            }
            else if ( requestPowerState == POWER_STATE_REBOOT )
 8000668:	2b04      	cmp	r3, #4
 800066a:	d01b      	beq.n	80006a4 <callSystemApp+0xb4>
                systemState = SYSTEM_APP_REBOOT;
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
            }
            
            /* Reset power state request */
            requestPowerState = POWER_STATE_NO_REQUEST;
 800066c:	2200      	movs	r2, #0
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <callSystemApp+0xd4>)
 8000670:	701a      	strb	r2, [r3, #0]
            break;
 8000672:	e01e      	b.n	80006b2 <callSystemApp+0xc2>
        		if(ATCommandSetRequest(AT_CLIENT_LTE, req)==RET_OK)
 8000674:	ab04      	add	r3, sp, #16
 8000676:	e913 000e 	ldmdb	r3, {r1, r2, r3}
 800067a:	2001      	movs	r0, #1
 800067c:	f000 fe94 	bl	80013a8 <ATCommandSetRequest>
 8000680:	2800      	cmp	r0, #0
 8000682:	d1eb      	bne.n	800065c <callSystemApp+0x6c>
        			x=1;
 8000684:	2201      	movs	r2, #1
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <callSystemApp+0xd8>)
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e7e7      	b.n	800065c <callSystemApp+0x6c>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
 800068c:	210a      	movs	r1, #10
 800068e:	2005      	movs	r0, #5
 8000690:	f000 f8fa 	bl	8000888 <writeSreg>
                systemState = SYSTEM_APP_POWER_OFF;
 8000694:	2403      	movs	r4, #3
 8000696:	e7e9      	b.n	800066c <callSystemApp+0x7c>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
 8000698:	2101      	movs	r1, #1
 800069a:	2005      	movs	r0, #5
 800069c:	f000 f8f4 	bl	8000888 <writeSreg>
                systemState = SYSTEM_APP_SLEPT;
 80006a0:	2404      	movs	r4, #4
 80006a2:	e7e3      	b.n	800066c <callSystemApp+0x7c>
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
 80006a4:	2103      	movs	r1, #3
 80006a6:	2005      	movs	r0, #5
 80006a8:	f000 f8ee 	bl	8000888 <writeSreg>
                systemState = SYSTEM_APP_REBOOT;
 80006ac:	2405      	movs	r4, #5
 80006ae:	e7dd      	b.n	800066c <callSystemApp+0x7c>
			systemState = SYSTEM_APP_INIT;
 80006b0:	2401      	movs	r4, #1
			break;
        
    }
    
    /* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
 80006b2:	4621      	mov	r1, r4
 80006b4:	2004      	movs	r0, #4
 80006b6:	f000 f8e7 	bl	8000888 <writeSreg>
}
 80006ba:	b004      	add	sp, #16
 80006bc:	bd10      	pop	{r4, pc}
 80006be:	bf00      	nop
 80006c0:	080053dc 	.word	0x080053dc
 80006c4:	200002b8 	.word	0x200002b8
 80006c8:	20000114 	.word	0x20000114

080006cc <ATLTECallback>:
	/* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
}

void ATLTECallback(tAtResponseID eventID, uint8_t *buffer, uint16_t length)
{
 80006cc:	b538      	push	{r3, r4, r5, lr}
 80006ce:	460c      	mov	r4, r1
 80006d0:	4615      	mov	r5, r2
	uartDriverSetBufferSize((tUart)UART_2, 6);
 80006d2:	2106      	movs	r1, #6
 80006d4:	2000      	movs	r0, #0
 80006d6:	f001 fdcb 	bl	8002270 <uartDriverSetBufferSize>
	uartDriverWrite((tUart)UART_2, (uint8_t*)"LTE: ");
 80006da:	4906      	ldr	r1, [pc, #24]	; (80006f4 <ATLTECallback+0x28>)
 80006dc:	2000      	movs	r0, #0
 80006de:	f001 fdcf 	bl	8002280 <uartDriverWrite>
	uartDriverSetBufferSize((tUart)UART_2, length);
 80006e2:	4629      	mov	r1, r5
 80006e4:	2000      	movs	r0, #0
 80006e6:	f001 fdc3 	bl	8002270 <uartDriverSetBufferSize>
	uartDriverWrite((tUart)UART_2, (uint8_t*)buffer);
 80006ea:	4621      	mov	r1, r4
 80006ec:	2000      	movs	r0, #0
 80006ee:	f001 fdc7 	bl	8002280 <uartDriverWrite>
 80006f2:	bd38      	pop	{r3, r4, r5, pc}
 80006f4:	080053d4 	.word	0x080053d4

080006f8 <ATGPSCallback>:
}

void ATGPSCallback(tAtResponseID eventID, uint8_t *buffer, uint16_t length)
{
 80006f8:	b538      	push	{r3, r4, r5, lr}
 80006fa:	460c      	mov	r4, r1
 80006fc:	4615      	mov	r5, r2
	uartDriverSetBufferSize((tUart)UART_2, 6);
 80006fe:	2106      	movs	r1, #6
 8000700:	2000      	movs	r0, #0
 8000702:	f001 fdb5 	bl	8002270 <uartDriverSetBufferSize>
	uartDriverWrite((tUart)UART_2, (uint8_t*)"GPS: ");
 8000706:	4906      	ldr	r1, [pc, #24]	; (8000720 <ATGPSCallback+0x28>)
 8000708:	2000      	movs	r0, #0
 800070a:	f001 fdb9 	bl	8002280 <uartDriverWrite>
	uartDriverSetBufferSize((tUart)UART_2, length);
 800070e:	4629      	mov	r1, r5
 8000710:	2000      	movs	r0, #0
 8000712:	f001 fdad 	bl	8002270 <uartDriverSetBufferSize>
	uartDriverWrite((tUart)UART_2, (uint8_t*)buffer);
 8000716:	4621      	mov	r1, r4
 8000718:	2000      	movs	r0, #0
 800071a:	f001 fdb1 	bl	8002280 <uartDriverWrite>
 800071e:	bd38      	pop	{r3, r4, r5, pc}
 8000720:	080053cc 	.word	0x080053cc

08000724 <sregWrite>:
eError sregWrite(SREG sreg, uint32_t value)
{
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <sregWrite+0x38>)
 8000726:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800072a:	7852      	ldrb	r2, [r2, #1]
	switch(SREGInstanceMap[sreg].type)
 800072c:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d008      	beq.n	8000746 <sregWrite+0x22>
 8000734:	b11b      	cbz	r3, 800073e <sregWrite+0x1a>
 8000736:	2b02      	cmp	r3, #2
 8000738:	d00a      	beq.n	8000750 <sregWrite+0x2c>
			break;
		case SREG_UINT32:
			SREG32Context[index] = (uint32_t)value;
			break;
		default:
			success = RET_INVALID_PARAMETER;
 800073a:	2005      	movs	r0, #5
			break;
	}

	return success;
}
 800073c:	4770      	bx	lr
			SREG8Context[index] = (uint8_t)value;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <sregWrite+0x3c>)
 8000740:	5499      	strb	r1, [r3, r2]
	eError success = RET_OK;
 8000742:	2000      	movs	r0, #0
			break;
 8000744:	4770      	bx	lr
			SREG16Context[index] = (uint16_t)value;
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <sregWrite+0x40>)
 8000748:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	eError success = RET_OK;
 800074c:	2000      	movs	r0, #0
			break;
 800074e:	4770      	bx	lr
			SREG32Context[index] = (uint32_t)value;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <sregWrite+0x44>)
 8000752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eError success = RET_OK;
 8000756:	2000      	movs	r0, #0
			break;
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	0800542c 	.word	0x0800542c
 8000760:	200002bc 	.word	0x200002bc
 8000764:	200002cc 	.word	0x200002cc
 8000768:	200002c4 	.word	0x200002c4

0800076c <sregReadParam>:
 * @param	sreg
 * @param	sregParam struct
 * @return  RET_OK or RET_FAIL
 ****************************************************************************/
eError sregReadParam(SREG sreg, tSREGParam *sregParam)
{
 800076c:	b430      	push	{r4, r5}
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 800076e:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <sregReadParam+0x8c>)
 8000770:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8000774:	785b      	ldrb	r3, [r3, #1]
	switch(SREGInstanceMap[sreg].type)
 8000776:	f812 2020 	ldrb.w	r2, [r2, r0, lsl #2]
 800077a:	2a01      	cmp	r2, #1
 800077c:	d014      	beq.n	80007a8 <sregReadParam+0x3c>
 800077e:	b11a      	cbz	r2, 8000788 <sregReadParam+0x1c>
 8000780:	2a02      	cmp	r2, #2
 8000782:	d025      	beq.n	80007d0 <sregReadParam+0x64>
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
			break;
		default:
			success = RET_INVALID_PARAMETER;
 8000784:	2005      	movs	r0, #5
 8000786:	e00d      	b.n	80007a4 <sregReadParam+0x38>
			sregParam->Data = (uint32_t)SREG8Context[index];
 8000788:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <sregReadParam+0x90>)
 800078a:	5cd2      	ldrb	r2, [r2, r3]
 800078c:	600a      	str	r2, [r1, #0]
			sregParam->Init = (uint32_t)(SREG8InstanceMap[index].Init);
 800078e:	481c      	ldr	r0, [pc, #112]	; (8000800 <sregReadParam+0x94>)
 8000790:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000794:	18c2      	adds	r2, r0, r3
 8000796:	7894      	ldrb	r4, [r2, #2]
 8000798:	60cc      	str	r4, [r1, #12]
			sregParam->Max  = (uint32_t)(SREG8InstanceMap[index].Max);
 800079a:	5cc3      	ldrb	r3, [r0, r3]
 800079c:	604b      	str	r3, [r1, #4]
			sregParam->Min  = (uint32_t)(SREG8InstanceMap[index].Min);
 800079e:	7853      	ldrb	r3, [r2, #1]
 80007a0:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 80007a2:	2000      	movs	r0, #0
			break;
	}

	return success;
}
 80007a4:	bc30      	pop	{r4, r5}
 80007a6:	4770      	bx	lr
			sregParam->Data  = (uint32_t)SREG16Context[index];
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <sregReadParam+0x98>)
 80007aa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007ae:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG16InstanceMap[index].Init);
 80007b0:	4a15      	ldr	r2, [pc, #84]	; (8000808 <sregReadParam+0x9c>)
 80007b2:	0058      	lsls	r0, r3, #1
 80007b4:	18c5      	adds	r5, r0, r3
 80007b6:	006c      	lsls	r4, r5, #1
 80007b8:	1915      	adds	r5, r2, r4
 80007ba:	88ad      	ldrh	r5, [r5, #4]
 80007bc:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG16InstanceMap[index].Max);
 80007be:	5b14      	ldrh	r4, [r2, r4]
 80007c0:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG16InstanceMap[index].Min);
 80007c2:	4403      	add	r3, r0
 80007c4:	0058      	lsls	r0, r3, #1
 80007c6:	4402      	add	r2, r0
 80007c8:	8853      	ldrh	r3, [r2, #2]
 80007ca:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 80007cc:	2000      	movs	r0, #0
			break;
 80007ce:	e7e9      	b.n	80007a4 <sregReadParam+0x38>
			sregParam->Data  = (uint32_t)SREG32Context[index];
 80007d0:	4a0e      	ldr	r2, [pc, #56]	; (800080c <sregReadParam+0xa0>)
 80007d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007d6:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <sregReadParam+0xa4>)
 80007da:	0058      	lsls	r0, r3, #1
 80007dc:	18c5      	adds	r5, r0, r3
 80007de:	00ac      	lsls	r4, r5, #2
 80007e0:	1915      	adds	r5, r2, r4
 80007e2:	68ad      	ldr	r5, [r5, #8]
 80007e4:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
 80007e6:	5914      	ldr	r4, [r2, r4]
 80007e8:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
 80007ea:	4403      	add	r3, r0
 80007ec:	0098      	lsls	r0, r3, #2
 80007ee:	4402      	add	r2, r0
 80007f0:	6853      	ldr	r3, [r2, #4]
 80007f2:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 80007f4:	2000      	movs	r0, #0
			break;
 80007f6:	e7d5      	b.n	80007a4 <sregReadParam+0x38>
 80007f8:	0800542c 	.word	0x0800542c
 80007fc:	200002bc 	.word	0x200002bc
 8000800:	08005414 	.word	0x08005414
 8000804:	200002cc 	.word	0x200002cc
 8000808:	080053fc 	.word	0x080053fc
 800080c:	200002c4 	.word	0x200002c4
 8000810:	080053fc 	.word	0x080053fc

08000814 <initSregAll>:
{
 8000814:	b510      	push	{r4, lr}
 8000816:	b084      	sub	sp, #16
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 8000818:	2400      	movs	r4, #0
 800081a:	e009      	b.n	8000830 <initSregAll+0x1c>
		sregReadParam(sreg, &sregParam);
 800081c:	4669      	mov	r1, sp
 800081e:	4620      	mov	r0, r4
 8000820:	f7ff ffa4 	bl	800076c <sregReadParam>
		sregWrite(sreg, sregParam.Init);
 8000824:	9903      	ldr	r1, [sp, #12]
 8000826:	4620      	mov	r0, r4
 8000828:	f7ff ff7c 	bl	8000724 <sregWrite>
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 800082c:	3401      	adds	r4, #1
 800082e:	b2e4      	uxtb	r4, r4
 8000830:	2c08      	cmp	r4, #8
 8000832:	d9f3      	bls.n	800081c <initSregAll+0x8>
}
 8000834:	b004      	add	sp, #16
 8000836:	bd10      	pop	{r4, pc}

08000838 <readSregTableStd>:
{
 8000838:	b500      	push	{lr}
 800083a:	b085      	sub	sp, #20
	success = sregReadParam(sreg, &sregParam);
 800083c:	4669      	mov	r1, sp
 800083e:	f7ff ff95 	bl	800076c <sregReadParam>
	if ( success == RET_OK )
 8000842:	b120      	cbz	r0, 800084e <readSregTableStd+0x16>
    uint32_t ret_data = 0xffffffff;
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000848:	b005      	add	sp, #20
 800084a:	f85d fb04 	ldr.w	pc, [sp], #4
		ret_data = sregParam.Data;
 800084e:	9800      	ldr	r0, [sp, #0]
 8000850:	e7fa      	b.n	8000848 <readSregTableStd+0x10>

08000852 <readSreg>:
{
 8000852:	b508      	push	{r3, lr}
	return readSregTableStd(sreg);
 8000854:	f7ff fff0 	bl	8000838 <readSregTableStd>
}
 8000858:	bd08      	pop	{r3, pc}

0800085a <writeSregTableStd>:
{
 800085a:	b570      	push	{r4, r5, r6, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	4606      	mov	r6, r0
 8000860:	460d      	mov	r5, r1
	result = sregReadParam(sreg, &sregParam);
 8000862:	4669      	mov	r1, sp
 8000864:	f7ff ff82 	bl	800076c <sregReadParam>
 8000868:	4604      	mov	r4, r0
	if ( value > sregParam.Max )
 800086a:	9901      	ldr	r1, [sp, #4]
 800086c:	42a9      	cmp	r1, r5
 800086e:	d303      	bcc.n	8000878 <writeSregTableStd+0x1e>
	else if ( value < sregParam.Min )
 8000870:	9902      	ldr	r1, [sp, #8]
 8000872:	428d      	cmp	r5, r1
 8000874:	d300      	bcc.n	8000878 <writeSregTableStd+0x1e>
 8000876:	4629      	mov	r1, r5
	if ( result == RET_OK )
 8000878:	b114      	cbz	r4, 8000880 <writeSregTableStd+0x26>
}
 800087a:	4620      	mov	r0, r4
 800087c:	b004      	add	sp, #16
 800087e:	bd70      	pop	{r4, r5, r6, pc}
		sregWrite(sreg, value);
 8000880:	4630      	mov	r0, r6
 8000882:	f7ff ff4f 	bl	8000724 <sregWrite>
 8000886:	e7f8      	b.n	800087a <writeSregTableStd+0x20>

08000888 <writeSreg>:
{
 8000888:	b508      	push	{r3, lr}
	return writeSregTableStd( sreg, value );
 800088a:	f7ff ffe6 	bl	800085a <writeSregTableStd>
}
 800088e:	bd08      	pop	{r3, pc}

08000890 <SchedulerResetProcessTable>:
 ****************************************************************************/
void SchedulerResetProcessTable(void)
{
	uint8_t i;

	ptrTask	= 0;
 8000890:	2300      	movs	r3, #0
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <SchedulerResetProcessTable+0x5c>)
 8000894:	7013      	strb	r3, [r2, #0]

 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000896:	2b02      	cmp	r3, #2
 8000898:	d826      	bhi.n	80008e8 <SchedulerResetProcessTable+0x58>
{
 800089a:	b430      	push	{r4, r5}
 	{
		schedulerProcess[i].uiTimeProcessCounter	= 0;
 800089c:	4914      	ldr	r1, [pc, #80]	; (80008f0 <SchedulerResetProcessTable+0x60>)
 800089e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80008a2:	f36f 020d 	bfc	r2, #0, #14
 80008a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		schedulerProcess[i].bEnabledSystemTask	= SchedulerInstanceMap[i].initState;
 80008aa:	005a      	lsls	r2, r3, #1
 80008ac:	18d0      	adds	r0, r2, r3
 80008ae:	0084      	lsls	r4, r0, #2
 80008b0:	4810      	ldr	r0, [pc, #64]	; (80008f4 <SchedulerResetProcessTable+0x64>)
 80008b2:	4420      	add	r0, r4
 80008b4:	7a84      	ldrb	r4, [r0, #10]
 80008b6:	4411      	add	r1, r2
 80008b8:	7848      	ldrb	r0, [r1, #1]
 80008ba:	f364 1086 	bfi	r0, r4, #6, #1
		schedulerProcess[i].bEnabledUrgentSystemTask = FALSE;
 80008be:	f36f 10c7 	bfc	r0, #7, #1
 80008c2:	7048      	strb	r0, [r1, #1]

		schedulerContext[i].maxDelayProcessCtn = 0;
 80008c4:	490c      	ldr	r1, [pc, #48]	; (80008f8 <SchedulerResetProcessTable+0x68>)
 80008c6:	18d0      	adds	r0, r2, r3
 80008c8:	00c5      	lsls	r5, r0, #3
 80008ca:	194c      	adds	r4, r1, r5
 80008cc:	2000      	movs	r0, #0
 80008ce:	81a0      	strh	r0, [r4, #12]
		schedulerContext[i].maximumTaskTime_us = 0;
 80008d0:	60a0      	str	r0, [r4, #8]
		schedulerContext[i].averageTaskTime_us = 0;
 80008d2:	5148      	str	r0, [r1, r5]
		schedulerContext[i].currentTaskTime_us = 0;
 80008d4:	6060      	str	r0, [r4, #4]
		schedulerContext[i].cntTaskTime = 0;
 80008d6:	6120      	str	r0, [r4, #16]
		schedulerContext[i].userEnabled = TRUE;
 80008d8:	2201      	movs	r2, #1
 80008da:	7562      	strb	r2, [r4, #21]
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80008dc:	4413      	add	r3, r2
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d9db      	bls.n	800089c <SchedulerResetProcessTable+0xc>
 	}
}
 80008e4:	bc30      	pop	{r4, r5}
 80008e6:	4770      	bx	lr
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	20000318 	.word	0x20000318
 80008f0:	2000031c 	.word	0x2000031c
 80008f4:	08005450 	.word	0x08005450
 80008f8:	200002d0 	.word	0x200002d0

080008fc <SchedulerInit>:
{
 80008fc:	b510      	push	{r4, lr}
	SchedulerResetProcessTable();
 80008fe:	f7ff ffc7 	bl	8000890 <SchedulerResetProcessTable>
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000902:	2400      	movs	r4, #0
 8000904:	e001      	b.n	800090a <SchedulerInit+0xe>
 8000906:	3401      	adds	r4, #1
 8000908:	b2e4      	uxtb	r4, r4
 800090a:	2c02      	cmp	r4, #2
 800090c:	d808      	bhi.n	8000920 <SchedulerInit+0x24>
		if(SchedulerInstanceMap[i].InitProcess != NULL)
 800090e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000912:	0093      	lsls	r3, r2, #2
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <SchedulerInit+0x3c>)
 8000916:	58d3      	ldr	r3, [r2, r3]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f4      	beq.n	8000906 <SchedulerInit+0xa>
			(*(SchedulerInstanceMap[i].InitProcess))();
 800091c:	4798      	blx	r3
 800091e:	e7f2      	b.n	8000906 <SchedulerInit+0xa>
    systemGetCLkFreq(&ticks_per_us);
 8000920:	4c06      	ldr	r4, [pc, #24]	; (800093c <SchedulerInit+0x40>)
 8000922:	4620      	mov	r0, r4
 8000924:	f001 f9d7 	bl	8001cd6 <systemGetCLkFreq>
    ticks_per_us /= 1000000;
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <SchedulerInit+0x44>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	0c9b      	lsrs	r3, r3, #18
 8000932:	6023      	str	r3, [r4, #0]
 8000934:	bd10      	pop	{r4, pc}
 8000936:	bf00      	nop
 8000938:	08005450 	.word	0x08005450
 800093c:	200002cc 	.word	0x200002cc
 8000940:	431bde83 	.word	0x431bde83

08000944 <SchedulerProcessesAutoEnable>:
 ****************************************************************************/
void SchedulerProcessesAutoEnable(void)
{
	uint8_t i;

	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000944:	2300      	movs	r3, #0
 8000946:	2b02      	cmp	r3, #2
 8000948:	d825      	bhi.n	8000996 <SchedulerProcessesAutoEnable+0x52>
{
 800094a:	b430      	push	{r4, r5}
 800094c:	e003      	b.n	8000956 <SchedulerProcessesAutoEnable+0x12>
	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 800094e:	3301      	adds	r3, #1
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b02      	cmp	r3, #2
 8000954:	d81d      	bhi.n	8000992 <SchedulerProcessesAutoEnable+0x4e>
	{
		schedulerProcess[i].uiTimeProcessCounter++;
 8000956:	4810      	ldr	r0, [pc, #64]	; (8000998 <SchedulerProcessesAutoEnable+0x54>)
 8000958:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800095c:	f3c2 010d 	ubfx	r1, r2, #0, #14
 8000960:	3101      	adds	r1, #1
 8000962:	f361 020d 	bfi	r2, r1, #0, #14
 8000966:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

		// If currentTaskTime it's enable, update 1000uS=1mS
		if (schedulerContext[i].taskActive == TRUE && schedulerContext[i].userEnabled == TRUE )
 800096a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800096e:	00d1      	lsls	r1, r2, #3
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <SchedulerProcessesAutoEnable+0x58>)
 8000972:	440a      	add	r2, r1
 8000974:	7d12      	ldrb	r2, [r2, #20]
 8000976:	2a00      	cmp	r2, #0
 8000978:	d0e9      	beq.n	800094e <SchedulerProcessesAutoEnable+0xa>
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <SchedulerProcessesAutoEnable+0x58>)
 800097c:	440a      	add	r2, r1
 800097e:	7d52      	ldrb	r2, [r2, #21]
 8000980:	2a00      	cmp	r2, #0
 8000982:	d0e4      	beq.n	800094e <SchedulerProcessesAutoEnable+0xa>
		{
			schedulerContext[i].currentTaskTime_us += 1000;
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <SchedulerProcessesAutoEnable+0x58>)
 8000986:	4401      	add	r1, r0
 8000988:	684a      	ldr	r2, [r1, #4]
 800098a:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 800098e:	604a      	str	r2, [r1, #4]
 8000990:	e7dd      	b.n	800094e <SchedulerProcessesAutoEnable+0xa>
		}
	}
}
 8000992:	bc30      	pop	{r4, r5}
 8000994:	4770      	bx	lr
 8000996:	4770      	bx	lr
 8000998:	2000031c 	.word	0x2000031c
 800099c:	200002d0 	.word	0x200002d0

080009a0 <SchedulerUpdateTaskTime>:
 * @brief  	Update average task time, maximum task time
 * @param   process, initTime, finalTime
 * @return  none
 ****************************************************************************/
void SchedulerUpdateTaskTime(int32_t initTimeTaskScheduler, int32_t finalTimeTaskScheduler)
{
 80009a0:	b4f0      	push	{r4, r5, r6, r7}
	uint64_t averageTaskTemp;
	schedulerContext[ptrTask].currentTaskTime_us += ((initTimeTaskScheduler - finalTimeTaskScheduler)/(int32_t)(ticks_per_us));
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <SchedulerUpdateTaskTime+0x48>)
 80009a4:	781a      	ldrb	r2, [r3, #0]
 80009a6:	1a41      	subs	r1, r0, r1
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <SchedulerUpdateTaskTime+0x4c>)
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	fb91 f1f0 	sdiv	r1, r1, r0
 80009b0:	4e0f      	ldr	r6, [pc, #60]	; (80009f0 <SchedulerUpdateTaskTime+0x50>)
 80009b2:	0053      	lsls	r3, r2, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	00dd      	lsls	r5, r3, #3
 80009b8:	1974      	adds	r4, r6, r5
 80009ba:	6863      	ldr	r3, [r4, #4]
 80009bc:	4419      	add	r1, r3
 80009be:	6061      	str	r1, [r4, #4]
	schedulerContext[ptrTask].cntTaskTime %= MAX_TASK_TIME_CNT;
 80009c0:	6923      	ldr	r3, [r4, #16]
 80009c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c6:	bf28      	it	cs
 80009c8:	3301      	addcs	r3, #1
	schedulerContext[ptrTask].cntTaskTime++;
 80009ca:	1c58      	adds	r0, r3, #1
 80009cc:	6120      	str	r0, [r4, #16]

	/* Calculate the average task time */
	averageTaskTemp = (uint64_t)(schedulerContext[ptrTask].averageTaskTime_us*(schedulerContext[ptrTask].cntTaskTime-1));
 80009ce:	5977      	ldr	r7, [r6, r5]
	schedulerContext[ptrTask].averageTaskTime_us = (uint32_t)(averageTaskTemp + schedulerContext[ptrTask].currentTaskTime_us) / schedulerContext[ptrTask].cntTaskTime;
 80009d0:	fb07 1303 	mla	r3, r7, r3, r1
 80009d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80009d8:	5173      	str	r3, [r6, r5]

    /* If current Task Time is higher than maximum, update maximum task time */
    if ( schedulerContext[ptrTask].currentTaskTime_us > schedulerContext[ptrTask].maximumTaskTime_us )
 80009da:	68a3      	ldr	r3, [r4, #8]
 80009dc:	4299      	cmp	r1, r3
 80009de:	d900      	bls.n	80009e2 <SchedulerUpdateTaskTime+0x42>
    {
    	schedulerContext[ptrTask].maximumTaskTime_us = schedulerContext[ptrTask].currentTaskTime_us;
 80009e0:	60a1      	str	r1, [r4, #8]
    }

}
 80009e2:	bcf0      	pop	{r4, r5, r6, r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000318 	.word	0x20000318
 80009ec:	200002cc 	.word	0x200002cc
 80009f0:	200002d0 	.word	0x200002d0

080009f4 <SchedulerExecuteSystemProcess>:
{
 80009f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	schedulerContext[ptrTask].currentTaskTime_us = 0;
 80009f8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000a54 <SchedulerExecuteSystemProcess+0x60>
 80009fc:	f898 1000 	ldrb.w	r1, [r8]
 8000a00:	4c11      	ldr	r4, [pc, #68]	; (8000a48 <SchedulerExecuteSystemProcess+0x54>)
 8000a02:	004b      	lsls	r3, r1, #1
 8000a04:	1858      	adds	r0, r3, r1
 8000a06:	00c2      	lsls	r2, r0, #3
 8000a08:	4422      	add	r2, r4
 8000a0a:	2700      	movs	r7, #0
 8000a0c:	6057      	str	r7, [r2, #4]
	initTimeTaskScheduler =  SYSTEM_TICK;
 8000a0e:	4e0f      	ldr	r6, [pc, #60]	; (8000a4c <SchedulerExecuteSystemProcess+0x58>)
 8000a10:	68b5      	ldr	r5, [r6, #8]
	schedulerContext[ptrTask].taskActive = TRUE;
 8000a12:	2001      	movs	r0, #1
 8000a14:	7510      	strb	r0, [r2, #20]
    (*(SchedulerInstanceMap[ptrTask].CallProcess))();
 8000a16:	440b      	add	r3, r1
 8000a18:	009a      	lsls	r2, r3, #2
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <SchedulerExecuteSystemProcess+0x5c>)
 8000a1c:	4413      	add	r3, r2
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	4798      	blx	r3
	schedulerContext[ptrTask].taskActive = FALSE;
 8000a22:	f898 0000 	ldrb.w	r0, [r8]
 8000a26:	0043      	lsls	r3, r0, #1
 8000a28:	1819      	adds	r1, r3, r0
 8000a2a:	00ca      	lsls	r2, r1, #3
 8000a2c:	4422      	add	r2, r4
 8000a2e:	7517      	strb	r7, [r2, #20]
    finalTimeTaskScheduler = SYSTEM_TICK;
 8000a30:	68b1      	ldr	r1, [r6, #8]
    if ( schedulerContext[ptrTask].userEnabled == TRUE )
 8000a32:	4403      	add	r3, r0
 8000a34:	00da      	lsls	r2, r3, #3
 8000a36:	4414      	add	r4, r2
 8000a38:	7d63      	ldrb	r3, [r4, #21]
 8000a3a:	b90b      	cbnz	r3, 8000a40 <SchedulerExecuteSystemProcess+0x4c>
 8000a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	SchedulerUpdateTaskTime(initTimeTaskScheduler, finalTimeTaskScheduler);
 8000a40:	4628      	mov	r0, r5
 8000a42:	f7ff ffad 	bl	80009a0 <SchedulerUpdateTaskTime>
}
 8000a46:	e7f9      	b.n	8000a3c <SchedulerExecuteSystemProcess+0x48>
 8000a48:	200002d0 	.word	0x200002d0
 8000a4c:	e000e010 	.word	0xe000e010
 8000a50:	08005450 	.word	0x08005450
 8000a54:	20000318 	.word	0x20000318

08000a58 <SchedulerNextSystemProcess>:
{
 8000a58:	b570      	push	{r4, r5, r6, lr}
    uint8_t i			= 0;
 8000a5a:	2400      	movs	r4, #0
    bool taskExecuted	= FALSE;
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	e028      	b.n	8000ab2 <SchedulerNextSystemProcess+0x5a>
			if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE )
 8000a60:	2a00      	cmp	r2, #0
 8000a62:	d150      	bne.n	8000b06 <SchedulerNextSystemProcess+0xae>
				schedulerProcess[ptrTask].uiTimeProcessCounter = 0;
 8000a64:	4a2c      	ldr	r2, [pc, #176]	; (8000b18 <SchedulerNextSystemProcess+0xc0>)
 8000a66:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a6a:	f36f 010d 	bfc	r1, #0, #14
 8000a6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (schedulerContext[ptrTask].maxDelayProcessCtn < (schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess))
 8000a72:	005a      	lsls	r2, r3, #1
 8000a74:	18d1      	adds	r1, r2, r3
 8000a76:	00c8      	lsls	r0, r1, #3
 8000a78:	4928      	ldr	r1, [pc, #160]	; (8000b1c <SchedulerNextSystemProcess+0xc4>)
 8000a7a:	4401      	add	r1, r0
 8000a7c:	898d      	ldrh	r5, [r1, #12]
 8000a7e:	4926      	ldr	r1, [pc, #152]	; (8000b18 <SchedulerNextSystemProcess+0xc0>)
 8000a80:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000a84:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000a88:	441a      	add	r2, r3
 8000a8a:	0090      	lsls	r0, r2, #2
 8000a8c:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <SchedulerNextSystemProcess+0xc8>)
 8000a8e:	4402      	add	r2, r0
 8000a90:	8912      	ldrh	r2, [r2, #8]
 8000a92:	1a88      	subs	r0, r1, r2
 8000a94:	4285      	cmp	r5, r0
 8000a96:	da05      	bge.n	8000aa4 <SchedulerNextSystemProcess+0x4c>
				schedulerContext[ptrTask].maxDelayProcessCtn = schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess;
 8000a98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a9c:	00da      	lsls	r2, r3, #3
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <SchedulerNextSystemProcess+0xc4>)
 8000aa0:	4413      	add	r3, r2
 8000aa2:	8198      	strh	r0, [r3, #12]
			SchedulerExecuteSystemProcess();
 8000aa4:	f7ff ffa6 	bl	80009f4 <SchedulerExecuteSystemProcess>
			taskExecuted = TRUE;
 8000aa8:	2001      	movs	r0, #1
	while ( ( taskExecuted == FALSE ) && ( i <= NUM_OF_SCHED_TASKS ) );
 8000aaa:	2800      	cmp	r0, #0
 8000aac:	d133      	bne.n	8000b16 <SchedulerNextSystemProcess+0xbe>
 8000aae:	2c03      	cmp	r4, #3
 8000ab0:	d831      	bhi.n	8000b16 <SchedulerNextSystemProcess+0xbe>
        i++;
 8000ab2:	3401      	adds	r4, #1
 8000ab4:	b2e4      	uxtb	r4, r4
        ptrTask++;
 8000ab6:	491b      	ldr	r1, [pc, #108]	; (8000b24 <SchedulerNextSystemProcess+0xcc>)
 8000ab8:	780b      	ldrb	r3, [r1, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	b2db      	uxtb	r3, r3
		ptrTask %= NUM_OF_SCHED_TASKS;
 8000abe:	4a1a      	ldr	r2, [pc, #104]	; (8000b28 <SchedulerNextSystemProcess+0xd0>)
 8000ac0:	fba2 5203 	umull	r5, r2, r2, r3
 8000ac4:	0852      	lsrs	r2, r2, #1
 8000ac6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000aca:	1a9b      	subs	r3, r3, r2
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	700b      	strb	r3, [r1, #0]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000ad0:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <SchedulerNextSystemProcess+0xc0>)
 8000ad2:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000ad6:	7852      	ldrb	r2, [r2, #1]
 8000ad8:	09d2      	lsrs	r2, r2, #7
 8000ada:	d1c1      	bne.n	8000a60 <SchedulerNextSystemProcess+0x8>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000adc:	490e      	ldr	r1, [pc, #56]	; (8000b18 <SchedulerNextSystemProcess+0xc0>)
 8000ade:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8000ae2:	7849      	ldrb	r1, [r1, #1]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000ae4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000ae8:	d0df      	beq.n	8000aaa <SchedulerNextSystemProcess+0x52>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000aea:	490b      	ldr	r1, [pc, #44]	; (8000b18 <SchedulerNextSystemProcess+0xc0>)
 8000aec:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000af0:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000af4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8000af8:	00ae      	lsls	r6, r5, #2
 8000afa:	4d09      	ldr	r5, [pc, #36]	; (8000b20 <SchedulerNextSystemProcess+0xc8>)
 8000afc:	4435      	add	r5, r6
 8000afe:	892d      	ldrh	r5, [r5, #8]
 8000b00:	42a9      	cmp	r1, r5
 8000b02:	dbd2      	blt.n	8000aaa <SchedulerNextSystemProcess+0x52>
 8000b04:	e7ac      	b.n	8000a60 <SchedulerNextSystemProcess+0x8>
				schedulerProcess[ptrTask].bEnabledUrgentSystemTask = FALSE;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <SchedulerNextSystemProcess+0xc0>)
 8000b08:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000b0c:	7851      	ldrb	r1, [r2, #1]
 8000b0e:	f36f 11c7 	bfc	r1, #7, #1
 8000b12:	7051      	strb	r1, [r2, #1]
 8000b14:	e7ad      	b.n	8000a72 <SchedulerNextSystemProcess+0x1a>
}
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	2000031c 	.word	0x2000031c
 8000b1c:	200002d0 	.word	0x200002d0
 8000b20:	08005450 	.word	0x08005450
 8000b24:	20000318 	.word	0x20000318
 8000b28:	aaaaaaab 	.word	0xaaaaaaab

08000b2c <checkCondition>:
 * @param  instance of fsm
 * @param  index of transition
 * @return TRUE or FALSE
 ****************************************************************************/
static tBool checkCondition( tFsm * fsm,uint8_t trans)
{
 8000b2c:	b508      	push	{r3, lr}
	tBool value = TRUE;

	if ( fsm->listState[fsm->currentState].state->transition[trans].condition != NULL)
 8000b2e:	6883      	ldr	r3, [r0, #8]
 8000b30:	7c82      	ldrb	r2, [r0, #18]
 8000b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b36:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000b3a:	004a      	lsls	r2, r1, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8000b42:	b113      	cbz	r3, 8000b4a <checkCondition+0x1e>
	{
		uint8_t numFsm = fsm->numFsm;
		value = fsm->listState[fsm->currentState].state->transition[trans].condition(numFsm);
 8000b44:	7800      	ldrb	r0, [r0, #0]
 8000b46:	4798      	blx	r3
 8000b48:	bd08      	pop	{r3, pc}
	tBool value = TRUE;
 8000b4a:	2001      	movs	r0, #1
	}


	return value;
}
 8000b4c:	bd08      	pop	{r3, pc}
	...

08000b50 <checkEvent>:
 * @return TRUE or FALSE
 ****************************************************************************/
static tBool checkEvent( uint8_t instance,uint8_t eventId)
{
	tBool value = FALSE;
	if (eventId < fsmContext[instance].fsm->numOfEvents)
 8000b50:	0103      	lsls	r3, r0, #4
 8000b52:	4a16      	ldr	r2, [pc, #88]	; (8000bac <checkEvent+0x5c>)
 8000b54:	58d3      	ldr	r3, [r2, r3]
 8000b56:	7c1a      	ldrb	r2, [r3, #16]
 8000b58:	428a      	cmp	r2, r1
 8000b5a:	d90e      	bls.n	8000b7a <checkEvent+0x2a>
	{
		switch (fsmContext[instance].fsm->event[eventId].type)
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8000b62:	790b      	ldrb	r3, [r1, #4]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d004      	beq.n	8000b72 <checkEvent+0x22>
 8000b68:	b1cb      	cbz	r3, 8000b9e <checkEvent+0x4e>
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d003      	beq.n	8000b76 <checkEvent+0x26>
	tBool value = FALSE;
 8000b6e:	2000      	movs	r0, #0
 8000b70:	4770      	bx	lr
		{
			case ANY:
				value = TRUE;
				break;
			case TIMING:
				value = fsmContext[instance].fsm->event[eventId].value;
 8000b72:	7b08      	ldrb	r0, [r1, #12]
				break;
 8000b74:	4770      	bx	lr
			case CALLBACK:
				value = fsmContext[instance].fsm->event[eventId].value;
 8000b76:	7b08      	ldrb	r0, [r1, #12]
				break;
 8000b78:	4770      	bx	lr
			default:
				break;
		}
	} else if(eventId == DO_EVENT)
 8000b7a:	29ff      	cmp	r1, #255	; 0xff
 8000b7c:	d001      	beq.n	8000b82 <checkEvent+0x32>
	tBool value = FALSE;
 8000b7e:	2000      	movs	r0, #0
 8000b80:	4770      	bx	lr
	{
		if(((fsmContext[instance].timeElapsed%fsmContext[instance].loopTiming)==0) || (fsmContext[instance].timeElapsed == 1))
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <checkEvent+0x5c>)
 8000b84:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8000b88:	68c2      	ldr	r2, [r0, #12]
 8000b8a:	8901      	ldrh	r1, [r0, #8]
 8000b8c:	fbb2 f3f1 	udiv	r3, r2, r1
 8000b90:	fb01 2313 	mls	r3, r1, r3, r2
 8000b94:	b12b      	cbz	r3, 8000ba2 <checkEvent+0x52>
 8000b96:	2a01      	cmp	r2, #1
 8000b98:	d005      	beq.n	8000ba6 <checkEvent+0x56>
	tBool value = FALSE;
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	4770      	bx	lr
				value = TRUE;
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	4770      	bx	lr
		{
			value = TRUE;
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4770      	bx	lr
 8000ba6:	2001      	movs	r0, #1
		}
	}
	return value;
}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000118 	.word	0x20000118

08000bb0 <checkAction>:
 * @param  instance of fsm
 * @param  index of transition
 * @return RET_OK or RET_FAIL
 ****************************************************************************/
static eError checkAction (tFsm * fsm,uint8_t trans)
{
 8000bb0:	b508      	push	{r3, lr}
	eError retValue = RET_OK;

	if ( fsm->listState[fsm->currentState].state->transition[trans].action != NULL)
 8000bb2:	6883      	ldr	r3, [r0, #8]
 8000bb4:	7c82      	ldrb	r2, [r0, #18]
 8000bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bba:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000bbe:	004a      	lsls	r2, r1, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8000bc6:	b113      	cbz	r3, 8000bce <checkAction+0x1e>
	{
		uint8_t numFsm = fsm->numFsm;
		retValue = fsm->listState[fsm->currentState].state->transition[trans].action(numFsm);
 8000bc8:	7800      	ldrb	r0, [r0, #0]
 8000bca:	4798      	blx	r3
 8000bcc:	bd08      	pop	{r3, pc}
	eError retValue = RET_OK;
 8000bce:	2000      	movs	r0, #0
	}

	return retValue;
}
 8000bd0:	bd08      	pop	{r3, pc}

08000bd2 <checkExitAction>:
/*****************************************************************************
 * @brief  call the action function linked to exit action of the state
 * @param  instance of fsm
 ****************************************************************************/
static void checkExitAction(tFsm * fsm)
{
 8000bd2:	b508      	push	{r3, lr}
	if ( fsm->listState[fsm->currentState].state->exitAction != NULL)
 8000bd4:	6883      	ldr	r3, [r0, #8]
 8000bd6:	7c82      	ldrb	r2, [r0, #18]
 8000bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	b10b      	cbz	r3, 8000be4 <checkExitAction+0x12>
	{
		uint8_t numFsm = fsm->numFsm;
		fsm->listState[fsm->currentState].state->exitAction(numFsm);
 8000be0:	7800      	ldrb	r0, [r0, #0]
 8000be2:	4798      	blx	r3
 8000be4:	bd08      	pop	{r3, pc}

08000be6 <checkEntryAction>:
/*****************************************************************************
 * @brief  call the action function linked to entry action of the state
 * @param  instance of fsm
 ****************************************************************************/
static void checkEntryAction(tFsm * fsm)
{
 8000be6:	b508      	push	{r3, lr}
	if ( fsm->listState[fsm->currentState].state->entryAction != NULL)
 8000be8:	6883      	ldr	r3, [r0, #8]
 8000bea:	7c82      	ldrb	r2, [r0, #18]
 8000bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	b10b      	cbz	r3, 8000bf8 <checkEntryAction+0x12>
	{
		uint8_t numFsm = fsm->numFsm;
		fsm->listState[fsm->currentState].state->entryAction(numFsm);
 8000bf4:	7800      	ldrb	r0, [r0, #0]
 8000bf6:	4798      	blx	r3
 8000bf8:	bd08      	pop	{r3, pc}

08000bfa <clearEvents>:
 ****************************************************************************/
static void clearEvents(tFsm * fsm)
{
	uint8_t i;

	for (i=0;i<fsm->numOfEvents;i++)
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e006      	b.n	8000c0c <clearEvents+0x12>
	{
		fsm->event[i].value = FALSE;
 8000bfe:	68c2      	ldr	r2, [r0, #12]
 8000c00:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000c04:	2100      	movs	r1, #0
 8000c06:	7311      	strb	r1, [r2, #12]
	for (i=0;i<fsm->numOfEvents;i++)
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	7c02      	ldrb	r2, [r0, #16]
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d3f5      	bcc.n	8000bfe <clearEvents+0x4>
	}

}
 8000c12:	4770      	bx	lr

08000c14 <clearEvent>:
 * @param  instance of fsm
 * @param  Event Id
 ****************************************************************************/
static void clearEvent(tFsm * fsm,uint8_t event_id)
{
	fsm->event[event_id].value = FALSE;
 8000c14:	68c3      	ldr	r3, [r0, #12]
 8000c16:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	730b      	strb	r3, [r1, #12]
 8000c1e:	4770      	bx	lr

08000c20 <checkTimingEvents>:
/*****************************************************************************
 * @brief  The algorithm evaluates the Time Events to check if the timeOut expired
 * @param  instance of fsm
 ****************************************************************************/
static void checkTimingEvents(uint8_t instance)
{
 8000c20:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t var;
	for (var = 0; var < fsmContext[instance].fsm->numOfEvents; ++var)
 8000c22:	2300      	movs	r3, #0
 8000c24:	e001      	b.n	8000c2a <checkTimingEvents+0xa>
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	0102      	lsls	r2, r0, #4
 8000c2c:	4911      	ldr	r1, [pc, #68]	; (8000c74 <checkTimingEvents+0x54>)
 8000c2e:	588a      	ldr	r2, [r1, r2]
 8000c30:	7c11      	ldrb	r1, [r2, #16]
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d21c      	bcs.n	8000c70 <checkTimingEvents+0x50>
	{
		if (fsmContext[instance].fsm->event[var].type == TIMING)
 8000c36:	68d2      	ldr	r2, [r2, #12]
 8000c38:	0119      	lsls	r1, r3, #4
 8000c3a:	440a      	add	r2, r1
 8000c3c:	7914      	ldrb	r4, [r2, #4]
 8000c3e:	2c01      	cmp	r4, #1
 8000c40:	d1f1      	bne.n	8000c26 <checkTimingEvents+0x6>
		{
			fsmContext[instance].fsm->event[var].value = ((fsmContext[instance].timeElapsed%fsmContext[instance].fsm->event[var].timeOut)==0);
 8000c42:	4f0c      	ldr	r7, [pc, #48]	; (8000c74 <checkTimingEvents+0x54>)
 8000c44:	0106      	lsls	r6, r0, #4
 8000c46:	19bd      	adds	r5, r7, r6
 8000c48:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8000c4c:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8000c50:	fbbc f4fe 	udiv	r4, ip, lr
 8000c54:	fb0e c414 	mls	r4, lr, r4, ip
 8000c58:	fab4 f484 	clz	r4, r4
 8000c5c:	0964      	lsrs	r4, r4, #5
 8000c5e:	7314      	strb	r4, [r2, #12]
			fsmContext[instance].newEvent |= fsmContext[instance].fsm->event[var].value;
 8000c60:	59ba      	ldr	r2, [r7, r6]
 8000c62:	68d2      	ldr	r2, [r2, #12]
 8000c64:	4411      	add	r1, r2
 8000c66:	7b0a      	ldrb	r2, [r1, #12]
 8000c68:	79a9      	ldrb	r1, [r5, #6]
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	71aa      	strb	r2, [r5, #6]
 8000c6e:	e7da      	b.n	8000c26 <checkTimingEvents+0x6>
		}
	}

}
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000118 	.word	0x20000118

08000c78 <checkDestination>:
{
 8000c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c7c:	b086      	sub	sp, #24
	if (stateDestination < fsmContext[instance].fsm->numOfStates)
 8000c7e:	0103      	lsls	r3, r0, #4
 8000c80:	4c26      	ldr	r4, [pc, #152]	; (8000d1c <checkDestination+0xa4>)
 8000c82:	58e3      	ldr	r3, [r4, r3]
 8000c84:	7c5c      	ldrb	r4, [r3, #17]
 8000c86:	428c      	cmp	r4, r1
 8000c88:	d803      	bhi.n	8000c92 <checkDestination+0x1a>
	tBool value = FALSE;
 8000c8a:	2000      	movs	r0, #0
}
 8000c8c:	b006      	add	sp, #24
 8000c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c92:	4616      	mov	r6, r2
 8000c94:	460d      	mov	r5, r1
 8000c96:	4604      	mov	r4, r0
		checkExitAction(fsmContext[instance].fsm);
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff9a 	bl	8000bd2 <checkExitAction>
		fsmContext[instance].timeElapsed = 0;
 8000c9e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000d1c <checkDestination+0xa4>
 8000ca2:	0127      	lsls	r7, r4, #4
 8000ca4:	eb08 0307 	add.w	r3, r8, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
		fsmContext[instance].newEvent = TRUE;
 8000cac:	2201      	movs	r2, #1
 8000cae:	719a      	strb	r2, [r3, #6]
		clearEvents(fsmContext[instance].fsm);
 8000cb0:	f858 0007 	ldr.w	r0, [r8, r7]
 8000cb4:	f7ff ffa1 	bl	8000bfa <clearEvents>
		if ((fsmContext[instance].fsm->logEnable & FSM_TRACE) == FSM_TRACE)
 8000cb8:	f858 3007 	ldr.w	r3, [r8, r7]
 8000cbc:	7e1a      	ldrb	r2, [r3, #24]
 8000cbe:	f012 0f02 	tst.w	r2, #2
 8000cc2:	d118      	bne.n	8000cf6 <checkDestination+0x7e>
		fsmContext[instance].fsm->currentState = stateDestination;
 8000cc4:	4f15      	ldr	r7, [pc, #84]	; (8000d1c <checkDestination+0xa4>)
 8000cc6:	0124      	lsls	r4, r4, #4
 8000cc8:	593b      	ldr	r3, [r7, r4]
 8000cca:	749d      	strb	r5, [r3, #18]
		my_printf((fsmContext[instance].fsm->logEnable & FSM_LOG) == FSM_LOG,VERBOSE_GENERAL, "FSM %s num : %d Transition %d change State %s.\n",fsmContext[instance].fsm->name,fsmContext[instance].fsm->numFsm,transition,fsmContext[instance].fsm->listState[stateDestination].state->StateName);
 8000ccc:	593b      	ldr	r3, [r7, r4]
 8000cce:	7e18      	ldrb	r0, [r3, #24]
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	6899      	ldr	r1, [r3, #8]
 8000cd4:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	6809      	ldr	r1, [r1, #0]
 8000cdc:	9102      	str	r1, [sp, #8]
 8000cde:	9601      	str	r6, [sp, #4]
 8000ce0:	9200      	str	r2, [sp, #0]
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <checkDestination+0xa8>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4008      	ands	r0, r1
 8000ce8:	f000 f9c1 	bl	800106e <my_printf>
		checkEntryAction(fsmContext[instance].fsm);
 8000cec:	5938      	ldr	r0, [r7, r4]
 8000cee:	f7ff ff7a 	bl	8000be6 <checkEntryAction>
		value = TRUE;
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	e7ca      	b.n	8000c8c <checkDestination+0x14>
			BufferSetData8(buffer, 0, instance);
 8000cf6:	f88d 4010 	strb.w	r4, [sp, #16]
			BufferSetData8(buffer, 1, FSM_TRACE_TRANSITION);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f88d 2011 	strb.w	r2, [sp, #17]
			BufferSetData8(buffer, 2, fsmContext[instance].fsm->currentState);
 8000d00:	7c9b      	ldrb	r3, [r3, #18]
 8000d02:	f88d 3012 	strb.w	r3, [sp, #18]
			BufferSetData8(buffer, 3, transition);
 8000d06:	f88d 6013 	strb.w	r6, [sp, #19]
			BufferSetData8(buffer, 4, stateDestination);
 8000d0a:	f88d 5014 	strb.w	r5, [sp, #20]
			my_printTraceBin(FSM_PARAMETERS*10 + PROTOCOL_DEVICE_INSTANCE,buffer,5);
 8000d0e:	2205      	movs	r2, #5
 8000d10:	a904      	add	r1, sp, #16
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f9bc 	bl	8001090 <my_printTraceBin>
 8000d18:	e7d4      	b.n	8000cc4 <checkDestination+0x4c>
 8000d1a:	bf00      	nop
 8000d1c:	20000118 	.word	0x20000118
 8000d20:	08005498 	.word	0x08005498

08000d24 <executeFsm>:
{
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	4680      	mov	r8, r0
	currentState = fsmContext[instance].fsm->currentState;
 8000d2a:	4607      	mov	r7, r0
 8000d2c:	0103      	lsls	r3, r0, #4
 8000d2e:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <executeFsm+0xa8>)
 8000d30:	58d3      	ldr	r3, [r2, r3]
 8000d32:	f893 a012 	ldrb.w	sl, [r3, #18]
	tBool changeState = FALSE;
 8000d36:	f04f 0900 	mov.w	r9, #0
	uint8_t i =0,currentState;
 8000d3a:	464c      	mov	r4, r9
	while (i<fsmContext[instance].fsm->listState[currentState].state->numOfTransition && !changeState)
 8000d3c:	e00e      	b.n	8000d5c <executeFsm+0x38>
					clearEvent(fsmContext[instance].fsm,fsmContext[instance].fsm->listState[currentState].state->transition[i].eventId);
 8000d3e:	013b      	lsls	r3, r7, #4
 8000d40:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <executeFsm+0xa8>)
 8000d42:	58d0      	ldr	r0, [r2, r3]
 8000d44:	6883      	ldr	r3, [r0, #8]
 8000d46:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8000d4a:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8000d4e:	0072      	lsls	r2, r6, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	7b59      	ldrb	r1, [r3, #13]
 8000d54:	f7ff ff5e 	bl	8000c14 <clearEvent>
		i++;
 8000d58:	3401      	adds	r4, #1
 8000d5a:	b2e4      	uxtb	r4, r4
	while (i<fsmContext[instance].fsm->listState[currentState].state->numOfTransition && !changeState)
 8000d5c:	013b      	lsls	r3, r7, #4
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <executeFsm+0xa8>)
 8000d60:	58d5      	ldr	r5, [r2, r3]
 8000d62:	68ab      	ldr	r3, [r5, #8]
 8000d64:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8000d68:	7b1a      	ldrb	r2, [r3, #12]
 8000d6a:	4294      	cmp	r4, r2
 8000d6c:	d22b      	bcs.n	8000dc6 <executeFsm+0xa2>
 8000d6e:	f1b9 0f00 	cmp.w	r9, #0
 8000d72:	d128      	bne.n	8000dc6 <executeFsm+0xa2>
		if (checkEvent(instance,fsmContext[instance].fsm->listState[currentState].state->transition[i].eventId))
 8000d74:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8000d78:	004a      	lsls	r2, r1, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	7b59      	ldrb	r1, [r3, #13]
 8000d7e:	4640      	mov	r0, r8
 8000d80:	f7ff fee6 	bl	8000b50 <checkEvent>
 8000d84:	2800      	cmp	r0, #0
 8000d86:	d0e7      	beq.n	8000d58 <executeFsm+0x34>
			if (checkCondition(fsmContext[instance].fsm,i))
 8000d88:	4621      	mov	r1, r4
 8000d8a:	4628      	mov	r0, r5
 8000d8c:	f7ff fece 	bl	8000b2c <checkCondition>
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d0e1      	beq.n	8000d58 <executeFsm+0x34>
				eError retAction = checkAction(fsmContext[instance].fsm,i);
 8000d94:	013b      	lsls	r3, r7, #4
 8000d96:	4621      	mov	r1, r4
 8000d98:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <executeFsm+0xa8>)
 8000d9a:	58d0      	ldr	r0, [r2, r3]
 8000d9c:	f7ff ff08 	bl	8000bb0 <checkAction>
				if (retAction == RET_OK)
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d1cc      	bne.n	8000d3e <executeFsm+0x1a>
					changeState = checkDestination(instance,fsmContext[instance].fsm->listState[currentState].state->transition[i].destination,i);
 8000da4:	013b      	lsls	r3, r7, #4
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <executeFsm+0xa8>)
 8000da8:	58d3      	ldr	r3, [r2, r3]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8000db0:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8000db4:	0072      	lsls	r2, r6, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	4622      	mov	r2, r4
 8000dba:	7d99      	ldrb	r1, [r3, #22]
 8000dbc:	4640      	mov	r0, r8
 8000dbe:	f7ff ff5b 	bl	8000c78 <checkDestination>
 8000dc2:	4681      	mov	r9, r0
 8000dc4:	e7c8      	b.n	8000d58 <executeFsm+0x34>
}
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	20000118 	.word	0x20000118

08000dd0 <startFsm>:
{
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	b083      	sub	sp, #12
	fsmContext[instance].fsm->currentState = fsmContext[instance].fsm->initState;
 8000dd4:	4d10      	ldr	r5, [pc, #64]	; (8000e18 <startFsm+0x48>)
 8000dd6:	0104      	lsls	r4, r0, #4
 8000dd8:	192f      	adds	r7, r5, r4
 8000dda:	592b      	ldr	r3, [r5, r4]
 8000ddc:	7cda      	ldrb	r2, [r3, #19]
 8000dde:	749a      	strb	r2, [r3, #18]
	fsmContext[instance].timeElapsed = 0;
 8000de0:	2600      	movs	r6, #0
 8000de2:	60fe      	str	r6, [r7, #12]
	my_printf((fsmContext[instance].fsm->logEnable & FSM_LOG) == FSM_LOG,VERBOSE_GENERAL, "FSM : %s num : %d init setToState %s.\n",fsmContext[instance].fsm->name,fsmContext[instance].fsm->numFsm,fsmContext[instance].fsm->listState[fsmContext[instance].fsm->currentState].state->StateName);
 8000de4:	592b      	ldr	r3, [r5, r4]
 8000de6:	7e18      	ldrb	r0, [r3, #24]
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	6899      	ldr	r1, [r3, #8]
 8000dec:	f893 e012 	ldrb.w	lr, [r3, #18]
 8000df0:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	6809      	ldr	r1, [r1, #0]
 8000df8:	9101      	str	r1, [sp, #4]
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <startFsm+0x4c>)
 8000dfe:	2101      	movs	r1, #1
 8000e00:	4008      	ands	r0, r1
 8000e02:	f000 f934 	bl	800106e <my_printf>
	fsmContext[instance].started = TRUE;
 8000e06:	2301      	movs	r3, #1
 8000e08:	717b      	strb	r3, [r7, #5]
	checkEntryAction(fsmContext[instance].fsm);
 8000e0a:	5928      	ldr	r0, [r5, r4]
 8000e0c:	f7ff feeb 	bl	8000be6 <checkEntryAction>
}
 8000e10:	4630      	mov	r0, r6
 8000e12:	b003      	add	sp, #12
 8000e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000118 	.word	0x20000118
 8000e1c:	080054c8 	.word	0x080054c8

08000e20 <initFsm>:
	for (var = 0; var < MAX_NUM_OF_FSM; ++var) {
 8000e20:	2200      	movs	r2, #0
 8000e22:	e00a      	b.n	8000e3a <initFsm+0x1a>
		fsmContext[var].configured = FALSE;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <initFsm+0x20>)
 8000e26:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	7119      	strb	r1, [r3, #4]
		fsmContext[var].loopTiming = 0;
 8000e2e:	8119      	strh	r1, [r3, #8]
		fsmContext[var].newEvent = FALSE;
 8000e30:	7199      	strb	r1, [r3, #6]
		fsmContext[var].started = FALSE;
 8000e32:	7159      	strb	r1, [r3, #5]
		fsmContext[var].timeElapsed = 0;
 8000e34:	60d9      	str	r1, [r3, #12]
	for (var = 0; var < MAX_NUM_OF_FSM; ++var) {
 8000e36:	3201      	adds	r2, #1
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	2a13      	cmp	r2, #19
 8000e3c:	d9f2      	bls.n	8000e24 <initFsm+0x4>
}
 8000e3e:	4770      	bx	lr
 8000e40:	20000118 	.word	0x20000118

08000e44 <callFsmTask>:
{
 8000e44:	b570      	push	{r4, r5, r6, lr}
	for (var = 0; var < MAX_NUM_OF_FSM; ++var)
 8000e46:	2400      	movs	r4, #0
 8000e48:	e009      	b.n	8000e5e <callFsmTask+0x1a>
				fsmContext[var].newEvent = FALSE;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <callFsmTask+0x64>)
 8000e4c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 8000e50:	2300      	movs	r3, #0
 8000e52:	71ab      	strb	r3, [r5, #6]
				executeFsm(var);
 8000e54:	4620      	mov	r0, r4
 8000e56:	f7ff ff65 	bl	8000d24 <executeFsm>
	for (var = 0; var < MAX_NUM_OF_FSM; ++var)
 8000e5a:	3401      	adds	r4, #1
 8000e5c:	b2e4      	uxtb	r4, r4
 8000e5e:	2c13      	cmp	r4, #19
 8000e60:	d821      	bhi.n	8000ea6 <callFsmTask+0x62>
		if (fsmContext[var].configured && fsmContext[var].started)
 8000e62:	4625      	mov	r5, r4
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <callFsmTask+0x64>)
 8000e66:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000e6a:	791b      	ldrb	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0f4      	beq.n	8000e5a <callFsmTask+0x16>
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <callFsmTask+0x64>)
 8000e72:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000e76:	795b      	ldrb	r3, [r3, #5]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0ee      	beq.n	8000e5a <callFsmTask+0x16>
			fsmContext[var].timeElapsed ++;
 8000e7c:	4e0a      	ldr	r6, [pc, #40]	; (8000ea8 <callFsmTask+0x64>)
 8000e7e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8000e82:	68f3      	ldr	r3, [r6, #12]
 8000e84:	3301      	adds	r3, #1
 8000e86:	60f3      	str	r3, [r6, #12]
			checkTimingEvents(var);
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff fec9 	bl	8000c20 <checkTimingEvents>
			if ((fsmContext[var].timeElapsed%fsmContext[var].loopTiming)==0 || fsmContext[var].newEvent)
 8000e8e:	68f1      	ldr	r1, [r6, #12]
 8000e90:	8932      	ldrh	r2, [r6, #8]
 8000e92:	fbb1 f3f2 	udiv	r3, r1, r2
 8000e96:	fb02 1313 	mls	r3, r2, r3, r1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0d5      	beq.n	8000e4a <callFsmTask+0x6>
 8000e9e:	79b3      	ldrb	r3, [r6, #6]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0da      	beq.n	8000e5a <callFsmTask+0x16>
 8000ea4:	e7d1      	b.n	8000e4a <callFsmTask+0x6>
}
 8000ea6:	bd70      	pop	{r4, r5, r6, pc}
 8000ea8:	20000118 	.word	0x20000118

08000eac <configureFsm>:
	tBool found = FALSE;
 8000eac:	2200      	movs	r2, #0
	uint8_t var =0;
 8000eae:	4613      	mov	r3, r2
	while (var<MAX_NUM_OF_FSM && !found)
 8000eb0:	e008      	b.n	8000ec4 <configureFsm+0x18>
		found = !fsmContext[var].configured;
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <configureFsm+0x4c>)
 8000eb4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000eb8:	7912      	ldrb	r2, [r2, #4]
 8000eba:	fab2 f282 	clz	r2, r2
 8000ebe:	0952      	lsrs	r2, r2, #5
		var++;
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b2db      	uxtb	r3, r3
	while (var<MAX_NUM_OF_FSM && !found)
 8000ec4:	2b13      	cmp	r3, #19
 8000ec6:	d801      	bhi.n	8000ecc <configureFsm+0x20>
 8000ec8:	2a00      	cmp	r2, #0
 8000eca:	d0f2      	beq.n	8000eb2 <configureFsm+0x6>
	var--;
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	b2db      	uxtb	r3, r3
	if (found)
 8000ed0:	b16a      	cbz	r2, 8000eee <configureFsm+0x42>
{
 8000ed2:	b430      	push	{r4, r5}
		fsmContext[var].fsm = fsm;
 8000ed4:	4d08      	ldr	r5, [pc, #32]	; (8000ef8 <configureFsm+0x4c>)
 8000ed6:	011c      	lsls	r4, r3, #4
 8000ed8:	192a      	adds	r2, r5, r4
 8000eda:	5128      	str	r0, [r5, r4]
		fsmContext[var].configured = TRUE;
 8000edc:	2001      	movs	r0, #1
 8000ede:	7110      	strb	r0, [r2, #4]
		fsmContext[var].loopTiming = loopTiming;
 8000ee0:	8111      	strh	r1, [r2, #8]
		ret = RET_OK;
 8000ee2:	2200      	movs	r2, #0
	if (ret!=RET_OK)
 8000ee4:	b102      	cbz	r2, 8000ee8 <configureFsm+0x3c>
		var = 255;
 8000ee6:	23ff      	movs	r3, #255	; 0xff
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	bc30      	pop	{r4, r5}
 8000eec:	4770      	bx	lr
	eError ret = RET_FAIL;
 8000eee:	2201      	movs	r2, #1
	if (ret!=RET_OK)
 8000ef0:	b102      	cbz	r2, 8000ef4 <configureFsm+0x48>
		var = 255;
 8000ef2:	23ff      	movs	r3, #255	; 0xff
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	4770      	bx	lr
 8000ef8:	20000118 	.word	0x20000118

08000efc <resetFsm>:
	if (fsmContext[instance].configured)
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <resetFsm+0x24>)
 8000efe:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000f02:	791b      	ldrb	r3, [r3, #4]
 8000f04:	b90b      	cbnz	r3, 8000f0a <resetFsm+0xe>
	eError ret = RET_FAIL;
 8000f06:	2001      	movs	r0, #1
 8000f08:	4770      	bx	lr
{
 8000f0a:	b510      	push	{r4, lr}
 8000f0c:	4604      	mov	r4, r0
		clearEvents(fsmContext[instance].fsm);
 8000f0e:	0103      	lsls	r3, r0, #4
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <resetFsm+0x24>)
 8000f12:	58d0      	ldr	r0, [r2, r3]
 8000f14:	f7ff fe71 	bl	8000bfa <clearEvents>
		ret = startFsm(instance);
 8000f18:	4620      	mov	r0, r4
 8000f1a:	f7ff ff59 	bl	8000dd0 <startFsm>
 8000f1e:	bd10      	pop	{r4, pc}
 8000f20:	20000118 	.word	0x20000118

08000f24 <announceFsmEvent>:
	if (fsmContext[instance].configured && fsmContext[instance].started && fsmContext[instance].fsm->event[eventId].type==CALLBACK)
 8000f24:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <announceFsmEvent+0x9c>)
 8000f26:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000f2a:	791b      	ldrb	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d043      	beq.n	8000fb8 <announceFsmEvent+0x94>
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <announceFsmEvent+0x9c>)
 8000f32:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000f36:	795b      	ldrb	r3, [r3, #5]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d03f      	beq.n	8000fbc <announceFsmEvent+0x98>
{
 8000f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f3e:	b085      	sub	sp, #20
	if (fsmContext[instance].configured && fsmContext[instance].started && fsmContext[instance].fsm->event[eventId].type==CALLBACK)
 8000f40:	0103      	lsls	r3, r0, #4
 8000f42:	4a1f      	ldr	r2, [pc, #124]	; (8000fc0 <announceFsmEvent+0x9c>)
 8000f44:	58d3      	ldr	r3, [r2, r3]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	010a      	lsls	r2, r1, #4
 8000f4a:	4413      	add	r3, r2
 8000f4c:	791c      	ldrb	r4, [r3, #4]
 8000f4e:	2c02      	cmp	r4, #2
 8000f50:	d002      	beq.n	8000f58 <announceFsmEvent+0x34>
	eError retValue = RET_FAIL;
 8000f52:	2001      	movs	r0, #1
}
 8000f54:	b005      	add	sp, #20
 8000f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f58:	460e      	mov	r6, r1
 8000f5a:	4607      	mov	r7, r0
		fsmContext[instance].fsm->event[eventId].value = TRUE;
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	7319      	strb	r1, [r3, #12]
		fsmContext[instance].newEvent = TRUE;
 8000f60:	4d17      	ldr	r5, [pc, #92]	; (8000fc0 <announceFsmEvent+0x9c>)
 8000f62:	0104      	lsls	r4, r0, #4
 8000f64:	192b      	adds	r3, r5, r4
 8000f66:	7199      	strb	r1, [r3, #6]
		my_printf((fsmContext[instance].fsm->logEnable & FSM_LOG) == FSM_LOG,VERBOSE_GENERAL, "FSM %s num : %d announce event %s.\n",fsmContext[instance].fsm->name,fsmContext[instance].fsm->numFsm,fsmContext[instance].fsm->event[eventId].EventName);
 8000f68:	592b      	ldr	r3, [r5, r4]
 8000f6a:	7e18      	ldrb	r0, [r3, #24]
 8000f6c:	f893 e000 	ldrb.w	lr, [r3]
 8000f70:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f85c 2002 	ldr.w	r2, [ip, r2]
 8000f7a:	9201      	str	r2, [sp, #4]
 8000f7c:	f8cd e000 	str.w	lr, [sp]
 8000f80:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <announceFsmEvent+0xa0>)
 8000f82:	4008      	ands	r0, r1
 8000f84:	f000 f873 	bl	800106e <my_printf>
		if ((fsmContext[instance].fsm->logEnable & FSM_TRACE) == FSM_TRACE)
 8000f88:	592b      	ldr	r3, [r5, r4]
 8000f8a:	7e1a      	ldrb	r2, [r3, #24]
 8000f8c:	f012 0f02 	tst.w	r2, #2
 8000f90:	d101      	bne.n	8000f96 <announceFsmEvent+0x72>
		retValue = RET_OK;
 8000f92:	2000      	movs	r0, #0
 8000f94:	e7de      	b.n	8000f54 <announceFsmEvent+0x30>
			BufferSetData8(buffer, 0, instance);
 8000f96:	f88d 700c 	strb.w	r7, [sp, #12]
			BufferSetData8(buffer, 1, FSM_TRACE_EVENT);
 8000f9a:	2400      	movs	r4, #0
 8000f9c:	f88d 400d 	strb.w	r4, [sp, #13]
			BufferSetData8(buffer, 2, fsmContext[instance].fsm->currentState);
 8000fa0:	7c9b      	ldrb	r3, [r3, #18]
 8000fa2:	f88d 300e 	strb.w	r3, [sp, #14]
			BufferSetData8(buffer, 3, eventId);
 8000fa6:	f88d 600f 	strb.w	r6, [sp, #15]
			my_printTraceBin(FSM_PARAMETERS*10 + PROTOCOL_DEVICE_INSTANCE,buffer,4);
 8000faa:	2204      	movs	r2, #4
 8000fac:	a903      	add	r1, sp, #12
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f000 f86e 	bl	8001090 <my_printTraceBin>
		retValue = RET_OK;
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	e7cd      	b.n	8000f54 <announceFsmEvent+0x30>
	eError retValue = RET_FAIL;
 8000fb8:	2001      	movs	r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	4770      	bx	lr
 8000fc0:	20000118 	.word	0x20000118
 8000fc4:	08005474 	.word	0x08005474

08000fc8 <setLogFsm>:
	if (fsmContext[instance].configured)
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <setLogFsm+0x1c>)
 8000fca:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000fce:	791b      	ldrb	r3, [r3, #4]
 8000fd0:	b12b      	cbz	r3, 8000fde <setLogFsm+0x16>
		fsmContext[instance].fsm->logEnable = value;
 8000fd2:	0100      	lsls	r0, r0, #4
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <setLogFsm+0x1c>)
 8000fd6:	581b      	ldr	r3, [r3, r0]
 8000fd8:	7619      	strb	r1, [r3, #24]
		ret = RET_OK;
 8000fda:	2000      	movs	r0, #0
 8000fdc:	4770      	bx	lr
	eError ret = RET_FAIL;
 8000fde:	2001      	movs	r0, #1
}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000118 	.word	0x20000118

08000fe8 <CreateQueue>:
 * @return  None.
 *
 ****************************************************************************/
void CreateQueue(tCircularBuffer* buffer, uint8_t* bufferPtr, uint16_t size)
{
	buffer->bufferPtr = bufferPtr;
 8000fe8:	6081      	str	r1, [r0, #8]
	buffer->bufferLen = size;
 8000fea:	80c2      	strh	r2, [r0, #6]
	buffer->readPtr = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	8043      	strh	r3, [r0, #2]
	buffer->writePtr = 0;
 8000ff0:	8083      	strh	r3, [r0, #4]
    buffer->numOfBytes = 0;
 8000ff2:	8003      	strh	r3, [r0, #0]
 8000ff4:	4770      	bx	lr

08000ff6 <AddQueueByte>:
 *
 * @return  None.
 *
 ****************************************************************************/
void AddQueueByte(tCircularBuffer* buffer, uint8_t data)
{
 8000ff6:	b538      	push	{r3, r4, r5, lr}
 8000ff8:	4604      	mov	r4, r0
 8000ffa:	460d      	mov	r5, r1
	interruptsDisable();
 8000ffc:	f000 fcdc 	bl	80019b8 <interruptsDisable>
    buffer->bufferPtr[buffer->writePtr]= data;
 8001000:	68a2      	ldr	r2, [r4, #8]
 8001002:	88a3      	ldrh	r3, [r4, #4]
 8001004:	54d5      	strb	r5, [r2, r3]
    buffer->numOfBytes++;
 8001006:	8823      	ldrh	r3, [r4, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	8023      	strh	r3, [r4, #0]
    buffer->writePtr++;
 800100c:	88a3      	ldrh	r3, [r4, #4]
 800100e:	3301      	adds	r3, #1
 8001010:	b29b      	uxth	r3, r3
    buffer->writePtr %= buffer->bufferLen;
 8001012:	88e1      	ldrh	r1, [r4, #6]
 8001014:	fbb3 f2f1 	udiv	r2, r3, r1
 8001018:	fb01 3312 	mls	r3, r1, r2, r3
 800101c:	80a3      	strh	r3, [r4, #4]
	interruptsEnable();
 800101e:	f000 fcb7 	bl	8001990 <interruptsEnable>
 8001022:	bd38      	pop	{r3, r4, r5, pc}

08001024 <GetQueueByte>:
 *
 * @return  Next byte into queue
 *
 ****************************************************************************/
uint8_t GetQueueByte(tCircularBuffer* buffer)
{
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4604      	mov	r4, r0
    uint8_t result;
	interruptsDisable();
 8001028:	f000 fcc6 	bl	80019b8 <interruptsDisable>
    result = buffer->bufferPtr[buffer->readPtr];
 800102c:	68a2      	ldr	r2, [r4, #8]
 800102e:	8863      	ldrh	r3, [r4, #2]
 8001030:	5cd5      	ldrb	r5, [r2, r3]
    buffer->numOfBytes--;
 8001032:	8822      	ldrh	r2, [r4, #0]
 8001034:	3a01      	subs	r2, #1
 8001036:	8022      	strh	r2, [r4, #0]
    buffer->readPtr++;
 8001038:	3301      	adds	r3, #1
 800103a:	b29b      	uxth	r3, r3
    buffer->readPtr %= buffer->bufferLen;
 800103c:	88e1      	ldrh	r1, [r4, #6]
 800103e:	fbb3 f2f1 	udiv	r2, r3, r1
 8001042:	fb01 3312 	mls	r3, r1, r2, r3
 8001046:	8063      	strh	r3, [r4, #2]
    interruptsEnable();
 8001048:	f000 fca2 	bl	8001990 <interruptsEnable>
    return result;
}
 800104c:	4628      	mov	r0, r5
 800104e:	bd38      	pop	{r3, r4, r5, pc}

08001050 <GetQueuePendingBytes>:
 *
 ****************************************************************************/
uint16_t GetQueuePendingBytes(tCircularBuffer* buffer)
{
    return buffer->numOfBytes;
}
 8001050:	8800      	ldrh	r0, [r0, #0]
 8001052:	4770      	bx	lr

08001054 <GetQueueFreeBytes>:
 * @return  Free spaces in queue
 *
 ****************************************************************************/
uint16_t GetQueueFreeBytes(tCircularBuffer* buffer)
{
    return (buffer->bufferLen-buffer->numOfBytes);
 8001054:	88c3      	ldrh	r3, [r0, #6]
 8001056:	8800      	ldrh	r0, [r0, #0]
 8001058:	1a18      	subs	r0, r3, r0
}
 800105a:	b280      	uxth	r0, r0
 800105c:	4770      	bx	lr

0800105e <vprint>:
/****************************************************************************
 *  PRIVATE FUNCTIONS
 ***************************************************************************/

static void vprint(eVerboseLevels level,const char *fmt, va_list argp)
{
 800105e:	b500      	push	{lr}
 8001060:	b0ff      	sub	sp, #508	; 0x1fc
    char string[500];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8001062:	a801      	add	r0, sp, #4
 8001064:	f003 fda0 	bl	8004ba8 <vsiprintf>
    {
    	//printShellString((int8_t*)string,level);
    }
}
 8001068:	b07f      	add	sp, #508	; 0x1fc
 800106a:	f85d fb04 	ldr.w	pc, [sp], #4

0800106e <my_printf>:
	if ((enable) || (level != VERBOSE_GENERAL))
 800106e:	b908      	cbnz	r0, 8001074 <my_printf+0x6>
 8001070:	2901      	cmp	r1, #1
 8001072:	d00c      	beq.n	800108e <my_printf+0x20>
{
 8001074:	b40c      	push	{r2, r3}
 8001076:	b500      	push	{lr}
 8001078:	b083      	sub	sp, #12
 800107a:	4608      	mov	r0, r1
		va_start(argp, fmt);
 800107c:	aa05      	add	r2, sp, #20
 800107e:	9201      	str	r2, [sp, #4]
		vprint(level, fmt, argp);
 8001080:	9904      	ldr	r1, [sp, #16]
 8001082:	f7ff ffec 	bl	800105e <vprint>
}
 8001086:	b003      	add	sp, #12
 8001088:	f85d eb04 	ldr.w	lr, [sp], #4
 800108c:	b002      	add	sp, #8
 800108e:	4770      	bx	lr

08001090 <my_printTraceBin>:
{
 8001090:	4770      	bx	lr
	...

08001094 <ATCommandParse>:
static uint8_t indexfsmATCmd;
/****************************************************************************
 *    PRIVATE FUNCTIONS
 ****************************************************************************/
eError ATCommandParse(void)
{
 8001094:	b570      	push	{r4, r5, r6, lr}
	eError ret = RET_INVALID_COMMAND;
	uint8_t initOffset = 0;
	uint8_t headerSize = 0;
	uint8_t i = 0;

	if((ATActualRequest.command[0] == 'A') && (ATActualRequest.command[1] == 'T'))
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <ATCommandParse+0x9c>)
 8001098:	689c      	ldr	r4, [r3, #8]
 800109a:	7823      	ldrb	r3, [r4, #0]
 800109c:	2b41      	cmp	r3, #65	; 0x41
 800109e:	d001      	beq.n	80010a4 <ATCommandParse+0x10>
	eError ret = RET_INVALID_COMMAND;
 80010a0:	2004      	movs	r0, #4
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
	if((ATActualRequest.command[0] == 'A') && (ATActualRequest.command[1] == 'T'))
 80010a4:	7863      	ldrb	r3, [r4, #1]
 80010a6:	2b54      	cmp	r3, #84	; 0x54
 80010a8:	d001      	beq.n	80010ae <ATCommandParse+0x1a>
	eError ret = RET_INVALID_COMMAND;
 80010aa:	2004      	movs	r0, #4
			}
		}
	}

	return ret;
}
 80010ac:	bd70      	pop	{r4, r5, r6, pc}
		memset(commandHeader, 0, 15);
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <ATCommandParse+0xa0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	f8c3 200b 	str.w	r2, [r3, #11]
		commandSize = strlen(ATActualRequest.command);
 80010bc:	4620      	mov	r0, r4
 80010be:	f7ff f88f 	bl	80001e0 <strlen>
 80010c2:	b285      	uxth	r5, r0
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <ATCommandParse+0xa4>)
 80010c6:	801d      	strh	r5, [r3, #0]
		if((commandSize+2) <= AT_CMD_BUFFER_SIZE)
 80010c8:	1cab      	adds	r3, r5, #2
 80010ca:	2b40      	cmp	r3, #64	; 0x40
 80010cc:	dd2a      	ble.n	8001124 <ATCommandParse+0x90>
	eError ret = RET_INVALID_COMMAND;
 80010ce:	2004      	movs	r0, #4
 80010d0:	bd70      	pop	{r4, r5, r6, pc}
				else if(initOffset)
 80010d2:	b9a9      	cbnz	r1, 8001100 <ATCommandParse+0x6c>
			for(i=2; i<commandSize; i++)
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	b298      	uxth	r0, r3
 80010da:	4285      	cmp	r5, r0
 80010dc:	d926      	bls.n	800112c <ATCommandParse+0x98>
				if((ATActualRequest.command[i]!='+') && (ATActualRequest.command[i]!='#') && (ATActualRequest.command[i]!=0)
 80010de:	5ce0      	ldrb	r0, [r4, r3]
 80010e0:	282b      	cmp	r0, #43	; 0x2b
 80010e2:	d0f6      	beq.n	80010d2 <ATCommandParse+0x3e>
 80010e4:	2823      	cmp	r0, #35	; 0x23
 80010e6:	d0f4      	beq.n	80010d2 <ATCommandParse+0x3e>
 80010e8:	2800      	cmp	r0, #0
 80010ea:	d0f2      	beq.n	80010d2 <ATCommandParse+0x3e>
					&& (ATActualRequest.command[i]!='=') && (ATActualRequest.command[i]!='?'))
 80010ec:	283d      	cmp	r0, #61	; 0x3d
 80010ee:	d0f0      	beq.n	80010d2 <ATCommandParse+0x3e>
 80010f0:	283f      	cmp	r0, #63	; 0x3f
 80010f2:	d0ee      	beq.n	80010d2 <ATCommandParse+0x3e>
					headerSize++;
 80010f4:	3201      	adds	r2, #1
 80010f6:	b2d2      	uxtb	r2, r2
					if(!initOffset)
 80010f8:	2900      	cmp	r1, #0
 80010fa:	d1eb      	bne.n	80010d4 <ATCommandParse+0x40>
						initOffset = i;
 80010fc:	4619      	mov	r1, r3
 80010fe:	e7e9      	b.n	80010d4 <ATCommandParse+0x40>
					memcpy(commandHeader, &ATActualRequest.command[initOffset], headerSize);
 8001100:	4421      	add	r1, r4
 8001102:	480c      	ldr	r0, [pc, #48]	; (8001134 <ATCommandParse+0xa0>)
 8001104:	f003 fd2c 	bl	8004b60 <memcpy>
					memcpy(actualCommand, ATActualRequest.command, commandSize);
 8001108:	4e0c      	ldr	r6, [pc, #48]	; (800113c <ATCommandParse+0xa8>)
 800110a:	462a      	mov	r2, r5
 800110c:	4621      	mov	r1, r4
 800110e:	4630      	mov	r0, r6
 8001110:	f003 fd26 	bl	8004b60 <memcpy>
					memcpy(&actualCommand[commandSize], "\r\n", 2);
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <ATCommandParse+0xac>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	5373      	strh	r3, [r6, r5]
					commandSize += 2;
 800111a:	3502      	adds	r5, #2
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <ATCommandParse+0xa4>)
 800111e:	801d      	strh	r5, [r3, #0]
					ret = RET_OK;
 8001120:	2000      	movs	r0, #0
					break;
 8001122:	bd70      	pop	{r4, r5, r6, pc}
 8001124:	2302      	movs	r3, #2
 8001126:	2200      	movs	r2, #0
 8001128:	4611      	mov	r1, r2
 800112a:	e7d5      	b.n	80010d8 <ATCommandParse+0x44>
	eError ret = RET_INVALID_COMMAND;
 800112c:	2004      	movs	r0, #4
 800112e:	bd70      	pop	{r4, r5, r6, pc}
 8001130:	20000258 	.word	0x20000258
 8001134:	20000264 	.word	0x20000264
 8001138:	200003a8 	.word	0x200003a8
 800113c:	20000368 	.word	0x20000368
 8001140:	080054f0 	.word	0x080054f0

08001144 <AtProcessResponse>:

eError AtProcessResponse(tAtClients client)
{
 8001144:	b570      	push	{r4, r5, r6, lr}
 8001146:	4605      	mov	r5, r0
	eError ret = RET_OK;
	uint8_t clientPipe = 0;

	if(ATClient[client].pipe == ATClient[ATActualClient].pipe)
 8001148:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <AtProcessResponse+0x9c>)
 800114a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800114e:	008a      	lsls	r2, r1, #2
 8001150:	441a      	add	r2, r3
 8001152:	f992 4001 	ldrsb.w	r4, [r2, #1]
 8001156:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <AtProcessResponse+0xa0>)
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800115e:	0081      	lsls	r1, r0, #2
 8001160:	440b      	add	r3, r1
 8001162:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001166:	429c      	cmp	r4, r3
 8001168:	d001      	beq.n	800116e <AtProcessResponse+0x2a>
 800116a:	2400      	movs	r4, #0
 800116c:	e014      	b.n	8001198 <AtProcessResponse+0x54>
	{
		if(isRequestInProgress)
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <AtProcessResponse+0xa4>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b933      	cbnz	r3, 8001182 <AtProcessResponse+0x3e>
				}
			}
		}
	}

	announceFsmEvent(indexfsmATCmd, AT_RESPONSE_REC_EVENT);
 8001174:	2100      	movs	r1, #0
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <AtProcessResponse+0xa8>)
 8001178:	7818      	ldrb	r0, [r3, #0]
 800117a:	f7ff fed3 	bl	8000f24 <announceFsmEvent>
	return ret;
}
 800117e:	2000      	movs	r0, #0
 8001180:	bd70      	pop	{r4, r5, r6, pc}
			ATClient[ATActualClient].callback(AT_RESP_OK, AtRxBuffer, AtRxBufferBytes);
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <AtProcessResponse+0x9c>)
 8001184:	440b      	add	r3, r1
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <AtProcessResponse+0xac>)
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	4919      	ldr	r1, [pc, #100]	; (80011f4 <AtProcessResponse+0xb0>)
 800118e:	2000      	movs	r0, #0
 8001190:	4798      	blx	r3
 8001192:	e7ef      	b.n	8001174 <AtProcessResponse+0x30>
		for(clientPipe=0; clientPipe<NUM_OF_AT_CLIENTS; clientPipe++)
 8001194:	3401      	adds	r4, #1
 8001196:	b2e4      	uxtb	r4, r4
 8001198:	2c01      	cmp	r4, #1
 800119a:	d8eb      	bhi.n	8001174 <AtProcessResponse+0x30>
			if(ATClient[clientPipe].pipe == ATClient[client].pipe)
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <AtProcessResponse+0x9c>)
 800119e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80011a2:	008a      	lsls	r2, r1, #2
 80011a4:	441a      	add	r2, r3
 80011a6:	f992 0001 	ldrsb.w	r0, [r2, #1]
 80011aa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80011ae:	008a      	lsls	r2, r1, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011b6:	4298      	cmp	r0, r3
 80011b8:	d1ec      	bne.n	8001194 <AtProcessResponse+0x50>
				if(ATClient[clientPipe].isURCSubscribed)
 80011ba:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80011be:	0093      	lsls	r3, r2, #2
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <AtProcessResponse+0x9c>)
 80011c2:	5cd3      	ldrb	r3, [r2, r3]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0e5      	beq.n	8001194 <AtProcessResponse+0x50>
					ATClient[clientPipe].callback(AT_RESP_URC, AtRxBuffer, AtRxBufferBytes);
 80011c8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80011cc:	00b2      	lsls	r2, r6, #2
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <AtProcessResponse+0x9c>)
 80011d0:	4413      	add	r3, r2
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <AtProcessResponse+0xac>)
 80011d6:	7812      	ldrb	r2, [r2, #0]
 80011d8:	4906      	ldr	r1, [pc, #24]	; (80011f4 <AtProcessResponse+0xb0>)
 80011da:	2003      	movs	r0, #3
 80011dc:	4798      	blx	r3
 80011de:	e7d9      	b.n	8001194 <AtProcessResponse+0x50>
 80011e0:	20000004 	.word	0x20000004
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000291 	.word	0x20000291
 80011ec:	20000290 	.word	0x20000290
 80011f0:	200003aa 	.word	0x200003aa
 80011f4:	20000328 	.word	0x20000328

080011f8 <AtCheckMaxRetries>:

tBool AtCheckMaxRetries(uint8_t val)
{

	return FALSE;
}
 80011f8:	2000      	movs	r0, #0
 80011fa:	4770      	bx	lr

080011fc <AtCheckExpectedResponse>:

tBool AtCheckExpectedResponse(uint8_t val)
{

	return TRUE;
}
 80011fc:	2001      	movs	r0, #1
 80011fe:	4770      	bx	lr

08001200 <AtCheckNoMaxRetries>:

tBool AtCheckNoMaxRetries(uint8_t val)
{

	return TRUE;
}
 8001200:	2001      	movs	r0, #1
 8001202:	4770      	bx	lr

08001204 <AtCheckNoExpectedResponse>:

tBool AtCheckNoExpectedResponse(uint8_t val)
{

	return FALSE;
}
 8001204:	2000      	movs	r0, #0
 8001206:	4770      	bx	lr

08001208 <AtSendCommand>:

/* ACTION FUNCTION */

eError AtSendCommand(uint8_t val)
{
 8001208:	b538      	push	{r3, r4, r5, lr}
	eError ret = RET_OK;

//	WRITE_HREG(ATClient[ATActualClient].UARTInstance, HREG_UART_BUFFER_SIZE, strlen((const char *)(ATActualRequest.command)));
//	WRITE_HREG(ATClient[ATActualClient].UARTInstance, HREG_UART_DATA, ATActualRequest.command);
	uartDriverSetBufferSize((tUart)ATClient[ATActualClient].UARTInstance, commandSize);
 800120a:	4d0c      	ldr	r5, [pc, #48]	; (800123c <AtSendCommand+0x34>)
 800120c:	782b      	ldrb	r3, [r5, #0]
 800120e:	4c0c      	ldr	r4, [pc, #48]	; (8001240 <AtSendCommand+0x38>)
 8001210:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001214:	009a      	lsls	r2, r3, #2
 8001216:	4422      	add	r2, r4
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <AtSendCommand+0x3c>)
 800121a:	8819      	ldrh	r1, [r3, #0]
 800121c:	f992 0008 	ldrsb.w	r0, [r2, #8]
 8001220:	f001 f826 	bl	8002270 <uartDriverSetBufferSize>
	uartDriverWrite((tUart)ATClient[ATActualClient].UARTInstance, (uint8_t*)actualCommand);
 8001224:	782b      	ldrb	r3, [r5, #0]
 8001226:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800122a:	009a      	lsls	r2, r3, #2
 800122c:	4414      	add	r4, r2
 800122e:	4906      	ldr	r1, [pc, #24]	; (8001248 <AtSendCommand+0x40>)
 8001230:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8001234:	f001 f824 	bl	8002280 <uartDriverWrite>

	return ret;
}
 8001238:	2000      	movs	r0, #0
 800123a:	bd38      	pop	{r3, r4, r5, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004
 8001244:	200003a8 	.word	0x200003a8
 8001248:	20000368 	.word	0x20000368

0800124c <AtCheckResponse>:

eError AtCheckResponse(uint8_t val)
{
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	b082      	sub	sp, #8
	eError ret = RET_OK;
	uint8_t client = 0;

	for(client=0; client<NUM_OF_AT_CLIENTS; client++)
 8001250:	2400      	movs	r4, #0
	eError ret = RET_OK;
 8001252:	4625      	mov	r5, r4
	for(client=0; client<NUM_OF_AT_CLIENTS; client++)
 8001254:	e005      	b.n	8001262 <AtCheckResponse+0x16>
	{
		if(pipeDeviceParseCommand(ATClient[client].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE, "\r\n", 2, &AtRxBufferBytes))
		{
			ret = AtProcessResponse(client);
 8001256:	4620      	mov	r0, r4
 8001258:	f7ff ff74 	bl	8001144 <AtProcessResponse>
 800125c:	4605      	mov	r5, r0
	for(client=0; client<NUM_OF_AT_CLIENTS; client++)
 800125e:	3401      	adds	r4, #1
 8001260:	b2e4      	uxtb	r4, r4
 8001262:	2c01      	cmp	r4, #1
 8001264:	d83b      	bhi.n	80012de <AtCheckResponse+0x92>
		if(pipeDeviceParseCommand(ATClient[client].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE, "\r\n", 2, &AtRxBufferBytes))
 8001266:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800126a:	009a      	lsls	r2, r3, #2
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <AtCheckResponse+0x98>)
 800126e:	4413      	add	r3, r2
 8001270:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <AtCheckResponse+0x9c>)
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	2302      	movs	r3, #2
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <AtCheckResponse+0xa0>)
 800127e:	2240      	movs	r2, #64	; 0x40
 8001280:	491b      	ldr	r1, [pc, #108]	; (80012f0 <AtCheckResponse+0xa4>)
 8001282:	f000 f979 	bl	8001578 <pipeDeviceParseCommand>
 8001286:	2800      	cmp	r0, #0
 8001288:	d1e5      	bne.n	8001256 <AtCheckResponse+0xa>
		}
		else if(isRequestInProgress && (ATActualClient==client))
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <AtCheckResponse+0xa8>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0e5      	beq.n	800125e <AtCheckResponse+0x12>
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <AtCheckResponse+0xac>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	429c      	cmp	r4, r3
 8001298:	d1e1      	bne.n	800125e <AtCheckResponse+0x12>
		{
			/* Check timeout */
			if(ATActualRequest.timeout > 0)
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <AtCheckResponse+0xb0>)
 800129c:	885b      	ldrh	r3, [r3, #2]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0dd      	beq.n	800125e <AtCheckResponse+0x12>
			{
				toRetries++;
 80012a2:	4a17      	ldr	r2, [pc, #92]	; (8001300 <AtCheckResponse+0xb4>)
 80012a4:	7813      	ldrb	r3, [r2, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	7013      	strb	r3, [r2, #0]
				if(toRetries >= ATActualRequest.timeoutRetries)
 80012ac:	4a13      	ldr	r2, [pc, #76]	; (80012fc <AtCheckResponse+0xb0>)
 80012ae:	7852      	ldrb	r2, [r2, #1]
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d3d4      	bcc.n	800125e <AtCheckResponse+0x12>
				{
					pipeDeviceExtractData(ATClient[client].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE, &AtRxBufferBytes);
 80012b4:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80012b8:	00b3      	lsls	r3, r6, #2
 80012ba:	480a      	ldr	r0, [pc, #40]	; (80012e4 <AtCheckResponse+0x98>)
 80012bc:	4418      	add	r0, r3
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <AtCheckResponse+0x9c>)
 80012c0:	2240      	movs	r2, #64	; 0x40
 80012c2:	490b      	ldr	r1, [pc, #44]	; (80012f0 <AtCheckResponse+0xa4>)
 80012c4:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80012c8:	f000 f9ce 	bl	8001668 <pipeDeviceExtractData>
					isRequestInProgress = FALSE;
 80012cc:	2200      	movs	r2, #0
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <AtCheckResponse+0xa8>)
 80012d0:	701a      	strb	r2, [r3, #0]
					announceFsmEvent(indexfsmATCmd, AT_RESP_TIMEOUT_EVENT);
 80012d2:	2101      	movs	r1, #1
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <AtCheckResponse+0xb8>)
 80012d6:	7818      	ldrb	r0, [r3, #0]
 80012d8:	f7ff fe24 	bl	8000f24 <announceFsmEvent>
 80012dc:	e7bf      	b.n	800125e <AtCheckResponse+0x12>
			}
		}
	}

	return ret;
}
 80012de:	4628      	mov	r0, r5
 80012e0:	b002      	add	sp, #8
 80012e2:	bd70      	pop	{r4, r5, r6, pc}
 80012e4:	20000004 	.word	0x20000004
 80012e8:	200003aa 	.word	0x200003aa
 80012ec:	080054f0 	.word	0x080054f0
 80012f0:	20000328 	.word	0x20000328
 80012f4:	20000291 	.word	0x20000291
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000258 	.word	0x20000258
 8001300:	20000292 	.word	0x20000292
 8001304:	20000290 	.word	0x20000290

08001308 <AtReportTimeout>:

eError AtReportTimeout(uint8_t val)
{
 8001308:	b508      	push	{r3, lr}
	ATClient[ATActualClient].callback(AT_RESP_TIMEOUT, AtRxBuffer, AtRxBufferBytes);
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <AtReportTimeout+0x20>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001312:	009a      	lsls	r2, r3, #2
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <AtReportTimeout+0x24>)
 8001316:	4413      	add	r3, r2
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <AtReportTimeout+0x28>)
 800131c:	7812      	ldrb	r2, [r2, #0]
 800131e:	4905      	ldr	r1, [pc, #20]	; (8001334 <AtReportTimeout+0x2c>)
 8001320:	2002      	movs	r0, #2
 8001322:	4798      	blx	r3
	return RET_OK;
}
 8001324:	2000      	movs	r0, #0
 8001326:	bd08      	pop	{r3, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000004 	.word	0x20000004
 8001330:	200003aa 	.word	0x200003aa
 8001334:	20000328 	.word	0x20000328

08001338 <AtReportResponse>:

eError AtReportResponse(uint8_t val)
{
	ATActualClient = NUM_OF_AT_CLIENTS;
 8001338:	2202      	movs	r2, #2
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <AtReportResponse+0x14>)
 800133c:	701a      	strb	r2, [r3, #0]
	isRequestInProgress = FALSE;
 800133e:	2000      	movs	r0, #0
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <AtReportResponse+0x18>)
 8001342:	7018      	strb	r0, [r3, #0]
	AtRxBufferBytes = 0;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <AtReportResponse+0x1c>)
 8001346:	7018      	strb	r0, [r3, #0]
	return RET_OK;
}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000000 	.word	0x20000000
 8001350:	20000291 	.word	0x20000291
 8001354:	200003aa 	.word	0x200003aa

08001358 <AtPublishURC>:

eError AtPublishURC(uint8_t val)
{
	return RET_OK;
}
 8001358:	2000      	movs	r0, #0
 800135a:	4770      	bx	lr

0800135c <AtCommandStart>:
 * @brief   Start AT client
 * @param	None.
 * @return  None.
 ****************************************************************************/
eError AtCommandStart(void)
{
 800135c:	b538      	push	{r3, r4, r5, lr}
	eError ret = RET_OK;

	/* Configure FSM */
	fsmATCmd.listState = fsmStateATCommand;
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <AtCommandStart+0x38>)
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <AtCommandStart+0x3c>)
 8001362:	6083      	str	r3, [r0, #8]
	fsmATCmd.event = fsmEventATCommand;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <AtCommandStart+0x40>)
 8001366:	60c3      	str	r3, [r0, #12]
	fsmATCmd.numOfEvents = NUM_OF_ATCOMMAND_FSM_EVENTS;
 8001368:	2303      	movs	r3, #3
 800136a:	7403      	strb	r3, [r0, #16]
	fsmATCmd.numOfStates = NUM_OF_ATCOMMAND_FSM_STATES;
 800136c:	2302      	movs	r3, #2
 800136e:	7443      	strb	r3, [r0, #17]
	fsmATCmd.numFsm = 0;
 8001370:	2400      	movs	r4, #0
 8001372:	7004      	strb	r4, [r0, #0]
	fsmATCmd.initState = AT_IDLE_STATE;
 8001374:	74c4      	strb	r4, [r0, #19]
	fsmATCmd.name = (uint8_t *)"FSM AT_CMD";
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <AtCommandStart+0x44>)
 8001378:	6043      	str	r3, [r0, #4]
	indexfsmATCmd = configureFsm(&fsmATCmd, FSM_ATCOMMAND_FSM_LOOP_TIME);
 800137a:	2132      	movs	r1, #50	; 0x32
 800137c:	f7ff fd96 	bl	8000eac <configureFsm>
 8001380:	4d08      	ldr	r5, [pc, #32]	; (80013a4 <AtCommandStart+0x48>)
 8001382:	7028      	strb	r0, [r5, #0]
	setLogFsm(indexfsmATCmd, FALSE);
 8001384:	4621      	mov	r1, r4
 8001386:	f7ff fe1f 	bl	8000fc8 <setLogFsm>

	/* Start FSM */
	resetFsm(indexfsmATCmd);
 800138a:	7828      	ldrb	r0, [r5, #0]
 800138c:	f7ff fdb6 	bl	8000efc <resetFsm>

	return ret;
}
 8001390:	4620      	mov	r0, r4
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	20000274 	.word	0x20000274
 8001398:	08005574 	.word	0x08005574
 800139c:	2000001c 	.word	0x2000001c
 80013a0:	080054f4 	.word	0x080054f4
 80013a4:	20000290 	.word	0x20000290

080013a8 <ATCommandSetRequest>:

eError ATCommandSetRequest(tAtClients ATClient, tAtRequest ATRequest)
{
 80013a8:	b510      	push	{r4, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	ac04      	add	r4, sp, #16
 80013ae:	e904 000e 	stmdb	r4, {r1, r2, r3}
	eError ret = RET_BUSY;

	if(!isRequestInProgress)
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <ATCommandSetRequest+0x48>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b11b      	cbz	r3, 80013c0 <ATCommandSetRequest+0x18>
	eError ret = RET_BUSY;
 80013b8:	2309      	movs	r3, #9
			ret = announceFsmEvent(indexfsmATCmd, AT_COMMAND_REQ_EVENT);
		}
	}

	return ret;
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	b004      	add	sp, #16
 80013be:	bd10      	pop	{r4, pc}
 80013c0:	4603      	mov	r3, r0
		isRequestInProgress = TRUE;
 80013c2:	2101      	movs	r1, #1
 80013c4:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <ATCommandSetRequest+0x48>)
 80013c6:	7011      	strb	r1, [r2, #0]
		ATActualRequest = ATRequest;
 80013c8:	4c0a      	ldr	r4, [pc, #40]	; (80013f4 <ATCommandSetRequest+0x4c>)
 80013ca:	aa04      	add	r2, sp, #16
 80013cc:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80013d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		ATActualClient = ATClient;
 80013d4:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <ATCommandSetRequest+0x50>)
 80013d6:	7013      	strb	r3, [r2, #0]
		ret = ATCommandParse();
 80013d8:	f7ff fe5c 	bl	8001094 <ATCommandParse>
		if(ret == RET_OK)
 80013dc:	4603      	mov	r3, r0
 80013de:	2800      	cmp	r0, #0
 80013e0:	d1eb      	bne.n	80013ba <ATCommandSetRequest+0x12>
			ret = announceFsmEvent(indexfsmATCmd, AT_COMMAND_REQ_EVENT);
 80013e2:	2102      	movs	r1, #2
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <ATCommandSetRequest+0x54>)
 80013e6:	7818      	ldrb	r0, [r3, #0]
 80013e8:	f7ff fd9c 	bl	8000f24 <announceFsmEvent>
 80013ec:	4603      	mov	r3, r0
 80013ee:	e7e4      	b.n	80013ba <ATCommandSetRequest+0x12>
 80013f0:	20000291 	.word	0x20000291
 80013f4:	20000258 	.word	0x20000258
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000290 	.word	0x20000290

08001400 <diffTime>:
 **********************************************************************/
static uint32_t diffTime( uint32_t timeA, uint32_t timeB )
{
    uint32_t retVal = 0;

    if( timeA >= timeB )
 8001400:	4288      	cmp	r0, r1
 8001402:	d202      	bcs.n	800140a <diffTime+0xa>
    {
            retVal = timeA - timeB;
    }
    else
    {
            retVal = UINT32_MAX - (timeB - timeA);
 8001404:	1a09      	subs	r1, r1, r0
 8001406:	43c8      	mvns	r0, r1
    }

    return retVal;
}
 8001408:	4770      	bx	lr
            retVal = timeA - timeB;
 800140a:	1a40      	subs	r0, r0, r1
 800140c:	4770      	bx	lr
	...

08001410 <getTime>:
    uint32_t retVal = 0;

    retVal = timeMs;

    return retVal;
}
 8001410:	4b01      	ldr	r3, [pc, #4]	; (8001418 <getTime+0x8>)
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200002a4 	.word	0x200002a4

0800141c <SwTimerInit>:
eError SwTimerInit( void )
{
    eError result = RET_OK;
    uint8_t i;

    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 800141c:	2300      	movs	r3, #0
 800141e:	b10b      	cbz	r3, 8001424 <SwTimerInit+0x8>
    {
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
    }

    return result;
}
 8001420:	2000      	movs	r0, #0
 8001422:	4770      	bx	lr
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
 8001424:	4a03      	ldr	r2, [pc, #12]	; (8001434 <SwTimerInit+0x18>)
 8001426:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800142a:	2100      	movs	r1, #0
 800142c:	7211      	strb	r1, [r2, #8]
    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 800142e:	3301      	adds	r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	e7f4      	b.n	800141e <SwTimerInit+0x2>
 8001434:	20000294 	.word	0x20000294

08001438 <SwTimerResetTimer>:
/**********************************************************************
 * @brief  Reset and start the timer
 * @param  pTimer:	Pointer to timer to be restart.
 **********************************************************************/
eError SwTimerResetTimer( tSwTimerIndex SwTimerIndex )
{
 8001438:	b510      	push	{r4, lr}
 800143a:	4604      	mov	r4, r0
    eError result = RET_OK;

    // Reset the timer.
    SwTimersArray[SwTimerIndex].startMs = getTime();
 800143c:	f7ff ffe8 	bl	8001410 <getTime>
 8001440:	0124      	lsls	r4, r4, #4
 8001442:	4b02      	ldr	r3, [pc, #8]	; (800144c <SwTimerResetTimer+0x14>)
 8001444:	5118      	str	r0, [r3, r4]

    return result;
}
 8001446:	2000      	movs	r0, #0
 8001448:	bd10      	pop	{r4, pc}
 800144a:	bf00      	nop
 800144c:	20000294 	.word	0x20000294

08001450 <SwTimerStartTimer>:
{
 8001450:	b510      	push	{r4, lr}
 8001452:	4604      	mov	r4, r0
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_CANCELLED ||
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <SwTimerStartTimer+0x28>)
 8001456:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800145a:	7a1b      	ldrb	r3, [r3, #8]
 800145c:	3b02      	subs	r3, #2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d906      	bls.n	8001472 <SwTimerStartTimer+0x22>
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_STARTED;
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <SwTimerStartTimer+0x28>)
 8001466:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800146a:	2301      	movs	r3, #1
 800146c:	7203      	strb	r3, [r0, #8]
}
 800146e:	2000      	movs	r0, #0
 8001470:	bd10      	pop	{r4, pc}
        SwTimerResetTimer( SwTimerIndex );
 8001472:	f7ff ffe1 	bl	8001438 <SwTimerResetTimer>
 8001476:	e7f5      	b.n	8001464 <SwTimerStartTimer+0x14>
 8001478:	20000294 	.word	0x20000294

0800147c <SwTimerUpdateTimer>:
 * @brief  Updates all timers every millisecond
 * @param
 * @retval
 **********************************************************************/
eError SwTimerUpdateTimer( tSwTimerIndex SwTimerIndex )
{
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	4604      	mov	r4, r0
    eError result = RET_OK;
    tBool restartTimer = FALSE;

    // If timer is started, check timeout.
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STARTED )
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <SwTimerUpdateTimer+0x60>)
 8001482:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8001486:	7a1b      	ldrb	r3, [r3, #8]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d00a      	beq.n	80014a2 <SwTimerUpdateTimer+0x26>
            }
        }
    }
    // If the timer is stopped, simply shifts the start time,
    // this keeps the elapsed time.
    else if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STOPPED )
 800148c:	b9fb      	cbnz	r3, 80014ce <SwTimerUpdateTimer+0x52>
    {
        SwTimersArray[SwTimerIndex].startMs++;
 800148e:	4913      	ldr	r1, [pc, #76]	; (80014dc <SwTimerUpdateTimer+0x60>)
 8001490:	0102      	lsls	r2, r0, #4
 8001492:	588b      	ldr	r3, [r1, r2]
 8001494:	3301      	adds	r3, #1
 8001496:	508b      	str	r3, [r1, r2]
    tBool restartTimer = FALSE;
 8001498:	2000      	movs	r0, #0
    }

    if ( restartTimer == TRUE )
 800149a:	2801      	cmp	r0, #1
 800149c:	d019      	beq.n	80014d2 <SwTimerUpdateTimer+0x56>
    {
        SwTimerStartTimer(SwTimerIndex);
    }

    return result;
}
 800149e:	2000      	movs	r0, #0
 80014a0:	bd38      	pop	{r3, r4, r5, pc}
        if( diffTime( timeMs, SwTimersArray[SwTimerIndex].startMs ) >= SwTimersArray[SwTimerIndex].timeoutMs )
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <SwTimerUpdateTimer+0x60>)
 80014a4:	0103      	lsls	r3, r0, #4
 80014a6:	18d5      	adds	r5, r2, r3
 80014a8:	58d1      	ldr	r1, [r2, r3]
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <SwTimerUpdateTimer+0x64>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f7ff ffa7 	bl	8001400 <diffTime>
 80014b2:	686b      	ldr	r3, [r5, #4]
 80014b4:	4298      	cmp	r0, r3
 80014b6:	d306      	bcc.n	80014c6 <SwTimerUpdateTimer+0x4a>
            SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_EXPIRED;
 80014b8:	2203      	movs	r2, #3
 80014ba:	722a      	strb	r2, [r5, #8]
            if( NULL != SwTimersArray[SwTimerIndex].pFuncCB )
 80014bc:	68eb      	ldr	r3, [r5, #12]
 80014be:	b123      	cbz	r3, 80014ca <SwTimerUpdateTimer+0x4e>
                    restartTimer = SwTimersArray[SwTimerIndex].pFuncCB(SwTimerIndex);
 80014c0:	4620      	mov	r0, r4
 80014c2:	4798      	blx	r3
 80014c4:	e7e9      	b.n	800149a <SwTimerUpdateTimer+0x1e>
    tBool restartTimer = FALSE;
 80014c6:	2000      	movs	r0, #0
 80014c8:	e7e7      	b.n	800149a <SwTimerUpdateTimer+0x1e>
 80014ca:	2000      	movs	r0, #0
 80014cc:	e7e5      	b.n	800149a <SwTimerUpdateTimer+0x1e>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7e3      	b.n	800149a <SwTimerUpdateTimer+0x1e>
        SwTimerStartTimer(SwTimerIndex);
 80014d2:	4620      	mov	r0, r4
 80014d4:	f7ff ffbc 	bl	8001450 <SwTimerStartTimer>
 80014d8:	e7e1      	b.n	800149e <SwTimerUpdateTimer+0x22>
 80014da:	bf00      	nop
 80014dc:	20000294 	.word	0x20000294
 80014e0:	200002a4 	.word	0x200002a4

080014e4 <SwTimerIrq>:
 * @brief  Interrupt request rutine for periodic tick
 * @param  None.
 * @retval None.
 **********************************************************************/
void SwTimerIrq( void )
{
 80014e4:	b510      	push	{r4, lr}
    uint8_t SwTimerIndex = 0;

    // Increment time global variable.
    timeMs = timeMs + TIMER_PERIOD; //timeMs++;
 80014e6:	4a06      	ldr	r2, [pc, #24]	; (8001500 <SwTimerIrq+0x1c>)
 80014e8:	6813      	ldr	r3, [r2, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	6013      	str	r3, [r2, #0]

    // Update timers
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 80014ee:	2400      	movs	r4, #0
 80014f0:	b104      	cbz	r4, 80014f4 <SwTimerIrq+0x10>
    {
        SwTimerUpdateTimer( SwTimerIndex );
    }
}
 80014f2:	bd10      	pop	{r4, pc}
        SwTimerUpdateTimer( SwTimerIndex );
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff ffc1 	bl	800147c <SwTimerUpdateTimer>
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 80014fa:	3401      	adds	r4, #1
 80014fc:	b2e4      	uxtb	r4, r4
 80014fe:	e7f7      	b.n	80014f0 <SwTimerIrq+0xc>
 8001500:	200002a4 	.word	0x200002a4

08001504 <pipeDeviceInit>:
 ****************************************************************************/
eError pipeDeviceInit( void )
{
	uint8_t i;

	for(i = 0; i < NUM_OF_PIPES; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	b10b      	cbz	r3, 800150c <pipeDeviceInit+0x8>
		pipes[i].bufferLength = pipeMap[i].bufferSize;
		pipes[i].buffer = pipeMap[i].bufferPtr;
	}

	return RET_OK;
}
 8001508:	2000      	movs	r0, #0
 800150a:	4770      	bx	lr
{
 800150c:	b430      	push	{r4, r5}
		pipes[i].bufferRxPtr = 0;
 800150e:	4c0b      	ldr	r4, [pc, #44]	; (800153c <pipeDeviceInit+0x38>)
 8001510:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
 8001514:	2200      	movs	r2, #0
 8001516:	7142      	strb	r2, [r0, #5]
		pipes[i].bufferStartingPosition = 0;
 8001518:	7102      	strb	r2, [r0, #4]
		pipes[i].bufferLength = pipeMap[i].bufferSize;
 800151a:	0059      	lsls	r1, r3, #1
 800151c:	4419      	add	r1, r3
 800151e:	008d      	lsls	r5, r1, #2
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <pipeDeviceInit+0x3c>)
 8001522:	442a      	add	r2, r5
 8001524:	7a11      	ldrb	r1, [r2, #8]
 8001526:	7181      	strb	r1, [r0, #6]
		pipes[i].buffer = pipeMap[i].bufferPtr;
 8001528:	6852      	ldr	r2, [r2, #4]
 800152a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
	for(i = 0; i < NUM_OF_PIPES; i++)
 800152e:	3301      	adds	r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0eb      	beq.n	800150e <pipeDeviceInit+0xa>
}
 8001536:	2000      	movs	r0, #0
 8001538:	bc30      	pop	{r4, r5}
 800153a:	4770      	bx	lr
 800153c:	200003ac 	.word	0x200003ac
 8001540:	080055ec 	.word	0x080055ec

08001544 <pipeDeviceByteReceived>:
 * @param	data to be saved.
 * @return  None.
 ****************************************************************************/
eError pipeDeviceByteReceived(ePipes id, uint8_t data)
{
    pipes[id].buffer[pipes[id].bufferRxPtr] = data;
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <pipeDeviceByteReceived+0x30>)
 8001546:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 800154a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800154e:	7943      	ldrb	r3, [r0, #5]
 8001550:	54d1      	strb	r1, [r2, r3]
    pipes[id].bufferRxPtr = (pipes[id].bufferRxPtr + 1) % (pipes[id].bufferLength);
 8001552:	7943      	ldrb	r3, [r0, #5]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	7981      	ldrb	r1, [r0, #6]
 8001558:	fb92 f3f1 	sdiv	r3, r2, r1
 800155c:	fb01 2313 	mls	r3, r1, r3, r2
 8001560:	b2db      	uxtb	r3, r3
 8001562:	7143      	strb	r3, [r0, #5]
    if ( pipes[id].bufferRxPtr == pipes[id].bufferStartingPosition )
 8001564:	7902      	ldrb	r2, [r0, #4]
 8001566:	4293      	cmp	r3, r2
 8001568:	d001      	beq.n	800156e <pipeDeviceByteReceived+0x2a>
    {
        return RET_BUFFER_FULL;
    }

    return RET_OK;
 800156a:	2000      	movs	r0, #0
}
 800156c:	4770      	bx	lr
        return RET_BUFFER_FULL;
 800156e:	2008      	movs	r0, #8
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	200003ac 	.word	0x200003ac

08001578 <pipeDeviceParseCommand>:
 *
 * @return  Success.
 *
 ****************************************************************************/
uint8_t pipeDeviceParseCommand(ePipes id, uint8_t *command, uint8_t length, int8_t *pattern, uint8_t patternSize,  uint8_t *commandSize)
{
 8001578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800157c:	4680      	mov	r8, r0
 800157e:	f89d 9020 	ldrb.w	r9, [sp, #32]
 8001582:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    uint8_t success 		= FALSE;
    uint8_t bFound 			= FALSE;
    uint8_t patternIndex 	= 0;
    uint8_t bufferUsed 		= 0;
    uint8_t bufferPos 		= /*DmaChnGetDstPnt(DMA_CHANNEL1);*/pipes[id].bufferRxPtr;
 8001586:	4684      	mov	ip, r0
 8001588:	4836      	ldr	r0, [pc, #216]	; (8001664 <pipeDeviceParseCommand+0xec>)
 800158a:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 800158e:	7945      	ldrb	r5, [r0, #5]
    uint8_t bufferStart 	= pipes[id].bufferStartingPosition;
 8001590:	7904      	ldrb	r4, [r0, #4]

    *commandSize = 0;
 8001592:	2600      	movs	r6, #0
 8001594:	f88e 6000 	strb.w	r6, [lr]
    bufferUsed 	= (uint8_t)((pipes[id].bufferLength - bufferStart + bufferPos) % pipes[id].bufferLength);
 8001598:	7986      	ldrb	r6, [r0, #6]
 800159a:	1b30      	subs	r0, r6, r4
 800159c:	4428      	add	r0, r5
 800159e:	fb90 f5f6 	sdiv	r5, r0, r6
 80015a2:	fb06 0515 	mls	r5, r6, r5, r0

    if ( patternSize > 0 && bufferUsed >= patternSize  )
 80015a6:	f1b9 0f00 	cmp.w	r9, #0
 80015aa:	d057      	beq.n	800165c <pipeDeviceParseCommand+0xe4>
 80015ac:	b2ed      	uxtb	r5, r5
 80015ae:	454d      	cmp	r5, r9
 80015b0:	d302      	bcc.n	80015b8 <pipeDeviceParseCommand+0x40>
 80015b2:	2600      	movs	r6, #0
 80015b4:	4630      	mov	r0, r6
 80015b6:	e02a      	b.n	800160e <pipeDeviceParseCommand+0x96>
    uint8_t success 		= FALSE;
 80015b8:	2000      	movs	r0, #0
 80015ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            {
                command[(*commandSize)] = pipes[id].buffer[bufferStart];
                (*commandSize)++;
            }

            if ( pipes[id].buffer[bufferStart] == pattern[patternIndex] )
 80015be:	4f29      	ldr	r7, [pc, #164]	; (8001664 <pipeDeviceParseCommand+0xec>)
 80015c0:	f857 703c 	ldr.w	r7, [r7, ip, lsl #3]
 80015c4:	f817 a004 	ldrb.w	sl, [r7, r4]
 80015c8:	579f      	ldrsb	r7, [r3, r6]
 80015ca:	45ba      	cmp	sl, r7
 80015cc:	d033      	beq.n	8001636 <pipeDeviceParseCommand+0xbe>
                patternIndex++;
                bFound 			= (uint8_t)(patternIndex >= patternSize);
            }
            else
            {
                bufferStart 	= (uint8_t)((bufferStart + pipes[id].bufferLength - patternIndex) % pipes[id].bufferLength);
 80015ce:	4f25      	ldr	r7, [pc, #148]	; (8001664 <pipeDeviceParseCommand+0xec>)
 80015d0:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 80015d4:	79bf      	ldrb	r7, [r7, #6]
 80015d6:	443c      	add	r4, r7
 80015d8:	1ba4      	subs	r4, r4, r6
 80015da:	fb94 faf7 	sdiv	sl, r4, r7
 80015de:	fb07 441a 	mls	r4, r7, sl, r4
 80015e2:	b2e4      	uxtb	r4, r4
                bufferUsed		+= patternIndex;
 80015e4:	4435      	add	r5, r6
 80015e6:	b2ed      	uxtb	r5, r5
                (*commandSize)	-= patternIndex;
 80015e8:	f89e 7000 	ldrb.w	r7, [lr]
 80015ec:	1bbe      	subs	r6, r7, r6
 80015ee:	f88e 6000 	strb.w	r6, [lr]
                patternIndex 	= 0;
 80015f2:	4606      	mov	r6, r0
            }

            bufferStart		= (uint8_t)((bufferStart + 1) % pipes[id].bufferLength);
 80015f4:	f104 0a01 	add.w	sl, r4, #1
 80015f8:	4f1a      	ldr	r7, [pc, #104]	; (8001664 <pipeDeviceParseCommand+0xec>)
 80015fa:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 80015fe:	79bf      	ldrb	r7, [r7, #6]
 8001600:	fb9a f4f7 	sdiv	r4, sl, r7
 8001604:	fb07 a414 	mls	r4, r7, r4, sl
 8001608:	b2e4      	uxtb	r4, r4
            bufferUsed--;
 800160a:	3d01      	subs	r5, #1
 800160c:	b2ed      	uxtb	r5, r5
        while ( bufferUsed > 0 && bFound == FALSE )
 800160e:	b1cd      	cbz	r5, 8001644 <pipeDeviceParseCommand+0xcc>
 8001610:	b9c0      	cbnz	r0, 8001644 <pipeDeviceParseCommand+0xcc>
            if ( *commandSize < length )
 8001612:	f89e 7000 	ldrb.w	r7, [lr]
 8001616:	4297      	cmp	r7, r2
 8001618:	d2d1      	bcs.n	80015be <pipeDeviceParseCommand+0x46>
                command[(*commandSize)] = pipes[id].buffer[bufferStart];
 800161a:	f8df a048 	ldr.w	sl, [pc, #72]	; 8001664 <pipeDeviceParseCommand+0xec>
 800161e:	f85a a03c 	ldr.w	sl, [sl, ip, lsl #3]
 8001622:	f81a a004 	ldrb.w	sl, [sl, r4]
 8001626:	f801 a007 	strb.w	sl, [r1, r7]
                (*commandSize)++;
 800162a:	f89e 7000 	ldrb.w	r7, [lr]
 800162e:	3701      	adds	r7, #1
 8001630:	f88e 7000 	strb.w	r7, [lr]
 8001634:	e7c3      	b.n	80015be <pipeDeviceParseCommand+0x46>
                patternIndex++;
 8001636:	3601      	adds	r6, #1
 8001638:	b2f6      	uxtb	r6, r6
                bFound 			= (uint8_t)(patternIndex >= patternSize);
 800163a:	45b1      	cmp	r9, r6
 800163c:	bf8c      	ite	hi
 800163e:	2000      	movhi	r0, #0
 8001640:	2001      	movls	r0, #1
 8001642:	e7d7      	b.n	80015f4 <pipeDeviceParseCommand+0x7c>
        }

        if ( bFound == TRUE )
 8001644:	2801      	cmp	r0, #1
 8001646:	d002      	beq.n	800164e <pipeDeviceParseCommand+0xd6>
    uint8_t success 		= FALSE;
 8001648:	2000      	movs	r0, #0
            success = TRUE;
        }
    }

    return success;
}
 800164a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            pipes[id].bufferStartingPosition = bufferStart;
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <pipeDeviceParseCommand+0xec>)
 8001650:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8001654:	f888 4004 	strb.w	r4, [r8, #4]
 8001658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t success 		= FALSE;
 800165c:	4648      	mov	r0, r9
 800165e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001662:	bf00      	nop
 8001664:	200003ac 	.word	0x200003ac

08001668 <pipeDeviceExtractData>:
 * Params:
 * Return: Nothing
 * Note :
 *****************************************************************************/
void pipeDeviceExtractData(ePipes id, uint8_t *command, uint8_t length, uint8_t *commandSize)
{
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t bufferUsed 		= 0;
	uint8_t bufferPos 		= pipes[id].bufferRxPtr;
 800166a:	4686      	mov	lr, r0
 800166c:	4d16      	ldr	r5, [pc, #88]	; (80016c8 <pipeDeviceExtractData+0x60>)
 800166e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 8001672:	796f      	ldrb	r7, [r5, #5]
	uint8_t bufferStart 	= pipes[id].bufferStartingPosition;
 8001674:	792c      	ldrb	r4, [r5, #4]

	*commandSize 			= 0;
 8001676:	2600      	movs	r6, #0
 8001678:	701e      	strb	r6, [r3, #0]
	bufferUsed 				= (uint8_t)((pipes[id].bufferLength - bufferStart + bufferPos) % pipes[id].bufferLength);
 800167a:	79ae      	ldrb	r6, [r5, #6]
 800167c:	1b35      	subs	r5, r6, r4
 800167e:	443d      	add	r5, r7
 8001680:	fb95 f7f6 	sdiv	r7, r5, r6
 8001684:	fb06 5717 	mls	r7, r6, r7, r5
 8001688:	b2ff      	uxtb	r7, r7

	while ( bufferUsed > 0)
 800168a:	e00b      	b.n	80016a4 <pipeDeviceExtractData+0x3c>
		{
			command[(*commandSize)] = pipes[id].buffer[bufferStart];
			(*commandSize)++;
		}

		bufferStart		= (uint8_t)((bufferStart + 1) % pipes[id].bufferLength);
 800168c:	1c66      	adds	r6, r4, #1
 800168e:	4d0e      	ldr	r5, [pc, #56]	; (80016c8 <pipeDeviceExtractData+0x60>)
 8001690:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
 8001694:	79ad      	ldrb	r5, [r5, #6]
 8001696:	fb96 f4f5 	sdiv	r4, r6, r5
 800169a:	fb05 6414 	mls	r4, r5, r4, r6
 800169e:	b2e4      	uxtb	r4, r4
		bufferUsed--;
 80016a0:	3f01      	subs	r7, #1
 80016a2:	b2ff      	uxtb	r7, r7
	while ( bufferUsed > 0)
 80016a4:	b15f      	cbz	r7, 80016be <pipeDeviceExtractData+0x56>
		if ( *commandSize < length )
 80016a6:	781d      	ldrb	r5, [r3, #0]
 80016a8:	4295      	cmp	r5, r2
 80016aa:	d2ef      	bcs.n	800168c <pipeDeviceExtractData+0x24>
			command[(*commandSize)] = pipes[id].buffer[bufferStart];
 80016ac:	4e06      	ldr	r6, [pc, #24]	; (80016c8 <pipeDeviceExtractData+0x60>)
 80016ae:	f856 603e 	ldr.w	r6, [r6, lr, lsl #3]
 80016b2:	5d36      	ldrb	r6, [r6, r4]
 80016b4:	554e      	strb	r6, [r1, r5]
			(*commandSize)++;
 80016b6:	781d      	ldrb	r5, [r3, #0]
 80016b8:	3501      	adds	r5, #1
 80016ba:	701d      	strb	r5, [r3, #0]
 80016bc:	e7e6      	b.n	800168c <pipeDeviceExtractData+0x24>
	}

	pipes[id].bufferStartingPosition = bufferStart;
 80016be:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <pipeDeviceExtractData+0x60>)
 80016c0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80016c4:	7104      	strb	r4, [r0, #4]
 80016c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c8:	200003ac 	.word	0x200003ac

080016cc <pipeDevice1ByteReceived>:


/**Helper functions to access each pipe */
#ifdef IS_PIPE1
inline eError pipeDevice1ByteReceived(uint8_t data)
{
 80016cc:	b508      	push	{r3, lr}
	return pipeDeviceByteReceived(PIPE_1, data);
 80016ce:	4601      	mov	r1, r0
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff ff37 	bl	8001544 <pipeDeviceByteReceived>
}
 80016d6:	bd08      	pop	{r3, pc}

080016d8 <FlashCalcOffset>:
 ****************************************************************************/
uint32_t FlashCalcOffset ( uint32_t initSector, uint32_t finalSector )
{
	uint32_t offset = 0;

	offset = (finalSector - initSector) * (FLASH_SECTOR_SIZE);
 80016d8:	1a08      	subs	r0, r1, r0

	return offset;
}
 80016da:	00c0      	lsls	r0, r0, #3
 80016dc:	4770      	bx	lr
	...

080016e0 <FlashInit>:
{
 80016e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FlashContext[i].initAddress = FLASH_BASE;
 80016e4:	4c26      	ldr	r4, [pc, #152]	; (8001780 <FlashInit+0xa0>)
 80016e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016ea:	6063      	str	r3, [r4, #4]
	FlashContext[i].initSector = 0;
 80016ec:	2600      	movs	r6, #0
 80016ee:	6026      	str	r6, [r4, #0]
	FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, FlashInstanceMap[0].sectors);
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <FlashInit+0xa4>)
 80016f2:	681f      	ldr	r7, [r3, #0]
 80016f4:	4639      	mov	r1, r7
 80016f6:	4630      	mov	r0, r6
 80016f8:	f7ff ffee 	bl	80016d8 <FlashCalcOffset>
 80016fc:	60a0      	str	r0, [r4, #8]
	for (i = 1; i < NUM_OF_FLASH; i++)
 80016fe:	2401      	movs	r4, #1
 8001700:	e005      	b.n	800170e <FlashInit+0x2e>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8001702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001706:	e00f      	b.n	8001728 <FlashInit+0x48>
			success = RET_FAIL;
 8001708:	2601      	movs	r6, #1
	for (i = 1; i < NUM_OF_FLASH; i++)
 800170a:	3401      	adds	r4, #1
 800170c:	b2e4      	uxtb	r4, r4
 800170e:	2c03      	cmp	r4, #3
 8001710:	d833      	bhi.n	800177a <FlashInit+0x9a>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <FlashInit+0xa8>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171a:	429a      	cmp	r2, r3
 800171c:	d0f1      	beq.n	8001702 <FlashInit+0x22>
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <FlashInit+0xac>)
 8001720:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001724:	0adb      	lsrs	r3, r3, #11
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	429f      	cmp	r7, r3
 800172a:	d2ed      	bcs.n	8001708 <FlashInit+0x28>
			FlashContext[i].initSector = sectorUsed;
 800172c:	4d14      	ldr	r5, [pc, #80]	; (8001780 <FlashInit+0xa0>)
 800172e:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8001732:	eb08 0204 	add.w	r2, r8, r4
 8001736:	0093      	lsls	r3, r2, #2
 8001738:	18e8      	adds	r0, r5, r3
 800173a:	50ef      	str	r7, [r5, r3]
			FlashContext[i].initAddress = FlashContext[i-1].initAddress + FlashContext[i-1].maxOffset;
 800173c:	f104 3eff 	add.w	lr, r4, #4294967295
 8001740:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8001744:	eb03 010e 	add.w	r1, r3, lr
 8001748:	008a      	lsls	r2, r1, #2
 800174a:	442a      	add	r2, r5
 800174c:	6851      	ldr	r1, [r2, #4]
 800174e:	4473      	add	r3, lr
 8001750:	009a      	lsls	r2, r3, #2
 8001752:	442a      	add	r2, r5
 8001754:	6893      	ldr	r3, [r2, #8]
 8001756:	440b      	add	r3, r1
 8001758:	6043      	str	r3, [r0, #4]
			FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, (sectorUsed + FlashInstanceMap[i].sectors));
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <FlashInit+0xa4>)
 800175c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001760:	eb07 0903 	add.w	r9, r7, r3
 8001764:	4649      	mov	r1, r9
 8001766:	4638      	mov	r0, r7
 8001768:	f7ff ffb6 	bl	80016d8 <FlashCalcOffset>
 800176c:	44a0      	add	r8, r4
 800176e:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8001772:	441d      	add	r5, r3
 8001774:	60a8      	str	r0, [r5, #8]
			sectorUsed +=  FlashInstanceMap[i].sectors;
 8001776:	464f      	mov	r7, r9
 8001778:	e7c7      	b.n	800170a <FlashInit+0x2a>
}
 800177a:	4630      	mov	r0, r6
 800177c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001780:	2000044c 	.word	0x2000044c
 8001784:	080055f8 	.word	0x080055f8
 8001788:	1fff75e0 	.word	0x1fff75e0
 800178c:	003ffc00 	.word	0x003ffc00

08001790 <GPIOWritePort>:
 ****************************************************************************/
eError GPIOWritePort(tGPIO port, tGPIOValue value)
{
	eError 	success = RET_OK;

	if ( value == GPIO_DEFAULT )
 8001790:	2903      	cmp	r1, #3
 8001792:	d015      	beq.n	80017c0 <GPIOWritePort+0x30>
{
 8001794:	b508      	push	{r3, lr}
 8001796:	460a      	mov	r2, r1
		success = RET_INVALID_PARAMETER;
		return success;
	}


	if ( value != GPIO_TOGGLE )
 8001798:	2902      	cmp	r1, #2
 800179a:	d008      	beq.n	80017ae <GPIOWritePort+0x1e>
	{
		HAL_GPIO_WritePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin, value);
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <GPIOWritePort+0x34>)
 800179e:	0100      	lsls	r0, r0, #4
 80017a0:	1819      	adds	r1, r3, r0
 80017a2:	8889      	ldrh	r1, [r1, #4]
 80017a4:	5818      	ldr	r0, [r3, r0]
 80017a6:	f000 ff49 	bl	800263c <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
	}

	return success;
 80017aa:	2000      	movs	r0, #0
 80017ac:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <GPIOWritePort+0x34>)
 80017b0:	0100      	lsls	r0, r0, #4
 80017b2:	181a      	adds	r2, r3, r0
 80017b4:	8891      	ldrh	r1, [r2, #4]
 80017b6:	5818      	ldr	r0, [r3, r0]
 80017b8:	f000 ff45 	bl	8002646 <HAL_GPIO_TogglePin>
	return success;
 80017bc:	2000      	movs	r0, #0
 80017be:	bd08      	pop	{r3, pc}
		return success;
 80017c0:	2005      	movs	r0, #5
 80017c2:	4770      	bx	lr
 80017c4:	08005608 	.word	0x08005608

080017c8 <InitGPIOClock>:
 * @brief  Enable GPIO clock.
 * @param	port to enable clock.
 * @return  None.
 ****************************************************************************/
void InitGPIOClock(tGPIO port)
{
 80017c8:	b086      	sub	sp, #24
	/* Enable the GPIO Clock */
#ifdef GPIOA
	if ( GPIOInstanceMap[port].port == GPIOA ){
 80017ca:	0103      	lsls	r3, r0, #4
 80017cc:	4a3c      	ldr	r2, [pc, #240]	; (80018c0 <InitGPIOClock+0xf8>)
 80017ce:	58d3      	ldr	r3, [r2, r3]
 80017d0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017d4:	d01f      	beq.n	8001816 <InitGPIOClock+0x4e>
		__GPIOA_CLK_ENABLE();
	}
#endif //GPIOA

#ifdef GPIOB
	if( GPIOInstanceMap[port].port == GPIOB ){
 80017d6:	0103      	lsls	r3, r0, #4
 80017d8:	4a39      	ldr	r2, [pc, #228]	; (80018c0 <InitGPIOClock+0xf8>)
 80017da:	58d2      	ldr	r2, [r2, r3]
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <InitGPIOClock+0xfc>)
 80017de:	429a      	cmp	r2, r3
 80017e0:	d027      	beq.n	8001832 <InitGPIOClock+0x6a>
		__GPIOB_CLK_ENABLE();
	}
#endif //GPIOB

#ifdef GPIOC
	if( GPIOInstanceMap[port].port == GPIOC ){
 80017e2:	0103      	lsls	r3, r0, #4
 80017e4:	4a36      	ldr	r2, [pc, #216]	; (80018c0 <InitGPIOClock+0xf8>)
 80017e6:	58d2      	ldr	r2, [r2, r3]
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <InitGPIOClock+0x100>)
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d02f      	beq.n	800184e <InitGPIOClock+0x86>
		__GPIOC_CLK_ENABLE();
	}
#endif //GPIOC

#ifdef GPIOD
	if( GPIOInstanceMap[port].port == GPIOD ){
 80017ee:	0103      	lsls	r3, r0, #4
 80017f0:	4a33      	ldr	r2, [pc, #204]	; (80018c0 <InitGPIOClock+0xf8>)
 80017f2:	58d2      	ldr	r2, [r2, r3]
 80017f4:	4b35      	ldr	r3, [pc, #212]	; (80018cc <InitGPIOClock+0x104>)
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d037      	beq.n	800186a <InitGPIOClock+0xa2>
		__GPIOD_CLK_ENABLE();
	}
#endif //GPIOD

#ifdef GPIOE
	if( GPIOInstanceMap[port].port == GPIOE ){
 80017fa:	0103      	lsls	r3, r0, #4
 80017fc:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <InitGPIOClock+0xf8>)
 80017fe:	58d2      	ldr	r2, [r2, r3]
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <InitGPIOClock+0x108>)
 8001802:	429a      	cmp	r2, r3
 8001804:	d03f      	beq.n	8001886 <InitGPIOClock+0xbe>
		__GPIOG_CLK_ENABLE();
	}
#endif //GPIOG

#ifdef GPIOH
	if( GPIOInstanceMap[port].port == GPIOH ){
 8001806:	0100      	lsls	r0, r0, #4
 8001808:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <InitGPIOClock+0xf8>)
 800180a:	581a      	ldr	r2, [r3, r0]
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <InitGPIOClock+0x10c>)
 800180e:	429a      	cmp	r2, r3
 8001810:	d047      	beq.n	80018a2 <InitGPIOClock+0xda>
		__GPIOI_CLK_ENABLE();
	}
#endif //GPIOI


}
 8001812:	b006      	add	sp, #24
 8001814:	4770      	bx	lr
		__GPIOA_CLK_ENABLE();
 8001816:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800181a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800181e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	64da      	str	r2, [r3, #76]	; 0x4c
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	9b00      	ldr	r3, [sp, #0]
 8001830:	e7d1      	b.n	80017d6 <InitGPIOClock+0xe>
		__GPIOB_CLK_ENABLE();
 8001832:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001836:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800183a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800183c:	f042 0202 	orr.w	r2, r2, #2
 8001840:	64da      	str	r2, [r3, #76]	; 0x4c
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	9b01      	ldr	r3, [sp, #4]
 800184c:	e7c9      	b.n	80017e2 <InitGPIOClock+0x1a>
		__GPIOC_CLK_ENABLE();
 800184e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001852:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001858:	f042 0204 	orr.w	r2, r2, #4
 800185c:	64da      	str	r2, [r3, #76]	; 0x4c
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	9b02      	ldr	r3, [sp, #8]
 8001868:	e7c1      	b.n	80017ee <InitGPIOClock+0x26>
		__GPIOD_CLK_ENABLE();
 800186a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800186e:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8001872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001874:	f042 0208 	orr.w	r2, r2, #8
 8001878:	64da      	str	r2, [r3, #76]	; 0x4c
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	9303      	str	r3, [sp, #12]
 8001882:	9b03      	ldr	r3, [sp, #12]
 8001884:	e7b9      	b.n	80017fa <InitGPIOClock+0x32>
		__GPIOE_CLK_ENABLE();
 8001886:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800188a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800188e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001890:	f042 0210 	orr.w	r2, r2, #16
 8001894:	64da      	str	r2, [r3, #76]	; 0x4c
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	9304      	str	r3, [sp, #16]
 800189e:	9b04      	ldr	r3, [sp, #16]
 80018a0:	e7b1      	b.n	8001806 <InitGPIOClock+0x3e>
		__GPIOH_CLK_ENABLE();
 80018a2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80018a6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80018aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b8:	9305      	str	r3, [sp, #20]
 80018ba:	9b05      	ldr	r3, [sp, #20]
}
 80018bc:	e7a9      	b.n	8001812 <InitGPIOClock+0x4a>
 80018be:	bf00      	nop
 80018c0:	08005608 	.word	0x08005608
 80018c4:	48000400 	.word	0x48000400
 80018c8:	48000800 	.word	0x48000800
 80018cc:	48000c00 	.word	0x48000c00
 80018d0:	48001000 	.word	0x48001000
 80018d4:	48001c00 	.word	0x48001c00

080018d8 <GPIOInit>:
{
 80018d8:	b570      	push	{r4, r5, r6, lr}
 80018da:	b086      	sub	sp, #24
	for (port = 0; port < NUM_OF_GPIO; port++)
 80018dc:	2400      	movs	r4, #0
	eError 				success = RET_OK;
 80018de:	4626      	mov	r6, r4
	for (port = 0; port < NUM_OF_GPIO; port++)
 80018e0:	e001      	b.n	80018e6 <GPIOInit+0xe>
 80018e2:	3401      	adds	r4, #1
 80018e4:	b2e4      	uxtb	r4, r4
 80018e6:	2c10      	cmp	r4, #16
 80018e8:	d81b      	bhi.n	8001922 <GPIOInit+0x4a>
		InitGPIOClock(port);
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff ff6c 	bl	80017c8 <InitGPIOClock>
        GPIO_InitStructure.Pin =  	(uint32_t)GPIOInstanceMap[port].pin;
 80018f0:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <GPIOInit+0x50>)
 80018f2:	0123      	lsls	r3, r4, #4
 80018f4:	18d5      	adds	r5, r2, r3
 80018f6:	88a9      	ldrh	r1, [r5, #4]
 80018f8:	9101      	str	r1, [sp, #4]
		GPIO_InitStructure.Mode = 	(uint32_t)GPIOInstanceMap[port].mode;
 80018fa:	68a9      	ldr	r1, [r5, #8]
 80018fc:	9102      	str	r1, [sp, #8]
		GPIO_InitStructure.Speed = 	(uint32_t)GPIOInstanceMap[port].speed;
 80018fe:	7b29      	ldrb	r1, [r5, #12]
 8001900:	9104      	str	r1, [sp, #16]
		GPIO_InitStructure.Pull = 	(uint32_t)GPIOInstanceMap[port].pupd;
 8001902:	7b69      	ldrb	r1, [r5, #13]
 8001904:	9103      	str	r1, [sp, #12]
		GPIO_InitStructure.Alternate = (uint32_t)GPIOInstanceMap[port].alternate;
 8001906:	7ba9      	ldrb	r1, [r5, #14]
 8001908:	9105      	str	r1, [sp, #20]
		HAL_GPIO_Init(GPIOInstanceMap[port].port, &GPIO_InitStructure);
 800190a:	a901      	add	r1, sp, #4
 800190c:	58d0      	ldr	r0, [r2, r3]
 800190e:	f000 fdc5 	bl	800249c <HAL_GPIO_Init>
		if ( GPIOInstanceMap[port].initialValue != GPIO_DEFAULT )
 8001912:	7be9      	ldrb	r1, [r5, #15]
 8001914:	2903      	cmp	r1, #3
 8001916:	d0e4      	beq.n	80018e2 <GPIOInit+0xa>
			success = GPIOWritePort(port, GPIOInstanceMap[port].initialValue);
 8001918:	4620      	mov	r0, r4
 800191a:	f7ff ff39 	bl	8001790 <GPIOWritePort>
 800191e:	4606      	mov	r6, r0
 8001920:	e7df      	b.n	80018e2 <GPIOInit+0xa>
}
 8001922:	4630      	mov	r0, r6
 8001924:	b006      	add	sp, #24
 8001926:	bd70      	pop	{r4, r5, r6, pc}
 8001928:	08005608 	.word	0x08005608

0800192c <interruptsInit>:
 * @brief  Init interrupts driver
 * 		   Configure all IRQ Channels declared on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsInit( void )
{
 800192c:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 800192e:	2400      	movs	r4, #0
 8001930:	e001      	b.n	8001936 <interruptsInit+0xa>
 8001932:	3401      	adds	r4, #1
 8001934:	b2e4      	uxtb	r4, r4
 8001936:	2c10      	cmp	r4, #16
 8001938:	d80c      	bhi.n	8001954 <interruptsInit+0x28>
	{
		if (IS_SETTABLE_PRIORITY_IRQ(interruptsInstanceMap[i].IRQn))
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <interruptsInit+0x2c>)
 800193c:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8001940:	f110 0f05 	cmn.w	r0, #5
 8001944:	dbf5      	blt.n	8001932 <interruptsInit+0x6>
		{
			HAL_NVIC_SetPriority(interruptsInstanceMap[i].IRQn, (uint32_t)interruptsInstanceMap[i].PreemptPriority, (uint32_t)interruptsInstanceMap[i].SubPriority);
 8001946:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800194a:	789a      	ldrb	r2, [r3, #2]
 800194c:	7859      	ldrb	r1, [r3, #1]
 800194e:	f000 fd15 	bl	800237c <HAL_NVIC_SetPriority>
 8001952:	e7ee      	b.n	8001932 <interruptsInit+0x6>
		}
	}
	return result;
}
 8001954:	2000      	movs	r0, #0
 8001956:	bd10      	pop	{r4, pc}
 8001958:	2000004c 	.word	0x2000004c

0800195c <interruptsStart>:
 * @brief  Start interrupts driver
 * 		   Enable all IRQ Channels configured as ENABLE on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsStart( void )
{
 800195c:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 800195e:	2400      	movs	r4, #0
 8001960:	e001      	b.n	8001966 <interruptsStart+0xa>
 8001962:	3401      	adds	r4, #1
 8001964:	b2e4      	uxtb	r4, r4
 8001966:	2c10      	cmp	r4, #16
 8001968:	d80d      	bhi.n	8001986 <interruptsStart+0x2a>
	{
		if (interruptsInstanceMap[i].State == IRQ_ENABLE)
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <interruptsStart+0x30>)
 800196c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001970:	78db      	ldrb	r3, [r3, #3]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d1f5      	bne.n	8001962 <interruptsStart+0x6>
		{
			if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[i].IRQn))
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <interruptsStart+0x30>)
 8001978:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 800197c:	2800      	cmp	r0, #0
 800197e:	dbf0      	blt.n	8001962 <interruptsStart+0x6>
			{
				HAL_NVIC_EnableIRQ(interruptsInstanceMap[i].IRQn);
 8001980:	f000 fd2e 	bl	80023e0 <HAL_NVIC_EnableIRQ>
 8001984:	e7ed      	b.n	8001962 <interruptsStart+0x6>

		}
	}

	return result;
}
 8001986:	2000      	movs	r0, #0
 8001988:	bd10      	pop	{r4, pc}
 800198a:	bf00      	nop
 800198c:	2000004c 	.word	0x2000004c

08001990 <interruptsEnable>:
 * @param	None.
 * @return  None.
 ****************************************************************************/
void interruptsEnable( void )
{
	if (countIrqAllDisable<=1)
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <interruptsEnable+0x24>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d906      	bls.n	80019a8 <interruptsEnable+0x18>
		countIrqAllDisable=0;
		__enable_irq();
	}
	else
	{
		countIrqAllDisable--;
 800199a:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <interruptsEnable+0x24>)
 800199c:	8813      	ldrh	r3, [r2, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	8013      	strh	r3, [r2, #0]
 80019a6:	4770      	bx	lr
		countIrqAllDisable=0;
 80019a8:	2200      	movs	r2, #0
 80019aa:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <interruptsEnable+0x24>)
 80019ac:	801a      	strh	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80019ae:	b662      	cpsie	i
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200002a8 	.word	0x200002a8

080019b8 <interruptsDisable>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
 * @return  None.
 ****************************************************************************/
void interruptsDisable( void )
{
	__disable_irq();
	countIrqAllDisable++;
 80019ba:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <interruptsDisable+0x10>)
 80019bc:	8813      	ldrh	r3, [r2, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	8013      	strh	r3, [r2, #0]
 80019c6:	4770      	bx	lr
 80019c8:	200002a8 	.word	0x200002a8

080019cc <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 80019cc:	4770      	bx	lr

080019ce <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80019ce:	e7fe      	b.n	80019ce <HardFault_Handler>

080019d0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler>

080019d2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80019d2:	e7fe      	b.n	80019d2 <BusFault_Handler>

080019d4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler>

080019d6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80019d6:	4770      	bx	lr

080019d8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80019d8:	4770      	bx	lr

080019da <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 80019da:	b508      	push	{r3, lr}

	HAL_SYSTICK_IRQHandler();
 80019dc:	f000 fd32 	bl	8002444 <HAL_SYSTICK_IRQHandler>
 80019e0:	bd08      	pop	{r3, pc}

080019e2 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 80019e2:	4770      	bx	lr

080019e4 <EXTI0_IRQHandler>:
 * @brief  This function handles external line 0 and 1 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
 80019e4:	4770      	bx	lr

080019e6 <EXTI1_IRQHandler>:
 * @brief  This function handles external line 0 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void)
{
 80019e6:	4770      	bx	lr

080019e8 <EXTI9_5_IRQHandler>:
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
}

void EXTI9_5_IRQHandler(void)
{
 80019e8:	b508      	push	{r3, lr}
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80019ea:	2020      	movs	r0, #32
 80019ec:	f000 fe30 	bl	8002650 <HAL_GPIO_EXTI_IRQHandler>
 80019f0:	bd08      	pop	{r3, pc}

080019f2 <USART1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USART1_IRQHandler(void)
{
 80019f2:	b508      	push	{r3, lr}
	HAL_UART1_Callback();
 80019f4:	f000 f824 	bl	8001a40 <HAL_UART1_Callback>
 80019f8:	bd08      	pop	{r3, pc}

080019fa <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */

void USART2_IRQHandler(void)
{
 80019fa:	b508      	push	{r3, lr}
	HAL_UART2_Callback();
 80019fc:	f000 f821 	bl	8001a42 <HAL_UART2_Callback>
 8001a00:	bd08      	pop	{r3, pc}

08001a02 <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C1_EV_IRQHandler(void)
{
 8001a02:	b508      	push	{r3, lr}
	HAL_I2C1_Callback();
 8001a04:	f000 f822 	bl	8001a4c <HAL_I2C1_Callback>
 8001a08:	bd08      	pop	{r3, pc}

08001a0a <I2C2_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C2_EV_IRQHandler(void)
{
 8001a0a:	b508      	push	{r3, lr}
	HAL_I2C2_Callback();
 8001a0c:	f000 f81f 	bl	8001a4e <HAL_I2C2_Callback>
 8001a10:	bd08      	pop	{r3, pc}

08001a12 <SPI1_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_IRQHandler(void)
{
 8001a12:	b508      	push	{r3, lr}
    HAL_SPI1_Callback();
 8001a14:	f000 f81c 	bl	8001a50 <HAL_SPI1_Callback>
 8001a18:	bd08      	pop	{r3, pc}

08001a1a <SPI2_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI2_IRQHandler(void)
{
 8001a1a:	b508      	push	{r3, lr}
    HAL_SPI2_Callback();
 8001a1c:	f000 f81d 	bl	8001a5a <HAL_SPI2_Callback>
 8001a20:	bd08      	pop	{r3, pc}

08001a22 <SPI3_IRQHandler>:
}

void SPI3_IRQHandler(void)
{
 8001a22:	b508      	push	{r3, lr}
    HAL_SPI3_Callback();
 8001a24:	f000 f81a 	bl	8001a5c <HAL_SPI3_Callback>
 8001a28:	bd08      	pop	{r3, pc}

08001a2a <TIM2_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8001a2a:	4770      	bx	lr

08001a2c <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8001a2c:	4770      	bx	lr

08001a2e <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8001a2e:	b508      	push	{r3, lr}
	HAL_IncTick();
 8001a30:	f000 fc96 	bl	8002360 <HAL_IncTick>

	SchedulerProcessesAutoEnable();
 8001a34:	f7fe ff86 	bl	8000944 <SchedulerProcessesAutoEnable>
#ifdef SW_TIMER_AVAILABLE
	SwTimerIrq();
 8001a38:	f7ff fd54 	bl	80014e4 <SwTimerIrq>
 8001a3c:	bd08      	pop	{r3, pc}

08001a3e <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a3e:	4770      	bx	lr

08001a40 <HAL_UART1_Callback>:
  * @brief UART1 callback
  * @param None
  * @retval None
  */
void HAL_UART1_Callback(void)
{
 8001a40:	4770      	bx	lr

08001a42 <HAL_UART2_Callback>:
  * @brief UART2 callback
  * @param None
  * @retval None
  */
void HAL_UART2_Callback(void)
{
 8001a42:	b508      	push	{r3, lr}
#ifdef IS_UART2
	uartDriverMainIRQHandler(UART_2);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f000 fba5 	bl	8002194 <uartDriverMainIRQHandler>
 8001a4a:	bd08      	pop	{r3, pc}

08001a4c <HAL_I2C1_Callback>:
#endif
}


void HAL_I2C1_Callback(void)
{
 8001a4c:	4770      	bx	lr

08001a4e <HAL_I2C2_Callback>:
	i2cDriverMainIRQHandler(I2C_1);
#endif
}

void HAL_I2C2_Callback(void)
{
 8001a4e:	4770      	bx	lr

08001a50 <HAL_SPI1_Callback>:
	i2cDriverMainIRQHandler(I2C_2);
#endif
}

void HAL_SPI1_Callback(void)
{
 8001a50:	b508      	push	{r3, lr}
#ifdef IS_SPI1
    spiDriverMainIRQHandler(SPI_1);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 f9b6 	bl	8001dc4 <spiDriverMainIRQHandler>
 8001a58:	bd08      	pop	{r3, pc}

08001a5a <HAL_SPI2_Callback>:
#endif
}

void HAL_SPI2_Callback(void)
{
 8001a5a:	4770      	bx	lr

08001a5c <HAL_SPI3_Callback>:
    spiDriverMainIRQHandler(SPI_2);
#endif
}

void HAL_SPI3_Callback(void)
{
 8001a5c:	b508      	push	{r3, lr}
#ifdef IS_SPI3
    spiDriverMainIRQHandler(SPI_3);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f000 f9b0 	bl	8001dc4 <spiDriverMainIRQHandler>
 8001a64:	bd08      	pop	{r3, pc}
	...

08001a68 <storePowerUpReason>:
 *
 ****************************************************************************/
static void storePowerUpReason( void )
{
	/* Check if the StandBy flag is set */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001a68:	4b29      	ldr	r3, [pc, #164]	; (8001b10 <storePowerUpReason+0xa8>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a70:	d126      	bne.n	8001ac0 <storePowerUpReason+0x58>

		powerUpReason = SYSTEM_RESET_POWER_UP;
	}
	else
	{
		if ( __HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET )
 8001a72:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <storePowerUpReason+0xac>)
 8001a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a78:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8001a7c:	d12f      	bne.n	8001ade <storePowerUpReason+0x76>
		{
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
		}
		else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 8001a7e:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <storePowerUpReason+0xac>)
 8001a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a84:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001a88:	d12d      	bne.n	8001ae6 <storePowerUpReason+0x7e>
		{
			powerUpReason = SYSTEM_RESET_WATCHDOG;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET )
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <storePowerUpReason+0xac>)
 8001a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a90:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a94:	d12b      	bne.n	8001aee <storePowerUpReason+0x86>
		{
			powerUpReason = SYSTEM_RESET_SOFTWARE;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET )
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <storePowerUpReason+0xac>)
 8001a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9c:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001aa0:	d129      	bne.n	8001af6 <storePowerUpReason+0x8e>
		{
			powerUpReason = SYSTEM_RESET_POWER_UP;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET )
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <storePowerUpReason+0xac>)
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001aac:	d127      	bne.n	8001afe <storePowerUpReason+0x96>
		{
			powerUpReason = SYSTEM_BOR_RESET;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET )
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <storePowerUpReason+0xac>)
 8001ab0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db26      	blt.n	8001b06 <storePowerUpReason+0x9e>
		{
			powerUpReason = SYSTEM_LOW_POWER_RESET;
		}
		else
		{
			powerUpReason = SYSTEM_FIRST_POWER_UP;
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <storePowerUpReason+0xb0>)
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e006      	b.n	8001ace <storePowerUpReason+0x66>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8001ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <storePowerUpReason+0xa8>)
 8001ac6:	619a      	str	r2, [r3, #24]
		powerUpReason = SYSTEM_RESET_POWER_UP;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <storePowerUpReason+0xb0>)
 8001acc:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <storePowerUpReason+0xac>)
 8001ad0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001ad4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ad8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001adc:	4770      	bx	lr
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
 8001ade:	2207      	movs	r2, #7
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <storePowerUpReason+0xb0>)
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e7f3      	b.n	8001ace <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_WATCHDOG;
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <storePowerUpReason+0xb0>)
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e7ef      	b.n	8001ace <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_SOFTWARE;
 8001aee:	2203      	movs	r2, #3
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <storePowerUpReason+0xb0>)
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e7eb      	b.n	8001ace <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_POWER_UP;
 8001af6:	2201      	movs	r2, #1
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <storePowerUpReason+0xb0>)
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	e7e7      	b.n	8001ace <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_BOR_RESET;
 8001afe:	2204      	movs	r2, #4
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <storePowerUpReason+0xb0>)
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e7e3      	b.n	8001ace <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_LOW_POWER_RESET;
 8001b06:	2206      	movs	r2, #6
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <storePowerUpReason+0xb0>)
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	e7df      	b.n	8001ace <storePowerUpReason+0x66>
 8001b0e:	bf00      	nop
 8001b10:	40007000 	.word	0x40007000
 8001b14:	40021000 	.word	0x40021000
 8001b18:	200002aa 	.word	0x200002aa

08001b1c <watchdogInit>:
	{
		result = WWDGInit();
	}
#endif
	return result;
}
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	4770      	bx	lr

08001b20 <SystemClock_Config>:
 *
 * @return  None.
 *
 ****************************************************************************/
static eError SystemClock_Config(void)
{
 8001b20:	b500      	push	{lr}
 8001b22:	b0b3      	sub	sp, #204	; 0xcc
	RCC_PeriphCLKInitTypeDef PeriphClkInit;
#endif

	do
	{
		RCC_OscInitStruct.OscillatorType = SystemMap.OscillatorType;
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <SystemClock_Config+0xc8>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	9221      	str	r2, [sp, #132]	; 0x84
		RCC_OscInitStruct.HSEState	= SystemMap.HSEState;
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	9222      	str	r2, [sp, #136]	; 0x88
		RCC_OscInitStruct.HSICalibrationValue = SystemMap.HSICalibrationValue;
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	9225      	str	r2, [sp, #148]	; 0x94
		RCC_OscInitStruct.HSIState 	= SystemMap.HSIState;
 8001b32:	68da      	ldr	r2, [r3, #12]
 8001b34:	9224      	str	r2, [sp, #144]	; 0x90
		RCC_OscInitStruct.LSEState = SystemMap.LSEState;
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	9223      	str	r2, [sp, #140]	; 0x8c
		RCC_OscInitStruct.LSIState = SystemMap.LSIState;
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	9226      	str	r2, [sp, #152]	; 0x98
		RCC_OscInitStruct.MSIState = SystemMap.MSIState;
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	9227      	str	r2, [sp, #156]	; 0x9c
		RCC_OscInitStruct.MSICalibrationValue = SystemMap.MSICalibrationValue;
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	9228      	str	r2, [sp, #160]	; 0xa0
		RCC_OscInitStruct.MSIClockRange= SystemMap.MSIClockRange;
 8001b46:	6a1a      	ldr	r2, [r3, #32]
 8001b48:	9229      	str	r2, [sp, #164]	; 0xa4

		RCC_OscInitStruct.PLL.PLLState 	= SystemMap.PLLState;
 8001b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4c:	922b      	str	r2, [sp, #172]	; 0xac
		RCC_OscInitStruct.PLL.PLLSource = SystemMap.PLLSource;
 8001b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b50:	922c      	str	r2, [sp, #176]	; 0xb0
		RCC_OscInitStruct.PLL.PLLM 		= SystemMap.PLLM;
 8001b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b54:	922d      	str	r2, [sp, #180]	; 0xb4
		RCC_OscInitStruct.PLL.PLLN		= SystemMap.PLLN;
 8001b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b58:	922e      	str	r2, [sp, #184]	; 0xb8
		RCC_OscInitStruct.PLL.PLLP		= SystemMap.PLLP;
 8001b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5c:	922f      	str	r2, [sp, #188]	; 0xbc
		RCC_OscInitStruct.PLL.PLLQ		= SystemMap.PLLQ;
 8001b5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b60:	9230      	str	r2, [sp, #192]	; 0xc0
		RCC_OscInitStruct.PLL.PLLR		= SystemMap.PLLR;
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	9331      	str	r3, [sp, #196]	; 0xc4
	#if (INDEPENDENT_WATCHDOG == 1)//Assure that LSI is configured ON (needed by IWDG)
		RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_LSI;
		RCC_OscInitStruct.LSIState |= RCC_LSI_ON;
	#endif

		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b66:	a821      	add	r0, sp, #132	; 0x84
 8001b68:	f000 fe98 	bl	800289c <HAL_RCC_OscConfig>
 8001b6c:	b118      	cbz	r0, 8001b76 <SystemClock_Config+0x56>
		{
			result = RET_FAIL;
 8001b6e:	2001      	movs	r0, #1
		__HAL_RCC_SYSCFG_CLK_ENABLE();
	} while (0);

	return result;

}
 8001b70:	b033      	add	sp, #204	; 0xcc
 8001b72:	f85d fb04 	ldr.w	pc, [sp], #4
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b76:	230f      	movs	r3, #15
 8001b78:	931c      	str	r3, [sp, #112]	; 0x70
		RCC_ClkInitStruct.SYSCLKSource 	 = SystemMap.SYSCLKSource;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <SystemClock_Config+0xc8>)
 8001b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b7e:	921d      	str	r2, [sp, #116]	; 0x74
		RCC_ClkInitStruct.AHBCLKDivider  = SystemMap.AHBCLKDivider;
 8001b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b82:	921e      	str	r2, [sp, #120]	; 0x78
		RCC_ClkInitStruct.APB1CLKDivider = SystemMap.APB1CLKDivider;
 8001b84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001b86:	921f      	str	r2, [sp, #124]	; 0x7c
		RCC_ClkInitStruct.APB2CLKDivider = SystemMap.APB2CLKDivider;
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	9320      	str	r3, [sp, #128]	; 0x80
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	a81c      	add	r0, sp, #112	; 0x70
 8001b90:	f001 f970 	bl	8002e74 <HAL_RCC_ClockConfig>
 8001b94:	b108      	cbz	r0, 8001b9a <SystemClock_Config+0x7a>
			result = RET_FAIL;
 8001b96:	2001      	movs	r0, #1
 8001b98:	e7ea      	b.n	8001b70 <SystemClock_Config+0x50>
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b9e:	f000 fd6d 	bl	800267c <HAL_PWREx_ControlVoltageScaling>
 8001ba2:	b108      	cbz	r0, 8001ba8 <SystemClock_Config+0x88>
			result = RET_FAIL;
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	e7e3      	b.n	8001b70 <SystemClock_Config+0x50>
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ba8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bac:	9302      	str	r3, [sp, #8]
		PeriphClkInit.RTCClockSelection = SystemMap.RTCClockSelection;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <SystemClock_Config+0xc8>)
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb2:	931b      	str	r3, [sp, #108]	; 0x6c
		HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001bb4:	a802      	add	r0, sp, #8
 8001bb6:	f001 fae9 	bl	800318c <HAL_RCCEx_PeriphCLKConfig>
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001bba:	f001 fa03 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <SystemClock_Config+0xcc>)
 8001bc0:	fba3 3000 	umull	r3, r0, r3, r0
 8001bc4:	0980      	lsrs	r0, r0, #6
 8001bc6:	f000 fc17 	bl	80023f8 <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001bca:	2004      	movs	r0, #4
 8001bcc:	f000 fc2a 	bl	8002424 <HAL_SYSTICK_CLKSourceConfig>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <SystemClock_Config+0xd0>)
 8001bd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	661a      	str	r2, [r3, #96]	; 0x60
 8001bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	9b01      	ldr	r3, [sp, #4]
	eError result = RET_OK;
 8001be4:	2000      	movs	r0, #0
 8001be6:	e7c3      	b.n	8001b70 <SystemClock_Config+0x50>
 8001be8:	08005718 	.word	0x08005718
 8001bec:	10624dd3 	.word	0x10624dd3
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <RTCSetInitDateTime>:
{
 8001bf4:	b510      	push	{r4, lr}
 8001bf6:	b086      	sub	sp, #24
	sTime.Hours = 0x0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f88d 3004 	strb.w	r3, [sp, #4]
	sTime.Minutes = 0x0;
 8001bfe:	f88d 3005 	strb.w	r3, [sp, #5]
	sTime.Seconds = 0x0;
 8001c02:	f88d 3006 	strb.w	r3, [sp, #6]
	sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	f88d 2007 	strb.w	r2, [sp, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c0c:	9304      	str	r3, [sp, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c0e:	9305      	str	r3, [sp, #20]
	if (RTCHandler.Instance != NULL) //RTC initialized
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <RTCSetInitDateTime+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	b1f3      	cbz	r3, 8001c54 <RTCSetInitDateTime+0x60>
		if (HAL_RTC_SetTime(&RTCHandler, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c16:	2201      	movs	r2, #1
 8001c18:	a901      	add	r1, sp, #4
 8001c1a:	480f      	ldr	r0, [pc, #60]	; (8001c58 <RTCSetInitDateTime+0x64>)
 8001c1c:	f001 fd2f 	bl	800367e <HAL_RTC_SetTime>
 8001c20:	b920      	cbnz	r0, 8001c2c <RTCSetInitDateTime+0x38>
	eError result = RET_OK;
 8001c22:	2400      	movs	r4, #0
		if (result == RET_OK)
 8001c24:	b124      	cbz	r4, 8001c30 <RTCSetInitDateTime+0x3c>
}
 8001c26:	4620      	mov	r0, r4
 8001c28:	b006      	add	sp, #24
 8001c2a:	bd10      	pop	{r4, pc}
			result = RET_FAIL;
 8001c2c:	2401      	movs	r4, #1
 8001c2e:	e7f9      	b.n	8001c24 <RTCSetInitDateTime+0x30>
			sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c30:	2201      	movs	r2, #1
 8001c32:	f88d 2000 	strb.w	r2, [sp]
			sDate.Month = RTC_MONTH_JANUARY;
 8001c36:	f88d 2001 	strb.w	r2, [sp, #1]
			sDate.Date = 0x1;
 8001c3a:	f88d 2002 	strb.w	r2, [sp, #2]
			sDate.Year = 0x0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f88d 3003 	strb.w	r3, [sp, #3]
			if (HAL_RTC_SetDate(&RTCHandler, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c44:	4669      	mov	r1, sp
 8001c46:	4804      	ldr	r0, [pc, #16]	; (8001c58 <RTCSetInitDateTime+0x64>)
 8001c48:	f001 fda1 	bl	800378e <HAL_RTC_SetDate>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d0ea      	beq.n	8001c26 <RTCSetInitDateTime+0x32>
				result = RET_FAIL;
 8001c50:	2401      	movs	r4, #1
 8001c52:	e7e8      	b.n	8001c26 <RTCSetInitDateTime+0x32>
	eError result = RET_OK;
 8001c54:	2400      	movs	r4, #0
 8001c56:	e7e6      	b.n	8001c26 <RTCSetInitDateTime+0x32>
 8001c58:	2000047c 	.word	0x2000047c

08001c5c <RTCInit>:
{
 8001c5c:	b500      	push	{lr}
 8001c5e:	b083      	sub	sp, #12
	__HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <RTCInit+0x50>)
 8001c62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c68:	659a      	str	r2, [r3, #88]	; 0x58
 8001c6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c6c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001c70:	9201      	str	r2, [sp, #4]
 8001c72:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_RTC_ENABLE();
 8001c74:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	__HAL_RTC_RESET_HANDLE_STATE(&RTCHandler);
 8001c80:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <RTCInit+0x54>)
 8001c82:	2300      	movs	r3, #0
 8001c84:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	RTCHandler.Instance = RTC;
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <RTCInit+0x58>)
 8001c8a:	6002      	str	r2, [r0, #0]
	RTCHandler.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c8c:	6043      	str	r3, [r0, #4]
	RTCHandler.Init.AsynchPrediv = 127;
 8001c8e:	227f      	movs	r2, #127	; 0x7f
 8001c90:	6082      	str	r2, [r0, #8]
	RTCHandler.Init.SynchPrediv = 0xF9;//aux;
 8001c92:	22f9      	movs	r2, #249	; 0xf9
 8001c94:	60c2      	str	r2, [r0, #12]
	RTCHandler.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c96:	6103      	str	r3, [r0, #16]
	RTCHandler.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c98:	6183      	str	r3, [r0, #24]
	RTCHandler.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c9a:	61c3      	str	r3, [r0, #28]
	HAL_RTC_Init(&RTCHandler);
 8001c9c:	f001 fc7a 	bl	8003594 <HAL_RTC_Init>
	RTCSetInitDateTime();
 8001ca0:	f7ff ffa8 	bl	8001bf4 <RTCSetInitDateTime>
}
 8001ca4:	b003      	add	sp, #12
 8001ca6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	2000047c 	.word	0x2000047c
 8001cb4:	40002800 	.word	0x40002800

08001cb8 <stm32L4Init>:
{
 8001cb8:	b508      	push	{r3, lr}
	storePowerUpReason();
 8001cba:	f7ff fed5 	bl	8001a68 <storePowerUpReason>
	result = SystemClock_Config();
 8001cbe:	f7ff ff2f 	bl	8001b20 <SystemClock_Config>
	if (result == RET_OK)
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	b108      	cbz	r0, 8001cca <stm32L4Init+0x12>
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	bd08      	pop	{r3, pc}
			RTCInit();
 8001cca:	f7ff ffc7 	bl	8001c5c <RTCInit>
			result = watchdogInit();
 8001cce:	f7ff ff25 	bl	8001b1c <watchdogInit>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	e7f7      	b.n	8001cc6 <stm32L4Init+0xe>

08001cd6 <systemGetCLkFreq>:
 * @brief   Get the System CLK Frequency
 * @param   ClockFrequency.
 * @return  eError.
 ****************************************************************************/
eError systemGetCLkFreq(uint32_t *ClockFrequency)
{
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	4604      	mov	r4, r0
    eError result = RET_OK;

    *ClockFrequency = HAL_RCC_GetHCLKFreq();
 8001cda:	f001 f973 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8001cde:	6020      	str	r0, [r4, #0]

    return result;
}
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	bd10      	pop	{r4, pc}

08001ce4 <systemPreConfiguration>:
 *    then it will jump to execute the interrupt handler located in the Flash
 * @param	None.
 * @return  None.
 ****************************************************************************/
void systemPreConfiguration( void )
{
 8001ce4:	4770      	bx	lr
	...

08001ce8 <spiRestartSlaveMode>:
/****************************************************************************
 *    PUBLIC FUNCTIONS
 ****************************************************************************/

static void spiRestartSlaveMode(SPI_HandleTypeDef *hspi)
{
 8001ce8:	b508      	push	{r3, lr}
    uint8_t i;
#ifdef IS_SPI1
    if (hspi->Instance == SPI1){
 8001cea:	6802      	ldr	r2, [r0, #0]
    if (hspi->Instance == SPI2){
        i = SPI_2;
    }
#endif
#ifdef IS_SPI3
    if (hspi->Instance == SPI3){
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <spiRestartSlaveMode+0x30>)
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d003      	beq.n	8001cfa <spiRestartSlaveMode+0x12>
 8001cf2:	2100      	movs	r1, #0
        i = SPI_3;
    }
#endif

    if(hspi->Init.Mode == SPI_MODE_SLAVE) {
 8001cf4:	6843      	ldr	r3, [r0, #4]
 8001cf6:	b113      	cbz	r3, 8001cfe <spiRestartSlaveMode+0x16>
 8001cf8:	bd08      	pop	{r3, pc}
        i = SPI_3;
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	e7fa      	b.n	8001cf4 <spiRestartSlaveMode+0xc>
        HAL_SPI_Receive_IT(hspi, halRxSlaveBuffer[i], SPIInstanceMap[i].rxBufferSize);
 8001cfe:	008b      	lsls	r3, r1, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <spiRestartSlaveMode+0x34>)
 8001d04:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001d08:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d0c:	4904      	ldr	r1, [pc, #16]	; (8001d20 <spiRestartSlaveMode+0x38>)
 8001d0e:	4419      	add	r1, r3
 8001d10:	f001 ffb0 	bl	8003c74 <HAL_SPI_Receive_IT>
    }
}
 8001d14:	e7f0      	b.n	8001cf8 <spiRestartSlaveMode+0x10>
 8001d16:	bf00      	nop
 8001d18:	40003c00 	.word	0x40003c00
 8001d1c:	0800576c 	.word	0x0800576c
 8001d20:	20000598 	.word	0x20000598

08001d24 <HAL_SPI_ErrorCallback>:
}

/**
 * When an error ocurred. If it's SLAVE mode. Start Listening again
 **/
void  HAL_SPI_ErrorCallback (SPI_HandleTypeDef *hspi){
 8001d24:	b508      	push	{r3, lr}
    spiRestartSlaveMode(hspi);
 8001d26:	f7ff ffdf 	bl	8001ce8 <spiRestartSlaveMode>
 8001d2a:	bd08      	pop	{r3, pc}

08001d2c <HAL_SPI_MspInit>:
  *           - NVIC configuration for SPI interrupt request enable (SHOULD NOT BE DONE HERE)
  * @param hspi: SPI handle pointer
  * @retval None
 ****************************************************************************/
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001d2c:	b082      	sub	sp, #8
#if defined(IS_SPI1)
    if (hspi->Instance == SPI1){
 8001d2e:	6802      	ldr	r2, [r0, #0]
 8001d30:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_SPI_MspInit+0x48>)
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d005      	beq.n	8001d42 <HAL_SPI_MspInit+0x16>
        __HAL_RCC_SPI2_CLK_ENABLE();
    }
#endif

#if defined(IS_SPI3)
    if (hspi->Instance == SPI3){
 8001d36:	6802      	ldr	r2, [r0, #0]
 8001d38:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_SPI_MspInit+0x4c>)
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d00d      	beq.n	8001d5a <HAL_SPI_MspInit+0x2e>
        /* Enable SPI clock */
        __HAL_RCC_SPI3_CLK_ENABLE();
    }
#endif
}
 8001d3e:	b002      	add	sp, #8
 8001d40:	4770      	bx	lr
        __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001d46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d4c:	661a      	str	r2, [r3, #96]	; 0x60
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	9b00      	ldr	r3, [sp, #0]
 8001d58:	e7ed      	b.n	8001d36 <HAL_SPI_MspInit+0xa>
        __HAL_RCC_SPI3_CLK_ENABLE();
 8001d5a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001d5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d64:	659a      	str	r2, [r3, #88]	; 0x58
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	9b01      	ldr	r3, [sp, #4]
}
 8001d70:	e7e5      	b.n	8001d3e <HAL_SPI_MspInit+0x12>
 8001d72:	bf00      	nop
 8001d74:	40013000 	.word	0x40013000
 8001d78:	40003c00 	.word	0x40003c00

08001d7c <HAL_SPI_MspDeInit>:
 * @param hspi ST Handler
 ****************************************************************************/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
#if defined(IS_SPI1)
    if(hspi->Instance == SPI1){
 8001d7c:	6802      	ldr	r2, [r0, #0]
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_SPI_MspDeInit+0x40>)
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d004      	beq.n	8001d8e <HAL_SPI_MspDeInit+0x12>
        __HAL_RCC_SPI2_RELEASE_RESET();
    }
#endif

#if defined(IS_SPI3)
    if(hspi->Instance == SPI3){
 8001d84:	6802      	ldr	r2, [r0, #0]
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_SPI_MspDeInit+0x44>)
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d00b      	beq.n	8001da4 <HAL_SPI_MspDeInit+0x28>
 8001d8c:	4770      	bx	lr
        __HAL_RCC_SPI1_FORCE_RESET();
 8001d8e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_RCC_SPI1_RELEASE_RESET();
 8001d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
 8001da2:	e7ef      	b.n	8001d84 <HAL_SPI_MspDeInit+0x8>
        __HAL_RCC_SPI3_FORCE_RESET();
 8001da4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_SPI3_RELEASE_RESET();
 8001db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db6:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif
}
 8001db8:	e7e8      	b.n	8001d8c <HAL_SPI_MspDeInit+0x10>
 8001dba:	bf00      	nop
 8001dbc:	40013000 	.word	0x40013000
 8001dc0:	40003c00 	.word	0x40003c00

08001dc4 <spiDriverMainIRQHandler>:
 * 3) Prepare For Slave mode lecture in case the spiPort is a slave
 *
 * @param  spiPort Which port caused the interrupt
 ****************************************************************************/
void spiDriverMainIRQHandler(tSpiPort spiPort)
{
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	4604      	mov	r4, r0
    SPI_HandleTypeDef* hspi; //ST HAL SPI
    const tSpiInstanceMap* mspi;
    uint16_t interrupt;
    uint8_t byte;

    hspi        = &ST_SpiHandlers[spiPort];
 8001dc8:	2364      	movs	r3, #100	; 0x64
 8001dca:	fb03 f300 	mul.w	r3, r3, r0
 8001dce:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <spiDriverMainIRQHandler+0xd4>)
 8001dd0:	1898      	adds	r0, r3, r2
    uint32_t itsource = hspi->Instance->CR2;
 8001dd2:	589b      	ldr	r3, [r3, r2]
 8001dd4:	6859      	ldr	r1, [r3, #4]
    uint32_t itflag   = hspi->Instance->SR;
 8001dd6:	689b      	ldr	r3, [r3, #8]
    if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001dd8:	f003 0241 	and.w	r2, r3, #65	; 0x41
 8001ddc:	2a01      	cmp	r2, #1
 8001dde:	d007      	beq.n	8001df0 <spiDriverMainIRQHandler+0x2c>
    else if(((itflag & SPI_FLAG_TXE) != RESET) &&
 8001de0:	f013 0f02 	tst.w	r3, #2
 8001de4:	d009      	beq.n	8001dfa <spiDriverMainIRQHandler+0x36>
 8001de6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001dea:	d10c      	bne.n	8001e06 <spiDriverMainIRQHandler+0x42>
    return SPI_IT_ERR;
 8001dec:	2520      	movs	r5, #32
 8001dee:	e005      	b.n	8001dfc <spiDriverMainIRQHandler+0x38>
            ((itflag & SPI_FLAG_RXNE) != RESET) &&
 8001df0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001df4:	d0f4      	beq.n	8001de0 <spiDriverMainIRQHandler+0x1c>
        return SPI_IT_RXNE;
 8001df6:	2540      	movs	r5, #64	; 0x40
 8001df8:	e000      	b.n	8001dfc <spiDriverMainIRQHandler+0x38>
    return SPI_IT_ERR;
 8001dfa:	2520      	movs	r5, #32
    mspi        = &SPIInstanceMap[spiPort];
    interrupt   = interruptType(hspi);

    HAL_SPI_IRQHandler(hspi);
 8001dfc:	f002 f8cc 	bl	8003f98 <HAL_SPI_IRQHandler>

    //If it was a read. Check what we read and put it in our buffer
    //+call any defined callback
    if(interrupt == SPI_IT_RXNE){
 8001e00:	2d40      	cmp	r5, #64	; 0x40
 8001e02:	d002      	beq.n	8001e0a <spiDriverMainIRQHandler+0x46>
 8001e04:	bd70      	pop	{r4, r5, r6, pc}
        return SPI_IT_TXE;
 8001e06:	2580      	movs	r5, #128	; 0x80
 8001e08:	e7f8      	b.n	8001dfc <spiDriverMainIRQHandler+0x38>
        //We'll retrieve whatever is already writtern in the buffer
        byte = *(hspi->pRxBuffPtr-1);
 8001e0a:	2364      	movs	r3, #100	; 0x64
 8001e0c:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <spiDriverMainIRQHandler+0xd4>)
 8001e0e:	fb03 2304 	mla	r3, r3, r4, r2
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f813 5c01 	ldrb.w	r5, [r3, #-1]

        //Process the BYTE
        if(mspi->rxCallback!= NULL){
 8001e18:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001e1c:	011a      	lsls	r2, r3, #4
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <spiDriverMainIRQHandler+0xd8>)
 8001e20:	4413      	add	r3, r2
 8001e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e24:	b34b      	cbz	r3, 8001e7a <spiDriverMainIRQHandler+0xb6>
            mspi->rxCallback(byte);
 8001e26:	4628      	mov	r0, r5
 8001e28:	4798      	blx	r3
        }

        /* In Slave mode will re-enable
        * interrupts and reset the ST handler as appropiate to continue
        * listening*/
        if(hspi->Init.Mode == SPI_MODE_SLAVE){
 8001e2a:	2364      	movs	r3, #100	; 0x64
 8001e2c:	4a1a      	ldr	r2, [pc, #104]	; (8001e98 <spiDriverMainIRQHandler+0xd4>)
 8001e2e:	fb03 2304 	mla	r3, r3, r4, r2
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e5      	bne.n	8001e04 <spiDriverMainIRQHandler+0x40>
            hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e38:	2364      	movs	r3, #100	; 0x64
 8001e3a:	fb03 2304 	mla	r3, r3, r4, r2
 8001e3e:	2204      	movs	r2, #4
 8001e40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e44:	2200      	movs	r2, #0
 8001e46:	661a      	str	r2, [r3, #96]	; 0x60
            hspi->pRxBuffPtr  = halRxSlaveBuffer[spiPort];
 8001e48:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001e4c:	4914      	ldr	r1, [pc, #80]	; (8001ea0 <spiDriverMainIRQHandler+0xdc>)
 8001e4e:	440a      	add	r2, r1
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
            hspi->RxXferSize  = RX_HAL_BUFFER_SIZE;
 8001e52:	2205      	movs	r2, #5
 8001e54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
            hspi->RxXferCount = RX_HAL_BUFFER_SIZE;
 8001e58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

            if(hspi->RxXferCount == 0){
 8001e5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ce      	bne.n	8001e04 <spiDriverMainIRQHandler+0x40>
                __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001e66:	2364      	movs	r3, #100	; 0x64
 8001e68:	fb03 f404 	mul.w	r4, r3, r4
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <spiDriverMainIRQHandler+0xd4>)
 8001e6e:	591a      	ldr	r2, [r3, r4]
 8001e70:	6853      	ldr	r3, [r2, #4]
 8001e72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e76:	6053      	str	r3, [r2, #4]
            }
        }
    }
}
 8001e78:	e7c4      	b.n	8001e04 <spiDriverMainIRQHandler+0x40>
            if(GetQueueFreeBytes(&spiCBuffers[spiPort].rxBuffer) > 0){
 8001e7a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001e7e:	00d3      	lsls	r3, r2, #3
 8001e80:	4e08      	ldr	r6, [pc, #32]	; (8001ea4 <spiDriverMainIRQHandler+0xe0>)
 8001e82:	441e      	add	r6, r3
 8001e84:	4630      	mov	r0, r6
 8001e86:	f7ff f8e5 	bl	8001054 <GetQueueFreeBytes>
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d0cd      	beq.n	8001e2a <spiDriverMainIRQHandler+0x66>
                AddQueueByte(&spiCBuffers[spiPort].rxBuffer, byte);
 8001e8e:	4629      	mov	r1, r5
 8001e90:	4630      	mov	r0, r6
 8001e92:	f7ff f8b0 	bl	8000ff6 <AddQueueByte>
 8001e96:	e7c8      	b.n	8001e2a <spiDriverMainIRQHandler+0x66>
 8001e98:	200004a0 	.word	0x200004a0
 8001e9c:	0800576c 	.word	0x0800576c
 8001ea0:	20000598 	.word	0x20000598
 8001ea4:	20000568 	.word	0x20000568

08001ea8 <spiInit>:
 *         any microcontroller register
 *
 * @return RET_OK or RET_FAIL
 ****************************************************************************/
eError spiInit(void)
{
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eError result = RET_OK;
    SPI_HandleTypeDef* hspi;
    const tSpiInstanceMap* mspi;
    uint8_t i;

    for(i=0; i<NUM_OF_SPI; i++) {
 8001eaa:	2500      	movs	r5, #0
 8001eac:	e03a      	b.n	8001f24 <spiInit+0x7c>
        hspi                         = &ST_SpiHandlers[i];
        mspi                         = &SPIInstanceMap[i];
        hspi->Instance               = mspi->port;
 8001eae:	491f      	ldr	r1, [pc, #124]	; (8001f2c <spiInit+0x84>)
 8001eb0:	00ab      	lsls	r3, r5, #2
 8001eb2:	442b      	add	r3, r5
 8001eb4:	011a      	lsls	r2, r3, #4
 8001eb6:	188c      	adds	r4, r1, r2
 8001eb8:	5888      	ldr	r0, [r1, r2]
 8001eba:	491d      	ldr	r1, [pc, #116]	; (8001f30 <spiInit+0x88>)
 8001ebc:	2264      	movs	r2, #100	; 0x64
 8001ebe:	fb02 f205 	mul.w	r2, r2, r5
 8001ec2:	188b      	adds	r3, r1, r2
 8001ec4:	5088      	str	r0, [r1, r2]
        hspi->Init.BaudRatePrescaler = mspi->bratePreescale;
 8001ec6:	68a2      	ldr	r2, [r4, #8]
 8001ec8:	61da      	str	r2, [r3, #28]
        hspi->Init.Direction         = mspi->direction;
 8001eca:	68e2      	ldr	r2, [r4, #12]
 8001ecc:	609a      	str	r2, [r3, #8]
        hspi->Init.CLKPhase          = mspi->clkPhase;
 8001ece:	6922      	ldr	r2, [r4, #16]
 8001ed0:	615a      	str	r2, [r3, #20]
        hspi->Init.CLKPolarity       = mspi->clkPol;
 8001ed2:	6962      	ldr	r2, [r4, #20]
 8001ed4:	611a      	str	r2, [r3, #16]
        hspi->Init.CRCCalculation    = mspi->crcCal;
 8001ed6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
        hspi->Init.CRCPolynomial     = mspi->crcPol;
 8001eda:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
        hspi->Init.CRCLength		 = mspi->crcLength;
 8001ede:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->Init.DataSize          = mspi->dataSize;
 8001ee2:	69a2      	ldr	r2, [r4, #24]
 8001ee4:	60da      	str	r2, [r3, #12]
        hspi->Init.FirstBit          = mspi->firstBit;
 8001ee6:	69e2      	ldr	r2, [r4, #28]
 8001ee8:	621a      	str	r2, [r3, #32]
        hspi->Init.NSS               = mspi->NSS;
 8001eea:	6a22      	ldr	r2, [r4, #32]
 8001eec:	619a      	str	r2, [r3, #24]
        hspi->Init.NSSPMode			 = mspi->NSSPMode;
 8001eee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->Init.TIMode            = mspi->TIMMode;
 8001ef2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
        hspi->Init.Mode              = mspi->mode;
 8001ef6:	6862      	ldr	r2, [r4, #4]
 8001ef8:	605a      	str	r2, [r3, #4]



#if defined(MON_SPI_TX_IT) || defined(MON_SPI_RX_IT)
		CreateQueue(&spiCBuffers[i].rxBuffer,
 8001efa:	006e      	lsls	r6, r5, #1
 8001efc:	1973      	adds	r3, r6, r5
 8001efe:	00d8      	lsls	r0, r3, #3
 8001f00:	4f0c      	ldr	r7, [pc, #48]	; (8001f34 <spiInit+0x8c>)
 8001f02:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8001f06:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001f08:	4438      	add	r0, r7
 8001f0a:	f7ff f86d 	bl	8000fe8 <CreateQueue>
                SPIInstanceMap[i].rxBufferPtr,
                SPIInstanceMap[i].rxBufferSize);

		CreateQueue(&spiCBuffers[i].txBuffer,
 8001f0e:	442e      	add	r6, r5
 8001f10:	00f0      	lsls	r0, r6, #3
 8001f12:	3008      	adds	r0, #8
 8001f14:	4438      	add	r0, r7
 8001f16:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8001f18:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001f1a:	3004      	adds	r0, #4
 8001f1c:	f7ff f864 	bl	8000fe8 <CreateQueue>
    for(i=0; i<NUM_OF_SPI; i++) {
 8001f20:	3501      	adds	r5, #1
 8001f22:	b2ed      	uxtb	r5, r5
 8001f24:	2d01      	cmp	r5, #1
 8001f26:	d9c2      	bls.n	8001eae <spiInit+0x6>
                SPIInstanceMap[i].txBufferSize);
#endif
    }

    return result;
}
 8001f28:	2000      	movs	r0, #0
 8001f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f2c:	0800576c 	.word	0x0800576c
 8001f30:	200004a0 	.word	0x200004a0
 8001f34:	20000568 	.word	0x20000568

08001f38 <spiStart>:
 * @brief  Star the SPI handler. Called after init, sets up the microcontroller
 *         to work with SPI
 * @return RET_OK or RET_FAIL
 ****************************************************************************/
eError spiStart(void)
{
 8001f38:	b538      	push	{r3, r4, r5, lr}
    uint8_t i;
    SPI_HandleTypeDef*  hspi;  //HAL spi

    for(i=0; i<NUM_OF_SPI; i++) {
 8001f3a:	2400      	movs	r4, #0
 8001f3c:	e001      	b.n	8001f42 <spiStart+0xa>
 8001f3e:	3401      	adds	r4, #1
 8001f40:	b2e4      	uxtb	r4, r4
 8001f42:	2c01      	cmp	r4, #1
 8001f44:	d81e      	bhi.n	8001f84 <spiStart+0x4c>
        hspi = &ST_SpiHandlers[i];
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <spiStart+0x50>)
 8001f48:	2564      	movs	r5, #100	; 0x64
 8001f4a:	fb05 3504 	mla	r5, r5, r4, r3
        HAL_SPI_DeInit(hspi);
 8001f4e:	4628      	mov	r0, r5
 8001f50:	f001 fdfd 	bl	8003b4e <HAL_SPI_DeInit>
        HAL_SPI_Init(hspi);
 8001f54:	4628      	mov	r0, r5
 8001f56:	f001 fda2 	bl	8003a9e <HAL_SPI_Init>
        /* Configure Generic communication so we can use the HAL
        * IRQ functions to retrieve the data, but not use the HAL_RECEIVE_IT
        * functions since we'll set the RXNE interrupt. We are using here a
        * halRxSlaveBuffer to configure the ST HAL, but we'll be using our own buffers
        * */
        if(SPIInstanceMap[i].mode == SPI_MODE_SLAVE){
 8001f5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001f5e:	011a      	lsls	r2, r3, #4
 8001f60:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <spiStart+0x54>)
 8001f62:	4413      	add	r3, r2
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1e9      	bne.n	8001f3e <spiStart+0x6>
            HAL_SPI_Receive_IT(hspi, halRxSlaveBuffer[i], SPIInstanceMap[i].rxBufferSize);
 8001f6a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <spiStart+0x54>)
 8001f70:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001f74:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <spiStart+0x58>)
 8001f7a:	4419      	add	r1, r3
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f001 fe79 	bl	8003c74 <HAL_SPI_Receive_IT>
 8001f82:	e7dc      	b.n	8001f3e <spiStart+0x6>
        }
    }

    return RET_OK;
}
 8001f84:	2000      	movs	r0, #0
 8001f86:	bd38      	pop	{r3, r4, r5, pc}
 8001f88:	200004a0 	.word	0x200004a0
 8001f8c:	0800576c 	.word	0x0800576c
 8001f90:	20000598 	.word	0x20000598

08001f94 <uartDriverWriteIT>:
 * @param	buffer to copy from
 * @param   Amount of bytes to copy
 * @return  error state.
 ****************************************************************************/
static eError uartDriverWriteIT(tUart uartPort, uint8_t* buffer, uint32_t size)
{
 8001f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	4680      	mov	r8, r0
 8001f9c:	460f      	mov	r7, r1
 8001f9e:	4616      	mov	r6, r2
    eError result = RET_OK;
    uint32_t i;
    uint8_t byte = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f88d 3007 	strb.w	r3, [sp, #7]

    if(GetQueueFreeBytes(&uartCBuffers[uartPort].txBuffer) < size){
 8001fa6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8001faa:	00dd      	lsls	r5, r3, #3
 8001fac:	3508      	adds	r5, #8
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <uartDriverWriteIT+0x6c>)
 8001fb0:	441d      	add	r5, r3
 8001fb2:	3504      	adds	r5, #4
 8001fb4:	4628      	mov	r0, r5
 8001fb6:	f7ff f84d 	bl	8001054 <GetQueueFreeBytes>
 8001fba:	42b0      	cmp	r0, r6
 8001fbc:	d203      	bcs.n	8001fc6 <uartDriverWriteIT+0x32>
        return RET_BUFFER_FULL;
 8001fbe:	2008      	movs	r0, #8
    	 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPort], &byte, 1);
    }


    return result;
}
 8001fc0:	b002      	add	sp, #8
 8001fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fc6:	2400      	movs	r4, #0
 8001fc8:	e004      	b.n	8001fd4 <uartDriverWriteIT+0x40>
        AddQueueByte(&uartCBuffers[uartPort].txBuffer, buffer[i]);
 8001fca:	5d39      	ldrb	r1, [r7, r4]
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f7ff f812 	bl	8000ff6 <AddQueueByte>
    for(i = 0; i < size; i++){
 8001fd2:	3401      	adds	r4, #1
 8001fd4:	42b4      	cmp	r4, r6
 8001fd6:	d3f8      	bcc.n	8001fca <uartDriverWriteIT+0x36>
    if ( GetQueuePendingBytes(&uartCBuffers[uartPort].txBuffer) > 0)
 8001fd8:	4628      	mov	r0, r5
 8001fda:	f7ff f839 	bl	8001050 <GetQueuePendingBytes>
 8001fde:	b908      	cbnz	r0, 8001fe4 <uartDriverWriteIT+0x50>
    return result;
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e7ed      	b.n	8001fc0 <uartDriverWriteIT+0x2c>
    	 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPort], &byte, 1);
 8001fe4:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 8001fe8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001fec:	2201      	movs	r2, #1
 8001fee:	f10d 0107 	add.w	r1, sp, #7
 8001ff2:	4804      	ldr	r0, [pc, #16]	; (8002004 <uartDriverWriteIT+0x70>)
 8001ff4:	4418      	add	r0, r3
 8001ff6:	f002 f8d3 	bl	80041a0 <HAL_UART_Transmit_IT>
    return result;
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	e7e0      	b.n	8001fc0 <uartDriverWriteIT+0x2c>
 8001ffe:	bf00      	nop
 8002000:	200007a0 	.word	0x200007a0
 8002004:	200007c0 	.word	0x200007c0

08002008 <HAL_UART_MspInit>:
{
 8002008:	b082      	sub	sp, #8
    if(huart->Instance == USART1){
 800200a:	6803      	ldr	r3, [r0, #0]
 800200c:	4a11      	ldr	r2, [pc, #68]	; (8002054 <HAL_UART_MspInit+0x4c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d004      	beq.n	800201c <HAL_UART_MspInit+0x14>
    else if (huart->Instance == USART2){
 8002012:	4a11      	ldr	r2, [pc, #68]	; (8002058 <HAL_UART_MspInit+0x50>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00c      	beq.n	8002032 <HAL_UART_MspInit+0x2a>
}
 8002018:	b002      	add	sp, #8
 800201a:	4770      	bx	lr
        __HAL_RCC_USART1_CLK_ENABLE();
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_UART_MspInit+0x54>)
 800201e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002020:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002024:	661a      	str	r2, [r3, #96]	; 0x60
 8002026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	9b00      	ldr	r3, [sp, #0]
 8002030:	e009      	b.n	8002046 <HAL_UART_MspInit+0x3e>
        __HAL_RCC_USART2_CLK_ENABLE();
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_UART_MspInit+0x54>)
 8002034:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002036:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800203a:	659a      	str	r2, [r3, #88]	; 0x58
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	9b01      	ldr	r3, [sp, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002046:	6802      	ldr	r2, [r0, #0]
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	f043 0320 	orr.w	r3, r3, #32
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	e7e2      	b.n	8002018 <HAL_UART_MspInit+0x10>
 8002052:	bf00      	nop
 8002054:	40013800 	.word	0x40013800
 8002058:	40004400 	.word	0x40004400
 800205c:	40021000 	.word	0x40021000

08002060 <HAL_UART_MspDeInit>:
    if(huart->Instance == USART1){
 8002060:	6803      	ldr	r3, [r0, #0]
 8002062:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <HAL_UART_MspDeInit+0x38>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d003      	beq.n	8002070 <HAL_UART_MspDeInit+0x10>
    else if (huart->Instance == USART2){
 8002068:	4a0c      	ldr	r2, [pc, #48]	; (800209c <HAL_UART_MspDeInit+0x3c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00a      	beq.n	8002084 <HAL_UART_MspDeInit+0x24>
 800206e:	4770      	bx	lr
        __HAL_RCC_USART1_FORCE_RESET();
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_UART_MspDeInit+0x40>)
 8002072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_RCC_USART1_RELEASE_RESET();
 800207a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
 8002082:	4770      	bx	lr
        __HAL_RCC_USART2_FORCE_RESET();
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_UART_MspDeInit+0x40>)
 8002086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002088:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_USART2_RELEASE_RESET();
 800208e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002090:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002096:	e7ea      	b.n	800206e <HAL_UART_MspDeInit+0xe>
 8002098:	40013800 	.word	0x40013800
 800209c:	40004400 	.word	0x40004400
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_UART_TxCpltCallback>:
{
 80020a4:	b510      	push	{r4, lr}
 80020a6:	b082      	sub	sp, #8
	if ( GetQueuePendingBytes(&uartCBuffers[uartPortIrq].txBuffer) != 0)
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_UART_TxCpltCallback+0x70>)
 80020aa:	f993 3000 	ldrsb.w	r3, [r3]
 80020ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80020b2:	00d8      	lsls	r0, r3, #3
 80020b4:	3008      	adds	r0, #8
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_UART_TxCpltCallback+0x74>)
 80020b8:	4418      	add	r0, r3
 80020ba:	3004      	adds	r0, #4
 80020bc:	f7fe ffc8 	bl	8001050 <GetQueuePendingBytes>
 80020c0:	b968      	cbnz	r0, 80020de <HAL_UART_TxCpltCallback+0x3a>
		 __HAL_UART_DISABLE_IT(&ST_UartHandlers[uartPortIrq], UART_IT_TXE);
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_UART_TxCpltCallback+0x70>)
 80020c4:	f993 3000 	ldrsb.w	r3, [r3]
 80020c8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80020cc:	00da      	lsls	r2, r3, #3
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_UART_TxCpltCallback+0x78>)
 80020d0:	589a      	ldr	r2, [r3, r2]
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020d8:	6013      	str	r3, [r2, #0]
}
 80020da:	b002      	add	sp, #8
 80020dc:	bd10      	pop	{r4, pc}
		 byte = (uint8_t)(GetQueueByte(&uartCBuffers[uartPortIrq].txBuffer) & (uint8_t)0xFF);
 80020de:	4c0d      	ldr	r4, [pc, #52]	; (8002114 <HAL_UART_TxCpltCallback+0x70>)
 80020e0:	f994 3000 	ldrsb.w	r3, [r4]
 80020e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80020e8:	00d8      	lsls	r0, r3, #3
 80020ea:	3008      	adds	r0, #8
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_UART_TxCpltCallback+0x74>)
 80020ee:	4418      	add	r0, r3
 80020f0:	3004      	adds	r0, #4
 80020f2:	f7fe ff97 	bl	8001024 <GetQueueByte>
 80020f6:	a902      	add	r1, sp, #8
 80020f8:	f801 0d01 	strb.w	r0, [r1, #-1]!
		 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPortIrq], &byte, 1);
 80020fc:	f994 3000 	ldrsb.w	r3, [r4]
 8002100:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002104:	00d8      	lsls	r0, r3, #3
 8002106:	2201      	movs	r2, #1
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <HAL_UART_TxCpltCallback+0x78>)
 800210a:	4418      	add	r0, r3
 800210c:	f002 f848 	bl	80041a0 <HAL_UART_Transmit_IT>
 8002110:	e7e3      	b.n	80020da <HAL_UART_TxCpltCallback+0x36>
 8002112:	bf00      	nop
 8002114:	200002ab 	.word	0x200002ab
 8002118:	200007a0 	.word	0x200007a0
 800211c:	200007c0 	.word	0x200007c0

08002120 <HAL_UART_RxCpltCallback>:
{
 8002120:	b510      	push	{r4, lr}
 8002122:	4604      	mov	r4, r0
	muart = &UARTInstanceMap[uartPortIrq];
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_UART_RxCpltCallback+0x60>)
 8002126:	f993 2000 	ldrsb.w	r2, [r3]
	if(muart->rxCallback != NULL){
 800212a:	232c      	movs	r3, #44	; 0x2c
 800212c:	4915      	ldr	r1, [pc, #84]	; (8002184 <HAL_UART_RxCpltCallback+0x64>)
 800212e:	fb03 1302 	mla	r3, r3, r2, r1
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	b143      	cbz	r3, 8002148 <HAL_UART_RxCpltCallback+0x28>
		muart->rxCallback(byteRxBuffer);
 8002136:	4a14      	ldr	r2, [pc, #80]	; (8002188 <HAL_UART_RxCpltCallback+0x68>)
 8002138:	7810      	ldrb	r0, [r2, #0]
 800213a:	4798      	blx	r3
	 HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 800213c:	2201      	movs	r2, #1
 800213e:	4912      	ldr	r1, [pc, #72]	; (8002188 <HAL_UART_RxCpltCallback+0x68>)
 8002140:	4620      	mov	r0, r4
 8002142:	f002 f869 	bl	8004218 <HAL_UART_Receive_IT>
 8002146:	bd10      	pop	{r4, pc}
		if(GetQueueFreeBytes(&uartCBuffers[uartPortIrq].rxBuffer) > 0){
 8002148:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800214c:	00d3      	lsls	r3, r2, #3
 800214e:	480f      	ldr	r0, [pc, #60]	; (800218c <HAL_UART_RxCpltCallback+0x6c>)
 8002150:	4418      	add	r0, r3
 8002152:	f7fe ff7f 	bl	8001054 <GetQueueFreeBytes>
 8002156:	b930      	cbnz	r0, 8002166 <HAL_UART_RxCpltCallback+0x46>
			uartStatus[uartPortIrq] = RET_BUFFER_FULL;
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_UART_RxCpltCallback+0x60>)
 800215a:	f993 3000 	ldrsb.w	r3, [r3]
 800215e:	2108      	movs	r1, #8
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_UART_RxCpltCallback+0x70>)
 8002162:	54d1      	strb	r1, [r2, r3]
 8002164:	e7ea      	b.n	800213c <HAL_UART_RxCpltCallback+0x1c>
			AddQueueByte(&uartCBuffers[uartPortIrq].rxBuffer, byteRxBuffer);
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_UART_RxCpltCallback+0x60>)
 8002168:	f993 3000 	ldrsb.w	r3, [r3]
 800216c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002170:	00da      	lsls	r2, r3, #3
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_UART_RxCpltCallback+0x68>)
 8002174:	7819      	ldrb	r1, [r3, #0]
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_UART_RxCpltCallback+0x6c>)
 8002178:	4410      	add	r0, r2
 800217a:	f7fe ff3c 	bl	8000ff6 <AddQueueByte>
 800217e:	e7dd      	b.n	800213c <HAL_UART_RxCpltCallback+0x1c>
 8002180:	200002ab 	.word	0x200002ab
 8002184:	0800580c 	.word	0x0800580c
 8002188:	20000838 	.word	0x20000838
 800218c:	200007a0 	.word	0x200007a0
 8002190:	200007b8 	.word	0x200007b8

08002194 <uartDriverMainIRQHandler>:
{
 8002194:	b508      	push	{r3, lr}
    huart = &ST_UartHandlers[uartPort];
 8002196:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 800219a:	00d3      	lsls	r3, r2, #3
    uartPortIrq = uartPort;
 800219c:	4a03      	ldr	r2, [pc, #12]	; (80021ac <uartDriverMainIRQHandler+0x18>)
 800219e:	7010      	strb	r0, [r2, #0]
    HAL_UART_IRQHandler(huart);
 80021a0:	4803      	ldr	r0, [pc, #12]	; (80021b0 <uartDriverMainIRQHandler+0x1c>)
 80021a2:	4418      	add	r0, r3
 80021a4:	f002 f914 	bl	80043d0 <HAL_UART_IRQHandler>
 80021a8:	bd08      	pop	{r3, pc}
 80021aa:	bf00      	nop
 80021ac:	200002ab 	.word	0x200002ab
 80021b0:	200007c0 	.word	0x200007c0

080021b4 <HAL_UART_ErrorCallback>:
{
 80021b4:	4770      	bx	lr
	...

080021b8 <uartInit>:
{
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i=0; i<NUM_OF_UART; i++) {
 80021ba:	2400      	movs	r4, #0
 80021bc:	b10c      	cbz	r4, 80021c2 <uartInit+0xa>
}
 80021be:	2000      	movs	r0, #0
 80021c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance        = muart->port;
 80021c2:	4a17      	ldr	r2, [pc, #92]	; (8002220 <uartInit+0x68>)
 80021c4:	232c      	movs	r3, #44	; 0x2c
 80021c6:	fb03 f304 	mul.w	r3, r3, r4
 80021ca:	18d5      	adds	r5, r2, r3
 80021cc:	58d0      	ldr	r0, [r2, r3]
 80021ce:	4915      	ldr	r1, [pc, #84]	; (8002224 <uartInit+0x6c>)
 80021d0:	0123      	lsls	r3, r4, #4
 80021d2:	1b1b      	subs	r3, r3, r4
 80021d4:	00da      	lsls	r2, r3, #3
 80021d6:	188b      	adds	r3, r1, r2
 80021d8:	5088      	str	r0, [r1, r2]
        huart->Init.BaudRate   = muart->baudRate;
 80021da:	686a      	ldr	r2, [r5, #4]
 80021dc:	605a      	str	r2, [r3, #4]
        huart->Init.WordLength = muart->dataSize;
 80021de:	7a2a      	ldrb	r2, [r5, #8]
 80021e0:	609a      	str	r2, [r3, #8]
        huart->Init.StopBits   = muart->stopBits;
 80021e2:	7aaa      	ldrb	r2, [r5, #10]
 80021e4:	60da      	str	r2, [r3, #12]
        huart->Init.Parity     = muart->parity;
 80021e6:	7a6a      	ldrb	r2, [r5, #9]
 80021e8:	611a      	str	r2, [r3, #16]
        huart->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
        huart->Init.Mode       = UART_MODE_TX_RX;
 80021ee:	210c      	movs	r1, #12
 80021f0:	6159      	str	r1, [r3, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80021f2:	61da      	str	r2, [r3, #28]
		CreateQueue(&uartCBuffers[i].rxBuffer,
 80021f4:	0066      	lsls	r6, r4, #1
 80021f6:	1933      	adds	r3, r6, r4
 80021f8:	00d8      	lsls	r0, r3, #3
 80021fa:	4f0b      	ldr	r7, [pc, #44]	; (8002228 <uartInit+0x70>)
 80021fc:	8aaa      	ldrh	r2, [r5, #20]
 80021fe:	69a9      	ldr	r1, [r5, #24]
 8002200:	4438      	add	r0, r7
 8002202:	f7fe fef1 	bl	8000fe8 <CreateQueue>
		CreateQueue(&uartCBuffers[i].txBuffer,
 8002206:	4426      	add	r6, r4
 8002208:	00f0      	lsls	r0, r6, #3
 800220a:	3008      	adds	r0, #8
 800220c:	4438      	add	r0, r7
 800220e:	89aa      	ldrh	r2, [r5, #12]
 8002210:	6929      	ldr	r1, [r5, #16]
 8002212:	3004      	adds	r0, #4
 8002214:	f7fe fee8 	bl	8000fe8 <CreateQueue>
    for(i=0; i<NUM_OF_UART; i++) {
 8002218:	3401      	adds	r4, #1
 800221a:	b2e4      	uxtb	r4, r4
 800221c:	e7ce      	b.n	80021bc <uartInit+0x4>
 800221e:	bf00      	nop
 8002220:	0800580c 	.word	0x0800580c
 8002224:	200007c0 	.word	0x200007c0
 8002228:	200007a0 	.word	0x200007a0

0800222c <uartStart>:
{
 800222c:	b538      	push	{r3, r4, r5, lr}
    for(i=0; i<NUM_OF_UART; i++){
 800222e:	2400      	movs	r4, #0
 8002230:	b10c      	cbz	r4, 8002236 <uartStart+0xa>
    return result;
 8002232:	2000      	movs	r0, #0
 8002234:	bd38      	pop	{r3, r4, r5, pc}
        huart = &ST_UartHandlers[i];
 8002236:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800223a:	00dd      	lsls	r5, r3, #3
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <uartStart+0x3c>)
 800223e:	441d      	add	r5, r3
        if(HAL_UART_DeInit(huart) != HAL_OK)
 8002240:	4628      	mov	r0, r5
 8002242:	f001 ff8d 	bl	8004160 <HAL_UART_DeInit>
 8002246:	b958      	cbnz	r0, 8002260 <uartStart+0x34>
        if(HAL_UART_Init(huart) != HAL_OK)
 8002248:	4628      	mov	r0, r5
 800224a:	f002 fc30 	bl	8004aae <HAL_UART_Init>
 800224e:	b948      	cbnz	r0, 8002264 <uartStart+0x38>
        HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8002250:	2201      	movs	r2, #1
 8002252:	4906      	ldr	r1, [pc, #24]	; (800226c <uartStart+0x40>)
 8002254:	4628      	mov	r0, r5
 8002256:	f001 ffdf 	bl	8004218 <HAL_UART_Receive_IT>
    for(i=0; i<NUM_OF_UART; i++){
 800225a:	3401      	adds	r4, #1
 800225c:	b2e4      	uxtb	r4, r4
 800225e:	e7e7      	b.n	8002230 <uartStart+0x4>
            return RET_FAIL;
 8002260:	2001      	movs	r0, #1
 8002262:	bd38      	pop	{r3, r4, r5, pc}
            return RET_FAIL;
 8002264:	2001      	movs	r0, #1
}
 8002266:	bd38      	pop	{r3, r4, r5, pc}
 8002268:	200007c0 	.word	0x200007c0
 800226c:	20000838 	.word	0x20000838

08002270 <uartDriverSetBufferSize>:
    uartBufferSize[uartPort] = bufferSize;
 8002270:	4b02      	ldr	r3, [pc, #8]	; (800227c <uartDriverSetBufferSize+0xc>)
 8002272:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8002276:	2000      	movs	r0, #0
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200007bc 	.word	0x200007bc

08002280 <uartDriverWrite>:
 * @param	uartPort Uart port to use.
 * @param	buffer Buffer with data to send
 * @return  error state.
 ****************************************************************************/
eError uartDriverWrite(tUart uartPort, uint8_t* buffer)
{
 8002280:	b508      	push	{r3, lr}
    eError result = RET_OK;
    uint32_t bufferSize;

    bufferSize = uartBufferSize[uartPort];
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <uartDriverWrite+0x14>)
 8002284:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

    if(bufferSize == 0){
 8002288:	b90a      	cbnz	r2, 800228e <uartDriverWrite+0xe>
        return RET_INVALID_PARAMETER;
 800228a:	2005      	movs	r0, #5
#elif defined(MON_UART_TX_POLL)
    result = uartDriverWritePolling(uartPort, buffer, bufferSize);
#endif

    return result;
}
 800228c:	bd08      	pop	{r3, pc}
    result = uartDriverWriteIT(uartPort, buffer, bufferSize);
 800228e:	f7ff fe81 	bl	8001f94 <uartDriverWriteIT>
    return result;
 8002292:	bd08      	pop	{r3, pc}
 8002294:	200007bc 	.word	0x200007bc

08002298 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800229c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800229e:	e003      	b.n	80022a8 <LoopCopyDataInit>

080022a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022a6:	3104      	adds	r1, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022a8:	480b      	ldr	r0, [pc, #44]	; (80022d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80022ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022b0:	d3f6      	bcc.n	80022a0 <CopyDataInit>
	ldr	r2, =_sbss
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80022b4:	e002      	b.n	80022bc <LoopFillZerobss>

080022b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022b8:	f842 3b04 	str.w	r3, [r2], #4

080022bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <LoopForever+0x16>)
	cmp	r2, r3
 80022be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022c0:	d3f9      	bcc.n	80022b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022c2:	f000 f813 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c6:	f002 fc27 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ca:	f7fe f969 	bl	80005a0 <main>

080022ce <LoopForever>:

LoopForever:
    b LoopForever
 80022ce:	e7fe      	b.n	80022ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022d0:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 80022d4:	080058c4 	.word	0x080058c4
	ldr	r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80022dc:	200000f8 	.word	0x200000f8
	ldr	r2, =_sbss
 80022e0:	200000f8 	.word	0x200000f8
	ldr	r3, = _ebss
 80022e4:	200009a8 	.word	0x200009a8

080022e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC1_IRQHandler>
	...

080022ec <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ec:	490f      	ldr	r1, [pc, #60]	; (800232c <SystemInit+0x40>)
 80022ee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80022f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <SystemInit+0x44>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002304:	2000      	movs	r0, #0
 8002306:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800230e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002312:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002314:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002318:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002320:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002322:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002324:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002328:	608b      	str	r3, [r1, #8]
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b510      	push	{r4, lr}
 8002336:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_InitTick+0x24>)
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <HAL_InitTick+0x28>)
 800233e:	fba3 3000 	umull	r3, r0, r3, r0
 8002342:	0980      	lsrs	r0, r0, #6
 8002344:	f000 f858 	bl	80023f8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8002348:	2200      	movs	r2, #0
 800234a:	4621      	mov	r1, r4
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f000 f814 	bl	800237c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8002354:	2000      	movs	r0, #0
 8002356:	bd10      	pop	{r4, pc}
 8002358:	20000090 	.word	0x20000090
 800235c:	10624dd3 	.word	0x10624dd3

08002360 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002360:	4a02      	ldr	r2, [pc, #8]	; (800236c <HAL_IncTick+0xc>)
 8002362:	6813      	ldr	r3, [r2, #0]
 8002364:	3301      	adds	r3, #1
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	200009a0 	.word	0x200009a0

08002370 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002370:	4b01      	ldr	r3, [pc, #4]	; (8002378 <HAL_GetTick+0x8>)
 8002372:	6818      	ldr	r0, [r3, #0]
}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200009a0 	.word	0x200009a0

0800237c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_NVIC_SetPriority+0x5c>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002386:	f1c3 0407 	rsb	r4, r3, #7
 800238a:	2c04      	cmp	r4, #4
 800238c:	bf28      	it	cs
 800238e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002390:	1d1d      	adds	r5, r3, #4
 8002392:	2d06      	cmp	r5, #6
 8002394:	d917      	bls.n	80023c6 <HAL_NVIC_SetPriority+0x4a>
 8002396:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	2501      	movs	r5, #1
 800239a:	fa05 f404 	lsl.w	r4, r5, r4
 800239e:	3c01      	subs	r4, #1
 80023a0:	4021      	ands	r1, r4
 80023a2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	fa05 f303 	lsl.w	r3, r5, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80023ae:	2800      	cmp	r0, #0
 80023b0:	db0b      	blt.n	80023ca <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	0109      	lsls	r1, r1, #4
 80023b4:	b2c9      	uxtb	r1, r1
 80023b6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80023ba:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80023be:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80023c2:	bc30      	pop	{r4, r5}
 80023c4:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c6:	2300      	movs	r3, #0
 80023c8:	e7e6      	b.n	8002398 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	f000 000f 	and.w	r0, r0, #15
 80023ce:	0109      	lsls	r1, r1, #4
 80023d0:	b2c9      	uxtb	r1, r1
 80023d2:	4b02      	ldr	r3, [pc, #8]	; (80023dc <HAL_NVIC_SetPriority+0x60>)
 80023d4:	5419      	strb	r1, [r3, r0]
 80023d6:	e7f4      	b.n	80023c2 <HAL_NVIC_SetPriority+0x46>
 80023d8:	e000ed00 	.word	0xe000ed00
 80023dc:	e000ed14 	.word	0xe000ed14

080023e0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023e0:	0942      	lsrs	r2, r0, #5
 80023e2:	f000 001f 	and.w	r0, r0, #31
 80023e6:	2301      	movs	r3, #1
 80023e8:	fa03 f000 	lsl.w	r0, r3, r0
 80023ec:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <HAL_NVIC_EnableIRQ+0x14>)
 80023ee:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f8:	3801      	subs	r0, #1
 80023fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80023fe:	d20a      	bcs.n	8002416 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_SYSTICK_Config+0x24>)
 8002402:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	21f0      	movs	r1, #240	; 0xf0
 8002406:	4a06      	ldr	r2, [pc, #24]	; (8002420 <HAL_SYSTICK_Config+0x28>)
 8002408:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800240c:	2000      	movs	r0, #0
 800240e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002424:	2804      	cmp	r0, #4
 8002426:	d005      	beq.n	8002434 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002428:	4a05      	ldr	r2, [pc, #20]	; (8002440 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800242a:	6813      	ldr	r3, [r2, #0]
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002434:	4a02      	ldr	r2, [pc, #8]	; (8002440 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8002436:	6813      	ldr	r3, [r2, #0]
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4770      	bx	lr
 8002440:	e000e010 	.word	0xe000e010

08002444 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002444:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002446:	f7ff faf2 	bl	8001a2e <HAL_SYSTICK_Callback>
 800244a:	bd08      	pop	{r3, pc}

0800244c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800244c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800244e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d003      	beq.n	8002460 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	2304      	movs	r3, #4
 800245a:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800245c:	2001      	movs	r0, #1
 800245e:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002460:	6802      	ldr	r2, [r0, #0]
 8002462:	6813      	ldr	r3, [r2, #0]
 8002464:	f023 030e 	bic.w	r3, r3, #14
 8002468:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800246a:	6802      	ldr	r2, [r0, #0]
 800246c:	6813      	ldr	r3, [r2, #0]
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002474:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002476:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002478:	f003 031c 	and.w	r3, r3, #28
 800247c:	2201      	movs	r2, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	604b      	str	r3, [r1, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002484:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002488:	2300      	movs	r3, #0
 800248a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800248e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002490:	b113      	cbz	r3, 8002498 <HAL_DMA_Abort_IT+0x4c>
    {
      hdma->XferAbortCallback(hdma);
 8002492:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2000      	movs	r0, #0
 8002496:	bd08      	pop	{r3, pc}
 8002498:	2000      	movs	r0, #0
    }
  }
  return status;
}
 800249a:	bd08      	pop	{r3, pc}

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249e:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 80024a0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80024a2:	e08c      	b.n	80025be <HAL_GPIO_Init+0x122>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024a4:	08de      	lsrs	r6, r3, #3
 80024a6:	3608      	adds	r6, #8
 80024a8:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ac:	f003 0e07 	and.w	lr, r3, #7
 80024b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80024b4:	270f      	movs	r7, #15
 80024b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80024ba:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024be:	690f      	ldr	r7, [r1, #16]
 80024c0:	fa07 f70e 	lsl.w	r7, r7, lr
 80024c4:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 80024c6:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 80024ca:	e087      	b.n	80025dc <HAL_GPIO_Init+0x140>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024cc:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80024ce:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80024d0:	68cf      	ldr	r7, [r1, #12]
 80024d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80024d6:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80024d8:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024da:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024dc:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80024e0:	684e      	ldr	r6, [r1, #4]
 80024e2:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80024e6:	409e      	lsls	r6, r3
 80024e8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80024ea:	6045      	str	r5, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024ec:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80024ee:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80024f0:	688d      	ldr	r5, [r1, #8]
 80024f2:	fa05 f50e 	lsl.w	r5, r5, lr
 80024f6:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80024f8:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024fa:	684c      	ldr	r4, [r1, #4]
 80024fc:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002500:	d05c      	beq.n	80025bc <HAL_GPIO_Init+0x120>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	4c4a      	ldr	r4, [pc, #296]	; (800262c <HAL_GPIO_Init+0x190>)
 8002504:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002506:	f045 0501 	orr.w	r5, r5, #1
 800250a:	6625      	str	r5, [r4, #96]	; 0x60
 800250c:	6e24      	ldr	r4, [r4, #96]	; 0x60
 800250e:	f004 0401 	and.w	r4, r4, #1
 8002512:	9401      	str	r4, [sp, #4]
 8002514:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8002516:	089d      	lsrs	r5, r3, #2
 8002518:	1cae      	adds	r6, r5, #2
 800251a:	4c45      	ldr	r4, [pc, #276]	; (8002630 <HAL_GPIO_Init+0x194>)
 800251c:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002520:	f003 0603 	and.w	r6, r3, #3
 8002524:	00b6      	lsls	r6, r6, #2
 8002526:	270f      	movs	r7, #15
 8002528:	40b7      	lsls	r7, r6
 800252a:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800252e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002532:	d070      	beq.n	8002616 <HAL_GPIO_Init+0x17a>
 8002534:	4f3f      	ldr	r7, [pc, #252]	; (8002634 <HAL_GPIO_Init+0x198>)
 8002536:	42b8      	cmp	r0, r7
 8002538:	d06f      	beq.n	800261a <HAL_GPIO_Init+0x17e>
 800253a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800253e:	42b8      	cmp	r0, r7
 8002540:	d06d      	beq.n	800261e <HAL_GPIO_Init+0x182>
 8002542:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8002546:	42b8      	cmp	r0, r7
 8002548:	d06b      	beq.n	8002622 <HAL_GPIO_Init+0x186>
 800254a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800254e:	42b8      	cmp	r0, r7
 8002550:	d05f      	beq.n	8002612 <HAL_GPIO_Init+0x176>
 8002552:	2707      	movs	r7, #7
 8002554:	fa07 f606 	lsl.w	r6, r7, r6
 8002558:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800255a:	3502      	adds	r5, #2
 800255c:	4e34      	ldr	r6, [pc, #208]	; (8002630 <HAL_GPIO_Init+0x194>)
 800255e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002562:	4c35      	ldr	r4, [pc, #212]	; (8002638 <HAL_GPIO_Init+0x19c>)
 8002564:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8002566:	43d4      	mvns	r4, r2
 8002568:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800256c:	684f      	ldr	r7, [r1, #4]
 800256e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002572:	d001      	beq.n	8002578 <HAL_GPIO_Init+0xdc>
        {
          temp |= iocurrent;
 8002574:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8002578:	4d2f      	ldr	r5, [pc, #188]	; (8002638 <HAL_GPIO_Init+0x19c>)
 800257a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 800257c:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 800257e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002582:	684f      	ldr	r7, [r1, #4]
 8002584:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002588:	d001      	beq.n	800258e <HAL_GPIO_Init+0xf2>
        {
          temp |= iocurrent;
 800258a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800258e:	4d2a      	ldr	r5, [pc, #168]	; (8002638 <HAL_GPIO_Init+0x19c>)
 8002590:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002592:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8002594:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002598:	684f      	ldr	r7, [r1, #4]
 800259a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800259e:	d001      	beq.n	80025a4 <HAL_GPIO_Init+0x108>
        {
          temp |= iocurrent;
 80025a0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80025a4:	4d24      	ldr	r5, [pc, #144]	; (8002638 <HAL_GPIO_Init+0x19c>)
 80025a6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80025a8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ac:	684e      	ldr	r6, [r1, #4]
 80025ae:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80025b2:	d001      	beq.n	80025b8 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 80025b4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80025b8:	4a1f      	ldr	r2, [pc, #124]	; (8002638 <HAL_GPIO_Init+0x19c>)
 80025ba:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80025bc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80025be:	680a      	ldr	r2, [r1, #0]
 80025c0:	fa32 f403 	lsrs.w	r4, r2, r3
 80025c4:	d02f      	beq.n	8002626 <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80025c6:	2501      	movs	r5, #1
 80025c8:	409d      	lsls	r5, r3
    if(iocurrent)
 80025ca:	402a      	ands	r2, r5
 80025cc:	d0f6      	beq.n	80025bc <HAL_GPIO_Init+0x120>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ce:	684c      	ldr	r4, [r1, #4]
 80025d0:	2c02      	cmp	r4, #2
 80025d2:	f43f af67 	beq.w	80024a4 <HAL_GPIO_Init+0x8>
 80025d6:	2c12      	cmp	r4, #18
 80025d8:	f43f af64 	beq.w	80024a4 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80025dc:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80025de:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80025e2:	2403      	movs	r4, #3
 80025e4:	fa04 f40e 	lsl.w	r4, r4, lr
 80025e8:	43e4      	mvns	r4, r4
 80025ea:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025ec:	684f      	ldr	r7, [r1, #4]
 80025ee:	f007 0703 	and.w	r7, r7, #3
 80025f2:	fa07 f70e 	lsl.w	r7, r7, lr
 80025f6:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80025f8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025fa:	684e      	ldr	r6, [r1, #4]
 80025fc:	1e77      	subs	r7, r6, #1
 80025fe:	2f01      	cmp	r7, #1
 8002600:	f67f af64 	bls.w	80024cc <HAL_GPIO_Init+0x30>
 8002604:	2e11      	cmp	r6, #17
 8002606:	f43f af61 	beq.w	80024cc <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260a:	2e12      	cmp	r6, #18
 800260c:	f47f af6e 	bne.w	80024ec <HAL_GPIO_Init+0x50>
 8002610:	e75c      	b.n	80024cc <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8002612:	2704      	movs	r7, #4
 8002614:	e79e      	b.n	8002554 <HAL_GPIO_Init+0xb8>
 8002616:	2700      	movs	r7, #0
 8002618:	e79c      	b.n	8002554 <HAL_GPIO_Init+0xb8>
 800261a:	2701      	movs	r7, #1
 800261c:	e79a      	b.n	8002554 <HAL_GPIO_Init+0xb8>
 800261e:	2702      	movs	r7, #2
 8002620:	e798      	b.n	8002554 <HAL_GPIO_Init+0xb8>
 8002622:	2703      	movs	r7, #3
 8002624:	e796      	b.n	8002554 <HAL_GPIO_Init+0xb8>
  }
}
 8002626:	b003      	add	sp, #12
 8002628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	40010000 	.word	0x40010000
 8002634:	48000400 	.word	0x48000400
 8002638:	40010400 	.word	0x40010400

0800263c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800263c:	b90a      	cbnz	r2, 8002642 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800263e:	6281      	str	r1, [r0, #40]	; 0x28
 8002640:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002642:	6181      	str	r1, [r0, #24]
 8002644:	4770      	bx	lr

08002646 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002646:	6943      	ldr	r3, [r0, #20]
 8002648:	4059      	eors	r1, r3
 800264a:	6141      	str	r1, [r0, #20]
 800264c:	4770      	bx	lr
	...

08002650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002650:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4203      	tst	r3, r0
 8002658:	d100      	bne.n	800265c <HAL_GPIO_EXTI_IRQHandler+0xc>
 800265a:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265c:	4b02      	ldr	r3, [pc, #8]	; (8002668 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800265e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002660:	f7ff f9ed 	bl	8001a3e <HAL_GPIO_EXTI_Callback>
  }
}
 8002664:	e7f9      	b.n	800265a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002666:	bf00      	nop
 8002668:	40010400 	.word	0x40010400

0800266c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800266c:	4b02      	ldr	r3, [pc, #8]	; (8002678 <HAL_PWREx_GetVoltageRange+0xc>)
 800266e:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8002670:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40007000 	.word	0x40007000

0800267c <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002680:	d00f      	beq.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800268a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268e:	d037      	beq.n	8002700 <HAL_PWREx_ControlVoltageScaling+0x84>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8002692:	6813      	ldr	r3, [r2, #0]
 8002694:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002698:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 800269e:	2000      	movs	r0, #0
 80026a0:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ae:	d023      	beq.n	80026f8 <HAL_PWREx_ControlVoltageScaling+0x7c>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026bc:	6013      	str	r3, [r2, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80026be:	4b12      	ldr	r3, [pc, #72]	; (8002708 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80026c6:	f502 325b 	add.w	r2, r2, #224256	; 0x36c00
 80026ca:	f202 2283 	addw	r2, r2, #643	; 0x283
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0c9a      	lsrs	r2, r3, #18
 80026d4:	2332      	movs	r3, #50	; 0x32
 80026d6:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80026da:	e000      	b.n	80026de <HAL_PWREx_ControlVoltageScaling+0x62>
        wait_loop_index--;
 80026dc:	3b01      	subs	r3, #1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 80026de:	b123      	cbz	r3, 80026ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80026e0:	4a08      	ldr	r2, [pc, #32]	; (8002704 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80026e2:	6952      	ldr	r2, [r2, #20]
 80026e4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80026e8:	d1f8      	bne.n	80026dc <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80026f2:	d003      	beq.n	80026fc <HAL_PWREx_ControlVoltageScaling+0x80>
        return HAL_TIMEOUT;
 80026f4:	2003      	movs	r0, #3
 80026f6:	4770      	bx	lr
  return HAL_OK;
 80026f8:	2000      	movs	r0, #0
 80026fa:	4770      	bx	lr
 80026fc:	2000      	movs	r0, #0
 80026fe:	4770      	bx	lr
 8002700:	2000      	movs	r0, #0
}  
 8002702:	4770      	bx	lr
 8002704:	40007000 	.word	0x40007000
 8002708:	20000090 	.word	0x20000090

0800270c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800270c:	b530      	push	{r4, r5, lr}
 800270e:	b083      	sub	sp, #12
 8002710:	4605      	mov	r5, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800271a:	d00b      	beq.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800271c:	f7ff ffa6 	bl	800266c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002720:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002724:	d017      	beq.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002726:	2d80      	cmp	r5, #128	; 0x80
 8002728:	d81f      	bhi.n	800276a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800272a:	d02d      	beq.n	8002788 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800272c:	2d70      	cmp	r5, #112	; 0x70
 800272e:	d02d      	beq.n	800278c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002730:	2100      	movs	r1, #0
 8002732:	e01b      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4c17      	ldr	r4, [pc, #92]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8002736:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	65a3      	str	r3, [r4, #88]	; 0x58
 800273e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002748:	f7ff ff90 	bl	800266c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800274c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002752:	65a3      	str	r3, [r4, #88]	; 0x58
 8002754:	e7e4      	b.n	8002720 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002756:	2d80      	cmp	r5, #128	; 0x80
 8002758:	d903      	bls.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 800275a:	2da0      	cmp	r5, #160	; 0xa0
 800275c:	d903      	bls.n	8002766 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800275e:	2102      	movs	r1, #2
 8002760:	e004      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002762:	2100      	movs	r1, #0
 8002764:	e002      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8002766:	2101      	movs	r1, #1
 8002768:	e000      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800276a:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800276c:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800276e:	6813      	ldr	r3, [r2, #0]
 8002770:	f023 0307 	bic.w	r3, r3, #7
 8002774:	430b      	orrs	r3, r1
 8002776:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002778:	6813      	ldr	r3, [r2, #0]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	4299      	cmp	r1, r3
 8002780:	d006      	beq.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8002782:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8002784:	b003      	add	sp, #12
 8002786:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8002788:	2102      	movs	r1, #2
 800278a:	e7ef      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800278c:	2101      	movs	r1, #1
 800278e:	e7ed      	b.n	800276c <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8002790:	2000      	movs	r0, #0
 8002792:	e7f7      	b.n	8002784 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8002794:	40021000 	.word	0x40021000
 8002798:	40022000 	.word	0x40022000

0800279c <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f013 0f0c 	tst.w	r3, #12
 80027a4:	d01a      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x40>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80027a6:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d00e      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x34>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027b2:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d02f      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x82>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027be:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d02c      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 80027ca:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80027cc:	4601      	mov	r1, r0
 80027ce:	e018      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x66>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80027d0:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d1ea      	bne.n	80027b2 <HAL_RCC_GetSysClockFreq+0x16>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f013 0f08 	tst.w	r3, #8
 80027e4:	d114      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0x74>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 80027e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ec:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 80027f0:	4a27      	ldr	r2, [pc, #156]	; (8002890 <HAL_RCC_GetSysClockFreq+0xf4>)
 80027f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f013 0f0c 	tst.w	r3, #12
 80027fe:	d00c      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x7e>
  uint32_t sysclockfreq = 0U;
 8002800:	2000      	movs	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002802:	4a22      	ldr	r2, [pc, #136]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002804:	6893      	ldr	r3, [r2, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d00d      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0x8e>
}
 800280e:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002810:	4b1e      	ldr	r3, [pc, #120]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002818:	e7ea      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = msirange;
 800281a:	4608      	mov	r0, r1
 800281c:	e7f1      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSI_VALUE;
 800281e:	481d      	ldr	r0, [pc, #116]	; (8002894 <HAL_RCC_GetSysClockFreq+0xf8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8002820:	2100      	movs	r1, #0
 8002822:	e7ee      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSE_VALUE;
 8002824:	481c      	ldr	r0, [pc, #112]	; (8002898 <HAL_RCC_GetSysClockFreq+0xfc>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8002826:	2100      	movs	r1, #0
 8002828:	e7eb      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800282a:	4613      	mov	r3, r2
 800282c:	68d2      	ldr	r2, [r2, #12]
 800282e:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002838:	3301      	adds	r3, #1
    switch (pllsource)
 800283a:	2a02      	cmp	r2, #2
 800283c:	d00a      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0xb8>
 800283e:	2a03      	cmp	r2, #3
 8002840:	d01a      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0xdc>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002842:	fbb1 f3f3 	udiv	r3, r1, r3
 8002846:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002848:	68d0      	ldr	r0, [r2, #12]
 800284a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800284e:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8002852:	e008      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0xca>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002854:	480f      	ldr	r0, [pc, #60]	; (8002894 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002856:	fbb0 f3f3 	udiv	r3, r0, r3
 800285a:	4a0c      	ldr	r2, [pc, #48]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 800285c:	68d0      	ldr	r0, [r2, #12]
 800285e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002862:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800286e:	3301      	adds	r3, #1
 8002870:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8002872:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002876:	e7ca      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x72>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002878:	4807      	ldr	r0, [pc, #28]	; (8002898 <HAL_RCC_GetSysClockFreq+0xfc>)
 800287a:	fbb0 f3f3 	udiv	r3, r0, r3
 800287e:	4a03      	ldr	r2, [pc, #12]	; (800288c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002880:	68d0      	ldr	r0, [r2, #12]
 8002882:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002886:	fb00 f003 	mul.w	r0, r0, r3
      break;
 800288a:	e7ec      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0xca>
 800288c:	40021000 	.word	0x40021000
 8002890:	08005850 	.word	0x08005850
 8002894:	00f42400 	.word	0x00f42400
 8002898:	007a1200 	.word	0x007a1200

0800289c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800289c:	2800      	cmp	r0, #0
 800289e:	f000 82d7 	beq.w	8002e50 <HAL_RCC_OscConfig+0x5b4>
{
 80028a2:	b570      	push	{r4, r5, r6, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028a8:	6803      	ldr	r3, [r0, #0]
 80028aa:	f013 0f10 	tst.w	r3, #16
 80028ae:	d03f      	beq.n	8002930 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80028b0:	4b97      	ldr	r3, [pc, #604]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f013 0f0c 	tst.w	r3, #12
 80028b8:	f040 8092 	bne.w	80029e0 <HAL_RCC_OscConfig+0x144>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028bc:	4b94      	ldr	r3, [pc, #592]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f013 0f02 	tst.w	r3, #2
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_OscConfig+0x32>
 80028c6:	6983      	ldr	r3, [r0, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 82c3 	beq.w	8002e54 <HAL_RCC_OscConfig+0x5b8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028ce:	6a20      	ldr	r0, [r4, #32]
 80028d0:	4b8f      	ldr	r3, [pc, #572]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f013 0f08 	tst.w	r3, #8
 80028d8:	d062      	beq.n	80029a0 <HAL_RCC_OscConfig+0x104>
 80028da:	4b8d      	ldr	r3, [pc, #564]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e2:	4283      	cmp	r3, r0
 80028e4:	d263      	bcs.n	80029ae <HAL_RCC_OscConfig+0x112>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028e6:	f7ff ff11 	bl	800270c <RCC_SetFlashLatencyFromMSIRange>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	f040 82b4 	bne.w	8002e58 <HAL_RCC_OscConfig+0x5bc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028f0:	4b87      	ldr	r3, [pc, #540]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	f042 0208 	orr.w	r2, r2, #8
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002900:	6a21      	ldr	r1, [r4, #32]
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800290c:	69e1      	ldr	r1, [r4, #28]
 800290e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002912:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002914:	f7ff ff42 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8002918:	4b7d      	ldr	r3, [pc, #500]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002920:	4a7c      	ldr	r2, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x278>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	40d8      	lsrs	r0, r3
 8002926:	4b7c      	ldr	r3, [pc, #496]	; (8002b18 <HAL_RCC_OscConfig+0x27c>)
 8002928:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800292a:	2000      	movs	r0, #0
 800292c:	f7ff fd02 	bl	8002334 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	f013 0f01 	tst.w	r3, #1
 8002936:	f000 80a1 	beq.w	8002a7c <HAL_RCC_OscConfig+0x1e0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800293a:	4b75      	ldr	r3, [pc, #468]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b08      	cmp	r3, #8
 8002944:	f000 8091 	beq.w	8002a6a <HAL_RCC_OscConfig+0x1ce>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002948:	4b71      	ldr	r3, [pc, #452]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8002950:	2b0c      	cmp	r3, #12
 8002952:	f000 8083 	beq.w	8002a5c <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002956:	6863      	ldr	r3, [r4, #4]
 8002958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295c:	f000 80b5 	beq.w	8002aca <HAL_RCC_OscConfig+0x22e>
 8002960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002964:	f000 80b7 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x23a>
 8002968:	4b69      	ldr	r3, [pc, #420]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002978:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297a:	6863      	ldr	r3, [r4, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80b7 	beq.w	8002af0 <HAL_RCC_OscConfig+0x254>
        tickstart = HAL_GetTick();
 8002982:	f7ff fcf5 	bl	8002370 <HAL_GetTick>
 8002986:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002988:	4b61      	ldr	r3, [pc, #388]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002990:	d174      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002992:	f7ff fced 	bl	8002370 <HAL_GetTick>
 8002996:	1b40      	subs	r0, r0, r5
 8002998:	2864      	cmp	r0, #100	; 0x64
 800299a:	d9f5      	bls.n	8002988 <HAL_RCC_OscConfig+0xec>
            return HAL_TIMEOUT;
 800299c:	2003      	movs	r0, #3
 800299e:	e262      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029a0:	4b5b      	ldr	r3, [pc, #364]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 80029a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ac:	e799      	b.n	80028e2 <HAL_RCC_OscConfig+0x46>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029ae:	4b58      	ldr	r3, [pc, #352]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f042 0208 	orr.w	r2, r2, #8
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029be:	6a21      	ldr	r1, [r4, #32]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80029ca:	69e1      	ldr	r1, [r4, #28]
 80029cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80029d0:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029d2:	6a20      	ldr	r0, [r4, #32]
 80029d4:	f7ff fe9a 	bl	800270c <RCC_SetFlashLatencyFromMSIRange>
 80029d8:	2800      	cmp	r0, #0
 80029da:	d09b      	beq.n	8002914 <HAL_RCC_OscConfig+0x78>
            return HAL_ERROR;
 80029dc:	2001      	movs	r0, #1
 80029de:	e242      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029e0:	6983      	ldr	r3, [r0, #24]
 80029e2:	b333      	cbz	r3, 8002a32 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_MSI_ENABLE();
 80029e4:	4a4a      	ldr	r2, [pc, #296]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80029ee:	f7ff fcbf 	bl	8002370 <HAL_GetTick>
 80029f2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80029f4:	4b46      	ldr	r3, [pc, #280]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f013 0f02 	tst.w	r3, #2
 80029fc:	d106      	bne.n	8002a0c <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fe:	f7ff fcb7 	bl	8002370 <HAL_GetTick>
 8002a02:	1b40      	subs	r0, r0, r5
 8002a04:	2802      	cmp	r0, #2
 8002a06:	d9f5      	bls.n	80029f4 <HAL_RCC_OscConfig+0x158>
            return HAL_TIMEOUT;
 8002a08:	2003      	movs	r0, #3
 8002a0a:	e22c      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a0c:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	f042 0208 	orr.w	r2, r2, #8
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a1c:	6a21      	ldr	r1, [r4, #32]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002a28:	69e1      	ldr	r1, [r4, #28]
 8002a2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	e77e      	b.n	8002930 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_MSI_DISABLE();
 8002a32:	4a37      	ldr	r2, [pc, #220]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002a34:	6813      	ldr	r3, [r2, #0]
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a3c:	f7ff fc98 	bl	8002370 <HAL_GetTick>
 8002a40:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002a42:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f013 0f02 	tst.w	r3, #2
 8002a4a:	f43f af71 	beq.w	8002930 <HAL_RCC_OscConfig+0x94>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a4e:	f7ff fc8f 	bl	8002370 <HAL_GetTick>
 8002a52:	1b40      	subs	r0, r0, r5
 8002a54:	2802      	cmp	r0, #2
 8002a56:	d9f4      	bls.n	8002a42 <HAL_RCC_OscConfig+0x1a6>
            return HAL_TIMEOUT;
 8002a58:	2003      	movs	r0, #3
 8002a5a:	e204      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	f47f af76 	bne.w	8002956 <HAL_RCC_OscConfig+0xba>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6a:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a72:	d003      	beq.n	8002a7c <HAL_RCC_OscConfig+0x1e0>
 8002a74:	6863      	ldr	r3, [r4, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 81f0 	beq.w	8002e5c <HAL_RCC_OscConfig+0x5c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	f013 0f02 	tst.w	r3, #2
 8002a82:	d062      	beq.n	8002b4a <HAL_RCC_OscConfig+0x2ae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002a84:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d04b      	beq.n	8002b28 <HAL_RCC_OscConfig+0x28c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d03f      	beq.n	8002b1c <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a9c:	68e3      	ldr	r3, [r4, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d079      	beq.n	8002b96 <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_HSI_ENABLE();
 8002aa2:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	6813      	ldr	r3, [r2, #0]
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002aac:	f7ff fc60 	bl	8002370 <HAL_GetTick>
 8002ab0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002ab2:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002aba:	d163      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2e8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abc:	f7ff fc58 	bl	8002370 <HAL_GetTick>
 8002ac0:	1b40      	subs	r0, r0, r5
 8002ac2:	2802      	cmp	r0, #2
 8002ac4:	d9f5      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8002ac6:	2003      	movs	r0, #3
 8002ac8:	e1cd      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aca:	4a11      	ldr	r2, [pc, #68]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	e751      	b.n	800297a <HAL_RCC_OscConfig+0xde>
 8002ad6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ada:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	e744      	b.n	800297a <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8002af0:	f7ff fc3e 	bl	8002370 <HAL_GetTick>
 8002af4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_OscConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002afe:	d0bd      	beq.n	8002a7c <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b00:	f7ff fc36 	bl	8002370 <HAL_GetTick>
 8002b04:	1b40      	subs	r0, r0, r5
 8002b06:	2864      	cmp	r0, #100	; 0x64
 8002b08:	d9f5      	bls.n	8002af6 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8002b0a:	2003      	movs	r0, #3
 8002b0c:	e1ab      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	08005838 	.word	0x08005838
 8002b18:	20000090 	.word	0x20000090
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b1c:	4bb1      	ldr	r3, [pc, #708]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d1b9      	bne.n	8002a9c <HAL_RCC_OscConfig+0x200>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b28:	4bae      	ldr	r3, [pc, #696]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_OscConfig+0x29e>
 8002b32:	68e3      	ldr	r3, [r4, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8193 	beq.w	8002e60 <HAL_RCC_OscConfig+0x5c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3a:	4aaa      	ldr	r2, [pc, #680]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002b3c:	6853      	ldr	r3, [r2, #4]
 8002b3e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002b42:	6921      	ldr	r1, [r4, #16]
 8002b44:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002b48:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	f013 0f08 	tst.w	r3, #8
 8002b50:	d04c      	beq.n	8002bec <HAL_RCC_OscConfig+0x350>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b52:	6963      	ldr	r3, [r4, #20]
 8002b54:	b39b      	cbz	r3, 8002bbe <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_LSI_ENABLE();
 8002b56:	4aa3      	ldr	r2, [pc, #652]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002b58:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002b64:	f7ff fc04 	bl	8002370 <HAL_GetTick>
 8002b68:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8002b6a:	4b9e      	ldr	r3, [pc, #632]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b70:	f013 0f02 	tst.w	r3, #2
 8002b74:	d13a      	bne.n	8002bec <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b76:	f7ff fbfb 	bl	8002370 <HAL_GetTick>
 8002b7a:	1b40      	subs	r0, r0, r5
 8002b7c:	2802      	cmp	r0, #2
 8002b7e:	d9f4      	bls.n	8002b6a <HAL_RCC_OscConfig+0x2ce>
          return HAL_TIMEOUT;
 8002b80:	2003      	movs	r0, #3
 8002b82:	e170      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4a97      	ldr	r2, [pc, #604]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002b86:	6853      	ldr	r3, [r2, #4]
 8002b88:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002b8c:	6921      	ldr	r1, [r4, #16]
 8002b8e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002b92:	6053      	str	r3, [r2, #4]
 8002b94:	e7d9      	b.n	8002b4a <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_HSI_DISABLE();
 8002b96:	4a93      	ldr	r2, [pc, #588]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002b98:	6813      	ldr	r3, [r2, #0]
 8002b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b9e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002ba0:	f7ff fbe6 	bl	8002370 <HAL_GetTick>
 8002ba4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8002ba6:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002bae:	d0cc      	beq.n	8002b4a <HAL_RCC_OscConfig+0x2ae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fbde 	bl	8002370 <HAL_GetTick>
 8002bb4:	1b40      	subs	r0, r0, r5
 8002bb6:	2802      	cmp	r0, #2
 8002bb8:	d9f5      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x30a>
            return HAL_TIMEOUT;
 8002bba:	2003      	movs	r0, #3
 8002bbc:	e153      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_LSI_DISABLE();
 8002bbe:	4a89      	ldr	r2, [pc, #548]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002bc0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002bcc:	f7ff fbd0 	bl	8002370 <HAL_GetTick>
 8002bd0:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8002bd2:	4b84      	ldr	r3, [pc, #528]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd8:	f013 0f02 	tst.w	r3, #2
 8002bdc:	d006      	beq.n	8002bec <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bde:	f7ff fbc7 	bl	8002370 <HAL_GetTick>
 8002be2:	1b40      	subs	r0, r0, r5
 8002be4:	2802      	cmp	r0, #2
 8002be6:	d9f4      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x336>
          return HAL_TIMEOUT;
 8002be8:	2003      	movs	r0, #3
 8002bea:	e13c      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	f013 0f04 	tst.w	r3, #4
 8002bf2:	d07a      	beq.n	8002cea <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bf4:	4b7b      	ldr	r3, [pc, #492]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002bfc:	d136      	bne.n	8002c6c <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bfe:	4b79      	ldr	r3, [pc, #484]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002c00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c06:	659a      	str	r2, [r3, #88]	; 0x58
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c12:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c14:	4b74      	ldr	r3, [pc, #464]	; (8002de8 <HAL_RCC_OscConfig+0x54c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c1c:	d028      	beq.n	8002c70 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c1e:	68a3      	ldr	r3, [r4, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d039      	beq.n	8002c98 <HAL_RCC_OscConfig+0x3fc>
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d03f      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x40c>
 8002c28:	4b6e      	ldr	r3, [pc, #440]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002c2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002c36:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c42:	68a3      	ldr	r3, [r4, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d03d      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x428>
      tickstart = HAL_GetTick();
 8002c48:	f7ff fb92 	bl	8002370 <HAL_GetTick>
 8002c4c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002c4e:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c54:	f013 0f02 	tst.w	r3, #2
 8002c58:	d146      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7ff fb89 	bl	8002370 <HAL_GetTick>
 8002c5e:	1b80      	subs	r0, r0, r6
 8002c60:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c64:	4298      	cmp	r0, r3
 8002c66:	d9f2      	bls.n	8002c4e <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8002c68:	2003      	movs	r0, #3
 8002c6a:	e0fc      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
    FlagStatus       pwrclkchanged = RESET;
 8002c6c:	2500      	movs	r5, #0
 8002c6e:	e7d1      	b.n	8002c14 <HAL_RCC_OscConfig+0x378>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c70:	4a5d      	ldr	r2, [pc, #372]	; (8002de8 <HAL_RCC_OscConfig+0x54c>)
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c78:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002c7a:	f7ff fb79 	bl	8002370 <HAL_GetTick>
 8002c7e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c80:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_OscConfig+0x54c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c88:	d1c9      	bne.n	8002c1e <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7ff fb71 	bl	8002370 <HAL_GetTick>
 8002c8e:	1b80      	subs	r0, r0, r6
 8002c90:	2802      	cmp	r0, #2
 8002c92:	d9f5      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3e4>
          return HAL_TIMEOUT;
 8002c94:	2003      	movs	r0, #3
 8002c96:	e0e6      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c98:	4a52      	ldr	r2, [pc, #328]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002c9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca6:	e7cc      	b.n	8002c42 <HAL_RCC_OscConfig+0x3a6>
 8002ca8:	4b4e      	ldr	r3, [pc, #312]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002caa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002cae:	f042 0204 	orr.w	r2, r2, #4
 8002cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002cb6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002cc2:	e7be      	b.n	8002c42 <HAL_RCC_OscConfig+0x3a6>
      tickstart = HAL_GetTick();
 8002cc4:	f7ff fb54 	bl	8002370 <HAL_GetTick>
 8002cc8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8002cca:	4b46      	ldr	r3, [pc, #280]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f013 0f02 	tst.w	r3, #2
 8002cd4:	d008      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7ff fb4b 	bl	8002370 <HAL_GetTick>
 8002cda:	1b80      	subs	r0, r0, r6
 8002cdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d9f2      	bls.n	8002cca <HAL_RCC_OscConfig+0x42e>
          return HAL_TIMEOUT;
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	e0be      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
    if(pwrclkchanged == SET)
 8002ce8:	b9e5      	cbnz	r5, 8002d24 <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	f013 0f20 	tst.w	r3, #32
 8002cf0:	d035      	beq.n	8002d5e <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cf4:	b1e3      	cbz	r3, 8002d30 <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 8002cf6:	4a3b      	ldr	r2, [pc, #236]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002cf8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002d04:	f7ff fb34 	bl	8002370 <HAL_GetTick>
 8002d08:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d10:	f013 0f02 	tst.w	r3, #2
 8002d14:	d123      	bne.n	8002d5e <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d16:	f7ff fb2b 	bl	8002370 <HAL_GetTick>
 8002d1a:	1b40      	subs	r0, r0, r5
 8002d1c:	2802      	cmp	r0, #2
 8002d1e:	d9f4      	bls.n	8002d0a <HAL_RCC_OscConfig+0x46e>
          return HAL_TIMEOUT;
 8002d20:	2003      	movs	r0, #3
 8002d22:	e0a0      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d24:	4a2f      	ldr	r2, [pc, #188]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002d26:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d2e:	e7dc      	b.n	8002cea <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 8002d30:	4a2c      	ldr	r2, [pc, #176]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002d32:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002d36:	f023 0301 	bic.w	r3, r3, #1
 8002d3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002d3e:	f7ff fb17 	bl	8002370 <HAL_GetTick>
 8002d42:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8002d44:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d4a:	f013 0f02 	tst.w	r3, #2
 8002d4e:	d006      	beq.n	8002d5e <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d50:	f7ff fb0e 	bl	8002370 <HAL_GetTick>
 8002d54:	1b40      	subs	r0, r0, r5
 8002d56:	2802      	cmp	r0, #2
 8002d58:	d9f4      	bls.n	8002d44 <HAL_RCC_OscConfig+0x4a8>
          return HAL_TIMEOUT;
 8002d5a:	2003      	movs	r0, #3
 8002d5c:	e083      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d07f      	beq.n	8002e64 <HAL_RCC_OscConfig+0x5c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d64:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002d66:	6892      	ldr	r2, [r2, #8]
 8002d68:	f002 020c 	and.w	r2, r2, #12
 8002d6c:	2a0c      	cmp	r2, #12
 8002d6e:	d07c      	beq.n	8002e6a <HAL_RCC_OscConfig+0x5ce>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d023      	beq.n	8002dbc <HAL_RCC_OscConfig+0x520>
        __HAL_RCC_PLL_DISABLE();
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002d7c:	601a      	str	r2, [r3, #0]
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002d84:	d104      	bne.n	8002d90 <HAL_RCC_OscConfig+0x4f4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d86:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002d88:	68d3      	ldr	r3, [r2, #12]
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002d92:	68d3      	ldr	r3, [r2, #12]
 8002d94:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9c:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002d9e:	f7ff fae7 	bl	8002370 <HAL_GetTick>
 8002da2:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002dac:	d04e      	beq.n	8002e4c <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dae:	f7ff fadf 	bl	8002370 <HAL_GetTick>
 8002db2:	1b00      	subs	r0, r0, r4
 8002db4:	2802      	cmp	r0, #2
 8002db6:	d9f5      	bls.n	8002da4 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8002db8:	2003      	movs	r0, #3
 8002dba:	e054      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4a09      	ldr	r2, [pc, #36]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002dbe:	6813      	ldr	r3, [r2, #0]
 8002dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002dc6:	f7ff fad3 	bl	8002370 <HAL_GetTick>
 8002dca:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_OscConfig+0x548>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCC_OscConfig+0x550>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7ff facb 	bl	8002370 <HAL_GetTick>
 8002dda:	1b40      	subs	r0, r0, r5
 8002ddc:	2802      	cmp	r0, #2
 8002dde:	d9f5      	bls.n	8002dcc <HAL_RCC_OscConfig+0x530>
            return HAL_TIMEOUT;
 8002de0:	2003      	movs	r0, #3
 8002de2:	e040      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40007000 	.word	0x40007000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002dee:	1e5a      	subs	r2, r3, #1
 8002df0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002df8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002dfe:	0852      	lsrs	r2, r2, #1
 8002e00:	3a01      	subs	r2, #1
 8002e02:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002e06:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002e10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e12:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8002e16:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <HAL_RCC_OscConfig+0x5d4>)
 8002e18:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8002e1a:	6813      	ldr	r3, [r2, #0]
 8002e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e20:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e22:	68d3      	ldr	r3, [r2, #12]
 8002e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e28:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002e2a:	f7ff faa1 	bl	8002370 <HAL_GetTick>
 8002e2e:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <HAL_RCC_OscConfig+0x5d4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_OscConfig+0x5ac>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7ff fa99 	bl	8002370 <HAL_GetTick>
 8002e3e:	1b00      	subs	r0, r0, r4
 8002e40:	2802      	cmp	r0, #2
 8002e42:	d9f5      	bls.n	8002e30 <HAL_RCC_OscConfig+0x594>
            return HAL_TIMEOUT;
 8002e44:	2003      	movs	r0, #3
 8002e46:	e00e      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 8002e48:	2000      	movs	r0, #0
 8002e4a:	e00c      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
    return HAL_ERROR;
 8002e50:	2001      	movs	r0, #1
 8002e52:	4770      	bx	lr
        return HAL_ERROR;
 8002e54:	2001      	movs	r0, #1
 8002e56:	e006      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
            return HAL_ERROR;
 8002e58:	2001      	movs	r0, #1
 8002e5a:	e004      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	e002      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8002e60:	2001      	movs	r0, #1
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 8002e64:	2000      	movs	r0, #0
}
 8002e66:	b002      	add	sp, #8
 8002e68:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002e6a:	2001      	movs	r0, #1
 8002e6c:	e7fb      	b.n	8002e66 <HAL_RCC_OscConfig+0x5ca>
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000

08002e74 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002e74:	2800      	cmp	r0, #0
 8002e76:	f000 8099 	beq.w	8002fac <HAL_RCC_ClockConfig+0x138>
{
 8002e7a:	b570      	push	{r4, r5, r6, lr}
 8002e7c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7e:	4b4d      	ldr	r3, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x140>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	428b      	cmp	r3, r1
 8002e88:	d20c      	bcs.n	8002ea4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4a4a      	ldr	r2, [pc, #296]	; (8002fb4 <HAL_RCC_ClockConfig+0x140>)
 8002e8c:	6813      	ldr	r3, [r2, #0]
 8002e8e:	f023 0307 	bic.w	r3, r3, #7
 8002e92:	430b      	orrs	r3, r1
 8002e94:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e96:	6813      	ldr	r3, [r2, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	4299      	cmp	r1, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	f013 0f01 	tst.w	r3, #1
 8002eac:	d039      	beq.n	8002f22 <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eae:	6863      	ldr	r3, [r4, #4]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d009      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d026      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002eb8:	bb63      	cbnz	r3, 8002f14 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8002eba:	4a3f      	ldr	r2, [pc, #252]	; (8002fb8 <HAL_RCC_ClockConfig+0x144>)
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	f012 0f02 	tst.w	r2, #2
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002ec8:	4a3b      	ldr	r2, [pc, #236]	; (8002fb8 <HAL_RCC_ClockConfig+0x144>)
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002ed0:	d06e      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ed2:	4939      	ldr	r1, [pc, #228]	; (8002fb8 <HAL_RCC_ClockConfig+0x144>)
 8002ed4:	688a      	ldr	r2, [r1, #8]
 8002ed6:	f022 0203 	bic.w	r2, r2, #3
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002ede:	f7ff fa47 	bl	8002370 <HAL_GetTick>
 8002ee2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee4:	4b34      	ldr	r3, [pc, #208]	; (8002fb8 <HAL_RCC_ClockConfig+0x144>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	6862      	ldr	r2, [r4, #4]
 8002eee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002ef2:	d016      	beq.n	8002f22 <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7ff fa3c 	bl	8002370 <HAL_GetTick>
 8002ef8:	1b80      	subs	r0, r0, r6
 8002efa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002efe:	4298      	cmp	r0, r3
 8002f00:	d9f0      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8002f02:	2003      	movs	r0, #3
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002f06:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <HAL_RCC_ClockConfig+0x144>)
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002f0e:	d1e0      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002f10:	2001      	movs	r0, #1
 8002f12:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002f14:	4a28      	ldr	r2, [pc, #160]	; (8002fb8 <HAL_RCC_ClockConfig+0x144>)
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002f1c:	d1d9      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002f1e:	2001      	movs	r0, #1
 8002f20:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	f013 0f02 	tst.w	r3, #2
 8002f28:	d006      	beq.n	8002f38 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2a:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <HAL_RCC_ClockConfig+0x144>)
 8002f2c:	6893      	ldr	r3, [r2, #8]
 8002f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f32:	68a1      	ldr	r1, [r4, #8]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f38:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_RCC_ClockConfig+0x140>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	429d      	cmp	r5, r3
 8002f42:	d20c      	bcs.n	8002f5e <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <HAL_RCC_ClockConfig+0x140>)
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	f023 0307 	bic.w	r3, r3, #7
 8002f4c:	432b      	orrs	r3, r5
 8002f4e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f50:	6813      	ldr	r3, [r2, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	429d      	cmp	r5, r3
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 8002f5a:	2001      	movs	r0, #1
}
 8002f5c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	f013 0f04 	tst.w	r3, #4
 8002f64:	d006      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f66:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_RCC_ClockConfig+0x144>)
 8002f68:	6893      	ldr	r3, [r2, #8]
 8002f6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f6e:	68e1      	ldr	r1, [r4, #12]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	f013 0f08 	tst.w	r3, #8
 8002f7a:	d007      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <HAL_RCC_ClockConfig+0x144>)
 8002f7e:	6893      	ldr	r3, [r2, #8]
 8002f80:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002f84:	6921      	ldr	r1, [r4, #16]
 8002f86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f8a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f8c:	f7ff fc06 	bl	800279c <HAL_RCC_GetSysClockFreq>
 8002f90:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_ClockConfig+0x144>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f98:	4a08      	ldr	r2, [pc, #32]	; (8002fbc <HAL_RCC_ClockConfig+0x148>)
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	40d8      	lsrs	r0, r3
 8002f9e:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <HAL_RCC_ClockConfig+0x14c>)
 8002fa0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7ff f9c6 	bl	8002334 <HAL_InitTick>
  return HAL_OK;
 8002fa8:	2000      	movs	r0, #0
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002fac:	2001      	movs	r0, #1
 8002fae:	4770      	bx	lr
        return HAL_ERROR;
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
 8002fb4:	40022000 	.word	0x40022000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	08005838 	.word	0x08005838
 8002fc0:	20000090 	.word	0x20000090

08002fc4 <HAL_RCC_GetHCLKFreq>:
}
 8002fc4:	4b01      	ldr	r3, [pc, #4]	; (8002fcc <HAL_RCC_GetHCLKFreq+0x8>)
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000090 	.word	0x20000090

08002fd0 <HAL_RCC_GetPCLK1Freq>:
{
 8002fd0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fd2:	f7ff fff7 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002fde:	4a03      	ldr	r2, [pc, #12]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002fe0:	5cd3      	ldrb	r3, [r2, r3]
}
 8002fe2:	40d8      	lsrs	r0, r3
 8002fe4:	bd08      	pop	{r3, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	08005848 	.word	0x08005848

08002ff0 <HAL_RCC_GetPCLK2Freq>:
{
 8002ff0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ff2:	f7ff ffe7 	bl	8002fc4 <HAL_RCC_GetHCLKFreq>
 8002ff6:	4b04      	ldr	r3, [pc, #16]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002ffe:	4a03      	ldr	r2, [pc, #12]	; (800300c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003000:	5cd3      	ldrb	r3, [r2, r3]
}
 8003002:	40d8      	lsrs	r0, r3
 8003004:	bd08      	pop	{r3, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	08005848 	.word	0x08005848

08003010 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003012:	4b5d      	ldr	r3, [pc, #372]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f013 0f03 	tst.w	r3, #3
 800301a:	d019      	beq.n	8003050 <RCCEx_PLLSAI1_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800301c:	4b5a      	ldr	r3, [pc, #360]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	6802      	ldr	r2, [r0, #0]
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800302a:	2401      	movs	r4, #1
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800302c:	2c00      	cmp	r4, #0
 800302e:	d048      	beq.n	80030c2 <RCCEx_PLLSAI1_Config+0xb2>
      }
    }
  }

  return status;
}
 8003030:	4620      	mov	r0, r4
 8003032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8003034:	2a00      	cmp	r2, #0
 8003036:	d042      	beq.n	80030be <RCCEx_PLLSAI1_Config+0xae>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003038:	4b53      	ldr	r3, [pc, #332]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003040:	3301      	adds	r3, #1
 8003042:	6842      	ldr	r2, [r0, #4]
       ||
 8003044:	4293      	cmp	r3, r2
 8003046:	d001      	beq.n	800304c <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 8003048:	2401      	movs	r4, #1
 800304a:	e7ef      	b.n	800302c <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 800304c:	2400      	movs	r4, #0
 800304e:	e7ed      	b.n	800302c <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 8003050:	6803      	ldr	r3, [r0, #0]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d018      	beq.n	8003088 <RCCEx_PLLSAI1_Config+0x78>
 8003056:	2b03      	cmp	r3, #3
 8003058:	d01d      	beq.n	8003096 <RCCEx_PLLSAI1_Config+0x86>
 800305a:	2b01      	cmp	r3, #1
 800305c:	d00d      	beq.n	800307a <RCCEx_PLLSAI1_Config+0x6a>
      status = HAL_ERROR;
 800305e:	2401      	movs	r4, #1
    if(status == HAL_OK)
 8003060:	2c00      	cmp	r4, #0
 8003062:	d1e3      	bne.n	800302c <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003064:	4e48      	ldr	r6, [pc, #288]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 8003066:	68f2      	ldr	r2, [r6, #12]
 8003068:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 800306c:	6845      	ldr	r5, [r0, #4]
 800306e:	3d01      	subs	r5, #1
 8003070:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003074:	4313      	orrs	r3, r2
 8003076:	60f3      	str	r3, [r6, #12]
 8003078:	e7d8      	b.n	800302c <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800307a:	4a43      	ldr	r2, [pc, #268]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	f012 0f02 	tst.w	r2, #2
 8003082:	d014      	beq.n	80030ae <RCCEx_PLLSAI1_Config+0x9e>
  HAL_StatusTypeDef status = HAL_OK;
 8003084:	2400      	movs	r4, #0
 8003086:	e7eb      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003088:	4a3f      	ldr	r2, [pc, #252]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003090:	d00f      	beq.n	80030b2 <RCCEx_PLLSAI1_Config+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 8003092:	2400      	movs	r4, #0
 8003094:	e7e4      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003096:	4a3c      	ldr	r2, [pc, #240]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800309e:	d10a      	bne.n	80030b6 <RCCEx_PLLSAI1_Config+0xa6>
 80030a0:	4a39      	ldr	r2, [pc, #228]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80030a8:	d007      	beq.n	80030ba <RCCEx_PLLSAI1_Config+0xaa>
  HAL_StatusTypeDef status = HAL_OK;
 80030aa:	2400      	movs	r4, #0
 80030ac:	e7d8      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80030ae:	2401      	movs	r4, #1
 80030b0:	e7d6      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80030b2:	2401      	movs	r4, #1
 80030b4:	e7d4      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80030b6:	2400      	movs	r4, #0
 80030b8:	e7d2      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80030ba:	2401      	movs	r4, #1
 80030bc:	e7d0      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 80030be:	2401      	movs	r4, #1
 80030c0:	e7b4      	b.n	800302c <RCCEx_PLLSAI1_Config+0x1c>
 80030c2:	460f      	mov	r7, r1
 80030c4:	4605      	mov	r5, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 80030c6:	4a30      	ldr	r2, [pc, #192]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 80030c8:	6813      	ldr	r3, [r2, #0]
 80030ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030ce:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80030d0:	f7ff f94e 	bl	8002370 <HAL_GetTick>
 80030d4:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80030d6:	4b2c      	ldr	r3, [pc, #176]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80030de:	d005      	beq.n	80030ec <RCCEx_PLLSAI1_Config+0xdc>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e0:	f7ff f946 	bl	8002370 <HAL_GetTick>
 80030e4:	1b80      	subs	r0, r0, r6
 80030e6:	2802      	cmp	r0, #2
 80030e8:	d9f5      	bls.n	80030d6 <RCCEx_PLLSAI1_Config+0xc6>
        status = HAL_TIMEOUT;
 80030ea:	2403      	movs	r4, #3
    if(status == HAL_OK)
 80030ec:	2c00      	cmp	r4, #0
 80030ee:	d19f      	bne.n	8003030 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80030f0:	bb47      	cbnz	r7, 8003144 <RCCEx_PLLSAI1_Config+0x134>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030f2:	4925      	ldr	r1, [pc, #148]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 80030f4:	690b      	ldr	r3, [r1, #16]
 80030f6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030fe:	68a8      	ldr	r0, [r5, #8]
 8003100:	68ea      	ldr	r2, [r5, #12]
 8003102:	06d2      	lsls	r2, r2, #27
 8003104:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003108:	4313      	orrs	r3, r2
 800310a:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800310c:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 800310e:	6813      	ldr	r3, [r2, #0]
 8003110:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003114:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003116:	f7ff f92b 	bl	8002370 <HAL_GetTick>
 800311a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003124:	d105      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0x122>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003126:	f7ff f923 	bl	8002370 <HAL_GetTick>
 800312a:	1b80      	subs	r0, r0, r6
 800312c:	2802      	cmp	r0, #2
 800312e:	d9f5      	bls.n	800311c <RCCEx_PLLSAI1_Config+0x10c>
          status = HAL_TIMEOUT;
 8003130:	2403      	movs	r4, #3
      if(status == HAL_OK)
 8003132:	2c00      	cmp	r4, #0
 8003134:	f47f af7c 	bne.w	8003030 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003138:	4a13      	ldr	r2, [pc, #76]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 800313a:	6913      	ldr	r3, [r2, #16]
 800313c:	69a9      	ldr	r1, [r5, #24]
 800313e:	430b      	orrs	r3, r1
 8003140:	6113      	str	r3, [r2, #16]
 8003142:	e775      	b.n	8003030 <RCCEx_PLLSAI1_Config+0x20>
      else if(Divider == DIVIDER_Q_UPDATE)
 8003144:	2f01      	cmp	r7, #1
 8003146:	d00f      	beq.n	8003168 <RCCEx_PLLSAI1_Config+0x158>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003148:	480f      	ldr	r0, [pc, #60]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 800314a:	6902      	ldr	r2, [r0, #16]
 800314c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003150:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003154:	68a9      	ldr	r1, [r5, #8]
 8003156:	696b      	ldr	r3, [r5, #20]
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	3b01      	subs	r3, #1
 800315c:	065b      	lsls	r3, r3, #25
 800315e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003162:	4313      	orrs	r3, r2
 8003164:	6103      	str	r3, [r0, #16]
 8003166:	e7d1      	b.n	800310c <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003168:	4807      	ldr	r0, [pc, #28]	; (8003188 <RCCEx_PLLSAI1_Config+0x178>)
 800316a:	6902      	ldr	r2, [r0, #16]
 800316c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003170:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003174:	68a9      	ldr	r1, [r5, #8]
 8003176:	692b      	ldr	r3, [r5, #16]
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	3b01      	subs	r3, #1
 800317c:	055b      	lsls	r3, r3, #21
 800317e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003182:	4313      	orrs	r3, r2
 8003184:	6103      	str	r3, [r0, #16]
 8003186:	e7c1      	b.n	800310c <RCCEx_PLLSAI1_Config+0xfc>
 8003188:	40021000 	.word	0x40021000

0800318c <HAL_RCCEx_PeriphCLKConfig>:
{
 800318c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003194:	6803      	ldr	r3, [r0, #0]
 8003196:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800319a:	d024      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch(PeriphClkInit->Sai1ClockSelection)
 800319c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800319e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031a2:	d013      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80031a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031a8:	d002      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80031aa:	b1b3      	cbz	r3, 80031da <HAL_RCCEx_PeriphCLKConfig+0x4e>
      ret = HAL_ERROR;
 80031ac:	2701      	movs	r7, #1
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031b0:	2700      	movs	r7, #0
    if(ret == HAL_OK)
 80031b2:	2f00      	cmp	r7, #0
 80031b4:	d16f      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031b6:	4abd      	ldr	r2, [pc, #756]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80031bc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80031c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80031c2:	430b      	orrs	r3, r1
 80031c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c8:	463e      	mov	r6, r7
 80031ca:	e00e      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80031cc:	4ab7      	ldr	r2, [pc, #732]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031ce:	68d3      	ldr	r3, [r2, #12]
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031d6:	2700      	movs	r7, #0
      break;
 80031d8:	e7eb      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031da:	2100      	movs	r1, #0
 80031dc:	3004      	adds	r0, #4
 80031de:	f7ff ff17 	bl	8003010 <RCCEx_PLLSAI1_Config>
 80031e2:	4607      	mov	r7, r0
      break;
 80031e4:	e7e5      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e6:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031e8:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80031f0:	d06d      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031f2:	4bae      	ldr	r3, [pc, #696]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80031fa:	d14e      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fc:	4bab      	ldr	r3, [pc, #684]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80031fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003200:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003204:	659a      	str	r2, [r3, #88]	; 0x58
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003210:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003214:	4aa6      	ldr	r2, [pc, #664]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003216:	6813      	ldr	r3, [r2, #0]
 8003218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800321e:	f7ff f8a7 	bl	8002370 <HAL_GetTick>
 8003222:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8003224:	4ba2      	ldr	r3, [pc, #648]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f413 7f80 	tst.w	r3, #256	; 0x100
 800322c:	d105      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xae>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800322e:	f7ff f89f 	bl	8002370 <HAL_GetTick>
 8003232:	1b40      	subs	r0, r0, r5
 8003234:	2802      	cmp	r0, #2
 8003236:	d9f5      	bls.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x98>
        ret = HAL_TIMEOUT;
 8003238:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 800323a:	2f00      	cmp	r7, #0
 800323c:	d142      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800323e:	4b9b      	ldr	r3, [pc, #620]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003244:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003248:	d015      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xea>
 800324a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800324c:	4293      	cmp	r3, r2
 800324e:	d012      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003250:	4a96      	ldr	r2, [pc, #600]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003252:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800325a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800325e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003262:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003266:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800326a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800326e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003276:	f013 0f01 	tst.w	r3, #1
 800327a:	d111      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 800327c:	2f00      	cmp	r7, #0
 800327e:	f040 8113 	bne.w	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003282:	4a8a      	ldr	r2, [pc, #552]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003284:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800328c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800328e:	430b      	orrs	r3, r1
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003294:	e017      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      status = ret;
 8003296:	463e      	mov	r6, r7
 8003298:	e7a7      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;
 800329a:	f04f 0800 	mov.w	r8, #0
 800329e:	e7b9      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x88>
        tickstart = HAL_GetTick();
 80032a0:	f7ff f866 	bl	8002370 <HAL_GetTick>
 80032a4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80032a6:	4b81      	ldr	r3, [pc, #516]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f013 0f02 	tst.w	r3, #2
 80032b0:	d1e4      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b2:	f7ff f85d 	bl	8002370 <HAL_GetTick>
 80032b6:	1b40      	subs	r0, r0, r5
 80032b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80032bc:	4298      	cmp	r0, r3
 80032be:	d9f2      	bls.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 80032c0:	2703      	movs	r7, #3
 80032c2:	e7db      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      status = ret;
 80032c4:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 80032c6:	f1b8 0f00 	cmp.w	r8, #0
 80032ca:	f040 80f3 	bne.w	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ce:	6823      	ldr	r3, [r4, #0]
 80032d0:	f013 0f01 	tst.w	r3, #1
 80032d4:	d008      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032d6:	4a75      	ldr	r2, [pc, #468]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80032dc:	f023 0303 	bic.w	r3, r3, #3
 80032e0:	6a21      	ldr	r1, [r4, #32]
 80032e2:	430b      	orrs	r3, r1
 80032e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	f013 0f02 	tst.w	r3, #2
 80032ee:	d008      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032f0:	4a6e      	ldr	r2, [pc, #440]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80032f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80032f6:	f023 030c 	bic.w	r3, r3, #12
 80032fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80032fc:	430b      	orrs	r3, r1
 80032fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	f013 0f04 	tst.w	r3, #4
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800330a:	4a68      	ldr	r2, [pc, #416]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800330c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003310:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003314:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003316:	430b      	orrs	r3, r1
 8003318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	f013 0f08 	tst.w	r3, #8
 8003322:	d008      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003324:	4a61      	ldr	r2, [pc, #388]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003326:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800332a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800332e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003330:	430b      	orrs	r3, r1
 8003332:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	f013 0f20 	tst.w	r3, #32
 800333c:	d008      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800333e:	4a5b      	ldr	r2, [pc, #364]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003340:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003344:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003348:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800334a:	430b      	orrs	r3, r1
 800334c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003356:	d008      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003358:	4a54      	ldr	r2, [pc, #336]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800335a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800335e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003362:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003364:	430b      	orrs	r3, r1
 8003366:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003370:	d008      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003372:	4a4e      	ldr	r2, [pc, #312]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003374:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003378:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800337c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800337e:	430b      	orrs	r3, r1
 8003380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	f013 0f40 	tst.w	r3, #64	; 0x40
 800338a:	d008      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800338c:	4a47      	ldr	r2, [pc, #284]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800338e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003392:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003398:	430b      	orrs	r3, r1
 800339a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033a4:	d008      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033a6:	4a41      	ldr	r2, [pc, #260]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033a8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80033ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80033b2:	430b      	orrs	r3, r1
 80033b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033be:	d008      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c0:	4a3a      	ldr	r2, [pc, #232]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80033c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80033ca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80033cc:	430b      	orrs	r3, r1
 80033ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80033d8:	d008      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x260>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033da:	4a34      	ldr	r2, [pc, #208]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033dc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80033e0:	f023 0303 	bic.w	r3, r3, #3
 80033e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80033e6:	430b      	orrs	r3, r1
 80033e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80033f2:	d00f      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033f4:	4a2d      	ldr	r2, [pc, #180]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80033f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80033fa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80033fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003400:	430b      	orrs	r3, r1
 8003402:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003406:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800340c:	d058      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800340e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003412:	d05a      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800341a:	d00f      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800341c:	4a23      	ldr	r2, [pc, #140]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800341e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003422:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003426:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003428:	430b      	orrs	r3, r1
 800342a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800342e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003434:	d051      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x34e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003436:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800343a:	d053      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x358>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003442:	d00f      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003444:	4a19      	ldr	r2, [pc, #100]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003446:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800344a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800344e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003450:	430b      	orrs	r3, r1
 8003452:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800345c:	d04a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800345e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003462:	d04c      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x372>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800346a:	d00c      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800346c:	4a0f      	ldr	r2, [pc, #60]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800346e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003472:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003476:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003478:	430b      	orrs	r3, r1
 800347a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800347e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003484:	d043      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x382>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800348c:	d008      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800348e:	4a07      	ldr	r2, [pc, #28]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003490:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003498:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800349a:	430b      	orrs	r3, r1
 800349c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80034a0:	4630      	mov	r0, r6
 80034a2:	b002      	add	sp, #8
 80034a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80034a8:	463e      	mov	r6, r7
 80034aa:	e70c      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b4:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80034b6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80034b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
 80034be:	e706      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c0:	68d3      	ldr	r3, [r2, #12]
 80034c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c6:	60d3      	str	r3, [r2, #12]
 80034c8:	e7a4      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ca:	2101      	movs	r1, #1
 80034cc:	1d20      	adds	r0, r4, #4
 80034ce:	f7ff fd9f 	bl	8003010 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80034d2:	2800      	cmp	r0, #0
 80034d4:	d09e      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x288>
          status = ret;
 80034d6:	4606      	mov	r6, r0
 80034d8:	e79c      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034da:	68d3      	ldr	r3, [r2, #12]
 80034dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e0:	60d3      	str	r3, [r2, #12]
 80034e2:	e7ab      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e4:	2101      	movs	r1, #1
 80034e6:	1d20      	adds	r0, r4, #4
 80034e8:	f7ff fd92 	bl	8003010 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d0a5      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        status = ret;
 80034f0:	4606      	mov	r6, r0
 80034f2:	e7a3      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f4:	68d3      	ldr	r3, [r2, #12]
 80034f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fa:	60d3      	str	r3, [r2, #12]
 80034fc:	e7b2      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034fe:	2101      	movs	r1, #1
 8003500:	1d20      	adds	r0, r4, #4
 8003502:	f7ff fd85 	bl	8003010 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003506:	2800      	cmp	r0, #0
 8003508:	d0ac      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
        status = ret;
 800350a:	4606      	mov	r6, r0
 800350c:	e7aa      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800350e:	2102      	movs	r1, #2
 8003510:	1d20      	adds	r0, r4, #4
 8003512:	f7ff fd7d 	bl	8003010 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003516:	2800      	cmp	r0, #0
 8003518:	d0b5      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        status = ret;
 800351a:	4606      	mov	r6, r0
 800351c:	e7b3      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000

08003524 <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc: RTC handle  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003524:	4770      	bx	lr

08003526 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003526:	b538      	push	{r3, r4, r5, lr}
 8003528:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800352a:	6802      	ldr	r2, [r0, #0]
 800352c:	68d3      	ldr	r3, [r2, #12]
 800352e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003532:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003534:	f7fe ff1c 	bl	8002370 <HAL_GetTick>
 8003538:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f013 0f20 	tst.w	r3, #32
 8003542:	d107      	bne.n	8003554 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003544:	f7fe ff14 	bl	8002370 <HAL_GetTick>
 8003548:	1b40      	subs	r0, r0, r5
 800354a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800354e:	d9f4      	bls.n	800353a <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8003550:	2003      	movs	r0, #3
    }
  }

  return HAL_OK;
}
 8003552:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003554:	2000      	movs	r0, #0
 8003556:	bd38      	pop	{r3, r4, r5, pc}

08003558 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003558:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800355a:	6803      	ldr	r3, [r0, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003562:	d001      	beq.n	8003568 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003564:	2000      	movs	r0, #0
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800356a:	f04f 32ff 	mov.w	r2, #4294967295
 800356e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003570:	f7fe fefe 	bl	8002370 <HAL_GetTick>
 8003574:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800357e:	d107      	bne.n	8003590 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003580:	f7fe fef6 	bl	8002370 <HAL_GetTick>
 8003584:	1b40      	subs	r0, r0, r5
 8003586:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800358a:	d9f4      	bls.n	8003576 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 800358c:	2003      	movs	r0, #3
}
 800358e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003590:	2000      	movs	r0, #0
 8003592:	bd38      	pop	{r3, r4, r5, pc}

08003594 <HAL_RTC_Init>:
{
 8003594:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8003596:	2800      	cmp	r0, #0
 8003598:	d064      	beq.n	8003664 <HAL_RTC_Init+0xd0>
 800359a:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800359c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d045      	beq.n	8003630 <HAL_RTC_Init+0x9c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035a4:	2302      	movs	r3, #2
 80035a6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	22ca      	movs	r2, #202	; 0xca
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	2253      	movs	r2, #83	; 0x53
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7ff ffce 	bl	8003558 <RTC_EnterInitMode>
 80035bc:	4605      	mov	r5, r0
 80035be:	2800      	cmp	r0, #0
 80035c0:	d13b      	bne.n	800363a <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	6893      	ldr	r3, [r2, #8]
 80035c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80035ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035ce:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80035d0:	6821      	ldr	r1, [r4, #0]
 80035d2:	688a      	ldr	r2, [r1, #8]
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	6920      	ldr	r0, [r4, #16]
 80035d8:	4303      	orrs	r3, r0
 80035da:	69a0      	ldr	r0, [r4, #24]
 80035dc:	4303      	orrs	r3, r0
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	68e2      	ldr	r2, [r4, #12]
 80035e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80035e8:	6822      	ldr	r2, [r4, #0]
 80035ea:	6913      	ldr	r3, [r2, #16]
 80035ec:	68a1      	ldr	r1, [r4, #8]
 80035ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80035f2:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80035f4:	6822      	ldr	r2, [r4, #0]
 80035f6:	68d3      	ldr	r3, [r2, #12]
 80035f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035fc:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f013 0f20 	tst.w	r3, #32
 8003606:	d020      	beq.n	800364a <HAL_RTC_Init+0xb6>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003608:	6822      	ldr	r2, [r4, #0]
 800360a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800360c:	f023 0303 	bic.w	r3, r3, #3
 8003610:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003612:	6821      	ldr	r1, [r4, #0]
 8003614:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8003616:	69e2      	ldr	r2, [r4, #28]
 8003618:	6960      	ldr	r0, [r4, #20]
 800361a:	4302      	orrs	r2, r0
 800361c:	4313      	orrs	r3, r2
 800361e:	64cb      	str	r3, [r1, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	22ff      	movs	r2, #255	; 0xff
 8003624:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8003626:	2301      	movs	r3, #1
 8003628:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800362c:	4628      	mov	r0, r5
 800362e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8003630:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8003634:	f7ff ff76 	bl	8003524 <HAL_RTC_MspInit>
 8003638:	e7b4      	b.n	80035a4 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003640:	2304      	movs	r3, #4
 8003642:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 8003646:	2501      	movs	r5, #1
 8003648:	e7f0      	b.n	800362c <HAL_RTC_Init+0x98>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800364a:	4620      	mov	r0, r4
 800364c:	f7ff ff6b 	bl	8003526 <HAL_RTC_WaitForSynchro>
 8003650:	2800      	cmp	r0, #0
 8003652:	d0d9      	beq.n	8003608 <HAL_RTC_Init+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	22ff      	movs	r2, #255	; 0xff
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800365a:	2304      	movs	r3, #4
 800365c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return HAL_ERROR;
 8003660:	2501      	movs	r5, #1
 8003662:	e7e3      	b.n	800362c <HAL_RTC_Init+0x98>
     return HAL_ERROR;
 8003664:	2501      	movs	r5, #1
 8003666:	e7e1      	b.n	800362c <HAL_RTC_Init+0x98>

08003668 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8003668:	2300      	movs	r3, #0

  while(Value >= 10)
 800366a:	e002      	b.n	8003672 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800366c:	3301      	adds	r3, #1
    Value -= 10;
 800366e:	380a      	subs	r0, #10
 8003670:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8003672:	2809      	cmp	r0, #9
 8003674:	d8fa      	bhi.n	800366c <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	b2db      	uxtb	r3, r3
}
 800367a:	4318      	orrs	r0, r3
 800367c:	4770      	bx	lr

0800367e <HAL_RTC_SetTime>:
{
 800367e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8003680:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d07f      	beq.n	8003788 <HAL_RTC_SetTime+0x10a>
 8003688:	460e      	mov	r6, r1
 800368a:	4604      	mov	r4, r0
 800368c:	2301      	movs	r3, #1
 800368e:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003692:	2302      	movs	r3, #2
 8003694:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 8003698:	2a00      	cmp	r2, #0
 800369a:	d148      	bne.n	800372e <HAL_RTC_SetTime+0xb0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800369c:	6803      	ldr	r3, [r0, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036a4:	d101      	bne.n	80036aa <HAL_RTC_SetTime+0x2c>
      sTime->TimeFormat = 0x00;
 80036a6:	2300      	movs	r3, #0
 80036a8:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80036aa:	7830      	ldrb	r0, [r6, #0]
 80036ac:	f7ff ffdc 	bl	8003668 <RTC_ByteToBcd2>
 80036b0:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80036b2:	7870      	ldrb	r0, [r6, #1]
 80036b4:	f7ff ffd8 	bl	8003668 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80036b8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80036bc:	78b0      	ldrb	r0, [r6, #2]
 80036be:	f7ff ffd3 	bl	8003668 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80036c2:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16));
 80036c4:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80036c6:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	22ca      	movs	r2, #202	; 0xca
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	2253      	movs	r2, #83	; 0x53
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80036d6:	4620      	mov	r0, r4
 80036d8:	f7ff ff3e 	bl	8003558 <RTC_EnterInitMode>
 80036dc:	4607      	mov	r7, r0
 80036de:	2800      	cmp	r0, #0
 80036e0:	d137      	bne.n	8003752 <HAL_RTC_SetTime+0xd4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 80036e8:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 80036ec:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	6893      	ldr	r3, [r2, #8]
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036f8:	6821      	ldr	r1, [r4, #0]
 80036fa:	688b      	ldr	r3, [r1, #8]
 80036fc:	68f2      	ldr	r2, [r6, #12]
 80036fe:	6930      	ldr	r0, [r6, #16]
 8003700:	4302      	orrs	r2, r0
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003706:	6822      	ldr	r2, [r4, #0]
 8003708:	68d3      	ldr	r3, [r2, #12]
 800370a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f013 0f20 	tst.w	r3, #32
 8003718:	d026      	beq.n	8003768 <HAL_RTC_SetTime+0xea>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	22ff      	movs	r2, #255	; 0xff
 800371e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8003720:	2301      	movs	r3, #1
 8003722:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 8003726:	2300      	movs	r3, #0
 8003728:	f884 3020 	strb.w	r3, [r4, #32]
   return HAL_OK;
 800372c:	e02d      	b.n	800378a <HAL_RTC_SetTime+0x10c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800372e:	6803      	ldr	r3, [r0, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003736:	d101      	bne.n	800373c <HAL_RTC_SetTime+0xbe>
      sTime->TimeFormat = 0x00;
 8003738:	2300      	movs	r3, #0
 800373a:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800373c:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800373e:	7870      	ldrb	r0, [r6, #1]
 8003740:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8003742:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8003746:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8003748:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16));
 800374a:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800374c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8003750:	e7bb      	b.n	80036ca <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	22ff      	movs	r2, #255	; 0xff
 8003756:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003758:	2304      	movs	r3, #4
 800375a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800375e:	2300      	movs	r3, #0
 8003760:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8003764:	2701      	movs	r7, #1
 8003766:	e010      	b.n	800378a <HAL_RTC_SetTime+0x10c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff fedc 	bl	8003526 <HAL_RTC_WaitForSynchro>
 800376e:	2800      	cmp	r0, #0
 8003770:	d0d3      	beq.n	800371a <HAL_RTC_SetTime+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	22ff      	movs	r2, #255	; 0xff
 8003776:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003778:	2304      	movs	r3, #4
 800377a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800377e:	2300      	movs	r3, #0
 8003780:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8003784:	2701      	movs	r7, #1
 8003786:	e000      	b.n	800378a <HAL_RTC_SetTime+0x10c>
  __HAL_LOCK(hrtc);
 8003788:	2702      	movs	r7, #2
}
 800378a:	4638      	mov	r0, r7
 800378c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800378e <HAL_RTC_SetDate>:
{
 800378e:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8003790:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d06d      	beq.n	8003874 <HAL_RTC_SetDate+0xe6>
 8003798:	2301      	movs	r3, #1
 800379a:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800379e:	2302      	movs	r3, #2
 80037a0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80037a4:	b93a      	cbnz	r2, 80037b6 <HAL_RTC_SetDate+0x28>
 80037a6:	784b      	ldrb	r3, [r1, #1]
 80037a8:	f013 0f10 	tst.w	r3, #16
 80037ac:	d003      	beq.n	80037b6 <HAL_RTC_SetDate+0x28>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80037ae:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80037b2:	330a      	adds	r3, #10
 80037b4:	704b      	strb	r3, [r1, #1]
 80037b6:	460e      	mov	r6, r1
 80037b8:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	d134      	bne.n	8003828 <HAL_RTC_SetDate+0x9a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80037be:	78c8      	ldrb	r0, [r1, #3]
 80037c0:	f7ff ff52 	bl	8003668 <RTC_ByteToBcd2>
 80037c4:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80037c6:	7870      	ldrb	r0, [r6, #1]
 80037c8:	f7ff ff4e 	bl	8003668 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80037cc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80037d0:	78b0      	ldrb	r0, [r6, #2]
 80037d2:	f7ff ff49 	bl	8003668 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80037d6:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13));
 80037d8:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80037da:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037de:	6823      	ldr	r3, [r4, #0]
 80037e0:	22ca      	movs	r2, #202	; 0xca
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	2253      	movs	r2, #83	; 0x53
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80037ea:	4620      	mov	r0, r4
 80037ec:	f7ff feb4 	bl	8003558 <RTC_EnterInitMode>
 80037f0:	4606      	mov	r6, r0
 80037f2:	bb20      	cbnz	r0, 800383e <HAL_RTC_SetDate+0xb0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80037fa:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80037fe:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003800:	6822      	ldr	r2, [r4, #0]
 8003802:	68d3      	ldr	r3, [r2, #12]
 8003804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003808:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f013 0f20 	tst.w	r3, #32
 8003812:	d01f      	beq.n	8003854 <HAL_RTC_SetDate+0xc6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	22ff      	movs	r2, #255	; 0xff
 8003818:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800381a:	2301      	movs	r3, #1
 800381c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8003820:	2300      	movs	r3, #0
 8003822:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 8003826:	e026      	b.n	8003876 <HAL_RTC_SetDate+0xe8>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8003828:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 800382a:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800382c:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 800382e:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003830:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8003834:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13));
 8003836:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003838:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 800383c:	e7cf      	b.n	80037de <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	22ff      	movs	r2, #255	; 0xff
 8003842:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003844:	2304      	movs	r3, #4
 8003846:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800384a:	2300      	movs	r3, #0
 800384c:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8003850:	2601      	movs	r6, #1
 8003852:	e010      	b.n	8003876 <HAL_RTC_SetDate+0xe8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003854:	4620      	mov	r0, r4
 8003856:	f7ff fe66 	bl	8003526 <HAL_RTC_WaitForSynchro>
 800385a:	2800      	cmp	r0, #0
 800385c:	d0da      	beq.n	8003814 <HAL_RTC_SetDate+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	22ff      	movs	r2, #255	; 0xff
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003864:	2304      	movs	r3, #4
 8003866:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800386a:	2300      	movs	r3, #0
 800386c:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8003870:	2601      	movs	r6, #1
 8003872:	e000      	b.n	8003876 <HAL_RTC_SetDate+0xe8>
 __HAL_LOCK(hrtc);
 8003874:	2602      	movs	r6, #2
}
 8003876:	4630      	mov	r0, r6
 8003878:	bd70      	pop	{r4, r5, r6, pc}

0800387a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800387a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387c:	4605      	mov	r5, r0
 800387e:	460f      	mov	r7, r1
 8003880:	4616      	mov	r6, r2
 8003882:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003884:	e039      	b.n	80038fa <SPI_WaitFlagStateUntilTimeout+0x80>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003886:	b12c      	cbz	r4, 8003894 <SPI_WaitFlagStateUntilTimeout+0x1a>
 8003888:	f7fe fd72 	bl	8002370 <HAL_GetTick>
 800388c:	9b06      	ldr	r3, [sp, #24]
 800388e:	1ac0      	subs	r0, r0, r3
 8003890:	4284      	cmp	r4, r0
 8003892:	d832      	bhi.n	80038fa <SPI_WaitFlagStateUntilTimeout+0x80>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003894:	682a      	ldr	r2, [r5, #0]
 8003896:	6853      	ldr	r3, [r2, #4]
 8003898:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800389c:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800389e:	686b      	ldr	r3, [r5, #4]
 80038a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a4:	d00b      	beq.n	80038be <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80038a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ac:	d014      	beq.n	80038d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038b4:	2300      	movs	r3, #0
 80038b6:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038ba:	2003      	movs	r0, #3
 80038bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038be:	68ab      	ldr	r3, [r5, #8]
 80038c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c4:	d002      	beq.n	80038cc <SPI_WaitFlagStateUntilTimeout+0x52>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ca:	d1ec      	bne.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 80038cc:	682a      	ldr	r2, [r5, #0]
 80038ce:	6813      	ldr	r3, [r2, #0]
 80038d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e7e6      	b.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 80038d8:	682a      	ldr	r2, [r5, #0]
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	682a      	ldr	r2, [r5, #0]
 80038e4:	6813      	ldr	r3, [r2, #0]
 80038e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	e7df      	b.n	80038ae <SPI_WaitFlagStateUntilTimeout+0x34>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ee:	2301      	movs	r3, #1
 80038f0:	42b3      	cmp	r3, r6
 80038f2:	d009      	beq.n	8003908 <SPI_WaitFlagStateUntilTimeout+0x8e>
    if (Timeout != HAL_MAX_DELAY)
 80038f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80038f8:	d1c5      	bne.n	8003886 <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038fa:	682b      	ldr	r3, [r5, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	ea37 0303 	bics.w	r3, r7, r3
 8003902:	d0f4      	beq.n	80038ee <SPI_WaitFlagStateUntilTimeout+0x74>
 8003904:	2300      	movs	r3, #0
 8003906:	e7f3      	b.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0x76>
      }
    }
  }

  return HAL_OK;
 8003908:	2000      	movs	r0, #0
}
 800390a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800390c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800390e:	b083      	sub	sp, #12
 8003910:	4607      	mov	r7, r0
 8003912:	460c      	mov	r4, r1
 8003914:	4615      	mov	r5, r2
 8003916:	461e      	mov	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8003918:	e002      	b.n	8003920 <SPI_WaitFifoStateUntilTimeout+0x14>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 800391a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800391e:	d110      	bne.n	8003942 <SPI_WaitFifoStateUntilTimeout+0x36>
  while ((hspi->Instance->SR & Fifo) != State)
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	6893      	ldr	r3, [r2, #8]
 8003924:	4023      	ands	r3, r4
 8003926:	42ab      	cmp	r3, r5
 8003928:	d03f      	beq.n	80039aa <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800392a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800392e:	d1f4      	bne.n	800391a <SPI_WaitFifoStateUntilTimeout+0xe>
 8003930:	2d00      	cmp	r5, #0
 8003932:	d1f2      	bne.n	800391a <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8003934:	7b13      	ldrb	r3, [r2, #12]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 800393c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003940:	e7eb      	b.n	800391a <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003942:	b12e      	cbz	r6, 8003950 <SPI_WaitFifoStateUntilTimeout+0x44>
 8003944:	f7fe fd14 	bl	8002370 <HAL_GetTick>
 8003948:	9b08      	ldr	r3, [sp, #32]
 800394a:	1ac0      	subs	r0, r0, r3
 800394c:	4286      	cmp	r6, r0
 800394e:	d8e7      	bhi.n	8003920 <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	6853      	ldr	r3, [r2, #4]
 8003954:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003958:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003960:	d00b      	beq.n	800397a <SPI_WaitFifoStateUntilTimeout+0x6e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003968:	d014      	beq.n	8003994 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 800396a:	2301      	movs	r3, #1
 800396c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003970:	2300      	movs	r3, #0
 8003972:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003976:	2003      	movs	r0, #3
 8003978:	e018      	b.n	80039ac <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003980:	d002      	beq.n	8003988 <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003986:	d1ec      	bne.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x56>
          __HAL_SPI_DISABLE(hspi);
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	6813      	ldr	r3, [r2, #0]
 800398c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	e7e6      	b.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x56>
          SPI_RESET_CRC(hspi);
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	6813      	ldr	r3, [r2, #0]
 8003998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	6813      	ldr	r3, [r2, #0]
 80039a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	e7df      	b.n	800396a <SPI_WaitFifoStateUntilTimeout+0x5e>
      }
    }
  }

  return HAL_OK;
 80039aa:	2000      	movs	r0, #0
}
 80039ac:	b003      	add	sp, #12
 80039ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039b0:	b570      	push	{r4, r5, r6, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	4604      	mov	r4, r0
 80039b6:	460d      	mov	r5, r1
 80039b8:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ba:	9200      	str	r2, [sp, #0]
 80039bc:	460b      	mov	r3, r1
 80039be:	2200      	movs	r2, #0
 80039c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80039c4:	f7ff ffa2 	bl	800390c <SPI_WaitFifoStateUntilTimeout>
 80039c8:	b138      	cbz	r0, 80039da <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80039cc:	f043 0320 	orr.w	r3, r3, #32
 80039d0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	b002      	add	sp, #8
 80039d8:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039da:	9600      	str	r6, [sp, #0]
 80039dc:	462b      	mov	r3, r5
 80039de:	2200      	movs	r2, #0
 80039e0:	2180      	movs	r1, #128	; 0x80
 80039e2:	4620      	mov	r0, r4
 80039e4:	f7ff ff49 	bl	800387a <SPI_WaitFlagStateUntilTimeout>
 80039e8:	b128      	cbz	r0, 80039f6 <SPI_EndRxTxTransaction+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80039ec:	f043 0320 	orr.w	r3, r3, #32
 80039f0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e7ee      	b.n	80039d4 <SPI_EndRxTxTransaction+0x24>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039f6:	9600      	str	r6, [sp, #0]
 80039f8:	462b      	mov	r3, r5
 80039fa:	2200      	movs	r2, #0
 80039fc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ff83 	bl	800390c <SPI_WaitFifoStateUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d0e3      	beq.n	80039d4 <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a0c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a0e:	f043 0320 	orr.w	r3, r3, #32
 8003a12:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e7dd      	b.n	80039d4 <SPI_EndRxTxTransaction+0x24>

08003a18 <SPI_EndRxTransaction>:
{
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	460d      	mov	r5, r1
 8003a20:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a22:	6843      	ldr	r3, [r0, #4]
 8003a24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a28:	d010      	beq.n	8003a4c <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2a:	9600      	str	r6, [sp, #0]
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2180      	movs	r1, #128	; 0x80
 8003a32:	4620      	mov	r0, r4
 8003a34:	f7ff ff21 	bl	800387a <SPI_WaitFlagStateUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	b1a0      	cbz	r0, 8003a66 <SPI_EndRxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a3e:	f043 0320 	orr.w	r3, r3, #32
 8003a42:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a4c:	6883      	ldr	r3, [r0, #8]
 8003a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a52:	d002      	beq.n	8003a5a <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a58:	d1e7      	bne.n	8003a2a <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	e7e1      	b.n	8003a2a <SPI_EndRxTransaction+0x12>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a66:	6862      	ldr	r2, [r4, #4]
 8003a68:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003a6c:	d1eb      	bne.n	8003a46 <SPI_EndRxTransaction+0x2e>
 8003a6e:	68a2      	ldr	r2, [r4, #8]
 8003a70:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003a74:	d002      	beq.n	8003a7c <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a76:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003a7a:	d1e4      	bne.n	8003a46 <SPI_EndRxTransaction+0x2e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a7c:	9600      	str	r6, [sp, #0]
 8003a7e:	462b      	mov	r3, r5
 8003a80:	2200      	movs	r2, #0
 8003a82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff ff40 	bl	800390c <SPI_WaitFifoStateUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d0d9      	beq.n	8003a46 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a92:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a94:	f043 0320 	orr.w	r3, r3, #32
 8003a98:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e7d3      	b.n	8003a46 <SPI_EndRxTransaction+0x2e>

08003a9e <HAL_SPI_Init>:
  if (hspi == NULL)
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d053      	beq.n	8003b4a <HAL_SPI_Init+0xac>
{
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aaa:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d040      	beq.n	8003b34 <HAL_SPI_Init+0x96>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003ab8:	6822      	ldr	r2, [r4, #0]
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ac2:	68e3      	ldr	r3, [r4, #12]
 8003ac4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ac8:	d939      	bls.n	8003b3e <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aca:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003acc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ad0:	d004      	beq.n	8003adc <HAL_SPI_Init+0x3e>
 8003ad2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad6:	d001      	beq.n	8003adc <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad8:	2200      	movs	r2, #0
 8003ada:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003adc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ade:	b922      	cbnz	r2, 8003aea <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ae4:	d92e      	bls.n	8003b44 <HAL_SPI_Init+0xa6>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	68a0      	ldr	r0, [r4, #8]
 8003af0:	4303      	orrs	r3, r0
 8003af2:	6920      	ldr	r0, [r4, #16]
 8003af4:	4303      	orrs	r3, r0
 8003af6:	6960      	ldr	r0, [r4, #20]
 8003af8:	4303      	orrs	r3, r0
 8003afa:	69a0      	ldr	r0, [r4, #24]
 8003afc:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8003b00:	4303      	orrs	r3, r0
 8003b02:	69e0      	ldr	r0, [r4, #28]
 8003b04:	4303      	orrs	r3, r0
 8003b06:	6a20      	ldr	r0, [r4, #32]
 8003b08:	4303      	orrs	r3, r0
 8003b0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003b0c:	4303      	orrs	r3, r0
 8003b0e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003b10:	6822      	ldr	r2, [r4, #0]
 8003b12:	8b63      	ldrh	r3, [r4, #26]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003b1a:	4303      	orrs	r3, r0
 8003b1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003b1e:	4303      	orrs	r3, r0
 8003b20:	68e0      	ldr	r0, [r4, #12]
 8003b22:	4303      	orrs	r3, r0
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b28:	2000      	movs	r0, #0
 8003b2a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8003b32:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003b34:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003b38:	f7fe f8f8 	bl	8001d2c <HAL_SPI_MspInit>
 8003b3c:	e7b9      	b.n	8003ab2 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b42:	e7c3      	b.n	8003acc <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003b44:	2301      	movs	r3, #1
 8003b46:	6323      	str	r3, [r4, #48]	; 0x30
 8003b48:	e7cf      	b.n	8003aea <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	4770      	bx	lr

08003b4e <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8003b4e:	b190      	cbz	r0, 8003b76 <HAL_SPI_DeInit+0x28>
{
 8003b50:	b510      	push	{r4, lr}
 8003b52:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 8003b54:	2302      	movs	r3, #2
 8003b56:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003b5a:	6802      	ldr	r2, [r0, #0]
 8003b5c:	6813      	ldr	r3, [r2, #0]
 8003b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b62:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003b64:	f7fe f90a 	bl	8001d7c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b68:	2000      	movs	r0, #0
 8003b6a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003b6c:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003b70:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  return HAL_OK;
 8003b74:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003b76:	2001      	movs	r0, #1
 8003b78:	4770      	bx	lr
	...

08003b7c <HAL_SPI_TransmitReceive_IT>:
{
 8003b7c:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 8003b7e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8003b82:	2c01      	cmp	r4, #1
 8003b84:	d06c      	beq.n	8003c60 <HAL_SPI_TransmitReceive_IT+0xe4>
 8003b86:	2401      	movs	r4, #1
 8003b88:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp  = hspi->State;
 8003b8c:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8003b90:	b2e4      	uxtb	r4, r4
  tmp1 = hspi->Init.Mode;
 8003b92:	6845      	ldr	r5, [r0, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8003b94:	2c01      	cmp	r4, #1
 8003b96:	d010      	beq.n	8003bba <HAL_SPI_TransmitReceive_IT+0x3e>
 8003b98:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8003b9c:	d006      	beq.n	8003bac <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	bc30      	pop	{r4, r5}
 8003baa:	4770      	bx	lr
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8003bac:	6885      	ldr	r5, [r0, #8]
 8003bae:	2d00      	cmp	r5, #0
 8003bb0:	d14c      	bne.n	8003c4c <HAL_SPI_TransmitReceive_IT+0xd0>
 8003bb2:	2c04      	cmp	r4, #4
 8003bb4:	d001      	beq.n	8003bba <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e7f2      	b.n	8003ba0 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bba:	2900      	cmp	r1, #0
 8003bbc:	d048      	beq.n	8003c50 <HAL_SPI_TransmitReceive_IT+0xd4>
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	d048      	beq.n	8003c54 <HAL_SPI_TransmitReceive_IT+0xd8>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d048      	beq.n	8003c58 <HAL_SPI_TransmitReceive_IT+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bc6:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8003bca:	b2e4      	uxtb	r4, r4
 8003bcc:	2c04      	cmp	r4, #4
 8003bce:	d002      	beq.n	8003bd6 <HAL_SPI_TransmitReceive_IT+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bd0:	2405      	movs	r4, #5
 8003bd2:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd6:	2400      	movs	r4, #0
 8003bd8:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003bda:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bdc:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003bde:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003be0:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003be2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003be6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bea:	68c3      	ldr	r3, [r0, #12]
 8003bec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bf0:	d921      	bls.n	8003c36 <HAL_SPI_TransmitReceive_IT+0xba>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_SPI_TransmitReceive_IT+0xe8>)
 8003bf4:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003bf6:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <HAL_SPI_TransmitReceive_IT+0xec>)
 8003bf8:	6503      	str	r3, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 8003bfa:	68c3      	ldr	r3, [r0, #12]
 8003bfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c00:	d804      	bhi.n	8003c0c <HAL_SPI_TransmitReceive_IT+0x90>
 8003c02:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d919      	bls.n	8003c40 <HAL_SPI_TransmitReceive_IT+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c0c:	6802      	ldr	r2, [r0, #0]
 8003c0e:	6853      	ldr	r3, [r2, #4]
 8003c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c14:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c16:	6802      	ldr	r2, [r0, #0]
 8003c18:	6853      	ldr	r3, [r2, #4]
 8003c1a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003c1e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c20:	6803      	ldr	r3, [r0, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c28:	d118      	bne.n	8003c5c <HAL_SPI_TransmitReceive_IT+0xe0>
    __HAL_SPI_ENABLE(hspi);
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c30:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e7b4      	b.n	8003ba0 <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <HAL_SPI_TransmitReceive_IT+0xf0>)
 8003c38:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <HAL_SPI_TransmitReceive_IT+0xf4>)
 8003c3c:	6503      	str	r3, [r0, #80]	; 0x50
 8003c3e:	e7dc      	b.n	8003bfa <HAL_SPI_TransmitReceive_IT+0x7e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c40:	6802      	ldr	r2, [r0, #0]
 8003c42:	6853      	ldr	r3, [r2, #4]
 8003c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c48:	6053      	str	r3, [r2, #4]
 8003c4a:	e7e4      	b.n	8003c16 <HAL_SPI_TransmitReceive_IT+0x9a>
    errorcode = HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e7a7      	b.n	8003ba0 <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e7a5      	b.n	8003ba0 <HAL_SPI_TransmitReceive_IT+0x24>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e7a3      	b.n	8003ba0 <HAL_SPI_TransmitReceive_IT+0x24>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e7a1      	b.n	8003ba0 <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e79f      	b.n	8003ba0 <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 8003c60:	2302      	movs	r3, #2
 8003c62:	e7a0      	b.n	8003ba6 <HAL_SPI_TransmitReceive_IT+0x2a>
 8003c64:	08003f5b 	.word	0x08003f5b
 8003c68:	08003f21 	.word	0x08003f21
 8003c6c:	08003ea7 	.word	0x08003ea7
 8003c70:	08003e4d 	.word	0x08003e4d

08003c74 <HAL_SPI_Receive_IT>:
{
 8003c74:	b510      	push	{r4, lr}
 8003c76:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003c78:	6880      	ldr	r0, [r0, #8]
 8003c7a:	b918      	cbnz	r0, 8003c84 <HAL_SPI_Receive_IT+0x10>
 8003c7c:	6863      	ldr	r3, [r4, #4]
 8003c7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c82:	d010      	beq.n	8003ca6 <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 8003c84:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8003c88:	2801      	cmp	r0, #1
 8003c8a:	d05a      	beq.n	8003d42 <HAL_SPI_Receive_IT+0xce>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8003c92:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003c96:	b2c0      	uxtb	r0, r0
 8003c98:	4298      	cmp	r0, r3
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 8003c9c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8003ca4:	bd10      	pop	{r4, pc}
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003caa:	2204      	movs	r2, #4
 8003cac:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003cb0:	460a      	mov	r2, r1
 8003cb2:	f7ff ff63 	bl	8003b7c <HAL_SPI_TransmitReceive_IT>
 8003cb6:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	d03c      	beq.n	8003d36 <HAL_SPI_Receive_IT+0xc2>
 8003cbc:	2a00      	cmp	r2, #0
 8003cbe:	d03c      	beq.n	8003d3a <HAL_SPI_Receive_IT+0xc6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cca:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ccc:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003cd0:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cd4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003cd6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003cd8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cda:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cdc:	68e3      	ldr	r3, [r4, #12]
 8003cde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ce2:	d91a      	bls.n	8003d1a <HAL_SPI_Receive_IT+0xa6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6853      	ldr	r3, [r2, #4]
 8003ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cec:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003cee:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <HAL_SPI_Receive_IT+0xd4>)
 8003cf0:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf2:	68a3      	ldr	r3, [r4, #8]
 8003cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf8:	d017      	beq.n	8003d2a <HAL_SPI_Receive_IT+0xb6>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	6853      	ldr	r3, [r2, #4]
 8003cfe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d02:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d0c:	d117      	bne.n	8003d3e <HAL_SPI_Receive_IT+0xca>
    __HAL_SPI_ENABLE(hspi);
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d14:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d16:	2000      	movs	r0, #0
 8003d18:	e7c1      	b.n	8003c9e <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	6853      	ldr	r3, [r2, #4]
 8003d1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d22:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_SPI_Receive_IT+0xd8>)
 8003d26:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003d28:	e7e3      	b.n	8003cf2 <HAL_SPI_Receive_IT+0x7e>
    SPI_1LINE_RX(hspi);
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	6813      	ldr	r3, [r2, #0]
 8003d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e7e1      	b.n	8003cfa <HAL_SPI_Receive_IT+0x86>
    errorcode = HAL_ERROR;
 8003d36:	2001      	movs	r0, #1
 8003d38:	e7b1      	b.n	8003c9e <HAL_SPI_Receive_IT+0x2a>
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	e7af      	b.n	8003c9e <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d3e:	2000      	movs	r0, #0
 8003d40:	e7ad      	b.n	8003c9e <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 8003d42:	2002      	movs	r0, #2
}
 8003d44:	bd10      	pop	{r4, pc}
 8003d46:	bf00      	nop
 8003d48:	08003dc1 	.word	0x08003dc1
 8003d4c:	08003d95 	.word	0x08003d95

08003d50 <HAL_SPI_RxCpltCallback>:
{
 8003d50:	4770      	bx	lr

08003d52 <HAL_SPI_TxRxCpltCallback>:
{
 8003d52:	4770      	bx	lr

08003d54 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003d54:	b510      	push	{r4, lr}
 8003d56:	4604      	mov	r4, r0
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003d58:	6802      	ldr	r2, [r0, #0]
 8003d5a:	6853      	ldr	r3, [r2, #4]
 8003d5c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003d60:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003d62:	f7fe fb05 	bl	8002370 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	2164      	movs	r1, #100	; 0x64
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7ff fe54 	bl	8003a18 <SPI_EndRxTransaction>
 8003d70:	b118      	cbz	r0, 8003d7a <SPI_CloseRx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d72:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d74:	f043 0320 	orr.w	r3, r3, #32
 8003d78:	6623      	str	r3, [r4, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003d80:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d82:	b11b      	cbz	r3, 8003d8c <SPI_CloseRx_ISR+0x38>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003d84:	4620      	mov	r0, r4
 8003d86:	f7fd ffcd 	bl	8001d24 <HAL_SPI_ErrorCallback>
 8003d8a:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f7ff ffdf 	bl	8003d50 <HAL_SPI_RxCpltCallback>
 8003d92:	bd10      	pop	{r4, pc}

08003d94 <SPI_RxISR_8BIT>:
{
 8003d94:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003d96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	6402      	str	r2, [r0, #64]	; 0x40
 8003d9c:	6802      	ldr	r2, [r0, #0]
 8003d9e:	7b12      	ldrb	r2, [r2, #12]
 8003da0:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 8003da2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8003db0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	b103      	cbz	r3, 8003dba <SPI_RxISR_8BIT+0x26>
 8003db8:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8003dba:	f7ff ffcb 	bl	8003d54 <SPI_CloseRx_ISR>
}
 8003dbe:	e7fb      	b.n	8003db8 <SPI_RxISR_8BIT+0x24>

08003dc0 <SPI_RxISR_16BIT>:
{
 8003dc0:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003dc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003dc4:	6802      	ldr	r2, [r0, #0]
 8003dc6:	68d2      	ldr	r2, [r2, #12]
 8003dc8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003dcc:	3302      	adds	r3, #2
 8003dce:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003dd0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8003dde:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	b103      	cbz	r3, 8003de8 <SPI_RxISR_16BIT+0x28>
 8003de6:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8003de8:	f7ff ffb4 	bl	8003d54 <SPI_CloseRx_ISR>
}
 8003dec:	e7fb      	b.n	8003de6 <SPI_RxISR_16BIT+0x26>

08003dee <SPI_CloseRxTx_ISR>:
{
 8003dee:	b510      	push	{r4, lr}
 8003df0:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8003df2:	f7fe fabd 	bl	8002370 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003df6:	6822      	ldr	r2, [r4, #0]
 8003df8:	6853      	ldr	r3, [r2, #4]
 8003dfa:	f023 0320 	bic.w	r3, r3, #32
 8003dfe:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e00:	4602      	mov	r2, r0
 8003e02:	2164      	movs	r1, #100	; 0x64
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7ff fdd3 	bl	80039b0 <SPI_EndRxTxTransaction>
 8003e0a:	b118      	cbz	r0, 8003e14 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e0c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e0e:	f043 0320 	orr.w	r3, r3, #32
 8003e12:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003e14:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e16:	b993      	cbnz	r3, 8003e3e <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003e18:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d006      	beq.n	8003e30 <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f7ff ff92 	bl	8003d52 <HAL_SPI_TxRxCpltCallback>
 8003e2e:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8003e30:	2301      	movs	r3, #1
 8003e32:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8003e36:	4620      	mov	r0, r4
 8003e38:	f7ff ff8a 	bl	8003d50 <HAL_SPI_RxCpltCallback>
 8003e3c:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7fd ff6d 	bl	8001d24 <HAL_SPI_ErrorCallback>
 8003e4a:	bd10      	pop	{r4, pc}

08003e4c <SPI_2linesTxISR_8BIT>:
{
 8003e4c:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 8003e4e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d918      	bls.n	8003e88 <SPI_2linesTxISR_8BIT+0x3c>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e56:	6803      	ldr	r3, [r0, #0]
 8003e58:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003e5a:	8812      	ldrh	r2, [r2, #0]
 8003e5c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e60:	3302      	adds	r3, #2
 8003e62:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003e64:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b02      	subs	r3, #2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003e6e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	b943      	cbnz	r3, 8003e86 <SPI_2linesTxISR_8BIT+0x3a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003e74:	6802      	ldr	r2, [r0, #0]
 8003e76:	6853      	ldr	r3, [r2, #4]
 8003e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7c:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003e7e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	b163      	cbz	r3, 8003ea0 <SPI_2linesTxISR_8BIT+0x54>
 8003e86:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8003e88:	6802      	ldr	r2, [r0, #0]
 8003e8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e8c:	1c59      	adds	r1, r3, #1
 8003e8e:	6381      	str	r1, [r0, #56]	; 0x38
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	7313      	strb	r3, [r2, #12]
    hspi->TxXferCount--;
 8003e94:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8003e9e:	e7e6      	b.n	8003e6e <SPI_2linesTxISR_8BIT+0x22>
      SPI_CloseRxTx_ISR(hspi);
 8003ea0:	f7ff ffa5 	bl	8003dee <SPI_CloseRxTx_ISR>
}
 8003ea4:	e7ef      	b.n	8003e86 <SPI_2linesTxISR_8BIT+0x3a>

08003ea6 <SPI_2linesRxISR_8BIT>:
{
 8003ea6:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 8003ea8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d925      	bls.n	8003efe <SPI_2linesRxISR_8BIT+0x58>
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003eb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003eb4:	6802      	ldr	r2, [r0, #0]
 8003eb6:	68d2      	ldr	r2, [r2, #12]
 8003eb8:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003ec0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b02      	subs	r3, #2
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003ece:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d00c      	beq.n	8003ef2 <SPI_2linesRxISR_8BIT+0x4c>
  if (hspi->RxXferCount == 0U)
 8003ed8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	b93b      	cbnz	r3, 8003ef0 <SPI_2linesRxISR_8BIT+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003ee0:	6802      	ldr	r2, [r0, #0]
 8003ee2:	6853      	ldr	r3, [r2, #4]
 8003ee4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003ee8:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8003eea:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	b1a3      	cbz	r3, 8003f1a <SPI_2linesRxISR_8BIT+0x74>
 8003ef0:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ef2:	6802      	ldr	r2, [r0, #0]
 8003ef4:	6853      	ldr	r3, [r2, #4]
 8003ef6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003efa:	6053      	str	r3, [r2, #4]
 8003efc:	e7ec      	b.n	8003ed8 <SPI_2linesRxISR_8BIT+0x32>
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 8003efe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	6402      	str	r2, [r0, #64]	; 0x40
 8003f04:	6802      	ldr	r2, [r0, #0]
 8003f06:	7b12      	ldrb	r2, [r2, #12]
 8003f08:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8003f0a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8003f18:	e7de      	b.n	8003ed8 <SPI_2linesRxISR_8BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 8003f1a:	f7ff ff68 	bl	8003dee <SPI_CloseRxTx_ISR>
}
 8003f1e:	e7e7      	b.n	8003ef0 <SPI_2linesRxISR_8BIT+0x4a>

08003f20 <SPI_2linesTxISR_16BIT>:
{
 8003f20:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f22:	6803      	ldr	r3, [r0, #0]
 8003f24:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003f26:	8812      	ldrh	r2, [r2, #0]
 8003f28:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8003f30:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003f3a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	b943      	cbnz	r3, 8003f52 <SPI_2linesTxISR_16BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003f40:	6802      	ldr	r2, [r0, #0]
 8003f42:	6853      	ldr	r3, [r2, #4]
 8003f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f48:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003f4a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	b103      	cbz	r3, 8003f54 <SPI_2linesTxISR_16BIT+0x34>
 8003f52:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8003f54:	f7ff ff4b 	bl	8003dee <SPI_CloseRxTx_ISR>
}
 8003f58:	e7fb      	b.n	8003f52 <SPI_2linesTxISR_16BIT+0x32>

08003f5a <SPI_2linesRxISR_16BIT>:
{
 8003f5a:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f5e:	6802      	ldr	r2, [r0, #0]
 8003f60:	68d2      	ldr	r2, [r2, #12]
 8003f62:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f64:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f66:	3302      	adds	r3, #2
 8003f68:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003f6a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8003f78:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	b93b      	cbnz	r3, 8003f90 <SPI_2linesRxISR_16BIT+0x36>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003f80:	6802      	ldr	r2, [r0, #0]
 8003f82:	6853      	ldr	r3, [r2, #4]
 8003f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f88:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8003f8a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	b103      	cbz	r3, 8003f92 <SPI_2linesRxISR_16BIT+0x38>
 8003f90:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8003f92:	f7ff ff2c 	bl	8003dee <SPI_CloseRxTx_ISR>
}
 8003f96:	e7fb      	b.n	8003f90 <SPI_2linesRxISR_16BIT+0x36>

08003f98 <HAL_SPI_IRQHandler>:
{
 8003f98:	b510      	push	{r4, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003f9e:	6802      	ldr	r2, [r0, #0]
 8003fa0:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003fa2:	6893      	ldr	r3, [r2, #8]
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8003fa4:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8003fa8:	2801      	cmp	r0, #1
 8003faa:	d05c      	beq.n	8004066 <HAL_SPI_IRQHandler+0xce>
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8003fac:	f013 0f02 	tst.w	r3, #2
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_IRQHandler+0x20>
 8003fb2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003fb6:	d15d      	bne.n	8004074 <HAL_SPI_IRQHandler+0xdc>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8003fb8:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8003fbc:	d05d      	beq.n	800407a <HAL_SPI_IRQHandler+0xe2>
 8003fbe:	f011 0f20 	tst.w	r1, #32
 8003fc2:	d05a      	beq.n	800407a <HAL_SPI_IRQHandler+0xe2>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8003fc4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003fc8:	d00f      	beq.n	8003fea <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003fca:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003fce:	b2c0      	uxtb	r0, r0
 8003fd0:	2803      	cmp	r0, #3
 8003fd2:	d054      	beq.n	800407e <HAL_SPI_IRQHandler+0xe6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003fd4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003fd6:	f040 0004 	orr.w	r0, r0, #4
 8003fda:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fdc:	2000      	movs	r0, #0
 8003fde:	9000      	str	r0, [sp, #0]
 8003fe0:	68d0      	ldr	r0, [r2, #12]
 8003fe2:	9000      	str	r0, [sp, #0]
 8003fe4:	6890      	ldr	r0, [r2, #8]
 8003fe6:	9000      	str	r0, [sp, #0]
 8003fe8:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8003fea:	f013 0f20 	tst.w	r3, #32
 8003fee:	d00c      	beq.n	800400a <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ff0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003ff2:	f040 0001 	orr.w	r0, r0, #1
 8003ff6:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	9002      	str	r0, [sp, #8]
 8003ffc:	6890      	ldr	r0, [r2, #8]
 8003ffe:	9002      	str	r0, [sp, #8]
 8004000:	6810      	ldr	r0, [r2, #0]
 8004002:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8004006:	6010      	str	r0, [r2, #0]
 8004008:	9a02      	ldr	r2, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 800400a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800400e:	d009      	beq.n	8004024 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004010:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004012:	f043 0308 	orr.w	r3, r3, #8
 8004016:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004018:	2300      	movs	r3, #0
 800401a:	9303      	str	r3, [sp, #12]
 800401c:	6823      	ldr	r3, [r4, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	9303      	str	r3, [sp, #12]
 8004022:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004024:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004026:	b343      	cbz	r3, 800407a <HAL_SPI_IRQHandler+0xe2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	6853      	ldr	r3, [r2, #4]
 800402c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004030:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004032:	2301      	movs	r3, #1
 8004034:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004038:	f011 0f03 	tst.w	r1, #3
 800403c:	d027      	beq.n	800408e <HAL_SPI_IRQHandler+0xf6>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	6853      	ldr	r3, [r2, #4]
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8004048:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800404a:	b123      	cbz	r3, 8004056 <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800404c:	4a12      	ldr	r2, [pc, #72]	; (8004098 <HAL_SPI_IRQHandler+0x100>)
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8004050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004052:	f7fe f9fb 	bl	800244c <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8004056:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004058:	b17b      	cbz	r3, 800407a <HAL_SPI_IRQHandler+0xe2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800405a:	4a0f      	ldr	r2, [pc, #60]	; (8004098 <HAL_SPI_IRQHandler+0x100>)
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800405e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004060:	f7fe f9f4 	bl	800244c <HAL_DMA_Abort_IT>
 8004064:	e009      	b.n	800407a <HAL_SPI_IRQHandler+0xe2>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8004066:	f011 0f40 	tst.w	r1, #64	; 0x40
 800406a:	d09f      	beq.n	8003fac <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 800406c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800406e:	4620      	mov	r0, r4
 8004070:	4798      	blx	r3
    return;
 8004072:	e002      	b.n	800407a <HAL_SPI_IRQHandler+0xe2>
    hspi->TxISR(hspi);
 8004074:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004076:	4620      	mov	r0, r4
 8004078:	4798      	blx	r3
}
 800407a:	b004      	add	sp, #16
 800407c:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800407e:	2300      	movs	r3, #0
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	68d3      	ldr	r3, [r2, #12]
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	6893      	ldr	r3, [r2, #8]
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	9b01      	ldr	r3, [sp, #4]
        return;
 800408c:	e7f5      	b.n	800407a <HAL_SPI_IRQHandler+0xe2>
        HAL_SPI_ErrorCallback(hspi);
 800408e:	4620      	mov	r0, r4
 8004090:	f7fd fe48 	bl	8001d24 <HAL_SPI_ErrorCallback>
 8004094:	e7f1      	b.n	800407a <HAL_SPI_IRQHandler+0xe2>
 8004096:	bf00      	nop
 8004098:	0800409d 	.word	0x0800409d

0800409c <SPI_DMAAbortOnError>:
{
 800409c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800409e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80040a6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80040a8:	f7fd fe3c 	bl	8001d24 <HAL_SPI_ErrorCallback>
 80040ac:	bd08      	pop	{r3, pc}

080040ae <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ae:	6802      	ldr	r2, [r0, #0]
 80040b0:	6813      	ldr	r3, [r2, #0]
 80040b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040b6:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b8:	6802      	ldr	r2, [r0, #0]
 80040ba:	6893      	ldr	r3, [r2, #8]
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6093      	str	r3, [r2, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040c2:	2320      	movs	r3, #32
 80040c4:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	6603      	str	r3, [r0, #96]	; 0x60
 80040cc:	4770      	bx	lr

080040ce <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ce:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b21      	cmp	r3, #33	; 0x21
 80040d6:	d000      	beq.n	80040da <UART_TxISR_8BIT+0xc>
 80040d8:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 80040da:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80040de:	b29b      	uxth	r3, r3
 80040e0:	b16b      	cbz	r3, 80040fe <UART_TxISR_8BIT+0x30>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80040e2:	6802      	ldr	r2, [r0, #0]
 80040e4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80040e6:	1c59      	adds	r1, r3, #1
 80040e8:	64c1      	str	r1, [r0, #76]	; 0x4c
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80040ee:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 80040fc:	e7ec      	b.n	80040d8 <UART_TxISR_8BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040fe:	6802      	ldr	r2, [r0, #0]
 8004100:	6813      	ldr	r3, [r2, #0]
 8004102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004106:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004108:	6802      	ldr	r2, [r0, #0]
 800410a:	6813      	ldr	r3, [r2, #0]
 800410c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4770      	bx	lr

08004114 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004114:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b21      	cmp	r3, #33	; 0x21
 800411c:	d000      	beq.n	8004120 <UART_TxISR_16BIT+0xc>
 800411e:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 8004120:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004124:	b29b      	uxth	r3, r3
 8004126:	b183      	cbz	r3, 800414a <UART_TxISR_16BIT+0x36>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004128:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 800412a:	6802      	ldr	r2, [r0, #0]
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004132:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2;
 8004134:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004136:	3302      	adds	r3, #2
 8004138:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800413a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29b      	uxth	r3, r3
 8004144:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8004148:	e7e9      	b.n	800411e <UART_TxISR_16BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800414a:	6802      	ldr	r2, [r0, #0]
 800414c:	6813      	ldr	r3, [r2, #0]
 800414e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004152:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004154:	6802      	ldr	r2, [r0, #0]
 8004156:	6813      	ldr	r3, [r2, #0]
 8004158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4770      	bx	lr

08004160 <HAL_UART_DeInit>:
  if (huart == NULL)
 8004160:	b1d8      	cbz	r0, 800419a <HAL_UART_DeInit+0x3a>
{
 8004162:	b538      	push	{r3, r4, r5, lr}
 8004164:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8004166:	2324      	movs	r3, #36	; 0x24
 8004168:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800416c:	6802      	ldr	r2, [r0, #0]
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8004176:	6803      	ldr	r3, [r0, #0]
 8004178:	2500      	movs	r5, #0
 800417a:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800417c:	6803      	ldr	r3, [r0, #0]
 800417e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004180:	6803      	ldr	r3, [r0, #0]
 8004182:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8004184:	f7fd ff6c 	bl	8002060 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	6765      	str	r5, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 800418a:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 800418e:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 8004192:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  return HAL_OK;
 8004196:	4628      	mov	r0, r5
 8004198:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800419a:	2001      	movs	r0, #1
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80041a0:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d001      	beq.n	80041ae <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 80041aa:	2002      	movs	r0, #2
 80041ac:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 80041ae:	b341      	cbz	r1, 8004202 <HAL_UART_Transmit_IT+0x62>
 80041b0:	b34a      	cbz	r2, 8004206 <HAL_UART_Transmit_IT+0x66>
    __HAL_LOCK(huart);
 80041b2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d027      	beq.n	800420a <HAL_UART_Transmit_IT+0x6a>
 80041ba:	2301      	movs	r3, #1
 80041bc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 80041c0:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80041c2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80041c6:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ce:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d0:	2321      	movs	r3, #33	; 0x21
 80041d2:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d6:	6883      	ldr	r3, [r0, #8]
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d00b      	beq.n	80041f6 <HAL_UART_Transmit_IT+0x56>
        huart->TxISR = UART_TxISR_8BIT;
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <HAL_UART_Transmit_IT+0x70>)
 80041e0:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_UNLOCK(huart);
 80041e2:	2300      	movs	r3, #0
 80041e4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041e8:	6801      	ldr	r1, [r0, #0]
 80041ea:	680a      	ldr	r2, [r1, #0]
 80041ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041f0:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80041f2:	4618      	mov	r0, r3
 80041f4:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f6:	6903      	ldr	r3, [r0, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <HAL_UART_Transmit_IT+0x3e>
        huart->TxISR = UART_TxISR_16BIT;
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_UART_Transmit_IT+0x74>)
 80041fe:	6643      	str	r3, [r0, #100]	; 0x64
 8004200:	e7ef      	b.n	80041e2 <HAL_UART_Transmit_IT+0x42>
      return HAL_ERROR;
 8004202:	2001      	movs	r0, #1
 8004204:	4770      	bx	lr
 8004206:	2001      	movs	r0, #1
 8004208:	4770      	bx	lr
    __HAL_LOCK(huart);
 800420a:	2002      	movs	r0, #2
}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	080040cf 	.word	0x080040cf
 8004214:	08004115 	.word	0x08004115

08004218 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004218:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	d001      	beq.n	8004226 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8004222:	2002      	movs	r0, #2
 8004224:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8004226:	2900      	cmp	r1, #0
 8004228:	d056      	beq.n	80042d8 <HAL_UART_Receive_IT+0xc0>
 800422a:	2a00      	cmp	r2, #0
 800422c:	d056      	beq.n	80042dc <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 800422e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8004232:	2b01      	cmp	r3, #1
 8004234:	d054      	beq.n	80042e0 <HAL_UART_Receive_IT+0xc8>
 8004236:	2301      	movs	r3, #1
 8004238:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 800423c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 800423e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8004242:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800424a:	6883      	ldr	r3, [r0, #8]
 800424c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004250:	d006      	beq.n	8004260 <HAL_UART_Receive_IT+0x48>
 8004252:	b9a3      	cbnz	r3, 800427e <HAL_UART_Receive_IT+0x66>
 8004254:	6903      	ldr	r3, [r0, #16]
 8004256:	b973      	cbnz	r3, 8004276 <HAL_UART_Receive_IT+0x5e>
 8004258:	23ff      	movs	r3, #255	; 0xff
 800425a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800425e:	e011      	b.n	8004284 <HAL_UART_Receive_IT+0x6c>
 8004260:	6903      	ldr	r3, [r0, #16]
 8004262:	b923      	cbnz	r3, 800426e <HAL_UART_Receive_IT+0x56>
 8004264:	f240 13ff 	movw	r3, #511	; 0x1ff
 8004268:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800426c:	e00a      	b.n	8004284 <HAL_UART_Receive_IT+0x6c>
 800426e:	23ff      	movs	r3, #255	; 0xff
 8004270:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004274:	e006      	b.n	8004284 <HAL_UART_Receive_IT+0x6c>
 8004276:	237f      	movs	r3, #127	; 0x7f
 8004278:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800427c:	e002      	b.n	8004284 <HAL_UART_Receive_IT+0x6c>
 800427e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004282:	d019      	beq.n	80042b8 <HAL_UART_Receive_IT+0xa0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004284:	2300      	movs	r3, #0
 8004286:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004288:	2322      	movs	r3, #34	; 0x22
 800428a:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428e:	6802      	ldr	r2, [r0, #0]
 8004290:	6893      	ldr	r3, [r2, #8]
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	6093      	str	r3, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004298:	6883      	ldr	r3, [r0, #8]
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429e:	d015      	beq.n	80042cc <HAL_UART_Receive_IT+0xb4>
        huart->RxISR = UART_RxISR_8BIT;
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <HAL_UART_Receive_IT+0xcc>)
 80042a2:	6603      	str	r3, [r0, #96]	; 0x60
      __HAL_UNLOCK(huart);
 80042a4:	2300      	movs	r3, #0
 80042a6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80042aa:	6801      	ldr	r1, [r0, #0]
 80042ac:	680a      	ldr	r2, [r1, #0]
 80042ae:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80042b2:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80042b4:	4618      	mov	r0, r3
 80042b6:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80042b8:	6903      	ldr	r3, [r0, #16]
 80042ba:	b91b      	cbnz	r3, 80042c4 <HAL_UART_Receive_IT+0xac>
 80042bc:	237f      	movs	r3, #127	; 0x7f
 80042be:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80042c2:	e7df      	b.n	8004284 <HAL_UART_Receive_IT+0x6c>
 80042c4:	233f      	movs	r3, #63	; 0x3f
 80042c6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80042ca:	e7db      	b.n	8004284 <HAL_UART_Receive_IT+0x6c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042cc:	6903      	ldr	r3, [r0, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e6      	bne.n	80042a0 <HAL_UART_Receive_IT+0x88>
        huart->RxISR = UART_RxISR_16BIT;
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_UART_Receive_IT+0xd0>)
 80042d4:	6603      	str	r3, [r0, #96]	; 0x60
 80042d6:	e7e5      	b.n	80042a4 <HAL_UART_Receive_IT+0x8c>
      return HAL_ERROR;
 80042d8:	2001      	movs	r0, #1
 80042da:	4770      	bx	lr
 80042dc:	2001      	movs	r0, #1
 80042de:	4770      	bx	lr
    __HAL_LOCK(huart);
 80042e0:	2002      	movs	r0, #2
}
 80042e2:	4770      	bx	lr
 80042e4:	08004309 	.word	0x08004309
 80042e8:	0800436d 	.word	0x0800436d

080042ec <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ec:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ee:	6801      	ldr	r1, [r0, #0]
 80042f0:	680a      	ldr	r2, [r1, #0]
 80042f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f6:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042f8:	2220      	movs	r2, #32
 80042fa:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042fe:	2200      	movs	r2, #0
 8004300:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004302:	f7fd fecf 	bl	80020a4 <HAL_UART_TxCpltCallback>
 8004306:	bd08      	pop	{r3, pc}

08004308 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 8004308:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800430c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b22      	cmp	r3, #34	; 0x22
 8004314:	d006      	beq.n	8004324 <UART_RxISR_8BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004316:	6802      	ldr	r2, [r0, #0]
 8004318:	8b13      	ldrh	r3, [r2, #24]
 800431a:	b29b      	uxth	r3, r3
 800431c:	f043 0308 	orr.w	r3, r3, #8
 8004320:	8313      	strh	r3, [r2, #24]
  }
}
 8004322:	4770      	bx	lr
{
 8004324:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004326:	6803      	ldr	r3, [r0, #0]
 8004328:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800432a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800432c:	1c5c      	adds	r4, r3, #1
 800432e:	6544      	str	r4, [r0, #84]	; 0x54
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	400a      	ands	r2, r1
 8004334:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0)
 8004336:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29b      	uxth	r3, r3
 8004340:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8004344:	b103      	cbz	r3, 8004348 <UART_RxISR_8BIT+0x40>
 8004346:	bd10      	pop	{r4, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004348:	6802      	ldr	r2, [r0, #0]
 800434a:	6813      	ldr	r3, [r2, #0]
 800434c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004350:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	6802      	ldr	r2, [r0, #0]
 8004354:	6893      	ldr	r3, [r2, #8]
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800435c:	2320      	movs	r3, #32
 800435e:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8004366:	f7fd fedb 	bl	8002120 <HAL_UART_RxCpltCallback>
 800436a:	bd10      	pop	{r4, pc}

0800436c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800436c:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800436e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004372:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b22      	cmp	r3, #34	; 0x22
 800437a:	d006      	beq.n	800438a <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800437c:	6802      	ldr	r2, [r0, #0]
 800437e:	8b13      	ldrh	r3, [r2, #24]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f043 0308 	orr.w	r3, r3, #8
 8004386:	8313      	strh	r3, [r2, #24]
 8004388:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800438a:	6803      	ldr	r3, [r0, #0]
 800438c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800438e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8004390:	400a      	ands	r2, r1
 8004392:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2;
 8004394:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004396:	3302      	adds	r3, #2
 8004398:	6543      	str	r3, [r0, #84]	; 0x54
    if (--huart->RxXferCount == 0)
 800439a:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1ed      	bne.n	8004388 <UART_RxISR_16BIT+0x1c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ac:	6802      	ldr	r2, [r0, #0]
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043b4:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b6:	6802      	ldr	r2, [r0, #0]
 80043b8:	6893      	ldr	r3, [r2, #8]
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80043c0:	2320      	movs	r3, #32
 80043c2:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 80043ca:	f7fd fea9 	bl	8002120 <HAL_UART_RxCpltCallback>
 80043ce:	bd08      	pop	{r3, pc}

080043d0 <HAL_UART_IRQHandler>:
{
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043d4:	6802      	ldr	r2, [r0, #0]
 80043d6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043d8:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043da:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 80043dc:	f013 050f 	ands.w	r5, r3, #15
 80043e0:	d10c      	bne.n	80043fc <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 80043e2:	f013 0f20 	tst.w	r3, #32
 80043e6:	d009      	beq.n	80043fc <HAL_UART_IRQHandler+0x2c>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043e8:	f011 0f20 	tst.w	r1, #32
 80043ec:	d006      	beq.n	80043fc <HAL_UART_IRQHandler+0x2c>
      if (huart->RxISR != NULL)
 80043ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8093 	beq.w	800451c <HAL_UART_IRQHandler+0x14c>
        huart->RxISR(huart);
 80043f6:	4620      	mov	r0, r4
 80043f8:	4798      	blx	r3
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
  if ((errorflags != RESET)
 80043fc:	2d00      	cmp	r5, #0
 80043fe:	d06f      	beq.n	80044e0 <HAL_UART_IRQHandler+0x110>
      && (((cr3its & USART_CR3_EIE) != RESET)
 8004400:	f010 0501 	ands.w	r5, r0, #1
 8004404:	d102      	bne.n	800440c <HAL_UART_IRQHandler+0x3c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004406:	f411 7f90 	tst.w	r1, #288	; 0x120
 800440a:	d069      	beq.n	80044e0 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800440c:	f013 0f01 	tst.w	r3, #1
 8004410:	d007      	beq.n	8004422 <HAL_UART_IRQHandler+0x52>
 8004412:	f411 7f80 	tst.w	r1, #256	; 0x100
 8004416:	d004      	beq.n	8004422 <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004418:	2001      	movs	r0, #1
 800441a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800441c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800441e:	4302      	orrs	r2, r0
 8004420:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004422:	f013 0f02 	tst.w	r3, #2
 8004426:	d007      	beq.n	8004438 <HAL_UART_IRQHandler+0x68>
 8004428:	b135      	cbz	r5, 8004438 <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	2002      	movs	r0, #2
 800442e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004430:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004432:	f042 0204 	orr.w	r2, r2, #4
 8004436:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004438:	f013 0f04 	tst.w	r3, #4
 800443c:	d007      	beq.n	800444e <HAL_UART_IRQHandler+0x7e>
 800443e:	b135      	cbz	r5, 800444e <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	2004      	movs	r0, #4
 8004444:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004446:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004448:	f042 0202 	orr.w	r2, r2, #2
 800444c:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 800444e:	f013 0f08 	tst.w	r3, #8
 8004452:	d009      	beq.n	8004468 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8004454:	f011 0f20 	tst.w	r1, #32
 8004458:	d100      	bne.n	800445c <HAL_UART_IRQHandler+0x8c>
 800445a:	b12d      	cbz	r5, 8004468 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	2008      	movs	r0, #8
 8004460:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004462:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004464:	4302      	orrs	r2, r0
 8004466:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004468:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800446a:	2a00      	cmp	r2, #0
 800446c:	d056      	beq.n	800451c <HAL_UART_IRQHandler+0x14c>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 800446e:	f013 0f20 	tst.w	r3, #32
 8004472:	d006      	beq.n	8004482 <HAL_UART_IRQHandler+0xb2>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004474:	f011 0f20 	tst.w	r1, #32
 8004478:	d003      	beq.n	8004482 <HAL_UART_IRQHandler+0xb2>
        if (huart->RxISR != NULL)
 800447a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800447c:	b10b      	cbz	r3, 8004482 <HAL_UART_IRQHandler+0xb2>
          huart->RxISR(huart);
 800447e:	4620      	mov	r0, r4
 8004480:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004482:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004484:	f013 0f08 	tst.w	r3, #8
 8004488:	d104      	bne.n	8004494 <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800448e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004492:	d01f      	beq.n	80044d4 <HAL_UART_IRQHandler+0x104>
        UART_EndRxTransfer(huart);
 8004494:	4620      	mov	r0, r4
 8004496:	f7ff fe0a 	bl	80040ae <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	f012 0f40 	tst.w	r2, #64	; 0x40
 80044a2:	d013      	beq.n	80044cc <HAL_UART_IRQHandler+0xfc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044aa:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80044ac:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80044ae:	b14b      	cbz	r3, 80044c4 <HAL_UART_IRQHandler+0xf4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044b0:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <HAL_UART_IRQHandler+0x158>)
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044b4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80044b6:	f7fd ffc9 	bl	800244c <HAL_DMA_Abort_IT>
 80044ba:	b378      	cbz	r0, 800451c <HAL_UART_IRQHandler+0x14c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044bc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80044be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044c0:	4798      	blx	r3
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
            HAL_UART_ErrorCallback(huart);
 80044c4:	4620      	mov	r0, r4
 80044c6:	f7fd fe75 	bl	80021b4 <HAL_UART_ErrorCallback>
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 80044cc:	4620      	mov	r0, r4
 80044ce:	f7fd fe71 	bl	80021b4 <HAL_UART_ErrorCallback>
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80044d4:	4620      	mov	r0, r4
 80044d6:	f7fd fe6d 	bl	80021b4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044da:	2300      	movs	r3, #0
 80044dc:	6763      	str	r3, [r4, #116]	; 0x74
 80044de:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80044e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80044e4:	d002      	beq.n	80044ec <HAL_UART_IRQHandler+0x11c>
 80044e6:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80044ea:	d10a      	bne.n	8004502 <HAL_UART_IRQHandler+0x132>
  if (((isrflags & USART_ISR_TXE) != RESET)
 80044ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80044f0:	d00e      	beq.n	8004510 <HAL_UART_IRQHandler+0x140>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80044f6:	d00b      	beq.n	8004510 <HAL_UART_IRQHandler+0x140>
    if (huart->TxISR != NULL)
 80044f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044fa:	b17b      	cbz	r3, 800451c <HAL_UART_IRQHandler+0x14c>
      huart->TxISR(huart);
 80044fc:	4620      	mov	r0, r4
 80044fe:	4798      	blx	r3
 8004500:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004502:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004506:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004508:	4620      	mov	r0, r4
 800450a:	f000 fb04 	bl	8004b16 <HAL_UARTEx_WakeupCallback>
    return;
 800450e:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004510:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004514:	d002      	beq.n	800451c <HAL_UART_IRQHandler+0x14c>
 8004516:	f011 0f40 	tst.w	r1, #64	; 0x40
 800451a:	d100      	bne.n	800451e <HAL_UART_IRQHandler+0x14e>
 800451c:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 800451e:	4620      	mov	r0, r4
 8004520:	f7ff fee4 	bl	80042ec <UART_EndTransmit_IT>
    return;
 8004524:	e7fa      	b.n	800451c <HAL_UART_IRQHandler+0x14c>
 8004526:	bf00      	nop
 8004528:	0800452d 	.word	0x0800452d

0800452c <UART_DMAAbortOnError>:
{
 800452c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800452e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004536:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800453a:	f7fd fe3b 	bl	80021b4 <HAL_UART_ErrorCallback>
 800453e:	bd08      	pop	{r3, pc}

08004540 <UART_SetConfig>:
{
 8004540:	e92d 4b78 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, fp, lr}
 8004544:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004546:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004548:	6883      	ldr	r3, [r0, #8]
 800454a:	6902      	ldr	r2, [r0, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	6942      	ldr	r2, [r0, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	69c2      	ldr	r2, [r0, #28]
 8004554:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004556:	6808      	ldr	r0, [r1, #0]
 8004558:	4a9b      	ldr	r2, [pc, #620]	; (80047c8 <UART_SetConfig+0x288>)
 800455a:	4002      	ands	r2, r0
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	6853      	ldr	r3, [r2, #4]
 8004564:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004568:	68e1      	ldr	r1, [r4, #12]
 800456a:	430b      	orrs	r3, r1
 800456c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800456e:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004570:	6822      	ldr	r2, [r4, #0]
 8004572:	4996      	ldr	r1, [pc, #600]	; (80047cc <UART_SetConfig+0x28c>)
 8004574:	428a      	cmp	r2, r1
 8004576:	d001      	beq.n	800457c <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8004578:	6a21      	ldr	r1, [r4, #32]
 800457a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800457c:	6891      	ldr	r1, [r2, #8]
 800457e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8004582:	430b      	orrs	r3, r1
 8004584:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	4a91      	ldr	r2, [pc, #580]	; (80047d0 <UART_SetConfig+0x290>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d023      	beq.n	80045d6 <UART_SetConfig+0x96>
 800458e:	4a91      	ldr	r2, [pc, #580]	; (80047d4 <UART_SetConfig+0x294>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d034      	beq.n	80045fe <UART_SetConfig+0xbe>
 8004594:	4a90      	ldr	r2, [pc, #576]	; (80047d8 <UART_SetConfig+0x298>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d04a      	beq.n	8004630 <UART_SetConfig+0xf0>
 800459a:	4a90      	ldr	r2, [pc, #576]	; (80047dc <UART_SetConfig+0x29c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d05d      	beq.n	800465c <UART_SetConfig+0x11c>
 80045a0:	4a8a      	ldr	r2, [pc, #552]	; (80047cc <UART_SetConfig+0x28c>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d070      	beq.n	8004688 <UART_SetConfig+0x148>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80045a6:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80045a8:	4a88      	ldr	r2, [pc, #544]	; (80047cc <UART_SetConfig+0x28c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	f000 808f 	beq.w	80046ce <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045b0:	69e3      	ldr	r3, [r4, #28]
 80045b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b6:	f000 80fd 	beq.w	80047b4 <UART_SetConfig+0x274>
    switch (clocksource)
 80045ba:	2d08      	cmp	r5, #8
 80045bc:	f200 819b 	bhi.w	80048f6 <UART_SetConfig+0x3b6>
 80045c0:	e8df f015 	tbh	[pc, r5, lsl #1]
 80045c4:	0171015a 	.word	0x0171015a
 80045c8:	0199017b 	.word	0x0199017b
 80045cc:	01990186 	.word	0x01990186
 80045d0:	01990199 	.word	0x01990199
 80045d4:	0190      	.short	0x0190
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d6:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80045da:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80045de:	f002 0203 	and.w	r2, r2, #3
 80045e2:	2a03      	cmp	r2, #3
 80045e4:	d809      	bhi.n	80045fa <UART_SetConfig+0xba>
 80045e6:	e8df f002 	tbb	[pc, r2]
 80045ea:	0402      	.short	0x0402
 80045ec:	0668      	.short	0x0668
 80045ee:	2501      	movs	r5, #1
 80045f0:	e7da      	b.n	80045a8 <UART_SetConfig+0x68>
 80045f2:	2504      	movs	r5, #4
 80045f4:	e7d8      	b.n	80045a8 <UART_SetConfig+0x68>
 80045f6:	2508      	movs	r5, #8
 80045f8:	e7d6      	b.n	80045a8 <UART_SetConfig+0x68>
 80045fa:	2510      	movs	r5, #16
 80045fc:	e7d4      	b.n	80045a8 <UART_SetConfig+0x68>
 80045fe:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8004602:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004606:	f002 020c 	and.w	r2, r2, #12
 800460a:	2a0c      	cmp	r2, #12
 800460c:	d80e      	bhi.n	800462c <UART_SetConfig+0xec>
 800460e:	e8df f002 	tbb	[pc, r2]
 8004612:	0d07      	.short	0x0d07
 8004614:	0d090d0d 	.word	0x0d090d0d
 8004618:	0d560d0d 	.word	0x0d560d0d
 800461c:	0d0d      	.short	0x0d0d
 800461e:	0b          	.byte	0x0b
 800461f:	00          	.byte	0x00
 8004620:	2500      	movs	r5, #0
 8004622:	e7c1      	b.n	80045a8 <UART_SetConfig+0x68>
 8004624:	2504      	movs	r5, #4
 8004626:	e7bf      	b.n	80045a8 <UART_SetConfig+0x68>
 8004628:	2508      	movs	r5, #8
 800462a:	e7bd      	b.n	80045a8 <UART_SetConfig+0x68>
 800462c:	2510      	movs	r5, #16
 800462e:	e7bb      	b.n	80045a8 <UART_SetConfig+0x68>
 8004630:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8004634:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004638:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800463c:	2a10      	cmp	r2, #16
 800463e:	d009      	beq.n	8004654 <UART_SetConfig+0x114>
 8004640:	d905      	bls.n	800464e <UART_SetConfig+0x10e>
 8004642:	2a20      	cmp	r2, #32
 8004644:	d03d      	beq.n	80046c2 <UART_SetConfig+0x182>
 8004646:	2a30      	cmp	r2, #48	; 0x30
 8004648:	d106      	bne.n	8004658 <UART_SetConfig+0x118>
 800464a:	2508      	movs	r5, #8
 800464c:	e7ac      	b.n	80045a8 <UART_SetConfig+0x68>
 800464e:	b91a      	cbnz	r2, 8004658 <UART_SetConfig+0x118>
 8004650:	2500      	movs	r5, #0
 8004652:	e7a9      	b.n	80045a8 <UART_SetConfig+0x68>
 8004654:	2504      	movs	r5, #4
 8004656:	e7a7      	b.n	80045a8 <UART_SetConfig+0x68>
 8004658:	2510      	movs	r5, #16
 800465a:	e7a5      	b.n	80045a8 <UART_SetConfig+0x68>
 800465c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8004660:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004664:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004668:	2a40      	cmp	r2, #64	; 0x40
 800466a:	d009      	beq.n	8004680 <UART_SetConfig+0x140>
 800466c:	d905      	bls.n	800467a <UART_SetConfig+0x13a>
 800466e:	2a80      	cmp	r2, #128	; 0x80
 8004670:	d029      	beq.n	80046c6 <UART_SetConfig+0x186>
 8004672:	2ac0      	cmp	r2, #192	; 0xc0
 8004674:	d106      	bne.n	8004684 <UART_SetConfig+0x144>
 8004676:	2508      	movs	r5, #8
 8004678:	e796      	b.n	80045a8 <UART_SetConfig+0x68>
 800467a:	b91a      	cbnz	r2, 8004684 <UART_SetConfig+0x144>
 800467c:	2500      	movs	r5, #0
 800467e:	e793      	b.n	80045a8 <UART_SetConfig+0x68>
 8004680:	2504      	movs	r5, #4
 8004682:	e791      	b.n	80045a8 <UART_SetConfig+0x68>
 8004684:	2510      	movs	r5, #16
 8004686:	e78f      	b.n	80045a8 <UART_SetConfig+0x68>
 8004688:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 800468c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004690:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004694:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004698:	d00b      	beq.n	80046b2 <UART_SetConfig+0x172>
 800469a:	d907      	bls.n	80046ac <UART_SetConfig+0x16c>
 800469c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80046a0:	d013      	beq.n	80046ca <UART_SetConfig+0x18a>
 80046a2:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80046a6:	d106      	bne.n	80046b6 <UART_SetConfig+0x176>
 80046a8:	2508      	movs	r5, #8
 80046aa:	e77d      	b.n	80045a8 <UART_SetConfig+0x68>
 80046ac:	b91a      	cbnz	r2, 80046b6 <UART_SetConfig+0x176>
 80046ae:	2500      	movs	r5, #0
 80046b0:	e77a      	b.n	80045a8 <UART_SetConfig+0x68>
 80046b2:	2504      	movs	r5, #4
 80046b4:	e778      	b.n	80045a8 <UART_SetConfig+0x68>
 80046b6:	2510      	movs	r5, #16
 80046b8:	e776      	b.n	80045a8 <UART_SetConfig+0x68>
 80046ba:	2502      	movs	r5, #2
 80046bc:	e774      	b.n	80045a8 <UART_SetConfig+0x68>
 80046be:	2502      	movs	r5, #2
 80046c0:	e772      	b.n	80045a8 <UART_SetConfig+0x68>
 80046c2:	2502      	movs	r5, #2
 80046c4:	e770      	b.n	80045a8 <UART_SetConfig+0x68>
 80046c6:	2502      	movs	r5, #2
 80046c8:	e76e      	b.n	80045a8 <UART_SetConfig+0x68>
 80046ca:	2502      	movs	r5, #2
 80046cc:	e76c      	b.n	80045a8 <UART_SetConfig+0x68>
    switch (clocksource)
 80046ce:	2d08      	cmp	r5, #8
 80046d0:	d811      	bhi.n	80046f6 <UART_SetConfig+0x1b6>
 80046d2:	e8df f005 	tbb	[pc, r5]
 80046d6:	1008      	.short	0x1008
 80046d8:	100c1005 	.word	0x100c1005
 80046dc:	1010      	.short	0x1010
 80046de:	13          	.byte	0x13
 80046df:	00          	.byte	0x00
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80046e0:	483f      	ldr	r0, [pc, #252]	; (80047e0 <UART_SetConfig+0x2a0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 80046e2:	2600      	movs	r6, #0
 80046e4:	e00d      	b.n	8004702 <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80046e6:	f7fe fc73 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ea:	2600      	movs	r6, #0
        break;
 80046ec:	e009      	b.n	8004702 <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80046ee:	f7fe f855 	bl	800279c <HAL_RCC_GetSysClockFreq>
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f2:	2600      	movs	r6, #0
        break;
 80046f4:	e005      	b.n	8004702 <UART_SetConfig+0x1c2>
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80046f6:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 80046f8:	2601      	movs	r6, #1
        break;
 80046fa:	e002      	b.n	8004702 <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80046fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 8004700:	2600      	movs	r6, #0
    if (lpuart_ker_ck_pres != 0U)
 8004702:	2800      	cmp	r0, #0
 8004704:	f000 80c9 	beq.w	800489a <UART_SetConfig+0x35a>
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8004708:	6862      	ldr	r2, [r4, #4]
 800470a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800470e:	4298      	cmp	r0, r3
 8004710:	f0c0 80f4 	bcc.w	80048fc <UART_SetConfig+0x3bc>
 8004714:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004718:	f200 80f2 	bhi.w	8004900 <UART_SetConfig+0x3c0>
        switch (clocksource)
 800471c:	2d08      	cmp	r5, #8
 800471e:	d846      	bhi.n	80047ae <UART_SetConfig+0x26e>
 8004720:	e8df f005 	tbb	[pc, r5]
 8004724:	451f4505 	.word	0x451f4505
 8004728:	45454529 	.word	0x45454529
 800472c:	3b          	.byte	0x3b
 800472d:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800472e:	f7fe fc4f 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 8004732:	2300      	movs	r3, #0
 8004734:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8004738:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800473c:	6862      	ldr	r2, [r4, #4]
 800473e:	0850      	lsrs	r0, r2, #1
 8004740:	eb18 0b00 	adds.w	fp, r8, r0
 8004744:	f149 0c00 	adc.w	ip, r9, #0
 8004748:	4658      	mov	r0, fp
 800474a:	4661      	mov	r1, ip
 800474c:	f7fb fda0 	bl	8000290 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004750:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004754:	4b23      	ldr	r3, [pc, #140]	; (80047e4 <UART_SetConfig+0x2a4>)
 8004756:	429a      	cmp	r2, r3
 8004758:	f200 80d4 	bhi.w	8004904 <UART_SetConfig+0x3c4>
          huart->Instance->BRR = usartdiv;
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	60d8      	str	r0, [r3, #12]
 8004760:	e09b      	b.n	800489a <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004762:	0855      	lsrs	r5, r2, #1
 8004764:	2300      	movs	r3, #0
 8004766:	4820      	ldr	r0, [pc, #128]	; (80047e8 <UART_SetConfig+0x2a8>)
 8004768:	2100      	movs	r1, #0
 800476a:	1940      	adds	r0, r0, r5
 800476c:	f141 0100 	adc.w	r1, r1, #0
 8004770:	f7fb fd8e 	bl	8000290 <__aeabi_uldivmod>
            break;
 8004774:	e7ec      	b.n	8004750 <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004776:	f7fe f811 	bl	800279c <HAL_RCC_GetSysClockFreq>
 800477a:	2300      	movs	r3, #0
 800477c:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8004780:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8004784:	6862      	ldr	r2, [r4, #4]
 8004786:	0850      	lsrs	r0, r2, #1
 8004788:	eb18 0b00 	adds.w	fp, r8, r0
 800478c:	f149 0c00 	adc.w	ip, r9, #0
 8004790:	4658      	mov	r0, fp
 8004792:	4661      	mov	r1, ip
 8004794:	f7fb fd7c 	bl	8000290 <__aeabi_uldivmod>
            break;
 8004798:	e7da      	b.n	8004750 <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800479a:	0850      	lsrs	r0, r2, #1
 800479c:	2100      	movs	r1, #0
 800479e:	2300      	movs	r3, #0
 80047a0:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80047a4:	f141 0100 	adc.w	r1, r1, #0
 80047a8:	f7fb fd72 	bl	8000290 <__aeabi_uldivmod>
            break;
 80047ac:	e7d0      	b.n	8004750 <UART_SetConfig+0x210>
            ret = HAL_ERROR;
 80047ae:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 80047b0:	2000      	movs	r0, #0
 80047b2:	e7cd      	b.n	8004750 <UART_SetConfig+0x210>
    switch (clocksource)
 80047b4:	2d08      	cmp	r5, #8
 80047b6:	d85c      	bhi.n	8004872 <UART_SetConfig+0x332>
 80047b8:	e8df f005 	tbb	[pc, r5]
 80047bc:	5b3c3118 	.word	0x5b3c3118
 80047c0:	5b5b5b47 	.word	0x5b5b5b47
 80047c4:	52          	.byte	0x52
 80047c5:	00          	.byte	0x00
 80047c6:	bf00      	nop
 80047c8:	efff69f3 	.word	0xefff69f3
 80047cc:	40008000 	.word	0x40008000
 80047d0:	40013800 	.word	0x40013800
 80047d4:	40004400 	.word	0x40004400
 80047d8:	40004800 	.word	0x40004800
 80047dc:	40004c00 	.word	0x40004c00
 80047e0:	00f42400 	.word	0x00f42400
 80047e4:	000ffcff 	.word	0x000ffcff
 80047e8:	f4240000 	.word	0xf4240000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80047ec:	f7fe fbf0 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 80047f0:	6862      	ldr	r2, [r4, #4]
 80047f2:	0853      	lsrs	r3, r2, #1
 80047f4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80047f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80047fc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80047fe:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004800:	f1a3 0110 	sub.w	r1, r3, #16
 8004804:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004808:	4291      	cmp	r1, r2
 800480a:	d87d      	bhi.n	8004908 <UART_SetConfig+0x3c8>
      brrtemp = usartdiv & 0xFFF0U;
 800480c:	b29a      	uxth	r2, r3
 800480e:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004812:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004816:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8004818:	6822      	ldr	r2, [r4, #0]
 800481a:	60d3      	str	r3, [r2, #12]
 800481c:	e03d      	b.n	800489a <UART_SetConfig+0x35a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800481e:	f7fe fbe7 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 8004822:	6862      	ldr	r2, [r4, #4]
 8004824:	0853      	lsrs	r3, r2, #1
 8004826:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800482a:	fbb3 f3f2 	udiv	r3, r3, r2
 800482e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004830:	2600      	movs	r6, #0
        break;
 8004832:	e7e5      	b.n	8004800 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004834:	6862      	ldr	r2, [r4, #4]
 8004836:	0853      	lsrs	r3, r2, #1
 8004838:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800483c:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004840:	fbb3 f3f2 	udiv	r3, r3, r2
 8004844:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004846:	2600      	movs	r6, #0
        break;
 8004848:	e7da      	b.n	8004800 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800484a:	f7fd ffa7 	bl	800279c <HAL_RCC_GetSysClockFreq>
 800484e:	6862      	ldr	r2, [r4, #4]
 8004850:	0853      	lsrs	r3, r2, #1
 8004852:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004856:	fbb3 f3f2 	udiv	r3, r3, r2
 800485a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800485c:	2600      	movs	r6, #0
        break;
 800485e:	e7cf      	b.n	8004800 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004860:	6862      	ldr	r2, [r4, #4]
 8004862:	0853      	lsrs	r3, r2, #1
 8004864:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004868:	fbb3 f3f2 	udiv	r3, r3, r2
 800486c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800486e:	2600      	movs	r6, #0
        break;
 8004870:	e7c6      	b.n	8004800 <UART_SetConfig+0x2c0>
        ret = HAL_ERROR;
 8004872:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004874:	2300      	movs	r3, #0
 8004876:	e7c3      	b.n	8004800 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004878:	f7fe fbaa 	bl	8002fd0 <HAL_RCC_GetPCLK1Freq>
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004882:	fbb0 f0f3 	udiv	r0, r0, r3
 8004886:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8004888:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800488a:	f1a0 0210 	sub.w	r2, r0, #16
 800488e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004892:	429a      	cmp	r2, r3
 8004894:	d83a      	bhi.n	800490c <UART_SetConfig+0x3cc>
      huart->Instance->BRR = usartdiv;
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800489e:	6663      	str	r3, [r4, #100]	; 0x64
}
 80048a0:	4630      	mov	r0, r6
 80048a2:	e8bd 8b78 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80048a6:	f7fe fba3 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 80048aa:	6863      	ldr	r3, [r4, #4]
 80048ac:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80048b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80048b4:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80048b6:	2600      	movs	r6, #0
        break;
 80048b8:	e7e7      	b.n	800488a <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	0858      	lsrs	r0, r3, #1
 80048be:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 80048c2:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 80048c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80048ca:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80048cc:	2600      	movs	r6, #0
        break;
 80048ce:	e7dc      	b.n	800488a <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80048d0:	f7fd ff64 	bl	800279c <HAL_RCC_GetSysClockFreq>
 80048d4:	6863      	ldr	r3, [r4, #4]
 80048d6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80048da:	fbb0 f0f3 	udiv	r0, r0, r3
 80048de:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80048e0:	2600      	movs	r6, #0
        break;
 80048e2:	e7d2      	b.n	800488a <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80048e4:	6863      	ldr	r3, [r4, #4]
 80048e6:	0858      	lsrs	r0, r3, #1
 80048e8:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80048ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80048f0:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80048f2:	2600      	movs	r6, #0
        break;
 80048f4:	e7c9      	b.n	800488a <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 80048f6:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 80048f8:	2000      	movs	r0, #0
 80048fa:	e7c6      	b.n	800488a <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 80048fc:	2601      	movs	r6, #1
 80048fe:	e7cc      	b.n	800489a <UART_SetConfig+0x35a>
 8004900:	2601      	movs	r6, #1
 8004902:	e7ca      	b.n	800489a <UART_SetConfig+0x35a>
          ret = HAL_ERROR;
 8004904:	2601      	movs	r6, #1
 8004906:	e7c8      	b.n	800489a <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 8004908:	2601      	movs	r6, #1
 800490a:	e7c6      	b.n	800489a <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 800490c:	2601      	movs	r6, #1
 800490e:	e7c4      	b.n	800489a <UART_SetConfig+0x35a>

08004910 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004910:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004912:	f013 0f01 	tst.w	r3, #1
 8004916:	d006      	beq.n	8004926 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004918:	6802      	ldr	r2, [r0, #0]
 800491a:	6853      	ldr	r3, [r2, #4]
 800491c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004920:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004922:	430b      	orrs	r3, r1
 8004924:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004926:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004928:	f013 0f02 	tst.w	r3, #2
 800492c:	d006      	beq.n	800493c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800492e:	6802      	ldr	r2, [r0, #0]
 8004930:	6853      	ldr	r3, [r2, #4]
 8004932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004936:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004938:	430b      	orrs	r3, r1
 800493a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800493c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800493e:	f013 0f04 	tst.w	r3, #4
 8004942:	d006      	beq.n	8004952 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004944:	6802      	ldr	r2, [r0, #0]
 8004946:	6853      	ldr	r3, [r2, #4]
 8004948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800494e:	430b      	orrs	r3, r1
 8004950:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004952:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004954:	f013 0f08 	tst.w	r3, #8
 8004958:	d006      	beq.n	8004968 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800495a:	6802      	ldr	r2, [r0, #0]
 800495c:	6853      	ldr	r3, [r2, #4]
 800495e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004962:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004964:	430b      	orrs	r3, r1
 8004966:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004968:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800496a:	f013 0f10 	tst.w	r3, #16
 800496e:	d006      	beq.n	800497e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004970:	6802      	ldr	r2, [r0, #0]
 8004972:	6893      	ldr	r3, [r2, #8]
 8004974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004978:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800497a:	430b      	orrs	r3, r1
 800497c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800497e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004980:	f013 0f20 	tst.w	r3, #32
 8004984:	d006      	beq.n	8004994 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004986:	6802      	ldr	r2, [r0, #0]
 8004988:	6893      	ldr	r3, [r2, #8]
 800498a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800498e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004990:	430b      	orrs	r3, r1
 8004992:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004994:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004996:	f013 0f40 	tst.w	r3, #64	; 0x40
 800499a:	d00a      	beq.n	80049b2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800499c:	6802      	ldr	r2, [r0, #0]
 800499e:	6853      	ldr	r3, [r2, #4]
 80049a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80049a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80049ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b0:	d00b      	beq.n	80049ca <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049b8:	d006      	beq.n	80049c8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049ba:	6802      	ldr	r2, [r0, #0]
 80049bc:	6853      	ldr	r3, [r2, #4]
 80049be:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80049c2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6053      	str	r3, [r2, #4]
 80049c8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049ca:	6802      	ldr	r2, [r0, #0]
 80049cc:	6853      	ldr	r3, [r2, #4]
 80049ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80049d2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6053      	str	r3, [r2, #4]
 80049d8:	e7eb      	b.n	80049b2 <UART_AdvFeatureConfig+0xa2>

080049da <UART_WaitOnFlagUntilTimeout>:
{
 80049da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049de:	4605      	mov	r5, r0
 80049e0:	460f      	mov	r7, r1
 80049e2:	4616      	mov	r6, r2
 80049e4:	4698      	mov	r8, r3
 80049e6:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	ea37 0303 	bics.w	r3, r7, r3
 80049f0:	bf0c      	ite	eq
 80049f2:	2301      	moveq	r3, #1
 80049f4:	2300      	movne	r3, #0
 80049f6:	42b3      	cmp	r3, r6
 80049f8:	d11e      	bne.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80049fa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80049fe:	d0f3      	beq.n	80049e8 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a00:	b12c      	cbz	r4, 8004a0e <UART_WaitOnFlagUntilTimeout+0x34>
 8004a02:	f7fd fcb5 	bl	8002370 <HAL_GetTick>
 8004a06:	eba0 0008 	sub.w	r0, r0, r8
 8004a0a:	4284      	cmp	r4, r0
 8004a0c:	d2ec      	bcs.n	80049e8 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a0e:	682a      	ldr	r2, [r5, #0]
 8004a10:	6813      	ldr	r3, [r2, #0]
 8004a12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a16:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a18:	682a      	ldr	r2, [r5, #0]
 8004a1a:	6893      	ldr	r3, [r2, #8]
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004a22:	2320      	movs	r3, #32
 8004a24:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8004a28:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8004a32:	2003      	movs	r0, #3
 8004a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8004a38:	2000      	movs	r0, #0
}
 8004a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004a3e <UART_CheckIdleState>:
{
 8004a3e:	b530      	push	{r4, r5, lr}
 8004a40:	b083      	sub	sp, #12
 8004a42:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	6743      	str	r3, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8004a48:	f7fd fc92 	bl	8002370 <HAL_GetTick>
 8004a4c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f013 0f08 	tst.w	r3, #8
 8004a56:	d10e      	bne.n	8004a76 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f013 0f04 	tst.w	r3, #4
 8004a60:	d117      	bne.n	8004a92 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8004a62:	2320      	movs	r3, #32
 8004a64:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8004a68:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8004a72:	b003      	add	sp, #12
 8004a74:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7ff ffa8 	bl	80049da <UART_WaitOnFlagUntilTimeout>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d0e4      	beq.n	8004a58 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004a8e:	2003      	movs	r0, #3
 8004a90:	e7ef      	b.n	8004a72 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	462b      	mov	r3, r5
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7ff ff9a 	bl	80049da <UART_WaitOnFlagUntilTimeout>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d0db      	beq.n	8004a62 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8004aaa:	2003      	movs	r0, #3
 8004aac:	e7e1      	b.n	8004a72 <UART_CheckIdleState+0x34>

08004aae <HAL_UART_Init>:
  if (huart == NULL)
 8004aae:	b378      	cbz	r0, 8004b10 <HAL_UART_Init+0x62>
{
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8004ab8:	b30b      	cbz	r3, 8004afe <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004aba:	2324      	movs	r3, #36	; 0x24
 8004abc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8004ac0:	6822      	ldr	r2, [r4, #0]
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7ff fd38 	bl	8004540 <UART_SetConfig>
 8004ad0:	2801      	cmp	r0, #1
 8004ad2:	d01f      	beq.n	8004b14 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ad6:	b9bb      	cbnz	r3, 8004b08 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	6853      	ldr	r3, [r2, #4]
 8004adc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004ae0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	6893      	ldr	r3, [r2, #8]
 8004ae6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004aea:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004aec:	6822      	ldr	r2, [r4, #0]
 8004aee:	6813      	ldr	r3, [r2, #0]
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004af6:	4620      	mov	r0, r4
 8004af8:	f7ff ffa1 	bl	8004a3e <UART_CheckIdleState>
 8004afc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004afe:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8004b02:	f7fd fa81 	bl	8002008 <HAL_UART_MspInit>
 8004b06:	e7d8      	b.n	8004aba <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f7ff ff01 	bl	8004910 <UART_AdvFeatureConfig>
 8004b0e:	e7e3      	b.n	8004ad8 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8004b10:	2001      	movs	r0, #1
 8004b12:	4770      	bx	lr
}
 8004b14:	bd10      	pop	{r4, pc}

08004b16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b16:	4770      	bx	lr

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4e0d      	ldr	r6, [pc, #52]	; (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1ba4      	subs	r4, r4, r6
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2500      	movs	r5, #0
 8004b24:	42a5      	cmp	r5, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4e0b      	ldr	r6, [pc, #44]	; (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	; (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f000 fc42 	bl	80053b4 <_init>
 8004b30:	1ba4      	subs	r4, r4, r6
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2500      	movs	r5, #0
 8004b36:	42a5      	cmp	r5, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b40:	4798      	blx	r3
 8004b42:	3501      	adds	r5, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b4a:	4798      	blx	r3
 8004b4c:	3501      	adds	r5, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	080058bc 	.word	0x080058bc
 8004b54:	080058bc 	.word	0x080058bc
 8004b58:	080058bc 	.word	0x080058bc
 8004b5c:	080058c0 	.word	0x080058c0

08004b60 <memcpy>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	1e43      	subs	r3, r0, #1
 8004b64:	440a      	add	r2, r1
 8004b66:	4291      	cmp	r1, r2
 8004b68:	d100      	bne.n	8004b6c <memcpy+0xc>
 8004b6a:	bd10      	pop	{r4, pc}
 8004b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b74:	e7f7      	b.n	8004b66 <memcpy+0x6>

08004b76 <_vsiprintf_r>:
 8004b76:	b510      	push	{r4, lr}
 8004b78:	b09a      	sub	sp, #104	; 0x68
 8004b7a:	f44f 7402 	mov.w	r4, #520	; 0x208
 8004b7e:	9100      	str	r1, [sp, #0]
 8004b80:	9104      	str	r1, [sp, #16]
 8004b82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b86:	9102      	str	r1, [sp, #8]
 8004b88:	9105      	str	r1, [sp, #20]
 8004b8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b8e:	f8ad 100e 	strh.w	r1, [sp, #14]
 8004b92:	4669      	mov	r1, sp
 8004b94:	f8ad 400c 	strh.w	r4, [sp, #12]
 8004b98:	f000 f86c 	bl	8004c74 <_svfiprintf_r>
 8004b9c:	9b00      	ldr	r3, [sp, #0]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	b01a      	add	sp, #104	; 0x68
 8004ba4:	bd10      	pop	{r4, pc}
	...

08004ba8 <vsiprintf>:
 8004ba8:	4613      	mov	r3, r2
 8004baa:	460a      	mov	r2, r1
 8004bac:	4601      	mov	r1, r0
 8004bae:	4802      	ldr	r0, [pc, #8]	; (8004bb8 <vsiprintf+0x10>)
 8004bb0:	6800      	ldr	r0, [r0, #0]
 8004bb2:	f7ff bfe0 	b.w	8004b76 <_vsiprintf_r>
 8004bb6:	bf00      	nop
 8004bb8:	20000094 	.word	0x20000094

08004bbc <__ssputs_r>:
 8004bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bc0:	688e      	ldr	r6, [r1, #8]
 8004bc2:	429e      	cmp	r6, r3
 8004bc4:	4682      	mov	sl, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	4691      	mov	r9, r2
 8004bca:	4698      	mov	r8, r3
 8004bcc:	d835      	bhi.n	8004c3a <__ssputs_r+0x7e>
 8004bce:	898a      	ldrh	r2, [r1, #12]
 8004bd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bd4:	d031      	beq.n	8004c3a <__ssputs_r+0x7e>
 8004bd6:	6825      	ldr	r5, [r4, #0]
 8004bd8:	6909      	ldr	r1, [r1, #16]
 8004bda:	1a6f      	subs	r7, r5, r1
 8004bdc:	6965      	ldr	r5, [r4, #20]
 8004bde:	2302      	movs	r3, #2
 8004be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004be4:	fb95 f5f3 	sdiv	r5, r5, r3
 8004be8:	f108 0301 	add.w	r3, r8, #1
 8004bec:	443b      	add	r3, r7
 8004bee:	429d      	cmp	r5, r3
 8004bf0:	bf38      	it	cc
 8004bf2:	461d      	movcc	r5, r3
 8004bf4:	0553      	lsls	r3, r2, #21
 8004bf6:	d531      	bpl.n	8004c5c <__ssputs_r+0xa0>
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	f000 fb2d 	bl	8005258 <_malloc_r>
 8004bfe:	4606      	mov	r6, r0
 8004c00:	b950      	cbnz	r0, 8004c18 <__ssputs_r+0x5c>
 8004c02:	230c      	movs	r3, #12
 8004c04:	f8ca 3000 	str.w	r3, [sl]
 8004c08:	89a3      	ldrh	r3, [r4, #12]
 8004c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	f04f 30ff 	mov.w	r0, #4294967295
 8004c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c18:	463a      	mov	r2, r7
 8004c1a:	6921      	ldr	r1, [r4, #16]
 8004c1c:	f7ff ffa0 	bl	8004b60 <memcpy>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2a:	81a3      	strh	r3, [r4, #12]
 8004c2c:	6126      	str	r6, [r4, #16]
 8004c2e:	6165      	str	r5, [r4, #20]
 8004c30:	443e      	add	r6, r7
 8004c32:	1bed      	subs	r5, r5, r7
 8004c34:	6026      	str	r6, [r4, #0]
 8004c36:	60a5      	str	r5, [r4, #8]
 8004c38:	4646      	mov	r6, r8
 8004c3a:	4546      	cmp	r6, r8
 8004c3c:	bf28      	it	cs
 8004c3e:	4646      	movcs	r6, r8
 8004c40:	4632      	mov	r2, r6
 8004c42:	4649      	mov	r1, r9
 8004c44:	6820      	ldr	r0, [r4, #0]
 8004c46:	f000 fa9f 	bl	8005188 <memmove>
 8004c4a:	68a3      	ldr	r3, [r4, #8]
 8004c4c:	1b9b      	subs	r3, r3, r6
 8004c4e:	60a3      	str	r3, [r4, #8]
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	441e      	add	r6, r3
 8004c54:	6026      	str	r6, [r4, #0]
 8004c56:	2000      	movs	r0, #0
 8004c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c5c:	462a      	mov	r2, r5
 8004c5e:	f000 fb59 	bl	8005314 <_realloc_r>
 8004c62:	4606      	mov	r6, r0
 8004c64:	2800      	cmp	r0, #0
 8004c66:	d1e1      	bne.n	8004c2c <__ssputs_r+0x70>
 8004c68:	6921      	ldr	r1, [r4, #16]
 8004c6a:	4650      	mov	r0, sl
 8004c6c:	f000 faa6 	bl	80051bc <_free_r>
 8004c70:	e7c7      	b.n	8004c02 <__ssputs_r+0x46>
	...

08004c74 <_svfiprintf_r>:
 8004c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c78:	b09d      	sub	sp, #116	; 0x74
 8004c7a:	4680      	mov	r8, r0
 8004c7c:	9303      	str	r3, [sp, #12]
 8004c7e:	898b      	ldrh	r3, [r1, #12]
 8004c80:	061c      	lsls	r4, r3, #24
 8004c82:	460d      	mov	r5, r1
 8004c84:	4616      	mov	r6, r2
 8004c86:	d50f      	bpl.n	8004ca8 <_svfiprintf_r+0x34>
 8004c88:	690b      	ldr	r3, [r1, #16]
 8004c8a:	b96b      	cbnz	r3, 8004ca8 <_svfiprintf_r+0x34>
 8004c8c:	2140      	movs	r1, #64	; 0x40
 8004c8e:	f000 fae3 	bl	8005258 <_malloc_r>
 8004c92:	6028      	str	r0, [r5, #0]
 8004c94:	6128      	str	r0, [r5, #16]
 8004c96:	b928      	cbnz	r0, 8004ca4 <_svfiprintf_r+0x30>
 8004c98:	230c      	movs	r3, #12
 8004c9a:	f8c8 3000 	str.w	r3, [r8]
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca2:	e0c5      	b.n	8004e30 <_svfiprintf_r+0x1bc>
 8004ca4:	2340      	movs	r3, #64	; 0x40
 8004ca6:	616b      	str	r3, [r5, #20]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9309      	str	r3, [sp, #36]	; 0x24
 8004cac:	2320      	movs	r3, #32
 8004cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cb2:	2330      	movs	r3, #48	; 0x30
 8004cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cb8:	f04f 0b01 	mov.w	fp, #1
 8004cbc:	4637      	mov	r7, r6
 8004cbe:	463c      	mov	r4, r7
 8004cc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d13c      	bne.n	8004d42 <_svfiprintf_r+0xce>
 8004cc8:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ccc:	d00b      	beq.n	8004ce6 <_svfiprintf_r+0x72>
 8004cce:	4653      	mov	r3, sl
 8004cd0:	4632      	mov	r2, r6
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4640      	mov	r0, r8
 8004cd6:	f7ff ff71 	bl	8004bbc <__ssputs_r>
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f000 80a3 	beq.w	8004e26 <_svfiprintf_r+0x1b2>
 8004ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce2:	4453      	add	r3, sl
 8004ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce6:	783b      	ldrb	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 809c 	beq.w	8004e26 <_svfiprintf_r+0x1b2>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf4:	9304      	str	r3, [sp, #16]
 8004cf6:	9307      	str	r3, [sp, #28]
 8004cf8:	9205      	str	r2, [sp, #20]
 8004cfa:	9306      	str	r3, [sp, #24]
 8004cfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d00:	931a      	str	r3, [sp, #104]	; 0x68
 8004d02:	2205      	movs	r2, #5
 8004d04:	7821      	ldrb	r1, [r4, #0]
 8004d06:	4850      	ldr	r0, [pc, #320]	; (8004e48 <_svfiprintf_r+0x1d4>)
 8004d08:	f7fb fa72 	bl	80001f0 <memchr>
 8004d0c:	1c67      	adds	r7, r4, #1
 8004d0e:	9b04      	ldr	r3, [sp, #16]
 8004d10:	b9d8      	cbnz	r0, 8004d4a <_svfiprintf_r+0xd6>
 8004d12:	06d9      	lsls	r1, r3, #27
 8004d14:	bf44      	itt	mi
 8004d16:	2220      	movmi	r2, #32
 8004d18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d1c:	071a      	lsls	r2, r3, #28
 8004d1e:	bf44      	itt	mi
 8004d20:	222b      	movmi	r2, #43	; 0x2b
 8004d22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d26:	7822      	ldrb	r2, [r4, #0]
 8004d28:	2a2a      	cmp	r2, #42	; 0x2a
 8004d2a:	d016      	beq.n	8004d5a <_svfiprintf_r+0xe6>
 8004d2c:	9a07      	ldr	r2, [sp, #28]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	200a      	movs	r0, #10
 8004d32:	4627      	mov	r7, r4
 8004d34:	3401      	adds	r4, #1
 8004d36:	783b      	ldrb	r3, [r7, #0]
 8004d38:	3b30      	subs	r3, #48	; 0x30
 8004d3a:	2b09      	cmp	r3, #9
 8004d3c:	d951      	bls.n	8004de2 <_svfiprintf_r+0x16e>
 8004d3e:	b1c9      	cbz	r1, 8004d74 <_svfiprintf_r+0x100>
 8004d40:	e011      	b.n	8004d66 <_svfiprintf_r+0xf2>
 8004d42:	2b25      	cmp	r3, #37	; 0x25
 8004d44:	d0c0      	beq.n	8004cc8 <_svfiprintf_r+0x54>
 8004d46:	4627      	mov	r7, r4
 8004d48:	e7b9      	b.n	8004cbe <_svfiprintf_r+0x4a>
 8004d4a:	4a3f      	ldr	r2, [pc, #252]	; (8004e48 <_svfiprintf_r+0x1d4>)
 8004d4c:	1a80      	subs	r0, r0, r2
 8004d4e:	fa0b f000 	lsl.w	r0, fp, r0
 8004d52:	4318      	orrs	r0, r3
 8004d54:	9004      	str	r0, [sp, #16]
 8004d56:	463c      	mov	r4, r7
 8004d58:	e7d3      	b.n	8004d02 <_svfiprintf_r+0x8e>
 8004d5a:	9a03      	ldr	r2, [sp, #12]
 8004d5c:	1d11      	adds	r1, r2, #4
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	9103      	str	r1, [sp, #12]
 8004d62:	2a00      	cmp	r2, #0
 8004d64:	db01      	blt.n	8004d6a <_svfiprintf_r+0xf6>
 8004d66:	9207      	str	r2, [sp, #28]
 8004d68:	e004      	b.n	8004d74 <_svfiprintf_r+0x100>
 8004d6a:	4252      	negs	r2, r2
 8004d6c:	f043 0302 	orr.w	r3, r3, #2
 8004d70:	9207      	str	r2, [sp, #28]
 8004d72:	9304      	str	r3, [sp, #16]
 8004d74:	783b      	ldrb	r3, [r7, #0]
 8004d76:	2b2e      	cmp	r3, #46	; 0x2e
 8004d78:	d10e      	bne.n	8004d98 <_svfiprintf_r+0x124>
 8004d7a:	787b      	ldrb	r3, [r7, #1]
 8004d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7e:	f107 0101 	add.w	r1, r7, #1
 8004d82:	d132      	bne.n	8004dea <_svfiprintf_r+0x176>
 8004d84:	9b03      	ldr	r3, [sp, #12]
 8004d86:	1d1a      	adds	r2, r3, #4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	9203      	str	r2, [sp, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bfb8      	it	lt
 8004d90:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d94:	3702      	adds	r7, #2
 8004d96:	9305      	str	r3, [sp, #20]
 8004d98:	4c2c      	ldr	r4, [pc, #176]	; (8004e4c <_svfiprintf_r+0x1d8>)
 8004d9a:	7839      	ldrb	r1, [r7, #0]
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7fb fa26 	bl	80001f0 <memchr>
 8004da4:	b138      	cbz	r0, 8004db6 <_svfiprintf_r+0x142>
 8004da6:	2340      	movs	r3, #64	; 0x40
 8004da8:	1b00      	subs	r0, r0, r4
 8004daa:	fa03 f000 	lsl.w	r0, r3, r0
 8004dae:	9b04      	ldr	r3, [sp, #16]
 8004db0:	4303      	orrs	r3, r0
 8004db2:	9304      	str	r3, [sp, #16]
 8004db4:	3701      	adds	r7, #1
 8004db6:	7839      	ldrb	r1, [r7, #0]
 8004db8:	4825      	ldr	r0, [pc, #148]	; (8004e50 <_svfiprintf_r+0x1dc>)
 8004dba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dbe:	2206      	movs	r2, #6
 8004dc0:	1c7e      	adds	r6, r7, #1
 8004dc2:	f7fb fa15 	bl	80001f0 <memchr>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d035      	beq.n	8004e36 <_svfiprintf_r+0x1c2>
 8004dca:	4b22      	ldr	r3, [pc, #136]	; (8004e54 <_svfiprintf_r+0x1e0>)
 8004dcc:	b9fb      	cbnz	r3, 8004e0e <_svfiprintf_r+0x19a>
 8004dce:	9b03      	ldr	r3, [sp, #12]
 8004dd0:	3307      	adds	r3, #7
 8004dd2:	f023 0307 	bic.w	r3, r3, #7
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	9303      	str	r3, [sp, #12]
 8004dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ddc:	444b      	add	r3, r9
 8004dde:	9309      	str	r3, [sp, #36]	; 0x24
 8004de0:	e76c      	b.n	8004cbc <_svfiprintf_r+0x48>
 8004de2:	fb00 3202 	mla	r2, r0, r2, r3
 8004de6:	2101      	movs	r1, #1
 8004de8:	e7a3      	b.n	8004d32 <_svfiprintf_r+0xbe>
 8004dea:	2300      	movs	r3, #0
 8004dec:	9305      	str	r3, [sp, #20]
 8004dee:	4618      	mov	r0, r3
 8004df0:	240a      	movs	r4, #10
 8004df2:	460f      	mov	r7, r1
 8004df4:	3101      	adds	r1, #1
 8004df6:	783a      	ldrb	r2, [r7, #0]
 8004df8:	3a30      	subs	r2, #48	; 0x30
 8004dfa:	2a09      	cmp	r2, #9
 8004dfc:	d903      	bls.n	8004e06 <_svfiprintf_r+0x192>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0ca      	beq.n	8004d98 <_svfiprintf_r+0x124>
 8004e02:	9005      	str	r0, [sp, #20]
 8004e04:	e7c8      	b.n	8004d98 <_svfiprintf_r+0x124>
 8004e06:	fb04 2000 	mla	r0, r4, r0, r2
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e7f1      	b.n	8004df2 <_svfiprintf_r+0x17e>
 8004e0e:	ab03      	add	r3, sp, #12
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	462a      	mov	r2, r5
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <_svfiprintf_r+0x1e4>)
 8004e16:	a904      	add	r1, sp, #16
 8004e18:	4640      	mov	r0, r8
 8004e1a:	f3af 8000 	nop.w
 8004e1e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004e22:	4681      	mov	r9, r0
 8004e24:	d1d9      	bne.n	8004dda <_svfiprintf_r+0x166>
 8004e26:	89ab      	ldrh	r3, [r5, #12]
 8004e28:	065b      	lsls	r3, r3, #25
 8004e2a:	f53f af38 	bmi.w	8004c9e <_svfiprintf_r+0x2a>
 8004e2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e30:	b01d      	add	sp, #116	; 0x74
 8004e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e36:	ab03      	add	r3, sp, #12
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	462a      	mov	r2, r5
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <_svfiprintf_r+0x1e4>)
 8004e3e:	a904      	add	r1, sp, #16
 8004e40:	4640      	mov	r0, r8
 8004e42:	f000 f881 	bl	8004f48 <_printf_i>
 8004e46:	e7ea      	b.n	8004e1e <_svfiprintf_r+0x1aa>
 8004e48:	08005880 	.word	0x08005880
 8004e4c:	08005886 	.word	0x08005886
 8004e50:	0800588a 	.word	0x0800588a
 8004e54:	00000000 	.word	0x00000000
 8004e58:	08004bbd 	.word	0x08004bbd

08004e5c <_printf_common>:
 8004e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	4691      	mov	r9, r2
 8004e62:	461f      	mov	r7, r3
 8004e64:	688a      	ldr	r2, [r1, #8]
 8004e66:	690b      	ldr	r3, [r1, #16]
 8004e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	bfb8      	it	lt
 8004e70:	4613      	movlt	r3, r2
 8004e72:	f8c9 3000 	str.w	r3, [r9]
 8004e76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	b112      	cbz	r2, 8004e86 <_printf_common+0x2a>
 8004e80:	3301      	adds	r3, #1
 8004e82:	f8c9 3000 	str.w	r3, [r9]
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	0699      	lsls	r1, r3, #26
 8004e8a:	bf42      	ittt	mi
 8004e8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e90:	3302      	addmi	r3, #2
 8004e92:	f8c9 3000 	strmi.w	r3, [r9]
 8004e96:	6825      	ldr	r5, [r4, #0]
 8004e98:	f015 0506 	ands.w	r5, r5, #6
 8004e9c:	d107      	bne.n	8004eae <_printf_common+0x52>
 8004e9e:	f104 0a19 	add.w	sl, r4, #25
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	429d      	cmp	r5, r3
 8004eac:	db29      	blt.n	8004f02 <_printf_common+0xa6>
 8004eae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	3300      	adds	r3, #0
 8004eb6:	bf18      	it	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	0692      	lsls	r2, r2, #26
 8004ebc:	d42e      	bmi.n	8004f1c <_printf_common+0xc0>
 8004ebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec2:	4639      	mov	r1, r7
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	47c0      	blx	r8
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d021      	beq.n	8004f10 <_printf_common+0xb4>
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	68e5      	ldr	r5, [r4, #12]
 8004ed0:	f8d9 2000 	ldr.w	r2, [r9]
 8004ed4:	f003 0306 	and.w	r3, r3, #6
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	bf08      	it	eq
 8004edc:	1aad      	subeq	r5, r5, r2
 8004ede:	68a3      	ldr	r3, [r4, #8]
 8004ee0:	6922      	ldr	r2, [r4, #16]
 8004ee2:	bf0c      	ite	eq
 8004ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee8:	2500      	movne	r5, #0
 8004eea:	4293      	cmp	r3, r2
 8004eec:	bfc4      	itt	gt
 8004eee:	1a9b      	subgt	r3, r3, r2
 8004ef0:	18ed      	addgt	r5, r5, r3
 8004ef2:	f04f 0900 	mov.w	r9, #0
 8004ef6:	341a      	adds	r4, #26
 8004ef8:	454d      	cmp	r5, r9
 8004efa:	d11b      	bne.n	8004f34 <_printf_common+0xd8>
 8004efc:	2000      	movs	r0, #0
 8004efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f02:	2301      	movs	r3, #1
 8004f04:	4652      	mov	r2, sl
 8004f06:	4639      	mov	r1, r7
 8004f08:	4630      	mov	r0, r6
 8004f0a:	47c0      	blx	r8
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d103      	bne.n	8004f18 <_printf_common+0xbc>
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f18:	3501      	adds	r5, #1
 8004f1a:	e7c2      	b.n	8004ea2 <_printf_common+0x46>
 8004f1c:	18e1      	adds	r1, r4, r3
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	2030      	movs	r0, #48	; 0x30
 8004f22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f26:	4422      	add	r2, r4
 8004f28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f30:	3302      	adds	r3, #2
 8004f32:	e7c4      	b.n	8004ebe <_printf_common+0x62>
 8004f34:	2301      	movs	r3, #1
 8004f36:	4622      	mov	r2, r4
 8004f38:	4639      	mov	r1, r7
 8004f3a:	4630      	mov	r0, r6
 8004f3c:	47c0      	blx	r8
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d0e6      	beq.n	8004f10 <_printf_common+0xb4>
 8004f42:	f109 0901 	add.w	r9, r9, #1
 8004f46:	e7d7      	b.n	8004ef8 <_printf_common+0x9c>

08004f48 <_printf_i>:
 8004f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f4c:	4617      	mov	r7, r2
 8004f4e:	7e0a      	ldrb	r2, [r1, #24]
 8004f50:	b085      	sub	sp, #20
 8004f52:	2a6e      	cmp	r2, #110	; 0x6e
 8004f54:	4698      	mov	r8, r3
 8004f56:	4606      	mov	r6, r0
 8004f58:	460c      	mov	r4, r1
 8004f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f5c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004f60:	f000 80bc 	beq.w	80050dc <_printf_i+0x194>
 8004f64:	d81a      	bhi.n	8004f9c <_printf_i+0x54>
 8004f66:	2a63      	cmp	r2, #99	; 0x63
 8004f68:	d02e      	beq.n	8004fc8 <_printf_i+0x80>
 8004f6a:	d80a      	bhi.n	8004f82 <_printf_i+0x3a>
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	f000 80c8 	beq.w	8005102 <_printf_i+0x1ba>
 8004f72:	2a58      	cmp	r2, #88	; 0x58
 8004f74:	f000 808a 	beq.w	800508c <_printf_i+0x144>
 8004f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f7c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004f80:	e02a      	b.n	8004fd8 <_printf_i+0x90>
 8004f82:	2a64      	cmp	r2, #100	; 0x64
 8004f84:	d001      	beq.n	8004f8a <_printf_i+0x42>
 8004f86:	2a69      	cmp	r2, #105	; 0x69
 8004f88:	d1f6      	bne.n	8004f78 <_printf_i+0x30>
 8004f8a:	6821      	ldr	r1, [r4, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004f92:	d023      	beq.n	8004fdc <_printf_i+0x94>
 8004f94:	1d11      	adds	r1, r2, #4
 8004f96:	6019      	str	r1, [r3, #0]
 8004f98:	6813      	ldr	r3, [r2, #0]
 8004f9a:	e027      	b.n	8004fec <_printf_i+0xa4>
 8004f9c:	2a73      	cmp	r2, #115	; 0x73
 8004f9e:	f000 80b4 	beq.w	800510a <_printf_i+0x1c2>
 8004fa2:	d808      	bhi.n	8004fb6 <_printf_i+0x6e>
 8004fa4:	2a6f      	cmp	r2, #111	; 0x6f
 8004fa6:	d02a      	beq.n	8004ffe <_printf_i+0xb6>
 8004fa8:	2a70      	cmp	r2, #112	; 0x70
 8004faa:	d1e5      	bne.n	8004f78 <_printf_i+0x30>
 8004fac:	680a      	ldr	r2, [r1, #0]
 8004fae:	f042 0220 	orr.w	r2, r2, #32
 8004fb2:	600a      	str	r2, [r1, #0]
 8004fb4:	e003      	b.n	8004fbe <_printf_i+0x76>
 8004fb6:	2a75      	cmp	r2, #117	; 0x75
 8004fb8:	d021      	beq.n	8004ffe <_printf_i+0xb6>
 8004fba:	2a78      	cmp	r2, #120	; 0x78
 8004fbc:	d1dc      	bne.n	8004f78 <_printf_i+0x30>
 8004fbe:	2278      	movs	r2, #120	; 0x78
 8004fc0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8004fc4:	496e      	ldr	r1, [pc, #440]	; (8005180 <_printf_i+0x238>)
 8004fc6:	e064      	b.n	8005092 <_printf_i+0x14a>
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004fce:	1d11      	adds	r1, r2, #4
 8004fd0:	6019      	str	r1, [r3, #0]
 8004fd2:	6813      	ldr	r3, [r2, #0]
 8004fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0a3      	b.n	8005124 <_printf_i+0x1dc>
 8004fdc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004fe0:	f102 0104 	add.w	r1, r2, #4
 8004fe4:	6019      	str	r1, [r3, #0]
 8004fe6:	d0d7      	beq.n	8004f98 <_printf_i+0x50>
 8004fe8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	da03      	bge.n	8004ff8 <_printf_i+0xb0>
 8004ff0:	222d      	movs	r2, #45	; 0x2d
 8004ff2:	425b      	negs	r3, r3
 8004ff4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004ff8:	4962      	ldr	r1, [pc, #392]	; (8005184 <_printf_i+0x23c>)
 8004ffa:	220a      	movs	r2, #10
 8004ffc:	e017      	b.n	800502e <_printf_i+0xe6>
 8004ffe:	6820      	ldr	r0, [r4, #0]
 8005000:	6819      	ldr	r1, [r3, #0]
 8005002:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005006:	d003      	beq.n	8005010 <_printf_i+0xc8>
 8005008:	1d08      	adds	r0, r1, #4
 800500a:	6018      	str	r0, [r3, #0]
 800500c:	680b      	ldr	r3, [r1, #0]
 800500e:	e006      	b.n	800501e <_printf_i+0xd6>
 8005010:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005014:	f101 0004 	add.w	r0, r1, #4
 8005018:	6018      	str	r0, [r3, #0]
 800501a:	d0f7      	beq.n	800500c <_printf_i+0xc4>
 800501c:	880b      	ldrh	r3, [r1, #0]
 800501e:	4959      	ldr	r1, [pc, #356]	; (8005184 <_printf_i+0x23c>)
 8005020:	2a6f      	cmp	r2, #111	; 0x6f
 8005022:	bf14      	ite	ne
 8005024:	220a      	movne	r2, #10
 8005026:	2208      	moveq	r2, #8
 8005028:	2000      	movs	r0, #0
 800502a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800502e:	6865      	ldr	r5, [r4, #4]
 8005030:	60a5      	str	r5, [r4, #8]
 8005032:	2d00      	cmp	r5, #0
 8005034:	f2c0 809c 	blt.w	8005170 <_printf_i+0x228>
 8005038:	6820      	ldr	r0, [r4, #0]
 800503a:	f020 0004 	bic.w	r0, r0, #4
 800503e:	6020      	str	r0, [r4, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d13f      	bne.n	80050c4 <_printf_i+0x17c>
 8005044:	2d00      	cmp	r5, #0
 8005046:	f040 8095 	bne.w	8005174 <_printf_i+0x22c>
 800504a:	4675      	mov	r5, lr
 800504c:	2a08      	cmp	r2, #8
 800504e:	d10b      	bne.n	8005068 <_printf_i+0x120>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	07da      	lsls	r2, r3, #31
 8005054:	d508      	bpl.n	8005068 <_printf_i+0x120>
 8005056:	6923      	ldr	r3, [r4, #16]
 8005058:	6862      	ldr	r2, [r4, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	bfde      	ittt	le
 800505e:	2330      	movle	r3, #48	; 0x30
 8005060:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005064:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005068:	ebae 0305 	sub.w	r3, lr, r5
 800506c:	6123      	str	r3, [r4, #16]
 800506e:	f8cd 8000 	str.w	r8, [sp]
 8005072:	463b      	mov	r3, r7
 8005074:	aa03      	add	r2, sp, #12
 8005076:	4621      	mov	r1, r4
 8005078:	4630      	mov	r0, r6
 800507a:	f7ff feef 	bl	8004e5c <_printf_common>
 800507e:	3001      	adds	r0, #1
 8005080:	d155      	bne.n	800512e <_printf_i+0x1e6>
 8005082:	f04f 30ff 	mov.w	r0, #4294967295
 8005086:	b005      	add	sp, #20
 8005088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800508c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005090:	493c      	ldr	r1, [pc, #240]	; (8005184 <_printf_i+0x23c>)
 8005092:	6822      	ldr	r2, [r4, #0]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	f012 0f80 	tst.w	r2, #128	; 0x80
 800509a:	f100 0504 	add.w	r5, r0, #4
 800509e:	601d      	str	r5, [r3, #0]
 80050a0:	d001      	beq.n	80050a6 <_printf_i+0x15e>
 80050a2:	6803      	ldr	r3, [r0, #0]
 80050a4:	e002      	b.n	80050ac <_printf_i+0x164>
 80050a6:	0655      	lsls	r5, r2, #25
 80050a8:	d5fb      	bpl.n	80050a2 <_printf_i+0x15a>
 80050aa:	8803      	ldrh	r3, [r0, #0]
 80050ac:	07d0      	lsls	r0, r2, #31
 80050ae:	bf44      	itt	mi
 80050b0:	f042 0220 	orrmi.w	r2, r2, #32
 80050b4:	6022      	strmi	r2, [r4, #0]
 80050b6:	b91b      	cbnz	r3, 80050c0 <_printf_i+0x178>
 80050b8:	6822      	ldr	r2, [r4, #0]
 80050ba:	f022 0220 	bic.w	r2, r2, #32
 80050be:	6022      	str	r2, [r4, #0]
 80050c0:	2210      	movs	r2, #16
 80050c2:	e7b1      	b.n	8005028 <_printf_i+0xe0>
 80050c4:	4675      	mov	r5, lr
 80050c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80050ca:	fb02 3310 	mls	r3, r2, r0, r3
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80050d4:	4603      	mov	r3, r0
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d1f5      	bne.n	80050c6 <_printf_i+0x17e>
 80050da:	e7b7      	b.n	800504c <_printf_i+0x104>
 80050dc:	6808      	ldr	r0, [r1, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	6949      	ldr	r1, [r1, #20]
 80050e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80050e6:	d004      	beq.n	80050f2 <_printf_i+0x1aa>
 80050e8:	1d10      	adds	r0, r2, #4
 80050ea:	6018      	str	r0, [r3, #0]
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	6019      	str	r1, [r3, #0]
 80050f0:	e007      	b.n	8005102 <_printf_i+0x1ba>
 80050f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80050f6:	f102 0004 	add.w	r0, r2, #4
 80050fa:	6018      	str	r0, [r3, #0]
 80050fc:	6813      	ldr	r3, [r2, #0]
 80050fe:	d0f6      	beq.n	80050ee <_printf_i+0x1a6>
 8005100:	8019      	strh	r1, [r3, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	6123      	str	r3, [r4, #16]
 8005106:	4675      	mov	r5, lr
 8005108:	e7b1      	b.n	800506e <_printf_i+0x126>
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	1d11      	adds	r1, r2, #4
 800510e:	6019      	str	r1, [r3, #0]
 8005110:	6815      	ldr	r5, [r2, #0]
 8005112:	6862      	ldr	r2, [r4, #4]
 8005114:	2100      	movs	r1, #0
 8005116:	4628      	mov	r0, r5
 8005118:	f7fb f86a 	bl	80001f0 <memchr>
 800511c:	b108      	cbz	r0, 8005122 <_printf_i+0x1da>
 800511e:	1b40      	subs	r0, r0, r5
 8005120:	6060      	str	r0, [r4, #4]
 8005122:	6863      	ldr	r3, [r4, #4]
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	2300      	movs	r3, #0
 8005128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800512c:	e79f      	b.n	800506e <_printf_i+0x126>
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	462a      	mov	r2, r5
 8005132:	4639      	mov	r1, r7
 8005134:	4630      	mov	r0, r6
 8005136:	47c0      	blx	r8
 8005138:	3001      	adds	r0, #1
 800513a:	d0a2      	beq.n	8005082 <_printf_i+0x13a>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	079b      	lsls	r3, r3, #30
 8005140:	d507      	bpl.n	8005152 <_printf_i+0x20a>
 8005142:	2500      	movs	r5, #0
 8005144:	f104 0919 	add.w	r9, r4, #25
 8005148:	68e3      	ldr	r3, [r4, #12]
 800514a:	9a03      	ldr	r2, [sp, #12]
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	429d      	cmp	r5, r3
 8005150:	db05      	blt.n	800515e <_printf_i+0x216>
 8005152:	68e0      	ldr	r0, [r4, #12]
 8005154:	9b03      	ldr	r3, [sp, #12]
 8005156:	4298      	cmp	r0, r3
 8005158:	bfb8      	it	lt
 800515a:	4618      	movlt	r0, r3
 800515c:	e793      	b.n	8005086 <_printf_i+0x13e>
 800515e:	2301      	movs	r3, #1
 8005160:	464a      	mov	r2, r9
 8005162:	4639      	mov	r1, r7
 8005164:	4630      	mov	r0, r6
 8005166:	47c0      	blx	r8
 8005168:	3001      	adds	r0, #1
 800516a:	d08a      	beq.n	8005082 <_printf_i+0x13a>
 800516c:	3501      	adds	r5, #1
 800516e:	e7eb      	b.n	8005148 <_printf_i+0x200>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1a7      	bne.n	80050c4 <_printf_i+0x17c>
 8005174:	780b      	ldrb	r3, [r1, #0]
 8005176:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800517a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800517e:	e765      	b.n	800504c <_printf_i+0x104>
 8005180:	080058a2 	.word	0x080058a2
 8005184:	08005891 	.word	0x08005891

08005188 <memmove>:
 8005188:	4288      	cmp	r0, r1
 800518a:	b510      	push	{r4, lr}
 800518c:	eb01 0302 	add.w	r3, r1, r2
 8005190:	d803      	bhi.n	800519a <memmove+0x12>
 8005192:	1e42      	subs	r2, r0, #1
 8005194:	4299      	cmp	r1, r3
 8005196:	d10c      	bne.n	80051b2 <memmove+0x2a>
 8005198:	bd10      	pop	{r4, pc}
 800519a:	4298      	cmp	r0, r3
 800519c:	d2f9      	bcs.n	8005192 <memmove+0xa>
 800519e:	1881      	adds	r1, r0, r2
 80051a0:	1ad2      	subs	r2, r2, r3
 80051a2:	42d3      	cmn	r3, r2
 80051a4:	d100      	bne.n	80051a8 <memmove+0x20>
 80051a6:	bd10      	pop	{r4, pc}
 80051a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80051b0:	e7f7      	b.n	80051a2 <memmove+0x1a>
 80051b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80051ba:	e7eb      	b.n	8005194 <memmove+0xc>

080051bc <_free_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4605      	mov	r5, r0
 80051c0:	2900      	cmp	r1, #0
 80051c2:	d045      	beq.n	8005250 <_free_r+0x94>
 80051c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c8:	1f0c      	subs	r4, r1, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfb8      	it	lt
 80051ce:	18e4      	addlt	r4, r4, r3
 80051d0:	f000 f8d6 	bl	8005380 <__malloc_lock>
 80051d4:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <_free_r+0x98>)
 80051d6:	6813      	ldr	r3, [r2, #0]
 80051d8:	4610      	mov	r0, r2
 80051da:	b933      	cbnz	r3, 80051ea <_free_r+0x2e>
 80051dc:	6063      	str	r3, [r4, #4]
 80051de:	6014      	str	r4, [r2, #0]
 80051e0:	4628      	mov	r0, r5
 80051e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051e6:	f000 b8cc 	b.w	8005382 <__malloc_unlock>
 80051ea:	42a3      	cmp	r3, r4
 80051ec:	d90c      	bls.n	8005208 <_free_r+0x4c>
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	1862      	adds	r2, r4, r1
 80051f2:	4293      	cmp	r3, r2
 80051f4:	bf04      	itt	eq
 80051f6:	681a      	ldreq	r2, [r3, #0]
 80051f8:	685b      	ldreq	r3, [r3, #4]
 80051fa:	6063      	str	r3, [r4, #4]
 80051fc:	bf04      	itt	eq
 80051fe:	1852      	addeq	r2, r2, r1
 8005200:	6022      	streq	r2, [r4, #0]
 8005202:	6004      	str	r4, [r0, #0]
 8005204:	e7ec      	b.n	80051e0 <_free_r+0x24>
 8005206:	4613      	mov	r3, r2
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	b10a      	cbz	r2, 8005210 <_free_r+0x54>
 800520c:	42a2      	cmp	r2, r4
 800520e:	d9fa      	bls.n	8005206 <_free_r+0x4a>
 8005210:	6819      	ldr	r1, [r3, #0]
 8005212:	1858      	adds	r0, r3, r1
 8005214:	42a0      	cmp	r0, r4
 8005216:	d10b      	bne.n	8005230 <_free_r+0x74>
 8005218:	6820      	ldr	r0, [r4, #0]
 800521a:	4401      	add	r1, r0
 800521c:	1858      	adds	r0, r3, r1
 800521e:	4282      	cmp	r2, r0
 8005220:	6019      	str	r1, [r3, #0]
 8005222:	d1dd      	bne.n	80051e0 <_free_r+0x24>
 8005224:	6810      	ldr	r0, [r2, #0]
 8005226:	6852      	ldr	r2, [r2, #4]
 8005228:	605a      	str	r2, [r3, #4]
 800522a:	4401      	add	r1, r0
 800522c:	6019      	str	r1, [r3, #0]
 800522e:	e7d7      	b.n	80051e0 <_free_r+0x24>
 8005230:	d902      	bls.n	8005238 <_free_r+0x7c>
 8005232:	230c      	movs	r3, #12
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	e7d3      	b.n	80051e0 <_free_r+0x24>
 8005238:	6820      	ldr	r0, [r4, #0]
 800523a:	1821      	adds	r1, r4, r0
 800523c:	428a      	cmp	r2, r1
 800523e:	bf04      	itt	eq
 8005240:	6811      	ldreq	r1, [r2, #0]
 8005242:	6852      	ldreq	r2, [r2, #4]
 8005244:	6062      	str	r2, [r4, #4]
 8005246:	bf04      	itt	eq
 8005248:	1809      	addeq	r1, r1, r0
 800524a:	6021      	streq	r1, [r4, #0]
 800524c:	605c      	str	r4, [r3, #4]
 800524e:	e7c7      	b.n	80051e0 <_free_r+0x24>
 8005250:	bd38      	pop	{r3, r4, r5, pc}
 8005252:	bf00      	nop
 8005254:	200002ac 	.word	0x200002ac

08005258 <_malloc_r>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	1ccd      	adds	r5, r1, #3
 800525c:	f025 0503 	bic.w	r5, r5, #3
 8005260:	3508      	adds	r5, #8
 8005262:	2d0c      	cmp	r5, #12
 8005264:	bf38      	it	cc
 8005266:	250c      	movcc	r5, #12
 8005268:	2d00      	cmp	r5, #0
 800526a:	4606      	mov	r6, r0
 800526c:	db01      	blt.n	8005272 <_malloc_r+0x1a>
 800526e:	42a9      	cmp	r1, r5
 8005270:	d903      	bls.n	800527a <_malloc_r+0x22>
 8005272:	230c      	movs	r3, #12
 8005274:	6033      	str	r3, [r6, #0]
 8005276:	2000      	movs	r0, #0
 8005278:	bd70      	pop	{r4, r5, r6, pc}
 800527a:	f000 f881 	bl	8005380 <__malloc_lock>
 800527e:	4a23      	ldr	r2, [pc, #140]	; (800530c <_malloc_r+0xb4>)
 8005280:	6814      	ldr	r4, [r2, #0]
 8005282:	4621      	mov	r1, r4
 8005284:	b991      	cbnz	r1, 80052ac <_malloc_r+0x54>
 8005286:	4c22      	ldr	r4, [pc, #136]	; (8005310 <_malloc_r+0xb8>)
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	b91b      	cbnz	r3, 8005294 <_malloc_r+0x3c>
 800528c:	4630      	mov	r0, r6
 800528e:	f000 f867 	bl	8005360 <_sbrk_r>
 8005292:	6020      	str	r0, [r4, #0]
 8005294:	4629      	mov	r1, r5
 8005296:	4630      	mov	r0, r6
 8005298:	f000 f862 	bl	8005360 <_sbrk_r>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d126      	bne.n	80052ee <_malloc_r+0x96>
 80052a0:	230c      	movs	r3, #12
 80052a2:	6033      	str	r3, [r6, #0]
 80052a4:	4630      	mov	r0, r6
 80052a6:	f000 f86c 	bl	8005382 <__malloc_unlock>
 80052aa:	e7e4      	b.n	8005276 <_malloc_r+0x1e>
 80052ac:	680b      	ldr	r3, [r1, #0]
 80052ae:	1b5b      	subs	r3, r3, r5
 80052b0:	d41a      	bmi.n	80052e8 <_malloc_r+0x90>
 80052b2:	2b0b      	cmp	r3, #11
 80052b4:	d90f      	bls.n	80052d6 <_malloc_r+0x7e>
 80052b6:	600b      	str	r3, [r1, #0]
 80052b8:	50cd      	str	r5, [r1, r3]
 80052ba:	18cc      	adds	r4, r1, r3
 80052bc:	4630      	mov	r0, r6
 80052be:	f000 f860 	bl	8005382 <__malloc_unlock>
 80052c2:	f104 000b 	add.w	r0, r4, #11
 80052c6:	1d23      	adds	r3, r4, #4
 80052c8:	f020 0007 	bic.w	r0, r0, #7
 80052cc:	1ac3      	subs	r3, r0, r3
 80052ce:	d01b      	beq.n	8005308 <_malloc_r+0xb0>
 80052d0:	425a      	negs	r2, r3
 80052d2:	50e2      	str	r2, [r4, r3]
 80052d4:	bd70      	pop	{r4, r5, r6, pc}
 80052d6:	428c      	cmp	r4, r1
 80052d8:	bf0d      	iteet	eq
 80052da:	6863      	ldreq	r3, [r4, #4]
 80052dc:	684b      	ldrne	r3, [r1, #4]
 80052de:	6063      	strne	r3, [r4, #4]
 80052e0:	6013      	streq	r3, [r2, #0]
 80052e2:	bf18      	it	ne
 80052e4:	460c      	movne	r4, r1
 80052e6:	e7e9      	b.n	80052bc <_malloc_r+0x64>
 80052e8:	460c      	mov	r4, r1
 80052ea:	6849      	ldr	r1, [r1, #4]
 80052ec:	e7ca      	b.n	8005284 <_malloc_r+0x2c>
 80052ee:	1cc4      	adds	r4, r0, #3
 80052f0:	f024 0403 	bic.w	r4, r4, #3
 80052f4:	42a0      	cmp	r0, r4
 80052f6:	d005      	beq.n	8005304 <_malloc_r+0xac>
 80052f8:	1a21      	subs	r1, r4, r0
 80052fa:	4630      	mov	r0, r6
 80052fc:	f000 f830 	bl	8005360 <_sbrk_r>
 8005300:	3001      	adds	r0, #1
 8005302:	d0cd      	beq.n	80052a0 <_malloc_r+0x48>
 8005304:	6025      	str	r5, [r4, #0]
 8005306:	e7d9      	b.n	80052bc <_malloc_r+0x64>
 8005308:	bd70      	pop	{r4, r5, r6, pc}
 800530a:	bf00      	nop
 800530c:	200002ac 	.word	0x200002ac
 8005310:	200002b0 	.word	0x200002b0

08005314 <_realloc_r>:
 8005314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005316:	4607      	mov	r7, r0
 8005318:	4614      	mov	r4, r2
 800531a:	460e      	mov	r6, r1
 800531c:	b921      	cbnz	r1, 8005328 <_realloc_r+0x14>
 800531e:	4611      	mov	r1, r2
 8005320:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005324:	f7ff bf98 	b.w	8005258 <_malloc_r>
 8005328:	b922      	cbnz	r2, 8005334 <_realloc_r+0x20>
 800532a:	f7ff ff47 	bl	80051bc <_free_r>
 800532e:	4625      	mov	r5, r4
 8005330:	4628      	mov	r0, r5
 8005332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005334:	f000 f826 	bl	8005384 <_malloc_usable_size_r>
 8005338:	4284      	cmp	r4, r0
 800533a:	d90f      	bls.n	800535c <_realloc_r+0x48>
 800533c:	4621      	mov	r1, r4
 800533e:	4638      	mov	r0, r7
 8005340:	f7ff ff8a 	bl	8005258 <_malloc_r>
 8005344:	4605      	mov	r5, r0
 8005346:	2800      	cmp	r0, #0
 8005348:	d0f2      	beq.n	8005330 <_realloc_r+0x1c>
 800534a:	4631      	mov	r1, r6
 800534c:	4622      	mov	r2, r4
 800534e:	f7ff fc07 	bl	8004b60 <memcpy>
 8005352:	4631      	mov	r1, r6
 8005354:	4638      	mov	r0, r7
 8005356:	f7ff ff31 	bl	80051bc <_free_r>
 800535a:	e7e9      	b.n	8005330 <_realloc_r+0x1c>
 800535c:	4635      	mov	r5, r6
 800535e:	e7e7      	b.n	8005330 <_realloc_r+0x1c>

08005360 <_sbrk_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4c06      	ldr	r4, [pc, #24]	; (800537c <_sbrk_r+0x1c>)
 8005364:	2300      	movs	r3, #0
 8005366:	4605      	mov	r5, r0
 8005368:	4608      	mov	r0, r1
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	f000 f814 	bl	8005398 <_sbrk>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_sbrk_r+0x1a>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	b103      	cbz	r3, 800537a <_sbrk_r+0x1a>
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	200009a4 	.word	0x200009a4

08005380 <__malloc_lock>:
 8005380:	4770      	bx	lr

08005382 <__malloc_unlock>:
 8005382:	4770      	bx	lr

08005384 <_malloc_usable_size_r>:
 8005384:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005388:	2800      	cmp	r0, #0
 800538a:	f1a0 0004 	sub.w	r0, r0, #4
 800538e:	bfbc      	itt	lt
 8005390:	580b      	ldrlt	r3, [r1, r0]
 8005392:	18c0      	addlt	r0, r0, r3
 8005394:	4770      	bx	lr
	...

08005398 <_sbrk>:
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <_sbrk+0x14>)
 800539a:	6819      	ldr	r1, [r3, #0]
 800539c:	4602      	mov	r2, r0
 800539e:	b909      	cbnz	r1, 80053a4 <_sbrk+0xc>
 80053a0:	4903      	ldr	r1, [pc, #12]	; (80053b0 <_sbrk+0x18>)
 80053a2:	6019      	str	r1, [r3, #0]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	4402      	add	r2, r0
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	4770      	bx	lr
 80053ac:	200002b4 	.word	0x200002b4
 80053b0:	200009a8 	.word	0x200009a8

080053b4 <_init>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr

080053c0 <_fini>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr
