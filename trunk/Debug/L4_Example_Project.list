
L4_Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003094  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08003228  08003228  00013228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003404  08003404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003408  08003408  00013408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000003c  20000000  0800340c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  8 .bss          000002e0  2000003c  2000003c  0002003c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  2000031c  2000031c  0002003c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020d12  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004c7b  00000000  00000000  00040d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f50  00000000  00000000  00045a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e00  00000000  00000000  00046950  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000a3f5  00000000  00000000  00047750  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000056b1  00000000  00000000  00051b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000571f6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002348  00000000  00000000  00057274  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000070c9  00000000  00000000  000595bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003210 	.word	0x08003210

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	08003210 	.word	0x08003210

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
 *
 * @details Initializes applications.
 * @details Call system application to execute active applications.
 ****************************************************************************/
int  main()
{
 80004e4:	b508      	push	{r3, lr}
	/* Call to initial specific platform configuration */
    systemPreConfiguration();
 80004e6:	f000 feb2 	bl	800124e <systemPreConfiguration>

    GPIOInit();
 80004ea:	f000 fd25 	bl	8000f38 <GPIOInit>

    stm32L4Init();
 80004ee:	f000 fe9b 	bl	8001228 <stm32L4Init>

    interruptsInit();
 80004f2:	f000 fd4b 	bl	8000f8c <interruptsInit>
    interruptsStart();
 80004f6:	f000 fd61 	bl	8000fbc <interruptsStart>

    uartInit();
 80004fa:	f000 ff81 	bl	8001400 <uartInit>
    uartStart();
 80004fe:	f000 ffb9 	bl	8001474 <uartStart>

    FlashInit();
 8000502:	f000 fb67 	bl	8000bd4 <FlashInit>

    SwTimerInit();
 8000506:	f000 facd 	bl	8000aa4 <SwTimerInit>

	/* Applications Initialization */
    SchedulerInit();
 800050a:	f000 f975 	bl	80007f8 <SchedulerInit>

    while (TRUE)
    {
        SchedulerNextSystemProcess();
 800050e:	f000 fa21 	bl	8000954 <SchedulerNextSystemProcess>
 8000512:	e7fc      	b.n	800050e <main+0x2a>

08000514 <initSystemApp>:
 *
 * @details Initializes HREG and SREG layers.
 * @details Initializes all applications
 ****************************************************************************/
void initSystemApp( void )
{
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
    requestPowerState = POWER_STATE_NO_REQUEST;
 800051a:	2400      	movs	r4, #0
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <initSystemApp+0x88>)
 800051e:	701c      	strb	r4, [r3, #0]

    initSregAll();    /* Initialise the SREG layer */
 8000520:	f000 f8f6 	bl	8000710 <initSregAll>

    // FLASH
    uint32_t data[256] = {0};
 8000524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000528:	4621      	mov	r1, r4
 800052a:	a802      	add	r0, sp, #8
 800052c:	f002 fe68 	bl	8003200 <memset>
    uint32_t i, address = 0;
 8000530:	4625      	mov	r5, r4

    //Read
    for(i=0; i<256; i++, address+=8)
 8000532:	2cff      	cmp	r4, #255	; 0xff
 8000534:	d80b      	bhi.n	800054e <initSystemApp+0x3a>
    {
    	if(FlashReadData(FLASH_DATA_1, &data[i], address) != RET_OK)
 8000536:	462a      	mov	r2, r5
 8000538:	ab02      	add	r3, sp, #8
 800053a:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800053e:	2003      	movs	r0, #3
 8000540:	f000 fbb0 	bl	8000ca4 <FlashReadData>
 8000544:	b910      	cbnz	r0, 800054c <initSystemApp+0x38>
    for(i=0; i<256; i++, address+=8)
 8000546:	3401      	adds	r4, #1
 8000548:	3508      	adds	r5, #8
 800054a:	e7f2      	b.n	8000532 <initSystemApp+0x1e>
 800054c:	e7fe      	b.n	800054c <initSystemApp+0x38>
    		}
    	}
    }

    //Erase
    FlashErase(FLASH_DATA_1, 18);
 800054e:	2112      	movs	r1, #18
 8000550:	2003      	movs	r0, #3
 8000552:	f000 fc15 	bl	8000d80 <FlashErase>

    // Write
    for(i=0, address=0; i<256; i++, address+=8)
 8000556:	2500      	movs	r5, #0
 8000558:	462c      	mov	r4, r5
 800055a:	e008      	b.n	800056e <initSystemApp+0x5a>
    {
    	if(FlashProgramData(FLASH_DATA_1, (uint64_t)i, address) != RET_OK)
 800055c:	9500      	str	r5, [sp, #0]
 800055e:	4622      	mov	r2, r4
 8000560:	2300      	movs	r3, #0
 8000562:	2003      	movs	r0, #3
 8000564:	f000 fbb4 	bl	8000cd0 <FlashProgramData>
 8000568:	b930      	cbnz	r0, 8000578 <initSystemApp+0x64>
    for(i=0, address=0; i<256; i++, address+=8)
 800056a:	3401      	adds	r4, #1
 800056c:	3508      	adds	r5, #8
 800056e:	2cff      	cmp	r4, #255	; 0xff
 8000570:	d9f4      	bls.n	800055c <initSystemApp+0x48>
 8000572:	2500      	movs	r5, #0
 8000574:	462c      	mov	r4, r5
 8000576:	e00a      	b.n	800058e <initSystemApp+0x7a>
 8000578:	e7fe      	b.n	8000578 <initSystemApp+0x64>
    }

    //Read
    for(i=0, address=0; i<256; i++, address+=8)
    {
    	if(FlashReadData(FLASH_DATA_1, &data[i], address) != RET_OK)
 800057a:	462a      	mov	r2, r5
 800057c:	ab02      	add	r3, sp, #8
 800057e:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8000582:	2003      	movs	r0, #3
 8000584:	f000 fb8e 	bl	8000ca4 <FlashReadData>
 8000588:	b930      	cbnz	r0, 8000598 <initSystemApp+0x84>
    for(i=0, address=0; i<256; i++, address+=8)
 800058a:	3401      	adds	r4, #1
 800058c:	3508      	adds	r5, #8
 800058e:	2cff      	cmp	r4, #255	; 0xff
 8000590:	d9f3      	bls.n	800057a <initSystemApp+0x66>
    		while(1)
    		{
    		}
    	}
    }
}
 8000592:	f20d 4d0c 	addw	sp, sp, #1036	; 0x40c
 8000596:	bd30      	pop	{r4, r5, pc}
 8000598:	e7fe      	b.n	8000598 <initSystemApp+0x84>
 800059a:	bf00      	nop
 800059c:	20000070 	.word	0x20000070

080005a0 <callSystemApp>:
 *
 * @details depending on current state, executes active applications.
 * @details calls system middleware task
 ****************************************************************************/
void callSystemApp( void )
{
 80005a0:	b508      	push	{r3, lr}
    uint8_t systemState;

    /* HAL TEST */
    // GPIO
    GPIOWritePort(GPIO_LED_1, GPIO_TOGGLE);
 80005a2:	2102      	movs	r1, #2
 80005a4:	2006      	movs	r0, #6
 80005a6:	f000 fc23 	bl	8000df0 <GPIOWritePort>

    /* END HAL TEST */

    /* System state machine */
    systemState = READ_SREG(SREG_SYSTEM_STATE);
 80005aa:	2004      	movs	r0, #4
 80005ac:	f000 f8cf 	bl	800074e <readSreg>
 80005b0:	b2c1      	uxtb	r1, r0
    //systemState = SYSTEM_APP_INIT_SHELL;
    switch ( systemState )
 80005b2:	2904      	cmp	r1, #4
 80005b4:	d82e      	bhi.n	8000614 <callSystemApp+0x74>
 80005b6:	e8df f001 	tbb	[pc, r1]
 80005ba:	032c      	.short	0x032c
 80005bc:	2d0e      	.short	0x2d0e
 80005be:	05          	.byte	0x05
 80005bf:	00          	.byte	0x00
			break;
        
		case SYSTEM_APP_INIT:
			/* Application init dispather */
			
			systemState = SYSTEM_APP_ON;
 80005c0:	2102      	movs	r1, #2
            break;
 80005c2:	e027      	b.n	8000614 <callSystemApp+0x74>

        case SYSTEM_APP_SLEPT:
			/* Application sleep dispather */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_WAKE_UP ) 
 80005c4:	4b15      	ldr	r3, [pc, #84]	; (800061c <callSystemApp+0x7c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d123      	bne.n	8000614 <callSystemApp+0x74>
            {
				/* Wake up */
                systemState = SYSTEM_APP_ON;
                requestPowerState = POWER_STATE_NO_REQUEST;
 80005cc:	2100      	movs	r1, #0
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <callSystemApp+0x7c>)
 80005d0:	7011      	strb	r1, [r2, #0]
                systemState = SYSTEM_APP_ON;
 80005d2:	4619      	mov	r1, r3
 80005d4:	e01e      	b.n	8000614 <callSystemApp+0x74>

        case SYSTEM_APP_ON:
			/* Application dispatcher */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_START_SHUTDOWN )
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <callSystemApp+0x7c>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d007      	beq.n	80005ee <callSystemApp+0x4e>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
                
                /* Power off */
                systemState = SYSTEM_APP_POWER_OFF;
            }
            else if ( requestPowerState == POWER_STATE_GO_TO_SLEEP )
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d00b      	beq.n	80005fa <callSystemApp+0x5a>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
                
                /* Slept */
                systemState = SYSTEM_APP_SLEPT;
            }
            else if ( requestPowerState == POWER_STATE_REBOOT )
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d00f      	beq.n	8000606 <callSystemApp+0x66>
                systemState = SYSTEM_APP_REBOOT;
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
            }
            
            /* Reset power state request */
            requestPowerState = POWER_STATE_NO_REQUEST;
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <callSystemApp+0x7c>)
 80005ea:	701a      	strb	r2, [r3, #0]
            break;
 80005ec:	e012      	b.n	8000614 <callSystemApp+0x74>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
 80005ee:	210a      	movs	r1, #10
 80005f0:	2005      	movs	r0, #5
 80005f2:	f000 f8c7 	bl	8000784 <writeSreg>
                systemState = SYSTEM_APP_POWER_OFF;
 80005f6:	2103      	movs	r1, #3
 80005f8:	e7f5      	b.n	80005e6 <callSystemApp+0x46>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
 80005fa:	2101      	movs	r1, #1
 80005fc:	2005      	movs	r0, #5
 80005fe:	f000 f8c1 	bl	8000784 <writeSreg>
                systemState = SYSTEM_APP_SLEPT;
 8000602:	2104      	movs	r1, #4
 8000604:	e7ef      	b.n	80005e6 <callSystemApp+0x46>
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
 8000606:	2103      	movs	r1, #3
 8000608:	2005      	movs	r0, #5
 800060a:	f000 f8bb 	bl	8000784 <writeSreg>
                systemState = SYSTEM_APP_REBOOT;
 800060e:	2105      	movs	r1, #5
 8000610:	e7e9      	b.n	80005e6 <callSystemApp+0x46>
			systemState = SYSTEM_APP_INIT;
 8000612:	2101      	movs	r1, #1
			break;
        
    }
    
    /* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
 8000614:	2004      	movs	r0, #4
 8000616:	f000 f8b5 	bl	8000784 <writeSreg>
 800061a:	bd08      	pop	{r3, pc}
 800061c:	20000070 	.word	0x20000070

08000620 <sregWrite>:
eError sregWrite(SREG sreg, uint32_t value)
{
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <sregWrite+0x38>)
 8000622:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000626:	7852      	ldrb	r2, [r2, #1]
	switch(SREGInstanceMap[sreg].type)
 8000628:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d008      	beq.n	8000642 <sregWrite+0x22>
 8000630:	b11b      	cbz	r3, 800063a <sregWrite+0x1a>
 8000632:	2b02      	cmp	r3, #2
 8000634:	d00a      	beq.n	800064c <sregWrite+0x2c>
			break;
		case SREG_UINT32:
			SREG32Context[index] = (uint32_t)value;
			break;
		default:
			success = RET_INVALID_PARAMETER;
 8000636:	2005      	movs	r0, #5
			break;
	}

	return success;
}
 8000638:	4770      	bx	lr
			SREG8Context[index] = (uint8_t)value;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <sregWrite+0x3c>)
 800063c:	5499      	strb	r1, [r3, r2]
	eError success = RET_OK;
 800063e:	2000      	movs	r0, #0
			break;
 8000640:	4770      	bx	lr
			SREG16Context[index] = (uint16_t)value;
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <sregWrite+0x40>)
 8000644:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	eError success = RET_OK;
 8000648:	2000      	movs	r0, #0
			break;
 800064a:	4770      	bx	lr
			SREG32Context[index] = (uint32_t)value;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <sregWrite+0x44>)
 800064e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eError success = RET_OK;
 8000652:	2000      	movs	r0, #0
			break;
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	08003258 	.word	0x08003258
 800065c:	20000074 	.word	0x20000074
 8000660:	20000084 	.word	0x20000084
 8000664:	2000007c 	.word	0x2000007c

08000668 <sregReadParam>:
 * @param	sreg
 * @param	sregParam struct
 * @return  RET_OK or RET_FAIL
 ****************************************************************************/
eError sregReadParam(SREG sreg, tSREGParam *sregParam)
{
 8000668:	b430      	push	{r4, r5}
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 800066a:	4a22      	ldr	r2, [pc, #136]	; (80006f4 <sregReadParam+0x8c>)
 800066c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8000670:	785b      	ldrb	r3, [r3, #1]
	switch(SREGInstanceMap[sreg].type)
 8000672:	f812 2020 	ldrb.w	r2, [r2, r0, lsl #2]
 8000676:	2a01      	cmp	r2, #1
 8000678:	d014      	beq.n	80006a4 <sregReadParam+0x3c>
 800067a:	b11a      	cbz	r2, 8000684 <sregReadParam+0x1c>
 800067c:	2a02      	cmp	r2, #2
 800067e:	d025      	beq.n	80006cc <sregReadParam+0x64>
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
			break;
		default:
			success = RET_INVALID_PARAMETER;
 8000680:	2005      	movs	r0, #5
 8000682:	e00d      	b.n	80006a0 <sregReadParam+0x38>
			sregParam->Data = (uint32_t)SREG8Context[index];
 8000684:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <sregReadParam+0x90>)
 8000686:	5cd2      	ldrb	r2, [r2, r3]
 8000688:	600a      	str	r2, [r1, #0]
			sregParam->Init = (uint32_t)(SREG8InstanceMap[index].Init);
 800068a:	481c      	ldr	r0, [pc, #112]	; (80006fc <sregReadParam+0x94>)
 800068c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000690:	18c2      	adds	r2, r0, r3
 8000692:	7894      	ldrb	r4, [r2, #2]
 8000694:	60cc      	str	r4, [r1, #12]
			sregParam->Max  = (uint32_t)(SREG8InstanceMap[index].Max);
 8000696:	5cc3      	ldrb	r3, [r0, r3]
 8000698:	604b      	str	r3, [r1, #4]
			sregParam->Min  = (uint32_t)(SREG8InstanceMap[index].Min);
 800069a:	7853      	ldrb	r3, [r2, #1]
 800069c:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 800069e:	2000      	movs	r0, #0
			break;
	}

	return success;
}
 80006a0:	bc30      	pop	{r4, r5}
 80006a2:	4770      	bx	lr
			sregParam->Data  = (uint32_t)SREG16Context[index];
 80006a4:	4a16      	ldr	r2, [pc, #88]	; (8000700 <sregReadParam+0x98>)
 80006a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006aa:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG16InstanceMap[index].Init);
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <sregReadParam+0x9c>)
 80006ae:	0058      	lsls	r0, r3, #1
 80006b0:	18c5      	adds	r5, r0, r3
 80006b2:	006c      	lsls	r4, r5, #1
 80006b4:	1915      	adds	r5, r2, r4
 80006b6:	88ad      	ldrh	r5, [r5, #4]
 80006b8:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG16InstanceMap[index].Max);
 80006ba:	5b14      	ldrh	r4, [r2, r4]
 80006bc:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG16InstanceMap[index].Min);
 80006be:	4403      	add	r3, r0
 80006c0:	0058      	lsls	r0, r3, #1
 80006c2:	4402      	add	r2, r0
 80006c4:	8853      	ldrh	r3, [r2, #2]
 80006c6:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 80006c8:	2000      	movs	r0, #0
			break;
 80006ca:	e7e9      	b.n	80006a0 <sregReadParam+0x38>
			sregParam->Data  = (uint32_t)SREG32Context[index];
 80006cc:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <sregReadParam+0xa0>)
 80006ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d2:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <sregReadParam+0xa4>)
 80006d6:	0058      	lsls	r0, r3, #1
 80006d8:	18c5      	adds	r5, r0, r3
 80006da:	00ac      	lsls	r4, r5, #2
 80006dc:	1915      	adds	r5, r2, r4
 80006de:	68ad      	ldr	r5, [r5, #8]
 80006e0:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
 80006e2:	5914      	ldr	r4, [r2, r4]
 80006e4:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
 80006e6:	4403      	add	r3, r0
 80006e8:	0098      	lsls	r0, r3, #2
 80006ea:	4402      	add	r2, r0
 80006ec:	6853      	ldr	r3, [r2, #4]
 80006ee:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 80006f0:	2000      	movs	r0, #0
			break;
 80006f2:	e7d5      	b.n	80006a0 <sregReadParam+0x38>
 80006f4:	08003258 	.word	0x08003258
 80006f8:	20000074 	.word	0x20000074
 80006fc:	08003240 	.word	0x08003240
 8000700:	20000084 	.word	0x20000084
 8000704:	08003228 	.word	0x08003228
 8000708:	2000007c 	.word	0x2000007c
 800070c:	08003228 	.word	0x08003228

08000710 <initSregAll>:
{
 8000710:	b510      	push	{r4, lr}
 8000712:	b084      	sub	sp, #16
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 8000714:	2400      	movs	r4, #0
 8000716:	e009      	b.n	800072c <initSregAll+0x1c>
		sregReadParam(sreg, &sregParam);
 8000718:	4669      	mov	r1, sp
 800071a:	4620      	mov	r0, r4
 800071c:	f7ff ffa4 	bl	8000668 <sregReadParam>
		sregWrite(sreg, sregParam.Init);
 8000720:	9903      	ldr	r1, [sp, #12]
 8000722:	4620      	mov	r0, r4
 8000724:	f7ff ff7c 	bl	8000620 <sregWrite>
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 8000728:	3401      	adds	r4, #1
 800072a:	b2e4      	uxtb	r4, r4
 800072c:	2c08      	cmp	r4, #8
 800072e:	d9f3      	bls.n	8000718 <initSregAll+0x8>
}
 8000730:	b004      	add	sp, #16
 8000732:	bd10      	pop	{r4, pc}

08000734 <readSregTableStd>:
{
 8000734:	b500      	push	{lr}
 8000736:	b085      	sub	sp, #20
	success = sregReadParam(sreg, &sregParam);
 8000738:	4669      	mov	r1, sp
 800073a:	f7ff ff95 	bl	8000668 <sregReadParam>
	if ( success == RET_OK )
 800073e:	b120      	cbz	r0, 800074a <readSregTableStd+0x16>
    uint32_t ret_data = 0xffffffff;
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000744:	b005      	add	sp, #20
 8000746:	f85d fb04 	ldr.w	pc, [sp], #4
		ret_data = sregParam.Data;
 800074a:	9800      	ldr	r0, [sp, #0]
 800074c:	e7fa      	b.n	8000744 <readSregTableStd+0x10>

0800074e <readSreg>:
{
 800074e:	b508      	push	{r3, lr}
	return readSregTableStd(sreg);
 8000750:	f7ff fff0 	bl	8000734 <readSregTableStd>
}
 8000754:	bd08      	pop	{r3, pc}

08000756 <writeSregTableStd>:
{
 8000756:	b570      	push	{r4, r5, r6, lr}
 8000758:	b084      	sub	sp, #16
 800075a:	4606      	mov	r6, r0
 800075c:	460d      	mov	r5, r1
	result = sregReadParam(sreg, &sregParam);
 800075e:	4669      	mov	r1, sp
 8000760:	f7ff ff82 	bl	8000668 <sregReadParam>
 8000764:	4604      	mov	r4, r0
	if ( value > sregParam.Max )
 8000766:	9901      	ldr	r1, [sp, #4]
 8000768:	42a9      	cmp	r1, r5
 800076a:	d303      	bcc.n	8000774 <writeSregTableStd+0x1e>
	else if ( value < sregParam.Min )
 800076c:	9902      	ldr	r1, [sp, #8]
 800076e:	428d      	cmp	r5, r1
 8000770:	d300      	bcc.n	8000774 <writeSregTableStd+0x1e>
 8000772:	4629      	mov	r1, r5
	if ( result == RET_OK )
 8000774:	b114      	cbz	r4, 800077c <writeSregTableStd+0x26>
}
 8000776:	4620      	mov	r0, r4
 8000778:	b004      	add	sp, #16
 800077a:	bd70      	pop	{r4, r5, r6, pc}
		sregWrite(sreg, value);
 800077c:	4630      	mov	r0, r6
 800077e:	f7ff ff4f 	bl	8000620 <sregWrite>
 8000782:	e7f8      	b.n	8000776 <writeSregTableStd+0x20>

08000784 <writeSreg>:
{
 8000784:	b508      	push	{r3, lr}
	return writeSregTableStd( sreg, value );
 8000786:	f7ff ffe6 	bl	8000756 <writeSregTableStd>
}
 800078a:	bd08      	pop	{r3, pc}

0800078c <SchedulerResetProcessTable>:
 ****************************************************************************/
void SchedulerResetProcessTable(void)
{
	uint8_t i;

	ptrTask	= 0;
 800078c:	2300      	movs	r3, #0
 800078e:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <SchedulerResetProcessTable+0x5c>)
 8000790:	7013      	strb	r3, [r2, #0]

 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000792:	2b01      	cmp	r3, #1
 8000794:	d826      	bhi.n	80007e4 <SchedulerResetProcessTable+0x58>
{
 8000796:	b430      	push	{r4, r5}
 	{
		schedulerProcess[i].uiTimeProcessCounter	= 0;
 8000798:	4914      	ldr	r1, [pc, #80]	; (80007ec <SchedulerResetProcessTable+0x60>)
 800079a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800079e:	f36f 020d 	bfc	r2, #0, #14
 80007a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		schedulerProcess[i].bEnabledSystemTask	= SchedulerInstanceMap[i].initState;
 80007a6:	005a      	lsls	r2, r3, #1
 80007a8:	18d0      	adds	r0, r2, r3
 80007aa:	0084      	lsls	r4, r0, #2
 80007ac:	4810      	ldr	r0, [pc, #64]	; (80007f0 <SchedulerResetProcessTable+0x64>)
 80007ae:	4420      	add	r0, r4
 80007b0:	7a84      	ldrb	r4, [r0, #10]
 80007b2:	4411      	add	r1, r2
 80007b4:	7848      	ldrb	r0, [r1, #1]
 80007b6:	f364 1086 	bfi	r0, r4, #6, #1
		schedulerProcess[i].bEnabledUrgentSystemTask = FALSE;
 80007ba:	f36f 10c7 	bfc	r0, #7, #1
 80007be:	7048      	strb	r0, [r1, #1]

		schedulerContext[i].maxDelayProcessCtn = 0;
 80007c0:	490c      	ldr	r1, [pc, #48]	; (80007f4 <SchedulerResetProcessTable+0x68>)
 80007c2:	18d0      	adds	r0, r2, r3
 80007c4:	00c5      	lsls	r5, r0, #3
 80007c6:	194c      	adds	r4, r1, r5
 80007c8:	2000      	movs	r0, #0
 80007ca:	81a0      	strh	r0, [r4, #12]
		schedulerContext[i].maximumTaskTime_us = 0;
 80007cc:	60a0      	str	r0, [r4, #8]
		schedulerContext[i].averageTaskTime_us = 0;
 80007ce:	5148      	str	r0, [r1, r5]
		schedulerContext[i].currentTaskTime_us = 0;
 80007d0:	6060      	str	r0, [r4, #4]
		schedulerContext[i].cntTaskTime = 0;
 80007d2:	6120      	str	r0, [r4, #16]
		schedulerContext[i].userEnabled = TRUE;
 80007d4:	2201      	movs	r2, #1
 80007d6:	7562      	strb	r2, [r4, #21]
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80007d8:	4413      	add	r3, r2
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d9db      	bls.n	8000798 <SchedulerResetProcessTable+0xc>
 	}
}
 80007e0:	bc30      	pop	{r4, r5}
 80007e2:	4770      	bx	lr
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	200000b8 	.word	0x200000b8
 80007ec:	200000bc 	.word	0x200000bc
 80007f0:	0800327c 	.word	0x0800327c
 80007f4:	20000088 	.word	0x20000088

080007f8 <SchedulerInit>:
{
 80007f8:	b510      	push	{r4, lr}
	SchedulerResetProcessTable();
 80007fa:	f7ff ffc7 	bl	800078c <SchedulerResetProcessTable>
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80007fe:	2400      	movs	r4, #0
 8000800:	e001      	b.n	8000806 <SchedulerInit+0xe>
 8000802:	3401      	adds	r4, #1
 8000804:	b2e4      	uxtb	r4, r4
 8000806:	2c01      	cmp	r4, #1
 8000808:	d808      	bhi.n	800081c <SchedulerInit+0x24>
		if(SchedulerInstanceMap[i].InitProcess != NULL)
 800080a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800080e:	0093      	lsls	r3, r2, #2
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <SchedulerInit+0x3c>)
 8000812:	58d3      	ldr	r3, [r2, r3]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0f4      	beq.n	8000802 <SchedulerInit+0xa>
			(*(SchedulerInstanceMap[i].InitProcess))();
 8000818:	4798      	blx	r3
 800081a:	e7f2      	b.n	8000802 <SchedulerInit+0xa>
    systemGetCLkFreq(&ticks_per_us);
 800081c:	4c06      	ldr	r4, [pc, #24]	; (8000838 <SchedulerInit+0x40>)
 800081e:	4620      	mov	r0, r4
 8000820:	f000 fd0e 	bl	8001240 <systemGetCLkFreq>
    ticks_per_us /= 1000000;
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <SchedulerInit+0x44>)
 8000828:	fba2 2303 	umull	r2, r3, r2, r3
 800082c:	0c9b      	lsrs	r3, r3, #18
 800082e:	6023      	str	r3, [r4, #0]
 8000830:	bd10      	pop	{r4, pc}
 8000832:	bf00      	nop
 8000834:	0800327c 	.word	0x0800327c
 8000838:	20000084 	.word	0x20000084
 800083c:	431bde83 	.word	0x431bde83

08000840 <SchedulerProcessesAutoEnable>:
 ****************************************************************************/
void SchedulerProcessesAutoEnable(void)
{
	uint8_t i;

	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000840:	2300      	movs	r3, #0
 8000842:	2b01      	cmp	r3, #1
 8000844:	d825      	bhi.n	8000892 <SchedulerProcessesAutoEnable+0x52>
{
 8000846:	b430      	push	{r4, r5}
 8000848:	e003      	b.n	8000852 <SchedulerProcessesAutoEnable+0x12>
	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 800084a:	3301      	adds	r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b01      	cmp	r3, #1
 8000850:	d81d      	bhi.n	800088e <SchedulerProcessesAutoEnable+0x4e>
	{
		schedulerProcess[i].uiTimeProcessCounter++;
 8000852:	4810      	ldr	r0, [pc, #64]	; (8000894 <SchedulerProcessesAutoEnable+0x54>)
 8000854:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8000858:	f3c2 010d 	ubfx	r1, r2, #0, #14
 800085c:	3101      	adds	r1, #1
 800085e:	f361 020d 	bfi	r2, r1, #0, #14
 8000862:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

		// If currentTaskTime it's enable, update 1000uS=1mS
		if (schedulerContext[i].taskActive == TRUE && schedulerContext[i].userEnabled == TRUE )
 8000866:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800086a:	00d1      	lsls	r1, r2, #3
 800086c:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <SchedulerProcessesAutoEnable+0x58>)
 800086e:	440a      	add	r2, r1
 8000870:	7d12      	ldrb	r2, [r2, #20]
 8000872:	2a00      	cmp	r2, #0
 8000874:	d0e9      	beq.n	800084a <SchedulerProcessesAutoEnable+0xa>
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <SchedulerProcessesAutoEnable+0x58>)
 8000878:	440a      	add	r2, r1
 800087a:	7d52      	ldrb	r2, [r2, #21]
 800087c:	2a00      	cmp	r2, #0
 800087e:	d0e4      	beq.n	800084a <SchedulerProcessesAutoEnable+0xa>
		{
			schedulerContext[i].currentTaskTime_us += 1000;
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <SchedulerProcessesAutoEnable+0x58>)
 8000882:	4401      	add	r1, r0
 8000884:	684a      	ldr	r2, [r1, #4]
 8000886:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 800088a:	604a      	str	r2, [r1, #4]
 800088c:	e7dd      	b.n	800084a <SchedulerProcessesAutoEnable+0xa>
		}
	}
}
 800088e:	bc30      	pop	{r4, r5}
 8000890:	4770      	bx	lr
 8000892:	4770      	bx	lr
 8000894:	200000bc 	.word	0x200000bc
 8000898:	20000088 	.word	0x20000088

0800089c <SchedulerUpdateTaskTime>:
 * @brief  	Update average task time, maximum task time
 * @param   process, initTime, finalTime
 * @return  none
 ****************************************************************************/
void SchedulerUpdateTaskTime(int32_t initTimeTaskScheduler, int32_t finalTimeTaskScheduler)
{
 800089c:	b4f0      	push	{r4, r5, r6, r7}
	uint64_t averageTaskTemp;
	schedulerContext[ptrTask].currentTaskTime_us += ((initTimeTaskScheduler - finalTimeTaskScheduler)/(int32_t)(ticks_per_us));
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <SchedulerUpdateTaskTime+0x48>)
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	1a41      	subs	r1, r0, r1
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <SchedulerUpdateTaskTime+0x4c>)
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	fb91 f1f0 	sdiv	r1, r1, r0
 80008ac:	4e0f      	ldr	r6, [pc, #60]	; (80008ec <SchedulerUpdateTaskTime+0x50>)
 80008ae:	0053      	lsls	r3, r2, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	00dd      	lsls	r5, r3, #3
 80008b4:	1974      	adds	r4, r6, r5
 80008b6:	6863      	ldr	r3, [r4, #4]
 80008b8:	4419      	add	r1, r3
 80008ba:	6061      	str	r1, [r4, #4]
	schedulerContext[ptrTask].cntTaskTime %= MAX_TASK_TIME_CNT;
 80008bc:	6923      	ldr	r3, [r4, #16]
 80008be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c2:	bf28      	it	cs
 80008c4:	3301      	addcs	r3, #1
	schedulerContext[ptrTask].cntTaskTime++;
 80008c6:	1c58      	adds	r0, r3, #1
 80008c8:	6120      	str	r0, [r4, #16]

	/* Calculate the average task time */
	averageTaskTemp = (uint64_t)(schedulerContext[ptrTask].averageTaskTime_us*(schedulerContext[ptrTask].cntTaskTime-1));
 80008ca:	5977      	ldr	r7, [r6, r5]
	schedulerContext[ptrTask].averageTaskTime_us = (uint32_t)(averageTaskTemp + schedulerContext[ptrTask].currentTaskTime_us) / schedulerContext[ptrTask].cntTaskTime;
 80008cc:	fb07 1303 	mla	r3, r7, r3, r1
 80008d0:	fbb3 f3f0 	udiv	r3, r3, r0
 80008d4:	5173      	str	r3, [r6, r5]

    /* If current Task Time is higher than maximum, update maximum task time */
    if ( schedulerContext[ptrTask].currentTaskTime_us > schedulerContext[ptrTask].maximumTaskTime_us )
 80008d6:	68a3      	ldr	r3, [r4, #8]
 80008d8:	4299      	cmp	r1, r3
 80008da:	d900      	bls.n	80008de <SchedulerUpdateTaskTime+0x42>
    {
    	schedulerContext[ptrTask].maximumTaskTime_us = schedulerContext[ptrTask].currentTaskTime_us;
 80008dc:	60a1      	str	r1, [r4, #8]
    }

}
 80008de:	bcf0      	pop	{r4, r5, r6, r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	200000b8 	.word	0x200000b8
 80008e8:	20000084 	.word	0x20000084
 80008ec:	20000088 	.word	0x20000088

080008f0 <SchedulerExecuteSystemProcess>:
{
 80008f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	schedulerContext[ptrTask].currentTaskTime_us = 0;
 80008f4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000950 <SchedulerExecuteSystemProcess+0x60>
 80008f8:	f898 1000 	ldrb.w	r1, [r8]
 80008fc:	4c11      	ldr	r4, [pc, #68]	; (8000944 <SchedulerExecuteSystemProcess+0x54>)
 80008fe:	004b      	lsls	r3, r1, #1
 8000900:	1858      	adds	r0, r3, r1
 8000902:	00c2      	lsls	r2, r0, #3
 8000904:	4422      	add	r2, r4
 8000906:	2700      	movs	r7, #0
 8000908:	6057      	str	r7, [r2, #4]
	initTimeTaskScheduler =  SYSTEM_TICK;
 800090a:	4e0f      	ldr	r6, [pc, #60]	; (8000948 <SchedulerExecuteSystemProcess+0x58>)
 800090c:	68b5      	ldr	r5, [r6, #8]
	schedulerContext[ptrTask].taskActive = TRUE;
 800090e:	2001      	movs	r0, #1
 8000910:	7510      	strb	r0, [r2, #20]
    (*(SchedulerInstanceMap[ptrTask].CallProcess))();
 8000912:	440b      	add	r3, r1
 8000914:	009a      	lsls	r2, r3, #2
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <SchedulerExecuteSystemProcess+0x5c>)
 8000918:	4413      	add	r3, r2
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	4798      	blx	r3
	schedulerContext[ptrTask].taskActive = FALSE;
 800091e:	f898 0000 	ldrb.w	r0, [r8]
 8000922:	0043      	lsls	r3, r0, #1
 8000924:	1819      	adds	r1, r3, r0
 8000926:	00ca      	lsls	r2, r1, #3
 8000928:	4422      	add	r2, r4
 800092a:	7517      	strb	r7, [r2, #20]
    finalTimeTaskScheduler = SYSTEM_TICK;
 800092c:	68b1      	ldr	r1, [r6, #8]
    if ( schedulerContext[ptrTask].userEnabled == TRUE )
 800092e:	4403      	add	r3, r0
 8000930:	00da      	lsls	r2, r3, #3
 8000932:	4414      	add	r4, r2
 8000934:	7d63      	ldrb	r3, [r4, #21]
 8000936:	b90b      	cbnz	r3, 800093c <SchedulerExecuteSystemProcess+0x4c>
 8000938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	SchedulerUpdateTaskTime(initTimeTaskScheduler, finalTimeTaskScheduler);
 800093c:	4628      	mov	r0, r5
 800093e:	f7ff ffad 	bl	800089c <SchedulerUpdateTaskTime>
}
 8000942:	e7f9      	b.n	8000938 <SchedulerExecuteSystemProcess+0x48>
 8000944:	20000088 	.word	0x20000088
 8000948:	e000e010 	.word	0xe000e010
 800094c:	0800327c 	.word	0x0800327c
 8000950:	200000b8 	.word	0x200000b8

08000954 <SchedulerNextSystemProcess>:
{
 8000954:	b570      	push	{r4, r5, r6, lr}
    uint8_t i			= 0;
 8000956:	2400      	movs	r4, #0
    bool taskExecuted	= FALSE;
 8000958:	4620      	mov	r0, r4
 800095a:	e027      	b.n	80009ac <SchedulerNextSystemProcess+0x58>
			if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE )
 800095c:	2a00      	cmp	r2, #0
 800095e:	d148      	bne.n	80009f2 <SchedulerNextSystemProcess+0x9e>
				schedulerProcess[ptrTask].uiTimeProcessCounter = 0;
 8000960:	4a28      	ldr	r2, [pc, #160]	; (8000a04 <SchedulerNextSystemProcess+0xb0>)
 8000962:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000966:	f36f 010d 	bfc	r1, #0, #14
 800096a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (schedulerContext[ptrTask].maxDelayProcessCtn < (schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess))
 800096e:	005a      	lsls	r2, r3, #1
 8000970:	18d1      	adds	r1, r2, r3
 8000972:	00c8      	lsls	r0, r1, #3
 8000974:	4924      	ldr	r1, [pc, #144]	; (8000a08 <SchedulerNextSystemProcess+0xb4>)
 8000976:	4401      	add	r1, r0
 8000978:	898d      	ldrh	r5, [r1, #12]
 800097a:	4922      	ldr	r1, [pc, #136]	; (8000a04 <SchedulerNextSystemProcess+0xb0>)
 800097c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000980:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000984:	441a      	add	r2, r3
 8000986:	0090      	lsls	r0, r2, #2
 8000988:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <SchedulerNextSystemProcess+0xb8>)
 800098a:	4402      	add	r2, r0
 800098c:	8912      	ldrh	r2, [r2, #8]
 800098e:	1a88      	subs	r0, r1, r2
 8000990:	4285      	cmp	r5, r0
 8000992:	da05      	bge.n	80009a0 <SchedulerNextSystemProcess+0x4c>
				schedulerContext[ptrTask].maxDelayProcessCtn = schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess;
 8000994:	005a      	lsls	r2, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	00da      	lsls	r2, r3, #3
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <SchedulerNextSystemProcess+0xb4>)
 800099c:	4413      	add	r3, r2
 800099e:	8198      	strh	r0, [r3, #12]
			SchedulerExecuteSystemProcess();
 80009a0:	f7ff ffa6 	bl	80008f0 <SchedulerExecuteSystemProcess>
			taskExecuted = TRUE;
 80009a4:	2001      	movs	r0, #1
	while ( ( taskExecuted == FALSE ) && ( i <= NUM_OF_SCHED_TASKS ) );
 80009a6:	bb60      	cbnz	r0, 8000a02 <SchedulerNextSystemProcess+0xae>
 80009a8:	2c02      	cmp	r4, #2
 80009aa:	d82a      	bhi.n	8000a02 <SchedulerNextSystemProcess+0xae>
        i++;
 80009ac:	3401      	adds	r4, #1
 80009ae:	b2e4      	uxtb	r4, r4
        ptrTask++;
 80009b0:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <SchedulerNextSystemProcess+0xbc>)
 80009b2:	7813      	ldrb	r3, [r2, #0]
 80009b4:	3301      	adds	r3, #1
		ptrTask %= NUM_OF_SCHED_TASKS;
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	7013      	strb	r3, [r2, #0]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 80009bc:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <SchedulerNextSystemProcess+0xb0>)
 80009be:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80009c2:	7852      	ldrb	r2, [r2, #1]
 80009c4:	09d2      	lsrs	r2, r2, #7
 80009c6:	d1c9      	bne.n	800095c <SchedulerNextSystemProcess+0x8>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 80009c8:	490e      	ldr	r1, [pc, #56]	; (8000a04 <SchedulerNextSystemProcess+0xb0>)
 80009ca:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80009ce:	7849      	ldrb	r1, [r1, #1]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 80009d0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80009d4:	d0e7      	beq.n	80009a6 <SchedulerNextSystemProcess+0x52>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 80009d6:	490b      	ldr	r1, [pc, #44]	; (8000a04 <SchedulerNextSystemProcess+0xb0>)
 80009d8:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 80009dc:	f3c5 050d 	ubfx	r5, r5, #0, #14
 80009e0:	0059      	lsls	r1, r3, #1
 80009e2:	4419      	add	r1, r3
 80009e4:	008e      	lsls	r6, r1, #2
 80009e6:	4909      	ldr	r1, [pc, #36]	; (8000a0c <SchedulerNextSystemProcess+0xb8>)
 80009e8:	4431      	add	r1, r6
 80009ea:	8909      	ldrh	r1, [r1, #8]
 80009ec:	428d      	cmp	r5, r1
 80009ee:	dbda      	blt.n	80009a6 <SchedulerNextSystemProcess+0x52>
 80009f0:	e7b4      	b.n	800095c <SchedulerNextSystemProcess+0x8>
				schedulerProcess[ptrTask].bEnabledUrgentSystemTask = FALSE;
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <SchedulerNextSystemProcess+0xb0>)
 80009f4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80009f8:	7851      	ldrb	r1, [r2, #1]
 80009fa:	f36f 11c7 	bfc	r1, #7, #1
 80009fe:	7051      	strb	r1, [r2, #1]
 8000a00:	e7b5      	b.n	800096e <SchedulerNextSystemProcess+0x1a>
}
 8000a02:	bd70      	pop	{r4, r5, r6, pc}
 8000a04:	200000bc 	.word	0x200000bc
 8000a08:	20000088 	.word	0x20000088
 8000a0c:	0800327c 	.word	0x0800327c
 8000a10:	200000b8 	.word	0x200000b8

08000a14 <CreateQueue>:
 * @return  None.
 *
 ****************************************************************************/
void CreateQueue(tCircularBuffer* buffer, uint8_t* bufferPtr, uint16_t size)
{
	buffer->bufferPtr = bufferPtr;
 8000a14:	6081      	str	r1, [r0, #8]
	buffer->bufferLen = size;
 8000a16:	80c2      	strh	r2, [r0, #6]
	buffer->readPtr = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	8043      	strh	r3, [r0, #2]
	buffer->writePtr = 0;
 8000a1c:	8083      	strh	r3, [r0, #4]
    buffer->numOfBytes = 0;
 8000a1e:	8003      	strh	r3, [r0, #0]
 8000a20:	4770      	bx	lr

08000a22 <AddQueueByte>:
 *
 * @return  None.
 *
 ****************************************************************************/
void AddQueueByte(tCircularBuffer* buffer, uint8_t data)
{
 8000a22:	b538      	push	{r3, r4, r5, lr}
 8000a24:	4604      	mov	r4, r0
 8000a26:	460d      	mov	r5, r1
	interruptsDisable();
 8000a28:	f000 faf6 	bl	8001018 <interruptsDisable>
    buffer->bufferPtr[buffer->writePtr]= data;
 8000a2c:	68a2      	ldr	r2, [r4, #8]
 8000a2e:	88a3      	ldrh	r3, [r4, #4]
 8000a30:	54d5      	strb	r5, [r2, r3]
    buffer->numOfBytes++;
 8000a32:	8823      	ldrh	r3, [r4, #0]
 8000a34:	3301      	adds	r3, #1
 8000a36:	8023      	strh	r3, [r4, #0]
    buffer->writePtr++;
 8000a38:	88a3      	ldrh	r3, [r4, #4]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	b29b      	uxth	r3, r3
    buffer->writePtr %= buffer->bufferLen;
 8000a3e:	88e1      	ldrh	r1, [r4, #6]
 8000a40:	fbb3 f2f1 	udiv	r2, r3, r1
 8000a44:	fb01 3312 	mls	r3, r1, r2, r3
 8000a48:	80a3      	strh	r3, [r4, #4]
	interruptsEnable();
 8000a4a:	f000 fad1 	bl	8000ff0 <interruptsEnable>
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}

08000a50 <GetQueueByte>:
 *
 * @return  Next byte into queue
 *
 ****************************************************************************/
uint8_t GetQueueByte(tCircularBuffer* buffer)
{
 8000a50:	b538      	push	{r3, r4, r5, lr}
 8000a52:	4604      	mov	r4, r0
    uint8_t result;
	interruptsDisable();
 8000a54:	f000 fae0 	bl	8001018 <interruptsDisable>
    result = buffer->bufferPtr[buffer->readPtr];
 8000a58:	68a2      	ldr	r2, [r4, #8]
 8000a5a:	8863      	ldrh	r3, [r4, #2]
 8000a5c:	5cd5      	ldrb	r5, [r2, r3]
    buffer->numOfBytes--;
 8000a5e:	8822      	ldrh	r2, [r4, #0]
 8000a60:	3a01      	subs	r2, #1
 8000a62:	8022      	strh	r2, [r4, #0]
    buffer->readPtr++;
 8000a64:	3301      	adds	r3, #1
 8000a66:	b29b      	uxth	r3, r3
    buffer->readPtr %= buffer->bufferLen;
 8000a68:	88e1      	ldrh	r1, [r4, #6]
 8000a6a:	fbb3 f2f1 	udiv	r2, r3, r1
 8000a6e:	fb01 3312 	mls	r3, r1, r2, r3
 8000a72:	8063      	strh	r3, [r4, #2]
    interruptsEnable();
 8000a74:	f000 fabc 	bl	8000ff0 <interruptsEnable>
    return result;
}
 8000a78:	4628      	mov	r0, r5
 8000a7a:	bd38      	pop	{r3, r4, r5, pc}

08000a7c <GetQueuePendingBytes>:
 *
 ****************************************************************************/
uint16_t GetQueuePendingBytes(tCircularBuffer* buffer)
{
    return buffer->numOfBytes;
}
 8000a7c:	8800      	ldrh	r0, [r0, #0]
 8000a7e:	4770      	bx	lr

08000a80 <GetQueueFreeBytes>:
 * @return  Free spaces in queue
 *
 ****************************************************************************/
uint16_t GetQueueFreeBytes(tCircularBuffer* buffer)
{
    return (buffer->bufferLen-buffer->numOfBytes);
 8000a80:	88c3      	ldrh	r3, [r0, #6]
 8000a82:	8800      	ldrh	r0, [r0, #0]
 8000a84:	1a18      	subs	r0, r3, r0
}
 8000a86:	b280      	uxth	r0, r0
 8000a88:	4770      	bx	lr

08000a8a <diffTime>:
 **********************************************************************/
static uint32_t diffTime( uint32_t timeA, uint32_t timeB )
{
    uint32_t retVal = 0;

    if( timeA >= timeB )
 8000a8a:	4288      	cmp	r0, r1
 8000a8c:	d202      	bcs.n	8000a94 <diffTime+0xa>
    {
            retVal = timeA - timeB;
    }
    else
    {
            retVal = UINT32_MAX - (timeB - timeA);
 8000a8e:	1a09      	subs	r1, r1, r0
 8000a90:	43c8      	mvns	r0, r1
    }

    return retVal;
}
 8000a92:	4770      	bx	lr
            retVal = timeA - timeB;
 8000a94:	1a40      	subs	r0, r0, r1
 8000a96:	4770      	bx	lr

08000a98 <getTime>:
    uint32_t retVal = 0;

    retVal = timeMs;

    return retVal;
}
 8000a98:	4b01      	ldr	r3, [pc, #4]	; (8000aa0 <getTime+0x8>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000068 	.word	0x20000068

08000aa4 <SwTimerInit>:
eError SwTimerInit( void )
{
    eError result = RET_OK;
    uint8_t i;

    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	b10b      	cbz	r3, 8000aac <SwTimerInit+0x8>
    {
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
    }

    return result;
}
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	4770      	bx	lr
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
 8000aac:	4a03      	ldr	r2, [pc, #12]	; (8000abc <SwTimerInit+0x18>)
 8000aae:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	7211      	strb	r1, [r2, #8]
    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	e7f4      	b.n	8000aa6 <SwTimerInit+0x2>
 8000abc:	20000058 	.word	0x20000058

08000ac0 <SwTimerResetTimer>:
/**********************************************************************
 * @brief  Reset and start the timer
 * @param  pTimer:	Pointer to timer to be restart.
 **********************************************************************/
eError SwTimerResetTimer( tSwTimerIndex SwTimerIndex )
{
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	4604      	mov	r4, r0
    eError result = RET_OK;

    // Reset the timer.
    SwTimersArray[SwTimerIndex].startMs = getTime();
 8000ac4:	f7ff ffe8 	bl	8000a98 <getTime>
 8000ac8:	0124      	lsls	r4, r4, #4
 8000aca:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <SwTimerResetTimer+0x14>)
 8000acc:	5118      	str	r0, [r3, r4]

    return result;
}
 8000ace:	2000      	movs	r0, #0
 8000ad0:	bd10      	pop	{r4, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000058 	.word	0x20000058

08000ad8 <SwTimerStartTimer>:
{
 8000ad8:	b510      	push	{r4, lr}
 8000ada:	4604      	mov	r4, r0
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_CANCELLED ||
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <SwTimerStartTimer+0x28>)
 8000ade:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000ae2:	7a1b      	ldrb	r3, [r3, #8]
 8000ae4:	3b02      	subs	r3, #2
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d906      	bls.n	8000afa <SwTimerStartTimer+0x22>
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_STARTED;
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <SwTimerStartTimer+0x28>)
 8000aee:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8000af2:	2301      	movs	r3, #1
 8000af4:	7203      	strb	r3, [r0, #8]
}
 8000af6:	2000      	movs	r0, #0
 8000af8:	bd10      	pop	{r4, pc}
        SwTimerResetTimer( SwTimerIndex );
 8000afa:	f7ff ffe1 	bl	8000ac0 <SwTimerResetTimer>
 8000afe:	e7f5      	b.n	8000aec <SwTimerStartTimer+0x14>
 8000b00:	20000058 	.word	0x20000058

08000b04 <SwTimerUpdateTimer>:
 * @brief  Updates all timers every millisecond
 * @param
 * @retval
 **********************************************************************/
eError SwTimerUpdateTimer( tSwTimerIndex SwTimerIndex )
{
 8000b04:	b538      	push	{r3, r4, r5, lr}
 8000b06:	4604      	mov	r4, r0
    eError result = RET_OK;
    tBool restartTimer = FALSE;

    // If timer is started, check timeout.
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STARTED )
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <SwTimerUpdateTimer+0x60>)
 8000b0a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000b0e:	7a1b      	ldrb	r3, [r3, #8]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d00a      	beq.n	8000b2a <SwTimerUpdateTimer+0x26>
            }
        }
    }
    // If the timer is stopped, simply shifts the start time,
    // this keeps the elapsed time.
    else if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STOPPED )
 8000b14:	b9fb      	cbnz	r3, 8000b56 <SwTimerUpdateTimer+0x52>
    {
        SwTimersArray[SwTimerIndex].startMs++;
 8000b16:	4913      	ldr	r1, [pc, #76]	; (8000b64 <SwTimerUpdateTimer+0x60>)
 8000b18:	0102      	lsls	r2, r0, #4
 8000b1a:	588b      	ldr	r3, [r1, r2]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	508b      	str	r3, [r1, r2]
    tBool restartTimer = FALSE;
 8000b20:	2000      	movs	r0, #0
    }

    if ( restartTimer == TRUE )
 8000b22:	2801      	cmp	r0, #1
 8000b24:	d019      	beq.n	8000b5a <SwTimerUpdateTimer+0x56>
    {
        SwTimerStartTimer(SwTimerIndex);
    }

    return result;
}
 8000b26:	2000      	movs	r0, #0
 8000b28:	bd38      	pop	{r3, r4, r5, pc}
        if( diffTime( timeMs, SwTimersArray[SwTimerIndex].startMs ) >= SwTimersArray[SwTimerIndex].timeoutMs )
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <SwTimerUpdateTimer+0x60>)
 8000b2c:	0103      	lsls	r3, r0, #4
 8000b2e:	18d5      	adds	r5, r2, r3
 8000b30:	58d1      	ldr	r1, [r2, r3]
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <SwTimerUpdateTimer+0x64>)
 8000b34:	6818      	ldr	r0, [r3, #0]
 8000b36:	f7ff ffa8 	bl	8000a8a <diffTime>
 8000b3a:	686b      	ldr	r3, [r5, #4]
 8000b3c:	4298      	cmp	r0, r3
 8000b3e:	d306      	bcc.n	8000b4e <SwTimerUpdateTimer+0x4a>
            SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_EXPIRED;
 8000b40:	2203      	movs	r2, #3
 8000b42:	722a      	strb	r2, [r5, #8]
            if( NULL != SwTimersArray[SwTimerIndex].pFuncCB )
 8000b44:	68eb      	ldr	r3, [r5, #12]
 8000b46:	b123      	cbz	r3, 8000b52 <SwTimerUpdateTimer+0x4e>
                    restartTimer = SwTimersArray[SwTimerIndex].pFuncCB(SwTimerIndex);
 8000b48:	4620      	mov	r0, r4
 8000b4a:	4798      	blx	r3
 8000b4c:	e7e9      	b.n	8000b22 <SwTimerUpdateTimer+0x1e>
    tBool restartTimer = FALSE;
 8000b4e:	2000      	movs	r0, #0
 8000b50:	e7e7      	b.n	8000b22 <SwTimerUpdateTimer+0x1e>
 8000b52:	2000      	movs	r0, #0
 8000b54:	e7e5      	b.n	8000b22 <SwTimerUpdateTimer+0x1e>
 8000b56:	2000      	movs	r0, #0
 8000b58:	e7e3      	b.n	8000b22 <SwTimerUpdateTimer+0x1e>
        SwTimerStartTimer(SwTimerIndex);
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f7ff ffbc 	bl	8000ad8 <SwTimerStartTimer>
 8000b60:	e7e1      	b.n	8000b26 <SwTimerUpdateTimer+0x22>
 8000b62:	bf00      	nop
 8000b64:	20000058 	.word	0x20000058
 8000b68:	20000068 	.word	0x20000068

08000b6c <SwTimerIrq>:
 * @brief  Interrupt request rutine for periodic tick
 * @param  None.
 * @retval None.
 **********************************************************************/
void SwTimerIrq( void )
{
 8000b6c:	b510      	push	{r4, lr}
    uint8_t SwTimerIndex = 0;

    // Increment time global variable.
    timeMs = timeMs + TIMER_PERIOD; //timeMs++;
 8000b6e:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <SwTimerIrq+0x1c>)
 8000b70:	6813      	ldr	r3, [r2, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	6013      	str	r3, [r2, #0]

    // Update timers
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8000b76:	2400      	movs	r4, #0
 8000b78:	b104      	cbz	r4, 8000b7c <SwTimerIrq+0x10>
    {
        SwTimerUpdateTimer( SwTimerIndex );
    }
}
 8000b7a:	bd10      	pop	{r4, pc}
        SwTimerUpdateTimer( SwTimerIndex );
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f7ff ffc1 	bl	8000b04 <SwTimerUpdateTimer>
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8000b82:	3401      	adds	r4, #1
 8000b84:	b2e4      	uxtb	r4, r4
 8000b86:	e7f7      	b.n	8000b78 <SwTimerIrq+0xc>
 8000b88:	20000068 	.word	0x20000068

08000b8c <pipeDeviceByteReceived>:
 * @param	data to be saved.
 * @return  None.
 ****************************************************************************/
eError pipeDeviceByteReceived(ePipes id, uint8_t data)
{
    pipes[id].buffer[pipes[id].bufferRxPtr] = data;
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <pipeDeviceByteReceived+0x30>)
 8000b8e:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8000b92:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000b96:	7943      	ldrb	r3, [r0, #5]
 8000b98:	54d1      	strb	r1, [r2, r3]
    pipes[id].bufferRxPtr = (pipes[id].bufferRxPtr + 1) % (pipes[id].bufferLength);
 8000b9a:	7943      	ldrb	r3, [r0, #5]
 8000b9c:	1c5a      	adds	r2, r3, #1
 8000b9e:	7981      	ldrb	r1, [r0, #6]
 8000ba0:	fb92 f3f1 	sdiv	r3, r2, r1
 8000ba4:	fb01 2313 	mls	r3, r1, r3, r2
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	7143      	strb	r3, [r0, #5]
    if ( pipes[id].bufferRxPtr == pipes[id].bufferStartingPosition )
 8000bac:	7902      	ldrb	r2, [r0, #4]
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d001      	beq.n	8000bb6 <pipeDeviceByteReceived+0x2a>
    {
        return RET_BUFFER_FULL;
    }

    return RET_OK;
 8000bb2:	2000      	movs	r0, #0
}
 8000bb4:	4770      	bx	lr
        return RET_BUFFER_FULL;
 8000bb6:	2008      	movs	r0, #8
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200000c0 	.word	0x200000c0

08000bc0 <pipeDevice1ByteReceived>:


/**Helper functions to access each pipe */
#ifdef IS_PIPE1
inline eError pipeDevice1ByteReceived(uint8_t data)
{
 8000bc0:	b508      	push	{r3, lr}
	return pipeDeviceByteReceived(PIPE_1, data);
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff ffe1 	bl	8000b8c <pipeDeviceByteReceived>
}
 8000bca:	bd08      	pop	{r3, pc}

08000bcc <FlashCalcOffset>:
 ****************************************************************************/
uint32_t FlashCalcOffset ( uint32_t initSector, uint32_t finalSector )
{
	uint32_t offset = 0;

	offset = (finalSector - initSector) * (FLASH_SECTOR_SIZE);
 8000bcc:	1a08      	subs	r0, r1, r0

	return offset;
}
 8000bce:	00c0      	lsls	r0, r0, #3
 8000bd0:	4770      	bx	lr
	...

08000bd4 <FlashInit>:
{
 8000bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FlashContext[i].initAddress = FLASH_BASE;
 8000bd8:	4c26      	ldr	r4, [pc, #152]	; (8000c74 <FlashInit+0xa0>)
 8000bda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bde:	6063      	str	r3, [r4, #4]
	FlashContext[i].initSector = 0;
 8000be0:	2600      	movs	r6, #0
 8000be2:	6026      	str	r6, [r4, #0]
	FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, FlashInstanceMap[0].sectors);
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <FlashInit+0xa4>)
 8000be6:	681f      	ldr	r7, [r3, #0]
 8000be8:	4639      	mov	r1, r7
 8000bea:	4630      	mov	r0, r6
 8000bec:	f7ff ffee 	bl	8000bcc <FlashCalcOffset>
 8000bf0:	60a0      	str	r0, [r4, #8]
	for (i = 1; i < NUM_OF_FLASH; i++)
 8000bf2:	2401      	movs	r4, #1
 8000bf4:	e005      	b.n	8000c02 <FlashInit+0x2e>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8000bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfa:	e00f      	b.n	8000c1c <FlashInit+0x48>
			success = RET_FAIL;
 8000bfc:	2601      	movs	r6, #1
	for (i = 1; i < NUM_OF_FLASH; i++)
 8000bfe:	3401      	adds	r4, #1
 8000c00:	b2e4      	uxtb	r4, r4
 8000c02:	2c03      	cmp	r4, #3
 8000c04:	d833      	bhi.n	8000c6e <FlashInit+0x9a>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <FlashInit+0xa8>)
 8000c08:	881a      	ldrh	r2, [r3, #0]
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d0f1      	beq.n	8000bf6 <FlashInit+0x22>
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <FlashInit+0xac>)
 8000c14:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8000c18:	0adb      	lsrs	r3, r3, #11
 8000c1a:	021b      	lsls	r3, r3, #8
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	d2ed      	bcs.n	8000bfc <FlashInit+0x28>
			FlashContext[i].initSector = sectorUsed;
 8000c20:	4d14      	ldr	r5, [pc, #80]	; (8000c74 <FlashInit+0xa0>)
 8000c22:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8000c26:	eb08 0204 	add.w	r2, r8, r4
 8000c2a:	0093      	lsls	r3, r2, #2
 8000c2c:	18e8      	adds	r0, r5, r3
 8000c2e:	50ef      	str	r7, [r5, r3]
			FlashContext[i].initAddress = FlashContext[i-1].initAddress + FlashContext[i-1].maxOffset;
 8000c30:	f104 3eff 	add.w	lr, r4, #4294967295
 8000c34:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8000c38:	eb03 010e 	add.w	r1, r3, lr
 8000c3c:	008a      	lsls	r2, r1, #2
 8000c3e:	442a      	add	r2, r5
 8000c40:	6851      	ldr	r1, [r2, #4]
 8000c42:	4473      	add	r3, lr
 8000c44:	009a      	lsls	r2, r3, #2
 8000c46:	442a      	add	r2, r5
 8000c48:	6893      	ldr	r3, [r2, #8]
 8000c4a:	440b      	add	r3, r1
 8000c4c:	6043      	str	r3, [r0, #4]
			FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, (sectorUsed + FlashInstanceMap[i].sectors));
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <FlashInit+0xa4>)
 8000c50:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000c54:	eb07 0903 	add.w	r9, r7, r3
 8000c58:	4649      	mov	r1, r9
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	f7ff ffb6 	bl	8000bcc <FlashCalcOffset>
 8000c60:	44a0      	add	r8, r4
 8000c62:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8000c66:	441d      	add	r5, r3
 8000c68:	60a8      	str	r0, [r5, #8]
			sectorUsed +=  FlashInstanceMap[i].sectors;
 8000c6a:	464f      	mov	r7, r9
 8000c6c:	e7c7      	b.n	8000bfe <FlashInit+0x2a>
}
 8000c6e:	4630      	mov	r0, r6
 8000c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c74:	200000c8 	.word	0x200000c8
 8000c78:	08003294 	.word	0x08003294
 8000c7c:	1fff75e0 	.word	0x1fff75e0
 8000c80:	003ffc00 	.word	0x003ffc00

08000c84 <FlashLock>:
 * @param
 * @return 	Success or error status.
 *
 ****************************************************************************/
eError FlashLock( void)
{
 8000c84:	b508      	push	{r3, lr}
	eError success = RET_FAIL;

	HAL_StatusTypeDef flashStatus = HAL_ERROR;

	flashStatus = HAL_FLASH_Lock();
 8000c86:	f000 fddb 	bl	8001840 <HAL_FLASH_Lock>
	if(flashStatus == HAL_OK)
 8000c8a:	b908      	cbnz	r0, 8000c90 <FlashLock+0xc>
	{
		success = RET_OK;
 8000c8c:	2000      	movs	r0, #0
	}

	return success;
}
 8000c8e:	bd08      	pop	{r3, pc}
	eError success = RET_FAIL;
 8000c90:	2001      	movs	r0, #1
 8000c92:	bd08      	pop	{r3, pc}

08000c94 <FlashUnlock>:
 * @param
 * @return 	Success or error status.
 *
 ****************************************************************************/
eError FlashUnlock( void)
{
 8000c94:	b508      	push	{r3, lr}
	eError success = RET_FAIL;

	HAL_StatusTypeDef flashStatus = HAL_ERROR;

	flashStatus = HAL_FLASH_Unlock();
 8000c96:	f000 fdbb 	bl	8001810 <HAL_FLASH_Unlock>
	if(flashStatus == HAL_OK)
 8000c9a:	b908      	cbnz	r0, 8000ca0 <FlashUnlock+0xc>
	{
		success = RET_OK;
 8000c9c:	2000      	movs	r0, #0
	}

	return success;
}
 8000c9e:	bd08      	pop	{r3, pc}
	eError success = RET_FAIL;
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	bd08      	pop	{r3, pc}

08000ca4 <FlashReadData>:
 * 			offset: from 0 - to total flash area size
 * 			flashArea: Specifies the flash area.
 * @return 	Success or error status.
 ****************************************************************************/
eError FlashReadData(tFlash flashArea, uint32_t *data, uint32_t offset)
{
 8000ca4:	b410      	push	{r4}
	eError 	success = RET_OK;

	uint32_t address = FLASH_DEFAULT_ADDRESS;

	if(offset>FlashContext[flashArea].maxOffset)
 8000ca6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000caa:	009c      	lsls	r4, r3, #2
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <FlashReadData+0x28>)
 8000cae:	4423      	add	r3, r4
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d308      	bcc.n	8000cc8 <FlashReadData+0x24>
	{
		success = RET_FAIL;
	}
	else
	{
		address = FlashContext[flashArea].initAddress + offset;
 8000cb6:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <FlashReadData+0x28>)
 8000cb8:	4423      	add	r3, r4
 8000cba:	685b      	ldr	r3, [r3, #4]
		*data = (*(uint32_t*)(address));
 8000cbc:	58d3      	ldr	r3, [r2, r3]
 8000cbe:	600b      	str	r3, [r1, #0]
	eError 	success = RET_OK;
 8000cc0:	2000      	movs	r0, #0
	}

	return success;
}
 8000cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cc6:	4770      	bx	lr
		success = RET_FAIL;
 8000cc8:	2001      	movs	r0, #1
 8000cca:	e7fa      	b.n	8000cc2 <FlashReadData+0x1e>
 8000ccc:	200000c8 	.word	0x200000c8

08000cd0 <FlashProgramData>:
 *
 * @return 	success or error status.
 *
 ****************************************************************************/
eError FlashProgramData( tFlash flashArea, uint64_t data, uint32_t offset)
{
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	461f      	mov	r7, r3
 8000cd4:	9d06      	ldr	r5, [sp, #24]
	eError 	success = RET_OK;

	HAL_StatusTypeDef status = HAL_OK;

	/* Check the offset is valid */
	if(offset>FlashContext[flashArea].maxOffset)
 8000cd6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8000cda:	0099      	lsls	r1, r3, #2
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <FlashProgramData+0x54>)
 8000cde:	440b      	add	r3, r1
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d202      	bcs.n	8000cec <FlashProgramData+0x1c>
	{
		success = RET_FAIL;
 8000ce6:	2301      	movs	r3, #1
			success = FlashLock();
		}
	}

	return success;
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cec:	4616      	mov	r6, r2
 8000cee:	4604      	mov	r4, r0
		success = FlashUnlock();
 8000cf0:	f7ff ffd0 	bl	8000c94 <FlashUnlock>
		if(success == RET_OK)
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d1f6      	bne.n	8000ce8 <FlashProgramData+0x18>
			status =  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (FlashContext[flashArea].initAddress + offset), data);
 8000cfa:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8000cfe:	0082      	lsls	r2, r0, #2
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <FlashProgramData+0x54>)
 8000d02:	4413      	add	r3, r2
 8000d04:	6859      	ldr	r1, [r3, #4]
 8000d06:	4632      	mov	r2, r6
 8000d08:	463b      	mov	r3, r7
 8000d0a:	4429      	add	r1, r5
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 fe03 	bl	8001918 <HAL_FLASH_Program>
			if(status != HAL_OK)
 8000d12:	b918      	cbnz	r0, 8000d1c <FlashProgramData+0x4c>
			success = FlashLock();
 8000d14:	f7ff ffb6 	bl	8000c84 <FlashLock>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	e7e5      	b.n	8000ce8 <FlashProgramData+0x18>
				success = FlashLock();
 8000d1c:	f7ff ffb2 	bl	8000c84 <FlashLock>
				return RET_FAIL;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e7e1      	b.n	8000ce8 <FlashProgramData+0x18>
 8000d24:	200000c8 	.word	0x200000c8

08000d28 <FlashGetPages>:
 * @param
 * @return Success or error status.
 ****************************************************************************/
uint8_t FlashGetPages( tFlash flashArea)
{
	uint8_t pages = FlashInstanceMap[flashArea].sectors / (FLASH_PAGE_SIZE / FLASH_SECTOR_SIZE);
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <FlashGetPages+0xc>)
 8000d2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	return pages;
}
 8000d2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8000d32:	4770      	bx	lr
 8000d34:	08003294 	.word	0x08003294

08000d38 <FlashGetFirstPage>:
 ****************************************************************************/
uint8_t FlashGetFirstPage( tFlash flashArea )
{
	uint8_t fPage = 0;

	if (FlashContext[flashArea].initAddress < (FLASH_BASE + FLASH_BANK_SIZE))
 8000d38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000d3c:	0082      	lsls	r2, r0, #2
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <FlashGetFirstPage+0x38>)
 8000d40:	4413      	add	r3, r2
 8000d42:	6858      	ldr	r0, [r3, #4]
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <FlashGetFirstPage+0x3c>)
 8000d46:	881a      	ldrh	r2, [r3, #0]
 8000d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d00a      	beq.n	8000d66 <FlashGetFirstPage+0x2e>
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <FlashGetFirstPage+0x40>)
 8000d52:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8000d56:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000d5a:	4283      	cmp	r3, r0
 8000d5c:	d805      	bhi.n	8000d6a <FlashGetFirstPage+0x32>
		fPage = (FlashContext[flashArea].initAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
	}
	else
	{
		/* Bank 2 */
		fPage = (FlashContext[flashArea].initAddress - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8000d5e:	1ac0      	subs	r0, r0, r3
 8000d60:	f3c0 20c7 	ubfx	r0, r0, #11, #8
	}

	return fPage;
}
 8000d64:	4770      	bx	lr
	if (FlashContext[flashArea].initAddress < (FLASH_BASE + FLASH_BANK_SIZE))
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <FlashGetFirstPage+0x44>)
 8000d68:	e7f7      	b.n	8000d5a <FlashGetFirstPage+0x22>
		fPage = (FlashContext[flashArea].initAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000d6a:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 8000d6e:	4770      	bx	lr
 8000d70:	200000c8 	.word	0x200000c8
 8000d74:	1fff75e0 	.word	0x1fff75e0
 8000d78:	003ffc00 	.word	0x003ffc00
 8000d7c:	08080000 	.word	0x08080000

08000d80 <FlashErase>:
{
 8000d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d82:	b087      	sub	sp, #28
 8000d84:	4607      	mov	r7, r0
 8000d86:	460d      	mov	r5, r1
	uint32_t FlashEraseError = 0;
 8000d88:	2600      	movs	r6, #0
 8000d8a:	9605      	str	r6, [sp, #20]
	uint32_t fPage = FlashGetFirstPage(flashArea);
 8000d8c:	f7ff ffd4 	bl	8000d38 <FlashGetFirstPage>
 8000d90:	4604      	mov	r4, r0
	uint32_t totalPages = FlashGetPages(flashArea);
 8000d92:	4638      	mov	r0, r7
 8000d94:	f7ff ffc8 	bl	8000d28 <FlashGetPages>
	FlashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8000d98:	9601      	str	r6, [sp, #4]
	FlashErase.Banks     = FLASH_BANK_1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	9302      	str	r3, [sp, #8]
	if(page == FLASH_ALL_PAGES)
 8000d9e:	2dff      	cmp	r5, #255	; 0xff
 8000da0:	d00a      	beq.n	8000db8 <FlashErase+0x38>
		if(page < (fPage + totalPages))
 8000da2:	4404      	add	r4, r0
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	d20e      	bcs.n	8000dc6 <FlashErase+0x46>
			FlashErase.NbPages = 1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	9304      	str	r3, [sp, #16]
			FlashErase.Page = page;
 8000dac:	9503      	str	r5, [sp, #12]
	eError 	success = RET_OK;
 8000dae:	2300      	movs	r3, #0
	if(success == RET_OK)
 8000db0:	b15b      	cbz	r3, 8000dca <FlashErase+0x4a>
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	b007      	add	sp, #28
 8000db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		FlashErase.NbPages = FlashGetPages(flashArea);
 8000db8:	9004      	str	r0, [sp, #16]
		FlashErase.Page = FlashGetFirstPage(flashArea);
 8000dba:	4638      	mov	r0, r7
 8000dbc:	f7ff ffbc 	bl	8000d38 <FlashGetFirstPage>
 8000dc0:	9003      	str	r0, [sp, #12]
	eError 	success = RET_OK;
 8000dc2:	4633      	mov	r3, r6
 8000dc4:	e7f4      	b.n	8000db0 <FlashErase+0x30>
			success = RET_FAIL;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e7f2      	b.n	8000db0 <FlashErase+0x30>
		success = FlashUnlock();
 8000dca:	f7ff ff63 	bl	8000c94 <FlashUnlock>
		if(success == RET_OK)
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	d1ee      	bne.n	8000db2 <FlashErase+0x32>
			flashStatus = HAL_FLASHEx_Erase(&FlashErase, &FlashEraseError);
 8000dd4:	a905      	add	r1, sp, #20
 8000dd6:	a801      	add	r0, sp, #4
 8000dd8:	f000 fe56 	bl	8001a88 <HAL_FLASHEx_Erase>
			if(flashStatus != HAL_OK)
 8000ddc:	b918      	cbnz	r0, 8000de6 <FlashErase+0x66>
			success = FlashLock();
 8000dde:	f7ff ff51 	bl	8000c84 <FlashLock>
 8000de2:	4603      	mov	r3, r0
 8000de4:	e7e5      	b.n	8000db2 <FlashErase+0x32>
				success = FlashLock();
 8000de6:	f7ff ff4d 	bl	8000c84 <FlashLock>
				return RET_FAIL;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e7e1      	b.n	8000db2 <FlashErase+0x32>
	...

08000df0 <GPIOWritePort>:
 ****************************************************************************/
eError GPIOWritePort(tGPIO port, tGPIOValue value)
{
	eError 	success = RET_OK;

	if ( value == GPIO_DEFAULT )
 8000df0:	2903      	cmp	r1, #3
 8000df2:	d015      	beq.n	8000e20 <GPIOWritePort+0x30>
{
 8000df4:	b508      	push	{r3, lr}
 8000df6:	460a      	mov	r2, r1
		success = RET_INVALID_PARAMETER;
		return success;
	}


	if ( value != GPIO_TOGGLE )
 8000df8:	2902      	cmp	r1, #2
 8000dfa:	d008      	beq.n	8000e0e <GPIOWritePort+0x1e>
	{
		HAL_GPIO_WritePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin, value);
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <GPIOWritePort+0x34>)
 8000dfe:	0100      	lsls	r0, r0, #4
 8000e00:	1819      	adds	r1, r3, r0
 8000e02:	8889      	ldrh	r1, [r1, #4]
 8000e04:	5818      	ldr	r0, [r3, r0]
 8000e06:	f000 ff8b 	bl	8001d20 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
	}

	return success;
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <GPIOWritePort+0x34>)
 8000e10:	0100      	lsls	r0, r0, #4
 8000e12:	181a      	adds	r2, r3, r0
 8000e14:	8891      	ldrh	r1, [r2, #4]
 8000e16:	5818      	ldr	r0, [r3, r0]
 8000e18:	f000 ff87 	bl	8001d2a <HAL_GPIO_TogglePin>
	return success;
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	bd08      	pop	{r3, pc}
		return success;
 8000e20:	2005      	movs	r0, #5
 8000e22:	4770      	bx	lr
 8000e24:	080032a4 	.word	0x080032a4

08000e28 <InitGPIOClock>:
 * @brief  Enable GPIO clock.
 * @param	port to enable clock.
 * @return  None.
 ****************************************************************************/
void InitGPIOClock(tGPIO port)
{
 8000e28:	b086      	sub	sp, #24
	/* Enable the GPIO Clock */
#ifdef GPIOA
	if ( GPIOInstanceMap[port].port == GPIOA ){
 8000e2a:	0103      	lsls	r3, r0, #4
 8000e2c:	4a3c      	ldr	r2, [pc, #240]	; (8000f20 <InitGPIOClock+0xf8>)
 8000e2e:	58d3      	ldr	r3, [r2, r3]
 8000e30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e34:	d01f      	beq.n	8000e76 <InitGPIOClock+0x4e>
		__GPIOA_CLK_ENABLE();
	}
#endif //GPIOA

#ifdef GPIOB
	if( GPIOInstanceMap[port].port == GPIOB ){
 8000e36:	0103      	lsls	r3, r0, #4
 8000e38:	4a39      	ldr	r2, [pc, #228]	; (8000f20 <InitGPIOClock+0xf8>)
 8000e3a:	58d2      	ldr	r2, [r2, r3]
 8000e3c:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <InitGPIOClock+0xfc>)
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d027      	beq.n	8000e92 <InitGPIOClock+0x6a>
		__GPIOB_CLK_ENABLE();
	}
#endif //GPIOB

#ifdef GPIOC
	if( GPIOInstanceMap[port].port == GPIOC ){
 8000e42:	0103      	lsls	r3, r0, #4
 8000e44:	4a36      	ldr	r2, [pc, #216]	; (8000f20 <InitGPIOClock+0xf8>)
 8000e46:	58d2      	ldr	r2, [r2, r3]
 8000e48:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <InitGPIOClock+0x100>)
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d02f      	beq.n	8000eae <InitGPIOClock+0x86>
		__GPIOC_CLK_ENABLE();
	}
#endif //GPIOC

#ifdef GPIOD
	if( GPIOInstanceMap[port].port == GPIOD ){
 8000e4e:	0103      	lsls	r3, r0, #4
 8000e50:	4a33      	ldr	r2, [pc, #204]	; (8000f20 <InitGPIOClock+0xf8>)
 8000e52:	58d2      	ldr	r2, [r2, r3]
 8000e54:	4b35      	ldr	r3, [pc, #212]	; (8000f2c <InitGPIOClock+0x104>)
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d037      	beq.n	8000eca <InitGPIOClock+0xa2>
		__GPIOD_CLK_ENABLE();
	}
#endif //GPIOD

#ifdef GPIOE
	if( GPIOInstanceMap[port].port == GPIOE ){
 8000e5a:	0103      	lsls	r3, r0, #4
 8000e5c:	4a30      	ldr	r2, [pc, #192]	; (8000f20 <InitGPIOClock+0xf8>)
 8000e5e:	58d2      	ldr	r2, [r2, r3]
 8000e60:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <InitGPIOClock+0x108>)
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d03f      	beq.n	8000ee6 <InitGPIOClock+0xbe>
		__GPIOG_CLK_ENABLE();
	}
#endif //GPIOG

#ifdef GPIOH
	if( GPIOInstanceMap[port].port == GPIOH ){
 8000e66:	0100      	lsls	r0, r0, #4
 8000e68:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <InitGPIOClock+0xf8>)
 8000e6a:	581a      	ldr	r2, [r3, r0]
 8000e6c:	4b31      	ldr	r3, [pc, #196]	; (8000f34 <InitGPIOClock+0x10c>)
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d047      	beq.n	8000f02 <InitGPIOClock+0xda>
		__GPIOI_CLK_ENABLE();
	}
#endif //GPIOI


}
 8000e72:	b006      	add	sp, #24
 8000e74:	4770      	bx	lr
		__GPIOA_CLK_ENABLE();
 8000e76:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000e7a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e80:	f042 0201 	orr.w	r2, r2, #1
 8000e84:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	9b00      	ldr	r3, [sp, #0]
 8000e90:	e7d1      	b.n	8000e36 <InitGPIOClock+0xe>
		__GPIOB_CLK_ENABLE();
 8000e92:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000e96:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8000e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e9c:	f042 0202 	orr.w	r2, r2, #2
 8000ea0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	9b01      	ldr	r3, [sp, #4]
 8000eac:	e7c9      	b.n	8000e42 <InitGPIOClock+0x1a>
		__GPIOC_CLK_ENABLE();
 8000eae:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000eb2:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000eb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb8:	f042 0204 	orr.w	r2, r2, #4
 8000ebc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	9b02      	ldr	r3, [sp, #8]
 8000ec8:	e7c1      	b.n	8000e4e <InitGPIOClock+0x26>
		__GPIOD_CLK_ENABLE();
 8000eca:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000ece:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000ed2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ed4:	f042 0208 	orr.w	r2, r2, #8
 8000ed8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	9303      	str	r3, [sp, #12]
 8000ee2:	9b03      	ldr	r3, [sp, #12]
 8000ee4:	e7b9      	b.n	8000e5a <InitGPIOClock+0x32>
		__GPIOE_CLK_ENABLE();
 8000ee6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000eea:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000eee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ef0:	f042 0210 	orr.w	r2, r2, #16
 8000ef4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef8:	f003 0310 	and.w	r3, r3, #16
 8000efc:	9304      	str	r3, [sp, #16]
 8000efe:	9b04      	ldr	r3, [sp, #16]
 8000f00:	e7b1      	b.n	8000e66 <InitGPIOClock+0x3e>
		__GPIOH_CLK_ENABLE();
 8000f02:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000f06:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f10:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f18:	9305      	str	r3, [sp, #20]
 8000f1a:	9b05      	ldr	r3, [sp, #20]
}
 8000f1c:	e7a9      	b.n	8000e72 <InitGPIOClock+0x4a>
 8000f1e:	bf00      	nop
 8000f20:	080032a4 	.word	0x080032a4
 8000f24:	48000400 	.word	0x48000400
 8000f28:	48000800 	.word	0x48000800
 8000f2c:	48000c00 	.word	0x48000c00
 8000f30:	48001000 	.word	0x48001000
 8000f34:	48001c00 	.word	0x48001c00

08000f38 <GPIOInit>:
{
 8000f38:	b570      	push	{r4, r5, r6, lr}
 8000f3a:	b086      	sub	sp, #24
	for (port = 0; port < NUM_OF_GPIO; port++)
 8000f3c:	2400      	movs	r4, #0
	eError 				success = RET_OK;
 8000f3e:	4626      	mov	r6, r4
	for (port = 0; port < NUM_OF_GPIO; port++)
 8000f40:	e001      	b.n	8000f46 <GPIOInit+0xe>
 8000f42:	3401      	adds	r4, #1
 8000f44:	b2e4      	uxtb	r4, r4
 8000f46:	2c08      	cmp	r4, #8
 8000f48:	d81b      	bhi.n	8000f82 <GPIOInit+0x4a>
		InitGPIOClock(port);
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f7ff ff6c 	bl	8000e28 <InitGPIOClock>
        GPIO_InitStructure.Pin =  	(uint32_t)GPIOInstanceMap[port].pin;
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <GPIOInit+0x50>)
 8000f52:	0123      	lsls	r3, r4, #4
 8000f54:	18d5      	adds	r5, r2, r3
 8000f56:	88a9      	ldrh	r1, [r5, #4]
 8000f58:	9101      	str	r1, [sp, #4]
		GPIO_InitStructure.Mode = 	(uint32_t)GPIOInstanceMap[port].mode;
 8000f5a:	68a9      	ldr	r1, [r5, #8]
 8000f5c:	9102      	str	r1, [sp, #8]
		GPIO_InitStructure.Speed = 	(uint32_t)GPIOInstanceMap[port].speed;
 8000f5e:	7b29      	ldrb	r1, [r5, #12]
 8000f60:	9104      	str	r1, [sp, #16]
		GPIO_InitStructure.Pull = 	(uint32_t)GPIOInstanceMap[port].pupd;
 8000f62:	7b69      	ldrb	r1, [r5, #13]
 8000f64:	9103      	str	r1, [sp, #12]
		GPIO_InitStructure.Alternate = (uint32_t)GPIOInstanceMap[port].alternate;
 8000f66:	7ba9      	ldrb	r1, [r5, #14]
 8000f68:	9105      	str	r1, [sp, #20]
		HAL_GPIO_Init(GPIOInstanceMap[port].port, &GPIO_InitStructure);
 8000f6a:	a901      	add	r1, sp, #4
 8000f6c:	58d0      	ldr	r0, [r2, r3]
 8000f6e:	f000 fe07 	bl	8001b80 <HAL_GPIO_Init>
		if ( GPIOInstanceMap[port].initialValue != GPIO_DEFAULT )
 8000f72:	7be9      	ldrb	r1, [r5, #15]
 8000f74:	2903      	cmp	r1, #3
 8000f76:	d0e4      	beq.n	8000f42 <GPIOInit+0xa>
			success = GPIOWritePort(port, GPIOInstanceMap[port].initialValue);
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f7ff ff39 	bl	8000df0 <GPIOWritePort>
 8000f7e:	4606      	mov	r6, r0
 8000f80:	e7df      	b.n	8000f42 <GPIOInit+0xa>
}
 8000f82:	4630      	mov	r0, r6
 8000f84:	b006      	add	sp, #24
 8000f86:	bd70      	pop	{r4, r5, r6, pc}
 8000f88:	080032a4 	.word	0x080032a4

08000f8c <interruptsInit>:
 * @brief  Init interrupts driver
 * 		   Configure all IRQ Channels declared on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsInit( void )
{
 8000f8c:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 8000f8e:	2400      	movs	r4, #0
 8000f90:	e001      	b.n	8000f96 <interruptsInit+0xa>
 8000f92:	3401      	adds	r4, #1
 8000f94:	b2e4      	uxtb	r4, r4
 8000f96:	2c0d      	cmp	r4, #13
 8000f98:	d80c      	bhi.n	8000fb4 <interruptsInit+0x28>
	{
		if (IS_SETTABLE_PRIORITY_IRQ(interruptsInstanceMap[i].IRQn))
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <interruptsInit+0x2c>)
 8000f9c:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8000fa0:	f110 0f05 	cmn.w	r0, #5
 8000fa4:	dbf5      	blt.n	8000f92 <interruptsInit+0x6>
		{
			HAL_NVIC_SetPriority(interruptsInstanceMap[i].IRQn, (uint32_t)interruptsInstanceMap[i].PreemptPriority, (uint32_t)interruptsInstanceMap[i].SubPriority);
 8000fa6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000faa:	789a      	ldrb	r2, [r3, #2]
 8000fac:	7859      	ldrb	r1, [r3, #1]
 8000fae:	f000 faf5 	bl	800159c <HAL_NVIC_SetPriority>
 8000fb2:	e7ee      	b.n	8000f92 <interruptsInit+0x6>
		}
	}
	return result;
}
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	bd10      	pop	{r4, pc}
 8000fb8:	20000000 	.word	0x20000000

08000fbc <interruptsStart>:
 * @brief  Start interrupts driver
 * 		   Enable all IRQ Channels configured as ENABLE on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsStart( void )
{
 8000fbc:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	e001      	b.n	8000fc6 <interruptsStart+0xa>
 8000fc2:	3401      	adds	r4, #1
 8000fc4:	b2e4      	uxtb	r4, r4
 8000fc6:	2c0d      	cmp	r4, #13
 8000fc8:	d80d      	bhi.n	8000fe6 <interruptsStart+0x2a>
	{
		if (interruptsInstanceMap[i].State == IRQ_ENABLE)
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <interruptsStart+0x30>)
 8000fcc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000fd0:	78db      	ldrb	r3, [r3, #3]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d1f5      	bne.n	8000fc2 <interruptsStart+0x6>
		{
			if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[i].IRQn))
 8000fd6:	4b05      	ldr	r3, [pc, #20]	; (8000fec <interruptsStart+0x30>)
 8000fd8:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	dbf0      	blt.n	8000fc2 <interruptsStart+0x6>
			{
				HAL_NVIC_EnableIRQ(interruptsInstanceMap[i].IRQn);
 8000fe0:	f000 fb0e 	bl	8001600 <HAL_NVIC_EnableIRQ>
 8000fe4:	e7ed      	b.n	8000fc2 <interruptsStart+0x6>

		}
	}

	return result;
}
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	bd10      	pop	{r4, pc}
 8000fea:	bf00      	nop
 8000fec:	20000000 	.word	0x20000000

08000ff0 <interruptsEnable>:
 * @param	None.
 * @return  None.
 ****************************************************************************/
void interruptsEnable( void )
{
	if (countIrqAllDisable<=1)
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <interruptsEnable+0x24>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d906      	bls.n	8001008 <interruptsEnable+0x18>
		countIrqAllDisable=0;
		__enable_irq();
	}
	else
	{
		countIrqAllDisable--;
 8000ffa:	4a06      	ldr	r2, [pc, #24]	; (8001014 <interruptsEnable+0x24>)
 8000ffc:	8813      	ldrh	r3, [r2, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	3b01      	subs	r3, #1
 8001002:	b29b      	uxth	r3, r3
 8001004:	8013      	strh	r3, [r2, #0]
 8001006:	4770      	bx	lr
		countIrqAllDisable=0;
 8001008:	2200      	movs	r2, #0
 800100a:	4b02      	ldr	r3, [pc, #8]	; (8001014 <interruptsEnable+0x24>)
 800100c:	801a      	strh	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800100e:	b662      	cpsie	i
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	2000006c 	.word	0x2000006c

08001018 <interruptsDisable>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
 * @return  None.
 ****************************************************************************/
void interruptsDisable( void )
{
	__disable_irq();
	countIrqAllDisable++;
 800101a:	4a03      	ldr	r2, [pc, #12]	; (8001028 <interruptsDisable+0x10>)
 800101c:	8813      	ldrh	r3, [r2, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	3301      	adds	r3, #1
 8001022:	b29b      	uxth	r3, r3
 8001024:	8013      	strh	r3, [r2, #0]
 8001026:	4770      	bx	lr
 8001028:	2000006c 	.word	0x2000006c

0800102c <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 800102c:	4770      	bx	lr

0800102e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800102e:	e7fe      	b.n	800102e <HardFault_Handler>

08001030 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler>

08001032 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler>

08001034 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001034:	e7fe      	b.n	8001034 <UsageFault_Handler>

08001036 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001038:	4770      	bx	lr

0800103a <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 800103a:	b508      	push	{r3, lr}

	HAL_SYSTICK_IRQHandler();
 800103c:	f000 fb12 	bl	8001664 <HAL_SYSTICK_IRQHandler>
 8001040:	bd08      	pop	{r3, pc}

08001042 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 8001042:	4770      	bx	lr

08001044 <EXTI0_IRQHandler>:
 * @brief  This function handles external line 0 and 1 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
 8001044:	4770      	bx	lr

08001046 <EXTI1_IRQHandler>:
 * @brief  This function handles external line 0 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void)
{
 8001046:	4770      	bx	lr

08001048 <EXTI9_5_IRQHandler>:
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
}

void EXTI9_5_IRQHandler(void)
{
 8001048:	b508      	push	{r3, lr}
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800104a:	2020      	movs	r0, #32
 800104c:	f000 fe72 	bl	8001d34 <HAL_GPIO_EXTI_IRQHandler>
 8001050:	bd08      	pop	{r3, pc}

08001052 <USART1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USART1_IRQHandler(void)
{
 8001052:	b508      	push	{r3, lr}
	HAL_UART1_Callback();
 8001054:	f000 f820 	bl	8001098 <HAL_UART1_Callback>
 8001058:	bd08      	pop	{r3, pc}

0800105a <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */

void USART2_IRQHandler(void)
{
 800105a:	b508      	push	{r3, lr}
	HAL_UART2_Callback();
 800105c:	f000 f81d 	bl	800109a <HAL_UART2_Callback>
 8001060:	bd08      	pop	{r3, pc}

08001062 <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C1_EV_IRQHandler(void)
{
 8001062:	b508      	push	{r3, lr}
	HAL_I2C1_Callback();
 8001064:	f000 f81e 	bl	80010a4 <HAL_I2C1_Callback>
 8001068:	bd08      	pop	{r3, pc}

0800106a <I2C2_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C2_EV_IRQHandler(void)
{
 800106a:	b508      	push	{r3, lr}
	HAL_I2C2_Callback();
 800106c:	f000 f81b 	bl	80010a6 <HAL_I2C2_Callback>
 8001070:	bd08      	pop	{r3, pc}

08001072 <SPI1_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_IRQHandler(void)
{
 8001072:	b508      	push	{r3, lr}
    HAL_SPI1_Callback();
 8001074:	f000 f818 	bl	80010a8 <HAL_SPI1_Callback>
 8001078:	bd08      	pop	{r3, pc}

0800107a <SPI2_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI2_IRQHandler(void)
{
 800107a:	b508      	push	{r3, lr}
    HAL_SPI2_Callback();
 800107c:	f000 f815 	bl	80010aa <HAL_SPI2_Callback>
 8001080:	bd08      	pop	{r3, pc}

08001082 <TIM2_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8001082:	4770      	bx	lr

08001084 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8001084:	4770      	bx	lr

08001086 <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8001086:	b508      	push	{r3, lr}
	HAL_IncTick();
 8001088:	f000 fa7a 	bl	8001580 <HAL_IncTick>

	SchedulerProcessesAutoEnable();
 800108c:	f7ff fbd8 	bl	8000840 <SchedulerProcessesAutoEnable>
#ifdef SW_TIMER_AVAILABLE
	SwTimerIrq();
 8001090:	f7ff fd6c 	bl	8000b6c <SwTimerIrq>
 8001094:	bd08      	pop	{r3, pc}

08001096 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001096:	4770      	bx	lr

08001098 <HAL_UART1_Callback>:
  * @brief UART1 callback
  * @param None
  * @retval None
  */
void HAL_UART1_Callback(void)
{
 8001098:	4770      	bx	lr

0800109a <HAL_UART2_Callback>:
  * @brief UART2 callback
  * @param None
  * @retval None
  */
void HAL_UART2_Callback(void)
{
 800109a:	b508      	push	{r3, lr}
#ifdef IS_UART2
	uartDriverMainIRQHandler(UART_2);
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f99d 	bl	80013dc <uartDriverMainIRQHandler>
 80010a2:	bd08      	pop	{r3, pc}

080010a4 <HAL_I2C1_Callback>:
#endif
}


void HAL_I2C1_Callback(void)
{
 80010a4:	4770      	bx	lr

080010a6 <HAL_I2C2_Callback>:
	i2cDriverMainIRQHandler(I2C_1);
#endif
}

void HAL_I2C2_Callback(void)
{
 80010a6:	4770      	bx	lr

080010a8 <HAL_SPI1_Callback>:
	i2cDriverMainIRQHandler(I2C_2);
#endif
}

void HAL_SPI1_Callback(void)
{
 80010a8:	4770      	bx	lr

080010aa <HAL_SPI2_Callback>:
    spiDriverMainIRQHandler(SPI_1);
#endif
}

void HAL_SPI2_Callback(void)
{
 80010aa:	4770      	bx	lr

080010ac <storePowerUpReason>:
 *
 ****************************************************************************/
static void storePowerUpReason( void )
{
	/* Check if the StandBy flag is set */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <storePowerUpReason+0xa8>)
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010b4:	d126      	bne.n	8001104 <storePowerUpReason+0x58>

		powerUpReason = SYSTEM_RESET_POWER_UP;
	}
	else
	{
		if ( __HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET )
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <storePowerUpReason+0xac>)
 80010b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010bc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80010c0:	d12f      	bne.n	8001122 <storePowerUpReason+0x76>
		{
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
		}
		else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <storePowerUpReason+0xac>)
 80010c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80010cc:	d12d      	bne.n	800112a <storePowerUpReason+0x7e>
		{
			powerUpReason = SYSTEM_RESET_WATCHDOG;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET )
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <storePowerUpReason+0xac>)
 80010d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010d8:	d12b      	bne.n	8001132 <storePowerUpReason+0x86>
		{
			powerUpReason = SYSTEM_RESET_SOFTWARE;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET )
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <storePowerUpReason+0xac>)
 80010dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e0:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80010e4:	d129      	bne.n	800113a <storePowerUpReason+0x8e>
		{
			powerUpReason = SYSTEM_RESET_POWER_UP;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET )
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <storePowerUpReason+0xac>)
 80010e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80010f0:	d127      	bne.n	8001142 <storePowerUpReason+0x96>
		{
			powerUpReason = SYSTEM_BOR_RESET;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET )
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <storePowerUpReason+0xac>)
 80010f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db26      	blt.n	800114a <storePowerUpReason+0x9e>
		{
			powerUpReason = SYSTEM_LOW_POWER_RESET;
		}
		else
		{
			powerUpReason = SYSTEM_FIRST_POWER_UP;
 80010fc:	2200      	movs	r2, #0
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <storePowerUpReason+0xb0>)
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	e006      	b.n	8001112 <storePowerUpReason+0x66>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8001104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <storePowerUpReason+0xa8>)
 800110a:	619a      	str	r2, [r3, #24]
		powerUpReason = SYSTEM_RESET_POWER_UP;
 800110c:	2201      	movs	r2, #1
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <storePowerUpReason+0xb0>)
 8001110:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001112:	4a11      	ldr	r2, [pc, #68]	; (8001158 <storePowerUpReason+0xac>)
 8001114:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001118:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800111c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001120:	4770      	bx	lr
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
 8001122:	2207      	movs	r2, #7
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <storePowerUpReason+0xb0>)
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e7f3      	b.n	8001112 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_WATCHDOG;
 800112a:	2202      	movs	r2, #2
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <storePowerUpReason+0xb0>)
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e7ef      	b.n	8001112 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_SOFTWARE;
 8001132:	2203      	movs	r2, #3
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <storePowerUpReason+0xb0>)
 8001136:	701a      	strb	r2, [r3, #0]
 8001138:	e7eb      	b.n	8001112 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_POWER_UP;
 800113a:	2201      	movs	r2, #1
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <storePowerUpReason+0xb0>)
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e7e7      	b.n	8001112 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_BOR_RESET;
 8001142:	2204      	movs	r2, #4
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <storePowerUpReason+0xb0>)
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e7e3      	b.n	8001112 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_LOW_POWER_RESET;
 800114a:	2206      	movs	r2, #6
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <storePowerUpReason+0xb0>)
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e7df      	b.n	8001112 <storePowerUpReason+0x66>
 8001152:	bf00      	nop
 8001154:	40007000 	.word	0x40007000
 8001158:	40021000 	.word	0x40021000
 800115c:	2000006e 	.word	0x2000006e

08001160 <watchdogInit>:
	{
		result = WWDGInit();
	}
#endif
	return result;
}
 8001160:	2000      	movs	r0, #0
 8001162:	4770      	bx	lr

08001164 <SystemClock_Config>:
 *
 * @return  None.
 *
 ****************************************************************************/
static eError SystemClock_Config(void)
{
 8001164:	b500      	push	{lr}
 8001166:	b099      	sub	sp, #100	; 0x64
	RCC_PeriphCLKInitTypeDef PeriphClkInit;
#endif

	do
	{
		RCC_OscInitStruct.OscillatorType = SystemMap.OscillatorType;
 8001168:	4b2c      	ldr	r3, [pc, #176]	; (800121c <SystemClock_Config+0xb8>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	9207      	str	r2, [sp, #28]
		RCC_OscInitStruct.HSEState	= SystemMap.HSEState;
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	9208      	str	r2, [sp, #32]
		RCC_OscInitStruct.HSICalibrationValue = SystemMap.HSICalibrationValue;
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	920b      	str	r2, [sp, #44]	; 0x2c
		RCC_OscInitStruct.HSIState 	= SystemMap.HSIState;
 8001176:	68da      	ldr	r2, [r3, #12]
 8001178:	920a      	str	r2, [sp, #40]	; 0x28
		RCC_OscInitStruct.LSEState = SystemMap.LSEState;
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	9209      	str	r2, [sp, #36]	; 0x24
		RCC_OscInitStruct.LSIState = SystemMap.LSIState;
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	920c      	str	r2, [sp, #48]	; 0x30
		RCC_OscInitStruct.MSIState = SystemMap.MSIState;
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	920d      	str	r2, [sp, #52]	; 0x34
		RCC_OscInitStruct.MSICalibrationValue = SystemMap.MSICalibrationValue;
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	920e      	str	r2, [sp, #56]	; 0x38
		RCC_OscInitStruct.MSIClockRange= SystemMap.MSIClockRange;
 800118a:	6a1a      	ldr	r2, [r3, #32]
 800118c:	920f      	str	r2, [sp, #60]	; 0x3c

		RCC_OscInitStruct.PLL.PLLState 	= SystemMap.PLLState;
 800118e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001190:	9211      	str	r2, [sp, #68]	; 0x44
		RCC_OscInitStruct.PLL.PLLSource = SystemMap.PLLSource;
 8001192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001194:	9212      	str	r2, [sp, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLM 		= SystemMap.PLLM;
 8001196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001198:	9213      	str	r2, [sp, #76]	; 0x4c
		RCC_OscInitStruct.PLL.PLLN		= SystemMap.PLLN;
 800119a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119c:	9214      	str	r2, [sp, #80]	; 0x50
		RCC_OscInitStruct.PLL.PLLP		= SystemMap.PLLP;
 800119e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a0:	9215      	str	r2, [sp, #84]	; 0x54
		RCC_OscInitStruct.PLL.PLLQ		= SystemMap.PLLQ;
 80011a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011a4:	9216      	str	r2, [sp, #88]	; 0x58
		RCC_OscInitStruct.PLL.PLLR		= SystemMap.PLLR;
 80011a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a8:	9317      	str	r3, [sp, #92]	; 0x5c
	#if (INDEPENDENT_WATCHDOG == 1)//Assure that LSI is configured ON (needed by IWDG)
		RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_LSI;
		RCC_OscInitStruct.LSIState |= RCC_LSI_ON;
	#endif

		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	a807      	add	r0, sp, #28
 80011ac:	f000 fee8 	bl	8001f80 <HAL_RCC_OscConfig>
 80011b0:	b118      	cbz	r0, 80011ba <SystemClock_Config+0x56>
		{
			result = RET_FAIL;
 80011b2:	2001      	movs	r0, #1
		__HAL_RCC_SYSCFG_CLK_ENABLE();
	} while (0);

	return result;

}
 80011b4:	b019      	add	sp, #100	; 0x64
 80011b6:	f85d fb04 	ldr.w	pc, [sp], #4
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011ba:	230f      	movs	r3, #15
 80011bc:	9302      	str	r3, [sp, #8]
		RCC_ClkInitStruct.SYSCLKSource 	 = SystemMap.SYSCLKSource;
 80011be:	4b17      	ldr	r3, [pc, #92]	; (800121c <SystemClock_Config+0xb8>)
 80011c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c2:	9203      	str	r2, [sp, #12]
		RCC_ClkInitStruct.AHBCLKDivider  = SystemMap.AHBCLKDivider;
 80011c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011c6:	9204      	str	r2, [sp, #16]
		RCC_ClkInitStruct.APB1CLKDivider = SystemMap.APB1CLKDivider;
 80011c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011ca:	9205      	str	r2, [sp, #20]
		RCC_ClkInitStruct.APB2CLKDivider = SystemMap.APB2CLKDivider;
 80011cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ce:	9306      	str	r3, [sp, #24]
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011d0:	2104      	movs	r1, #4
 80011d2:	a802      	add	r0, sp, #8
 80011d4:	f001 f9ba 	bl	800254c <HAL_RCC_ClockConfig>
 80011d8:	b108      	cbz	r0, 80011de <SystemClock_Config+0x7a>
			result = RET_FAIL;
 80011da:	2001      	movs	r0, #1
 80011dc:	e7ea      	b.n	80011b4 <SystemClock_Config+0x50>
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011e2:	f000 fdbd 	bl	8001d60 <HAL_PWREx_ControlVoltageScaling>
 80011e6:	b108      	cbz	r0, 80011ec <SystemClock_Config+0x88>
			result = RET_FAIL;
 80011e8:	2001      	movs	r0, #1
 80011ea:	e7e3      	b.n	80011b4 <SystemClock_Config+0x50>
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80011ec:	f001 fa84 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <SystemClock_Config+0xbc>)
 80011f2:	fba3 3000 	umull	r3, r0, r3, r0
 80011f6:	0980      	lsrs	r0, r0, #6
 80011f8:	f000 fa0e 	bl	8001618 <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011fc:	2004      	movs	r0, #4
 80011fe:	f000 fa21 	bl	8001644 <HAL_SYSTICK_CLKSourceConfig>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <SystemClock_Config+0xc0>)
 8001204:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	661a      	str	r2, [r3, #96]	; 0x60
 800120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	9b01      	ldr	r3, [sp, #4]
	eError result = RET_OK;
 8001216:	2000      	movs	r0, #0
 8001218:	e7cc      	b.n	80011b4 <SystemClock_Config+0x50>
 800121a:	bf00      	nop
 800121c:	08003334 	.word	0x08003334
 8001220:	10624dd3 	.word	0x10624dd3
 8001224:	40021000 	.word	0x40021000

08001228 <stm32L4Init>:
{
 8001228:	b508      	push	{r3, lr}
	storePowerUpReason();
 800122a:	f7ff ff3f 	bl	80010ac <storePowerUpReason>
	result = SystemClock_Config();
 800122e:	f7ff ff99 	bl	8001164 <SystemClock_Config>
	if (result == RET_OK)
 8001232:	4603      	mov	r3, r0
 8001234:	b910      	cbnz	r0, 800123c <stm32L4Init+0x14>
			result = watchdogInit();
 8001236:	f7ff ff93 	bl	8001160 <watchdogInit>
 800123a:	4603      	mov	r3, r0
}
 800123c:	4618      	mov	r0, r3
 800123e:	bd08      	pop	{r3, pc}

08001240 <systemGetCLkFreq>:
 * @brief   Get the System CLK Frequency
 * @param   ClockFrequency.
 * @return  eError.
 ****************************************************************************/
eError systemGetCLkFreq(uint32_t *ClockFrequency)
{
 8001240:	b510      	push	{r4, lr}
 8001242:	4604      	mov	r4, r0
    eError result = RET_OK;

    *ClockFrequency = HAL_RCC_GetHCLKFreq();
 8001244:	f001 fa58 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8001248:	6020      	str	r0, [r4, #0]

    return result;
}
 800124a:	2000      	movs	r0, #0
 800124c:	bd10      	pop	{r4, pc}

0800124e <systemPreConfiguration>:
 *    then it will jump to execute the interrupt handler located in the Flash
 * @param	None.
 * @return  None.
 ****************************************************************************/
void systemPreConfiguration( void )
{
 800124e:	4770      	bx	lr

08001250 <HAL_UART_MspInit>:
 * @brief HAL callback for UART initialization. Starts the clocks
 * @todo Also starts interrupts, but it's not supposed to do so
 * @param huart ST Huart handler
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001250:	b082      	sub	sp, #8
    if(huart->Instance == USART1){
 8001252:	6803      	ldr	r3, [r0, #0]
 8001254:	4a11      	ldr	r2, [pc, #68]	; (800129c <HAL_UART_MspInit+0x4c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d004      	beq.n	8001264 <HAL_UART_MspInit+0x14>
        __HAL_RCC_USART1_CLK_ENABLE();
    }
    else if (huart->Instance == USART2){
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_UART_MspInit+0x50>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00c      	beq.n	800127a <HAL_UART_MspInit+0x2a>

#if defined(MON_UART_RX_IT)
    /* Enable the UART Data Register not empty Interrupt. ALWAYS ENABLED */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
#endif
}
 8001260:	b002      	add	sp, #8
 8001262:	4770      	bx	lr
        __HAL_RCC_USART1_CLK_ENABLE();
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_UART_MspInit+0x54>)
 8001266:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001268:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800126c:	661a      	str	r2, [r3, #96]	; 0x60
 800126e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	9b00      	ldr	r3, [sp, #0]
 8001278:	e009      	b.n	800128e <HAL_UART_MspInit+0x3e>
        __HAL_RCC_USART2_CLK_ENABLE();
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_UART_MspInit+0x54>)
 800127c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800127e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001282:	659a      	str	r2, [r3, #88]	; 0x58
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	9b01      	ldr	r3, [sp, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800128e:	6802      	ldr	r2, [r0, #0]
 8001290:	6813      	ldr	r3, [r2, #0]
 8001292:	f043 0320 	orr.w	r3, r3, #32
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e7e2      	b.n	8001260 <HAL_UART_MspInit+0x10>
 800129a:	bf00      	nop
 800129c:	40013800 	.word	0x40013800
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40021000 	.word	0x40021000

080012a8 <HAL_UART_MspDeInit>:
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
    if(huart->Instance == USART1){
 80012a8:	6803      	ldr	r3, [r0, #0]
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <HAL_UART_MspDeInit+0x38>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d003      	beq.n	80012b8 <HAL_UART_MspDeInit+0x10>
        __HAL_RCC_USART1_FORCE_RESET();
        __HAL_RCC_USART1_RELEASE_RESET();
    }
    else if (huart->Instance == USART2){
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <HAL_UART_MspDeInit+0x3c>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00a      	beq.n	80012cc <HAL_UART_MspDeInit+0x24>
 80012b6:	4770      	bx	lr
        __HAL_RCC_USART1_FORCE_RESET();
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_UART_MspDeInit+0x40>)
 80012ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_RCC_USART1_RELEASE_RESET();
 80012c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
 80012ca:	4770      	bx	lr
        __HAL_RCC_USART2_FORCE_RESET();
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_UART_MspDeInit+0x40>)
 80012ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012d4:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_USART2_RELEASE_RESET();
 80012d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80012dc:	639a      	str	r2, [r3, #56]	; 0x38
    else if (huart->Instance == USART6){
        __HAL_RCC_USART6_FORCE_RESET();
        __HAL_RCC_USART6_RELEASE_RESET();
    }
#endif
}
 80012de:	e7ea      	b.n	80012b6 <HAL_UART_MspDeInit+0xe>
 80012e0:	40013800 	.word	0x40013800
 80012e4:	40004400 	.word	0x40004400
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_UART_TxCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
****************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80012ec:	b510      	push	{r4, lr}
 80012ee:	b082      	sub	sp, #8
	uint8_t byte;
	if ( GetQueuePendingBytes(&uartCBuffers[uartPortIrq].txBuffer) != 0)
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <HAL_UART_TxCpltCallback+0x70>)
 80012f2:	f993 3000 	ldrsb.w	r3, [r3]
 80012f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80012fa:	00d8      	lsls	r0, r3, #3
 80012fc:	3008      	adds	r0, #8
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_UART_TxCpltCallback+0x74>)
 8001300:	4418      	add	r0, r3
 8001302:	3004      	adds	r0, #4
 8001304:	f7ff fbba 	bl	8000a7c <GetQueuePendingBytes>
 8001308:	b968      	cbnz	r0, 8001326 <HAL_UART_TxCpltCallback+0x3a>
		 byte = (uint8_t)(GetQueueByte(&uartCBuffers[uartPortIrq].txBuffer) & (uint8_t)0xFF);
		 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPortIrq], &byte, 1);
	}
	else
	{
		 __HAL_UART_DISABLE_IT(&ST_UartHandlers[uartPortIrq], UART_IT_TXE);
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <HAL_UART_TxCpltCallback+0x70>)
 800130c:	f993 3000 	ldrsb.w	r3, [r3]
 8001310:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001314:	00da      	lsls	r2, r3, #3
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_UART_TxCpltCallback+0x78>)
 8001318:	589a      	ldr	r2, [r3, r2]
 800131a:	6813      	ldr	r3, [r2, #0]
 800131c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001320:	6013      	str	r3, [r2, #0]
	}
}
 8001322:	b002      	add	sp, #8
 8001324:	bd10      	pop	{r4, pc}
		 byte = (uint8_t)(GetQueueByte(&uartCBuffers[uartPortIrq].txBuffer) & (uint8_t)0xFF);
 8001326:	4c0d      	ldr	r4, [pc, #52]	; (800135c <HAL_UART_TxCpltCallback+0x70>)
 8001328:	f994 3000 	ldrsb.w	r3, [r4]
 800132c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001330:	00d8      	lsls	r0, r3, #3
 8001332:	3008      	adds	r0, #8
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_UART_TxCpltCallback+0x74>)
 8001336:	4418      	add	r0, r3
 8001338:	3004      	adds	r0, #4
 800133a:	f7ff fb89 	bl	8000a50 <GetQueueByte>
 800133e:	a902      	add	r1, sp, #8
 8001340:	f801 0d01 	strb.w	r0, [r1, #-1]!
		 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPortIrq], &byte, 1);
 8001344:	f994 3000 	ldrsb.w	r3, [r4]
 8001348:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800134c:	00d8      	lsls	r0, r3, #3
 800134e:	2201      	movs	r2, #1
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <HAL_UART_TxCpltCallback+0x78>)
 8001352:	4418      	add	r0, r3
 8001354:	f001 fa6e 	bl	8002834 <HAL_UART_Transmit_IT>
 8001358:	e7e3      	b.n	8001322 <HAL_UART_TxCpltCallback+0x36>
 800135a:	bf00      	nop
 800135c:	2000006f 	.word	0x2000006f
 8001360:	200000f8 	.word	0x200000f8
 8001364:	20000118 	.word	0x20000118

08001368 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callback.
 * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 ****************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001368:	b510      	push	{r4, lr}
 800136a:	4604      	mov	r4, r0
	const tUartInstanceMap* muart; //Montseny handler

	muart = &UARTInstanceMap[uartPortIrq];
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_UART_RxCpltCallback+0x60>)
 800136e:	f993 2000 	ldrsb.w	r2, [r3]

	//IF callback defined use it. Otherwise, default behaviour
	if(muart->rxCallback != NULL){
 8001372:	232c      	movs	r3, #44	; 0x2c
 8001374:	4915      	ldr	r1, [pc, #84]	; (80013cc <HAL_UART_RxCpltCallback+0x64>)
 8001376:	fb03 1302 	mla	r3, r3, r2, r1
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	b143      	cbz	r3, 8001390 <HAL_UART_RxCpltCallback+0x28>
		muart->rxCallback(byteRxBuffer);
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <HAL_UART_RxCpltCallback+0x68>)
 8001380:	7810      	ldrb	r0, [r2, #0]
 8001382:	4798      	blx	r3
		else{
			uartStatus[uartPortIrq] = RET_BUFFER_FULL;
		}
	}

	 HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8001384:	2201      	movs	r2, #1
 8001386:	4912      	ldr	r1, [pc, #72]	; (80013d0 <HAL_UART_RxCpltCallback+0x68>)
 8001388:	4620      	mov	r0, r4
 800138a:	f001 fa8f 	bl	80028ac <HAL_UART_Receive_IT>
 800138e:	bd10      	pop	{r4, pc}
		if(GetQueueFreeBytes(&uartCBuffers[uartPortIrq].rxBuffer) > 0){
 8001390:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001394:	00d3      	lsls	r3, r2, #3
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <HAL_UART_RxCpltCallback+0x6c>)
 8001398:	4418      	add	r0, r3
 800139a:	f7ff fb71 	bl	8000a80 <GetQueueFreeBytes>
 800139e:	b930      	cbnz	r0, 80013ae <HAL_UART_RxCpltCallback+0x46>
			uartStatus[uartPortIrq] = RET_BUFFER_FULL;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_UART_RxCpltCallback+0x60>)
 80013a2:	f993 3000 	ldrsb.w	r3, [r3]
 80013a6:	2108      	movs	r1, #8
 80013a8:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <HAL_UART_RxCpltCallback+0x70>)
 80013aa:	54d1      	strb	r1, [r2, r3]
 80013ac:	e7ea      	b.n	8001384 <HAL_UART_RxCpltCallback+0x1c>
			AddQueueByte(&uartCBuffers[uartPortIrq].rxBuffer, byteRxBuffer);
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_UART_RxCpltCallback+0x60>)
 80013b0:	f993 3000 	ldrsb.w	r3, [r3]
 80013b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80013b8:	00da      	lsls	r2, r3, #3
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_UART_RxCpltCallback+0x68>)
 80013bc:	7819      	ldrb	r1, [r3, #0]
 80013be:	4805      	ldr	r0, [pc, #20]	; (80013d4 <HAL_UART_RxCpltCallback+0x6c>)
 80013c0:	4410      	add	r0, r2
 80013c2:	f7ff fb2e 	bl	8000a22 <AddQueueByte>
 80013c6:	e7dd      	b.n	8001384 <HAL_UART_RxCpltCallback+0x1c>
 80013c8:	2000006f 	.word	0x2000006f
 80013cc:	08003388 	.word	0x08003388
 80013d0:	20000190 	.word	0x20000190
 80013d4:	200000f8 	.word	0x200000f8
 80013d8:	20000110 	.word	0x20000110

080013dc <uartDriverMainIRQHandler>:
/*************************************************************************//**
 * @brief  Callback Handler for the UART interrupt.
 * @param  uartPort Which port caused the interrupt
 ****************************************************************************/
void uartDriverMainIRQHandler(tUart uartPort)
{
 80013dc:	b508      	push	{r3, lr}
    UART_HandleTypeDef* huart; //HAL Uart

    huart = &ST_UartHandlers[uartPort];
 80013de:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 80013e2:	00d3      	lsls	r3, r2, #3
    uartPortIrq = uartPort;
 80013e4:	4a03      	ldr	r2, [pc, #12]	; (80013f4 <uartDriverMainIRQHandler+0x18>)
 80013e6:	7010      	strb	r0, [r2, #0]
    HAL_UART_IRQHandler(huart);
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <uartDriverMainIRQHandler+0x1c>)
 80013ea:	4418      	add	r0, r3
 80013ec:	f001 fb3a 	bl	8002a64 <HAL_UART_IRQHandler>
 80013f0:	bd08      	pop	{r3, pc}
 80013f2:	bf00      	nop
 80013f4:	2000006f 	.word	0x2000006f
 80013f8:	20000118 	.word	0x20000118

080013fc <HAL_UART_ErrorCallback>:
/*************************************************************************//**
 * @brief  Callback Handler for Errors in UART.
 * @param  huart Which port caused the interrupt
 ****************************************************************************/
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80013fc:	4770      	bx	lr
	...

08001400 <uartInit>:
 * 		   Initializes all UART declared on UART_map list
 *
 * @return  None.
 ****************************************************************************/
eError uartInit(void)
{
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eError result = RET_OK;
    UART_HandleTypeDef* huart;  //ST handler
    const tUartInstanceMap* muart;  //Montseny handler
    uint8_t i;

    for(i=0; i<NUM_OF_UART; i++) {
 8001402:	2400      	movs	r4, #0
 8001404:	b10c      	cbz	r4, 800140a <uartInit+0xa>




    return result;
}
 8001406:	2000      	movs	r0, #0
 8001408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance        = muart->port;
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <uartInit+0x68>)
 800140c:	232c      	movs	r3, #44	; 0x2c
 800140e:	fb03 f304 	mul.w	r3, r3, r4
 8001412:	18d5      	adds	r5, r2, r3
 8001414:	58d0      	ldr	r0, [r2, r3]
 8001416:	4915      	ldr	r1, [pc, #84]	; (800146c <uartInit+0x6c>)
 8001418:	0123      	lsls	r3, r4, #4
 800141a:	1b1b      	subs	r3, r3, r4
 800141c:	00da      	lsls	r2, r3, #3
 800141e:	188b      	adds	r3, r1, r2
 8001420:	5088      	str	r0, [r1, r2]
        huart->Init.BaudRate   = muart->baudRate;
 8001422:	686a      	ldr	r2, [r5, #4]
 8001424:	605a      	str	r2, [r3, #4]
        huart->Init.WordLength = muart->dataSize;
 8001426:	7a2a      	ldrb	r2, [r5, #8]
 8001428:	609a      	str	r2, [r3, #8]
        huart->Init.StopBits   = muart->stopBits;
 800142a:	7aaa      	ldrb	r2, [r5, #10]
 800142c:	60da      	str	r2, [r3, #12]
        huart->Init.Parity     = muart->parity;
 800142e:	7a6a      	ldrb	r2, [r5, #9]
 8001430:	611a      	str	r2, [r3, #16]
        huart->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
        huart->Init.Mode       = UART_MODE_TX_RX;
 8001436:	210c      	movs	r1, #12
 8001438:	6159      	str	r1, [r3, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800143a:	61da      	str	r2, [r3, #28]
		CreateQueue(&uartCBuffers[i].rxBuffer,
 800143c:	0066      	lsls	r6, r4, #1
 800143e:	1933      	adds	r3, r6, r4
 8001440:	00d8      	lsls	r0, r3, #3
 8001442:	4f0b      	ldr	r7, [pc, #44]	; (8001470 <uartInit+0x70>)
 8001444:	8aaa      	ldrh	r2, [r5, #20]
 8001446:	69a9      	ldr	r1, [r5, #24]
 8001448:	4438      	add	r0, r7
 800144a:	f7ff fae3 	bl	8000a14 <CreateQueue>
		CreateQueue(&uartCBuffers[i].txBuffer,
 800144e:	4426      	add	r6, r4
 8001450:	00f0      	lsls	r0, r6, #3
 8001452:	3008      	adds	r0, #8
 8001454:	4438      	add	r0, r7
 8001456:	89aa      	ldrh	r2, [r5, #12]
 8001458:	6929      	ldr	r1, [r5, #16]
 800145a:	3004      	adds	r0, #4
 800145c:	f7ff fada 	bl	8000a14 <CreateQueue>
    for(i=0; i<NUM_OF_UART; i++) {
 8001460:	3401      	adds	r4, #1
 8001462:	b2e4      	uxtb	r4, r4
 8001464:	e7ce      	b.n	8001404 <uartInit+0x4>
 8001466:	bf00      	nop
 8001468:	08003388 	.word	0x08003388
 800146c:	20000118 	.word	0x20000118
 8001470:	200000f8 	.word	0x200000f8

08001474 <uartStart>:
/*************************************************************************//**
 * @brief  Starts UART driver.
 * @return  None.
 ****************************************************************************/
eError uartStart(void)
{
 8001474:	b538      	push	{r3, r4, r5, lr}
    eError result = RET_OK;
    uint8_t i;
    UART_HandleTypeDef* huart;

    for(i=0; i<NUM_OF_UART; i++){
 8001476:	2400      	movs	r4, #0
 8001478:	b10c      	cbz	r4, 800147e <uartStart+0xa>
#if defined(MON_UART_RX_IT) || defined(MON_UART_RX_DMA)
        HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
#endif
    }

    return result;
 800147a:	2000      	movs	r0, #0
 800147c:	bd38      	pop	{r3, r4, r5, pc}
        huart = &ST_UartHandlers[i];
 800147e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001482:	00dd      	lsls	r5, r3, #3
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <uartStart+0x3c>)
 8001486:	441d      	add	r5, r3
        if(HAL_UART_DeInit(huart) != HAL_OK)
 8001488:	4628      	mov	r0, r5
 800148a:	f001 f9b4 	bl	80027f6 <HAL_UART_DeInit>
 800148e:	b958      	cbnz	r0, 80014a8 <uartStart+0x34>
        if(HAL_UART_Init(huart) != HAL_OK)
 8001490:	4628      	mov	r0, r5
 8001492:	f001 fe5c 	bl	800314e <HAL_UART_Init>
 8001496:	b948      	cbnz	r0, 80014ac <uartStart+0x38>
        HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8001498:	2201      	movs	r2, #1
 800149a:	4906      	ldr	r1, [pc, #24]	; (80014b4 <uartStart+0x40>)
 800149c:	4628      	mov	r0, r5
 800149e:	f001 fa05 	bl	80028ac <HAL_UART_Receive_IT>
    for(i=0; i<NUM_OF_UART; i++){
 80014a2:	3401      	adds	r4, #1
 80014a4:	b2e4      	uxtb	r4, r4
 80014a6:	e7e7      	b.n	8001478 <uartStart+0x4>
            return RET_FAIL;
 80014a8:	2001      	movs	r0, #1
 80014aa:	bd38      	pop	{r3, r4, r5, pc}
            return RET_FAIL;
 80014ac:	2001      	movs	r0, #1
}
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
 80014b0:	20000118 	.word	0x20000118
 80014b4:	20000190 	.word	0x20000190

080014b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014be:	e003      	b.n	80014c8 <LoopCopyDataInit>

080014c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014c6:	3104      	adds	r1, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80014cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014d0:	d3f6      	bcc.n	80014c0 <CopyDataInit>
	ldr	r2, =_sbss
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014d4:	e002      	b.n	80014dc <LoopFillZerobss>

080014d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014d8:	f842 3b04 	str.w	r3, [r2], #4

080014dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <LoopForever+0x16>)
	cmp	r2, r3
 80014de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014e0:	d3f9      	bcc.n	80014d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014e2:	f000 f813 	bl	800150c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f001 fe67 	bl	80031b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ea:	f7fe fffb 	bl	80004e4 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014f0:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 80014f4:	0800340c 	.word	0x0800340c
	ldr	r0, =_sdata
 80014f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014fc:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8001500:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8001504:	2000031c 	.word	0x2000031c

08001508 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_IRQHandler>
	...

0800150c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	490f      	ldr	r1, [pc, #60]	; (800154c <SystemInit+0x40>)
 800150e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001512:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <SystemInit+0x44>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	f042 0201 	orr.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001524:	2000      	movs	r0, #0
 8001526:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800152e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001532:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001538:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001540:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001542:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001544:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001548:	608b      	str	r3, [r1, #8]
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b510      	push	{r4, lr}
 8001556:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_InitTick+0x24>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_InitTick+0x28>)
 800155e:	fba3 3000 	umull	r3, r0, r3, r0
 8001562:	0980      	lsrs	r0, r0, #6
 8001564:	f000 f858 	bl	8001618 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001568:	2200      	movs	r2, #0
 800156a:	4621      	mov	r1, r4
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f000 f814 	bl	800159c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001574:	2000      	movs	r0, #0
 8001576:	bd10      	pop	{r4, pc}
 8001578:	20000038 	.word	0x20000038
 800157c:	10624dd3 	.word	0x10624dd3

08001580 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001580:	4a02      	ldr	r2, [pc, #8]	; (800158c <HAL_IncTick+0xc>)
 8001582:	6813      	ldr	r3, [r2, #0]
 8001584:	3301      	adds	r3, #1
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200002f8 	.word	0x200002f8

08001590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001590:	4b01      	ldr	r3, [pc, #4]	; (8001598 <HAL_GetTick+0x8>)
 8001592:	6818      	ldr	r0, [r3, #0]
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200002f8 	.word	0x200002f8

0800159c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_NVIC_SetPriority+0x5c>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a6:	f1c3 0407 	rsb	r4, r3, #7
 80015aa:	2c04      	cmp	r4, #4
 80015ac:	bf28      	it	cs
 80015ae:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b0:	1d1d      	adds	r5, r3, #4
 80015b2:	2d06      	cmp	r5, #6
 80015b4:	d917      	bls.n	80015e6 <HAL_NVIC_SetPriority+0x4a>
 80015b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b8:	2501      	movs	r5, #1
 80015ba:	fa05 f404 	lsl.w	r4, r5, r4
 80015be:	3c01      	subs	r4, #1
 80015c0:	4021      	ands	r1, r4
 80015c2:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	fa05 f303 	lsl.w	r3, r5, r3
 80015c8:	3b01      	subs	r3, #1
 80015ca:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80015ce:	2800      	cmp	r0, #0
 80015d0:	db0b      	blt.n	80015ea <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	0109      	lsls	r1, r1, #4
 80015d4:	b2c9      	uxtb	r1, r1
 80015d6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80015da:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80015de:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015e2:	bc30      	pop	{r4, r5}
 80015e4:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	2300      	movs	r3, #0
 80015e8:	e7e6      	b.n	80015b8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ea:	f000 000f 	and.w	r0, r0, #15
 80015ee:	0109      	lsls	r1, r1, #4
 80015f0:	b2c9      	uxtb	r1, r1
 80015f2:	4b02      	ldr	r3, [pc, #8]	; (80015fc <HAL_NVIC_SetPriority+0x60>)
 80015f4:	5419      	strb	r1, [r3, r0]
 80015f6:	e7f4      	b.n	80015e2 <HAL_NVIC_SetPriority+0x46>
 80015f8:	e000ed00 	.word	0xe000ed00
 80015fc:	e000ed14 	.word	0xe000ed14

08001600 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001600:	0942      	lsrs	r2, r0, #5
 8001602:	f000 001f 	and.w	r0, r0, #31
 8001606:	2301      	movs	r3, #1
 8001608:	fa03 f000 	lsl.w	r0, r3, r0
 800160c:	4b01      	ldr	r3, [pc, #4]	; (8001614 <HAL_NVIC_EnableIRQ+0x14>)
 800160e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100

08001618 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	3801      	subs	r0, #1
 800161a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800161e:	d20a      	bcs.n	8001636 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_SYSTICK_Config+0x24>)
 8001622:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	21f0      	movs	r1, #240	; 0xf0
 8001626:	4a06      	ldr	r2, [pc, #24]	; (8001640 <HAL_SYSTICK_Config+0x28>)
 8001628:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800162c:	2000      	movs	r0, #0
 800162e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001644:	2804      	cmp	r0, #4
 8001646:	d005      	beq.n	8001654 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	f023 0304 	bic.w	r3, r3, #4
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001654:	4a02      	ldr	r2, [pc, #8]	; (8001660 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001656:	6813      	ldr	r3, [r2, #0]
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4770      	bx	lr
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001664:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001666:	f7ff fd0e 	bl	8001086 <HAL_SYSTICK_Callback>
 800166a:	bd08      	pop	{r3, pc}

0800166c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800166c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800166e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d003      	beq.n	8001680 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001678:	2304      	movs	r3, #4
 800167a:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800167c:	2001      	movs	r0, #1
 800167e:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001680:	6802      	ldr	r2, [r0, #0]
 8001682:	6813      	ldr	r3, [r2, #0]
 8001684:	f023 030e 	bic.w	r3, r3, #14
 8001688:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800168a:	6802      	ldr	r2, [r0, #0]
 800168c:	6813      	ldr	r3, [r2, #0]
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001694:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001696:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001698:	2201      	movs	r2, #1
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	604b      	str	r3, [r1, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a4:	2300      	movs	r3, #0
 80016a6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80016ac:	b113      	cbz	r3, 80016b4 <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 80016ae:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80016b0:	2000      	movs	r0, #0
 80016b2:	bd08      	pop	{r3, pc}
 80016b4:	2000      	movs	r0, #0
    }
  }
  return status;
}
 80016b6:	bd08      	pop	{r3, pc}

080016b8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	f013 0f02 	tst.w	r3, #2
 80016c0:	d004      	beq.n	80016cc <FLASH_SetErrorCode+0x14>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OP;
 80016c2:	4a41      	ldr	r2, [pc, #260]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 80016c4:	6853      	ldr	r3, [r2, #4]
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR))
 80016cc:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f013 0f08 	tst.w	r3, #8
 80016d4:	d004      	beq.n	80016e0 <FLASH_SetErrorCode+0x28>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80016d6:	4a3c      	ldr	r2, [pc, #240]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 80016d8:	6853      	ldr	r3, [r2, #4]
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80016e0:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	f013 0f10 	tst.w	r3, #16
 80016e8:	d004      	beq.n	80016f4 <FLASH_SetErrorCode+0x3c>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80016ea:	4a37      	ldr	r2, [pc, #220]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 80016ec:	6853      	ldr	r3, [r2, #4]
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80016f4:	4b33      	ldr	r3, [pc, #204]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	f013 0f20 	tst.w	r3, #32
 80016fc:	d004      	beq.n	8001708 <FLASH_SetErrorCode+0x50>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80016fe:	4a32      	ldr	r2, [pc, #200]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 8001700:	6853      	ldr	r3, [r2, #4]
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001710:	d004      	beq.n	800171c <FLASH_SetErrorCode+0x64>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZ;
 8001712:	4a2d      	ldr	r2, [pc, #180]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 8001714:	6853      	ldr	r3, [r2, #4]
 8001716:	f043 0310 	orr.w	r3, r3, #16
 800171a:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))
 800171c:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001724:	d004      	beq.n	8001730 <FLASH_SetErrorCode+0x78>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001726:	4a28      	ldr	r2, [pc, #160]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 8001728:	6853      	ldr	r3, [r2, #4]
 800172a:	f043 0320 	orr.w	r3, r3, #32
 800172e:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR))
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001738:	d004      	beq.n	8001744 <FLASH_SetErrorCode+0x8c>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_MIS;
 800173a:	4a23      	ldr	r2, [pc, #140]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 800173c:	6853      	ldr	r3, [r2, #4]
 800173e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001742:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR))
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	f413 7f00 	tst.w	r3, #512	; 0x200
 800174c:	d004      	beq.n	8001758 <FLASH_SetErrorCode+0xa0>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_FAST;
 800174e:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 8001750:	6853      	ldr	r3, [r2, #4]
 8001752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001756:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001760:	d004      	beq.n	800176c <FLASH_SetErrorCode+0xb4>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001762:	4a19      	ldr	r2, [pc, #100]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 8001764:	6853      	ldr	r3, [r2, #4]
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800176c:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001774:	d004      	beq.n	8001780 <FLASH_SetErrorCode+0xc8>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001776:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 8001778:	6853      	ldr	r3, [r2, #4]
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db16      	blt.n	80017b6 <FLASH_SetErrorCode+0xfe>
  }

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY))
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001790:	d008      	beq.n	80017a4 <FLASH_SetErrorCode+0xec>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PEMPTY;
 8001792:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 8001794:	6853      	ldr	r3, [r2, #4]
 8001796:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800179a:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PEMPTY);
 800179c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 80017a2:	611a      	str	r2, [r3, #16]
  }
#endif
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <FLASH_SetErrorCode+0x10c>)
 80017a6:	699a      	ldr	r2, [r3, #24]
 80017a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ac:	619a      	str	r2, [r3, #24]
 80017ae:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	4770      	bx	lr
   pFlash.ErrorCode |= HAL_FLASH_ERROR_ECCD;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <FLASH_SetErrorCode+0x110>)
 80017b8:	6853      	ldr	r3, [r2, #4]
 80017ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017be:	6053      	str	r3, [r2, #4]
 80017c0:	e7e2      	b.n	8001788 <FLASH_SetErrorCode+0xd0>
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000
 80017c8:	200002fc 	.word	0x200002fc

080017cc <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80017cc:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80017ce:	4c05      	ldr	r4, [pc, #20]	; (80017e4 <FLASH_Program_DoubleWord+0x18>)
 80017d0:	6961      	ldr	r1, [r4, #20]
 80017d2:	f041 0101 	orr.w	r1, r1, #1
 80017d6:	6161      	str	r1, [r4, #20]
  
  /* Program the double word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80017d8:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80017da:	6043      	str	r3, [r0, #4]
}
 80017dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40022000 	.word	0x40022000

080017e8 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <FLASH_Program_Fast+0x24>)
 80017ea:	6953      	ldr	r3, [r2, #20]
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f0:	6153      	str	r3, [r2, #20]
 80017f2:	b672      	cpsid	i
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80017f4:	2340      	movs	r3, #64	; 0x40
  __disable_irq();
  
  /* Program the double word of the row */
  do
  {
    *dest_addr++ = *src_addr++;
 80017f6:	680a      	ldr	r2, [r1, #0]
 80017f8:	6002      	str	r2, [r0, #0]
  } while (--row_index != 0);
 80017fa:	3b01      	subs	r3, #1
    *dest_addr++ = *src_addr++;
 80017fc:	3004      	adds	r0, #4
 80017fe:	3104      	adds	r1, #4
  } while (--row_index != 0);
 8001800:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001804:	d1f7      	bne.n	80017f6 <FLASH_Program_Fast+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 8001806:	b662      	cpsie	i
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40022000 	.word	0x40022000

08001810 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_FLASH_Unlock+0x28>)
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db01      	blt.n	800181c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8001818:	2000      	movs	r0, #0
 800181a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_FLASH_Unlock+0x28>)
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <HAL_FLASH_Unlock+0x2c>)
 8001820:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001822:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001826:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db01      	blt.n	8001832 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800182e:	2000      	movs	r0, #0
 8001830:	4770      	bx	lr
      status = HAL_ERROR;
 8001832:	2001      	movs	r0, #1
}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40022000 	.word	0x40022000
 800183c:	45670123 	.word	0x45670123

08001840 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <HAL_FLASH_Lock+0x10>)
 8001842:	6953      	ldr	r3, [r2, #20]
 8001844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001848:	6153      	str	r3, [r2, #20]
}
 800184a:	2000      	movs	r0, #0
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40022000 	.word	0x40022000

08001854 <FLASH_WaitForLastOperation>:
{
 8001854:	b538      	push	{r3, r4, r5, lr}
 8001856:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff fe9a 	bl	8001590 <HAL_GetTick>
 800185c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001866:	d009      	beq.n	800187c <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 8001868:	f1b4 3fff 	cmp.w	r4, #4294967295
 800186c:	d0f7      	beq.n	800185e <FLASH_WaitForLastOperation+0xa>
      if((HAL_GetTick() - tickstart) >= Timeout)
 800186e:	f7ff fe8f 	bl	8001590 <HAL_GetTick>
 8001872:	1b40      	subs	r0, r0, r5
 8001874:	4284      	cmp	r4, r0
 8001876:	d8f2      	bhi.n	800185e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8001878:	2003      	movs	r0, #3
 800187a:	bd38      	pop	{r3, r4, r5, pc}
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	f013 0f02 	tst.w	r3, #2
 8001884:	d13f      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	f013 0f08 	tst.w	r3, #8
 800188e:	d13a      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 8001890:	4b20      	ldr	r3, [pc, #128]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 8001892:	691b      	ldr	r3, [r3, #16]
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 8001894:	f013 0f10 	tst.w	r3, #16
 8001898:	d135      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 800189a:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	f013 0f20 	tst.w	r3, #32
 80018a2:	d130      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 80018a4:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 80018a6:	691b      	ldr	r3, [r3, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 80018a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80018ac:	d12b      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018b6:	d126      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 80018ba:	691b      	ldr	r3, [r3, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 80018bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018c0:	d121      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80018ca:	d11c      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 80018ce:	691b      	ldr	r3, [r3, #16]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 80018d0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80018d4:	d117      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80018de:	d112      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))   || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY)))
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 80018e2:	699b      	ldr	r3, [r3, #24]
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0e      	blt.n	8001906 <FLASH_WaitForLastOperation+0xb2>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))   || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY)))
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018f0:	d109      	bne.n	8001906 <FLASH_WaitForLastOperation+0xb2>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f013 0f01 	tst.w	r3, #1
 80018fa:	d008      	beq.n	800190e <FLASH_WaitForLastOperation+0xba>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80018fc:	2201      	movs	r2, #1
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <FLASH_WaitForLastOperation+0xc0>)
 8001900:	611a      	str	r2, [r3, #16]
  return HAL_OK;  
 8001902:	2000      	movs	r0, #0
 8001904:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_SetErrorCode();
 8001906:	f7ff fed7 	bl	80016b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800190a:	2001      	movs	r0, #1
 800190c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;  
 800190e:	2000      	movs	r0, #0
}
 8001910:	bd38      	pop	{r3, r4, r5, pc}
 8001912:	bf00      	nop
 8001914:	40022000 	.word	0x40022000

08001918 <HAL_FLASH_Program>:
{
 8001918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800191c:	4c28      	ldr	r4, [pc, #160]	; (80019c0 <HAL_FLASH_Program+0xa8>)
 800191e:	7824      	ldrb	r4, [r4, #0]
 8001920:	2c01      	cmp	r4, #1
 8001922:	d103      	bne.n	800192c <HAL_FLASH_Program+0x14>
 8001924:	2402      	movs	r4, #2
}
 8001926:	4620      	mov	r0, r4
 8001928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800192c:	4698      	mov	r8, r3
 800192e:	4617      	mov	r7, r2
 8001930:	460e      	mov	r6, r1
 8001932:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8001934:	2201      	movs	r2, #1
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_FLASH_Program+0xa8>)
 8001938:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800193a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800193e:	f7ff ff89 	bl	8001854 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001942:	4604      	mov	r4, r0
 8001944:	bb08      	cbnz	r0, 800198a <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001946:	2200      	movs	r2, #0
 8001948:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_FLASH_Program+0xa8>)
 800194a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800194c:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_FLASH_Program+0xac>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001954:	d01d      	beq.n	8001992 <HAL_FLASH_Program+0x7a>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001956:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <HAL_FLASH_Program+0xac>)
 8001958:	6813      	ldr	r3, [r2, #0]
 800195a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800195e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001960:	2202      	movs	r2, #2
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_FLASH_Program+0xa8>)
 8001964:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001966:	b1c5      	cbz	r5, 800199a <HAL_FLASH_Program+0x82>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001968:	1e6b      	subs	r3, r5, #1
 800196a:	2b01      	cmp	r3, #1
 800196c:	d91c      	bls.n	80019a8 <HAL_FLASH_Program+0x90>
  uint32_t prog_bit = 0;
 800196e:	2500      	movs	r5, #0
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001970:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001974:	f7ff ff6e 	bl	8001854 <FLASH_WaitForLastOperation>
 8001978:	4604      	mov	r4, r0
    if (prog_bit != 0)
 800197a:	b125      	cbz	r5, 8001986 <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <HAL_FLASH_Program+0xac>)
 800197e:	6953      	ldr	r3, [r2, #20]
 8001980:	ea23 0505 	bic.w	r5, r3, r5
 8001984:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 8001986:	f000 f847 	bl	8001a18 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800198a:	2200      	movs	r2, #0
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_FLASH_Program+0xa8>)
 800198e:	701a      	strb	r2, [r3, #0]
  return status;  
 8001990:	e7c9      	b.n	8001926 <HAL_FLASH_Program+0xe>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001992:	2200      	movs	r2, #0
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_FLASH_Program+0xa8>)
 8001996:	771a      	strb	r2, [r3, #28]
 8001998:	e7e5      	b.n	8001966 <HAL_FLASH_Program+0x4e>
      FLASH_Program_DoubleWord(Address, Data);
 800199a:	463a      	mov	r2, r7
 800199c:	4643      	mov	r3, r8
 800199e:	4630      	mov	r0, r6
 80019a0:	f7ff ff14 	bl	80017cc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80019a4:	2501      	movs	r5, #1
 80019a6:	e7e3      	b.n	8001970 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80019a8:	4639      	mov	r1, r7
 80019aa:	4630      	mov	r0, r6
 80019ac:	f7ff ff1c 	bl	80017e8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80019b0:	2d02      	cmp	r5, #2
 80019b2:	d001      	beq.n	80019b8 <HAL_FLASH_Program+0xa0>
  uint32_t prog_bit = 0;
 80019b4:	2500      	movs	r5, #0
 80019b6:	e7db      	b.n	8001970 <HAL_FLASH_Program+0x58>
        prog_bit = FLASH_CR_FSTPG;
 80019b8:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80019bc:	e7d8      	b.n	8001970 <HAL_FLASH_Program+0x58>
 80019be:	bf00      	nop
 80019c0:	200002fc 	.word	0x200002fc
 80019c4:	40022000 	.word	0x40022000

080019c8 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != RESET)
 80019c8:	f010 0f01 	tst.w	r0, #1
 80019cc:	d004      	beq.n	80019d8 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80019ce:	4a05      	ldr	r2, [pc, #20]	; (80019e4 <FLASH_MassErase+0x1c>)
 80019d0:	6953      	ldr	r3, [r2, #20]
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80019d8:	4a02      	ldr	r2, [pc, #8]	; (80019e4 <FLASH_MassErase+0x1c>)
 80019da:	6953      	ldr	r3, [r2, #20]
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6153      	str	r3, [r2, #20]
 80019e2:	4770      	bx	lr
 80019e4:	40022000 	.word	0x40022000

080019e8 <FLASH_PageErase>:
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (Page << POSITION_VAL(FLASH_CR_PNB)));
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <FLASH_PageErase+0x2c>)
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 80019f4:	fa91 f1a1 	rbit	r1, r1
 80019f8:	fab1 f181 	clz	r1, r1
 80019fc:	4088      	lsls	r0, r1
 80019fe:	4310      	orrs	r0, r2
 8001a00:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	f042 0202 	orr.w	r2, r2, #2
 8001a08:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a10:	615a      	str	r2, [r3, #20]
 8001a12:	4770      	bx	lr
 8001a14:	40022000 	.word	0x40022000

08001a18 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <FLASH_FlushCaches+0x68>)
 8001a1a:	7f1b      	ldrb	r3, [r3, #28]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d01f      	beq.n	8001a62 <FLASH_FlushCaches+0x4a>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 8001a22:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <FLASH_FlushCaches+0x68>)
 8001a24:	7f1b      	ldrb	r3, [r3, #28]
 8001a26:	b2db      	uxtb	r3, r3
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d01a      	beq.n	8001a62 <FLASH_FlushCaches+0x4a>
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
  }
  
  /* Flush data cache */
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <FLASH_FlushCaches+0x68>)
 8001a2e:	7f1b      	ldrb	r3, [r3, #28]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d004      	beq.n	8001a40 <FLASH_FlushCaches+0x28>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <FLASH_FlushCaches+0x68>)
 8001a38:	7f1b      	ldrb	r3, [r3, #28]
 8001a3a:	b2db      	uxtb	r3, r3
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d10c      	bne.n	8001a5a <FLASH_FlushCaches+0x42>
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <FLASH_FlushCaches+0x6c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a50:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a58:	601a      	str	r2, [r3, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <FLASH_FlushCaches+0x68>)
 8001a5e:	771a      	strb	r2, [r3, #28]
 8001a60:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <FLASH_FlushCaches+0x6c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a72:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	e7d6      	b.n	8001a2c <FLASH_FlushCaches+0x14>
 8001a7e:	bf00      	nop
 8001a80:	200002fc 	.word	0x200002fc
 8001a84:	40022000 	.word	0x40022000

08001a88 <HAL_FLASHEx_Erase>:
{
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_FLASHEx_Erase+0xf0>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d102      	bne.n	8001a98 <HAL_FLASHEx_Erase+0x10>
 8001a92:	2702      	movs	r7, #2
}
 8001a94:	4638      	mov	r0, r7
 8001a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a98:	460e      	mov	r6, r1
 8001a9a:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_FLASHEx_Erase+0xf0>)
 8001aa0:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001aa2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001aa6:	f7ff fed5 	bl	8001854 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8001aaa:	4607      	mov	r7, r0
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d15e      	bne.n	8001b6e <HAL_FLASHEx_Erase+0xe6>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <HAL_FLASHEx_Erase+0xf0>)
 8001ab4:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_FLASHEx_Erase+0xf4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001abe:	d033      	beq.n	8001b28 <HAL_FLASHEx_Erase+0xa0>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_FLASHEx_Erase+0xf4>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ac8:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001ad0:	d026      	beq.n	8001b20 <HAL_FLASHEx_Erase+0x98>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001ad2:	4a2a      	ldr	r2, [pc, #168]	; (8001b7c <HAL_FLASHEx_Erase+0xf4>)
 8001ad4:	6813      	ldr	r3, [r2, #0]
 8001ad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ada:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001adc:	2203      	movs	r2, #3
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_FLASHEx_Erase+0xf0>)
 8001ae0:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ae2:	6823      	ldr	r3, [r4, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d031      	beq.n	8001b4c <HAL_FLASHEx_Erase+0xc4>
      *PageError = 0xFFFFFFFF;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	6033      	str	r3, [r6, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001aee:	68a5      	ldr	r5, [r4, #8]
 8001af0:	68a3      	ldr	r3, [r4, #8]
 8001af2:	68e2      	ldr	r2, [r4, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	429d      	cmp	r5, r3
 8001af8:	d237      	bcs.n	8001b6a <HAL_FLASHEx_Erase+0xe2>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001afa:	6861      	ldr	r1, [r4, #4]
 8001afc:	4628      	mov	r0, r5
 8001afe:	f7ff ff73 	bl	80019e8 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b06:	f7ff fea5 	bl	8001854 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001b0a:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_FLASHEx_Erase+0xf4>)
 8001b0c:	6953      	ldr	r3, [r2, #20]
 8001b0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001b12:	f023 0302 	bic.w	r3, r3, #2
 8001b16:	6153      	str	r3, [r2, #20]
        if (status != HAL_OK)
 8001b18:	4607      	mov	r7, r0
 8001b1a:	bb28      	cbnz	r0, 8001b68 <HAL_FLASHEx_Erase+0xe0>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001b1c:	3501      	adds	r5, #1
 8001b1e:	e7e7      	b.n	8001af0 <HAL_FLASHEx_Erase+0x68>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001b20:	2201      	movs	r2, #1
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_FLASHEx_Erase+0xf0>)
 8001b24:	771a      	strb	r2, [r3, #28]
 8001b26:	e7dc      	b.n	8001ae2 <HAL_FLASHEx_Erase+0x5a>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_FLASHEx_Erase+0xf4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b30:	d008      	beq.n	8001b44 <HAL_FLASHEx_Erase+0xbc>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <HAL_FLASHEx_Erase+0xf4>)
 8001b34:	6813      	ldr	r3, [r2, #0]
 8001b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b3a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_FLASHEx_Erase+0xf0>)
 8001b40:	771a      	strb	r2, [r3, #28]
 8001b42:	e7ce      	b.n	8001ae2 <HAL_FLASHEx_Erase+0x5a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001b44:	2200      	movs	r2, #0
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_FLASHEx_Erase+0xf0>)
 8001b48:	771a      	strb	r2, [r3, #28]
 8001b4a:	e7ca      	b.n	8001ae2 <HAL_FLASHEx_Erase+0x5a>
      FLASH_MassErase(pEraseInit->Banks);
 8001b4c:	6860      	ldr	r0, [r4, #4]
 8001b4e:	f7ff ff3b 	bl	80019c8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b52:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b56:	f7ff fe7d 	bl	8001854 <FLASH_WaitForLastOperation>
 8001b5a:	4607      	mov	r7, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001b5c:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <HAL_FLASHEx_Erase+0xf4>)
 8001b5e:	6953      	ldr	r3, [r2, #20]
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6153      	str	r3, [r2, #20]
 8001b66:	e000      	b.n	8001b6a <HAL_FLASHEx_Erase+0xe2>
          *PageError = page_index;
 8001b68:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 8001b6a:	f7ff ff55 	bl	8001a18 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4b01      	ldr	r3, [pc, #4]	; (8001b78 <HAL_FLASHEx_Erase+0xf0>)
 8001b72:	701a      	strb	r2, [r3, #0]
  return status;
 8001b74:	e78e      	b.n	8001a94 <HAL_FLASHEx_Erase+0xc>
 8001b76:	bf00      	nop
 8001b78:	200002fc 	.word	0x200002fc
 8001b7c:	40022000 	.word	0x40022000

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b82:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 8001b84:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001b86:	e08c      	b.n	8001ca2 <HAL_GPIO_Init+0x122>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b88:	08de      	lsrs	r6, r3, #3
 8001b8a:	3608      	adds	r6, #8
 8001b8c:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b90:	f003 0e07 	and.w	lr, r3, #7
 8001b94:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001b98:	270f      	movs	r7, #15
 8001b9a:	fa07 f70e 	lsl.w	r7, r7, lr
 8001b9e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ba2:	690f      	ldr	r7, [r1, #16]
 8001ba4:	fa07 f70e 	lsl.w	r7, r7, lr
 8001ba8:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8001baa:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8001bae:	e087      	b.n	8001cc0 <HAL_GPIO_Init+0x140>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001bb2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bb4:	68cf      	ldr	r7, [r1, #12]
 8001bb6:	fa07 f70e 	lsl.w	r7, r7, lr
 8001bba:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001bbc:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbe:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bc0:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bc4:	684e      	ldr	r6, [r1, #4]
 8001bc6:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001bca:	409e      	lsls	r6, r3
 8001bcc:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001bce:	6045      	str	r5, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bd0:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001bd2:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bd4:	688d      	ldr	r5, [r1, #8]
 8001bd6:	fa05 f50e 	lsl.w	r5, r5, lr
 8001bda:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001bdc:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bde:	684c      	ldr	r4, [r1, #4]
 8001be0:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001be4:	d05c      	beq.n	8001ca0 <HAL_GPIO_Init+0x120>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	4c4a      	ldr	r4, [pc, #296]	; (8001d10 <HAL_GPIO_Init+0x190>)
 8001be8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001bea:	f045 0501 	orr.w	r5, r5, #1
 8001bee:	6625      	str	r5, [r4, #96]	; 0x60
 8001bf0:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8001bf2:	f004 0401 	and.w	r4, r4, #1
 8001bf6:	9401      	str	r4, [sp, #4]
 8001bf8:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bfa:	089d      	lsrs	r5, r3, #2
 8001bfc:	1cae      	adds	r6, r5, #2
 8001bfe:	4c45      	ldr	r4, [pc, #276]	; (8001d14 <HAL_GPIO_Init+0x194>)
 8001c00:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c04:	f003 0603 	and.w	r6, r3, #3
 8001c08:	00b6      	lsls	r6, r6, #2
 8001c0a:	270f      	movs	r7, #15
 8001c0c:	40b7      	lsls	r7, r6
 8001c0e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001c12:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001c16:	d070      	beq.n	8001cfa <HAL_GPIO_Init+0x17a>
 8001c18:	4f3f      	ldr	r7, [pc, #252]	; (8001d18 <HAL_GPIO_Init+0x198>)
 8001c1a:	42b8      	cmp	r0, r7
 8001c1c:	d06f      	beq.n	8001cfe <HAL_GPIO_Init+0x17e>
 8001c1e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001c22:	42b8      	cmp	r0, r7
 8001c24:	d06d      	beq.n	8001d02 <HAL_GPIO_Init+0x182>
 8001c26:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001c2a:	42b8      	cmp	r0, r7
 8001c2c:	d06b      	beq.n	8001d06 <HAL_GPIO_Init+0x186>
 8001c2e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001c32:	42b8      	cmp	r0, r7
 8001c34:	d05f      	beq.n	8001cf6 <HAL_GPIO_Init+0x176>
 8001c36:	2707      	movs	r7, #7
 8001c38:	fa07 f606 	lsl.w	r6, r7, r6
 8001c3c:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c3e:	3502      	adds	r5, #2
 8001c40:	4e34      	ldr	r6, [pc, #208]	; (8001d14 <HAL_GPIO_Init+0x194>)
 8001c42:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c46:	4c35      	ldr	r4, [pc, #212]	; (8001d1c <HAL_GPIO_Init+0x19c>)
 8001c48:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	43d4      	mvns	r4, r2
 8001c4c:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c50:	684f      	ldr	r7, [r1, #4]
 8001c52:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001c56:	d001      	beq.n	8001c5c <HAL_GPIO_Init+0xdc>
        {
          temp |= iocurrent;
 8001c58:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001c5c:	4d2f      	ldr	r5, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x19c>)
 8001c5e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8001c60:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001c62:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c66:	684f      	ldr	r7, [r1, #4]
 8001c68:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001c6c:	d001      	beq.n	8001c72 <HAL_GPIO_Init+0xf2>
        {
          temp |= iocurrent;
 8001c6e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001c72:	4d2a      	ldr	r5, [pc, #168]	; (8001d1c <HAL_GPIO_Init+0x19c>)
 8001c74:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c76:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7c:	684f      	ldr	r7, [r1, #4]
 8001c7e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001c82:	d001      	beq.n	8001c88 <HAL_GPIO_Init+0x108>
        {
          temp |= iocurrent;
 8001c84:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001c88:	4d24      	ldr	r5, [pc, #144]	; (8001d1c <HAL_GPIO_Init+0x19c>)
 8001c8a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001c8c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c90:	684e      	ldr	r6, [r1, #4]
 8001c92:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001c96:	d001      	beq.n	8001c9c <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 8001c98:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001c9c:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_GPIO_Init+0x19c>)
 8001c9e:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001ca0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001ca2:	680a      	ldr	r2, [r1, #0]
 8001ca4:	fa32 f403 	lsrs.w	r4, r2, r3
 8001ca8:	d02f      	beq.n	8001d0a <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001caa:	2501      	movs	r5, #1
 8001cac:	409d      	lsls	r5, r3
    if(iocurrent)
 8001cae:	402a      	ands	r2, r5
 8001cb0:	d0f6      	beq.n	8001ca0 <HAL_GPIO_Init+0x120>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb2:	684c      	ldr	r4, [r1, #4]
 8001cb4:	2c02      	cmp	r4, #2
 8001cb6:	f43f af67 	beq.w	8001b88 <HAL_GPIO_Init+0x8>
 8001cba:	2c12      	cmp	r4, #18
 8001cbc:	f43f af64 	beq.w	8001b88 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001cc0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001cc2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001cc6:	2403      	movs	r4, #3
 8001cc8:	fa04 f40e 	lsl.w	r4, r4, lr
 8001ccc:	43e4      	mvns	r4, r4
 8001cce:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cd0:	684f      	ldr	r7, [r1, #4]
 8001cd2:	f007 0703 	and.w	r7, r7, #3
 8001cd6:	fa07 f70e 	lsl.w	r7, r7, lr
 8001cda:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001cdc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cde:	684e      	ldr	r6, [r1, #4]
 8001ce0:	1e77      	subs	r7, r6, #1
 8001ce2:	2f01      	cmp	r7, #1
 8001ce4:	f67f af64 	bls.w	8001bb0 <HAL_GPIO_Init+0x30>
 8001ce8:	2e11      	cmp	r6, #17
 8001cea:	f43f af61 	beq.w	8001bb0 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cee:	2e12      	cmp	r6, #18
 8001cf0:	f47f af6e 	bne.w	8001bd0 <HAL_GPIO_Init+0x50>
 8001cf4:	e75c      	b.n	8001bb0 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001cf6:	2704      	movs	r7, #4
 8001cf8:	e79e      	b.n	8001c38 <HAL_GPIO_Init+0xb8>
 8001cfa:	2700      	movs	r7, #0
 8001cfc:	e79c      	b.n	8001c38 <HAL_GPIO_Init+0xb8>
 8001cfe:	2701      	movs	r7, #1
 8001d00:	e79a      	b.n	8001c38 <HAL_GPIO_Init+0xb8>
 8001d02:	2702      	movs	r7, #2
 8001d04:	e798      	b.n	8001c38 <HAL_GPIO_Init+0xb8>
 8001d06:	2703      	movs	r7, #3
 8001d08:	e796      	b.n	8001c38 <HAL_GPIO_Init+0xb8>
  }
}
 8001d0a:	b003      	add	sp, #12
 8001d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d20:	b90a      	cbnz	r2, 8001d26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d22:	6281      	str	r1, [r0, #40]	; 0x28
 8001d24:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d26:	6181      	str	r1, [r0, #24]
 8001d28:	4770      	bx	lr

08001d2a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001d2a:	6943      	ldr	r3, [r0, #20]
 8001d2c:	4059      	eors	r1, r3
 8001d2e:	6141      	str	r1, [r0, #20]
 8001d30:	4770      	bx	lr
	...

08001d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d34:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4203      	tst	r3, r0
 8001d3c:	d100      	bne.n	8001d40 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8001d3e:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001d42:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d44:	f7ff f9a7 	bl	8001096 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d48:	e7f9      	b.n	8001d3e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001d4a:	bf00      	nop
 8001d4c:	40010400 	.word	0x40010400

08001d50 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <HAL_PWREx_GetVoltageRange+0xc>)
 8001d52:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001d54:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40007000 	.word	0x40007000

08001d60 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d60:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001d64:	d00f      	beq.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d72:	d037      	beq.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x84>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d74:	4a1c      	ldr	r2, [pc, #112]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001d76:	6813      	ldr	r3, [r2, #0]
 8001d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d80:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001d82:	2000      	movs	r0, #0
 8001d84:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d92:	d023      	beq.n	8001ddc <HAL_PWREx_ControlVoltageScaling+0x7c>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001d96:	6813      	ldr	r3, [r2, #0]
 8001d98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da0:	6013      	str	r3, [r2, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001daa:	f502 325b 	add.w	r2, r2, #224256	; 0x36c00
 8001dae:	f202 2283 	addw	r2, r2, #643	; 0x283
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0c9a      	lsrs	r2, r3, #18
 8001db8:	2332      	movs	r3, #50	; 0x32
 8001dba:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001dbe:	e000      	b.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x62>
        wait_loop_index--;
 8001dc0:	3b01      	subs	r3, #1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001dc2:	b123      	cbz	r3, 8001dce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001dc6:	6952      	ldr	r2, [r2, #20]
 8001dc8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001dcc:	d1f8      	bne.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001dd6:	d003      	beq.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x80>
        return HAL_TIMEOUT;
 8001dd8:	2003      	movs	r0, #3
 8001dda:	4770      	bx	lr
  return HAL_OK;
 8001ddc:	2000      	movs	r0, #0
 8001dde:	4770      	bx	lr
 8001de0:	2000      	movs	r0, #0
 8001de2:	4770      	bx	lr
 8001de4:	2000      	movs	r0, #0
}  
 8001de6:	4770      	bx	lr
 8001de8:	40007000 	.word	0x40007000
 8001dec:	20000038 	.word	0x20000038

08001df0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001df0:	b530      	push	{r4, r5, lr}
 8001df2:	b083      	sub	sp, #12
 8001df4:	4605      	mov	r5, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001dfe:	d00b      	beq.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e00:	f7ff ffa6 	bl	8001d50 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e04:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001e08:	d017      	beq.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e0a:	2d80      	cmp	r5, #128	; 0x80
 8001e0c:	d81f      	bhi.n	8001e4e <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e0e:	d02d      	beq.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e10:	2d70      	cmp	r5, #112	; 0x70
 8001e12:	d02d      	beq.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e14:	2100      	movs	r1, #0
 8001e16:	e01b      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	4c17      	ldr	r4, [pc, #92]	; (8001e78 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001e1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001e2c:	f7ff ff90 	bl	8001d50 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e36:	65a3      	str	r3, [r4, #88]	; 0x58
 8001e38:	e7e4      	b.n	8001e04 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8001e3a:	2d80      	cmp	r5, #128	; 0x80
 8001e3c:	d903      	bls.n	8001e46 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8001e3e:	2da0      	cmp	r5, #160	; 0xa0
 8001e40:	d903      	bls.n	8001e4a <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e42:	2102      	movs	r1, #2
 8001e44:	e004      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e46:	2100      	movs	r1, #0
 8001e48:	e002      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	e000      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e4e:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001e52:	6813      	ldr	r3, [r2, #0]
 8001e54:	f023 0307 	bic.w	r3, r3, #7
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001e5c:	6813      	ldr	r3, [r2, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	4299      	cmp	r1, r3
 8001e64:	d006      	beq.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8001e66:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8001e68:	b003      	add	sp, #12
 8001e6a:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	e7ef      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2101      	movs	r1, #1
 8001e72:	e7ed      	b.n	8001e50 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8001e74:	2000      	movs	r0, #0
 8001e76:	e7f7      	b.n	8001e68 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40022000 	.word	0x40022000

08001e80 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f013 0f0c 	tst.w	r3, #12
 8001e88:	d01a      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x40>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001e8a:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d00e      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x34>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e96:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d02f      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x82>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ea2:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d02c      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001eae:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x66>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d1ea      	bne.n	8001e96 <HAL_RCC_GetSysClockFreq+0x16>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f013 0f08 	tst.w	r3, #8
 8001ec8:	d114      	bne.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x74>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed0:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 8001ed4:	4a27      	ldr	r2, [pc, #156]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ed6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f013 0f0c 	tst.w	r3, #12
 8001ee2:	d00c      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x7e>
  uint32_t sysclockfreq = 0U;
 8001ee4:	2000      	movs	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ee6:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ee8:	6893      	ldr	r3, [r2, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d00d      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x8e>
}
 8001ef2:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001efc:	e7ea      	b.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = msirange;
 8001efe:	4608      	mov	r0, r1
 8001f00:	e7f1      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSI_VALUE;
 8001f02:	481d      	ldr	r0, [pc, #116]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xf8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001f04:	2100      	movs	r1, #0
 8001f06:	e7ee      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSE_VALUE;
 8001f08:	481c      	ldr	r0, [pc, #112]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xfc>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	e7eb      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f0e:	4613      	mov	r3, r2
 8001f10:	68d2      	ldr	r2, [r2, #12]
 8001f12:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001f1c:	3301      	adds	r3, #1
    switch (pllsource)
 8001f1e:	2a02      	cmp	r2, #2
 8001f20:	d00a      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0xb8>
 8001f22:	2a03      	cmp	r2, #3
 8001f24:	d01a      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0xdc>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f2a:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001f2c:	68d0      	ldr	r0, [r2, #12]
 8001f2e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001f32:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0xca>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f38:	480f      	ldr	r0, [pc, #60]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001f40:	68d0      	ldr	r0, [r2, #12]
 8001f42:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001f46:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001f56:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8001f5a:	e7ca      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x72>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f5c:	4807      	ldr	r0, [pc, #28]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f62:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001f64:	68d0      	ldr	r0, [r2, #12]
 8001f66:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001f6a:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8001f6e:	e7ec      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0xca>
 8001f70:	40021000 	.word	0x40021000
 8001f74:	080033cc 	.word	0x080033cc
 8001f78:	00f42400 	.word	0x00f42400
 8001f7c:	007a1200 	.word	0x007a1200

08001f80 <HAL_RCC_OscConfig>:
{
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f86:	6803      	ldr	r3, [r0, #0]
 8001f88:	f013 0f10 	tst.w	r3, #16
 8001f8c:	d03f      	beq.n	800200e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001f8e:	4b97      	ldr	r3, [pc, #604]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f013 0f0c 	tst.w	r3, #12
 8001f96:	f040 8092 	bne.w	80020be <HAL_RCC_OscConfig+0x13e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f9a:	4b94      	ldr	r3, [pc, #592]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f013 0f02 	tst.w	r3, #2
 8001fa2:	d003      	beq.n	8001fac <HAL_RCC_OscConfig+0x2c>
 8001fa4:	6983      	ldr	r3, [r0, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 82c0 	beq.w	800252c <HAL_RCC_OscConfig+0x5ac>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fac:	6a20      	ldr	r0, [r4, #32]
 8001fae:	4b8f      	ldr	r3, [pc, #572]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f013 0f08 	tst.w	r3, #8
 8001fb6:	d062      	beq.n	800207e <HAL_RCC_OscConfig+0xfe>
 8001fb8:	4b8c      	ldr	r3, [pc, #560]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc0:	4283      	cmp	r3, r0
 8001fc2:	d263      	bcs.n	800208c <HAL_RCC_OscConfig+0x10c>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fc4:	f7ff ff14 	bl	8001df0 <RCC_SetFlashLatencyFromMSIRange>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	f040 82b1 	bne.w	8002530 <HAL_RCC_OscConfig+0x5b0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fce:	4b87      	ldr	r3, [pc, #540]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	f042 0208 	orr.w	r2, r2, #8
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fde:	6a21      	ldr	r1, [r4, #32]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001fea:	69e1      	ldr	r1, [r4, #28]
 8001fec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ff0:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff2:	f7ff ff45 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4b7d      	ldr	r3, [pc, #500]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ffe:	4a7c      	ldr	r2, [pc, #496]	; (80021f0 <HAL_RCC_OscConfig+0x270>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	40d8      	lsrs	r0, r3
 8002004:	4b7b      	ldr	r3, [pc, #492]	; (80021f4 <HAL_RCC_OscConfig+0x274>)
 8002006:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff faa3 	bl	8001554 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	f013 0f01 	tst.w	r3, #1
 8002014:	f000 80a1 	beq.w	800215a <HAL_RCC_OscConfig+0x1da>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8002018:	4b74      	ldr	r3, [pc, #464]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	2b08      	cmp	r3, #8
 8002022:	f000 8091 	beq.w	8002148 <HAL_RCC_OscConfig+0x1c8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002026:	4b71      	ldr	r3, [pc, #452]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800202e:	2b0c      	cmp	r3, #12
 8002030:	f000 8083 	beq.w	800213a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002034:	6863      	ldr	r3, [r4, #4]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203a:	f000 80b5 	beq.w	80021a8 <HAL_RCC_OscConfig+0x228>
 800203e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002042:	f000 80b7 	beq.w	80021b4 <HAL_RCC_OscConfig+0x234>
 8002046:	4b69      	ldr	r3, [pc, #420]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002056:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	6863      	ldr	r3, [r4, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80b7 	beq.w	80021ce <HAL_RCC_OscConfig+0x24e>
        tickstart = HAL_GetTick();
 8002060:	f7ff fa96 	bl	8001590 <HAL_GetTick>
 8002064:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002066:	4b61      	ldr	r3, [pc, #388]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800206e:	d174      	bne.n	800215a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff fa8e 	bl	8001590 <HAL_GetTick>
 8002074:	1b40      	subs	r0, r0, r5
 8002076:	2864      	cmp	r0, #100	; 0x64
 8002078:	d9f5      	bls.n	8002066 <HAL_RCC_OscConfig+0xe6>
            return HAL_TIMEOUT;
 800207a:	2003      	movs	r0, #3
 800207c:	e25f      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800207e:	4b5b      	ldr	r3, [pc, #364]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800208a:	e799      	b.n	8001fc0 <HAL_RCC_OscConfig+0x40>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800208c:	4b57      	ldr	r3, [pc, #348]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	f042 0208 	orr.w	r2, r2, #8
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800209c:	6a21      	ldr	r1, [r4, #32]
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80020a8:	69e1      	ldr	r1, [r4, #28]
 80020aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020ae:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b0:	6a20      	ldr	r0, [r4, #32]
 80020b2:	f7ff fe9d 	bl	8001df0 <RCC_SetFlashLatencyFromMSIRange>
 80020b6:	2800      	cmp	r0, #0
 80020b8:	d09b      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x72>
            return HAL_ERROR;
 80020ba:	2001      	movs	r0, #1
 80020bc:	e23f      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020be:	6983      	ldr	r3, [r0, #24]
 80020c0:	b333      	cbz	r3, 8002110 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_MSI_ENABLE();
 80020c2:	4a4a      	ldr	r2, [pc, #296]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 80020c4:	6813      	ldr	r3, [r2, #0]
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80020cc:	f7ff fa60 	bl	8001590 <HAL_GetTick>
 80020d0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80020d2:	4b46      	ldr	r3, [pc, #280]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f013 0f02 	tst.w	r3, #2
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020dc:	f7ff fa58 	bl	8001590 <HAL_GetTick>
 80020e0:	1b40      	subs	r0, r0, r5
 80020e2:	2802      	cmp	r0, #2
 80020e4:	d9f5      	bls.n	80020d2 <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 80020e6:	2003      	movs	r0, #3
 80020e8:	e229      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ea:	4b40      	ldr	r3, [pc, #256]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	f042 0208 	orr.w	r2, r2, #8
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020fa:	6a21      	ldr	r1, [r4, #32]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002106:	69e1      	ldr	r1, [r4, #28]
 8002108:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	e77e      	b.n	800200e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_MSI_DISABLE();
 8002110:	4a36      	ldr	r2, [pc, #216]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800211a:	f7ff fa39 	bl	8001590 <HAL_GetTick>
 800211e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002120:	4b32      	ldr	r3, [pc, #200]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f013 0f02 	tst.w	r3, #2
 8002128:	f43f af71 	beq.w	800200e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800212c:	f7ff fa30 	bl	8001590 <HAL_GetTick>
 8002130:	1b40      	subs	r0, r0, r5
 8002132:	2802      	cmp	r0, #2
 8002134:	d9f4      	bls.n	8002120 <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 8002136:	2003      	movs	r0, #3
 8002138:	e201      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b03      	cmp	r3, #3
 8002144:	f47f af76 	bne.w	8002034 <HAL_RCC_OscConfig+0xb4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	4b28      	ldr	r3, [pc, #160]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002150:	d003      	beq.n	800215a <HAL_RCC_OscConfig+0x1da>
 8002152:	6863      	ldr	r3, [r4, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 81ed 	beq.w	8002534 <HAL_RCC_OscConfig+0x5b4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	f013 0f02 	tst.w	r3, #2
 8002160:	d061      	beq.n	8002226 <HAL_RCC_OscConfig+0x2a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b04      	cmp	r3, #4
 800216c:	d04a      	beq.n	8002204 <HAL_RCC_OscConfig+0x284>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d03e      	beq.n	80021f8 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800217a:	68e3      	ldr	r3, [r4, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d078      	beq.n	8002272 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_ENABLE();
 8002180:	4a1a      	ldr	r2, [pc, #104]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002182:	6813      	ldr	r3, [r2, #0]
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800218a:	f7ff fa01 	bl	8001590 <HAL_GetTick>
 800218e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002198:	d162      	bne.n	8002260 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219a:	f7ff f9f9 	bl	8001590 <HAL_GetTick>
 800219e:	1b40      	subs	r0, r0, r5
 80021a0:	2802      	cmp	r0, #2
 80021a2:	d9f5      	bls.n	8002190 <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 80021a4:	2003      	movs	r0, #3
 80021a6:	e1ca      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a8:	4a10      	ldr	r2, [pc, #64]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 80021aa:	6813      	ldr	r3, [r2, #0]
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	e751      	b.n	8002058 <HAL_RCC_OscConfig+0xd8>
 80021b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021b8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e744      	b.n	8002058 <HAL_RCC_OscConfig+0xd8>
        tickstart = HAL_GetTick();
 80021ce:	f7ff f9df 	bl	8001590 <HAL_GetTick>
 80021d2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_RCC_OscConfig+0x26c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021dc:	d0bd      	beq.n	800215a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021de:	f7ff f9d7 	bl	8001590 <HAL_GetTick>
 80021e2:	1b40      	subs	r0, r0, r5
 80021e4:	2864      	cmp	r0, #100	; 0x64
 80021e6:	d9f5      	bls.n	80021d4 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 80021e8:	2003      	movs	r0, #3
 80021ea:	e1a8      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
 80021ec:	40021000 	.word	0x40021000
 80021f0:	080033b4 	.word	0x080033b4
 80021f4:	20000038 	.word	0x20000038
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021f8:	4bb1      	ldr	r3, [pc, #708]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d1ba      	bne.n	800217a <HAL_RCC_OscConfig+0x1fa>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002204:	4bae      	ldr	r3, [pc, #696]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800220c:	d003      	beq.n	8002216 <HAL_RCC_OscConfig+0x296>
 800220e:	68e3      	ldr	r3, [r4, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 8191 	beq.w	8002538 <HAL_RCC_OscConfig+0x5b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4aaa      	ldr	r2, [pc, #680]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002218:	6853      	ldr	r3, [r2, #4]
 800221a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800221e:	6921      	ldr	r1, [r4, #16]
 8002220:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002224:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	f013 0f08 	tst.w	r3, #8
 800222c:	d04c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x348>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222e:	6963      	ldr	r3, [r4, #20]
 8002230:	b39b      	cbz	r3, 800229a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_LSI_ENABLE();
 8002232:	4aa3      	ldr	r2, [pc, #652]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002234:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002240:	f7ff f9a6 	bl	8001590 <HAL_GetTick>
 8002244:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8002246:	4b9e      	ldr	r3, [pc, #632]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224c:	f013 0f02 	tst.w	r3, #2
 8002250:	d13a      	bne.n	80022c8 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002252:	f7ff f99d 	bl	8001590 <HAL_GetTick>
 8002256:	1b40      	subs	r0, r0, r5
 8002258:	2802      	cmp	r0, #2
 800225a:	d9f4      	bls.n	8002246 <HAL_RCC_OscConfig+0x2c6>
          return HAL_TIMEOUT;
 800225c:	2003      	movs	r0, #3
 800225e:	e16e      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4a97      	ldr	r2, [pc, #604]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002262:	6853      	ldr	r3, [r2, #4]
 8002264:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002268:	6921      	ldr	r1, [r4, #16]
 800226a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800226e:	6053      	str	r3, [r2, #4]
 8002270:	e7d9      	b.n	8002226 <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_HSI_DISABLE();
 8002272:	4a93      	ldr	r2, [pc, #588]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002274:	6813      	ldr	r3, [r2, #0]
 8002276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800227a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800227c:	f7ff f988 	bl	8001590 <HAL_GetTick>
 8002280:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8002282:	4b8f      	ldr	r3, [pc, #572]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800228a:	d0cc      	beq.n	8002226 <HAL_RCC_OscConfig+0x2a6>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228c:	f7ff f980 	bl	8001590 <HAL_GetTick>
 8002290:	1b40      	subs	r0, r0, r5
 8002292:	2802      	cmp	r0, #2
 8002294:	d9f5      	bls.n	8002282 <HAL_RCC_OscConfig+0x302>
            return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
 8002298:	e151      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
      __HAL_RCC_LSI_DISABLE();
 800229a:	4a89      	ldr	r2, [pc, #548]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 800229c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80022a8:	f7ff f972 	bl	8001590 <HAL_GetTick>
 80022ac:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80022ae:	4b84      	ldr	r3, [pc, #528]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 80022b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b4:	f013 0f02 	tst.w	r3, #2
 80022b8:	d006      	beq.n	80022c8 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ba:	f7ff f969 	bl	8001590 <HAL_GetTick>
 80022be:	1b40      	subs	r0, r0, r5
 80022c0:	2802      	cmp	r0, #2
 80022c2:	d9f4      	bls.n	80022ae <HAL_RCC_OscConfig+0x32e>
          return HAL_TIMEOUT;
 80022c4:	2003      	movs	r0, #3
 80022c6:	e13a      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c8:	6823      	ldr	r3, [r4, #0]
 80022ca:	f013 0f04 	tst.w	r3, #4
 80022ce:	d07a      	beq.n	80023c6 <HAL_RCC_OscConfig+0x446>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80022d0:	4b7b      	ldr	r3, [pc, #492]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022d8:	d136      	bne.n	8002348 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 80022dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022e2:	659a      	str	r2, [r3, #88]	; 0x58
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022ee:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f0:	4b74      	ldr	r3, [pc, #464]	; (80024c4 <HAL_RCC_OscConfig+0x544>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022f8:	d028      	beq.n	800234c <HAL_RCC_OscConfig+0x3cc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fa:	68a3      	ldr	r3, [r4, #8]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d039      	beq.n	8002374 <HAL_RCC_OscConfig+0x3f4>
 8002300:	2b05      	cmp	r3, #5
 8002302:	d03f      	beq.n	8002384 <HAL_RCC_OscConfig+0x404>
 8002304:	4b6e      	ldr	r3, [pc, #440]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002306:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002312:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002316:	f022 0204 	bic.w	r2, r2, #4
 800231a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231e:	68a3      	ldr	r3, [r4, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d03d      	beq.n	80023a0 <HAL_RCC_OscConfig+0x420>
      tickstart = HAL_GetTick();
 8002324:	f7ff f934 	bl	8001590 <HAL_GetTick>
 8002328:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800232a:	4b65      	ldr	r3, [pc, #404]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	f013 0f02 	tst.w	r3, #2
 8002334:	d146      	bne.n	80023c4 <HAL_RCC_OscConfig+0x444>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7ff f92b 	bl	8001590 <HAL_GetTick>
 800233a:	1b80      	subs	r0, r0, r6
 800233c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002340:	4298      	cmp	r0, r3
 8002342:	d9f2      	bls.n	800232a <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 8002344:	2003      	movs	r0, #3
 8002346:	e0fa      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
    FlagStatus       pwrclkchanged = RESET;
 8002348:	2500      	movs	r5, #0
 800234a:	e7d1      	b.n	80022f0 <HAL_RCC_OscConfig+0x370>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234c:	4a5d      	ldr	r2, [pc, #372]	; (80024c4 <HAL_RCC_OscConfig+0x544>)
 800234e:	6813      	ldr	r3, [r2, #0]
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002356:	f7ff f91b 	bl	8001590 <HAL_GetTick>
 800235a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_OscConfig+0x544>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002364:	d1c9      	bne.n	80022fa <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7ff f913 	bl	8001590 <HAL_GetTick>
 800236a:	1b80      	subs	r0, r0, r6
 800236c:	2802      	cmp	r0, #2
 800236e:	d9f5      	bls.n	800235c <HAL_RCC_OscConfig+0x3dc>
          return HAL_TIMEOUT;
 8002370:	2003      	movs	r0, #3
 8002372:	e0e4      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002376:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002382:	e7cc      	b.n	800231e <HAL_RCC_OscConfig+0x39e>
 8002384:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002386:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800238a:	f042 0204 	orr.w	r2, r2, #4
 800238e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002392:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800239e:	e7be      	b.n	800231e <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 80023a0:	f7ff f8f6 	bl	8001590 <HAL_GetTick>
 80023a4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80023a6:	4b46      	ldr	r3, [pc, #280]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	f013 0f02 	tst.w	r3, #2
 80023b0:	d008      	beq.n	80023c4 <HAL_RCC_OscConfig+0x444>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7ff f8ed 	bl	8001590 <HAL_GetTick>
 80023b6:	1b80      	subs	r0, r0, r6
 80023b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80023bc:	4298      	cmp	r0, r3
 80023be:	d9f2      	bls.n	80023a6 <HAL_RCC_OscConfig+0x426>
          return HAL_TIMEOUT;
 80023c0:	2003      	movs	r0, #3
 80023c2:	e0bc      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
    if(pwrclkchanged == SET)
 80023c4:	b9e5      	cbnz	r5, 8002400 <HAL_RCC_OscConfig+0x480>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	f013 0f20 	tst.w	r3, #32
 80023cc:	d035      	beq.n	800243a <HAL_RCC_OscConfig+0x4ba>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023d0:	b1e3      	cbz	r3, 800240c <HAL_RCC_OscConfig+0x48c>
      __HAL_RCC_HSI48_ENABLE();
 80023d2:	4a3b      	ldr	r2, [pc, #236]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 80023d4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80023e0:	f7ff f8d6 	bl	8001590 <HAL_GetTick>
 80023e4:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 80023e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ec:	f013 0f02 	tst.w	r3, #2
 80023f0:	d123      	bne.n	800243a <HAL_RCC_OscConfig+0x4ba>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f2:	f7ff f8cd 	bl	8001590 <HAL_GetTick>
 80023f6:	1b40      	subs	r0, r0, r5
 80023f8:	2802      	cmp	r0, #2
 80023fa:	d9f4      	bls.n	80023e6 <HAL_RCC_OscConfig+0x466>
          return HAL_TIMEOUT;
 80023fc:	2003      	movs	r0, #3
 80023fe:	e09e      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002400:	4a2f      	ldr	r2, [pc, #188]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002402:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002408:	6593      	str	r3, [r2, #88]	; 0x58
 800240a:	e7dc      	b.n	80023c6 <HAL_RCC_OscConfig+0x446>
      __HAL_RCC_HSI48_DISABLE();
 800240c:	4a2c      	ldr	r2, [pc, #176]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 800240e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800241a:	f7ff f8b9 	bl	8001590 <HAL_GetTick>
 800241e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002426:	f013 0f02 	tst.w	r3, #2
 800242a:	d006      	beq.n	800243a <HAL_RCC_OscConfig+0x4ba>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800242c:	f7ff f8b0 	bl	8001590 <HAL_GetTick>
 8002430:	1b40      	subs	r0, r0, r5
 8002432:	2802      	cmp	r0, #2
 8002434:	d9f4      	bls.n	8002420 <HAL_RCC_OscConfig+0x4a0>
          return HAL_TIMEOUT;
 8002436:	2003      	movs	r0, #3
 8002438:	e081      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800243a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	d07d      	beq.n	800253c <HAL_RCC_OscConfig+0x5bc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002440:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002442:	6892      	ldr	r2, [r2, #8]
 8002444:	f002 020c 	and.w	r2, r2, #12
 8002448:	2a0c      	cmp	r2, #12
 800244a:	d07a      	beq.n	8002542 <HAL_RCC_OscConfig+0x5c2>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800244c:	2b02      	cmp	r3, #2
 800244e:	d023      	beq.n	8002498 <HAL_RCC_OscConfig+0x518>
        __HAL_RCC_PLL_DISABLE();
 8002450:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002458:	601a      	str	r2, [r3, #0]
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002460:	d104      	bne.n	800246c <HAL_RCC_OscConfig+0x4ec>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002464:	68d3      	ldr	r3, [r2, #12]
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 800246e:	68d3      	ldr	r3, [r2, #12]
 8002470:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002478:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800247a:	f7ff f889 	bl	8001590 <HAL_GetTick>
 800247e:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002480:	4b0f      	ldr	r3, [pc, #60]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002488:	d04e      	beq.n	8002528 <HAL_RCC_OscConfig+0x5a8>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248a:	f7ff f881 	bl	8001590 <HAL_GetTick>
 800248e:	1b00      	subs	r0, r0, r4
 8002490:	2802      	cmp	r0, #2
 8002492:	d9f5      	bls.n	8002480 <HAL_RCC_OscConfig+0x500>
            return HAL_TIMEOUT;
 8002494:	2003      	movs	r0, #3
 8002496:	e052      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_PLL_DISABLE();
 8002498:	4a09      	ldr	r2, [pc, #36]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 800249a:	6813      	ldr	r3, [r2, #0]
 800249c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80024a2:	f7ff f875 	bl	8001590 <HAL_GetTick>
 80024a6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_OscConfig+0x540>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCC_OscConfig+0x548>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b2:	f7ff f86d 	bl	8001590 <HAL_GetTick>
 80024b6:	1b40      	subs	r0, r0, r5
 80024b8:	2802      	cmp	r0, #2
 80024ba:	d9f5      	bls.n	80024a8 <HAL_RCC_OscConfig+0x528>
            return HAL_TIMEOUT;
 80024bc:	2003      	movs	r0, #3
 80024be:	e03e      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40007000 	.word	0x40007000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024ca:	1e5a      	subs	r2, r3, #1
 80024cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80024d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024d6:	4313      	orrs	r3, r2
 80024d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80024da:	0852      	lsrs	r2, r2, #1
 80024dc:	3a01      	subs	r2, #1
 80024de:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80024e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024e4:	0852      	lsrs	r2, r2, #1
 80024e6:	3a01      	subs	r2, #1
 80024e8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80024ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024ee:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80024f2:	4a15      	ldr	r2, [pc, #84]	; (8002548 <HAL_RCC_OscConfig+0x5c8>)
 80024f4:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fc:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024fe:	68d3      	ldr	r3, [r2, #12]
 8002500:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002504:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002506:	f7ff f843 	bl	8001590 <HAL_GetTick>
 800250a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <HAL_RCC_OscConfig+0x5c8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002514:	d106      	bne.n	8002524 <HAL_RCC_OscConfig+0x5a4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7ff f83b 	bl	8001590 <HAL_GetTick>
 800251a:	1b00      	subs	r0, r0, r4
 800251c:	2802      	cmp	r0, #2
 800251e:	d9f5      	bls.n	800250c <HAL_RCC_OscConfig+0x58c>
            return HAL_TIMEOUT;
 8002520:	2003      	movs	r0, #3
 8002522:	e00c      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
  return HAL_OK;
 8002524:	2000      	movs	r0, #0
 8002526:	e00a      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
 8002528:	2000      	movs	r0, #0
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
        return HAL_ERROR;
 800252c:	2001      	movs	r0, #1
 800252e:	e006      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
            return HAL_ERROR;
 8002530:	2001      	movs	r0, #1
 8002532:	e004      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
        return HAL_ERROR;
 8002534:	2001      	movs	r0, #1
 8002536:	e002      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
        return HAL_ERROR;
 8002538:	2001      	movs	r0, #1
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
  return HAL_OK;
 800253c:	2000      	movs	r0, #0
}
 800253e:	b002      	add	sp, #8
 8002540:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002542:	2001      	movs	r0, #1
 8002544:	e7fb      	b.n	800253e <HAL_RCC_OscConfig+0x5be>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000

0800254c <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 800254c:	4b66      	ldr	r3, [pc, #408]	; (80026e8 <HAL_RCC_ClockConfig+0x19c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	428b      	cmp	r3, r1
 8002556:	d20c      	bcs.n	8002572 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002558:	4a63      	ldr	r2, [pc, #396]	; (80026e8 <HAL_RCC_ClockConfig+0x19c>)
 800255a:	6813      	ldr	r3, [r2, #0]
 800255c:	f023 0307 	bic.w	r3, r3, #7
 8002560:	430b      	orrs	r3, r1
 8002562:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8002564:	6813      	ldr	r3, [r2, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	4299      	cmp	r1, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 800256e:	2001      	movs	r0, #1
 8002570:	4770      	bx	lr
{
 8002572:	b570      	push	{r4, r5, r6, lr}
 8002574:	460d      	mov	r5, r1
 8002576:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002578:	6803      	ldr	r3, [r0, #0]
 800257a:	f013 0f01 	tst.w	r3, #1
 800257e:	d06c      	beq.n	800265a <HAL_RCC_ClockConfig+0x10e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002580:	6843      	ldr	r3, [r0, #4]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d00a      	beq.n	800259c <HAL_RCC_ClockConfig+0x50>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	2b02      	cmp	r3, #2
 8002588:	d02d      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x9a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800258a:	2b00      	cmp	r3, #0
 800258c:	d132      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xa8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800258e:	4a57      	ldr	r2, [pc, #348]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	f012 0f02 	tst.w	r2, #2
 8002596:	d107      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8002598:	2001      	movs	r0, #1
 800259a:	bd70      	pop	{r4, r5, r6, pc}
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800259c:	4a53      	ldr	r2, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80025a4:	f000 809e 	beq.w	80026e4 <HAL_RCC_ClockConfig+0x198>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025a8:	4950      	ldr	r1, [pc, #320]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 80025aa:	688a      	ldr	r2, [r1, #8]
 80025ac:	f022 0203 	bic.w	r2, r2, #3
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80025b4:	f7fe ffec 	bl	8001590 <HAL_GetTick>
 80025b8:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ba:	6863      	ldr	r3, [r4, #4]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d020      	beq.n	8002602 <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d02d      	beq.n	8002620 <HAL_RCC_ClockConfig+0xd4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d03a      	beq.n	800263e <HAL_RCC_ClockConfig+0xf2>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80025c8:	4b48      	ldr	r3, [pc, #288]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d042      	beq.n	800265a <HAL_RCC_ClockConfig+0x10e>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d4:	f7fe ffdc 	bl	8001590 <HAL_GetTick>
 80025d8:	1b80      	subs	r0, r0, r6
 80025da:	f241 3388 	movw	r3, #5000	; 0x1388
 80025de:	4298      	cmp	r0, r3
 80025e0:	d9f2      	bls.n	80025c8 <HAL_RCC_ClockConfig+0x7c>
            return HAL_TIMEOUT;
 80025e2:	2003      	movs	r0, #3
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80025e6:	4a41      	ldr	r2, [pc, #260]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80025ee:	d1db      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80025f0:	2001      	movs	r0, #1
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80025f4:	4a3d      	ldr	r2, [pc, #244]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80025fc:	d1d4      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 80025fe:	2001      	movs	r0, #1
 8002600:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002602:	4b3a      	ldr	r3, [pc, #232]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b0c      	cmp	r3, #12
 800260c:	d025      	beq.n	800265a <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260e:	f7fe ffbf 	bl	8001590 <HAL_GetTick>
 8002612:	1b80      	subs	r0, r0, r6
 8002614:	f241 3388 	movw	r3, #5000	; 0x1388
 8002618:	4298      	cmp	r0, r3
 800261a:	d9f2      	bls.n	8002602 <HAL_RCC_ClockConfig+0xb6>
          return HAL_TIMEOUT;
 800261c:	2003      	movs	r0, #3
 800261e:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8002620:	4b32      	ldr	r3, [pc, #200]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d016      	beq.n	800265a <HAL_RCC_ClockConfig+0x10e>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262c:	f7fe ffb0 	bl	8001590 <HAL_GetTick>
 8002630:	1b80      	subs	r0, r0, r6
 8002632:	f241 3388 	movw	r3, #5000	; 0x1388
 8002636:	4298      	cmp	r0, r3
 8002638:	d9f2      	bls.n	8002620 <HAL_RCC_ClockConfig+0xd4>
            return HAL_TIMEOUT;
 800263a:	2003      	movs	r0, #3
 800263c:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800263e:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f013 0f0c 	tst.w	r3, #12
 8002646:	d008      	beq.n	800265a <HAL_RCC_ClockConfig+0x10e>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7fe ffa2 	bl	8001590 <HAL_GetTick>
 800264c:	1b80      	subs	r0, r0, r6
 800264e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002652:	4298      	cmp	r0, r3
 8002654:	d9f3      	bls.n	800263e <HAL_RCC_ClockConfig+0xf2>
            return HAL_TIMEOUT;
 8002656:	2003      	movs	r0, #3
 8002658:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	f013 0f02 	tst.w	r3, #2
 8002660:	d006      	beq.n	8002670 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002662:	4a22      	ldr	r2, [pc, #136]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 8002664:	6893      	ldr	r3, [r2, #8]
 8002666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800266a:	68a1      	ldr	r1, [r4, #8]
 800266c:	430b      	orrs	r3, r1
 800266e:	6093      	str	r3, [r2, #8]
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_ClockConfig+0x19c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	429d      	cmp	r5, r3
 800267a:	d20c      	bcs.n	8002696 <HAL_RCC_ClockConfig+0x14a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267c:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_RCC_ClockConfig+0x19c>)
 800267e:	6813      	ldr	r3, [r2, #0]
 8002680:	f023 0307 	bic.w	r3, r3, #7
 8002684:	432b      	orrs	r3, r5
 8002686:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8002688:	6813      	ldr	r3, [r2, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	429d      	cmp	r5, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_ClockConfig+0x14a>
      return HAL_ERROR;
 8002692:	2001      	movs	r0, #1
}
 8002694:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	f013 0f04 	tst.w	r3, #4
 800269c:	d006      	beq.n	80026ac <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 80026a0:	6893      	ldr	r3, [r2, #8]
 80026a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026a6:	68e1      	ldr	r1, [r4, #12]
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ac:	6823      	ldr	r3, [r4, #0]
 80026ae:	f013 0f08 	tst.w	r3, #8
 80026b2:	d007      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x178>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b4:	4a0d      	ldr	r2, [pc, #52]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 80026b6:	6893      	ldr	r3, [r2, #8]
 80026b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80026bc:	6921      	ldr	r1, [r4, #16]
 80026be:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026c2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026c4:	f7ff fbdc 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_RCC_ClockConfig+0x1a0>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026d0:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <HAL_RCC_ClockConfig+0x1a4>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	40d8      	lsrs	r0, r3
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <HAL_RCC_ClockConfig+0x1a8>)
 80026d8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80026da:	2000      	movs	r0, #0
 80026dc:	f7fe ff3a 	bl	8001554 <HAL_InitTick>
  return HAL_OK;
 80026e0:	2000      	movs	r0, #0
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80026e4:	2001      	movs	r0, #1
 80026e6:	bd70      	pop	{r4, r5, r6, pc}
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	080033b4 	.word	0x080033b4
 80026f4:	20000038 	.word	0x20000038

080026f8 <HAL_RCC_GetHCLKFreq>:
}
 80026f8:	4b01      	ldr	r3, [pc, #4]	; (8002700 <HAL_RCC_GetHCLKFreq+0x8>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000038 	.word	0x20000038

08002704 <HAL_RCC_GetPCLK1Freq>:
{
 8002704:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002706:	f7ff fff7 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 800270a:	4b04      	ldr	r3, [pc, #16]	; (800271c <HAL_RCC_GetPCLK1Freq+0x18>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002712:	4a03      	ldr	r2, [pc, #12]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002714:	5cd3      	ldrb	r3, [r2, r3]
}
 8002716:	40d8      	lsrs	r0, r3
 8002718:	bd08      	pop	{r3, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	080033c4 	.word	0x080033c4

08002724 <HAL_RCC_GetPCLK2Freq>:
{
 8002724:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002726:	f7ff ffe7 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <HAL_RCC_GetPCLK2Freq+0x18>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002732:	4a03      	ldr	r2, [pc, #12]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
}
 8002736:	40d8      	lsrs	r0, r3
 8002738:	bd08      	pop	{r3, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	080033c4 	.word	0x080033c4

08002744 <UART_EndRxTransfer>:
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002744:	6802      	ldr	r2, [r0, #0]
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800274c:	6013      	str	r3, [r2, #0]
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800274e:	6802      	ldr	r2, [r0, #0]
 8002750:	6893      	ldr	r3, [r2, #8]
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002758:	2320      	movs	r3, #32
 800275a:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800275e:	2300      	movs	r3, #0
 8002760:	6603      	str	r3, [r0, #96]	; 0x60
 8002762:	4770      	bx	lr

08002764 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002764:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b21      	cmp	r3, #33	; 0x21
 800276c:	d000      	beq.n	8002770 <UART_TxISR_8BIT+0xc>
 800276e:	4770      	bx	lr
  {
    if(huart->TxXferCount == 0)
 8002770:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002774:	b29b      	uxth	r3, r3
 8002776:	b16b      	cbz	r3, 8002794 <UART_TxISR_8BIT+0x30>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8002778:	6802      	ldr	r2, [r0, #0]
 800277a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800277c:	1c59      	adds	r1, r3, #1
 800277e:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002784:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29b      	uxth	r3, r3
 800278e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8002792:	e7ec      	b.n	800276e <UART_TxISR_8BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002794:	6802      	ldr	r2, [r0, #0]
 8002796:	6813      	ldr	r3, [r2, #0]
 8002798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800279c:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800279e:	6802      	ldr	r2, [r0, #0]
 80027a0:	6813      	ldr	r3, [r2, #0]
 80027a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4770      	bx	lr

080027aa <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027aa:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b21      	cmp	r3, #33	; 0x21
 80027b2:	d000      	beq.n	80027b6 <UART_TxISR_16BIT+0xc>
 80027b4:	4770      	bx	lr
  {
    if(huart->TxXferCount == 0)
 80027b6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	b183      	cbz	r3, 80027e0 <UART_TxISR_16BIT+0x36>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80027be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80027c0:	6802      	ldr	r2, [r0, #0]
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c8:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2;
 80027ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80027cc:	3302      	adds	r3, #2
 80027ce:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80027d0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 80027de:	e7e9      	b.n	80027b4 <UART_TxISR_16BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80027e0:	6802      	ldr	r2, [r0, #0]
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027e8:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027ea:	6802      	ldr	r2, [r0, #0]
 80027ec:	6813      	ldr	r3, [r2, #0]
 80027ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4770      	bx	lr

080027f6 <HAL_UART_DeInit>:
  if(huart == NULL)
 80027f6:	b1d8      	cbz	r0, 8002830 <HAL_UART_DeInit+0x3a>
{
 80027f8:	b538      	push	{r3, r4, r5, lr}
 80027fa:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	2324      	movs	r3, #36	; 0x24
 80027fe:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002802:	6802      	ldr	r2, [r0, #0]
 8002804:	6813      	ldr	r3, [r2, #0]
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800280c:	6803      	ldr	r3, [r0, #0]
 800280e:	2500      	movs	r5, #0
 8002810:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002812:	6803      	ldr	r3, [r0, #0]
 8002814:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002816:	6803      	ldr	r3, [r0, #0]
 8002818:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800281a:	f7fe fd45 	bl	80012a8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281e:	6765      	str	r5, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 8002820:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 8002824:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 8002828:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  return HAL_OK;
 800282c:	4628      	mov	r0, r5
 800282e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002830:	2001      	movs	r0, #1
 8002832:	4770      	bx	lr

08002834 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8002834:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b20      	cmp	r3, #32
 800283c:	d001      	beq.n	8002842 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 800283e:	2002      	movs	r0, #2
 8002840:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 8002842:	b341      	cbz	r1, 8002896 <HAL_UART_Transmit_IT+0x62>
 8002844:	b34a      	cbz	r2, 800289a <HAL_UART_Transmit_IT+0x66>
    __HAL_LOCK(huart);
 8002846:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800284a:	2b01      	cmp	r3, #1
 800284c:	d027      	beq.n	800289e <HAL_UART_Transmit_IT+0x6a>
 800284e:	2301      	movs	r3, #1
 8002850:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8002854:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002856:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800285a:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 800285e:	2300      	movs	r3, #0
 8002860:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002862:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002864:	2321      	movs	r3, #33	; 0x21
 8002866:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800286a:	6883      	ldr	r3, [r0, #8]
 800286c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002870:	d00b      	beq.n	800288a <HAL_UART_Transmit_IT+0x56>
        huart->TxISR = UART_TxISR_8BIT;
 8002872:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_UART_Transmit_IT+0x70>)
 8002874:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8002876:	2300      	movs	r3, #0
 8002878:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);  
 800287c:	6801      	ldr	r1, [r0, #0]
 800287e:	680a      	ldr	r2, [r1, #0]
 8002880:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002884:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002886:	4618      	mov	r0, r3
 8002888:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288a:	6903      	ldr	r3, [r0, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_UART_Transmit_IT+0x3e>
        huart->TxISR = UART_TxISR_16BIT;
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_UART_Transmit_IT+0x74>)
 8002892:	6643      	str	r3, [r0, #100]	; 0x64
 8002894:	e7ef      	b.n	8002876 <HAL_UART_Transmit_IT+0x42>
      return HAL_ERROR;
 8002896:	2001      	movs	r0, #1
 8002898:	4770      	bx	lr
 800289a:	2001      	movs	r0, #1
 800289c:	4770      	bx	lr
    __HAL_LOCK(huart);
 800289e:	2002      	movs	r0, #2
}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	08002765 	.word	0x08002765
 80028a8:	080027ab 	.word	0x080027ab

080028ac <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80028ac:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d001      	beq.n	80028ba <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 80028b6:	2002      	movs	r0, #2
 80028b8:	4770      	bx	lr
    if((pData == NULL ) || (Size == 0U))
 80028ba:	2900      	cmp	r1, #0
 80028bc:	d056      	beq.n	800296c <HAL_UART_Receive_IT+0xc0>
 80028be:	2a00      	cmp	r2, #0
 80028c0:	d056      	beq.n	8002970 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 80028c2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d054      	beq.n	8002974 <HAL_UART_Receive_IT+0xc8>
 80028ca:	2301      	movs	r3, #1
 80028cc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 80028d0:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 80028d2:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80028d6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 80028da:	2300      	movs	r3, #0
 80028dc:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 80028de:	6883      	ldr	r3, [r0, #8]
 80028e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e4:	d006      	beq.n	80028f4 <HAL_UART_Receive_IT+0x48>
 80028e6:	b9a3      	cbnz	r3, 8002912 <HAL_UART_Receive_IT+0x66>
 80028e8:	6903      	ldr	r3, [r0, #16]
 80028ea:	b973      	cbnz	r3, 800290a <HAL_UART_Receive_IT+0x5e>
 80028ec:	23ff      	movs	r3, #255	; 0xff
 80028ee:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80028f2:	e011      	b.n	8002918 <HAL_UART_Receive_IT+0x6c>
 80028f4:	6903      	ldr	r3, [r0, #16]
 80028f6:	b923      	cbnz	r3, 8002902 <HAL_UART_Receive_IT+0x56>
 80028f8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80028fc:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002900:	e00a      	b.n	8002918 <HAL_UART_Receive_IT+0x6c>
 8002902:	23ff      	movs	r3, #255	; 0xff
 8002904:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002908:	e006      	b.n	8002918 <HAL_UART_Receive_IT+0x6c>
 800290a:	237f      	movs	r3, #127	; 0x7f
 800290c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002910:	e002      	b.n	8002918 <HAL_UART_Receive_IT+0x6c>
 8002912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002916:	d019      	beq.n	800294c <HAL_UART_Receive_IT+0xa0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002918:	2300      	movs	r3, #0
 800291a:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800291c:	2322      	movs	r3, #34	; 0x22
 800291e:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002922:	6802      	ldr	r2, [r0, #0]
 8002924:	6893      	ldr	r3, [r2, #8]
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6093      	str	r3, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292c:	6883      	ldr	r3, [r0, #8]
 800292e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002932:	d015      	beq.n	8002960 <HAL_UART_Receive_IT+0xb4>
        huart->RxISR = UART_RxISR_8BIT;
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_UART_Receive_IT+0xcc>)
 8002936:	6603      	str	r3, [r0, #96]	; 0x60
      __HAL_UNLOCK(huart);
 8002938:	2300      	movs	r3, #0
 800293a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800293e:	6801      	ldr	r1, [r0, #0]
 8002940:	680a      	ldr	r2, [r1, #0]
 8002942:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002946:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002948:	4618      	mov	r0, r3
 800294a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800294c:	6903      	ldr	r3, [r0, #16]
 800294e:	b91b      	cbnz	r3, 8002958 <HAL_UART_Receive_IT+0xac>
 8002950:	237f      	movs	r3, #127	; 0x7f
 8002952:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002956:	e7df      	b.n	8002918 <HAL_UART_Receive_IT+0x6c>
 8002958:	233f      	movs	r3, #63	; 0x3f
 800295a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800295e:	e7db      	b.n	8002918 <HAL_UART_Receive_IT+0x6c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002960:	6903      	ldr	r3, [r0, #16]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1e6      	bne.n	8002934 <HAL_UART_Receive_IT+0x88>
        huart->RxISR = UART_RxISR_16BIT;
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_UART_Receive_IT+0xd0>)
 8002968:	6603      	str	r3, [r0, #96]	; 0x60
 800296a:	e7e5      	b.n	8002938 <HAL_UART_Receive_IT+0x8c>
      return HAL_ERROR;
 800296c:	2001      	movs	r0, #1
 800296e:	4770      	bx	lr
 8002970:	2001      	movs	r0, #1
 8002972:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002974:	2002      	movs	r0, #2
}
 8002976:	4770      	bx	lr
 8002978:	0800299d 	.word	0x0800299d
 800297c:	08002a01 	.word	0x08002a01

08002980 <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002980:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002982:	6801      	ldr	r1, [r0, #0]
 8002984:	680a      	ldr	r2, [r1, #0]
 8002986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800298a:	600a      	str	r2, [r1, #0]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800298c:	2220      	movs	r2, #32
 800298e:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002992:	2200      	movs	r2, #0
 8002994:	6642      	str	r2, [r0, #100]	; 0x64
  
  HAL_UART_TxCpltCallback(huart);
 8002996:	f7fe fca9 	bl	80012ec <HAL_UART_TxCpltCallback>
 800299a:	bd08      	pop	{r3, pc}

0800299c <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 800299c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029a0:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b22      	cmp	r3, #34	; 0x22
 80029a8:	d006      	beq.n	80029b8 <UART_RxISR_8BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80029aa:	6802      	ldr	r2, [r0, #0]
 80029ac:	8b13      	ldrh	r3, [r2, #24]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f043 0308 	orr.w	r3, r3, #8
 80029b4:	8313      	strh	r3, [r2, #24]
  }
}
 80029b6:	4770      	bx	lr
{
 80029b8:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80029ba:	6803      	ldr	r3, [r0, #0]
 80029bc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80029be:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80029c0:	1c5c      	adds	r4, r3, #1
 80029c2:	6544      	str	r4, [r0, #84]	; 0x54
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	400a      	ands	r2, r1
 80029c8:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0)
 80029ca:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80029d8:	b103      	cbz	r3, 80029dc <UART_RxISR_8BIT+0x40>
 80029da:	bd10      	pop	{r4, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029dc:	6802      	ldr	r2, [r0, #0]
 80029de:	6813      	ldr	r3, [r2, #0]
 80029e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029e4:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029e6:	6802      	ldr	r2, [r0, #0]
 80029e8:	6893      	ldr	r3, [r2, #8]
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80029f0:	2320      	movs	r3, #32
 80029f2:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 80029fa:	f7fe fcb5 	bl	8001368 <HAL_UART_RxCpltCallback>
 80029fe:	bd10      	pop	{r4, pc}

08002a00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002a00:	b508      	push	{r3, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8002a02:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a06:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b22      	cmp	r3, #34	; 0x22
 8002a0e:	d006      	beq.n	8002a1e <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002a10:	6802      	ldr	r2, [r0, #0]
 8002a12:	8b13      	ldrh	r3, [r2, #24]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f043 0308 	orr.w	r3, r3, #8
 8002a1a:	8313      	strh	r3, [r2, #24]
 8002a1c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a1e:	6803      	ldr	r3, [r0, #0]
 8002a20:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002a22:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8002a24:	400a      	ands	r2, r1
 8002a26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr +=2;
 8002a28:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002a2a:	3302      	adds	r3, #2
 8002a2c:	6543      	str	r3, [r0, #84]	; 0x54
    if(--huart->RxXferCount == 0)
 8002a2e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1ed      	bne.n	8002a1c <UART_RxISR_16BIT+0x1c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a40:	6802      	ldr	r2, [r0, #0]
 8002a42:	6813      	ldr	r3, [r2, #0]
 8002a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a48:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a4a:	6802      	ldr	r2, [r0, #0]
 8002a4c:	6893      	ldr	r3, [r2, #8]
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002a54:	2320      	movs	r3, #32
 8002a56:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8002a5e:	f7fe fc83 	bl	8001368 <HAL_UART_RxCpltCallback>
 8002a62:	bd08      	pop	{r3, pc}

08002a64 <HAL_UART_IRQHandler>:
{
 8002a64:	b538      	push	{r3, r4, r5, lr}
 8002a66:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a68:	6802      	ldr	r2, [r0, #0]
 8002a6a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a6c:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a6e:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 8002a70:	f013 050f 	ands.w	r5, r3, #15
 8002a74:	d10c      	bne.n	8002a90 <HAL_UART_IRQHandler+0x2c>
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8002a76:	f013 0f20 	tst.w	r3, #32
 8002a7a:	d009      	beq.n	8002a90 <HAL_UART_IRQHandler+0x2c>
       && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a7c:	f011 0f20 	tst.w	r1, #32
 8002a80:	d006      	beq.n	8002a90 <HAL_UART_IRQHandler+0x2c>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8002a82:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8099 	beq.w	8002bbc <HAL_UART_IRQHandler+0x158>
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4798      	blx	r3
 8002a8e:	bd38      	pop	{r3, r4, r5, pc}
  if(   (errorflags != RESET)
 8002a90:	2d00      	cmp	r5, #0
 8002a92:	d070      	beq.n	8002b76 <HAL_UART_IRQHandler+0x112>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002a94:	f010 0501 	ands.w	r5, r0, #1
 8002a98:	d102      	bne.n	8002aa0 <HAL_UART_IRQHandler+0x3c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002a9a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002a9e:	d06a      	beq.n	8002b76 <HAL_UART_IRQHandler+0x112>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aa0:	f013 0f01 	tst.w	r3, #1
 8002aa4:	d007      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x52>
 8002aa6:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002aaa:	d004      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002aac:	2001      	movs	r0, #1
 8002aae:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ab0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002ab2:	4302      	orrs	r2, r0
 8002ab4:	6762      	str	r2, [r4, #116]	; 0x74
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ab6:	f013 0f02 	tst.w	r3, #2
 8002aba:	d007      	beq.n	8002acc <HAL_UART_IRQHandler+0x68>
 8002abc:	b135      	cbz	r5, 8002acc <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ac4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002ac6:	f042 0204 	orr.w	r2, r2, #4
 8002aca:	6762      	str	r2, [r4, #116]	; 0x74
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002acc:	f013 0f04 	tst.w	r3, #4
 8002ad0:	d007      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x7e>
 8002ad2:	b135      	cbz	r5, 8002ae2 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ad4:	6822      	ldr	r2, [r4, #0]
 8002ad6:	2004      	movs	r0, #4
 8002ad8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ada:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002adc:	f042 0202 	orr.w	r2, r2, #2
 8002ae0:	6762      	str	r2, [r4, #116]	; 0x74
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8002ae2:	f013 0f08 	tst.w	r3, #8
 8002ae6:	d009      	beq.n	8002afc <HAL_UART_IRQHandler+0x98>
       &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8002ae8:	f011 0f20 	tst.w	r1, #32
 8002aec:	d100      	bne.n	8002af0 <HAL_UART_IRQHandler+0x8c>
 8002aee:	b12d      	cbz	r5, 8002afc <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002af0:	6822      	ldr	r2, [r4, #0]
 8002af2:	2008      	movs	r0, #8
 8002af4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002af6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002af8:	4302      	orrs	r2, r0
 8002afa:	6762      	str	r2, [r4, #116]	; 0x74
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002afc:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d05c      	beq.n	8002bbc <HAL_UART_IRQHandler+0x158>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8002b02:	f013 0f20 	tst.w	r3, #32
 8002b06:	d006      	beq.n	8002b16 <HAL_UART_IRQHandler+0xb2>
         && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b08:	f011 0f20 	tst.w	r1, #32
 8002b0c:	d003      	beq.n	8002b16 <HAL_UART_IRQHandler+0xb2>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8002b0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b10:	b10b      	cbz	r3, 8002b16 <HAL_UART_IRQHandler+0xb2>
 8002b12:	4620      	mov	r0, r4
 8002b14:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002b16:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002b18:	f013 0f08 	tst.w	r3, #8
 8002b1c:	d104      	bne.n	8002b28 <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002b22:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b26:	d020      	beq.n	8002b6a <HAL_UART_IRQHandler+0x106>
        UART_EndRxTransfer(huart);
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f7ff fe0b 	bl	8002744 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2e:	6823      	ldr	r3, [r4, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002b36:	d014      	beq.n	8002b62 <HAL_UART_IRQHandler+0xfe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002b40:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002b42:	b153      	cbz	r3, 8002b5a <HAL_UART_IRQHandler+0xf6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b44:	4a20      	ldr	r2, [pc, #128]	; (8002bc8 <HAL_UART_IRQHandler+0x164>)
 8002b46:	639a      	str	r2, [r3, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b48:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002b4a:	f7fe fd8f 	bl	800166c <HAL_DMA_Abort_IT>
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d034      	beq.n	8002bbc <HAL_UART_IRQHandler+0x158>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b52:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002b54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b56:	4798      	blx	r3
 8002b58:	bd38      	pop	{r3, r4, r5, pc}
            HAL_UART_ErrorCallback(huart);
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f7fe fc4e 	bl	80013fc <HAL_UART_ErrorCallback>
 8002b60:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7fe fc4a 	bl	80013fc <HAL_UART_ErrorCallback>
 8002b68:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	f7fe fc46 	bl	80013fc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	6763      	str	r3, [r4, #116]	; 0x74
 8002b74:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002b76:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002b7a:	d002      	beq.n	8002b82 <HAL_UART_IRQHandler+0x11e>
 8002b7c:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002b80:	d10a      	bne.n	8002b98 <HAL_UART_IRQHandler+0x134>
  if(((isrflags & USART_ISR_TXE) != RESET)
 8002b82:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b86:	d013      	beq.n	8002bb0 <HAL_UART_IRQHandler+0x14c>
     && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b88:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b8c:	d010      	beq.n	8002bb0 <HAL_UART_IRQHandler+0x14c>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8002b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b90:	b1a3      	cbz	r3, 8002bbc <HAL_UART_IRQHandler+0x158>
 8002b92:	4620      	mov	r0, r4
 8002b94:	4798      	blx	r3
 8002b96:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b9c:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    HAL_UARTEx_WakeupCallback(huart);
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f000 fb04 	bl	80031b6 <HAL_UARTEx_WakeupCallback>
    return;
 8002bae:	bd38      	pop	{r3, r4, r5, pc}
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bb0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002bb4:	d002      	beq.n	8002bbc <HAL_UART_IRQHandler+0x158>
 8002bb6:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002bba:	d100      	bne.n	8002bbe <HAL_UART_IRQHandler+0x15a>
 8002bbc:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f7ff fede 	bl	8002980 <UART_EndTransmit_IT>
    return;
 8002bc4:	e7fa      	b.n	8002bbc <HAL_UART_IRQHandler+0x158>
 8002bc6:	bf00      	nop
 8002bc8:	08002bcd 	.word	0x08002bcd

08002bcc <UART_DMAAbortOnError>:
{
 8002bcc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002bce:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002bd6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002bda:	f7fe fc0f 	bl	80013fc <HAL_UART_ErrorCallback>
 8002bde:	bd08      	pop	{r3, pc}

08002be0 <UART_SetConfig>:
{
 8002be0:	e92d 4b78 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, fp, lr}
 8002be4:	4604      	mov	r4, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8002be6:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002be8:	6883      	ldr	r3, [r0, #8]
 8002bea:	6902      	ldr	r2, [r0, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	6942      	ldr	r2, [r0, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	69c2      	ldr	r2, [r0, #28]
 8002bf4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf6:	6808      	ldr	r0, [r1, #0]
 8002bf8:	4a9b      	ldr	r2, [pc, #620]	; (8002e68 <UART_SetConfig+0x288>)
 8002bfa:	4002      	ands	r2, r0
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c00:	6822      	ldr	r2, [r4, #0]
 8002c02:	6853      	ldr	r3, [r2, #4]
 8002c04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c08:	68e1      	ldr	r1, [r4, #12]
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c0e:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c10:	6822      	ldr	r2, [r4, #0]
 8002c12:	4996      	ldr	r1, [pc, #600]	; (8002e6c <UART_SetConfig+0x28c>)
 8002c14:	428a      	cmp	r2, r1
 8002c16:	d001      	beq.n	8002c1c <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8002c18:	6a21      	ldr	r1, [r4, #32]
 8002c1a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c1c:	6891      	ldr	r1, [r2, #8]
 8002c1e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8002c22:	430b      	orrs	r3, r1
 8002c24:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	4a91      	ldr	r2, [pc, #580]	; (8002e70 <UART_SetConfig+0x290>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d023      	beq.n	8002c76 <UART_SetConfig+0x96>
 8002c2e:	4a91      	ldr	r2, [pc, #580]	; (8002e74 <UART_SetConfig+0x294>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d034      	beq.n	8002c9e <UART_SetConfig+0xbe>
 8002c34:	4a90      	ldr	r2, [pc, #576]	; (8002e78 <UART_SetConfig+0x298>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04a      	beq.n	8002cd0 <UART_SetConfig+0xf0>
 8002c3a:	4a90      	ldr	r2, [pc, #576]	; (8002e7c <UART_SetConfig+0x29c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d05d      	beq.n	8002cfc <UART_SetConfig+0x11c>
 8002c40:	4a8a      	ldr	r2, [pc, #552]	; (8002e6c <UART_SetConfig+0x28c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d070      	beq.n	8002d28 <UART_SetConfig+0x148>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002c46:	2510      	movs	r5, #16
  if(UART_INSTANCE_LOWPOWER(huart))
 8002c48:	4a88      	ldr	r2, [pc, #544]	; (8002e6c <UART_SetConfig+0x28c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	f000 808f 	beq.w	8002d6e <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c50:	69e3      	ldr	r3, [r4, #28]
 8002c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c56:	f000 80fd 	beq.w	8002e54 <UART_SetConfig+0x274>
    switch (clocksource)
 8002c5a:	2d08      	cmp	r5, #8
 8002c5c:	f200 819b 	bhi.w	8002f96 <UART_SetConfig+0x3b6>
 8002c60:	e8df f015 	tbh	[pc, r5, lsl #1]
 8002c64:	0171015a 	.word	0x0171015a
 8002c68:	0199017b 	.word	0x0199017b
 8002c6c:	01990186 	.word	0x01990186
 8002c70:	01990199 	.word	0x01990199
 8002c74:	0190      	.short	0x0190
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c76:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8002c7a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002c7e:	f002 0203 	and.w	r2, r2, #3
 8002c82:	2a03      	cmp	r2, #3
 8002c84:	d809      	bhi.n	8002c9a <UART_SetConfig+0xba>
 8002c86:	e8df f002 	tbb	[pc, r2]
 8002c8a:	0402      	.short	0x0402
 8002c8c:	0668      	.short	0x0668
 8002c8e:	2501      	movs	r5, #1
 8002c90:	e7da      	b.n	8002c48 <UART_SetConfig+0x68>
 8002c92:	2504      	movs	r5, #4
 8002c94:	e7d8      	b.n	8002c48 <UART_SetConfig+0x68>
 8002c96:	2508      	movs	r5, #8
 8002c98:	e7d6      	b.n	8002c48 <UART_SetConfig+0x68>
 8002c9a:	2510      	movs	r5, #16
 8002c9c:	e7d4      	b.n	8002c48 <UART_SetConfig+0x68>
 8002c9e:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8002ca2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002ca6:	f002 020c 	and.w	r2, r2, #12
 8002caa:	2a0c      	cmp	r2, #12
 8002cac:	d80e      	bhi.n	8002ccc <UART_SetConfig+0xec>
 8002cae:	e8df f002 	tbb	[pc, r2]
 8002cb2:	0d07      	.short	0x0d07
 8002cb4:	0d090d0d 	.word	0x0d090d0d
 8002cb8:	0d560d0d 	.word	0x0d560d0d
 8002cbc:	0d0d      	.short	0x0d0d
 8002cbe:	0b          	.byte	0x0b
 8002cbf:	00          	.byte	0x00
 8002cc0:	2500      	movs	r5, #0
 8002cc2:	e7c1      	b.n	8002c48 <UART_SetConfig+0x68>
 8002cc4:	2504      	movs	r5, #4
 8002cc6:	e7bf      	b.n	8002c48 <UART_SetConfig+0x68>
 8002cc8:	2508      	movs	r5, #8
 8002cca:	e7bd      	b.n	8002c48 <UART_SetConfig+0x68>
 8002ccc:	2510      	movs	r5, #16
 8002cce:	e7bb      	b.n	8002c48 <UART_SetConfig+0x68>
 8002cd0:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8002cd4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002cd8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002cdc:	2a10      	cmp	r2, #16
 8002cde:	d009      	beq.n	8002cf4 <UART_SetConfig+0x114>
 8002ce0:	d905      	bls.n	8002cee <UART_SetConfig+0x10e>
 8002ce2:	2a20      	cmp	r2, #32
 8002ce4:	d03d      	beq.n	8002d62 <UART_SetConfig+0x182>
 8002ce6:	2a30      	cmp	r2, #48	; 0x30
 8002ce8:	d106      	bne.n	8002cf8 <UART_SetConfig+0x118>
 8002cea:	2508      	movs	r5, #8
 8002cec:	e7ac      	b.n	8002c48 <UART_SetConfig+0x68>
 8002cee:	b91a      	cbnz	r2, 8002cf8 <UART_SetConfig+0x118>
 8002cf0:	2500      	movs	r5, #0
 8002cf2:	e7a9      	b.n	8002c48 <UART_SetConfig+0x68>
 8002cf4:	2504      	movs	r5, #4
 8002cf6:	e7a7      	b.n	8002c48 <UART_SetConfig+0x68>
 8002cf8:	2510      	movs	r5, #16
 8002cfa:	e7a5      	b.n	8002c48 <UART_SetConfig+0x68>
 8002cfc:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002d00:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002d04:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002d08:	2a40      	cmp	r2, #64	; 0x40
 8002d0a:	d009      	beq.n	8002d20 <UART_SetConfig+0x140>
 8002d0c:	d905      	bls.n	8002d1a <UART_SetConfig+0x13a>
 8002d0e:	2a80      	cmp	r2, #128	; 0x80
 8002d10:	d029      	beq.n	8002d66 <UART_SetConfig+0x186>
 8002d12:	2ac0      	cmp	r2, #192	; 0xc0
 8002d14:	d106      	bne.n	8002d24 <UART_SetConfig+0x144>
 8002d16:	2508      	movs	r5, #8
 8002d18:	e796      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d1a:	b91a      	cbnz	r2, 8002d24 <UART_SetConfig+0x144>
 8002d1c:	2500      	movs	r5, #0
 8002d1e:	e793      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d20:	2504      	movs	r5, #4
 8002d22:	e791      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d24:	2510      	movs	r5, #16
 8002d26:	e78f      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d28:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8002d2c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8002d30:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002d34:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002d38:	d00b      	beq.n	8002d52 <UART_SetConfig+0x172>
 8002d3a:	d907      	bls.n	8002d4c <UART_SetConfig+0x16c>
 8002d3c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002d40:	d013      	beq.n	8002d6a <UART_SetConfig+0x18a>
 8002d42:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8002d46:	d106      	bne.n	8002d56 <UART_SetConfig+0x176>
 8002d48:	2508      	movs	r5, #8
 8002d4a:	e77d      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d4c:	b91a      	cbnz	r2, 8002d56 <UART_SetConfig+0x176>
 8002d4e:	2500      	movs	r5, #0
 8002d50:	e77a      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d52:	2504      	movs	r5, #4
 8002d54:	e778      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d56:	2510      	movs	r5, #16
 8002d58:	e776      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d5a:	2502      	movs	r5, #2
 8002d5c:	e774      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d5e:	2502      	movs	r5, #2
 8002d60:	e772      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d62:	2502      	movs	r5, #2
 8002d64:	e770      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d66:	2502      	movs	r5, #2
 8002d68:	e76e      	b.n	8002c48 <UART_SetConfig+0x68>
 8002d6a:	2502      	movs	r5, #2
 8002d6c:	e76c      	b.n	8002c48 <UART_SetConfig+0x68>
    switch (clocksource)
 8002d6e:	2d08      	cmp	r5, #8
 8002d70:	d811      	bhi.n	8002d96 <UART_SetConfig+0x1b6>
 8002d72:	e8df f005 	tbb	[pc, r5]
 8002d76:	1008      	.short	0x1008
 8002d78:	100c1005 	.word	0x100c1005
 8002d7c:	1010      	.short	0x1010
 8002d7e:	13          	.byte	0x13
 8002d7f:	00          	.byte	0x00
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002d80:	483f      	ldr	r0, [pc, #252]	; (8002e80 <UART_SetConfig+0x2a0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d82:	2600      	movs	r6, #0
 8002d84:	e00d      	b.n	8002da2 <UART_SetConfig+0x1c2>
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002d86:	f7ff fcbd 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d8a:	2600      	movs	r6, #0
      break;
 8002d8c:	e009      	b.n	8002da2 <UART_SetConfig+0x1c2>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002d8e:	f7ff f877 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d92:	2600      	movs	r6, #0
      break;
 8002d94:	e005      	b.n	8002da2 <UART_SetConfig+0x1c2>
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002d96:	2000      	movs	r0, #0
      ret = HAL_ERROR;
 8002d98:	2601      	movs	r6, #1
      break;
 8002d9a:	e002      	b.n	8002da2 <UART_SetConfig+0x1c2>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002d9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 8002da0:	2600      	movs	r6, #0
    if (lpuart_ker_ck_pres != 0U)
 8002da2:	2800      	cmp	r0, #0
 8002da4:	f000 80c9 	beq.w	8002f3a <UART_SetConfig+0x35a>
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8002da8:	6862      	ldr	r2, [r4, #4]
 8002daa:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002dae:	4298      	cmp	r0, r3
 8002db0:	f0c0 80f4 	bcc.w	8002f9c <UART_SetConfig+0x3bc>
 8002db4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002db8:	f200 80f2 	bhi.w	8002fa0 <UART_SetConfig+0x3c0>
        switch (clocksource)
 8002dbc:	2d08      	cmp	r5, #8
 8002dbe:	d846      	bhi.n	8002e4e <UART_SetConfig+0x26e>
 8002dc0:	e8df f005 	tbb	[pc, r5]
 8002dc4:	451f4505 	.word	0x451f4505
 8002dc8:	45454529 	.word	0x45454529
 8002dcc:	3b          	.byte	0x3b
 8002dcd:	00          	.byte	0x00
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002dce:	f7ff fc99 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8002dd8:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8002ddc:	6862      	ldr	r2, [r4, #4]
 8002dde:	0850      	lsrs	r0, r2, #1
 8002de0:	eb18 0b00 	adds.w	fp, r8, r0
 8002de4:	f149 0c00 	adc.w	ip, r9, #0
 8002de8:	4658      	mov	r0, fp
 8002dea:	4661      	mov	r1, ip
 8002dec:	f7fd f9f2 	bl	80001d4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002df0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002df4:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <UART_SetConfig+0x2a4>)
 8002df6:	429a      	cmp	r2, r3
 8002df8:	f200 80d4 	bhi.w	8002fa4 <UART_SetConfig+0x3c4>
          huart->Instance->BRR = usartdiv;
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	60d8      	str	r0, [r3, #12]
 8002e00:	e09b      	b.n	8002f3a <UART_SetConfig+0x35a>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002e02:	0855      	lsrs	r5, r2, #1
 8002e04:	2300      	movs	r3, #0
 8002e06:	4820      	ldr	r0, [pc, #128]	; (8002e88 <UART_SetConfig+0x2a8>)
 8002e08:	2100      	movs	r1, #0
 8002e0a:	1940      	adds	r0, r0, r5
 8002e0c:	f141 0100 	adc.w	r1, r1, #0
 8002e10:	f7fd f9e0 	bl	80001d4 <__aeabi_uldivmod>
          break;
 8002e14:	e7ec      	b.n	8002df0 <UART_SetConfig+0x210>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e16:	f7ff f833 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8002e20:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8002e24:	6862      	ldr	r2, [r4, #4]
 8002e26:	0850      	lsrs	r0, r2, #1
 8002e28:	eb18 0b00 	adds.w	fp, r8, r0
 8002e2c:	f149 0c00 	adc.w	ip, r9, #0
 8002e30:	4658      	mov	r0, fp
 8002e32:	4661      	mov	r1, ip
 8002e34:	f7fd f9ce 	bl	80001d4 <__aeabi_uldivmod>
          break;
 8002e38:	e7da      	b.n	8002df0 <UART_SetConfig+0x210>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002e3a:	0850      	lsrs	r0, r2, #1
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002e44:	f141 0100 	adc.w	r1, r1, #0
 8002e48:	f7fd f9c4 	bl	80001d4 <__aeabi_uldivmod>
          break;
 8002e4c:	e7d0      	b.n	8002df0 <UART_SetConfig+0x210>
          ret = HAL_ERROR;
 8002e4e:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002e50:	2000      	movs	r0, #0
 8002e52:	e7cd      	b.n	8002df0 <UART_SetConfig+0x210>
    switch (clocksource)
 8002e54:	2d08      	cmp	r5, #8
 8002e56:	d85c      	bhi.n	8002f12 <UART_SetConfig+0x332>
 8002e58:	e8df f005 	tbb	[pc, r5]
 8002e5c:	5b3c3118 	.word	0x5b3c3118
 8002e60:	5b5b5b47 	.word	0x5b5b5b47
 8002e64:	52          	.byte	0x52
 8002e65:	00          	.byte	0x00
 8002e66:	bf00      	nop
 8002e68:	efff69f3 	.word	0xefff69f3
 8002e6c:	40008000 	.word	0x40008000
 8002e70:	40013800 	.word	0x40013800
 8002e74:	40004400 	.word	0x40004400
 8002e78:	40004800 	.word	0x40004800
 8002e7c:	40004c00 	.word	0x40004c00
 8002e80:	00f42400 	.word	0x00f42400
 8002e84:	000ffcff 	.word	0x000ffcff
 8002e88:	f4240000 	.word	0xf4240000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e8c:	f7ff fc3a 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8002e90:	6862      	ldr	r2, [r4, #4]
 8002e92:	0853      	lsrs	r3, r2, #1
 8002e94:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e9c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e9e:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ea0:	f1a3 0110 	sub.w	r1, r3, #16
 8002ea4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002ea8:	4291      	cmp	r1, r2
 8002eaa:	d87d      	bhi.n	8002fa8 <UART_SetConfig+0x3c8>
      brrtemp = usartdiv & 0xFFF0U;
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eb2:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002eb6:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8002eb8:	6822      	ldr	r2, [r4, #0]
 8002eba:	60d3      	str	r3, [r2, #12]
 8002ebc:	e03d      	b.n	8002f3a <UART_SetConfig+0x35a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ebe:	f7ff fc31 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 8002ec2:	6862      	ldr	r2, [r4, #4]
 8002ec4:	0853      	lsrs	r3, r2, #1
 8002ec6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ece:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ed0:	2600      	movs	r6, #0
      break;
 8002ed2:	e7e5      	b.n	8002ea0 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ed4:	6862      	ldr	r2, [r4, #4]
 8002ed6:	0853      	lsrs	r3, r2, #1
 8002ed8:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002edc:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ee4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ee6:	2600      	movs	r6, #0
      break;
 8002ee8:	e7da      	b.n	8002ea0 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002eea:	f7fe ffc9 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002eee:	6862      	ldr	r2, [r4, #4]
 8002ef0:	0853      	lsrs	r3, r2, #1
 8002ef2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002ef6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002efa:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002efc:	2600      	movs	r6, #0
      break;
 8002efe:	e7cf      	b.n	8002ea0 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f00:	6862      	ldr	r2, [r4, #4]
 8002f02:	0853      	lsrs	r3, r2, #1
 8002f04:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f0c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f0e:	2600      	movs	r6, #0
      break;
 8002f10:	e7c6      	b.n	8002ea0 <UART_SetConfig+0x2c0>
      ret = HAL_ERROR;
 8002f12:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e7c3      	b.n	8002ea0 <UART_SetConfig+0x2c0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f18:	f7ff fbf4 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8002f1c:	6863      	ldr	r3, [r4, #4]
 8002f1e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002f22:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f26:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f28:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f2a:	f1a0 0210 	sub.w	r2, r0, #16
 8002f2e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d83a      	bhi.n	8002fac <UART_SetConfig+0x3cc>
      huart->Instance->BRR = usartdiv;
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002f3e:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002f40:	4630      	mov	r0, r6
 8002f42:	e8bd 8b78 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, fp, pc}
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002f46:	f7ff fbed 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 8002f4a:	6863      	ldr	r3, [r4, #4]
 8002f4c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002f50:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f54:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f56:	2600      	movs	r6, #0
      break;
 8002f58:	e7e7      	b.n	8002f2a <UART_SetConfig+0x34a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f5a:	6863      	ldr	r3, [r4, #4]
 8002f5c:	0858      	lsrs	r0, r3, #1
 8002f5e:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8002f62:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 8002f66:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f6a:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f6c:	2600      	movs	r6, #0
      break;
 8002f6e:	e7dc      	b.n	8002f2a <UART_SetConfig+0x34a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f70:	f7fe ff86 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8002f74:	6863      	ldr	r3, [r4, #4]
 8002f76:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002f7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f7e:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f80:	2600      	movs	r6, #0
      break;
 8002f82:	e7d2      	b.n	8002f2a <UART_SetConfig+0x34a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002f84:	6863      	ldr	r3, [r4, #4]
 8002f86:	0858      	lsrs	r0, r3, #1
 8002f88:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8002f8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f90:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f92:	2600      	movs	r6, #0
      break;
 8002f94:	e7c9      	b.n	8002f2a <UART_SetConfig+0x34a>
      ret = HAL_ERROR;
 8002f96:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002f98:	2000      	movs	r0, #0
 8002f9a:	e7c6      	b.n	8002f2a <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 8002f9c:	2601      	movs	r6, #1
 8002f9e:	e7cc      	b.n	8002f3a <UART_SetConfig+0x35a>
 8002fa0:	2601      	movs	r6, #1
 8002fa2:	e7ca      	b.n	8002f3a <UART_SetConfig+0x35a>
          ret = HAL_ERROR;
 8002fa4:	2601      	movs	r6, #1
 8002fa6:	e7c8      	b.n	8002f3a <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 8002fa8:	2601      	movs	r6, #1
 8002faa:	e7c6      	b.n	8002f3a <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 8002fac:	2601      	movs	r6, #1
 8002fae:	e7c4      	b.n	8002f3a <UART_SetConfig+0x35a>

08002fb0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fb2:	f013 0f01 	tst.w	r3, #1
 8002fb6:	d006      	beq.n	8002fc6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fb8:	6802      	ldr	r2, [r0, #0]
 8002fba:	6853      	ldr	r3, [r2, #4]
 8002fbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002fc0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fc8:	f013 0f02 	tst.w	r3, #2
 8002fcc:	d006      	beq.n	8002fdc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fce:	6802      	ldr	r2, [r0, #0]
 8002fd0:	6853      	ldr	r3, [r2, #4]
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fde:	f013 0f04 	tst.w	r3, #4
 8002fe2:	d006      	beq.n	8002ff2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fe4:	6802      	ldr	r2, [r0, #0]
 8002fe6:	6853      	ldr	r3, [r2, #4]
 8002fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ff2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ff4:	f013 0f08 	tst.w	r3, #8
 8002ff8:	d006      	beq.n	8003008 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ffa:	6802      	ldr	r2, [r0, #0]
 8002ffc:	6853      	ldr	r3, [r2, #4]
 8002ffe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003002:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003004:	430b      	orrs	r3, r1
 8003006:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003008:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800300a:	f013 0f10 	tst.w	r3, #16
 800300e:	d006      	beq.n	800301e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003010:	6802      	ldr	r2, [r0, #0]
 8003012:	6893      	ldr	r3, [r2, #8]
 8003014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003018:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800301a:	430b      	orrs	r3, r1
 800301c:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800301e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003020:	f013 0f20 	tst.w	r3, #32
 8003024:	d006      	beq.n	8003034 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003026:	6802      	ldr	r2, [r0, #0]
 8003028:	6893      	ldr	r3, [r2, #8]
 800302a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800302e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003030:	430b      	orrs	r3, r1
 8003032:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003034:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003036:	f013 0f40 	tst.w	r3, #64	; 0x40
 800303a:	d00a      	beq.n	8003052 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800303c:	6802      	ldr	r2, [r0, #0]
 800303e:	6853      	ldr	r3, [r2, #4]
 8003040:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003044:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003046:	430b      	orrs	r3, r1
 8003048:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800304a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800304c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003050:	d00b      	beq.n	800306a <UART_AdvFeatureConfig+0xba>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003052:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003054:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003058:	d006      	beq.n	8003068 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800305a:	6802      	ldr	r2, [r0, #0]
 800305c:	6853      	ldr	r3, [r2, #4]
 800305e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003062:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003064:	430b      	orrs	r3, r1
 8003066:	6053      	str	r3, [r2, #4]
 8003068:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800306a:	6802      	ldr	r2, [r0, #0]
 800306c:	6853      	ldr	r3, [r2, #4]
 800306e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003072:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003074:	430b      	orrs	r3, r1
 8003076:	6053      	str	r3, [r2, #4]
 8003078:	e7eb      	b.n	8003052 <UART_AdvFeatureConfig+0xa2>

0800307a <UART_WaitOnFlagUntilTimeout>:
{
 800307a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800307e:	4605      	mov	r5, r0
 8003080:	460f      	mov	r7, r1
 8003082:	4616      	mov	r6, r2
 8003084:	4698      	mov	r8, r3
 8003086:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003088:	682b      	ldr	r3, [r5, #0]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	ea37 0303 	bics.w	r3, r7, r3
 8003090:	bf0c      	ite	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	2300      	movne	r3, #0
 8003096:	42b3      	cmp	r3, r6
 8003098:	d11e      	bne.n	80030d8 <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 800309a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800309e:	d0f3      	beq.n	8003088 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80030a0:	b12c      	cbz	r4, 80030ae <UART_WaitOnFlagUntilTimeout+0x34>
 80030a2:	f7fe fa75 	bl	8001590 <HAL_GetTick>
 80030a6:	eba0 0008 	sub.w	r0, r0, r8
 80030aa:	4284      	cmp	r4, r0
 80030ac:	d2ec      	bcs.n	8003088 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ae:	682a      	ldr	r2, [r5, #0]
 80030b0:	6813      	ldr	r3, [r2, #0]
 80030b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030b6:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b8:	682a      	ldr	r2, [r5, #0]
 80030ba:	6893      	ldr	r3, [r2, #8]
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80030c2:	2320      	movs	r3, #32
 80030c4:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80030c8:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80030cc:	2300      	movs	r3, #0
 80030ce:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 80030d2:	2003      	movs	r0, #3
 80030d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80030d8:	2000      	movs	r0, #0
}
 80030da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080030de <UART_CheckIdleState>:
{
 80030de:	b530      	push	{r4, r5, lr}
 80030e0:	b083      	sub	sp, #12
 80030e2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	6743      	str	r3, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80030e8:	f7fe fa52 	bl	8001590 <HAL_GetTick>
 80030ec:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f013 0f08 	tst.w	r3, #8
 80030f6:	d10e      	bne.n	8003116 <UART_CheckIdleState+0x38>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f013 0f04 	tst.w	r3, #4
 8003100:	d117      	bne.n	8003132 <UART_CheckIdleState+0x54>
  huart->gState= HAL_UART_STATE_READY;
 8003102:	2320      	movs	r3, #32
 8003104:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->RxState= HAL_UART_STATE_READY;
 8003108:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 800310c:	2000      	movs	r0, #0
 800310e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8003112:	b003      	add	sp, #12
 8003114:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003116:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	4603      	mov	r3, r0
 800311e:	2200      	movs	r2, #0
 8003120:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003124:	4620      	mov	r0, r4
 8003126:	f7ff ffa8 	bl	800307a <UART_WaitOnFlagUntilTimeout>
 800312a:	2800      	cmp	r0, #0
 800312c:	d0e4      	beq.n	80030f8 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800312e:	2003      	movs	r0, #3
 8003130:	e7ef      	b.n	8003112 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003132:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	462b      	mov	r3, r5
 800313a:	2200      	movs	r2, #0
 800313c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff ff9a 	bl	800307a <UART_WaitOnFlagUntilTimeout>
 8003146:	2800      	cmp	r0, #0
 8003148:	d0db      	beq.n	8003102 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800314a:	2003      	movs	r0, #3
 800314c:	e7e1      	b.n	8003112 <UART_CheckIdleState+0x34>

0800314e <HAL_UART_Init>:
  if(huart == NULL)
 800314e:	b378      	cbz	r0, 80031b0 <HAL_UART_Init+0x62>
{
 8003150:	b510      	push	{r4, lr}
 8003152:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8003154:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003158:	b30b      	cbz	r3, 800319e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800315a:	2324      	movs	r3, #36	; 0x24
 800315c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	6813      	ldr	r3, [r2, #0]
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800316a:	4620      	mov	r0, r4
 800316c:	f7ff fd38 	bl	8002be0 <UART_SetConfig>
 8003170:	2801      	cmp	r0, #1
 8003172:	d01f      	beq.n	80031b4 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003176:	b9bb      	cbnz	r3, 80031a8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003178:	6822      	ldr	r2, [r4, #0]
 800317a:	6853      	ldr	r3, [r2, #4]
 800317c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003180:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003182:	6822      	ldr	r2, [r4, #0]
 8003184:	6893      	ldr	r3, [r2, #8]
 8003186:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800318a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800318c:	6822      	ldr	r2, [r4, #0]
 800318e:	6813      	ldr	r3, [r2, #0]
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003196:	4620      	mov	r0, r4
 8003198:	f7ff ffa1 	bl	80030de <UART_CheckIdleState>
 800319c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800319e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80031a2:	f7fe f855 	bl	8001250 <HAL_UART_MspInit>
 80031a6:	e7d8      	b.n	800315a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80031a8:	4620      	mov	r0, r4
 80031aa:	f7ff ff01 	bl	8002fb0 <UART_AdvFeatureConfig>
 80031ae:	e7e3      	b.n	8003178 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80031b0:	2001      	movs	r0, #1
 80031b2:	4770      	bx	lr
}
 80031b4:	bd10      	pop	{r4, pc}

080031b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80031b6:	4770      	bx	lr

080031b8 <__libc_init_array>:
 80031b8:	b570      	push	{r4, r5, r6, lr}
 80031ba:	4e0d      	ldr	r6, [pc, #52]	; (80031f0 <__libc_init_array+0x38>)
 80031bc:	4c0d      	ldr	r4, [pc, #52]	; (80031f4 <__libc_init_array+0x3c>)
 80031be:	1ba4      	subs	r4, r4, r6
 80031c0:	10a4      	asrs	r4, r4, #2
 80031c2:	2500      	movs	r5, #0
 80031c4:	42a5      	cmp	r5, r4
 80031c6:	d109      	bne.n	80031dc <__libc_init_array+0x24>
 80031c8:	4e0b      	ldr	r6, [pc, #44]	; (80031f8 <__libc_init_array+0x40>)
 80031ca:	4c0c      	ldr	r4, [pc, #48]	; (80031fc <__libc_init_array+0x44>)
 80031cc:	f000 f820 	bl	8003210 <_init>
 80031d0:	1ba4      	subs	r4, r4, r6
 80031d2:	10a4      	asrs	r4, r4, #2
 80031d4:	2500      	movs	r5, #0
 80031d6:	42a5      	cmp	r5, r4
 80031d8:	d105      	bne.n	80031e6 <__libc_init_array+0x2e>
 80031da:	bd70      	pop	{r4, r5, r6, pc}
 80031dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031e0:	4798      	blx	r3
 80031e2:	3501      	adds	r5, #1
 80031e4:	e7ee      	b.n	80031c4 <__libc_init_array+0xc>
 80031e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ea:	4798      	blx	r3
 80031ec:	3501      	adds	r5, #1
 80031ee:	e7f2      	b.n	80031d6 <__libc_init_array+0x1e>
 80031f0:	08003404 	.word	0x08003404
 80031f4:	08003404 	.word	0x08003404
 80031f8:	08003404 	.word	0x08003404
 80031fc:	08003408 	.word	0x08003408

08003200 <memset>:
 8003200:	4402      	add	r2, r0
 8003202:	4603      	mov	r3, r0
 8003204:	4293      	cmp	r3, r2
 8003206:	d100      	bne.n	800320a <memset+0xa>
 8003208:	4770      	bx	lr
 800320a:	f803 1b01 	strb.w	r1, [r3], #1
 800320e:	e7f9      	b.n	8003204 <memset+0x4>

08003210 <_init>:
 8003210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003212:	bf00      	nop
 8003214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003216:	bc08      	pop	{r3}
 8003218:	469e      	mov	lr, r3
 800321a:	4770      	bx	lr

0800321c <_fini>:
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	bf00      	nop
 8003220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003222:	bc08      	pop	{r3}
 8003224:	469e      	mov	lr, r3
 8003226:	4770      	bx	lr
