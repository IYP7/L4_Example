
L4_Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007338  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a48  080074d8  080074d8  000174d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007f28  08007f28  00017f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08007f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          00000e44  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20001020  20001020  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   000461a1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008ff2  00000000  00000000  000663ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001cc8  00000000  00000000  0006f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019c8  00000000  00000000  00071068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001572f  00000000  00000000  00072a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009ae4  00000000  00000000  0008815f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00091c43  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004934  00000000  00000000  00091cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00010213  00000000  00000000  000965f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074c0 	.word	0x080074c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080074c0 	.word	0x080074c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
 *
 * @details Initializes applications.
 * @details Call system application to execute active applications.
 ****************************************************************************/
int  main()
{
 80005a0:	b508      	push	{r3, lr}
	/* Call to initial specific platform configuration */
    systemPreConfiguration();
 80005a2:	f003 f90a 	bl	80037ba <systemPreConfiguration>

	/* Applications Initialization */
    SchedulerInit();
 80005a6:	f000 fbe5 	bl	8000d74 <SchedulerInit>

    while (TRUE)
    {
        SchedulerNextSystemProcess();
 80005aa:	f000 fc91 	bl	8000ed0 <SchedulerNextSystemProcess>
 80005ae:	e7fc      	b.n	80005aa <main+0xa>

080005b0 <initSystemApp>:
 *
 * @details Initializes HREG and SREG layers.
 * @details Initializes all applications
 ****************************************************************************/
void initSystemApp( void )
{
 80005b0:	b508      	push	{r3, lr}
    requestPowerState = POWER_STATE_NO_REQUEST;
 80005b2:	2200      	movs	r2, #0
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <initSystemApp+0x10>)
 80005b6:	701a      	strb	r2, [r3, #0]

    initSregAll();    /* Initialise the SREG layer */
 80005b8:	f000 fae4 	bl	8000b84 <initSregAll>
 80005bc:	bd08      	pop	{r3, pc}
 80005be:	bf00      	nop
 80005c0:	200004ac 	.word	0x200004ac

080005c4 <callSystemApp>:
 *
 * @details depending on current state, executes active applications.
 * @details calls system middleware task
 ****************************************************************************/
void callSystemApp( void )
{
 80005c4:	b508      	push	{r3, lr}
    uint8_t systemState;

    /* HAL TEST */
    // GPIO
    GPIOWritePort(GPIO_LED_1, GPIO_TOGGLE);
 80005c6:	2102      	movs	r1, #2
 80005c8:	2000      	movs	r0, #0
 80005ca:	f002 fd4d 	bl	8003068 <GPIOWritePort>
    // VirtualEEPROM

    /* END HAL TEST */

    /* System state machine */
    systemState = READ_SREG(SREG_SYSTEM_STATE);
 80005ce:	2004      	movs	r0, #4
 80005d0:	f000 fb59 	bl	8000c86 <readSreg>
 80005d4:	b2c1      	uxtb	r1, r0
    //systemState = SYSTEM_APP_INIT_SHELL;
    switch ( systemState )
 80005d6:	2904      	cmp	r1, #4
 80005d8:	d830      	bhi.n	800063c <callSystemApp+0x78>
 80005da:	e8df f001 	tbb	[pc, r1]
 80005de:	032e      	.short	0x032e
 80005e0:	2f10      	.short	0x2f10
 80005e2:	07          	.byte	0x07
 80005e3:	00          	.byte	0x00
			systemState = SYSTEM_APP_INIT;
			break;
        
		case SYSTEM_APP_INIT:
			/* Application init dispather */
			AtCommandStart();
 80005e4:	f001 fd34 	bl	8002050 <AtCommandStart>
			systemState = SYSTEM_APP_ON;
 80005e8:	2102      	movs	r1, #2
            break;
 80005ea:	e027      	b.n	800063c <callSystemApp+0x78>

        case SYSTEM_APP_SLEPT:
			/* Application sleep dispather */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_WAKE_UP ) 
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <callSystemApp+0x80>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d123      	bne.n	800063c <callSystemApp+0x78>
            {
				/* Wake up */
                systemState = SYSTEM_APP_ON;
                requestPowerState = POWER_STATE_NO_REQUEST;
 80005f4:	2100      	movs	r1, #0
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <callSystemApp+0x80>)
 80005f8:	7011      	strb	r1, [r2, #0]
                systemState = SYSTEM_APP_ON;
 80005fa:	4619      	mov	r1, r3
 80005fc:	e01e      	b.n	800063c <callSystemApp+0x78>
            break;

        case SYSTEM_APP_ON:
			/* Application dispatcher */
			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_START_SHUTDOWN )
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <callSystemApp+0x80>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d007      	beq.n	8000616 <callSystemApp+0x52>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
                
                /* Power off */
                systemState = SYSTEM_APP_POWER_OFF;
            }
            else if ( requestPowerState == POWER_STATE_GO_TO_SLEEP )
 8000606:	2b03      	cmp	r3, #3
 8000608:	d00b      	beq.n	8000622 <callSystemApp+0x5e>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
                
                /* Slept */
                systemState = SYSTEM_APP_SLEPT;
            }
            else if ( requestPowerState == POWER_STATE_REBOOT )
 800060a:	2b04      	cmp	r3, #4
 800060c:	d00f      	beq.n	800062e <callSystemApp+0x6a>
                systemState = SYSTEM_APP_REBOOT;
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
            }
            
            /* Reset power state request */
            requestPowerState = POWER_STATE_NO_REQUEST;
 800060e:	2200      	movs	r2, #0
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <callSystemApp+0x80>)
 8000612:	701a      	strb	r2, [r3, #0]
            break;
 8000614:	e012      	b.n	800063c <callSystemApp+0x78>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
 8000616:	210a      	movs	r1, #10
 8000618:	2005      	movs	r0, #5
 800061a:	f000 fb6b 	bl	8000cf4 <writeSreg>
                systemState = SYSTEM_APP_POWER_OFF;
 800061e:	2103      	movs	r1, #3
 8000620:	e7f5      	b.n	800060e <callSystemApp+0x4a>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
 8000622:	2101      	movs	r1, #1
 8000624:	2005      	movs	r0, #5
 8000626:	f000 fb65 	bl	8000cf4 <writeSreg>
                systemState = SYSTEM_APP_SLEPT;
 800062a:	2104      	movs	r1, #4
 800062c:	e7ef      	b.n	800060e <callSystemApp+0x4a>
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
 800062e:	2103      	movs	r1, #3
 8000630:	2005      	movs	r0, #5
 8000632:	f000 fb5f 	bl	8000cf4 <writeSreg>
                systemState = SYSTEM_APP_REBOOT;
 8000636:	2105      	movs	r1, #5
 8000638:	e7e9      	b.n	800060e <callSystemApp+0x4a>
			systemState = SYSTEM_APP_INIT;
 800063a:	2101      	movs	r1, #1
			break;
        
    }
    
    /* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
 800063c:	2004      	movs	r0, #4
 800063e:	f000 fb59 	bl	8000cf4 <writeSreg>
 8000642:	bd08      	pop	{r3, pc}
 8000644:	200004ac 	.word	0x200004ac

08000648 <requestSystemAppPowerState>:
 * 
 * @return  None  
 ****************************************************************************/
void requestSystemAppPowerState( uint8_t powerState )
{
    requestPowerState = powerState;
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <requestSystemAppPowerState+0x8>)
 800064a:	7018      	strb	r0, [r3, #0]
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200004ac 	.word	0x200004ac

08000654 <ATLTECallback>:
	/* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
}

void ATLTECallback(tAtResponseID eventID, uint8_t *buffer, uint16_t length)
{
 8000654:	4770      	bx	lr

08000656 <ATGPSCallback>:
//	uartDriverSetBufferSize((tUart)UART_2, length);
//	uartDriverWrite((tUart)UART_2, (uint8_t*)buffer);
}

void ATGPSCallback(tAtResponseID eventID, uint8_t *buffer, uint16_t length)
{
 8000656:	4770      	bx	lr

08000658 <initHregAll>:
 *
 * @return  None.
 *
 ****************************************************************************/
void initHregAll( void )
{
 8000658:	b538      	push	{r3, r4, r5, lr}
	uint16_t i = 0;
 800065a:	2400      	movs	r4, #0

    /* Init function call */
    while ( i < HREG_GROUP_INDEX_MAX )
 800065c:	e004      	b.n	8000668 <initHregAll+0x10>
    {
    	if ( apiFuncHregGroup[i].Init != HREG_NULL )
    	{
    		apiFuncHregGroup[i].Init();
    	}
        hregGroupsState[i].hregGroupEnabled = HREG_GROUP_INIT;
 800065e:	2200      	movs	r2, #0
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <initHregAll+0x2c>)
 8000662:	555a      	strb	r2, [r3, r5]
        i++;
 8000664:	3401      	adds	r4, #1
 8000666:	b2a4      	uxth	r4, r4
    while ( i < HREG_GROUP_INDEX_MAX )
 8000668:	2c07      	cmp	r4, #7
 800066a:	d809      	bhi.n	8000680 <initHregAll+0x28>
    	if ( apiFuncHregGroup[i].Init != HREG_NULL )
 800066c:	4625      	mov	r5, r4
 800066e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000672:	0093      	lsls	r3, r2, #2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <initHregAll+0x30>)
 8000676:	58d3      	ldr	r3, [r2, r3]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f0      	beq.n	800065e <initHregAll+0x6>
    		apiFuncHregGroup[i].Init();
 800067c:	4798      	blx	r3
 800067e:	e7ee      	b.n	800065e <initHregAll+0x6>
    }
}
 8000680:	bd38      	pop	{r3, r4, r5, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000
 8000688:	08007528 	.word	0x08007528

0800068c <stopHregGroupAll>:
 *
 * @return  None.
 *
 ****************************************************************************/
void stopHregGroupAll( void )
{
 800068c:	b538      	push	{r3, r4, r5, lr}
    int16_t i = 0;

    /* Stop function call from bottom to top */
    for ( i = HREG_GROUP_INDEX_MAX - 1; i >= 0; i--)
 800068e:	2407      	movs	r4, #7
 8000690:	e004      	b.n	800069c <stopHregGroupAll+0x10>
    {
    	if ( apiFuncHregGroup[i].Stop != HREG_NULL )
    	{
    		apiFuncHregGroup[i].Stop();
    	}
        hregGroupsState[i].hregGroupEnabled = HREG_GROUP_STOPPED;
 8000692:	2201      	movs	r2, #1
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <stopHregGroupAll+0x2c>)
 8000696:	555a      	strb	r2, [r3, r5]
    for ( i = HREG_GROUP_INDEX_MAX - 1; i >= 0; i--)
 8000698:	3c01      	subs	r4, #1
 800069a:	b224      	sxth	r4, r4
 800069c:	2c00      	cmp	r4, #0
 800069e:	db0a      	blt.n	80006b6 <stopHregGroupAll+0x2a>
    	if ( apiFuncHregGroup[i].Stop != HREG_NULL )
 80006a0:	4625      	mov	r5, r4
 80006a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80006a6:	009a      	lsls	r2, r3, #2
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <stopHregGroupAll+0x30>)
 80006aa:	4413      	add	r3, r2
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0ef      	beq.n	8000692 <stopHregGroupAll+0x6>
    		apiFuncHregGroup[i].Stop();
 80006b2:	4798      	blx	r3
 80006b4:	e7ed      	b.n	8000692 <stopHregGroupAll+0x6>
    }
}
 80006b6:	bd38      	pop	{r3, r4, r5, pc}
 80006b8:	20000000 	.word	0x20000000
 80006bc:	08007528 	.word	0x08007528

080006c0 <startHregGroupAll>:
 *
 * @return  None.
 *
 ****************************************************************************/
void startHregGroupAll( void )
{
 80006c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006c4:	b082      	sub	sp, #8
#ifdef EEPROM_HREG_SUPPORT
    uint8_t  updateNVM = FALSE;
#endif //EEPROM_HREG_SUPPORT

    /* Initialize HREG value */
	numOfHregs = 0;
 80006c6:	2700      	movs	r7, #0
 80006c8:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <startHregGroupAll+0x100>)
 80006ca:	701f      	strb	r7, [r3, #0]
    uint8_t  updateNVM = FALSE;
 80006cc:	46b8      	mov	r8, r7

	for ( groupType = 0; groupType < NUM_OF_HREG_GROUP_TYPES; groupType++)
 80006ce:	e063      	b.n	8000798 <startHregGroupAll+0xd8>
#ifdef EEPROM_HREG_SUPPORT

		if ( groupType == HREG_GROUP_TYPE_DEVICE_DRIVER )
		{
			/* Check if NVM version has changed */
			VirtualEEPROMReadRegister(EEPROM_HREG, EEPROM_HREG_MAP, UNIQUE_INSTANCE, &value);
 80006d0:	ab01      	add	r3, sp, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	2102      	movs	r1, #2
 80006d6:	4610      	mov	r0, r2
 80006d8:	f002 f858 	bl	800278c <VirtualEEPROMReadRegister>
			if ( value != NVM_HREG_MAP_VERSION )
 80006dc:	9b01      	ldr	r3, [sp, #4]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d05e      	beq.n	80007a0 <startHregGroupAll+0xe0>
			{
				updateNVM = TRUE;
 80006e2:	f04f 0801 	mov.w	r8, #1
 80006e6:	e05b      	b.n	80007a0 <startHregGroupAll+0xe0>
						if ( groupType == HREG_GROUP_TYPE_DEVICE_DRIVER )
						{
							/* Set register value to init value if it is not linked with EEPROM
							 * or the EEPROM has no correct map.
							 */
							if( hregPtr->NVMId == NVM_NOP || updateNVM == TRUE)
 80006e8:	7ce9      	ldrb	r1, [r5, #19]
 80006ea:	b141      	cbz	r1, 80006fe <startHregGroupAll+0x3e>
 80006ec:	f1b8 0f00 	cmp.w	r8, #0
 80006f0:	d105      	bne.n	80006fe <startHregGroupAll+0x3e>
							{
								value = hregPtr->Init;
							}
							else
							{
								VirtualEEPROMReadRegister(EEPROM_HREG, hregPtr->NVMId, instance, &value);
 80006f2:	ab01      	add	r3, sp, #4
 80006f4:	4622      	mov	r2, r4
 80006f6:	2000      	movs	r0, #0
 80006f8:	f002 f848 	bl	800278c <VirtualEEPROMReadRegister>
 80006fc:	e001      	b.n	8000702 <startHregGroupAll+0x42>
								value = hregPtr->Init;
 80006fe:	68eb      	ldr	r3, [r5, #12]
 8000700:	9301      	str	r3, [sp, #4]
							}

							/* Store value in EEPROM if map is not correct */
							if( updateNVM == TRUE && hregPtr->NVMId != NVM_NOP )
 8000702:	f1b8 0f00 	cmp.w	r8, #0
 8000706:	d001      	beq.n	800070c <startHregGroupAll+0x4c>
 8000708:	7ce9      	ldrb	r1, [r5, #19]
 800070a:	b991      	cbnz	r1, 8000732 <startHregGroupAll+0x72>
						}
#else //EEPROM_HREG_SUPPORT
						value = hregPtr->Init;
#endif //EEPROM_HREG_SUPPORT
						//writeHreg(instance, hregPtr, value);
						hregFunc.Write( instance, hregPtr, value );
 800070c:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <startHregGroupAll+0x104>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	9a01      	ldr	r2, [sp, #4]
 8000712:	4629      	mov	r1, r5
 8000714:	4620      	mov	r0, r4
 8000716:	4798      	blx	r3
					for(instance = 0; instance < hregTableList[i].NumInstances; instance++)
 8000718:	3401      	adds	r4, #1
 800071a:	b2e4      	uxtb	r4, r4
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <startHregGroupAll+0x108>)
 800071e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8000722:	795b      	ldrb	r3, [r3, #5]
 8000724:	429c      	cmp	r4, r3
 8000726:	d20a      	bcs.n	800073e <startHregGroupAll+0x7e>
						if ( groupType == HREG_GROUP_TYPE_DEVICE_DRIVER )
 8000728:	2f02      	cmp	r7, #2
 800072a:	d0dd      	beq.n	80006e8 <startHregGroupAll+0x28>
							value = hregPtr->Init;
 800072c:	68eb      	ldr	r3, [r5, #12]
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	e7ec      	b.n	800070c <startHregGroupAll+0x4c>
								VirtualEEPROMWriteRegister(EEPROM_HREG, hregPtr->NVMId, instance, value);
 8000732:	9b01      	ldr	r3, [sp, #4]
 8000734:	4622      	mov	r2, r4
 8000736:	2000      	movs	r0, #0
 8000738:	f002 f9fa 	bl	8002b30 <VirtualEEPROMWriteRegister>
 800073c:	e7e6      	b.n	800070c <startHregGroupAll+0x4c>
				for ( hregPtr = hregTableList[i].TableHreg; hregPtr < hregTableList[i].TableHreg + hregTableList[i].TableSize; hregPtr++ )
 800073e:	3514      	adds	r5, #20
 8000740:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <startHregGroupAll+0x108>)
 8000742:	f853 2036 	ldr.w	r2, [r3, r6, lsl #3]
 8000746:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000750:	0099      	lsls	r1, r3, #2
 8000752:	1853      	adds	r3, r2, r1
 8000754:	429d      	cmp	r5, r3
 8000756:	d205      	bcs.n	8000764 <startHregGroupAll+0xa4>
					numOfHregs++;
 8000758:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <startHregGroupAll+0x100>)
 800075a:	7813      	ldrb	r3, [r2, #0]
 800075c:	3301      	adds	r3, #1
 800075e:	7013      	strb	r3, [r2, #0]
					for(instance = 0; instance < hregTableList[i].NumInstances; instance++)
 8000760:	2400      	movs	r4, #0
 8000762:	e7db      	b.n	800071c <startHregGroupAll+0x5c>
					}
				}
				if ( apiFuncHregGroup[i].Start != HREG_NULL )
 8000764:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000768:	009a      	lsls	r2, r3, #2
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <startHregGroupAll+0x10c>)
 800076c:	4413      	add	r3, r2
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	b103      	cbz	r3, 8000774 <startHregGroupAll+0xb4>
				{
					apiFuncHregGroup[i].Start();
 8000772:	4798      	blx	r3
				}
				hregGroupsState[i].hregGroupEnabled = HREG_GROUP_STARTED;
 8000774:	2202      	movs	r2, #2
 8000776:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <startHregGroupAll+0x110>)
 8000778:	559a      	strb	r2, [r3, r6]
			}
			i++;
 800077a:	3601      	adds	r6, #1
		while (  i < HREG_GROUP_INDEX_MAX )
 800077c:	2e07      	cmp	r6, #7
 800077e:	d809      	bhi.n	8000794 <startHregGroupAll+0xd4>
			if ( hregTableList[i].GroupType == groupType )
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <startHregGroupAll+0x108>)
 8000782:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8000786:	799b      	ldrb	r3, [r3, #6]
 8000788:	429f      	cmp	r7, r3
 800078a:	d1f6      	bne.n	800077a <startHregGroupAll+0xba>
				for ( hregPtr = hregTableList[i].TableHreg; hregPtr < hregTableList[i].TableHreg + hregTableList[i].TableSize; hregPtr++ )
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <startHregGroupAll+0x108>)
 800078e:	f853 5036 	ldr.w	r5, [r3, r6, lsl #3]
 8000792:	e7d5      	b.n	8000740 <startHregGroupAll+0x80>
	for ( groupType = 0; groupType < NUM_OF_HREG_GROUP_TYPES; groupType++)
 8000794:	3701      	adds	r7, #1
 8000796:	b2ff      	uxtb	r7, r7
 8000798:	2f02      	cmp	r7, #2
 800079a:	d803      	bhi.n	80007a4 <startHregGroupAll+0xe4>
		if ( groupType == HREG_GROUP_TYPE_DEVICE_DRIVER )
 800079c:	2f02      	cmp	r7, #2
 800079e:	d097      	beq.n	80006d0 <startHregGroupAll+0x10>
		i = 0;
 80007a0:	2600      	movs	r6, #0
		while (  i < HREG_GROUP_INDEX_MAX )
 80007a2:	e7eb      	b.n	800077c <startHregGroupAll+0xbc>
		}
	}

#ifdef EEPROM_HREG_SUPPORT
    /* Update Test byte on NVM */
    if ( updateNVM == TRUE )
 80007a4:	f1b8 0f00 	cmp.w	r8, #0
 80007a8:	d102      	bne.n	80007b0 <startHregGroupAll+0xf0>
    {
    	VirtualEEPROMWriteRegister(EEPROM_HREG, EEPROM_HREG_MAP, UNIQUE_INSTANCE, NVM_HREG_MAP_VERSION);
    }
#endif //EEPROM_HREG_SUPPORT
}
 80007aa:	b002      	add	sp, #8
 80007ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	VirtualEEPROMWriteRegister(EEPROM_HREG, EEPROM_HREG_MAP, UNIQUE_INSTANCE, NVM_HREG_MAP_VERSION);
 80007b0:	2301      	movs	r3, #1
 80007b2:	2200      	movs	r2, #0
 80007b4:	2102      	movs	r1, #2
 80007b6:	4610      	mov	r0, r2
 80007b8:	f002 f9ba 	bl	8002b30 <VirtualEEPROMWriteRegister>
}
 80007bc:	e7f5      	b.n	80007aa <startHregGroupAll+0xea>
 80007be:	bf00      	nop
 80007c0:	200001f8 	.word	0x200001f8
 80007c4:	080075c8 	.word	0x080075c8
 80007c8:	080075d0 	.word	0x080075d0
 80007cc:	08007528 	.word	0x08007528
 80007d0:	20000000 	.word	0x20000000

080007d4 <sleepHregGroupAll>:
 *
 * @return  None.
 *
 ****************************************************************************/
void sleepHregGroupAll( void )
{
 80007d4:	b510      	push	{r4, lr}
    int16_t i = 0;

    /* Stop function call from bottom to top */
    for ( i = HREG_GROUP_INDEX_MAX - 1; i >= 0; i--)
 80007d6:	2407      	movs	r4, #7
 80007d8:	e00b      	b.n	80007f2 <sleepHregGroupAll+0x1e>
    {
        apiFuncHregGroup[i].Sleep();
 80007da:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80007de:	009a      	lsls	r2, r3, #2
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <sleepHregGroupAll+0x24>)
 80007e2:	4413      	add	r3, r2
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	4798      	blx	r3
        hregGroupsState[i].hregGroupEnabled = HREG_GROUP_SLEPT;
 80007e8:	2203      	movs	r2, #3
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <sleepHregGroupAll+0x28>)
 80007ec:	551a      	strb	r2, [r3, r4]
    for ( i = HREG_GROUP_INDEX_MAX - 1; i >= 0; i--)
 80007ee:	3c01      	subs	r4, #1
 80007f0:	b224      	sxth	r4, r4
 80007f2:	2c00      	cmp	r4, #0
 80007f4:	daf1      	bge.n	80007da <sleepHregGroupAll+0x6>
    }
}
 80007f6:	bd10      	pop	{r4, pc}
 80007f8:	08007528 	.word	0x08007528
 80007fc:	20000000 	.word	0x20000000

08000800 <wakeHregGroupAll>:
 *
 * @return  None.
 *
 ****************************************************************************/
void wakeHregGroupAll( void )
{
 8000800:	b510      	push	{r4, lr}
    uint16_t i = 0;
 8000802:	2400      	movs	r4, #0

    /* Stop function call */
    while ( apiFuncHregGroup[i].Wake != HREG_NULL )
 8000804:	e005      	b.n	8000812 <wakeHregGroupAll+0x12>
    {
        apiFuncHregGroup[i].Wake();
 8000806:	4798      	blx	r3
        hregGroupsState[i].hregGroupEnabled = HREG_GROUP_STARTED;
 8000808:	2202      	movs	r2, #2
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <wakeHregGroupAll+0x24>)
 800080c:	551a      	strb	r2, [r3, r4]
        i++;
 800080e:	3401      	adds	r4, #1
 8000810:	b2a4      	uxth	r4, r4
    while ( apiFuncHregGroup[i].Wake != HREG_NULL )
 8000812:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000816:	009a      	lsls	r2, r3, #2
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <wakeHregGroupAll+0x28>)
 800081a:	4413      	add	r3, r2
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d1f1      	bne.n	8000806 <wakeHregGroupAll+0x6>
    }
}
 8000822:	bd10      	pop	{r4, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	08007528 	.word	0x08007528

0800082c <writeHreg>:
 *
 * @return  success or not.
 *
 ****************************************************************************/
eError writeHreg( uint8_t instance, const HREG *hregP , uint32_t value )
{
 800082c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082e:	4607      	mov	r7, r0
 8000830:	460c      	mov	r4, r1
    eError  result = RET_OK;
#ifdef MON_SHELL_COMMAND_VERBOSE_REGS
	uint16_t index = 0;
#endif // MON_SHELL_COMMAND_VERBOSE_REGS

    if ( value > hregP->Max )
 8000832:	684e      	ldr	r6, [r1, #4]
 8000834:	4296      	cmp	r6, r2
 8000836:	d310      	bcc.n	800085a <writeHreg+0x2e>
 8000838:	4615      	mov	r5, r2
    {
        value = hregP->Max;
        printShellString((int8_t *)"HREG value adjusted to maximum\n", VERBOSE_WARNING);
    }
    else if ( value < hregP->Min )
 800083a:	688e      	ldr	r6, [r1, #8]
 800083c:	42b2      	cmp	r2, r6
 800083e:	d312      	bcc.n	8000866 <writeHreg+0x3a>
        value = hregP->Min;
        printShellString((int8_t *)"HREG value adjusted to minimum\n", VERBOSE_WARNING);
    }

    /* Check for OnWrite function */
    if ( ( hregP->OnWrite != HREG_NOP ) &&
 8000840:	7c63      	ldrb	r3, [r4, #17]
 8000842:	2bff      	cmp	r3, #255	; 0xff
 8000844:	d023      	beq.n	800088e <writeHreg+0x62>
         ( hregGroupsState[hregP->GroupId].hregGroupEnabled == HREG_GROUP_STARTED ) &&
 8000846:	7ca3      	ldrb	r3, [r4, #18]
 8000848:	4a1a      	ldr	r2, [pc, #104]	; (80008b4 <writeHreg+0x88>)
 800084a:	5cd3      	ldrb	r3, [r2, r3]
    if ( ( hregP->OnWrite != HREG_NOP ) &&
 800084c:	2b02      	cmp	r3, #2
 800084e:	d010      	beq.n	8000872 <writeHreg+0x46>
    eError  result = RET_OK;
 8000850:	2000      	movs	r0, #0
         ( shellGetDebugState() == FALSE) )
    {
        result = onWriteHregFunc[hregP->OnWrite].Write(instance, hregP, value);
    }

    if ( result == RET_OK )
 8000852:	b1f0      	cbz	r0, 8000892 <writeHreg+0x66>
#endif // MON_SHELL_COMMAND_VERBOSE_REGS

    }
    else
    {
    	result = RET_FAIL;
 8000854:	2601      	movs	r6, #1
    }

    return result;
}
 8000856:	4630      	mov	r0, r6
 8000858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        printShellString((int8_t *)"HREG value adjusted to maximum\n", VERBOSE_WARNING);
 800085a:	2103      	movs	r1, #3
 800085c:	4816      	ldr	r0, [pc, #88]	; (80008b8 <writeHreg+0x8c>)
 800085e:	f000 fc83 	bl	8001168 <printShellString>
        value = hregP->Max;
 8000862:	4635      	mov	r5, r6
 8000864:	e7ec      	b.n	8000840 <writeHreg+0x14>
        printShellString((int8_t *)"HREG value adjusted to minimum\n", VERBOSE_WARNING);
 8000866:	2103      	movs	r1, #3
 8000868:	4814      	ldr	r0, [pc, #80]	; (80008bc <writeHreg+0x90>)
 800086a:	f000 fc7d 	bl	8001168 <printShellString>
        value = hregP->Min;
 800086e:	4635      	mov	r5, r6
 8000870:	e7e6      	b.n	8000840 <writeHreg+0x14>
         ( shellGetDebugState() == FALSE) )
 8000872:	f000 fda9 	bl	80013c8 <shellGetDebugState>
         ( hregGroupsState[hregP->GroupId].hregGroupEnabled == HREG_GROUP_STARTED ) &&
 8000876:	b108      	cbz	r0, 800087c <writeHreg+0x50>
    eError  result = RET_OK;
 8000878:	2000      	movs	r0, #0
 800087a:	e7ea      	b.n	8000852 <writeHreg+0x26>
        result = onWriteHregFunc[hregP->OnWrite].Write(instance, hregP, value);
 800087c:	7c62      	ldrb	r2, [r4, #17]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <writeHreg+0x94>)
 8000880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000884:	462a      	mov	r2, r5
 8000886:	4621      	mov	r1, r4
 8000888:	4638      	mov	r0, r7
 800088a:	4798      	blx	r3
 800088c:	e7e1      	b.n	8000852 <writeHreg+0x26>
    eError  result = RET_OK;
 800088e:	2000      	movs	r0, #0
 8000890:	e7df      	b.n	8000852 <writeHreg+0x26>
        result = hregFunc.Write( instance, hregP, value );
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <writeHreg+0x98>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	462a      	mov	r2, r5
 8000898:	4621      	mov	r1, r4
 800089a:	4638      	mov	r0, r7
 800089c:	4798      	blx	r3
    	if ( result == RET_OK && hregP->NVMId != NVM_NOP )
 800089e:	4606      	mov	r6, r0
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d1d8      	bne.n	8000856 <writeHreg+0x2a>
 80008a4:	7ce1      	ldrb	r1, [r4, #19]
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d0d5      	beq.n	8000856 <writeHreg+0x2a>
            VirtualEEPROMWriteRegister(EEPROM_HREG, hregP->NVMId, instance, value);
 80008aa:	462b      	mov	r3, r5
 80008ac:	463a      	mov	r2, r7
 80008ae:	f002 f93f 	bl	8002b30 <VirtualEEPROMWriteRegister>
 80008b2:	e7d0      	b.n	8000856 <writeHreg+0x2a>
 80008b4:	20000000 	.word	0x20000000
 80008b8:	080074e8 	.word	0x080074e8
 80008bc:	08007508 	.word	0x08007508
 80008c0:	08007650 	.word	0x08007650
 80008c4:	080075c8 	.word	0x080075c8

080008c8 <writeShellHreg>:
 *
 * @return  success or not.
 *
 ****************************************************************************/
eError writeShellHreg( uint8_t instance, uint16_t hregIndex , uint32_t hregValue)
{
 80008c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008cc:	4680      	mov	r8, r0
 80008ce:	460d      	mov	r5, r1
 80008d0:	4617      	mov	r7, r2
    uint8_t tablePointer = 0;
    uint16_t tableCount = 0;
    uint16_t previousTableCount = 0;
    uint8_t registerFound = FALSE;
    uint8_t result = RET_FAIL;
 80008d2:	f04f 0e01 	mov.w	lr, #1
    uint8_t registerFound = FALSE;
 80008d6:	2000      	movs	r0, #0
    uint16_t previousTableCount = 0;
 80008d8:	4606      	mov	r6, r0
    uint16_t tableCount = 0;
 80008da:	4681      	mov	r9, r0
    uint8_t tablePointer = 0;
 80008dc:	4604      	mov	r4, r0

    /* Table count */
    while ((hregTableList[tablePointer].TableHreg != HREG_NULL) && (registerFound == FALSE))
 80008de:	e00a      	b.n	80008f6 <writeShellHreg+0x2e>
    {
        tableCount += hregTableList[tablePointer].TableSize;
        if( hregIndex <= (tableCount - 1))
        {
            /* Group found */
            result = writeHreg(instance, &(hregTableList[tablePointer].TableHreg)[hregIndex-previousTableCount], hregValue);
 80008e0:	1bab      	subs	r3, r5, r6
 80008e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80008e6:	0098      	lsls	r0, r3, #2
 80008e8:	463a      	mov	r2, r7
 80008ea:	4401      	add	r1, r0
 80008ec:	4640      	mov	r0, r8
 80008ee:	f7ff ff9d 	bl	800082c <writeHreg>
 80008f2:	4686      	mov	lr, r0
            registerFound = TRUE;
 80008f4:	2001      	movs	r0, #1
    while ((hregTableList[tablePointer].TableHreg != HREG_NULL) && (registerFound == FALSE))
 80008f6:	46a4      	mov	ip, r4
 80008f8:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <writeShellHreg+0x60>)
 80008fa:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
 80008fe:	b179      	cbz	r1, 8000920 <writeShellHreg+0x58>
 8000900:	b970      	cbnz	r0, 8000920 <writeShellHreg+0x58>
        tableCount += hregTableList[tablePointer].TableSize;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <writeShellHreg+0x60>)
 8000904:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	444b      	add	r3, r9
 800090c:	fa1f f983 	uxth.w	r9, r3
        if( hregIndex <= (tableCount - 1))
 8000910:	f109 33ff 	add.w	r3, r9, #4294967295
 8000914:	429d      	cmp	r5, r3
 8000916:	dde3      	ble.n	80008e0 <writeShellHreg+0x18>
        }
        else
        {
            /* Try next group */
            previousTableCount = tableCount;
            tablePointer++;
 8000918:	3401      	adds	r4, #1
 800091a:	b2e4      	uxtb	r4, r4
            previousTableCount = tableCount;
 800091c:	464e      	mov	r6, r9
 800091e:	e7ea      	b.n	80008f6 <writeShellHreg+0x2e>
        }
    }
    return result;
}
 8000920:	4670      	mov	r0, lr
 8000922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000926:	bf00      	nop
 8000928:	080075d0 	.word	0x080075d0

0800092c <readHreg>:
 *
 * @return  value of HREG.
 *
 ****************************************************************************/
eError readHreg( uint8_t instance, const HREG *hregP, void *value )
{
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	4606      	mov	r6, r0
 8000930:	460c      	mov	r4, r1
 8000932:	4615      	mov	r5, r2
    eError result = RET_OK;
    uint8_t size = 0;

    /* Check OnRead function availability*/
    if ( ( hregP->OnRead != HREG_NOP ) &&
 8000934:	7c0b      	ldrb	r3, [r1, #16]
 8000936:	2bff      	cmp	r3, #255	; 0xff
 8000938:	d004      	beq.n	8000944 <readHreg+0x18>
         ( hregGroupsState[hregP->GroupId].hregGroupEnabled == HREG_GROUP_STARTED ) &&
 800093a:	7c8b      	ldrb	r3, [r1, #18]
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <readHreg+0x80>)
 800093e:	5cd3      	ldrb	r3, [r2, r3]
    if ( ( hregP->OnRead != HREG_NOP ) &&
 8000940:	2b02      	cmp	r3, #2
 8000942:	d007      	beq.n	8000954 <readHreg+0x28>
    {
        result = onReadHregFunc[hregP->OnRead].Read(instance, hregP, value);
    }
    else
    {
		size = SIZE_OF_HREG( hregP );
 8000944:	6863      	ldr	r3, [r4, #4]
 8000946:	2bff      	cmp	r3, #255	; 0xff
 8000948:	d911      	bls.n	800096e <readHreg+0x42>
 800094a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800094e:	d31b      	bcc.n	8000988 <readHreg+0x5c>
 8000950:	2303      	movs	r3, #3
 8000952:	e00d      	b.n	8000970 <readHreg+0x44>
         ( shellGetDebugState() == FALSE) )
 8000954:	f000 fd38 	bl	80013c8 <shellGetDebugState>
         ( hregGroupsState[hregP->GroupId].hregGroupEnabled == HREG_GROUP_STARTED ) &&
 8000958:	2800      	cmp	r0, #0
 800095a:	d1f3      	bne.n	8000944 <readHreg+0x18>
        result = onReadHregFunc[hregP->OnRead].Read(instance, hregP, value);
 800095c:	7c22      	ldrb	r2, [r4, #16]
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <readHreg+0x84>)
 8000960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000964:	462a      	mov	r2, r5
 8000966:	4621      	mov	r1, r4
 8000968:	4630      	mov	r0, r6
 800096a:	4798      	blx	r3
 800096c:	bd70      	pop	{r4, r5, r6, pc}
		size = SIZE_OF_HREG( hregP );
 800096e:	2301      	movs	r3, #1

		switch(size)
 8000970:	2b01      	cmp	r3, #1
 8000972:	d00b      	beq.n	800098c <readHreg+0x60>
 8000974:	2b02      	cmp	r3, #2
 8000976:	d011      	beq.n	800099c <readHreg+0x70>
		{
			case 1:		*(uint8_t*)value = (uint8_t)hregFunc.Read( instance, hregP );		break;
			case 2:		*(uint16_t*)value = (uint16_t)hregFunc.Read( instance, hregP );		break;
			default:	*(uint32_t*)value = (uint32_t)hregFunc.Read( instance, hregP );		break;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <readHreg+0x88>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4621      	mov	r1, r4
 800097e:	4630      	mov	r0, r6
 8000980:	4798      	blx	r3
 8000982:	6028      	str	r0, [r5, #0]
    eError result = RET_OK;
 8000984:	2000      	movs	r0, #0
        }
    }

    return result;
}
 8000986:	bd70      	pop	{r4, r5, r6, pc}
		size = SIZE_OF_HREG( hregP );
 8000988:	2302      	movs	r3, #2
 800098a:	e7f1      	b.n	8000970 <readHreg+0x44>
			case 1:		*(uint8_t*)value = (uint8_t)hregFunc.Read( instance, hregP );		break;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <readHreg+0x88>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4621      	mov	r1, r4
 8000992:	4630      	mov	r0, r6
 8000994:	4798      	blx	r3
 8000996:	7028      	strb	r0, [r5, #0]
    eError result = RET_OK;
 8000998:	2000      	movs	r0, #0
			case 1:		*(uint8_t*)value = (uint8_t)hregFunc.Read( instance, hregP );		break;
 800099a:	bd70      	pop	{r4, r5, r6, pc}
			case 2:		*(uint16_t*)value = (uint16_t)hregFunc.Read( instance, hregP );		break;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <readHreg+0x88>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4621      	mov	r1, r4
 80009a2:	4630      	mov	r0, r6
 80009a4:	4798      	blx	r3
 80009a6:	8028      	strh	r0, [r5, #0]
    eError result = RET_OK;
 80009a8:	2000      	movs	r0, #0
			case 2:		*(uint16_t*)value = (uint16_t)hregFunc.Read( instance, hregP );		break;
 80009aa:	bd70      	pop	{r4, r5, r6, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	08007610 	.word	0x08007610
 80009b4:	080075c8 	.word	0x080075c8

080009b8 <readShellHreg>:
 *
 * @return  value of HREG.
 *
 ****************************************************************************/
eError readShellHreg( uint8_t instance, uint16_t hregIndex, uint32_t *hregValue)
{
 80009b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009bc:	4680      	mov	r8, r0
 80009be:	460d      	mov	r5, r1
 80009c0:	4617      	mov	r7, r2
    eError result = RET_OK;
    uint8_t tablePointer = 0;
    uint16_t tableCount = 0;
    uint16_t previousTableCount = 0;
    uint8_t registerFound = FALSE;
 80009c2:	2000      	movs	r0, #0
    uint16_t previousTableCount = 0;
 80009c4:	4606      	mov	r6, r0
    uint16_t tableCount = 0;
 80009c6:	4681      	mov	r9, r0
    uint8_t tablePointer = 0;
 80009c8:	4604      	mov	r4, r0
    eError result = RET_OK;
 80009ca:	4686      	mov	lr, r0

    /* Table count */
    while ((hregTableList[tablePointer].TableHreg != HREG_NULL) && (registerFound == FALSE))
 80009cc:	e00a      	b.n	80009e4 <readShellHreg+0x2c>
    {
        tableCount += hregTableList[tablePointer].TableSize;
        if( hregIndex <= (tableCount - 1))
        {
			/* Group found */
			result = readHreg(instance, &(hregTableList[tablePointer].TableHreg)[hregIndex-previousTableCount], hregValue);
 80009ce:	1bab      	subs	r3, r5, r6
 80009d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009d4:	0098      	lsls	r0, r3, #2
 80009d6:	463a      	mov	r2, r7
 80009d8:	4401      	add	r1, r0
 80009da:	4640      	mov	r0, r8
 80009dc:	f7ff ffa6 	bl	800092c <readHreg>
 80009e0:	4686      	mov	lr, r0
			registerFound = TRUE;
 80009e2:	2001      	movs	r0, #1
    while ((hregTableList[tablePointer].TableHreg != HREG_NULL) && (registerFound == FALSE))
 80009e4:	46a4      	mov	ip, r4
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <readShellHreg+0x5c>)
 80009e8:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
 80009ec:	b179      	cbz	r1, 8000a0e <readShellHreg+0x56>
 80009ee:	b970      	cbnz	r0, 8000a0e <readShellHreg+0x56>
        tableCount += hregTableList[tablePointer].TableSize;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <readShellHreg+0x5c>)
 80009f2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80009f6:	791b      	ldrb	r3, [r3, #4]
 80009f8:	444b      	add	r3, r9
 80009fa:	fa1f f983 	uxth.w	r9, r3
        if( hregIndex <= (tableCount - 1))
 80009fe:	f109 33ff 	add.w	r3, r9, #4294967295
 8000a02:	429d      	cmp	r5, r3
 8000a04:	dde3      	ble.n	80009ce <readShellHreg+0x16>
        }
        else
        {
			/* Try next group */
			previousTableCount = tableCount;
			tablePointer++;
 8000a06:	3401      	adds	r4, #1
 8000a08:	b2e4      	uxtb	r4, r4
			previousTableCount = tableCount;
 8000a0a:	464e      	mov	r6, r9
 8000a0c:	e7ea      	b.n	80009e4 <readShellHreg+0x2c>
        }
    }
    return result;
}
 8000a0e:	4670      	mov	r0, lr
 8000a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a14:	080075d0 	.word	0x080075d0

08000a18 <getNumOfHregs>:
 *
 ****************************************************************************/
uint8_t getNumOfHregs( void )
{
    return numOfHregs;
}
 8000a18:	4b01      	ldr	r3, [pc, #4]	; (8000a20 <getNumOfHregs+0x8>)
 8000a1a:	7818      	ldrb	r0, [r3, #0]
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	200001f8 	.word	0x200001f8

08000a24 <readHregTableStd>:
{
    uint32_t ret_data = 0xffffffff;
    uint8_t size = 0;

    /* Read according to the data size (1byte/2byte) */
    size = SIZE_OF_HREG( hregPtr );
 8000a24:	684b      	ldr	r3, [r1, #4]
 8000a26:	2bff      	cmp	r3, #255	; 0xff
 8000a28:	d904      	bls.n	8000a34 <readHregTableStd+0x10>
 8000a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a2e:	d30a      	bcc.n	8000a46 <readHregTableStd+0x22>
 8000a30:	2303      	movs	r3, #3
 8000a32:	e000      	b.n	8000a36 <readHregTableStd+0x12>
 8000a34:	2301      	movs	r3, #1
	switch(size)
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d007      	beq.n	8000a4a <readHregTableStd+0x26>
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d008      	beq.n	8000a50 <readHregTableStd+0x2c>
	{
		case 1:		ret_data = ( uint32_t )( *( (uint8_t *)(hregPtr->data) + instance ) );		break;
		case 2:		ret_data = ( uint32_t )( *( (uint16_t *)(hregPtr->data) + instance ) );		break;
		default:	ret_data = ( uint32_t )( *( (uint32_t *)(hregPtr->data) + instance ) );		break;
 8000a3e:	680b      	ldr	r3, [r1, #0]
 8000a40:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	}

    return ret_data;
}
 8000a44:	4770      	bx	lr
    size = SIZE_OF_HREG( hregPtr );
 8000a46:	2302      	movs	r3, #2
 8000a48:	e7f5      	b.n	8000a36 <readHregTableStd+0x12>
		case 1:		ret_data = ( uint32_t )( *( (uint8_t *)(hregPtr->data) + instance ) );		break;
 8000a4a:	680b      	ldr	r3, [r1, #0]
 8000a4c:	5c18      	ldrb	r0, [r3, r0]
 8000a4e:	4770      	bx	lr
		case 2:		ret_data = ( uint32_t )( *( (uint16_t *)(hregPtr->data) + instance ) );		break;
 8000a50:	680b      	ldr	r3, [r1, #0]
 8000a52:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8000a56:	4770      	bx	lr

08000a58 <writeHregTableStd>:
eError writeHregTableStd( uint8_t instance, const HREG *hregPtr, uint32_t value )
{
    eError ret = RET_OK;
    uint8_t size = 0;

    size = SIZE_OF_HREG( hregPtr );
 8000a58:	684b      	ldr	r3, [r1, #4]
 8000a5a:	2bff      	cmp	r3, #255	; 0xff
 8000a5c:	d904      	bls.n	8000a68 <writeHregTableStd+0x10>
 8000a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a62:	d30a      	bcc.n	8000a7a <writeHregTableStd+0x22>
 8000a64:	2303      	movs	r3, #3
 8000a66:	e000      	b.n	8000a6a <writeHregTableStd+0x12>
 8000a68:	2301      	movs	r3, #1

	switch(size)
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d007      	beq.n	8000a7e <writeHregTableStd+0x26>
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d009      	beq.n	8000a86 <writeHregTableStd+0x2e>
	{
		case 1:		*( (uint8_t *)(hregPtr->data) + instance ) = (uint8_t)value;	break;
		case 2:		*( (uint16_t *)(hregPtr->data) + instance ) = (uint16_t)value;	break;
		default:	*( (uint32_t *)(hregPtr->data) + instance ) = (uint32_t)value;	break;
 8000a72:	680b      	ldr	r3, [r1, #0]
 8000a74:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8000a78:	e003      	b.n	8000a82 <writeHregTableStd+0x2a>
    size = SIZE_OF_HREG( hregPtr );
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e7f5      	b.n	8000a6a <writeHregTableStd+0x12>
		case 1:		*( (uint8_t *)(hregPtr->data) + instance ) = (uint8_t)value;	break;
 8000a7e:	680b      	ldr	r3, [r1, #0]
 8000a80:	541a      	strb	r2, [r3, r0]
	}

    return ret;
}
 8000a82:	2000      	movs	r0, #0
 8000a84:	4770      	bx	lr
		case 2:		*( (uint16_t *)(hregPtr->data) + instance ) = (uint16_t)value;	break;
 8000a86:	680b      	ldr	r3, [r1, #0]
 8000a88:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
 8000a8c:	e7f9      	b.n	8000a82 <writeHregTableStd+0x2a>

08000a8e <getNumOfSregs>:
 * @return  number of SREGs.  
 ****************************************************************************/
uint8_t getNumOfSregs( void )
{
	return NUM_OF_SREGS;
}
 8000a8e:	2009      	movs	r0, #9
 8000a90:	4770      	bx	lr
	...

08000a94 <sregWrite>:
eError sregWrite(SREG sreg, uint32_t value)
{
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 8000a94:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <sregWrite+0x38>)
 8000a96:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000a9a:	7852      	ldrb	r2, [r2, #1]
	switch(SREGInstanceMap[sreg].type)
 8000a9c:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d008      	beq.n	8000ab6 <sregWrite+0x22>
 8000aa4:	b11b      	cbz	r3, 8000aae <sregWrite+0x1a>
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d00a      	beq.n	8000ac0 <sregWrite+0x2c>
			break;
		case SREG_UINT32:
			SREG32Context[index] = (uint32_t)value;
			break;
		default:
			success = RET_INVALID_PARAMETER;
 8000aaa:	2005      	movs	r0, #5
			break;
	}

	return success;
}
 8000aac:	4770      	bx	lr
			SREG8Context[index] = (uint8_t)value;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <sregWrite+0x3c>)
 8000ab0:	5499      	strb	r1, [r3, r2]
	eError success = RET_OK;
 8000ab2:	2000      	movs	r0, #0
			break;
 8000ab4:	4770      	bx	lr
			SREG16Context[index] = (uint16_t)value;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <sregWrite+0x40>)
 8000ab8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	eError success = RET_OK;
 8000abc:	2000      	movs	r0, #0
			break;
 8000abe:	4770      	bx	lr
			SREG32Context[index] = (uint32_t)value;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <sregWrite+0x44>)
 8000ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eError success = RET_OK;
 8000ac6:	2000      	movs	r0, #0
			break;
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	08007884 	.word	0x08007884
 8000ad0:	200004b0 	.word	0x200004b0
 8000ad4:	200004c0 	.word	0x200004c0
 8000ad8:	200004b8 	.word	0x200004b8

08000adc <sregReadParam>:
 * @param	sreg
 * @param	sregParam struct
 * @return  RET_OK or RET_FAIL
 ****************************************************************************/
eError sregReadParam(SREG sreg, tSREGParam *sregParam)
{
 8000adc:	b430      	push	{r4, r5}
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 8000ade:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <sregReadParam+0x8c>)
 8000ae0:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8000ae4:	785b      	ldrb	r3, [r3, #1]
	switch(SREGInstanceMap[sreg].type)
 8000ae6:	f812 2020 	ldrb.w	r2, [r2, r0, lsl #2]
 8000aea:	2a01      	cmp	r2, #1
 8000aec:	d014      	beq.n	8000b18 <sregReadParam+0x3c>
 8000aee:	b11a      	cbz	r2, 8000af8 <sregReadParam+0x1c>
 8000af0:	2a02      	cmp	r2, #2
 8000af2:	d025      	beq.n	8000b40 <sregReadParam+0x64>
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
			break;
		default:
			success = RET_INVALID_PARAMETER;
 8000af4:	2005      	movs	r0, #5
 8000af6:	e00d      	b.n	8000b14 <sregReadParam+0x38>
			sregParam->Data = (uint32_t)SREG8Context[index];
 8000af8:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <sregReadParam+0x90>)
 8000afa:	5cd2      	ldrb	r2, [r2, r3]
 8000afc:	600a      	str	r2, [r1, #0]
			sregParam->Init = (uint32_t)(SREG8InstanceMap[index].Init);
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <sregReadParam+0x94>)
 8000b00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000b04:	18c2      	adds	r2, r0, r3
 8000b06:	7894      	ldrb	r4, [r2, #2]
 8000b08:	60cc      	str	r4, [r1, #12]
			sregParam->Max  = (uint32_t)(SREG8InstanceMap[index].Max);
 8000b0a:	5cc3      	ldrb	r3, [r0, r3]
 8000b0c:	604b      	str	r3, [r1, #4]
			sregParam->Min  = (uint32_t)(SREG8InstanceMap[index].Min);
 8000b0e:	7853      	ldrb	r3, [r2, #1]
 8000b10:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000b12:	2000      	movs	r0, #0
			break;
	}

	return success;
}
 8000b14:	bc30      	pop	{r4, r5}
 8000b16:	4770      	bx	lr
			sregParam->Data  = (uint32_t)SREG16Context[index];
 8000b18:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <sregReadParam+0x98>)
 8000b1a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b1e:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG16InstanceMap[index].Init);
 8000b20:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <sregReadParam+0x9c>)
 8000b22:	0058      	lsls	r0, r3, #1
 8000b24:	18c5      	adds	r5, r0, r3
 8000b26:	006c      	lsls	r4, r5, #1
 8000b28:	1915      	adds	r5, r2, r4
 8000b2a:	88ad      	ldrh	r5, [r5, #4]
 8000b2c:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG16InstanceMap[index].Max);
 8000b2e:	5b14      	ldrh	r4, [r2, r4]
 8000b30:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG16InstanceMap[index].Min);
 8000b32:	4403      	add	r3, r0
 8000b34:	0058      	lsls	r0, r3, #1
 8000b36:	4402      	add	r2, r0
 8000b38:	8853      	ldrh	r3, [r2, #2]
 8000b3a:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000b3c:	2000      	movs	r0, #0
			break;
 8000b3e:	e7e9      	b.n	8000b14 <sregReadParam+0x38>
			sregParam->Data  = (uint32_t)SREG32Context[index];
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <sregReadParam+0xa0>)
 8000b42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b46:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <sregReadParam+0xa4>)
 8000b4a:	0058      	lsls	r0, r3, #1
 8000b4c:	18c5      	adds	r5, r0, r3
 8000b4e:	00ac      	lsls	r4, r5, #2
 8000b50:	1915      	adds	r5, r2, r4
 8000b52:	68ad      	ldr	r5, [r5, #8]
 8000b54:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
 8000b56:	5914      	ldr	r4, [r2, r4]
 8000b58:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
 8000b5a:	4403      	add	r3, r0
 8000b5c:	0098      	lsls	r0, r3, #2
 8000b5e:	4402      	add	r2, r0
 8000b60:	6853      	ldr	r3, [r2, #4]
 8000b62:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000b64:	2000      	movs	r0, #0
			break;
 8000b66:	e7d5      	b.n	8000b14 <sregReadParam+0x38>
 8000b68:	08007884 	.word	0x08007884
 8000b6c:	200004b0 	.word	0x200004b0
 8000b70:	0800786c 	.word	0x0800786c
 8000b74:	200004c0 	.word	0x200004c0
 8000b78:	08007854 	.word	0x08007854
 8000b7c:	200004b8 	.word	0x200004b8
 8000b80:	08007854 	.word	0x08007854

08000b84 <initSregAll>:
{
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	b086      	sub	sp, #24
    uint8_t updateNVMsreg[NUM_OF_NVM_SREG_MAPS] = { FALSE, FALSE, FALSE };
 8000b88:	2400      	movs	r4, #0
 8000b8a:	f88d 4000 	strb.w	r4, [sp]
 8000b8e:	f88d 4001 	strb.w	r4, [sp, #1]
 8000b92:	f88d 4002 	strb.w	r4, [sp, #2]
    for ( numNVMmap = 0; numNVMmap < NUM_OF_NVM_SREG_MAPS; numNVMmap++ )
 8000b96:	e001      	b.n	8000b9c <initSregAll+0x18>
 8000b98:	3401      	adds	r4, #1
 8000b9a:	b2e4      	uxtb	r4, r4
 8000b9c:	2c02      	cmp	r4, #2
 8000b9e:	d813      	bhi.n	8000bc8 <initSregAll+0x44>
    	EEPROM_READ_SREG(SregMapNVM[numNVMmap].eepromSregType, 0,  UNIQUE_INSTANCE, &value);
 8000ba0:	4d30      	ldr	r5, [pc, #192]	; (8000c64 <initSregAll+0xe0>)
 8000ba2:	ab01      	add	r3, sp, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	f815 0024 	ldrb.w	r0, [r5, r4, lsl #2]
 8000bac:	f001 fdee 	bl	800278c <VirtualEEPROMReadRegister>
    	if ( value != SregMapNVM[numNVMmap].nvmSregMap)
 8000bb0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 8000bb4:	886a      	ldrh	r2, [r5, #2]
 8000bb6:	9b01      	ldr	r3, [sp, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d0ed      	beq.n	8000b98 <initSregAll+0x14>
    		updateNVMsreg[numNVMmap] = TRUE;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	ab06      	add	r3, sp, #24
 8000bc0:	4423      	add	r3, r4
 8000bc2:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000bc6:	e7e7      	b.n	8000b98 <initSregAll+0x14>
 8000bc8:	2400      	movs	r4, #0
 8000bca:	e016      	b.n	8000bfa <initSregAll+0x76>
				sregReadParam(sreg, &sregParam);
 8000bcc:	a902      	add	r1, sp, #8
 8000bce:	4620      	mov	r0, r4
 8000bd0:	f7ff ff84 	bl	8000adc <sregReadParam>
				EEPROM_WRITE_SREG(SregMapNVM[SREGInstanceMap[sreg].TypeNvm].eepromSregType, SREGInstanceMap[sreg].Nvm, UNIQUE_INSTANCE, sregParam.Init);
 8000bd4:	9b05      	ldr	r3, [sp, #20]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4629      	mov	r1, r5
 8000bda:	4822      	ldr	r0, [pc, #136]	; (8000c64 <initSregAll+0xe0>)
 8000bdc:	f810 0026 	ldrb.w	r0, [r0, r6, lsl #2]
 8000be0:	f001 ffa6 	bl	8002b30 <VirtualEEPROMWriteRegister>
 8000be4:	e003      	b.n	8000bee <initSregAll+0x6a>
			sregReadParam(sreg, &sregParam);
 8000be6:	a902      	add	r1, sp, #8
 8000be8:	4620      	mov	r0, r4
 8000bea:	f7ff ff77 	bl	8000adc <sregReadParam>
		sregWrite(sreg, sregParam.Init);
 8000bee:	9905      	ldr	r1, [sp, #20]
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f7ff ff4f 	bl	8000a94 <sregWrite>
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 8000bf6:	3401      	adds	r4, #1
 8000bf8:	b2e4      	uxtb	r4, r4
 8000bfa:	2c08      	cmp	r4, #8
 8000bfc:	d818      	bhi.n	8000c30 <initSregAll+0xac>
		if ( SREGInstanceMap[sreg].Nvm != NVM_NOP)
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <initSregAll+0xe4>)
 8000c00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000c04:	789d      	ldrb	r5, [r3, #2]
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0ed      	beq.n	8000be6 <initSregAll+0x62>
			if ( updateNVMsreg[SREGInstanceMap[sreg].TypeNvm] == TRUE )
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <initSregAll+0xe4>)
 8000c0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000c10:	78de      	ldrb	r6, [r3, #3]
 8000c12:	ab06      	add	r3, sp, #24
 8000c14:	4433      	add	r3, r6
 8000c16:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d0d6      	beq.n	8000bcc <initSregAll+0x48>
				EEPROM_READ_SREG(SregMapNVM[SREGInstanceMap[sreg].TypeNvm].eepromSregType, SREGInstanceMap[sreg].Nvm, UNIQUE_INSTANCE, &sregParam.Init);
 8000c1e:	ab05      	add	r3, sp, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	4629      	mov	r1, r5
 8000c24:	480f      	ldr	r0, [pc, #60]	; (8000c64 <initSregAll+0xe0>)
 8000c26:	f810 0026 	ldrb.w	r0, [r0, r6, lsl #2]
 8000c2a:	f001 fdaf 	bl	800278c <VirtualEEPROMReadRegister>
 8000c2e:	e7de      	b.n	8000bee <initSregAll+0x6a>
 8000c30:	2400      	movs	r4, #0
 8000c32:	e001      	b.n	8000c38 <initSregAll+0xb4>
    for ( numNVMmap = 0; numNVMmap < NUM_OF_NVM_SREG_MAPS; numNVMmap++ )
 8000c34:	3401      	adds	r4, #1
 8000c36:	b2e4      	uxtb	r4, r4
 8000c38:	2c02      	cmp	r4, #2
 8000c3a:	d810      	bhi.n	8000c5e <initSregAll+0xda>
    	if ( updateNVMsreg[numNVMmap] == TRUE )
 8000c3c:	ab06      	add	r3, sp, #24
 8000c3e:	4423      	add	r3, r4
 8000c40:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d1f5      	bne.n	8000c34 <initSregAll+0xb0>
    		EEPROM_WRITE_SREG(SregMapNVM[numNVMmap].eepromSregType, 0,  UNIQUE_INSTANCE, SregMapNVM[numNVMmap].nvmSregMap);
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <initSregAll+0xe0>)
 8000c4a:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8000c4e:	885b      	ldrh	r3, [r3, #2]
 8000c50:	2200      	movs	r2, #0
 8000c52:	4611      	mov	r1, r2
 8000c54:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
 8000c58:	f001 ff6a 	bl	8002b30 <VirtualEEPROMWriteRegister>
 8000c5c:	e7ea      	b.n	8000c34 <initSregAll+0xb0>
}
 8000c5e:	b006      	add	sp, #24
 8000c60:	bd70      	pop	{r4, r5, r6, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008
 8000c68:	08007884 	.word	0x08007884

08000c6c <readSregTableStd>:
{
 8000c6c:	b500      	push	{lr}
 8000c6e:	b085      	sub	sp, #20
	success = sregReadParam(sreg, &sregParam);
 8000c70:	4669      	mov	r1, sp
 8000c72:	f7ff ff33 	bl	8000adc <sregReadParam>
	if ( success == RET_OK )
 8000c76:	b120      	cbz	r0, 8000c82 <readSregTableStd+0x16>
    uint32_t ret_data = 0xffffffff;
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000c7c:	b005      	add	sp, #20
 8000c7e:	f85d fb04 	ldr.w	pc, [sp], #4
		ret_data = sregParam.Data;
 8000c82:	9800      	ldr	r0, [sp, #0]
 8000c84:	e7fa      	b.n	8000c7c <readSregTableStd+0x10>

08000c86 <readSreg>:
{
 8000c86:	b508      	push	{r3, lr}
	return readSregTableStd(sreg);
 8000c88:	f7ff fff0 	bl	8000c6c <readSregTableStd>
}
 8000c8c:	bd08      	pop	{r3, pc}

08000c8e <readShellSreg>:
{	
 8000c8e:	b508      	push	{r3, lr}
	sregValue = readSreg( (SREG)sregIndex );
 8000c90:	b2c0      	uxtb	r0, r0
 8000c92:	f7ff fff8 	bl	8000c86 <readSreg>
}
 8000c96:	bd08      	pop	{r3, pc}

08000c98 <writeSregTableStd>:
{
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	4607      	mov	r7, r0
 8000c9e:	460e      	mov	r6, r1
	result = sregReadParam(sreg, &sregParam);
 8000ca0:	4669      	mov	r1, sp
 8000ca2:	f7ff ff1b 	bl	8000adc <sregReadParam>
 8000ca6:	4605      	mov	r5, r0
	if ( value > sregParam.Max )
 8000ca8:	9c01      	ldr	r4, [sp, #4]
 8000caa:	42b4      	cmp	r4, r6
 8000cac:	d303      	bcc.n	8000cb6 <writeSregTableStd+0x1e>
	else if ( value < sregParam.Min )
 8000cae:	9c02      	ldr	r4, [sp, #8]
 8000cb0:	42a6      	cmp	r6, r4
 8000cb2:	d300      	bcc.n	8000cb6 <writeSregTableStd+0x1e>
 8000cb4:	4634      	mov	r4, r6
	if ( result == RET_OK )
 8000cb6:	b115      	cbz	r5, 8000cbe <writeSregTableStd+0x26>
}
 8000cb8:	4628      	mov	r0, r5
 8000cba:	b005      	add	sp, #20
 8000cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sregWrite(sreg, value);
 8000cbe:	4621      	mov	r1, r4
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	f7ff fee7 	bl	8000a94 <sregWrite>
	    if ( SREGInstanceMap[sreg].Nvm != NVM_NOP )
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <writeSregTableStd+0x54>)
 8000cc8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8000ccc:	7899      	ldrb	r1, [r3, #2]
 8000cce:	2900      	cmp	r1, #0
 8000cd0:	d0f2      	beq.n	8000cb8 <writeSregTableStd+0x20>
	    	EEPROM_WRITE_SREG( SregMapNVM[SREGInstanceMap[sreg].TypeNvm].eepromSregType, SREGInstanceMap[sreg].Nvm, UNIQUE_INSTANCE, value);
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <writeSregTableStd+0x54>)
 8000cd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000cd8:	78fe      	ldrb	r6, [r7, #3]
 8000cda:	4623      	mov	r3, r4
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <writeSregTableStd+0x58>)
 8000ce0:	f810 0026 	ldrb.w	r0, [r0, r6, lsl #2]
 8000ce4:	f001 ff24 	bl	8002b30 <VirtualEEPROMWriteRegister>
 8000ce8:	e7e6      	b.n	8000cb8 <writeSregTableStd+0x20>
 8000cea:	bf00      	nop
 8000cec:	08007884 	.word	0x08007884
 8000cf0:	20000008 	.word	0x20000008

08000cf4 <writeSreg>:
{
 8000cf4:	b508      	push	{r3, lr}
	return writeSregTableStd( sreg, value );
 8000cf6:	f7ff ffcf 	bl	8000c98 <writeSregTableStd>
}
 8000cfa:	bd08      	pop	{r3, pc}

08000cfc <writeShellSreg>:
{	
 8000cfc:	b508      	push	{r3, lr}
	result = writeSreg( (SREG)sregIndex, sregValue );
 8000cfe:	b2c0      	uxtb	r0, r0
 8000d00:	f7ff fff8 	bl	8000cf4 <writeSreg>
}
 8000d04:	bd08      	pop	{r3, pc}
	...

08000d08 <SchedulerResetProcessTable>:
 ****************************************************************************/
void SchedulerResetProcessTable(void)
{
	uint8_t i;

	ptrTask	= 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <SchedulerResetProcessTable+0x5c>)
 8000d0c:	7013      	strb	r3, [r2, #0]

 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d826      	bhi.n	8000d60 <SchedulerResetProcessTable+0x58>
{
 8000d12:	b430      	push	{r4, r5}
 	{
		schedulerProcess[i].uiTimeProcessCounter	= 0;
 8000d14:	4914      	ldr	r1, [pc, #80]	; (8000d68 <SchedulerResetProcessTable+0x60>)
 8000d16:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8000d1a:	f36f 020d 	bfc	r2, #0, #14
 8000d1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		schedulerProcess[i].bEnabledSystemTask	= SchedulerInstanceMap[i].initState;
 8000d22:	005a      	lsls	r2, r3, #1
 8000d24:	18d0      	adds	r0, r2, r3
 8000d26:	0084      	lsls	r4, r0, #2
 8000d28:	4810      	ldr	r0, [pc, #64]	; (8000d6c <SchedulerResetProcessTable+0x64>)
 8000d2a:	4420      	add	r0, r4
 8000d2c:	7a84      	ldrb	r4, [r0, #10]
 8000d2e:	4411      	add	r1, r2
 8000d30:	7848      	ldrb	r0, [r1, #1]
 8000d32:	f364 1086 	bfi	r0, r4, #6, #1
		schedulerProcess[i].bEnabledUrgentSystemTask = FALSE;
 8000d36:	f36f 10c7 	bfc	r0, #7, #1
 8000d3a:	7048      	strb	r0, [r1, #1]

		schedulerContext[i].maxDelayProcessCtn = 0;
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <SchedulerResetProcessTable+0x68>)
 8000d3e:	18d0      	adds	r0, r2, r3
 8000d40:	00c5      	lsls	r5, r0, #3
 8000d42:	194c      	adds	r4, r1, r5
 8000d44:	2000      	movs	r0, #0
 8000d46:	81a0      	strh	r0, [r4, #12]
		schedulerContext[i].maximumTaskTime_us = 0;
 8000d48:	60a0      	str	r0, [r4, #8]
		schedulerContext[i].averageTaskTime_us = 0;
 8000d4a:	5148      	str	r0, [r1, r5]
		schedulerContext[i].currentTaskTime_us = 0;
 8000d4c:	6060      	str	r0, [r4, #4]
		schedulerContext[i].cntTaskTime = 0;
 8000d4e:	6120      	str	r0, [r4, #16]
		schedulerContext[i].userEnabled = TRUE;
 8000d50:	2201      	movs	r2, #1
 8000d52:	7562      	strb	r2, [r4, #21]
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000d54:	4413      	add	r3, r2
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d9db      	bls.n	8000d14 <SchedulerResetProcessTable+0xc>
 	}
}
 8000d5c:	bc30      	pop	{r4, r5}
 8000d5e:	4770      	bx	lr
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000524 	.word	0x20000524
 8000d68:	20000528 	.word	0x20000528
 8000d6c:	080078a8 	.word	0x080078a8
 8000d70:	200004c4 	.word	0x200004c4

08000d74 <SchedulerInit>:
{
 8000d74:	b510      	push	{r4, lr}
	SchedulerResetProcessTable();
 8000d76:	f7ff ffc7 	bl	8000d08 <SchedulerResetProcessTable>
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000d7a:	2400      	movs	r4, #0
 8000d7c:	e001      	b.n	8000d82 <SchedulerInit+0xe>
 8000d7e:	3401      	adds	r4, #1
 8000d80:	b2e4      	uxtb	r4, r4
 8000d82:	2c03      	cmp	r4, #3
 8000d84:	d808      	bhi.n	8000d98 <SchedulerInit+0x24>
		if(SchedulerInstanceMap[i].InitProcess != NULL)
 8000d86:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000d8a:	0093      	lsls	r3, r2, #2
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <SchedulerInit+0x3c>)
 8000d8e:	58d3      	ldr	r3, [r2, r3]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f4      	beq.n	8000d7e <SchedulerInit+0xa>
			(*(SchedulerInstanceMap[i].InitProcess))();
 8000d94:	4798      	blx	r3
 8000d96:	e7f2      	b.n	8000d7e <SchedulerInit+0xa>
    systemGetCLkFreq(&ticks_per_us);
 8000d98:	4c06      	ldr	r4, [pc, #24]	; (8000db4 <SchedulerInit+0x40>)
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f002 fd06 	bl	80037ac <systemGetCLkFreq>
    ticks_per_us /= 1000000;
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SchedulerInit+0x44>)
 8000da4:	fba2 2303 	umull	r2, r3, r2, r3
 8000da8:	0c9b      	lsrs	r3, r3, #18
 8000daa:	6023      	str	r3, [r4, #0]
 8000dac:	bd10      	pop	{r4, pc}
 8000dae:	bf00      	nop
 8000db0:	080078a8 	.word	0x080078a8
 8000db4:	200004c0 	.word	0x200004c0
 8000db8:	431bde83 	.word	0x431bde83

08000dbc <SchedulerProcessesAutoEnable>:
 ****************************************************************************/
void SchedulerProcessesAutoEnable(void)
{
	uint8_t i;

	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d825      	bhi.n	8000e0e <SchedulerProcessesAutoEnable+0x52>
{
 8000dc2:	b430      	push	{r4, r5}
 8000dc4:	e003      	b.n	8000dce <SchedulerProcessesAutoEnable+0x12>
	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d81d      	bhi.n	8000e0a <SchedulerProcessesAutoEnable+0x4e>
	{
		schedulerProcess[i].uiTimeProcessCounter++;
 8000dce:	4810      	ldr	r0, [pc, #64]	; (8000e10 <SchedulerProcessesAutoEnable+0x54>)
 8000dd0:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8000dd4:	f3c2 010d 	ubfx	r1, r2, #0, #14
 8000dd8:	3101      	adds	r1, #1
 8000dda:	f361 020d 	bfi	r2, r1, #0, #14
 8000dde:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

		// If currentTaskTime it's enable, update 1000uS=1mS
		if (schedulerContext[i].taskActive == TRUE && schedulerContext[i].userEnabled == TRUE )
 8000de2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000de6:	00d1      	lsls	r1, r2, #3
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <SchedulerProcessesAutoEnable+0x58>)
 8000dea:	440a      	add	r2, r1
 8000dec:	7d12      	ldrb	r2, [r2, #20]
 8000dee:	2a00      	cmp	r2, #0
 8000df0:	d0e9      	beq.n	8000dc6 <SchedulerProcessesAutoEnable+0xa>
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <SchedulerProcessesAutoEnable+0x58>)
 8000df4:	440a      	add	r2, r1
 8000df6:	7d52      	ldrb	r2, [r2, #21]
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	d0e4      	beq.n	8000dc6 <SchedulerProcessesAutoEnable+0xa>
		{
			schedulerContext[i].currentTaskTime_us += 1000;
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <SchedulerProcessesAutoEnable+0x58>)
 8000dfe:	4401      	add	r1, r0
 8000e00:	684a      	ldr	r2, [r1, #4]
 8000e02:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000e06:	604a      	str	r2, [r1, #4]
 8000e08:	e7dd      	b.n	8000dc6 <SchedulerProcessesAutoEnable+0xa>
		}
	}
}
 8000e0a:	bc30      	pop	{r4, r5}
 8000e0c:	4770      	bx	lr
 8000e0e:	4770      	bx	lr
 8000e10:	20000528 	.word	0x20000528
 8000e14:	200004c4 	.word	0x200004c4

08000e18 <SchedulerUpdateTaskTime>:
 * @brief  	Update average task time, maximum task time
 * @param   process, initTime, finalTime
 * @return  none
 ****************************************************************************/
void SchedulerUpdateTaskTime(int32_t initTimeTaskScheduler, int32_t finalTimeTaskScheduler)
{
 8000e18:	b4f0      	push	{r4, r5, r6, r7}
	uint64_t averageTaskTemp;
	schedulerContext[ptrTask].currentTaskTime_us += ((initTimeTaskScheduler - finalTimeTaskScheduler)/(int32_t)(ticks_per_us));
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <SchedulerUpdateTaskTime+0x48>)
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	1a41      	subs	r1, r0, r1
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <SchedulerUpdateTaskTime+0x4c>)
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	fb91 f1f0 	sdiv	r1, r1, r0
 8000e28:	4e0f      	ldr	r6, [pc, #60]	; (8000e68 <SchedulerUpdateTaskTime+0x50>)
 8000e2a:	0053      	lsls	r3, r2, #1
 8000e2c:	4413      	add	r3, r2
 8000e2e:	00dd      	lsls	r5, r3, #3
 8000e30:	1974      	adds	r4, r6, r5
 8000e32:	6863      	ldr	r3, [r4, #4]
 8000e34:	4419      	add	r1, r3
 8000e36:	6061      	str	r1, [r4, #4]
	schedulerContext[ptrTask].cntTaskTime %= MAX_TASK_TIME_CNT;
 8000e38:	6923      	ldr	r3, [r4, #16]
 8000e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3e:	bf28      	it	cs
 8000e40:	3301      	addcs	r3, #1
	schedulerContext[ptrTask].cntTaskTime++;
 8000e42:	1c58      	adds	r0, r3, #1
 8000e44:	6120      	str	r0, [r4, #16]

	/* Calculate the average task time */
	averageTaskTemp = (uint64_t)(schedulerContext[ptrTask].averageTaskTime_us*(schedulerContext[ptrTask].cntTaskTime-1));
 8000e46:	5977      	ldr	r7, [r6, r5]
	schedulerContext[ptrTask].averageTaskTime_us = (uint32_t)(averageTaskTemp + schedulerContext[ptrTask].currentTaskTime_us) / schedulerContext[ptrTask].cntTaskTime;
 8000e48:	fb07 1303 	mla	r3, r7, r3, r1
 8000e4c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000e50:	5173      	str	r3, [r6, r5]

    /* If current Task Time is higher than maximum, update maximum task time */
    if ( schedulerContext[ptrTask].currentTaskTime_us > schedulerContext[ptrTask].maximumTaskTime_us )
 8000e52:	68a3      	ldr	r3, [r4, #8]
 8000e54:	4299      	cmp	r1, r3
 8000e56:	d900      	bls.n	8000e5a <SchedulerUpdateTaskTime+0x42>
    {
    	schedulerContext[ptrTask].maximumTaskTime_us = schedulerContext[ptrTask].currentTaskTime_us;
 8000e58:	60a1      	str	r1, [r4, #8]
    }

}
 8000e5a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000524 	.word	0x20000524
 8000e64:	200004c0 	.word	0x200004c0
 8000e68:	200004c4 	.word	0x200004c4

08000e6c <SchedulerExecuteSystemProcess>:
{
 8000e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	schedulerContext[ptrTask].currentTaskTime_us = 0;
 8000e70:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000ecc <SchedulerExecuteSystemProcess+0x60>
 8000e74:	f898 1000 	ldrb.w	r1, [r8]
 8000e78:	4c11      	ldr	r4, [pc, #68]	; (8000ec0 <SchedulerExecuteSystemProcess+0x54>)
 8000e7a:	004b      	lsls	r3, r1, #1
 8000e7c:	1858      	adds	r0, r3, r1
 8000e7e:	00c2      	lsls	r2, r0, #3
 8000e80:	4422      	add	r2, r4
 8000e82:	2700      	movs	r7, #0
 8000e84:	6057      	str	r7, [r2, #4]
	initTimeTaskScheduler =  SYSTEM_TICK;
 8000e86:	4e0f      	ldr	r6, [pc, #60]	; (8000ec4 <SchedulerExecuteSystemProcess+0x58>)
 8000e88:	68b5      	ldr	r5, [r6, #8]
	schedulerContext[ptrTask].taskActive = TRUE;
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	7510      	strb	r0, [r2, #20]
    (*(SchedulerInstanceMap[ptrTask].CallProcess))();
 8000e8e:	440b      	add	r3, r1
 8000e90:	009a      	lsls	r2, r3, #2
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <SchedulerExecuteSystemProcess+0x5c>)
 8000e94:	4413      	add	r3, r2
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	4798      	blx	r3
	schedulerContext[ptrTask].taskActive = FALSE;
 8000e9a:	f898 0000 	ldrb.w	r0, [r8]
 8000e9e:	0043      	lsls	r3, r0, #1
 8000ea0:	1819      	adds	r1, r3, r0
 8000ea2:	00ca      	lsls	r2, r1, #3
 8000ea4:	4422      	add	r2, r4
 8000ea6:	7517      	strb	r7, [r2, #20]
    finalTimeTaskScheduler = SYSTEM_TICK;
 8000ea8:	68b1      	ldr	r1, [r6, #8]
    if ( schedulerContext[ptrTask].userEnabled == TRUE )
 8000eaa:	4403      	add	r3, r0
 8000eac:	00da      	lsls	r2, r3, #3
 8000eae:	4414      	add	r4, r2
 8000eb0:	7d63      	ldrb	r3, [r4, #21]
 8000eb2:	b90b      	cbnz	r3, 8000eb8 <SchedulerExecuteSystemProcess+0x4c>
 8000eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	SchedulerUpdateTaskTime(initTimeTaskScheduler, finalTimeTaskScheduler);
 8000eb8:	4628      	mov	r0, r5
 8000eba:	f7ff ffad 	bl	8000e18 <SchedulerUpdateTaskTime>
}
 8000ebe:	e7f9      	b.n	8000eb4 <SchedulerExecuteSystemProcess+0x48>
 8000ec0:	200004c4 	.word	0x200004c4
 8000ec4:	e000e010 	.word	0xe000e010
 8000ec8:	080078a8 	.word	0x080078a8
 8000ecc:	20000524 	.word	0x20000524

08000ed0 <SchedulerNextSystemProcess>:
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
    uint8_t i			= 0;
 8000ed2:	2400      	movs	r4, #0
    bool taskExecuted	= FALSE;
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	e027      	b.n	8000f28 <SchedulerNextSystemProcess+0x58>
			if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE )
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	d148      	bne.n	8000f6e <SchedulerNextSystemProcess+0x9e>
				schedulerProcess[ptrTask].uiTimeProcessCounter = 0;
 8000edc:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <SchedulerNextSystemProcess+0xb0>)
 8000ede:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000ee2:	f36f 010d 	bfc	r1, #0, #14
 8000ee6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (schedulerContext[ptrTask].maxDelayProcessCtn < (schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess))
 8000eea:	005a      	lsls	r2, r3, #1
 8000eec:	18d1      	adds	r1, r2, r3
 8000eee:	00c8      	lsls	r0, r1, #3
 8000ef0:	4924      	ldr	r1, [pc, #144]	; (8000f84 <SchedulerNextSystemProcess+0xb4>)
 8000ef2:	4401      	add	r1, r0
 8000ef4:	898d      	ldrh	r5, [r1, #12]
 8000ef6:	4922      	ldr	r1, [pc, #136]	; (8000f80 <SchedulerNextSystemProcess+0xb0>)
 8000ef8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000efc:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000f00:	441a      	add	r2, r3
 8000f02:	0090      	lsls	r0, r2, #2
 8000f04:	4a20      	ldr	r2, [pc, #128]	; (8000f88 <SchedulerNextSystemProcess+0xb8>)
 8000f06:	4402      	add	r2, r0
 8000f08:	8912      	ldrh	r2, [r2, #8]
 8000f0a:	1a88      	subs	r0, r1, r2
 8000f0c:	4285      	cmp	r5, r0
 8000f0e:	da05      	bge.n	8000f1c <SchedulerNextSystemProcess+0x4c>
				schedulerContext[ptrTask].maxDelayProcessCtn = schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess;
 8000f10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f14:	00da      	lsls	r2, r3, #3
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <SchedulerNextSystemProcess+0xb4>)
 8000f18:	4413      	add	r3, r2
 8000f1a:	8198      	strh	r0, [r3, #12]
			SchedulerExecuteSystemProcess();
 8000f1c:	f7ff ffa6 	bl	8000e6c <SchedulerExecuteSystemProcess>
			taskExecuted = TRUE;
 8000f20:	2001      	movs	r0, #1
	while ( ( taskExecuted == FALSE ) && ( i <= NUM_OF_SCHED_TASKS ) );
 8000f22:	bb60      	cbnz	r0, 8000f7e <SchedulerNextSystemProcess+0xae>
 8000f24:	2c04      	cmp	r4, #4
 8000f26:	d82a      	bhi.n	8000f7e <SchedulerNextSystemProcess+0xae>
        i++;
 8000f28:	3401      	adds	r4, #1
 8000f2a:	b2e4      	uxtb	r4, r4
        ptrTask++;
 8000f2c:	4a17      	ldr	r2, [pc, #92]	; (8000f8c <SchedulerNextSystemProcess+0xbc>)
 8000f2e:	7813      	ldrb	r3, [r2, #0]
 8000f30:	3301      	adds	r3, #1
		ptrTask %= NUM_OF_SCHED_TASKS;
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	7013      	strb	r3, [r2, #0]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <SchedulerNextSystemProcess+0xb0>)
 8000f3a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000f3e:	7852      	ldrb	r2, [r2, #1]
 8000f40:	09d2      	lsrs	r2, r2, #7
 8000f42:	d1c9      	bne.n	8000ed8 <SchedulerNextSystemProcess+0x8>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000f44:	490e      	ldr	r1, [pc, #56]	; (8000f80 <SchedulerNextSystemProcess+0xb0>)
 8000f46:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8000f4a:	7849      	ldrb	r1, [r1, #1]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000f4c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000f50:	d0e7      	beq.n	8000f22 <SchedulerNextSystemProcess+0x52>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000f52:	490b      	ldr	r1, [pc, #44]	; (8000f80 <SchedulerNextSystemProcess+0xb0>)
 8000f54:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000f58:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000f5c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8000f60:	00ae      	lsls	r6, r5, #2
 8000f62:	4d09      	ldr	r5, [pc, #36]	; (8000f88 <SchedulerNextSystemProcess+0xb8>)
 8000f64:	4435      	add	r5, r6
 8000f66:	892d      	ldrh	r5, [r5, #8]
 8000f68:	42a9      	cmp	r1, r5
 8000f6a:	dbda      	blt.n	8000f22 <SchedulerNextSystemProcess+0x52>
 8000f6c:	e7b4      	b.n	8000ed8 <SchedulerNextSystemProcess+0x8>
				schedulerProcess[ptrTask].bEnabledUrgentSystemTask = FALSE;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <SchedulerNextSystemProcess+0xb0>)
 8000f70:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000f74:	7851      	ldrb	r1, [r2, #1]
 8000f76:	f36f 11c7 	bfc	r1, #7, #1
 8000f7a:	7051      	strb	r1, [r2, #1]
 8000f7c:	e7b5      	b.n	8000eea <SchedulerNextSystemProcess+0x1a>
}
 8000f7e:	bd70      	pop	{r4, r5, r6, pc}
 8000f80:	20000528 	.word	0x20000528
 8000f84:	200004c4 	.word	0x200004c4
 8000f88:	080078a8 	.word	0x080078a8
 8000f8c:	20000524 	.word	0x20000524

08000f90 <SchedulerDisableTask>:
 * @param   Process number that is going to be disabled.
 * @return  None
 ****************************************************************************/
void SchedulerDisableTask(tScheduler processId)
{
	schedulerProcess[processId].bEnabledSystemTask	= FALSE;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <SchedulerDisableTask+0x10>)
 8000f92:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8000f96:	7843      	ldrb	r3, [r0, #1]
 8000f98:	f36f 1386 	bfc	r3, #6, #1
 8000f9c:	7043      	strb	r3, [r0, #1]
 8000f9e:	4770      	bx	lr
 8000fa0:	20000528 	.word	0x20000528

08000fa4 <SchedulerEnableTask>:
 * @param   Process number that is going to be enabled.
 * @return  None
 ****************************************************************************/
void SchedulerEnableTask(tScheduler processId)
{
	schedulerProcess[processId].bEnabledSystemTask	= TRUE;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <SchedulerEnableTask+0x10>)
 8000fa6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8000faa:	7843      	ldrb	r3, [r0, #1]
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	7043      	strb	r3, [r0, #1]
 8000fb2:	4770      	bx	lr
 8000fb4:	20000528 	.word	0x20000528

08000fb8 <shellSetVerboseLevel>:
 * @param	lvl New verbose level
 * @return  None.
 ****************************************************************************/
void shellSetVerboseLevel(tVerboseLevels lvl)
{
    verboseLevel = lvl;
 8000fb8:	4b01      	ldr	r3, [pc, #4]	; (8000fc0 <shellSetVerboseLevel+0x8>)
 8000fba:	7018      	strb	r0, [r3, #0]
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000014 	.word	0x20000014

08000fc4 <tokenizeShellCommand>:
 * @param[out]  size Amount of tokens parsed
 * @return  nothing
 *
 ****************************************************************************/
void tokenizeShellCommand(uint8_t *commandBuffer, tShellToken *tokens, uint8_t* size )
{
 8000fc4:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t counter = 0;
    uint8_t currentToken = 0;
    uint8_t elementCounter = 0;

    *size = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	7013      	strb	r3, [r2, #0]

    //Strip leading
    while (commandBuffer[counter] == ' '){
 8000fca:	e001      	b.n	8000fd0 <tokenizeShellCommand+0xc>
        counter++;
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2db      	uxtb	r3, r3
    while (commandBuffer[counter] == ' '){
 8000fd0:	5cc4      	ldrb	r4, [r0, r3]
 8000fd2:	2c20      	cmp	r4, #32
 8000fd4:	d0fa      	beq.n	8000fcc <tokenizeShellCommand+0x8>
 8000fd6:	2400      	movs	r4, #0
 8000fd8:	4627      	mov	r7, r4
 8000fda:	e00d      	b.n	8000ff8 <tokenizeShellCommand+0x34>

    /* allocate received string on diferent buffers separeted by space chararcter*/
    while (counter < SHELL_INPUT_COMMANDBUFFER){
        //space -> New parameter
        if (commandBuffer[counter] == ' '){
            tokens[currentToken].size = elementCounter;
 8000fdc:	eb07 15c7 	add.w	r5, r7, r7, lsl #7
 8000fe0:	440d      	add	r5, r1
 8000fe2:	f885 4080 	strb.w	r4, [r5, #128]	; 0x80
            tokens[currentToken].string[elementCounter] = '\0';
 8000fe6:	2600      	movs	r6, #0
 8000fe8:	552e      	strb	r6, [r5, r4]
            elementCounter = 0;
            currentToken++;
 8000fea:	3701      	adds	r7, #1
 8000fec:	b2ff      	uxtb	r7, r7

            if ( currentToken == SHELL_NUMBER_OF_PARAMETERS + 1 ){
 8000fee:	2f05      	cmp	r7, #5
 8000ff0:	d01a      	beq.n	8001028 <tokenizeShellCommand+0x64>
				break;
            }
            counter++;
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
            elementCounter = 0;
 8000ff6:	4634      	mov	r4, r6
    while (counter < SHELL_INPUT_COMMANDBUFFER){
 8000ff8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ffc:	d114      	bne.n	8001028 <tokenizeShellCommand+0x64>
        if (commandBuffer[counter] == ' '){
 8000ffe:	5cc5      	ldrb	r5, [r0, r3]
 8001000:	2d20      	cmp	r5, #32
 8001002:	d0eb      	beq.n	8000fdc <tokenizeShellCommand+0x18>
        }
        //EOL -> End of command
		else if(commandBuffer[counter] == END_OF_LINE_CHARACTER){
 8001004:	2d0d      	cmp	r5, #13
 8001006:	d008      	beq.n	800101a <tokenizeShellCommand+0x56>
			    break;
        }
        //Otherwise, copy the character to its own parameter
        else{
            //@todo What if parameter bigger than expected?
            tokens[currentToken].string[elementCounter] = commandBuffer[counter];
 8001008:	eb07 16c7 	add.w	r6, r7, r7, lsl #7
 800100c:	440e      	add	r6, r1
 800100e:	5535      	strb	r5, [r6, r4]
            elementCounter++;
 8001010:	3401      	adds	r4, #1
 8001012:	b2e4      	uxtb	r4, r4
            counter++;
 8001014:	3301      	adds	r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	e7ee      	b.n	8000ff8 <tokenizeShellCommand+0x34>
			    tokens[currentToken].size = elementCounter;
 800101a:	eb07 13c7 	add.w	r3, r7, r7, lsl #7
 800101e:	4419      	add	r1, r3
 8001020:	f881 4080 	strb.w	r4, [r1, #128]	; 0x80
	            tokens[currentToken].string[elementCounter] = '\0';
 8001024:	2300      	movs	r3, #0
 8001026:	550b      	strb	r3, [r1, r4]
        }
    }

    *size = currentToken;
 8001028:	7017      	strb	r7, [r2, #0]
}
 800102a:	bcf0      	pop	{r4, r5, r6, r7}
 800102c:	4770      	bx	lr
	...

08001030 <shellCommandIdFromToken>:
 * @param	[r] A shell Token with a string command
 * @return  Enum value with the shell command
 *
 ****************************************************************************/
uint32_t shellCommandIdFromToken(tShellToken* token)
{
 8001030:	b570      	push	{r4, r5, r6, lr}
 8001032:	4606      	mov	r6, r0
    uint8_t i;

    //Check which command matches
    for (i = 0; i < shellGetNumOfCommands(); i++){
 8001034:	2400      	movs	r4, #0
 8001036:	4625      	mov	r5, r4
 8001038:	f000 fae0 	bl	80015fc <shellGetNumOfCommands>
 800103c:	4284      	cmp	r4, r0
 800103e:	d20a      	bcs.n	8001056 <shellCommandIdFromToken+0x26>
        if(!strncmp((char*)token->string, (char*)shellCommandsTable[i].command, SHELL_MAX_COMMAND_NAME_SIZE)){
 8001040:	2208      	movs	r2, #8
 8001042:	4907      	ldr	r1, [pc, #28]	; (8001060 <shellCommandIdFromToken+0x30>)
 8001044:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8001048:	4630      	mov	r0, r6
 800104a:	f005 fe08 	bl	8006c5e <strncmp>
 800104e:	b128      	cbz	r0, 800105c <shellCommandIdFromToken+0x2c>
    for (i = 0; i < shellGetNumOfCommands(); i++){
 8001050:	3401      	adds	r4, #1
 8001052:	b2e4      	uxtb	r4, r4
 8001054:	e7ef      	b.n	8001036 <shellCommandIdFromToken+0x6>
            return i; //This is the command
        }
    }

    //None found, return a number not corresponding with any command
    return shellGetNumOfCommands() + 1;
 8001056:	f000 fad1 	bl	80015fc <shellGetNumOfCommands>
 800105a:	1c45      	adds	r5, r0, #1
}
 800105c:	4628      	mov	r0, r5
 800105e:	bd70      	pop	{r4, r5, r6, pc}
 8001060:	20000018 	.word	0x20000018

08001064 <parseShellParamToken>:
 * @param[out]	bufferWrSize Number of bytes written into the buffer
 * @return      String ID with the error ocurred. Or SHELL_NO_MESSAGE if everything OK
 *
 ****************************************************************************/
tShellStringId parseShellParamToken(const tShellToken* token, tShellParam* sParam, uint8_t* wrBuffer, uint8_t* bufferWrSize)
{
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	b083      	sub	sp, #12
 8001068:	4605      	mov	r5, r0
 800106a:	460c      	mov	r4, r1
 800106c:	461f      	mov	r7, r3
    uint8_t size;

    //This is a type string
    if(token->string[0] == '"'){
 800106e:	f990 3000 	ldrsb.w	r3, [r0]
 8001072:	2b22      	cmp	r3, #34	; 0x22
 8001074:	d00e      	beq.n	8001094 <parseShellParamToken+0x30>
        //Update shellDataBufferPointer
        *bufferWrSize = token->size - 2;
    }
    //Default is treated as Unsigned int
    else{
        size = token->size;
 8001076:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800107a:	aa02      	add	r2, sp, #8
 800107c:	f802 3d01 	strb.w	r3, [r2, #-1]!
        sParam->type  = PARAM_UINT;
 8001080:	2300      	movs	r3, #0
 8001082:	f801 3b04 	strb.w	r3, [r1], #4
        _atoi( &(token->string), &(sParam->value), &size);
 8001086:	f000 fdc5 	bl	8001c14 <_atoi>
        if ( size != 0 ){
 800108a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800108e:	b9d3      	cbnz	r3, 80010c6 <parseShellParamToken+0x62>
            return SHELL_INVALID_REGISTER;
        }
    }

    return SHELL_NO_MESSAGE;
 8001090:	2008      	movs	r0, #8
 8001092:	e005      	b.n	80010a0 <parseShellParamToken+0x3c>
 8001094:	4616      	mov	r6, r2
        if(token->size > MON_SHELL_PARAM_BUFFER_SIZE){
 8001096:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800109a:	2a80      	cmp	r2, #128	; 0x80
 800109c:	d902      	bls.n	80010a4 <parseShellParamToken+0x40>
            return SHELL_BUFFER_TOO_BIG;
 800109e:	2006      	movs	r0, #6
}
 80010a0:	b003      	add	sp, #12
 80010a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(wrBuffer, token->string + 1, token->size - 2 );
 80010a4:	3a02      	subs	r2, #2
 80010a6:	1c41      	adds	r1, r0, #1
 80010a8:	4630      	mov	r0, r6
 80010aa:	f005 fdc5 	bl	8006c38 <memcpy>
        sParam->type  = PARAM_DATA;
 80010ae:	2301      	movs	r3, #1
 80010b0:	7023      	strb	r3, [r4, #0]
        sParam->value = (uint32_t) wrBuffer; //Integer from pointer
 80010b2:	6066      	str	r6, [r4, #4]
        sParam->size = token->size;
 80010b4:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80010b8:	7223      	strb	r3, [r4, #8]
        *bufferWrSize = token->size - 2;
 80010ba:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 80010be:	3b02      	subs	r3, #2
 80010c0:	703b      	strb	r3, [r7, #0]
    return SHELL_NO_MESSAGE;
 80010c2:	2008      	movs	r0, #8
 80010c4:	e7ec      	b.n	80010a0 <parseShellParamToken+0x3c>
            return SHELL_INVALID_REGISTER;
 80010c6:	2000      	movs	r0, #0
 80010c8:	e7ea      	b.n	80010a0 <parseShellParamToken+0x3c>
	...

080010cc <parseShellCommand>:
 *
 * @return  StringId with the parsing error, or OK
 *
 ****************************************************************************/
tShellStringId parseShellCommand(uint8_t *commandBuffer, tParsedCommand *commandParsed )
{
 80010cc:	b570      	push	{r4, r5, r6, lr}
 80010ce:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80010d2:	460e      	mov	r6, r1

    //The buffer is by default the initi of the shell buffer
    shellDataBufferWrPtr = shellDataBuffer;

    //Tokenize from input
    tokenizeShellCommand(commandBuffer, elements, &numOfParams);
 80010d4:	f10d 0206 	add.w	r2, sp, #6
 80010d8:	a902      	add	r1, sp, #8
 80010da:	f7ff ff73 	bl	8000fc4 <tokenizeShellCommand>

    /**COMMAND PARSING (the first parameter)*/
    sCommand = shellCommandIdFromToken(&(elements[0]));
 80010de:	a802      	add	r0, sp, #8
 80010e0:	f7ff ffa6 	bl	8001030 <shellCommandIdFromToken>
 80010e4:	4604      	mov	r4, r0

    //If it does not match any command, or the parameters do not match. Fail!
    if ( (sCommand >= shellGetNumOfCommands())
 80010e6:	f000 fa89 	bl	80015fc <shellGetNumOfCommands>
 80010ea:	4284      	cmp	r4, r0
 80010ec:	d303      	bcc.n	80010f6 <parseShellCommand+0x2a>
         || (numOfParams != shellCommandsTable[sCommand].numOfParams) ){
        return SHELL_INVALID_COMMAND;
 80010ee:	2004      	movs	r0, #4
            return retString;
        }
    }

    return SHELL_COMPLETED;
}
 80010f0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80010f4:	bd70      	pop	{r4, r5, r6, pc}
         || (numOfParams != shellCommandsTable[sCommand].numOfParams) ){
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <parseShellCommand+0x90>)
 80010f8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80010fc:	7a1a      	ldrb	r2, [r3, #8]
 80010fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001102:	429a      	cmp	r2, r3
 8001104:	d001      	beq.n	800110a <parseShellCommand+0x3e>
        return SHELL_INVALID_COMMAND;
 8001106:	2004      	movs	r0, #4
 8001108:	e7f2      	b.n	80010f0 <parseShellCommand+0x24>
        commandParsed->command = sCommand;
 800110a:	6034      	str	r4, [r6, #0]
    shellDataBufferWrPtr = shellDataBuffer;
 800110c:	4d14      	ldr	r5, [pc, #80]	; (8001160 <parseShellCommand+0x94>)
    for(i=0; i < numOfParams; i++){
 800110e:	2400      	movs	r4, #0
 8001110:	e001      	b.n	8001116 <parseShellCommand+0x4a>
 8001112:	3401      	adds	r4, #1
 8001114:	b2e4      	uxtb	r4, r4
 8001116:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800111a:	429c      	cmp	r4, r3
 800111c:	d21a      	bcs.n	8001154 <parseShellCommand+0x88>
        pElement = &(elements[i+1]);
 800111e:	1c60      	adds	r0, r4, #1
 8001120:	eb00 10c0 	add.w	r0, r0, r0, lsl #7
 8001124:	ab02      	add	r3, sp, #8
 8001126:	4418      	add	r0, r3
        sParam   = &(commandParsed->params[i]);
 8001128:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800112c:	0099      	lsls	r1, r3, #2
 800112e:	4431      	add	r1, r6
 8001130:	3104      	adds	r1, #4
        if((uint32_t)(shellDataBufferWrPtr + pElement->size) > (uint32_t)(&(shellDataBuffer) + SHELL_INPUT_COMMANDBUFFER)){
 8001132:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8001136:	442b      	add	r3, r5
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <parseShellCommand+0x98>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d80c      	bhi.n	8001158 <parseShellCommand+0x8c>
        retString = parseShellParamToken(pElement, sParam, shellDataBufferWrPtr, &size);
 800113e:	f10d 0307 	add.w	r3, sp, #7
 8001142:	462a      	mov	r2, r5
 8001144:	f7ff ff8e 	bl	8001064 <parseShellParamToken>
        shellDataBufferWrPtr += size;
 8001148:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800114c:	441d      	add	r5, r3
        if(retString != SHELL_NO_MESSAGE) {
 800114e:	2808      	cmp	r0, #8
 8001150:	d0df      	beq.n	8001112 <parseShellCommand+0x46>
 8001152:	e7cd      	b.n	80010f0 <parseShellCommand+0x24>
    return SHELL_COMPLETED;
 8001154:	2003      	movs	r0, #3
 8001156:	e7cb      	b.n	80010f0 <parseShellCommand+0x24>
            return SHELL_BUFFER_TOO_BIG;
 8001158:	2006      	movs	r0, #6
 800115a:	e7c9      	b.n	80010f0 <parseShellCommand+0x24>
 800115c:	20000018 	.word	0x20000018
 8001160:	20000530 	.word	0x20000530
 8001164:	20004530 	.word	0x20004530

08001168 <printShellString>:
 *
 * @details This function is protected against SHELL not initialised.
 *
 ****************************************************************************/
void printShellString ( int8_t* buffer, tVerboseLevels vLevel )
{
 8001168:	b538      	push	{r3, r4, r5, lr}

    if ( vLevel >= verboseLevel )
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <printShellString+0x34>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	428b      	cmp	r3, r1
 8001170:	d803      	bhi.n	800117a <printShellString+0x12>
    {
        /* Init protection */
        if( shellState == SHELL_STACK_READY )
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <printShellString+0x38>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d000      	beq.n	800117c <printShellString+0x14>
 800117a:	bd38      	pop	{r3, r4, r5, pc}
 800117c:	4604      	mov	r4, r0
        {
#ifdef UART_LOG
            WRITE_HREG(UART_LOG, HREG_UART_BUFFER_SIZE, strlen((char* )buffer));
 800117e:	f7ff f82f 	bl	80001e0 <strlen>
 8001182:	4d08      	ldr	r5, [pc, #32]	; (80011a4 <printShellString+0x3c>)
 8001184:	4602      	mov	r2, r0
 8001186:	4629      	mov	r1, r5
 8001188:	2001      	movs	r0, #1
 800118a:	f7ff fb4f 	bl	800082c <writeHreg>
            WRITE_HREG(UART_LOG, HREG_UART_DATA, buffer);
 800118e:	4622      	mov	r2, r4
 8001190:	f105 0114 	add.w	r1, r5, #20
 8001194:	2001      	movs	r0, #1
 8001196:	f7ff fb49 	bl	800082c <writeHreg>
#ifdef CAN_LOG
            ProtocolTraceSend((uint8_t *)buffer, 0, strlen((char* )buffer));
#endif
        }
    }
}
 800119a:	e7ee      	b.n	800117a <printShellString+0x12>
 800119c:	20000014 	.word	0x20000014
 80011a0:	20000305 	.word	0x20000305
 80011a4:	080077dc 	.word	0x080077dc

080011a8 <runShellCommandUnknown>:
 * @todo    review. Why do we need readShellSreg? and not simply read an sreg?
 * @param	command Pointer to command
 * @return  None.
 ****************************************************************************/
static void runShellCommandUnknown(tParsedCommand* command)
{
 80011a8:	b508      	push	{r3, lr}
    printShellString((int8_t*)"\r\nUNKNOWN COMMAND\n", VERBOSE_WARNING);
 80011aa:	2103      	movs	r1, #3
 80011ac:	4801      	ldr	r0, [pc, #4]	; (80011b4 <runShellCommandUnknown+0xc>)
 80011ae:	f7ff ffdb 	bl	8001168 <printShellString>
 80011b2:	bd08      	pop	{r3, pc}
 80011b4:	0800795c 	.word	0x0800795c

080011b8 <printShellValue>:
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	b08e      	sub	sp, #56	; 0x38
 80011bc:	4614      	mov	r4, r2
	itos( value , type , buffer );
 80011be:	aa01      	add	r2, sp, #4
 80011c0:	f000 fcda 	bl	8001b78 <itos>
	printShellString( buffer, vLevel );
 80011c4:	4621      	mov	r1, r4
 80011c6:	a801      	add	r0, sp, #4
 80011c8:	f7ff ffce 	bl	8001168 <printShellString>
}
 80011cc:	b00e      	add	sp, #56	; 0x38
 80011ce:	bd10      	pop	{r4, pc}

080011d0 <printStartingMessage>:
{
 80011d0:	b570      	push	{r4, r5, r6, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	4606      	mov	r6, r0
    tPowerUpReasons reason = 0;
 80011d6:	2500      	movs	r5, #0
 80011d8:	ac02      	add	r4, sp, #8
 80011da:	f804 5d01 	strb.w	r5, [r4, #-1]!
    printShellString((int8_t*)"\n", VERBOSE_GENERAL);
 80011de:	2101      	movs	r1, #1
 80011e0:	4821      	ldr	r0, [pc, #132]	; (8001268 <printStartingMessage+0x98>)
 80011e2:	f7ff ffc1 	bl	8001168 <printShellString>
    printShellString(((int8_t *)START_APPLICATION_MESSAGE), VERBOSE_GENERAL);
 80011e6:	2101      	movs	r1, #1
 80011e8:	4820      	ldr	r0, [pc, #128]	; (800126c <printStartingMessage+0x9c>)
 80011ea:	f7ff ffbd 	bl	8001168 <printShellString>
    READ_HREG( UNIQUE_INSTANCE, HREG_SYSTEM_POWER_UP_REASON, &reason );
 80011ee:	4622      	mov	r2, r4
 80011f0:	491f      	ldr	r1, [pc, #124]	; (8001270 <printStartingMessage+0xa0>)
 80011f2:	4628      	mov	r0, r5
 80011f4:	f7ff fb9a 	bl	800092c <readHreg>
    if (  reason == SYSTEM_FIRST_POWER_UP )
 80011f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011fc:	bb2b      	cbnz	r3, 800124a <printStartingMessage+0x7a>
		printShellString((int8_t*)"\nPowering up first time.", VERBOSE_GENERAL);
 80011fe:	2101      	movs	r1, #1
 8001200:	481c      	ldr	r0, [pc, #112]	; (8001274 <printStartingMessage+0xa4>)
 8001202:	f7ff ffb1 	bl	8001168 <printShellString>
    printShellString((int8_t*)"\nHW Version : ", VERBOSE_GENERAL);
 8001206:	2101      	movs	r1, #1
 8001208:	481b      	ldr	r0, [pc, #108]	; (8001278 <printStartingMessage+0xa8>)
 800120a:	f7ff ffad 	bl	8001168 <printShellString>
    printShellString((int8_t*)"\nFW Version : V.", VERBOSE_GENERAL);
 800120e:	2101      	movs	r1, #1
 8001210:	481a      	ldr	r0, [pc, #104]	; (800127c <printStartingMessage+0xac>)
 8001212:	f7ff ffa9 	bl	8001168 <printShellString>
    printShellValue(FW_MAJOR_VERSION, TYPE_DECIMAL, VERBOSE_GENERAL);
 8001216:	2201      	movs	r2, #1
 8001218:	2100      	movs	r1, #0
 800121a:	4608      	mov	r0, r1
 800121c:	f7ff ffcc 	bl	80011b8 <printShellValue>
    printShellString((int8_t*)".", VERBOSE_GENERAL);
 8001220:	2101      	movs	r1, #1
 8001222:	4817      	ldr	r0, [pc, #92]	; (8001280 <printStartingMessage+0xb0>)
 8001224:	f7ff ffa0 	bl	8001168 <printShellString>
    printShellValue(FW_MINOR_VERSION, TYPE_DECIMAL, VERBOSE_GENERAL);
 8001228:	2201      	movs	r2, #1
 800122a:	2100      	movs	r1, #0
 800122c:	4610      	mov	r0, r2
 800122e:	f7ff ffc3 	bl	80011b8 <printShellValue>
    if ( fullVersion == TRUE )
 8001232:	2e01      	cmp	r6, #1
 8001234:	d00e      	beq.n	8001254 <printStartingMessage+0x84>
    printShellString((int8_t*)"\nNVM Version : ", VERBOSE_GENERAL);
 8001236:	2101      	movs	r1, #1
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <printStartingMessage+0xb4>)
 800123a:	f7ff ff95 	bl	8001168 <printShellString>
    printShellString((int8_t*)"\n", VERBOSE_GENERAL);
 800123e:	2101      	movs	r1, #1
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <printStartingMessage+0x98>)
 8001242:	f7ff ff91 	bl	8001168 <printShellString>
}
 8001246:	b002      	add	sp, #8
 8001248:	bd70      	pop	{r4, r5, r6, pc}
		printShellString((int8_t*)"\nPowering up from reset.", VERBOSE_GENERAL);
 800124a:	2101      	movs	r1, #1
 800124c:	480e      	ldr	r0, [pc, #56]	; (8001288 <printStartingMessage+0xb8>)
 800124e:	f7ff ff8b 	bl	8001168 <printShellString>
 8001252:	e7d8      	b.n	8001206 <printStartingMessage+0x36>
    	printShellString((int8_t*)".RC", VERBOSE_GENERAL);
 8001254:	2101      	movs	r1, #1
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <printStartingMessage+0xbc>)
 8001258:	f7ff ff86 	bl	8001168 <printShellString>
    	printShellValue(FW_RC_VERSION, TYPE_DECIMAL, VERBOSE_GENERAL);
 800125c:	2201      	movs	r2, #1
 800125e:	2100      	movs	r1, #0
 8001260:	4608      	mov	r0, r1
 8001262:	f7ff ffa9 	bl	80011b8 <printShellValue>
 8001266:	e7e6      	b.n	8001236 <printStartingMessage+0x66>
 8001268:	08007ba8 	.word	0x08007ba8
 800126c:	080078d8 	.word	0x080078d8
 8001270:	0800778c 	.word	0x0800778c
 8001274:	080078e8 	.word	0x080078e8
 8001278:	08007920 	.word	0x08007920
 800127c:	08007930 	.word	0x08007930
 8001280:	08007944 	.word	0x08007944
 8001284:	0800794c 	.word	0x0800794c
 8001288:	08007904 	.word	0x08007904
 800128c:	08007948 	.word	0x08007948

08001290 <printCommonString>:
    if( index != SHELL_NO_MESSAGE)
 8001290:	2808      	cmp	r0, #8
 8001292:	d009      	beq.n	80012a8 <printCommonString+0x18>
{
 8001294:	b508      	push	{r3, lr}
        printShellString((int8_t*)shellCommonMessages[index].message, vLevel);
 8001296:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800129a:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
 800129e:	4b03      	ldr	r3, [pc, #12]	; (80012ac <printCommonString+0x1c>)
 80012a0:	4418      	add	r0, r3
 80012a2:	f7ff ff61 	bl	8001168 <printShellString>
 80012a6:	bd08      	pop	{r3, pc}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	08007970 	.word	0x08007970

080012b0 <initShellStack>:
{
 80012b0:	b510      	push	{r4, lr}
    verboseLevel = VERBOSE_GENERAL;
 80012b2:	2401      	movs	r4, #1
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <initShellStack+0x28>)
 80012b6:	701c      	strb	r4, [r3, #0]
    debugEnable = FALSE;
 80012b8:	2000      	movs	r0, #0
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <initShellStack+0x2c>)
 80012bc:	7018      	strb	r0, [r3, #0]
    shellState = SHELL_STACK_READY;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <initShellStack+0x30>)
 80012c0:	701c      	strb	r4, [r3, #0]
    printStartingMessage(FALSE);
 80012c2:	f7ff ff85 	bl	80011d0 <printStartingMessage>
    printCommonString(SHELL_COMPLETED, VERBOSE_GENERAL);
 80012c6:	4621      	mov	r1, r4
 80012c8:	2003      	movs	r0, #3
 80012ca:	f7ff ffe1 	bl	8001290 <printCommonString>
    printShellString((int8_t*)"\r\nSHELL-> \0", VERBOSE_GENERAL);
 80012ce:	4621      	mov	r1, r4
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <initShellStack+0x34>)
 80012d2:	f7ff ff49 	bl	8001168 <printShellString>
 80012d6:	bd10      	pop	{r4, pc}
 80012d8:	20000014 	.word	0x20000014
 80012dc:	20000304 	.word	0x20000304
 80012e0:	20000305 	.word	0x20000305
 80012e4:	080074d8 	.word	0x080074d8

080012e8 <parseShellStack>:
 *
 * @return  None.
 *
 ****************************************************************************/
static void parseShellStack ( void )
{
 80012e8:	b570      	push	{r4, r5, r6, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
    uint8_t  parseError = SHELL_NO_MESSAGE;
    tParsedCommand commandParsed;
    uint8_t  numberOfCommands = 1;
    uint8_t  offset[2];

    offset[0] = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f88d 3000 	strb.w	r3, [sp]
    uint8_t  numberOfCommands = 1;
 80012f2:	2501      	movs	r5, #1
    /* Check if it is a double command */
    while( command[i] != END_OF_LINE_CHARACTER )
 80012f4:	e001      	b.n	80012fa <parseShellStack+0x12>
        {
			numberOfCommands = 2;
			command[i - 1] = END_OF_LINE_CHARACTER;
			offset[1] = i + 2;
        }
        i++;
 80012f6:	3301      	adds	r3, #1
 80012f8:	b2db      	uxtb	r3, r3
    while( command[i] != END_OF_LINE_CHARACTER )
 80012fa:	4619      	mov	r1, r3
 80012fc:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <parseShellStack+0x90>)
 80012fe:	5cd2      	ldrb	r2, [r2, r3]
 8001300:	2a0d      	cmp	r2, #13
 8001302:	d00c      	beq.n	800131e <parseShellStack+0x36>
        if ( command[i] == '&' && i >= 1 )
 8001304:	2a26      	cmp	r2, #38	; 0x26
 8001306:	d1f6      	bne.n	80012f6 <parseShellStack+0xe>
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f4      	beq.n	80012f6 <parseShellStack+0xe>
			command[i - 1] = END_OF_LINE_CHARACTER;
 800130c:	3901      	subs	r1, #1
 800130e:	200d      	movs	r0, #13
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <parseShellStack+0x90>)
 8001312:	5450      	strb	r0, [r2, r1]
			offset[1] = i + 2;
 8001314:	1c9a      	adds	r2, r3, #2
 8001316:	f88d 2001 	strb.w	r2, [sp, #1]
			numberOfCommands = 2;
 800131a:	2502      	movs	r5, #2
 800131c:	e7eb      	b.n	80012f6 <parseShellStack+0xe>
 800131e:	2400      	movs	r4, #0
 8001320:	e009      	b.n	8001336 <parseShellStack+0x4e>
    {
        parseError = parseShellCommand(&command[offset[i]], &commandParsed );

        if ( parseError == SHELL_COMPLETED )
        {
            if(shellCommandsTable[commandParsed.command].run != NULL){
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <parseShellStack+0x94>)
 8001324:	9a01      	ldr	r2, [sp, #4]
 8001326:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	b1d3      	cbz	r3, 8001364 <parseShellStack+0x7c>
                shellCommandsTable[commandParsed.command].run(&commandParsed);
 800132e:	a801      	add	r0, sp, #4
 8001330:	4798      	blx	r3
        else{
            /* Error parsing the Shell command*/
			printShellString((int8_t*)"\r\n", VERBOSE_ERROR);
			printCommonString(parseError, VERBOSE_ERROR);
        }
        i++;
 8001332:	3401      	adds	r4, #1
 8001334:	b2e4      	uxtb	r4, r4
    while ( i < numberOfCommands )
 8001336:	42ac      	cmp	r4, r5
 8001338:	d218      	bcs.n	800136c <parseShellStack+0x84>
        parseError = parseShellCommand(&command[offset[i]], &commandParsed );
 800133a:	ab0e      	add	r3, sp, #56	; 0x38
 800133c:	4423      	add	r3, r4
 800133e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8001342:	a901      	add	r1, sp, #4
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <parseShellStack+0x90>)
 8001346:	4418      	add	r0, r3
 8001348:	f7ff fec0 	bl	80010cc <parseShellCommand>
 800134c:	4606      	mov	r6, r0
        if ( parseError == SHELL_COMPLETED )
 800134e:	2803      	cmp	r0, #3
 8001350:	d0e7      	beq.n	8001322 <parseShellStack+0x3a>
			printShellString((int8_t*)"\r\n", VERBOSE_ERROR);
 8001352:	2104      	movs	r1, #4
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <parseShellStack+0x98>)
 8001356:	f7ff ff07 	bl	8001168 <printShellString>
			printCommonString(parseError, VERBOSE_ERROR);
 800135a:	2104      	movs	r1, #4
 800135c:	4630      	mov	r0, r6
 800135e:	f7ff ff97 	bl	8001290 <printCommonString>
 8001362:	e7e6      	b.n	8001332 <parseShellStack+0x4a>
                runShellCommandUnknown(&commandParsed);
 8001364:	a801      	add	r0, sp, #4
 8001366:	f7ff ff1f 	bl	80011a8 <runShellCommandUnknown>
 800136a:	e7e2      	b.n	8001332 <parseShellStack+0x4a>
    }
    printShellString((int8_t*)"\r\nSHELL-> \0", VERBOSE_EVENT);
 800136c:	2102      	movs	r1, #2
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <parseShellStack+0x9c>)
 8001370:	f7ff fefa 	bl	8001168 <printShellString>
}
 8001374:	b00e      	add	sp, #56	; 0x38
 8001376:	bd70      	pop	{r4, r5, r6, pc}
 8001378:	20000284 	.word	0x20000284
 800137c:	20000018 	.word	0x20000018
 8001380:	08007b9c 	.word	0x08007b9c
 8001384:	080074d8 	.word	0x080074d8

08001388 <callShellStackTask>:
{
 8001388:	b500      	push	{lr}
 800138a:	b085      	sub	sp, #20
    uint8_t bytesCount = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	f88d 300f 	strb.w	r3, [sp, #15]
    int8_t pattern[2] = { 0x0D, 0x0A };
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <callShellStackTask+0x38>)
 8001394:	899b      	ldrh	r3, [r3, #12]
 8001396:	f8ad 300c 	strh.w	r3, [sp, #12]
    while ( pipeDeviceParseCommand( PIPE_LOG, command, SHELL_INPUT_COMMANDBUFFER, pattern, 2, &bytesCount) )
 800139a:	e001      	b.n	80013a0 <callShellStackTask+0x18>
        parseShellStack();
 800139c:	f7ff ffa4 	bl	80012e8 <parseShellStack>
    while ( pipeDeviceParseCommand( PIPE_LOG, command, SHELL_INPUT_COMMANDBUFFER, pattern, 2, &bytesCount) )
 80013a0:	f10d 030f 	add.w	r3, sp, #15
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	2302      	movs	r3, #2
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	ab03      	add	r3, sp, #12
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	4905      	ldr	r1, [pc, #20]	; (80013c4 <callShellStackTask+0x3c>)
 80013b0:	2000      	movs	r0, #0
 80013b2:	f001 fc33 	bl	8002c1c <pipeDeviceParseCommand>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d1f0      	bne.n	800139c <callShellStackTask+0x14>
}
 80013ba:	b005      	add	sp, #20
 80013bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80013c0:	080074d8 	.word	0x080074d8
 80013c4:	20000284 	.word	0x20000284

080013c8 <shellGetDebugState>:
 *
 ****************************************************************************/
BOOL shellGetDebugState( void )
{
    return debugEnable;
}
 80013c8:	4b01      	ldr	r3, [pc, #4]	; (80013d0 <shellGetDebugState+0x8>)
 80013ca:	7818      	ldrb	r0, [r3, #0]
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000304 	.word	0x20000304

080013d4 <runShellCommandHelp>:
 * @brief   Shell help command prints all the valid commands
 * @param	command Pointer to command
 * @return  None.
 ****************************************************************************/
void runShellCommandHelp(tParsedCommand* command)
{
 80013d4:	b538      	push	{r3, r4, r5, lr}
    uint8_t i;
    const tShellCommandTableEntry *sCommand;

    printShellString((int8_t*)"\r\nAVAILABLE COMMANDS\n", VERBOSE_EVENT);
 80013d6:	2102      	movs	r1, #2
 80013d8:	4811      	ldr	r0, [pc, #68]	; (8001420 <runShellCommandHelp+0x4c>)
 80013da:	f7ff fec5 	bl	8001168 <printShellString>

    for(i=0;i<shellGetNumOfCommands();i++){
 80013de:	2400      	movs	r4, #0
 80013e0:	e018      	b.n	8001414 <runShellCommandHelp+0x40>
        sCommand = &shellCommandsTable[i];
        printShellString((int8_t*)sCommand->command, VERBOSE_EVENT);
 80013e2:	4d10      	ldr	r5, [pc, #64]	; (8001424 <runShellCommandHelp+0x50>)
 80013e4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 80013e8:	2102      	movs	r1, #2
 80013ea:	4628      	mov	r0, r5
 80013ec:	f7ff febc 	bl	8001168 <printShellString>
        printShellString((int8_t*)"[", VERBOSE_EVENT);
 80013f0:	2102      	movs	r1, #2
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <runShellCommandHelp+0x54>)
 80013f4:	f7ff feb8 	bl	8001168 <printShellString>
        printShellValue(sCommand->numOfParams, TYPE_DECIMAL, VERBOSE_EVENT);
 80013f8:	2202      	movs	r2, #2
 80013fa:	2100      	movs	r1, #0
 80013fc:	7a28      	ldrb	r0, [r5, #8]
 80013fe:	f7ff fedb 	bl	80011b8 <printShellValue>
        printShellString((int8_t*)"]\n", VERBOSE_EVENT);
 8001402:	2102      	movs	r1, #2
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <runShellCommandHelp+0x58>)
 8001406:	f7ff feaf 	bl	8001168 <printShellString>
        HAL_Delay(10);
 800140a:	200a      	movs	r0, #10
 800140c:	f002 fe00 	bl	8004010 <HAL_Delay>
    for(i=0;i<shellGetNumOfCommands();i++){
 8001410:	3401      	adds	r4, #1
 8001412:	b2e4      	uxtb	r4, r4
 8001414:	f000 f8f2 	bl	80015fc <shellGetNumOfCommands>
 8001418:	4284      	cmp	r4, r0
 800141a:	d3e2      	bcc.n	80013e2 <runShellCommandHelp+0xe>
    }
}
 800141c:	bd38      	pop	{r3, r4, r5, pc}
 800141e:	bf00      	nop
 8001420:	08007aa8 	.word	0x08007aa8
 8001424:	20000018 	.word	0x20000018
 8001428:	08007ac0 	.word	0x08007ac0
 800142c:	08007ac4 	.word	0x08007ac4

08001430 <runShellCommandReadSreg>:
 * @brief   Reads an sreg and prints its value.
 * @param	command Pointer to command
 * @return  None.
 ****************************************************************************/
void runShellCommandReadSreg(tParsedCommand* command)
{
 8001430:	b510      	push	{r4, lr}
    uint16_t regIndex;

    regIndex = command->params[0].value;
 8001432:	8904      	ldrh	r4, [r0, #8]

    if( regIndex >= getNumOfSregs() ){
 8001434:	f7ff fb2b 	bl	8000a8e <getNumOfSregs>
 8001438:	b280      	uxth	r0, r0
 800143a:	4284      	cmp	r4, r0
 800143c:	d207      	bcs.n	800144e <runShellCommandReadSreg+0x1e>
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
    }
    else{
        printShellValue(readShellSreg(regIndex), TYPE_DECIMAL, VERBOSE_EVENT);
 800143e:	4620      	mov	r0, r4
 8001440:	f7ff fc25 	bl	8000c8e <readShellSreg>
 8001444:	2202      	movs	r2, #2
 8001446:	2100      	movs	r1, #0
 8001448:	f7ff feb6 	bl	80011b8 <printShellValue>
 800144c:	bd10      	pop	{r4, pc}
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
 800144e:	2104      	movs	r1, #4
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff ff1d 	bl	8001290 <printCommonString>
 8001456:	bd10      	pop	{r4, pc}

08001458 <runShellCommandReadHreg>:
 * @brief   Reads an sreg and prints its value.
 * @param	command Pointer to command
 * @return  None.
 ****************************************************************************/
void runShellCommandReadHreg(tParsedCommand* command)
{
 8001458:	b530      	push	{r4, r5, lr}
 800145a:	b083      	sub	sp, #12
    uint16_t instance, regIndex;
    uint32_t value = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	9301      	str	r3, [sp, #4]
    eError err;

    instance = command->params[0].value;
 8001460:	6885      	ldr	r5, [r0, #8]
    regIndex = command->params[1].value;
 8001462:	8a84      	ldrh	r4, [r0, #20]

    if( regIndex >= getNumOfHregs() )
 8001464:	f7ff fad8 	bl	8000a18 <getNumOfHregs>
 8001468:	b280      	uxth	r0, r0
 800146a:	4284      	cmp	r4, r0
 800146c:	d20b      	bcs.n	8001486 <runShellCommandReadHreg+0x2e>
    {
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
    }
    else
    {
        err = readShellHreg(instance, regIndex, &value);
 800146e:	aa01      	add	r2, sp, #4
 8001470:	4621      	mov	r1, r4
 8001472:	b2e8      	uxtb	r0, r5
 8001474:	f7ff faa0 	bl	80009b8 <readShellHreg>
        if(err != RET_OK)
 8001478:	b958      	cbnz	r0, 8001492 <runShellCommandReadHreg+0x3a>
        {
            printCommonString(SHELL_READ_ERROR, VERBOSE_ERROR);
        }
        else
        {
            printShellValue(value, TYPE_DECIMAL, VERBOSE_EVENT);
 800147a:	2202      	movs	r2, #2
 800147c:	2100      	movs	r1, #0
 800147e:	9801      	ldr	r0, [sp, #4]
 8001480:	f7ff fe9a 	bl	80011b8 <printShellValue>
        }
    }
}
 8001484:	e003      	b.n	800148e <runShellCommandReadHreg+0x36>
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
 8001486:	2104      	movs	r1, #4
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff ff01 	bl	8001290 <printCommonString>
}
 800148e:	b003      	add	sp, #12
 8001490:	bd30      	pop	{r4, r5, pc}
            printCommonString(SHELL_READ_ERROR, VERBOSE_ERROR);
 8001492:	2104      	movs	r1, #4
 8001494:	2007      	movs	r0, #7
 8001496:	f7ff fefb 	bl	8001290 <printCommonString>
 800149a:	e7f8      	b.n	800148e <runShellCommandReadHreg+0x36>

0800149c <runShellCommandWriteSreg>:
 * @brief       Write an sreg.
 * @param[in]	command Pointer to command
 * @return      None.
 ****************************************************************************/
void runShellCommandWriteSreg(tParsedCommand* command)
{
 800149c:	b508      	push	{r3, lr}
    uint32_t regValue;

    regIndex = command->params[0].value;
    regValue = command->params[1].value;

    if( writeShellSreg(regIndex, regValue) ){
 800149e:	6941      	ldr	r1, [r0, #20]
 80014a0:	8900      	ldrh	r0, [r0, #8]
 80014a2:	f7ff fc2b 	bl	8000cfc <writeShellSreg>
 80014a6:	b900      	cbnz	r0, 80014aa <runShellCommandWriteSreg+0xe>
 80014a8:	bd08      	pop	{r3, pc}
        printCommonString(SHELL_WRITE_ERROR, VERBOSE_ERROR);
 80014aa:	2104      	movs	r1, #4
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7ff feef 	bl	8001290 <printCommonString>
    }
}
 80014b2:	e7f9      	b.n	80014a8 <runShellCommandWriteSreg+0xc>

080014b4 <runShellCommandWriteHreg>:
 * @brief   Reads an sreg and prints its value.
 * @param	command Pointer to command
 * @return  None.
 ****************************************************************************/
void runShellCommandWriteHreg(tParsedCommand* command)
{
 80014b4:	b570      	push	{r4, r5, r6, lr}
    uint16_t instance, regIndex;
    uint32_t regValue;

    instance = command->params[0].value;
 80014b6:	6885      	ldr	r5, [r0, #8]
    regIndex = command->params[1].value;
 80014b8:	8a84      	ldrh	r4, [r0, #20]
    regValue = command->params[2].value;
 80014ba:	6a06      	ldr	r6, [r0, #32]

    if( regIndex >= getNumOfHregs() ){
 80014bc:	f7ff faac 	bl	8000a18 <getNumOfHregs>
 80014c0:	b280      	uxth	r0, r0
 80014c2:	4284      	cmp	r4, r0
 80014c4:	d206      	bcs.n	80014d4 <runShellCommandWriteHreg+0x20>
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
    }
    else{
        if( writeShellHreg( instance, regIndex, regValue ) != RET_OK ){
 80014c6:	4632      	mov	r2, r6
 80014c8:	4621      	mov	r1, r4
 80014ca:	b2e8      	uxtb	r0, r5
 80014cc:	f7ff f9fc 	bl	80008c8 <writeShellHreg>
 80014d0:	b928      	cbnz	r0, 80014de <runShellCommandWriteHreg+0x2a>
 80014d2:	bd70      	pop	{r4, r5, r6, pc}
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
 80014d4:	2104      	movs	r1, #4
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff feda 	bl	8001290 <printCommonString>
 80014dc:	bd70      	pop	{r4, r5, r6, pc}
            printCommonString(SHELL_WRITE_ERROR, VERBOSE_ERROR);
 80014de:	2104      	movs	r1, #4
 80014e0:	2001      	movs	r0, #1
 80014e2:	f7ff fed5 	bl	8001290 <printCommonString>
        }
    }
}
 80014e6:	e7f4      	b.n	80014d2 <runShellCommandWriteHreg+0x1e>

080014e8 <runShellCommandSetLogLevel>:
 * @todo        Maybe parse log level from string?
 * @param[in]	command Pointer to command
 * @return      None.
 ****************************************************************************/
void runShellCommandSetLogLevel(tParsedCommand* command)
{
 80014e8:	b508      	push	{r3, lr}
    uint32_t regValue;

    regValue = command->params[0].value;
 80014ea:	6880      	ldr	r0, [r0, #8]

    if( regValue > NUM_OF_VERBOSE_LEVELS ){
 80014ec:	2805      	cmp	r0, #5
 80014ee:	d803      	bhi.n	80014f8 <runShellCommandSetLogLevel+0x10>
        printCommonString(SHELL_INVALID_PARAMETER, VERBOSE_ERROR);
    }
    else{
        shellSetVerboseLevel(regValue);
 80014f0:	b2c0      	uxtb	r0, r0
 80014f2:	f7ff fd61 	bl	8000fb8 <shellSetVerboseLevel>
 80014f6:	bd08      	pop	{r3, pc}
        printCommonString(SHELL_INVALID_PARAMETER, VERBOSE_ERROR);
 80014f8:	2104      	movs	r1, #4
 80014fa:	2005      	movs	r0, #5
 80014fc:	f7ff fec8 	bl	8001290 <printCommonString>
 8001500:	bd08      	pop	{r3, pc}

08001502 <runShellCommandSchedulerStartTask>:
#endif

#ifdef MON_SHELL_COMMAND_SCHEDULER_TASKS

void runShellCommandSchedulerStartTask(tParsedCommand* command)
{
 8001502:	b508      	push	{r3, lr}
    if ( command->params[0].value < NUM_OF_SCHED_TASKS ){
 8001504:	6880      	ldr	r0, [r0, #8]
 8001506:	2803      	cmp	r0, #3
 8001508:	d904      	bls.n	8001514 <runShellCommandSchedulerStartTask+0x12>
    	SchedulerEnableTask(command->params[0].value);
    }
    else{
        printCommonString(SHELL_INVALID_PARAMETER, VERBOSE_ERROR);
 800150a:	2104      	movs	r1, #4
 800150c:	2005      	movs	r0, #5
 800150e:	f7ff febf 	bl	8001290 <printCommonString>
 8001512:	bd08      	pop	{r3, pc}
    	SchedulerEnableTask(command->params[0].value);
 8001514:	b240      	sxtb	r0, r0
 8001516:	f7ff fd45 	bl	8000fa4 <SchedulerEnableTask>
 800151a:	bd08      	pop	{r3, pc}

0800151c <runShellCommandSchedulerStopTask>:
    }
}

void runShellCommandSchedulerStopTask(tParsedCommand* command)
{
 800151c:	b508      	push	{r3, lr}
    if ( command->params[0].value < NUM_OF_SCHED_TASKS ){
 800151e:	6880      	ldr	r0, [r0, #8]
 8001520:	2803      	cmp	r0, #3
 8001522:	d904      	bls.n	800152e <runShellCommandSchedulerStopTask+0x12>
    	SchedulerDisableTask(command->params[0].value);
    }
    else{
        printCommonString(SHELL_INVALID_PARAMETER, VERBOSE_ERROR);
 8001524:	2104      	movs	r1, #4
 8001526:	2005      	movs	r0, #5
 8001528:	f7ff feb2 	bl	8001290 <printCommonString>
 800152c:	bd08      	pop	{r3, pc}
    	SchedulerDisableTask(command->params[0].value);
 800152e:	b240      	sxtb	r0, r0
 8001530:	f7ff fd2e 	bl	8000f90 <SchedulerDisableTask>
 8001534:	bd08      	pop	{r3, pc}

08001536 <projectExampleCommand2>:
 * @brief       Example command without behaviour
 * @param[in]	command Pointer to command
 * @return      None.
 ****************************************************************************/
void projectExampleCommand2(tParsedCommand* command)
{
 8001536:	4770      	bx	lr

08001538 <projectAtCmd>:
 * @param[2]	timeout retries
 * @param[3]	command
 * @return      None.
 ****************************************************************************/
void projectAtCmd(tParsedCommand* command)
{
 8001538:	b570      	push	{r4, r5, r6, lr}
 800153a:	b0a4      	sub	sp, #144	; 0x90
 800153c:	4604      	mov	r4, r0
	uint8_t cmd[128]={0};
 800153e:	ad04      	add	r5, sp, #16
 8001540:	2280      	movs	r2, #128	; 0x80
 8001542:	2100      	movs	r1, #0
 8001544:	4628      	mov	r0, r5
 8001546:	f005 fb82 	bl	8006c4e <memset>
	uint8_t size = command->params[3].size - 2;
 800154a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800154e:	3a02      	subs	r2, #2
	tAtRequest req;/* = {0, 0, 0, 0, cmd};*/
	req.errorRetries = 0;
 8001550:	2600      	movs	r6, #0
 8001552:	f88d 6004 	strb.w	r6, [sp, #4]
	req.timeout = command->params[1].value;
 8001556:	6963      	ldr	r3, [r4, #20]
 8001558:	f8ad 3006 	strh.w	r3, [sp, #6]
	req.timeoutRetries = command->params[2].value;
 800155c:	6a23      	ldr	r3, [r4, #32]
 800155e:	f88d 3005 	strb.w	r3, [sp, #5]
	req.mode = command->params[0].value;
 8001562:	7a23      	ldrb	r3, [r4, #8]
 8001564:	f88d 3008 	strb.w	r3, [sp, #8]
	req.command = (uint8_t *) "AT+dummy";

	memcpy(cmd, (uint8_t *)command->params[3].value, size);
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800156c:	4628      	mov	r0, r5
 800156e:	f005 fb63 	bl	8006c38 <memcpy>
	req.command = cmd;
 8001572:	9503      	str	r5, [sp, #12]
	ATCommandSetRequest(AT_CLIENT_SHELL, req);
 8001574:	ab01      	add	r3, sp, #4
 8001576:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001578:	4630      	mov	r0, r6
 800157a:	f000 fd99 	bl	80020b0 <ATCommandSetRequest>
}
 800157e:	b024      	add	sp, #144	; 0x90
 8001580:	bd70      	pop	{r4, r5, r6, pc}
	...

08001584 <ATShellCallback>:

void ATShellCallback(tAtResponseID eventID, uint8_t *buffer, uint16_t length)
{
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	460d      	mov	r5, r1
 8001588:	4616      	mov	r6, r2
	switch(eventID)
 800158a:	2804      	cmp	r0, #4
 800158c:	d808      	bhi.n	80015a0 <ATShellCallback+0x1c>
 800158e:	e8df f000 	tbb	[pc, r0]
 8001592:	1903      	.short	0x1903
 8001594:	1e14      	.short	0x1e14
 8001596:	23          	.byte	0x23
 8001597:	00          	.byte	0x00
	{
		case AT_RESP_OK:
			printShellString((int8_t *)"AT_RESP_OK:\n", VERBOSE_GENERAL);
 8001598:	2101      	movs	r1, #1
 800159a:	4812      	ldr	r0, [pc, #72]	; (80015e4 <ATShellCallback+0x60>)
 800159c:	f7ff fde4 	bl	8001168 <printShellString>
			break;
		case AT_RESP_URC:
			printShellString((int8_t *)"AT_RESP_URC:\n", VERBOSE_GENERAL);
			break;
	}
	WRITE_HREG(UART_LOG, HREG_UART_BUFFER_SIZE, length);
 80015a0:	4c11      	ldr	r4, [pc, #68]	; (80015e8 <ATShellCallback+0x64>)
 80015a2:	4632      	mov	r2, r6
 80015a4:	4621      	mov	r1, r4
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff f940 	bl	800082c <writeHreg>
	WRITE_HREG(UART_LOG, HREG_UART_DATA, buffer);
 80015ac:	462a      	mov	r2, r5
 80015ae:	f104 0114 	add.w	r1, r4, #20
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff f93a 	bl	800082c <writeHreg>
 80015b8:	bd70      	pop	{r4, r5, r6, pc}
			printShellString((int8_t *)"AT_RESP_DATA:\n", VERBOSE_GENERAL);
 80015ba:	2101      	movs	r1, #1
 80015bc:	480b      	ldr	r0, [pc, #44]	; (80015ec <ATShellCallback+0x68>)
 80015be:	f7ff fdd3 	bl	8001168 <printShellString>
			break;
 80015c2:	e7ed      	b.n	80015a0 <ATShellCallback+0x1c>
			printShellString((int8_t *)"AT_RESP_ERROR:\n", VERBOSE_GENERAL);
 80015c4:	2101      	movs	r1, #1
 80015c6:	480a      	ldr	r0, [pc, #40]	; (80015f0 <ATShellCallback+0x6c>)
 80015c8:	f7ff fdce 	bl	8001168 <printShellString>
			break;
 80015cc:	e7e8      	b.n	80015a0 <ATShellCallback+0x1c>
			printShellString((int8_t *)"AT_RESP_TIMEOUT:\n", VERBOSE_GENERAL);
 80015ce:	2101      	movs	r1, #1
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <ATShellCallback+0x70>)
 80015d2:	f7ff fdc9 	bl	8001168 <printShellString>
			break;
 80015d6:	e7e3      	b.n	80015a0 <ATShellCallback+0x1c>
			printShellString((int8_t *)"AT_RESP_URC:\n", VERBOSE_GENERAL);
 80015d8:	2101      	movs	r1, #1
 80015da:	4807      	ldr	r0, [pc, #28]	; (80015f8 <ATShellCallback+0x74>)
 80015dc:	f7ff fdc4 	bl	8001168 <printShellString>
			break;
 80015e0:	e7de      	b.n	80015a0 <ATShellCallback+0x1c>
 80015e2:	bf00      	nop
 80015e4:	08007ac8 	.word	0x08007ac8
 80015e8:	080077dc 	.word	0x080077dc
 80015ec:	08007ad8 	.word	0x08007ad8
 80015f0:	08007ae8 	.word	0x08007ae8
 80015f4:	08007af8 	.word	0x08007af8
 80015f8:	08007b0c 	.word	0x08007b0c

080015fc <shellGetNumOfCommands>:
 * @return  Total number of commands defined for this shell
 ****************************************************************************/
inline uint32_t shellGetNumOfCommands( void )
{
    return (sizeof(shellCommandsTable) / sizeof(tShellCommandTableEntry));
}
 80015fc:	200a      	movs	r0, #10
 80015fe:	4770      	bx	lr

08001600 <checkCondition>:
 * @param  instance of fsm
 * @param  index of transition
 * @return TRUE or FALSE
 ****************************************************************************/
static tBool checkCondition( tFsm * fsm,uint8_t trans)
{
 8001600:	b508      	push	{r3, lr}
	tBool value = TRUE;

	if ( fsm->listState[fsm->currentState].state->transition[trans].condition != NULL)
 8001602:	6883      	ldr	r3, [r0, #8]
 8001604:	7c82      	ldrb	r2, [r0, #18]
 8001606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800160e:	004a      	lsls	r2, r1, #1
 8001610:	4413      	add	r3, r2
 8001612:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8001616:	b113      	cbz	r3, 800161e <checkCondition+0x1e>
	{
		uint8_t numFsm = fsm->numFsm;
		value = fsm->listState[fsm->currentState].state->transition[trans].condition(numFsm);
 8001618:	7800      	ldrb	r0, [r0, #0]
 800161a:	4798      	blx	r3
 800161c:	bd08      	pop	{r3, pc}
	tBool value = TRUE;
 800161e:	2001      	movs	r0, #1
	}


	return value;
}
 8001620:	bd08      	pop	{r3, pc}
	...

08001624 <checkEvent>:
 * @return TRUE or FALSE
 ****************************************************************************/
static tBool checkEvent( uint8_t instance,uint8_t eventId)
{
	tBool value = FALSE;
	if (eventId < fsmContext[instance].fsm->numOfEvents)
 8001624:	0103      	lsls	r3, r0, #4
 8001626:	4a16      	ldr	r2, [pc, #88]	; (8001680 <checkEvent+0x5c>)
 8001628:	58d3      	ldr	r3, [r2, r3]
 800162a:	7c1a      	ldrb	r2, [r3, #16]
 800162c:	428a      	cmp	r2, r1
 800162e:	d90e      	bls.n	800164e <checkEvent+0x2a>
	{
		switch (fsmContext[instance].fsm->event[eventId].type)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8001636:	790b      	ldrb	r3, [r1, #4]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d004      	beq.n	8001646 <checkEvent+0x22>
 800163c:	b1cb      	cbz	r3, 8001672 <checkEvent+0x4e>
 800163e:	2b02      	cmp	r3, #2
 8001640:	d003      	beq.n	800164a <checkEvent+0x26>
	tBool value = FALSE;
 8001642:	2000      	movs	r0, #0
 8001644:	4770      	bx	lr
		{
			case ANY:
				value = TRUE;
				break;
			case TIMING:
				value = fsmContext[instance].fsm->event[eventId].value;
 8001646:	7b08      	ldrb	r0, [r1, #12]
				break;
 8001648:	4770      	bx	lr
			case CALLBACK:
				value = fsmContext[instance].fsm->event[eventId].value;
 800164a:	7b08      	ldrb	r0, [r1, #12]
				break;
 800164c:	4770      	bx	lr
			default:
				break;
		}
	} else if(eventId == DO_EVENT)
 800164e:	29ff      	cmp	r1, #255	; 0xff
 8001650:	d001      	beq.n	8001656 <checkEvent+0x32>
	tBool value = FALSE;
 8001652:	2000      	movs	r0, #0
 8001654:	4770      	bx	lr
	{
		if(((fsmContext[instance].timeElapsed%fsmContext[instance].loopTiming)==0) || (fsmContext[instance].timeElapsed == 1))
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <checkEvent+0x5c>)
 8001658:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800165c:	68c2      	ldr	r2, [r0, #12]
 800165e:	8901      	ldrh	r1, [r0, #8]
 8001660:	fbb2 f3f1 	udiv	r3, r2, r1
 8001664:	fb01 2313 	mls	r3, r1, r3, r2
 8001668:	b12b      	cbz	r3, 8001676 <checkEvent+0x52>
 800166a:	2a01      	cmp	r2, #1
 800166c:	d005      	beq.n	800167a <checkEvent+0x56>
	tBool value = FALSE;
 800166e:	2000      	movs	r0, #0
 8001670:	4770      	bx	lr
				value = TRUE;
 8001672:	2001      	movs	r0, #1
 8001674:	4770      	bx	lr
		{
			value = TRUE;
 8001676:	2001      	movs	r0, #1
 8001678:	4770      	bx	lr
 800167a:	2001      	movs	r0, #1
		}
	}
	return value;
}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000308 	.word	0x20000308

08001684 <checkAction>:
 * @param  instance of fsm
 * @param  index of transition
 * @return RET_OK or RET_FAIL
 ****************************************************************************/
static eError checkAction (tFsm * fsm,uint8_t trans)
{
 8001684:	b508      	push	{r3, lr}
	eError retValue = RET_OK;

	if ( fsm->listState[fsm->currentState].state->transition[trans].action != NULL)
 8001686:	6883      	ldr	r3, [r0, #8]
 8001688:	7c82      	ldrb	r2, [r0, #18]
 800168a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001692:	004a      	lsls	r2, r1, #1
 8001694:	4413      	add	r3, r2
 8001696:	f8d3 3012 	ldr.w	r3, [r3, #18]
 800169a:	b113      	cbz	r3, 80016a2 <checkAction+0x1e>
	{
		uint8_t numFsm = fsm->numFsm;
		retValue = fsm->listState[fsm->currentState].state->transition[trans].action(numFsm);
 800169c:	7800      	ldrb	r0, [r0, #0]
 800169e:	4798      	blx	r3
 80016a0:	bd08      	pop	{r3, pc}
	eError retValue = RET_OK;
 80016a2:	2000      	movs	r0, #0
	}

	return retValue;
}
 80016a4:	bd08      	pop	{r3, pc}

080016a6 <checkExitAction>:
/*****************************************************************************
 * @brief  call the action function linked to exit action of the state
 * @param  instance of fsm
 ****************************************************************************/
static void checkExitAction(tFsm * fsm)
{
 80016a6:	b508      	push	{r3, lr}
	if ( fsm->listState[fsm->currentState].state->exitAction != NULL)
 80016a8:	6883      	ldr	r3, [r0, #8]
 80016aa:	7c82      	ldrb	r2, [r0, #18]
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	b10b      	cbz	r3, 80016b8 <checkExitAction+0x12>
	{
		uint8_t numFsm = fsm->numFsm;
		fsm->listState[fsm->currentState].state->exitAction(numFsm);
 80016b4:	7800      	ldrb	r0, [r0, #0]
 80016b6:	4798      	blx	r3
 80016b8:	bd08      	pop	{r3, pc}

080016ba <checkEntryAction>:
/*****************************************************************************
 * @brief  call the action function linked to entry action of the state
 * @param  instance of fsm
 ****************************************************************************/
static void checkEntryAction(tFsm * fsm)
{
 80016ba:	b508      	push	{r3, lr}
	if ( fsm->listState[fsm->currentState].state->entryAction != NULL)
 80016bc:	6883      	ldr	r3, [r0, #8]
 80016be:	7c82      	ldrb	r2, [r0, #18]
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	b10b      	cbz	r3, 80016cc <checkEntryAction+0x12>
	{
		uint8_t numFsm = fsm->numFsm;
		fsm->listState[fsm->currentState].state->entryAction(numFsm);
 80016c8:	7800      	ldrb	r0, [r0, #0]
 80016ca:	4798      	blx	r3
 80016cc:	bd08      	pop	{r3, pc}

080016ce <clearEvents>:
 ****************************************************************************/
static void clearEvents(tFsm * fsm)
{
	uint8_t i;

	for (i=0;i<fsm->numOfEvents;i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	e006      	b.n	80016e0 <clearEvents+0x12>
	{
		fsm->event[i].value = FALSE;
 80016d2:	68c2      	ldr	r2, [r0, #12]
 80016d4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80016d8:	2100      	movs	r1, #0
 80016da:	7311      	strb	r1, [r2, #12]
	for (i=0;i<fsm->numOfEvents;i++)
 80016dc:	3301      	adds	r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	7c02      	ldrb	r2, [r0, #16]
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d3f5      	bcc.n	80016d2 <clearEvents+0x4>
	}

}
 80016e6:	4770      	bx	lr

080016e8 <clearEvent>:
 * @param  instance of fsm
 * @param  Event Id
 ****************************************************************************/
static void clearEvent(tFsm * fsm,uint8_t event_id)
{
	fsm->event[event_id].value = FALSE;
 80016e8:	68c3      	ldr	r3, [r0, #12]
 80016ea:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80016ee:	2300      	movs	r3, #0
 80016f0:	730b      	strb	r3, [r1, #12]
 80016f2:	4770      	bx	lr

080016f4 <checkTimingEvents>:
/*****************************************************************************
 * @brief  The algorithm evaluates the Time Events to check if the timeOut expired
 * @param  instance of fsm
 ****************************************************************************/
static void checkTimingEvents(uint8_t instance)
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t var;
	for (var = 0; var < fsmContext[instance].fsm->numOfEvents; ++var)
 80016f6:	2300      	movs	r3, #0
 80016f8:	e001      	b.n	80016fe <checkTimingEvents+0xa>
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	0102      	lsls	r2, r0, #4
 8001700:	4911      	ldr	r1, [pc, #68]	; (8001748 <checkTimingEvents+0x54>)
 8001702:	588a      	ldr	r2, [r1, r2]
 8001704:	7c11      	ldrb	r1, [r2, #16]
 8001706:	428b      	cmp	r3, r1
 8001708:	d21c      	bcs.n	8001744 <checkTimingEvents+0x50>
	{
		if (fsmContext[instance].fsm->event[var].type == TIMING)
 800170a:	68d2      	ldr	r2, [r2, #12]
 800170c:	0119      	lsls	r1, r3, #4
 800170e:	440a      	add	r2, r1
 8001710:	7914      	ldrb	r4, [r2, #4]
 8001712:	2c01      	cmp	r4, #1
 8001714:	d1f1      	bne.n	80016fa <checkTimingEvents+0x6>
		{
			fsmContext[instance].fsm->event[var].value = ((fsmContext[instance].timeElapsed%fsmContext[instance].fsm->event[var].timeOut)==0);
 8001716:	4f0c      	ldr	r7, [pc, #48]	; (8001748 <checkTimingEvents+0x54>)
 8001718:	0106      	lsls	r6, r0, #4
 800171a:	19bd      	adds	r5, r7, r6
 800171c:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8001720:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8001724:	fbbc f4fe 	udiv	r4, ip, lr
 8001728:	fb0e c414 	mls	r4, lr, r4, ip
 800172c:	fab4 f484 	clz	r4, r4
 8001730:	0964      	lsrs	r4, r4, #5
 8001732:	7314      	strb	r4, [r2, #12]
			fsmContext[instance].newEvent |= fsmContext[instance].fsm->event[var].value;
 8001734:	59ba      	ldr	r2, [r7, r6]
 8001736:	68d2      	ldr	r2, [r2, #12]
 8001738:	4411      	add	r1, r2
 800173a:	7b0a      	ldrb	r2, [r1, #12]
 800173c:	79a9      	ldrb	r1, [r5, #6]
 800173e:	430a      	orrs	r2, r1
 8001740:	71aa      	strb	r2, [r5, #6]
 8001742:	e7da      	b.n	80016fa <checkTimingEvents+0x6>
		}
	}

}
 8001744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001746:	bf00      	nop
 8001748:	20000308 	.word	0x20000308

0800174c <checkDestination>:
{
 800174c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001750:	b086      	sub	sp, #24
	if (stateDestination < fsmContext[instance].fsm->numOfStates)
 8001752:	0103      	lsls	r3, r0, #4
 8001754:	4c26      	ldr	r4, [pc, #152]	; (80017f0 <checkDestination+0xa4>)
 8001756:	58e3      	ldr	r3, [r4, r3]
 8001758:	7c5c      	ldrb	r4, [r3, #17]
 800175a:	428c      	cmp	r4, r1
 800175c:	d803      	bhi.n	8001766 <checkDestination+0x1a>
	tBool value = FALSE;
 800175e:	2000      	movs	r0, #0
}
 8001760:	b006      	add	sp, #24
 8001762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001766:	4616      	mov	r6, r2
 8001768:	460d      	mov	r5, r1
 800176a:	4604      	mov	r4, r0
		checkExitAction(fsmContext[instance].fsm);
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff9a 	bl	80016a6 <checkExitAction>
		fsmContext[instance].timeElapsed = 0;
 8001772:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80017f0 <checkDestination+0xa4>
 8001776:	0127      	lsls	r7, r4, #4
 8001778:	eb08 0307 	add.w	r3, r8, r7
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
		fsmContext[instance].newEvent = TRUE;
 8001780:	2201      	movs	r2, #1
 8001782:	719a      	strb	r2, [r3, #6]
		clearEvents(fsmContext[instance].fsm);
 8001784:	f858 0007 	ldr.w	r0, [r8, r7]
 8001788:	f7ff ffa1 	bl	80016ce <clearEvents>
		if ((fsmContext[instance].fsm->logEnable & FSM_TRACE) == FSM_TRACE)
 800178c:	f858 3007 	ldr.w	r3, [r8, r7]
 8001790:	7e1a      	ldrb	r2, [r3, #24]
 8001792:	f012 0f02 	tst.w	r2, #2
 8001796:	d118      	bne.n	80017ca <checkDestination+0x7e>
		fsmContext[instance].fsm->currentState = stateDestination;
 8001798:	4f15      	ldr	r7, [pc, #84]	; (80017f0 <checkDestination+0xa4>)
 800179a:	0124      	lsls	r4, r4, #4
 800179c:	593b      	ldr	r3, [r7, r4]
 800179e:	749d      	strb	r5, [r3, #18]
		my_printf((fsmContext[instance].fsm->logEnable & FSM_LOG) == FSM_LOG,VERBOSE_GENERAL, "FSM %s num : %d Transition %d change State %s.\n",fsmContext[instance].fsm->name,fsmContext[instance].fsm->numFsm,transition,fsmContext[instance].fsm->listState[stateDestination].state->StateName);
 80017a0:	593b      	ldr	r3, [r7, r4]
 80017a2:	7e18      	ldrb	r0, [r3, #24]
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	6899      	ldr	r1, [r3, #8]
 80017a8:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	6809      	ldr	r1, [r1, #0]
 80017b0:	9102      	str	r1, [sp, #8]
 80017b2:	9601      	str	r6, [sp, #4]
 80017b4:	9200      	str	r2, [sp, #0]
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <checkDestination+0xa8>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	4008      	ands	r0, r1
 80017bc:	f000 fa4f 	bl	8001c5e <my_printf>
		checkEntryAction(fsmContext[instance].fsm);
 80017c0:	5938      	ldr	r0, [r7, r4]
 80017c2:	f7ff ff7a 	bl	80016ba <checkEntryAction>
		value = TRUE;
 80017c6:	2001      	movs	r0, #1
 80017c8:	e7ca      	b.n	8001760 <checkDestination+0x14>
			BufferSetData8(buffer, 0, instance);
 80017ca:	f88d 4010 	strb.w	r4, [sp, #16]
			BufferSetData8(buffer, 1, FSM_TRACE_TRANSITION);
 80017ce:	2201      	movs	r2, #1
 80017d0:	f88d 2011 	strb.w	r2, [sp, #17]
			BufferSetData8(buffer, 2, fsmContext[instance].fsm->currentState);
 80017d4:	7c9b      	ldrb	r3, [r3, #18]
 80017d6:	f88d 3012 	strb.w	r3, [sp, #18]
			BufferSetData8(buffer, 3, transition);
 80017da:	f88d 6013 	strb.w	r6, [sp, #19]
			BufferSetData8(buffer, 4, stateDestination);
 80017de:	f88d 5014 	strb.w	r5, [sp, #20]
			my_printTraceBin(FSM_PARAMETERS*10 + PROTOCOL_DEVICE_INSTANCE,buffer,5);
 80017e2:	2205      	movs	r2, #5
 80017e4:	a904      	add	r1, sp, #16
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 fa4a 	bl	8001c80 <my_printTraceBin>
 80017ec:	e7d4      	b.n	8001798 <checkDestination+0x4c>
 80017ee:	bf00      	nop
 80017f0:	20000308 	.word	0x20000308
 80017f4:	08007b40 	.word	0x08007b40

080017f8 <executeFsm>:
{
 80017f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017fc:	4680      	mov	r8, r0
	currentState = fsmContext[instance].fsm->currentState;
 80017fe:	4607      	mov	r7, r0
 8001800:	0103      	lsls	r3, r0, #4
 8001802:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <executeFsm+0xa8>)
 8001804:	58d3      	ldr	r3, [r2, r3]
 8001806:	f893 a012 	ldrb.w	sl, [r3, #18]
	tBool changeState = FALSE;
 800180a:	f04f 0900 	mov.w	r9, #0
	uint8_t i =0,currentState;
 800180e:	464c      	mov	r4, r9
	while (i<fsmContext[instance].fsm->listState[currentState].state->numOfTransition && !changeState)
 8001810:	e00e      	b.n	8001830 <executeFsm+0x38>
					clearEvent(fsmContext[instance].fsm,fsmContext[instance].fsm->listState[currentState].state->transition[i].eventId);
 8001812:	013b      	lsls	r3, r7, #4
 8001814:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <executeFsm+0xa8>)
 8001816:	58d0      	ldr	r0, [r2, r3]
 8001818:	6883      	ldr	r3, [r0, #8]
 800181a:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800181e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8001822:	0072      	lsls	r2, r6, #1
 8001824:	4413      	add	r3, r2
 8001826:	7b59      	ldrb	r1, [r3, #13]
 8001828:	f7ff ff5e 	bl	80016e8 <clearEvent>
		i++;
 800182c:	3401      	adds	r4, #1
 800182e:	b2e4      	uxtb	r4, r4
	while (i<fsmContext[instance].fsm->listState[currentState].state->numOfTransition && !changeState)
 8001830:	013b      	lsls	r3, r7, #4
 8001832:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <executeFsm+0xa8>)
 8001834:	58d5      	ldr	r5, [r2, r3]
 8001836:	68ab      	ldr	r3, [r5, #8]
 8001838:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800183c:	7b1a      	ldrb	r2, [r3, #12]
 800183e:	4294      	cmp	r4, r2
 8001840:	d22b      	bcs.n	800189a <executeFsm+0xa2>
 8001842:	f1b9 0f00 	cmp.w	r9, #0
 8001846:	d128      	bne.n	800189a <executeFsm+0xa2>
		if (checkEvent(instance,fsmContext[instance].fsm->listState[currentState].state->transition[i].eventId))
 8001848:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800184c:	004a      	lsls	r2, r1, #1
 800184e:	4413      	add	r3, r2
 8001850:	7b59      	ldrb	r1, [r3, #13]
 8001852:	4640      	mov	r0, r8
 8001854:	f7ff fee6 	bl	8001624 <checkEvent>
 8001858:	2800      	cmp	r0, #0
 800185a:	d0e7      	beq.n	800182c <executeFsm+0x34>
			if (checkCondition(fsmContext[instance].fsm,i))
 800185c:	4621      	mov	r1, r4
 800185e:	4628      	mov	r0, r5
 8001860:	f7ff fece 	bl	8001600 <checkCondition>
 8001864:	2800      	cmp	r0, #0
 8001866:	d0e1      	beq.n	800182c <executeFsm+0x34>
				eError retAction = checkAction(fsmContext[instance].fsm,i);
 8001868:	013b      	lsls	r3, r7, #4
 800186a:	4621      	mov	r1, r4
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <executeFsm+0xa8>)
 800186e:	58d0      	ldr	r0, [r2, r3]
 8001870:	f7ff ff08 	bl	8001684 <checkAction>
				if (retAction == RET_OK)
 8001874:	2800      	cmp	r0, #0
 8001876:	d1cc      	bne.n	8001812 <executeFsm+0x1a>
					changeState = checkDestination(instance,fsmContext[instance].fsm->listState[currentState].state->transition[i].destination,i);
 8001878:	013b      	lsls	r3, r7, #4
 800187a:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <executeFsm+0xa8>)
 800187c:	58d3      	ldr	r3, [r2, r3]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8001884:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8001888:	0072      	lsls	r2, r6, #1
 800188a:	4413      	add	r3, r2
 800188c:	4622      	mov	r2, r4
 800188e:	7d99      	ldrb	r1, [r3, #22]
 8001890:	4640      	mov	r0, r8
 8001892:	f7ff ff5b 	bl	800174c <checkDestination>
 8001896:	4681      	mov	r9, r0
 8001898:	e7c8      	b.n	800182c <executeFsm+0x34>
}
 800189a:	2000      	movs	r0, #0
 800189c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018a0:	20000308 	.word	0x20000308

080018a4 <startFsm>:
{
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	b083      	sub	sp, #12
	fsmContext[instance].fsm->currentState = fsmContext[instance].fsm->initState;
 80018a8:	4d10      	ldr	r5, [pc, #64]	; (80018ec <startFsm+0x48>)
 80018aa:	0104      	lsls	r4, r0, #4
 80018ac:	192f      	adds	r7, r5, r4
 80018ae:	592b      	ldr	r3, [r5, r4]
 80018b0:	7cda      	ldrb	r2, [r3, #19]
 80018b2:	749a      	strb	r2, [r3, #18]
	fsmContext[instance].timeElapsed = 0;
 80018b4:	2600      	movs	r6, #0
 80018b6:	60fe      	str	r6, [r7, #12]
	my_printf((fsmContext[instance].fsm->logEnable & FSM_LOG) == FSM_LOG,VERBOSE_GENERAL, "FSM : %s num : %d init setToState %s.\n",fsmContext[instance].fsm->name,fsmContext[instance].fsm->numFsm,fsmContext[instance].fsm->listState[fsmContext[instance].fsm->currentState].state->StateName);
 80018b8:	592b      	ldr	r3, [r5, r4]
 80018ba:	7e18      	ldrb	r0, [r3, #24]
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	6899      	ldr	r1, [r3, #8]
 80018c0:	f893 e012 	ldrb.w	lr, [r3, #18]
 80018c4:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	6809      	ldr	r1, [r1, #0]
 80018cc:	9101      	str	r1, [sp, #4]
 80018ce:	9200      	str	r2, [sp, #0]
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <startFsm+0x4c>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	4008      	ands	r0, r1
 80018d6:	f000 f9c2 	bl	8001c5e <my_printf>
	fsmContext[instance].started = TRUE;
 80018da:	2301      	movs	r3, #1
 80018dc:	717b      	strb	r3, [r7, #5]
	checkEntryAction(fsmContext[instance].fsm);
 80018de:	5928      	ldr	r0, [r5, r4]
 80018e0:	f7ff feeb 	bl	80016ba <checkEntryAction>
}
 80018e4:	4630      	mov	r0, r6
 80018e6:	b003      	add	sp, #12
 80018e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000308 	.word	0x20000308
 80018f0:	08007b70 	.word	0x08007b70

080018f4 <initFsm>:
	for (var = 0; var < MAX_NUM_OF_FSM; ++var) {
 80018f4:	2200      	movs	r2, #0
 80018f6:	e00a      	b.n	800190e <initFsm+0x1a>
		fsmContext[var].configured = FALSE;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <initFsm+0x20>)
 80018fa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80018fe:	2100      	movs	r1, #0
 8001900:	7119      	strb	r1, [r3, #4]
		fsmContext[var].loopTiming = 0;
 8001902:	8119      	strh	r1, [r3, #8]
		fsmContext[var].newEvent = FALSE;
 8001904:	7199      	strb	r1, [r3, #6]
		fsmContext[var].started = FALSE;
 8001906:	7159      	strb	r1, [r3, #5]
		fsmContext[var].timeElapsed = 0;
 8001908:	60d9      	str	r1, [r3, #12]
	for (var = 0; var < MAX_NUM_OF_FSM; ++var) {
 800190a:	3201      	adds	r2, #1
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	2a13      	cmp	r2, #19
 8001910:	d9f2      	bls.n	80018f8 <initFsm+0x4>
}
 8001912:	4770      	bx	lr
 8001914:	20000308 	.word	0x20000308

08001918 <callFsmTask>:
{
 8001918:	b570      	push	{r4, r5, r6, lr}
	for (var = 0; var < MAX_NUM_OF_FSM; ++var)
 800191a:	2400      	movs	r4, #0
 800191c:	e009      	b.n	8001932 <callFsmTask+0x1a>
				fsmContext[var].newEvent = FALSE;
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <callFsmTask+0x64>)
 8001920:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 8001924:	2300      	movs	r3, #0
 8001926:	71ab      	strb	r3, [r5, #6]
				executeFsm(var);
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff ff65 	bl	80017f8 <executeFsm>
	for (var = 0; var < MAX_NUM_OF_FSM; ++var)
 800192e:	3401      	adds	r4, #1
 8001930:	b2e4      	uxtb	r4, r4
 8001932:	2c13      	cmp	r4, #19
 8001934:	d821      	bhi.n	800197a <callFsmTask+0x62>
		if (fsmContext[var].configured && fsmContext[var].started)
 8001936:	4625      	mov	r5, r4
 8001938:	4b10      	ldr	r3, [pc, #64]	; (800197c <callFsmTask+0x64>)
 800193a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800193e:	791b      	ldrb	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f4      	beq.n	800192e <callFsmTask+0x16>
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <callFsmTask+0x64>)
 8001946:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800194a:	795b      	ldrb	r3, [r3, #5]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ee      	beq.n	800192e <callFsmTask+0x16>
			fsmContext[var].timeElapsed ++;
 8001950:	4e0a      	ldr	r6, [pc, #40]	; (800197c <callFsmTask+0x64>)
 8001952:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8001956:	68f3      	ldr	r3, [r6, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60f3      	str	r3, [r6, #12]
			checkTimingEvents(var);
 800195c:	4620      	mov	r0, r4
 800195e:	f7ff fec9 	bl	80016f4 <checkTimingEvents>
			if ((fsmContext[var].timeElapsed%fsmContext[var].loopTiming)==0 || fsmContext[var].newEvent)
 8001962:	68f1      	ldr	r1, [r6, #12]
 8001964:	8932      	ldrh	r2, [r6, #8]
 8001966:	fbb1 f3f2 	udiv	r3, r1, r2
 800196a:	fb02 1313 	mls	r3, r2, r3, r1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0d5      	beq.n	800191e <callFsmTask+0x6>
 8001972:	79b3      	ldrb	r3, [r6, #6]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0da      	beq.n	800192e <callFsmTask+0x16>
 8001978:	e7d1      	b.n	800191e <callFsmTask+0x6>
}
 800197a:	bd70      	pop	{r4, r5, r6, pc}
 800197c:	20000308 	.word	0x20000308

08001980 <configureFsm>:
	tBool found = FALSE;
 8001980:	2200      	movs	r2, #0
	uint8_t var =0;
 8001982:	4613      	mov	r3, r2
	while (var<MAX_NUM_OF_FSM && !found)
 8001984:	e008      	b.n	8001998 <configureFsm+0x18>
		found = !fsmContext[var].configured;
 8001986:	4a11      	ldr	r2, [pc, #68]	; (80019cc <configureFsm+0x4c>)
 8001988:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800198c:	7912      	ldrb	r2, [r2, #4]
 800198e:	fab2 f282 	clz	r2, r2
 8001992:	0952      	lsrs	r2, r2, #5
		var++;
 8001994:	3301      	adds	r3, #1
 8001996:	b2db      	uxtb	r3, r3
	while (var<MAX_NUM_OF_FSM && !found)
 8001998:	2b13      	cmp	r3, #19
 800199a:	d801      	bhi.n	80019a0 <configureFsm+0x20>
 800199c:	2a00      	cmp	r2, #0
 800199e:	d0f2      	beq.n	8001986 <configureFsm+0x6>
	var--;
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b2db      	uxtb	r3, r3
	if (found)
 80019a4:	b16a      	cbz	r2, 80019c2 <configureFsm+0x42>
{
 80019a6:	b430      	push	{r4, r5}
		fsmContext[var].fsm = fsm;
 80019a8:	4d08      	ldr	r5, [pc, #32]	; (80019cc <configureFsm+0x4c>)
 80019aa:	011c      	lsls	r4, r3, #4
 80019ac:	192a      	adds	r2, r5, r4
 80019ae:	5128      	str	r0, [r5, r4]
		fsmContext[var].configured = TRUE;
 80019b0:	2001      	movs	r0, #1
 80019b2:	7110      	strb	r0, [r2, #4]
		fsmContext[var].loopTiming = loopTiming;
 80019b4:	8111      	strh	r1, [r2, #8]
		ret = RET_OK;
 80019b6:	2200      	movs	r2, #0
	if (ret!=RET_OK)
 80019b8:	b102      	cbz	r2, 80019bc <configureFsm+0x3c>
		var = 255;
 80019ba:	23ff      	movs	r3, #255	; 0xff
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bc30      	pop	{r4, r5}
 80019c0:	4770      	bx	lr
	eError ret = RET_FAIL;
 80019c2:	2201      	movs	r2, #1
	if (ret!=RET_OK)
 80019c4:	b102      	cbz	r2, 80019c8 <configureFsm+0x48>
		var = 255;
 80019c6:	23ff      	movs	r3, #255	; 0xff
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	4770      	bx	lr
 80019cc:	20000308 	.word	0x20000308

080019d0 <resetFsm>:
	if (fsmContext[instance].configured)
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <resetFsm+0x24>)
 80019d2:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80019d6:	791b      	ldrb	r3, [r3, #4]
 80019d8:	b90b      	cbnz	r3, 80019de <resetFsm+0xe>
	eError ret = RET_FAIL;
 80019da:	2001      	movs	r0, #1
 80019dc:	4770      	bx	lr
{
 80019de:	b510      	push	{r4, lr}
 80019e0:	4604      	mov	r4, r0
		clearEvents(fsmContext[instance].fsm);
 80019e2:	0103      	lsls	r3, r0, #4
 80019e4:	4a03      	ldr	r2, [pc, #12]	; (80019f4 <resetFsm+0x24>)
 80019e6:	58d0      	ldr	r0, [r2, r3]
 80019e8:	f7ff fe71 	bl	80016ce <clearEvents>
		ret = startFsm(instance);
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7ff ff59 	bl	80018a4 <startFsm>
 80019f2:	bd10      	pop	{r4, pc}
 80019f4:	20000308 	.word	0x20000308

080019f8 <announceFsmEvent>:
	if (fsmContext[instance].configured && fsmContext[instance].started && fsmContext[instance].fsm->event[eventId].type==CALLBACK)
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <announceFsmEvent+0x9c>)
 80019fa:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80019fe:	791b      	ldrb	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d043      	beq.n	8001a8c <announceFsmEvent+0x94>
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <announceFsmEvent+0x9c>)
 8001a06:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8001a0a:	795b      	ldrb	r3, [r3, #5]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d03f      	beq.n	8001a90 <announceFsmEvent+0x98>
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	b085      	sub	sp, #20
	if (fsmContext[instance].configured && fsmContext[instance].started && fsmContext[instance].fsm->event[eventId].type==CALLBACK)
 8001a14:	0103      	lsls	r3, r0, #4
 8001a16:	4a1f      	ldr	r2, [pc, #124]	; (8001a94 <announceFsmEvent+0x9c>)
 8001a18:	58d3      	ldr	r3, [r2, r3]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	010a      	lsls	r2, r1, #4
 8001a1e:	4413      	add	r3, r2
 8001a20:	791c      	ldrb	r4, [r3, #4]
 8001a22:	2c02      	cmp	r4, #2
 8001a24:	d002      	beq.n	8001a2c <announceFsmEvent+0x34>
	eError retValue = RET_FAIL;
 8001a26:	2001      	movs	r0, #1
}
 8001a28:	b005      	add	sp, #20
 8001a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2c:	460e      	mov	r6, r1
 8001a2e:	4607      	mov	r7, r0
		fsmContext[instance].fsm->event[eventId].value = TRUE;
 8001a30:	2101      	movs	r1, #1
 8001a32:	7319      	strb	r1, [r3, #12]
		fsmContext[instance].newEvent = TRUE;
 8001a34:	4d17      	ldr	r5, [pc, #92]	; (8001a94 <announceFsmEvent+0x9c>)
 8001a36:	0104      	lsls	r4, r0, #4
 8001a38:	192b      	adds	r3, r5, r4
 8001a3a:	7199      	strb	r1, [r3, #6]
		my_printf((fsmContext[instance].fsm->logEnable & FSM_LOG) == FSM_LOG,VERBOSE_GENERAL, "FSM %s num : %d announce event %s.\n",fsmContext[instance].fsm->name,fsmContext[instance].fsm->numFsm,fsmContext[instance].fsm->event[eventId].EventName);
 8001a3c:	592b      	ldr	r3, [r5, r4]
 8001a3e:	7e18      	ldrb	r0, [r3, #24]
 8001a40:	f893 e000 	ldrb.w	lr, [r3]
 8001a44:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f85c 2002 	ldr.w	r2, [ip, r2]
 8001a4e:	9201      	str	r2, [sp, #4]
 8001a50:	f8cd e000 	str.w	lr, [sp]
 8001a54:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <announceFsmEvent+0xa0>)
 8001a56:	4008      	ands	r0, r1
 8001a58:	f000 f901 	bl	8001c5e <my_printf>
		if ((fsmContext[instance].fsm->logEnable & FSM_TRACE) == FSM_TRACE)
 8001a5c:	592b      	ldr	r3, [r5, r4]
 8001a5e:	7e1a      	ldrb	r2, [r3, #24]
 8001a60:	f012 0f02 	tst.w	r2, #2
 8001a64:	d101      	bne.n	8001a6a <announceFsmEvent+0x72>
		retValue = RET_OK;
 8001a66:	2000      	movs	r0, #0
 8001a68:	e7de      	b.n	8001a28 <announceFsmEvent+0x30>
			BufferSetData8(buffer, 0, instance);
 8001a6a:	f88d 700c 	strb.w	r7, [sp, #12]
			BufferSetData8(buffer, 1, FSM_TRACE_EVENT);
 8001a6e:	2400      	movs	r4, #0
 8001a70:	f88d 400d 	strb.w	r4, [sp, #13]
			BufferSetData8(buffer, 2, fsmContext[instance].fsm->currentState);
 8001a74:	7c9b      	ldrb	r3, [r3, #18]
 8001a76:	f88d 300e 	strb.w	r3, [sp, #14]
			BufferSetData8(buffer, 3, eventId);
 8001a7a:	f88d 600f 	strb.w	r6, [sp, #15]
			my_printTraceBin(FSM_PARAMETERS*10 + PROTOCOL_DEVICE_INSTANCE,buffer,4);
 8001a7e:	2204      	movs	r2, #4
 8001a80:	a903      	add	r1, sp, #12
 8001a82:	4620      	mov	r0, r4
 8001a84:	f000 f8fc 	bl	8001c80 <my_printTraceBin>
		retValue = RET_OK;
 8001a88:	4620      	mov	r0, r4
 8001a8a:	e7cd      	b.n	8001a28 <announceFsmEvent+0x30>
	eError retValue = RET_FAIL;
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	4770      	bx	lr
 8001a90:	2001      	movs	r0, #1
 8001a92:	4770      	bx	lr
 8001a94:	20000308 	.word	0x20000308
 8001a98:	08007b1c 	.word	0x08007b1c

08001a9c <setLogFsm>:
	if (fsmContext[instance].configured)
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <setLogFsm+0x1c>)
 8001a9e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8001aa2:	791b      	ldrb	r3, [r3, #4]
 8001aa4:	b12b      	cbz	r3, 8001ab2 <setLogFsm+0x16>
		fsmContext[instance].fsm->logEnable = value;
 8001aa6:	0100      	lsls	r0, r0, #4
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <setLogFsm+0x1c>)
 8001aaa:	581b      	ldr	r3, [r3, r0]
 8001aac:	7619      	strb	r1, [r3, #24]
		ret = RET_OK;
 8001aae:	2000      	movs	r0, #0
 8001ab0:	4770      	bx	lr
	eError ret = RET_FAIL;
 8001ab2:	2001      	movs	r0, #1
}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000308 	.word	0x20000308

08001abc <CreateQueue>:
 * @return  None.
 *
 ****************************************************************************/
void CreateQueue(tCircularBuffer* buffer, uint8_t* bufferPtr, uint16_t size)
{
	buffer->bufferPtr = bufferPtr;
 8001abc:	6081      	str	r1, [r0, #8]
	buffer->bufferLen = size;
 8001abe:	80c2      	strh	r2, [r0, #6]
	buffer->readPtr = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	8043      	strh	r3, [r0, #2]
	buffer->writePtr = 0;
 8001ac4:	8083      	strh	r3, [r0, #4]
    buffer->numOfBytes = 0;
 8001ac6:	8003      	strh	r3, [r0, #0]
 8001ac8:	4770      	bx	lr

08001aca <AddQueueByte>:
 *
 * @return  None.
 *
 ****************************************************************************/
void AddQueueByte(tCircularBuffer* buffer, uint8_t data)
{
 8001aca:	b538      	push	{r3, r4, r5, lr}
 8001acc:	4604      	mov	r4, r0
 8001ace:	460d      	mov	r5, r1
	interruptsDisable();
 8001ad0:	f001 fc3c 	bl	800334c <interruptsDisable>
    buffer->bufferPtr[buffer->writePtr]= data;
 8001ad4:	68a2      	ldr	r2, [r4, #8]
 8001ad6:	88a3      	ldrh	r3, [r4, #4]
 8001ad8:	54d5      	strb	r5, [r2, r3]
    buffer->numOfBytes++;
 8001ada:	8823      	ldrh	r3, [r4, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	8023      	strh	r3, [r4, #0]
    buffer->writePtr++;
 8001ae0:	88a3      	ldrh	r3, [r4, #4]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b29b      	uxth	r3, r3
    buffer->writePtr %= buffer->bufferLen;
 8001ae6:	88e1      	ldrh	r1, [r4, #6]
 8001ae8:	fbb3 f2f1 	udiv	r2, r3, r1
 8001aec:	fb01 3312 	mls	r3, r1, r2, r3
 8001af0:	80a3      	strh	r3, [r4, #4]
	interruptsEnable();
 8001af2:	f001 fc17 	bl	8003324 <interruptsEnable>
 8001af6:	bd38      	pop	{r3, r4, r5, pc}

08001af8 <GetQueueByte>:
 *
 * @return  Next byte into queue
 *
 ****************************************************************************/
uint8_t GetQueueByte(tCircularBuffer* buffer)
{
 8001af8:	b538      	push	{r3, r4, r5, lr}
 8001afa:	4604      	mov	r4, r0
    uint8_t result;
	interruptsDisable();
 8001afc:	f001 fc26 	bl	800334c <interruptsDisable>
    result = buffer->bufferPtr[buffer->readPtr];
 8001b00:	68a2      	ldr	r2, [r4, #8]
 8001b02:	8863      	ldrh	r3, [r4, #2]
 8001b04:	5cd5      	ldrb	r5, [r2, r3]
    buffer->numOfBytes--;
 8001b06:	8822      	ldrh	r2, [r4, #0]
 8001b08:	3a01      	subs	r2, #1
 8001b0a:	8022      	strh	r2, [r4, #0]
    buffer->readPtr++;
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	b29b      	uxth	r3, r3
    buffer->readPtr %= buffer->bufferLen;
 8001b10:	88e1      	ldrh	r1, [r4, #6]
 8001b12:	fbb3 f2f1 	udiv	r2, r3, r1
 8001b16:	fb01 3312 	mls	r3, r1, r2, r3
 8001b1a:	8063      	strh	r3, [r4, #2]
    interruptsEnable();
 8001b1c:	f001 fc02 	bl	8003324 <interruptsEnable>
    return result;
}
 8001b20:	4628      	mov	r0, r5
 8001b22:	bd38      	pop	{r3, r4, r5, pc}

08001b24 <GetQueuePendingBytes>:
 *
 ****************************************************************************/
uint16_t GetQueuePendingBytes(tCircularBuffer* buffer)
{
    return buffer->numOfBytes;
}
 8001b24:	8800      	ldrh	r0, [r0, #0]
 8001b26:	4770      	bx	lr

08001b28 <GetQueueFreeBytes>:
 * @return  Free spaces in queue
 *
 ****************************************************************************/
uint16_t GetQueueFreeBytes(tCircularBuffer* buffer)
{
    return (buffer->bufferLen-buffer->numOfBytes);
 8001b28:	88c3      	ldrh	r3, [r0, #6]
 8001b2a:	8800      	ldrh	r0, [r0, #0]
 8001b2c:	1a18      	subs	r0, r3, r0
}
 8001b2e:	b280      	uxth	r0, r0
 8001b30:	4770      	bx	lr

08001b32 <vprint>:
/****************************************************************************
 *  PRIVATE FUNCTIONS
 ***************************************************************************/

static void vprint(eVerboseLevels level,const char *fmt, va_list argp)
{
 8001b32:	b500      	push	{lr}
 8001b34:	b0ff      	sub	sp, #508	; 0x1fc
    char string[500];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8001b36:	a801      	add	r0, sp, #4
 8001b38:	f005 f8bc 	bl	8006cb4 <vsiprintf>
    {
    	//printShellString((int8_t*)string,level);
    }
}
 8001b3c:	b07f      	add	sp, #508	; 0x1fc
 8001b3e:	f85d fb04 	ldr.w	pc, [sp], #4

08001b42 <dtoh>:
{
 8001b42:	b430      	push	{r4, r5}
 8001b44:	4604      	mov	r4, r0
    uint8_t i, index = 0;
 8001b46:	2000      	movs	r0, #0
	for(i=length; i>0; i--)
 8001b48:	e005      	b.n	8001b56 <dtoh+0x14>
			out[index++] = nibbleData - 10 + 'A';
 8001b4a:	1c45      	adds	r5, r0, #1
 8001b4c:	3337      	adds	r3, #55	; 0x37
 8001b4e:	540b      	strb	r3, [r1, r0]
 8001b50:	b2e8      	uxtb	r0, r5
	for(i=length; i>0; i--)
 8001b52:	3a01      	subs	r2, #1
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	b162      	cbz	r2, 8001b72 <dtoh+0x30>
		nibbleData = MON_GET_NIBBLE(in, i-1);
 8001b58:	1e53      	subs	r3, r2, #1
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	fa44 f303 	asr.w	r3, r4, r3
 8001b60:	f003 030f 	and.w	r3, r3, #15
		if (nibbleData < 10)
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d8f0      	bhi.n	8001b4a <dtoh+0x8>
			out[index++] = nibbleData + '0';
 8001b68:	1c45      	adds	r5, r0, #1
 8001b6a:	3330      	adds	r3, #48	; 0x30
 8001b6c:	540b      	strb	r3, [r1, r0]
 8001b6e:	b2e8      	uxtb	r0, r5
 8001b70:	e7ef      	b.n	8001b52 <dtoh+0x10>
}
 8001b72:	bc30      	pop	{r4, r5}
 8001b74:	4770      	bx	lr
	...

08001b78 <itos>:
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	b085      	sub	sp, #20
    if(sign < 0)
 8001b7c:	f1b0 0e00 	subs.w	lr, r0, #0
 8001b80:	db0d      	blt.n	8001b9e <itos+0x26>
 8001b82:	4670      	mov	r0, lr
	switch(type)
 8001b84:	b171      	cbz	r1, 8001ba4 <itos+0x2c>
 8001b86:	2901      	cmp	r1, #1
 8001b88:	d107      	bne.n	8001b9a <itos+0x22>
 8001b8a:	4614      	mov	r4, r2
							j = dtoh(value, buffer, 8);
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	4621      	mov	r1, r4
 8001b90:	f7ff ffd7 	bl	8001b42 <dtoh>
 8001b94:	b240      	sxtb	r0, r0
							buffer[j] = '\0';
 8001b96:	2300      	movs	r3, #0
 8001b98:	5423      	strb	r3, [r4, r0]
}
 8001b9a:	b005      	add	sp, #20
 8001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        value= -value;
 8001b9e:	f1ce 0000 	rsb	r0, lr, #0
 8001ba2:	e7ef      	b.n	8001b84 <itos+0xc>
	switch(type)
 8001ba4:	2500      	movs	r5, #0
								str[i++] = value % 10 + '0';
 8001ba6:	b2ef      	uxtb	r7, r5
 8001ba8:	1c7c      	adds	r4, r7, #1
 8001baa:	b264      	sxtb	r4, r4
 8001bac:	4918      	ldr	r1, [pc, #96]	; (8001c10 <itos+0x98>)
 8001bae:	fb81 3100 	smull	r3, r1, r1, r0
 8001bb2:	17c3      	asrs	r3, r0, #31
 8001bb4:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001bbe:	005e      	lsls	r6, r3, #1
 8001bc0:	1b83      	subs	r3, r0, r6
 8001bc2:	3330      	adds	r3, #48	; 0x30
 8001bc4:	a804      	add	r0, sp, #16
 8001bc6:	4405      	add	r5, r0
 8001bc8:	f805 3c0c 	strb.w	r3, [r5, #-12]
							} while ((value /= 10) > 0);
 8001bcc:	4608      	mov	r0, r1
								str[i++] = value % 10 + '0';
 8001bce:	4625      	mov	r5, r4
							} while ((value /= 10) > 0);
 8001bd0:	2900      	cmp	r1, #0
 8001bd2:	dce8      	bgt.n	8001ba6 <itos+0x2e>
							if (sign < 0)
 8001bd4:	f1be 0f00 	cmp.w	lr, #0
 8001bd8:	db03      	blt.n	8001be2 <itos+0x6a>
							for(i--,j=0;i>=0;i--,j++)
 8001bda:	1e63      	subs	r3, r4, #1
 8001bdc:	b25b      	sxtb	r3, r3
 8001bde:	2000      	movs	r0, #0
 8001be0:	e010      	b.n	8001c04 <itos+0x8c>
								str[i++] = '-';
 8001be2:	3702      	adds	r7, #2
 8001be4:	ab04      	add	r3, sp, #16
 8001be6:	441c      	add	r4, r3
 8001be8:	232d      	movs	r3, #45	; 0x2d
 8001bea:	f804 3c0c 	strb.w	r3, [r4, #-12]
 8001bee:	b27c      	sxtb	r4, r7
 8001bf0:	e7f3      	b.n	8001bda <itos+0x62>
								buffer[j] = str[i];
 8001bf2:	a904      	add	r1, sp, #16
 8001bf4:	4419      	add	r1, r3
 8001bf6:	f911 1c0c 	ldrsb.w	r1, [r1, #-12]
 8001bfa:	5411      	strb	r1, [r2, r0]
							for(i--,j=0;i>=0;i--,j++)
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	3001      	adds	r0, #1
 8001c02:	b240      	sxtb	r0, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	daf4      	bge.n	8001bf2 <itos+0x7a>
							buffer[j]  = '\0';
 8001c08:	2300      	movs	r3, #0
 8001c0a:	5413      	strb	r3, [r2, r0]
}
 8001c0c:	e7c5      	b.n	8001b9a <itos+0x22>
 8001c0e:	bf00      	nop
 8001c10:	66666667 	.word	0x66666667

08001c14 <_atoi>:
    *result = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	600b      	str	r3, [r1, #0]
    while(*length > 0)
 8001c18:	7813      	ldrb	r3, [r2, #0]
 8001c1a:	b1fb      	cbz	r3, 8001c5c <_atoi+0x48>
        if ((*pointer >= '0') && (*pointer <= '9'))
 8001c1c:	f990 3000 	ldrsb.w	r3, [r0]
 8001c20:	3b30      	subs	r3, #48	; 0x30
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b09      	cmp	r3, #9
 8001c26:	d818      	bhi.n	8001c5a <_atoi+0x46>
{
 8001c28:	b430      	push	{r4, r5}
 8001c2a:	e005      	b.n	8001c38 <_atoi+0x24>
        if ((*pointer >= '0') && (*pointer <= '9'))
 8001c2c:	f990 3000 	ldrsb.w	r3, [r0]
 8001c30:	3b30      	subs	r3, #48	; 0x30
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b09      	cmp	r3, #9
 8001c36:	d80f      	bhi.n	8001c58 <_atoi+0x44>
            *result *= 10;
 8001c38:	680c      	ldr	r4, [r1, #0]
 8001c3a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001c3e:	0065      	lsls	r5, r4, #1
 8001c40:	600d      	str	r5, [r1, #0]
            *result += *pointer - '0';
 8001c42:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8001c46:	442b      	add	r3, r5
 8001c48:	3b30      	subs	r3, #48	; 0x30
 8001c4a:	600b      	str	r3, [r1, #0]
            (*length)--;
 8001c4c:	7813      	ldrb	r3, [r2, #0]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	7013      	strb	r3, [r2, #0]
    while(*length > 0)
 8001c52:	7813      	ldrb	r3, [r2, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e9      	bne.n	8001c2c <_atoi+0x18>
}
 8001c58:	bc30      	pop	{r4, r5}
 8001c5a:	4770      	bx	lr
 8001c5c:	4770      	bx	lr

08001c5e <my_printf>:
	if ((enable) || (level != VERBOSE_GENERAL))
 8001c5e:	b908      	cbnz	r0, 8001c64 <my_printf+0x6>
 8001c60:	2901      	cmp	r1, #1
 8001c62:	d00c      	beq.n	8001c7e <my_printf+0x20>
{
 8001c64:	b40c      	push	{r2, r3}
 8001c66:	b500      	push	{lr}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	4608      	mov	r0, r1
		va_start(argp, fmt);
 8001c6c:	aa05      	add	r2, sp, #20
 8001c6e:	9201      	str	r2, [sp, #4]
		vprint(level, fmt, argp);
 8001c70:	9904      	ldr	r1, [sp, #16]
 8001c72:	f7ff ff5e 	bl	8001b32 <vprint>
}
 8001c76:	b003      	add	sp, #12
 8001c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c7c:	b002      	add	sp, #8
 8001c7e:	4770      	bx	lr

08001c80 <my_printTraceBin>:
{
 8001c80:	4770      	bx	lr
	...

08001c84 <AtTimeoutCallback>:

	return ret;
}

tBool AtTimeoutCallback(tSwTimerIndex SwTimerIndex)
{
 8001c84:	b508      	push	{r3, lr}
	if(isRequestInProgress)
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <AtTimeoutCallback+0x18>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b90b      	cbnz	r3, 8001c90 <AtTimeoutCallback+0xc>
	{
		announceFsmEvent(indexfsmATCmd, AT_RESP_TIMEOUT_EVENT);
	}

	return FALSE;
}
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	bd08      	pop	{r3, pc}
		announceFsmEvent(indexfsmATCmd, AT_RESP_TIMEOUT_EVENT);
 8001c90:	2101      	movs	r1, #1
 8001c92:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <AtTimeoutCallback+0x1c>)
 8001c94:	7818      	ldrb	r0, [r3, #0]
 8001c96:	f7ff feaf 	bl	80019f8 <announceFsmEvent>
 8001c9a:	e7f7      	b.n	8001c8c <AtTimeoutCallback+0x8>
 8001c9c:	20000481 	.word	0x20000481
 8001ca0:	20000480 	.word	0x20000480

08001ca4 <ATCommandParse>:
{
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	commandSize = strlen(ATActualRequest.command);
 8001ca6:	4d2b      	ldr	r5, [pc, #172]	; (8001d54 <ATCommandParse+0xb0>)
 8001ca8:	68ae      	ldr	r6, [r5, #8]
 8001caa:	4630      	mov	r0, r6
 8001cac:	f7fe fa98 	bl	80001e0 <strlen>
 8001cb0:	b284      	uxth	r4, r0
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <ATCommandParse+0xb4>)
 8001cb4:	801c      	strh	r4, [r3, #0]
	if(ATActualRequest.mode == AT_REQ_CMD)
 8001cb6:	792b      	ldrb	r3, [r5, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d135      	bne.n	8001d28 <ATCommandParse+0x84>
		if((ATActualRequest.command[0] == 'A') && (ATActualRequest.command[1] == 'T'))
 8001cbc:	7833      	ldrb	r3, [r6, #0]
 8001cbe:	2b41      	cmp	r3, #65	; 0x41
 8001cc0:	d001      	beq.n	8001cc6 <ATCommandParse+0x22>
	eError ret = RET_INVALID_COMMAND;
 8001cc2:	2504      	movs	r5, #4
 8001cc4:	e033      	b.n	8001d2e <ATCommandParse+0x8a>
		if((ATActualRequest.command[0] == 'A') && (ATActualRequest.command[1] == 'T'))
 8001cc6:	7873      	ldrb	r3, [r6, #1]
 8001cc8:	2b54      	cmp	r3, #84	; 0x54
 8001cca:	d001      	beq.n	8001cd0 <ATCommandParse+0x2c>
	eError ret = RET_INVALID_COMMAND;
 8001ccc:	2504      	movs	r5, #4
 8001cce:	e02e      	b.n	8001d2e <ATCommandParse+0x8a>
			if((commandSize+2) <= AT_CMD_BUFFER_SIZE)
 8001cd0:	1ca3      	adds	r3, r4, #2
 8001cd2:	2bff      	cmp	r3, #255	; 0xff
 8001cd4:	dd01      	ble.n	8001cda <ATCommandParse+0x36>
	eError ret = RET_INVALID_COMMAND;
 8001cd6:	2504      	movs	r5, #4
 8001cd8:	e029      	b.n	8001d2e <ATCommandParse+0x8a>
				memset(commandHeader, 0, 15);
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <ATCommandParse+0xb8>)
 8001cdc:	2100      	movs	r1, #0
 8001cde:	6019      	str	r1, [r3, #0]
 8001ce0:	6059      	str	r1, [r3, #4]
 8001ce2:	6099      	str	r1, [r3, #8]
 8001ce4:	f8c3 100b 	str.w	r1, [r3, #11]
				for(i=2; i<commandSize; i++)
 8001ce8:	2302      	movs	r3, #2
	uint8_t headerSize = 0;
 8001cea:	460a      	mov	r2, r1
				for(i=2; i<commandSize; i++)
 8001cec:	e002      	b.n	8001cf4 <ATCommandParse+0x50>
					else if(initOffset)
 8001cee:	b9a9      	cbnz	r1, 8001d1c <ATCommandParse+0x78>
				for(i=2; i<commandSize; i++)
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	b298      	uxth	r0, r3
 8001cf6:	4284      	cmp	r4, r0
 8001cf8:	d910      	bls.n	8001d1c <ATCommandParse+0x78>
					if((ATActualRequest.command[i]!='+') && (ATActualRequest.command[i]!='#') && (ATActualRequest.command[i]!=0)
 8001cfa:	5cf0      	ldrb	r0, [r6, r3]
 8001cfc:	282b      	cmp	r0, #43	; 0x2b
 8001cfe:	d0f6      	beq.n	8001cee <ATCommandParse+0x4a>
 8001d00:	2823      	cmp	r0, #35	; 0x23
 8001d02:	d0f4      	beq.n	8001cee <ATCommandParse+0x4a>
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d0f2      	beq.n	8001cee <ATCommandParse+0x4a>
						&& (ATActualRequest.command[i]!='=') && (ATActualRequest.command[i]!='?'))
 8001d08:	283d      	cmp	r0, #61	; 0x3d
 8001d0a:	d0f0      	beq.n	8001cee <ATCommandParse+0x4a>
 8001d0c:	283f      	cmp	r0, #63	; 0x3f
 8001d0e:	d0ee      	beq.n	8001cee <ATCommandParse+0x4a>
						headerSize++;
 8001d10:	3201      	adds	r2, #1
 8001d12:	b2d2      	uxtb	r2, r2
						if(!initOffset)
 8001d14:	2900      	cmp	r1, #0
 8001d16:	d1eb      	bne.n	8001cf0 <ATCommandParse+0x4c>
							initOffset = i;
 8001d18:	4619      	mov	r1, r3
 8001d1a:	e7e9      	b.n	8001cf0 <ATCommandParse+0x4c>
				memcpy(commandHeader, &ATActualRequest.command[initOffset], headerSize);
 8001d1c:	4431      	add	r1, r6
 8001d1e:	480f      	ldr	r0, [pc, #60]	; (8001d5c <ATCommandParse+0xb8>)
 8001d20:	f004 ff8a 	bl	8006c38 <memcpy>
				ret = RET_OK;
 8001d24:	2500      	movs	r5, #0
 8001d26:	e002      	b.n	8001d2e <ATCommandParse+0x8a>
	else if(ATActualRequest.mode == AT_REQ_TEXT)
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d003      	beq.n	8001d34 <ATCommandParse+0x90>
	eError ret = RET_INVALID_COMMAND;
 8001d2c:	2504      	movs	r5, #4
	if(ret == RET_OK)
 8001d2e:	b11d      	cbz	r5, 8001d38 <ATCommandParse+0x94>
}
 8001d30:	4628      	mov	r0, r5
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = RET_OK;
 8001d34:	2500      	movs	r5, #0
 8001d36:	e7fa      	b.n	8001d2e <ATCommandParse+0x8a>
		memcpy(actualCommand, ATActualRequest.command, commandSize);
 8001d38:	4f09      	ldr	r7, [pc, #36]	; (8001d60 <ATCommandParse+0xbc>)
 8001d3a:	4622      	mov	r2, r4
 8001d3c:	4631      	mov	r1, r6
 8001d3e:	4638      	mov	r0, r7
 8001d40:	f004 ff7a 	bl	8006c38 <memcpy>
		memcpy(&actualCommand[commandSize], "\r\n", 2);
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <ATCommandParse+0xc0>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	53e3      	strh	r3, [r4, r7]
		commandSize += 2;
 8001d4a:	3402      	adds	r4, #2
 8001d4c:	4b02      	ldr	r3, [pc, #8]	; (8001d58 <ATCommandParse+0xb4>)
 8001d4e:	801c      	strh	r4, [r3, #0]
 8001d50:	e7ee      	b.n	8001d30 <ATCommandParse+0x8c>
 8001d52:	bf00      	nop
 8001d54:	20000448 	.word	0x20000448
 8001d58:	200007b4 	.word	0x200007b4
 8001d5c:	20000454 	.word	0x20000454
 8001d60:	200006b4 	.word	0x200006b4
 8001d64:	08007b9c 	.word	0x08007b9c

08001d68 <AtProcessResponse>:
{
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	460e      	mov	r6, r1
	if(ATClient[client].pipe == ATClient[ATActualClient].pipe)
 8001d6c:	4605      	mov	r5, r0
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <AtProcessResponse+0xa0>)
 8001d70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001d74:	0082      	lsls	r2, r0, #2
 8001d76:	441a      	add	r2, r3
 8001d78:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8001d7c:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <AtProcessResponse+0xa4>)
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8001d84:	00a1      	lsls	r1, r4, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d8c:	4298      	cmp	r0, r3
 8001d8e:	d001      	beq.n	8001d94 <AtProcessResponse+0x2c>
 8001d90:	2400      	movs	r4, #0
 8001d92:	e014      	b.n	8001dbe <AtProcessResponse+0x56>
		if(isRequestInProgress)
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <AtProcessResponse+0xa8>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b933      	cbnz	r3, 8001da8 <AtProcessResponse+0x40>
	announceFsmEvent(indexfsmATCmd, AT_RESPONSE_REC_EVENT);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <AtProcessResponse+0xac>)
 8001d9e:	7818      	ldrb	r0, [r3, #0]
 8001da0:	f7ff fe2a 	bl	80019f8 <announceFsmEvent>
}
 8001da4:	2000      	movs	r0, #0
 8001da6:	bd70      	pop	{r4, r5, r6, pc}
			ATClient[ATActualClient].callback(event, AtRxBuffer, AtRxBufferBytes);
 8001da8:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <AtProcessResponse+0xa0>)
 8001daa:	440b      	add	r3, r1
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <AtProcessResponse+0xb0>)
 8001db0:	7812      	ldrb	r2, [r2, #0]
 8001db2:	491a      	ldr	r1, [pc, #104]	; (8001e1c <AtProcessResponse+0xb4>)
 8001db4:	4630      	mov	r0, r6
 8001db6:	4798      	blx	r3
 8001db8:	e7ef      	b.n	8001d9a <AtProcessResponse+0x32>
		for(clientPipe=0; clientPipe<NUM_OF_AT_CLIENTS; clientPipe++)
 8001dba:	3401      	adds	r4, #1
 8001dbc:	b2e4      	uxtb	r4, r4
 8001dbe:	2c02      	cmp	r4, #2
 8001dc0:	d8eb      	bhi.n	8001d9a <AtProcessResponse+0x32>
			if(ATClient[clientPipe].pipe == ATClient[client].pipe)
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <AtProcessResponse+0xa0>)
 8001dc4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8001dc8:	008a      	lsls	r2, r1, #2
 8001dca:	441a      	add	r2, r3
 8001dcc:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8001dd0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8001dd4:	008a      	lsls	r2, r1, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ddc:	4298      	cmp	r0, r3
 8001dde:	d1ec      	bne.n	8001dba <AtProcessResponse+0x52>
				if(ATClient[clientPipe].isURCSubscribed)
 8001de0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001de4:	0093      	lsls	r3, r2, #2
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <AtProcessResponse+0xa0>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0e5      	beq.n	8001dba <AtProcessResponse+0x52>
					ATClient[clientPipe].callback(AT_RESP_URC, AtRxBuffer, AtRxBufferBytes);
 8001dee:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8001df2:	00b2      	lsls	r2, r6, #2
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <AtProcessResponse+0xa0>)
 8001df6:	4413      	add	r3, r2
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <AtProcessResponse+0xb0>)
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	4907      	ldr	r1, [pc, #28]	; (8001e1c <AtProcessResponse+0xb4>)
 8001e00:	2004      	movs	r0, #4
 8001e02:	4798      	blx	r3
 8001e04:	e7d9      	b.n	8001dba <AtProcessResponse+0x52>
 8001e06:	bf00      	nop
 8001e08:	200000bc 	.word	0x200000bc
 8001e0c:	200000b8 	.word	0x200000b8
 8001e10:	20000481 	.word	0x20000481
 8001e14:	20000480 	.word	0x20000480
 8001e18:	200007b6 	.word	0x200007b6
 8001e1c:	200005b4 	.word	0x200005b4

08001e20 <AtCheckMaxRetries>:
	if(toRetries >= ATActualRequest.timeoutRetries)
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <AtCheckMaxRetries+0x1c>)
 8001e22:	785a      	ldrb	r2, [r3, #1]
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <AtCheckMaxRetries+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d804      	bhi.n	8001e36 <AtCheckMaxRetries+0x16>
		toRetries = 0;
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <AtCheckMaxRetries+0x20>)
 8001e30:	701a      	strb	r2, [r3, #0]
		ret = TRUE;
 8001e32:	2001      	movs	r0, #1
 8001e34:	4770      	bx	lr
	tBool ret = FALSE;
 8001e36:	2000      	movs	r0, #0
}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000448 	.word	0x20000448
 8001e40:	20000482 	.word	0x20000482

08001e44 <AtCheckNoMaxRetries>:
	if(toRetries < ATActualRequest.timeoutRetries)
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <AtCheckNoMaxRetries+0x1c>)
 8001e46:	785a      	ldrb	r2, [r3, #1]
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <AtCheckNoMaxRetries+0x20>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d904      	bls.n	8001e5a <AtCheckNoMaxRetries+0x16>
		toRetries++;
 8001e50:	3301      	adds	r3, #1
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <AtCheckNoMaxRetries+0x20>)
 8001e54:	7013      	strb	r3, [r2, #0]
		ret = TRUE;
 8001e56:	2001      	movs	r0, #1
 8001e58:	4770      	bx	lr
	tBool ret = FALSE;
 8001e5a:	2000      	movs	r0, #0
}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000448 	.word	0x20000448
 8001e64:	20000482 	.word	0x20000482

08001e68 <AtCheckExpectedResponse>:
}
 8001e68:	2001      	movs	r0, #1
 8001e6a:	4770      	bx	lr

08001e6c <AtCheckNoExpectedResponse>:
}
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	4770      	bx	lr

08001e70 <AtSendCommand>:
{
 8001e70:	b570      	push	{r4, r5, r6, lr}
	WRITE_HREG(ATClient[ATActualClient].UARTInstance, HREG_UART_BUFFER_SIZE, commandSize);
 8001e72:	4c15      	ldr	r4, [pc, #84]	; (8001ec8 <AtSendCommand+0x58>)
 8001e74:	4e15      	ldr	r6, [pc, #84]	; (8001ecc <AtSendCommand+0x5c>)
 8001e76:	7833      	ldrb	r3, [r6, #0]
 8001e78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e7c:	009a      	lsls	r2, r3, #2
 8001e7e:	18a3      	adds	r3, r4, r2
 8001e80:	4d13      	ldr	r5, [pc, #76]	; (8001ed0 <AtSendCommand+0x60>)
 8001e82:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <AtSendCommand+0x64>)
 8001e84:	8812      	ldrh	r2, [r2, #0]
 8001e86:	4629      	mov	r1, r5
 8001e88:	7a18      	ldrb	r0, [r3, #8]
 8001e8a:	f7fe fccf 	bl	800082c <writeHreg>
	WRITE_HREG(ATClient[ATActualClient].UARTInstance, HREG_UART_DATA, actualCommand);
 8001e8e:	7833      	ldrb	r3, [r6, #0]
 8001e90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e94:	009a      	lsls	r2, r3, #2
 8001e96:	4414      	add	r4, r2
 8001e98:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <AtSendCommand+0x68>)
 8001e9a:	f105 0114 	add.w	r1, r5, #20
 8001e9e:	7a20      	ldrb	r0, [r4, #8]
 8001ea0:	f7fe fcc4 	bl	800082c <writeHreg>
	if(ATActualRequest.timeout > 0)
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <AtSendCommand+0x6c>)
 8001ea6:	885a      	ldrh	r2, [r3, #2]
 8001ea8:	b90a      	cbnz	r2, 8001eae <AtSendCommand+0x3e>
}
 8001eaa:	2000      	movs	r0, #0
 8001eac:	bd70      	pop	{r4, r5, r6, pc}
		WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_SET, ATActualRequest.timeout);
 8001eae:	4c0c      	ldr	r4, [pc, #48]	; (8001ee0 <AtSendCommand+0x70>)
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7fe fcba 	bl	800082c <writeHreg>
		WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_STATE, SW_TIMER_STATE_STARTED);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f1a4 0128 	sub.w	r1, r4, #40	; 0x28
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7fe fcb4 	bl	800082c <writeHreg>
 8001ec4:	e7f1      	b.n	8001eaa <AtSendCommand+0x3a>
 8001ec6:	bf00      	nop
 8001ec8:	200000bc 	.word	0x200000bc
 8001ecc:	200000b8 	.word	0x200000b8
 8001ed0:	080077dc 	.word	0x080077dc
 8001ed4:	200007b4 	.word	0x200007b4
 8001ed8:	200006b4 	.word	0x200006b4
 8001edc:	20000448 	.word	0x20000448
 8001ee0:	08007778 	.word	0x08007778

08001ee4 <AtCheckResponse>:
{
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	b082      	sub	sp, #8
	for(client=0; client<NUM_OF_AT_CLIENTS; client++)
 8001ee8:	2400      	movs	r4, #0
	eError ret = RET_OK;
 8001eea:	4626      	mov	r6, r4
	for(client=0; client<NUM_OF_AT_CLIENTS; client++)
 8001eec:	e01c      	b.n	8001f28 <AtCheckResponse+0x44>
		else if(pipeDeviceParseCommand(ATClient[client].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE,(int8_t *) "\r\nERROR\r\n", 9, &AtRxBufferBytes))
 8001eee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001ef2:	009a      	lsls	r2, r3, #2
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <AtCheckResponse+0xc4>)
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8001efc:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <AtCheckResponse+0xc8>)
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	2309      	movs	r3, #9
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <AtCheckResponse+0xcc>)
 8001f06:	22ff      	movs	r2, #255	; 0xff
 8001f08:	492a      	ldr	r1, [pc, #168]	; (8001fb4 <AtCheckResponse+0xd0>)
 8001f0a:	f000 fe87 	bl	8002c1c <pipeDeviceParseCommand>
 8001f0e:	b350      	cbz	r0, 8001f66 <AtCheckResponse+0x82>
			ret = AtProcessResponse(client, AT_RESP_ERROR);
 8001f10:	2101      	movs	r1, #1
 8001f12:	4620      	mov	r0, r4
 8001f14:	f7ff ff28 	bl	8001d68 <AtProcessResponse>
 8001f18:	4606      	mov	r6, r0
			WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_STATE, SW_TIMER_STATE_CANCELLED);
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	4926      	ldr	r1, [pc, #152]	; (8001fb8 <AtCheckResponse+0xd4>)
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7fe fc84 	bl	800082c <writeHreg>
	for(client=0; client<NUM_OF_AT_CLIENTS; client++)
 8001f24:	3401      	adds	r4, #1
 8001f26:	b2e4      	uxtb	r4, r4
 8001f28:	2c02      	cmp	r4, #2
 8001f2a:	d839      	bhi.n	8001fa0 <AtCheckResponse+0xbc>
		if(pipeDeviceParseCommand(ATClient[client].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE,(int8_t *) "\r\nOK\r\n", 6, &AtRxBufferBytes))
 8001f2c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001f30:	009a      	lsls	r2, r3, #2
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <AtCheckResponse+0xc4>)
 8001f34:	4413      	add	r3, r2
 8001f36:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <AtCheckResponse+0xc8>)
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	2306      	movs	r3, #6
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <AtCheckResponse+0xd8>)
 8001f44:	22ff      	movs	r2, #255	; 0xff
 8001f46:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <AtCheckResponse+0xd0>)
 8001f48:	f000 fe68 	bl	8002c1c <pipeDeviceParseCommand>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d0ce      	beq.n	8001eee <AtCheckResponse+0xa>
			ret = AtProcessResponse(client, AT_RESP_OK);
 8001f50:	2100      	movs	r1, #0
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7ff ff08 	bl	8001d68 <AtProcessResponse>
 8001f58:	4606      	mov	r6, r0
			WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_STATE, SW_TIMER_STATE_CANCELLED);
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4916      	ldr	r1, [pc, #88]	; (8001fb8 <AtCheckResponse+0xd4>)
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7fe fc64 	bl	800082c <writeHreg>
 8001f64:	e7de      	b.n	8001f24 <AtCheckResponse+0x40>
		else if(pipeDeviceParseCommand(ATClient[client].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE,(int8_t *) "\r\n", 2, &AtRxBufferBytes))
 8001f66:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8001f6a:	00aa      	lsls	r2, r5, #2
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <AtCheckResponse+0xc4>)
 8001f6e:	4413      	add	r3, r2
 8001f70:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <AtCheckResponse+0xc8>)
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	2302      	movs	r3, #2
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <AtCheckResponse+0xdc>)
 8001f7e:	22ff      	movs	r2, #255	; 0xff
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <AtCheckResponse+0xd0>)
 8001f82:	f000 fe4b 	bl	8002c1c <pipeDeviceParseCommand>
 8001f86:	2800      	cmp	r0, #0
 8001f88:	d0cc      	beq.n	8001f24 <AtCheckResponse+0x40>
			ret = AtProcessResponse(client, AT_RESP_DATA);
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f7ff feeb 	bl	8001d68 <AtProcessResponse>
 8001f92:	4606      	mov	r6, r0
			WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_STATE, SW_TIMER_STATE_CANCELLED);
 8001f94:	2202      	movs	r2, #2
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <AtCheckResponse+0xd4>)
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7fe fc47 	bl	800082c <writeHreg>
 8001f9e:	e7c1      	b.n	8001f24 <AtCheckResponse+0x40>
}
 8001fa0:	4630      	mov	r0, r6
 8001fa2:	b002      	add	sp, #8
 8001fa4:	bd70      	pop	{r4, r5, r6, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200000bc 	.word	0x200000bc
 8001fac:	200007b6 	.word	0x200007b6
 8001fb0:	08007ba0 	.word	0x08007ba0
 8001fb4:	200005b4 	.word	0x200005b4
 8001fb8:	08007750 	.word	0x08007750
 8001fbc:	08007b98 	.word	0x08007b98
 8001fc0:	08007b9c 	.word	0x08007b9c

08001fc4 <AtReportTimeout>:
{
 8001fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	isRequestInProgress = FALSE;
 8001fc8:	2500      	movs	r5, #0
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <AtReportTimeout+0x4c>)
 8001fcc:	701d      	strb	r5, [r3, #0]
	pipeDeviceExtractData(ATClient[ATActualClient].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE, &AtRxBufferBytes);
 8001fce:	4e11      	ldr	r6, [pc, #68]	; (8002014 <AtReportTimeout+0x50>)
 8001fd0:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8002020 <AtReportTimeout+0x5c>
 8001fd4:	4c10      	ldr	r4, [pc, #64]	; (8002018 <AtReportTimeout+0x54>)
 8001fd6:	4f11      	ldr	r7, [pc, #68]	; (800201c <AtReportTimeout+0x58>)
 8001fd8:	783b      	ldrb	r3, [r7, #0]
 8001fda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001fde:	009a      	lsls	r2, r3, #2
 8001fe0:	18a0      	adds	r0, r4, r2
 8001fe2:	4633      	mov	r3, r6
 8001fe4:	22ff      	movs	r2, #255	; 0xff
 8001fe6:	4641      	mov	r1, r8
 8001fe8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8001fec:	f000 fe8e 	bl	8002d0c <pipeDeviceExtractData>
	ATClient[ATActualClient].callback(AT_RESP_TIMEOUT, AtRxBuffer, AtRxBufferBytes);
 8001ff0:	783b      	ldrb	r3, [r7, #0]
 8001ff2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001ff6:	009a      	lsls	r2, r3, #2
 8001ff8:	4414      	add	r4, r2
 8001ffa:	6863      	ldr	r3, [r4, #4]
 8001ffc:	7832      	ldrb	r2, [r6, #0]
 8001ffe:	4641      	mov	r1, r8
 8002000:	2003      	movs	r0, #3
 8002002:	4798      	blx	r3
	ATActualClient = NUM_OF_AT_CLIENTS;
 8002004:	2303      	movs	r3, #3
 8002006:	703b      	strb	r3, [r7, #0]
	AtRxBufferBytes = 0;
 8002008:	7035      	strb	r5, [r6, #0]
}
 800200a:	4628      	mov	r0, r5
 800200c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002010:	20000481 	.word	0x20000481
 8002014:	200007b6 	.word	0x200007b6
 8002018:	200000bc 	.word	0x200000bc
 800201c:	200000b8 	.word	0x200000b8
 8002020:	200005b4 	.word	0x200005b4

08002024 <AtReportResponse>:
	ATActualClient = NUM_OF_AT_CLIENTS;
 8002024:	2203      	movs	r2, #3
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <AtReportResponse+0x14>)
 8002028:	701a      	strb	r2, [r3, #0]
	isRequestInProgress = FALSE;
 800202a:	2000      	movs	r0, #0
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <AtReportResponse+0x18>)
 800202e:	7018      	strb	r0, [r3, #0]
	AtRxBufferBytes = 0;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <AtReportResponse+0x1c>)
 8002032:	7018      	strb	r0, [r3, #0]
}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	200000b8 	.word	0x200000b8
 800203c:	20000481 	.word	0x20000481
 8002040:	200007b6 	.word	0x200007b6

08002044 <AtPublishURC>:
	AtRxBufferBytes = 0;
 8002044:	2000      	movs	r0, #0
 8002046:	4b01      	ldr	r3, [pc, #4]	; (800204c <AtPublishURC+0x8>)
 8002048:	7018      	strb	r0, [r3, #0]
}
 800204a:	4770      	bx	lr
 800204c:	200007b6 	.word	0x200007b6

08002050 <AtCommandStart>:
{
 8002050:	b538      	push	{r3, r4, r5, lr}
	fsmATCmd.listState = fsmStateATCommand;
 8002052:	4810      	ldr	r0, [pc, #64]	; (8002094 <AtCommandStart+0x44>)
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <AtCommandStart+0x48>)
 8002056:	6083      	str	r3, [r0, #8]
	fsmATCmd.event = fsmEventATCommand;
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <AtCommandStart+0x4c>)
 800205a:	60c3      	str	r3, [r0, #12]
	fsmATCmd.numOfEvents = NUM_OF_ATCOMMAND_FSM_EVENTS;
 800205c:	2303      	movs	r3, #3
 800205e:	7403      	strb	r3, [r0, #16]
	fsmATCmd.numOfStates = NUM_OF_ATCOMMAND_FSM_STATES;
 8002060:	2302      	movs	r3, #2
 8002062:	7443      	strb	r3, [r0, #17]
	fsmATCmd.numFsm = 0;
 8002064:	2400      	movs	r4, #0
 8002066:	7004      	strb	r4, [r0, #0]
	fsmATCmd.initState = AT_IDLE_STATE;
 8002068:	74c4      	strb	r4, [r0, #19]
	fsmATCmd.name = (uint8_t *)"FSM AT_CMD";
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <AtCommandStart+0x50>)
 800206c:	6043      	str	r3, [r0, #4]
	indexfsmATCmd = configureFsm(&fsmATCmd, FSM_ATCOMMAND_FSM_LOOP_TIME);
 800206e:	2132      	movs	r1, #50	; 0x32
 8002070:	f7ff fc86 	bl	8001980 <configureFsm>
 8002074:	4d0b      	ldr	r5, [pc, #44]	; (80020a4 <AtCommandStart+0x54>)
 8002076:	7028      	strb	r0, [r5, #0]
	setLogFsm(indexfsmATCmd, FALSE);
 8002078:	4621      	mov	r1, r4
 800207a:	f7ff fd0f 	bl	8001a9c <setLogFsm>
	resetFsm(indexfsmATCmd);
 800207e:	7828      	ldrb	r0, [r5, #0]
 8002080:	f7ff fca6 	bl	80019d0 <resetFsm>
	WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_CALLBACK_FUNCTION, AtTimeoutCallback);
 8002084:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <AtCommandStart+0x58>)
 8002086:	4909      	ldr	r1, [pc, #36]	; (80020ac <AtCommandStart+0x5c>)
 8002088:	4620      	mov	r0, r4
 800208a:	f7fe fbcf 	bl	800082c <writeHreg>
}
 800208e:	4620      	mov	r0, r4
 8002090:	bd38      	pop	{r3, r4, r5, pc}
 8002092:	bf00      	nop
 8002094:	20000464 	.word	0x20000464
 8002098:	08007c2c 	.word	0x08007c2c
 800209c:	200000e0 	.word	0x200000e0
 80020a0:	08007bac 	.word	0x08007bac
 80020a4:	20000480 	.word	0x20000480
 80020a8:	08001c85 	.word	0x08001c85
 80020ac:	08007728 	.word	0x08007728

080020b0 <ATCommandSetRequest>:
{
 80020b0:	b510      	push	{r4, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	ac04      	add	r4, sp, #16
 80020b6:	e904 000e 	stmdb	r4, {r1, r2, r3}
	if(!isRequestInProgress)
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <ATCommandSetRequest+0x50>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	b11b      	cbz	r3, 80020c8 <ATCommandSetRequest+0x18>
	eError ret = RET_BUSY;
 80020c0:	2309      	movs	r3, #9
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	b004      	add	sp, #16
 80020c6:	bd10      	pop	{r4, pc}
 80020c8:	4603      	mov	r3, r0
		isRequestInProgress = TRUE;
 80020ca:	2101      	movs	r1, #1
 80020cc:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <ATCommandSetRequest+0x50>)
 80020ce:	7011      	strb	r1, [r2, #0]
		ATActualRequest = ATRequest;
 80020d0:	4c0c      	ldr	r4, [pc, #48]	; (8002104 <ATCommandSetRequest+0x54>)
 80020d2:	aa04      	add	r2, sp, #16
 80020d4:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80020d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		ATActualClient = ATClient;
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <ATCommandSetRequest+0x58>)
 80020de:	7013      	strb	r3, [r2, #0]
		toRetries = 0;
 80020e0:	2200      	movs	r2, #0
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <ATCommandSetRequest+0x5c>)
 80020e4:	701a      	strb	r2, [r3, #0]
		ret = ATCommandParse();
 80020e6:	f7ff fddd 	bl	8001ca4 <ATCommandParse>
		if(ret == RET_OK)
 80020ea:	4603      	mov	r3, r0
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d1e8      	bne.n	80020c2 <ATCommandSetRequest+0x12>
			ret = announceFsmEvent(indexfsmATCmd, AT_COMMAND_REQ_EVENT);
 80020f0:	2102      	movs	r1, #2
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <ATCommandSetRequest+0x60>)
 80020f4:	7818      	ldrb	r0, [r3, #0]
 80020f6:	f7ff fc7f 	bl	80019f8 <announceFsmEvent>
 80020fa:	4603      	mov	r3, r0
 80020fc:	e7e1      	b.n	80020c2 <ATCommandSetRequest+0x12>
 80020fe:	bf00      	nop
 8002100:	20000481 	.word	0x20000481
 8002104:	20000448 	.word	0x20000448
 8002108:	200000b8 	.word	0x200000b8
 800210c:	20000482 	.word	0x20000482
 8002110:	20000480 	.word	0x20000480

08002114 <diffTime>:
 **********************************************************************/
static uint32_t diffTime( uint32_t timeA, uint32_t timeB )
{
    uint32_t retVal = 0;

    if( timeA >= timeB )
 8002114:	4288      	cmp	r0, r1
 8002116:	d202      	bcs.n	800211e <diffTime+0xa>
    {
            retVal = timeA - timeB;
    }
    else
    {
            retVal = UINT32_MAX - (timeB - timeA);
 8002118:	1a09      	subs	r1, r1, r0
 800211a:	43c8      	mvns	r0, r1
    }

    return retVal;
}
 800211c:	4770      	bx	lr
            retVal = timeA - timeB;
 800211e:	1a40      	subs	r0, r0, r1
 8002120:	4770      	bx	lr
	...

08002124 <getTime>:
    uint32_t retVal = 0;

    retVal = timeMs;

    return retVal;
}
 8002124:	4b01      	ldr	r3, [pc, #4]	; (800212c <getTime+0x8>)
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000494 	.word	0x20000494

08002130 <SwTimerInit>:
eError SwTimerInit( void )
{
    eError result = RET_OK;
    uint8_t i;

    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8002130:	2300      	movs	r3, #0
 8002132:	b10b      	cbz	r3, 8002138 <SwTimerInit+0x8>
    {
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
    }

    return result;
}
 8002134:	2000      	movs	r0, #0
 8002136:	4770      	bx	lr
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
 8002138:	4a03      	ldr	r2, [pc, #12]	; (8002148 <SwTimerInit+0x18>)
 800213a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800213e:	2100      	movs	r1, #0
 8002140:	7211      	strb	r1, [r2, #8]
    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8002142:	3301      	adds	r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e7f4      	b.n	8002132 <SwTimerInit+0x2>
 8002148:	20000484 	.word	0x20000484

0800214c <SwTimerStart>:
eError SwTimerStart()
{
    eError result = RET_OK;

    return result;
}
 800214c:	2000      	movs	r0, #0
 800214e:	4770      	bx	lr

08002150 <SwTimerStop>:
eError SwTimerStop()
{
    eError result = RET_OK;

    return result;
}
 8002150:	2000      	movs	r0, #0
 8002152:	4770      	bx	lr

08002154 <SwTimerSleep>:
eError SwTimerSleep()
{
    eError result = RET_OK;

    return result;
}
 8002154:	2000      	movs	r0, #0
 8002156:	4770      	bx	lr

08002158 <SwTimerWake>:
eError SwTimerWake()
{
    eError result = RET_OK;

    return result;
}
 8002158:	2000      	movs	r0, #0
 800215a:	4770      	bx	lr

0800215c <SwTimerStopTimer>:
eError SwTimerStopTimer( tSwTimerIndex SwTimerIndex )
{
    eError result = RET_OK;

    // Change timer state.
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_STOPPED;
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <SwTimerStopTimer+0xc>)
 800215e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8002162:	2000      	movs	r0, #0
 8002164:	7218      	strb	r0, [r3, #8]
    
    return result;
}
 8002166:	4770      	bx	lr
 8002168:	20000484 	.word	0x20000484

0800216c <SwTimerResetTimer>:
/**********************************************************************
 * @brief  Reset and start the timer
 * @param  pTimer:	Pointer to timer to be restart.
 **********************************************************************/
eError SwTimerResetTimer( tSwTimerIndex SwTimerIndex )
{
 800216c:	b510      	push	{r4, lr}
 800216e:	4604      	mov	r4, r0
    eError result = RET_OK;

    // Reset the timer.
    SwTimersArray[SwTimerIndex].startMs = getTime();
 8002170:	f7ff ffd8 	bl	8002124 <getTime>
 8002174:	0124      	lsls	r4, r4, #4
 8002176:	4b02      	ldr	r3, [pc, #8]	; (8002180 <SwTimerResetTimer+0x14>)
 8002178:	5118      	str	r0, [r3, r4]

    return result;
}
 800217a:	2000      	movs	r0, #0
 800217c:	bd10      	pop	{r4, pc}
 800217e:	bf00      	nop
 8002180:	20000484 	.word	0x20000484

08002184 <SwTimerStartTimer>:
{
 8002184:	b510      	push	{r4, lr}
 8002186:	4604      	mov	r4, r0
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_CANCELLED ||
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <SwTimerStartTimer+0x28>)
 800218a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800218e:	7a1b      	ldrb	r3, [r3, #8]
 8002190:	3b02      	subs	r3, #2
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d906      	bls.n	80021a6 <SwTimerStartTimer+0x22>
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_STARTED;
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <SwTimerStartTimer+0x28>)
 800219a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800219e:	2301      	movs	r3, #1
 80021a0:	7203      	strb	r3, [r0, #8]
}
 80021a2:	2000      	movs	r0, #0
 80021a4:	bd10      	pop	{r4, pc}
        SwTimerResetTimer( SwTimerIndex );
 80021a6:	f7ff ffe1 	bl	800216c <SwTimerResetTimer>
 80021aa:	e7f5      	b.n	8002198 <SwTimerStartTimer+0x14>
 80021ac:	20000484 	.word	0x20000484

080021b0 <SwTimerUpdateTimer>:
 * @brief  Updates all timers every millisecond
 * @param
 * @retval
 **********************************************************************/
eError SwTimerUpdateTimer( tSwTimerIndex SwTimerIndex )
{
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	4604      	mov	r4, r0
    eError result = RET_OK;
    tBool restartTimer = FALSE;

    // If timer is started, check timeout.
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STARTED )
 80021b4:	4b16      	ldr	r3, [pc, #88]	; (8002210 <SwTimerUpdateTimer+0x60>)
 80021b6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80021ba:	7a1b      	ldrb	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d00a      	beq.n	80021d6 <SwTimerUpdateTimer+0x26>
            }
        }
    }
    // If the timer is stopped, simply shifts the start time,
    // this keeps the elapsed time.
    else if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STOPPED )
 80021c0:	b9fb      	cbnz	r3, 8002202 <SwTimerUpdateTimer+0x52>
    {
        SwTimersArray[SwTimerIndex].startMs++;
 80021c2:	4913      	ldr	r1, [pc, #76]	; (8002210 <SwTimerUpdateTimer+0x60>)
 80021c4:	0102      	lsls	r2, r0, #4
 80021c6:	588b      	ldr	r3, [r1, r2]
 80021c8:	3301      	adds	r3, #1
 80021ca:	508b      	str	r3, [r1, r2]
    tBool restartTimer = FALSE;
 80021cc:	2000      	movs	r0, #0
    }

    if ( restartTimer == TRUE )
 80021ce:	2801      	cmp	r0, #1
 80021d0:	d019      	beq.n	8002206 <SwTimerUpdateTimer+0x56>
    {
        SwTimerStartTimer(SwTimerIndex);
    }

    return result;
}
 80021d2:	2000      	movs	r0, #0
 80021d4:	bd38      	pop	{r3, r4, r5, pc}
        if( diffTime( timeMs, SwTimersArray[SwTimerIndex].startMs ) >= SwTimersArray[SwTimerIndex].timeoutMs )
 80021d6:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <SwTimerUpdateTimer+0x60>)
 80021d8:	0103      	lsls	r3, r0, #4
 80021da:	18d5      	adds	r5, r2, r3
 80021dc:	58d1      	ldr	r1, [r2, r3]
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <SwTimerUpdateTimer+0x64>)
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	f7ff ff97 	bl	8002114 <diffTime>
 80021e6:	686b      	ldr	r3, [r5, #4]
 80021e8:	4298      	cmp	r0, r3
 80021ea:	d306      	bcc.n	80021fa <SwTimerUpdateTimer+0x4a>
            SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_EXPIRED;
 80021ec:	2203      	movs	r2, #3
 80021ee:	722a      	strb	r2, [r5, #8]
            if( NULL != SwTimersArray[SwTimerIndex].pFuncCB )
 80021f0:	68eb      	ldr	r3, [r5, #12]
 80021f2:	b123      	cbz	r3, 80021fe <SwTimerUpdateTimer+0x4e>
                    restartTimer = SwTimersArray[SwTimerIndex].pFuncCB(SwTimerIndex);
 80021f4:	4620      	mov	r0, r4
 80021f6:	4798      	blx	r3
 80021f8:	e7e9      	b.n	80021ce <SwTimerUpdateTimer+0x1e>
    tBool restartTimer = FALSE;
 80021fa:	2000      	movs	r0, #0
 80021fc:	e7e7      	b.n	80021ce <SwTimerUpdateTimer+0x1e>
 80021fe:	2000      	movs	r0, #0
 8002200:	e7e5      	b.n	80021ce <SwTimerUpdateTimer+0x1e>
 8002202:	2000      	movs	r0, #0
 8002204:	e7e3      	b.n	80021ce <SwTimerUpdateTimer+0x1e>
        SwTimerStartTimer(SwTimerIndex);
 8002206:	4620      	mov	r0, r4
 8002208:	f7ff ffbc 	bl	8002184 <SwTimerStartTimer>
 800220c:	e7e1      	b.n	80021d2 <SwTimerUpdateTimer+0x22>
 800220e:	bf00      	nop
 8002210:	20000484 	.word	0x20000484
 8002214:	20000494 	.word	0x20000494

08002218 <SwTimerCancelTimer>:
eError SwTimerCancelTimer( tSwTimerIndex SwTimerIndex )
{
    eError result = RET_OK;

    // Change timer state.
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_CANCELLED;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <SwTimerCancelTimer+0x10>)
 800221a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800221e:	2302      	movs	r3, #2
 8002220:	7203      	strb	r3, [r0, #8]
    
    return result;
}
 8002222:	2000      	movs	r0, #0
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000484 	.word	0x20000484

0800222c <SwTimerSetTimeout>:
    eError result = RET_OK;
    // Reset the timer.
    //timersArray[timerIndex].startMs = getTime();

    // Set timer timeout
    SwTimersArray[SwTimerIndex].timeoutMs = TIME_TO_TICKS(timeoutMs);
 800222c:	4b02      	ldr	r3, [pc, #8]	; (8002238 <SwTimerSetTimeout+0xc>)
 800222e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002232:	6041      	str	r1, [r0, #4]
    return result ;
}
 8002234:	2000      	movs	r0, #0
 8002236:	4770      	bx	lr
 8002238:	20000484 	.word	0x20000484

0800223c <SwTimerGetElapsed>:
 * @brief  Get timer elapsed time
 * @param  pTimer:	Pointer to timer to be used.
 * @retval			Elapsed timer in milliseconds
 **********************************************************************/
uint32_t SwTimerGetElapsed( tSwTimerIndex SwTimerIndex )
{
 800223c:	b510      	push	{r4, lr}
 800223e:	4604      	mov	r4, r0
    uint32_t retVal = 0;

    // Compute elapsed time.
    retVal = diffTime( getTime(), SwTimersArray[SwTimerIndex].startMs );
 8002240:	f7ff ff70 	bl	8002124 <getTime>
 8002244:	0124      	lsls	r4, r4, #4
 8002246:	4b02      	ldr	r3, [pc, #8]	; (8002250 <SwTimerGetElapsed+0x14>)
 8002248:	5919      	ldr	r1, [r3, r4]
 800224a:	f7ff ff63 	bl	8002114 <diffTime>

    return retVal;
}
 800224e:	bd10      	pop	{r4, pc}
 8002250:	20000484 	.word	0x20000484

08002254 <SwTimerGetPending>:
uint32_t SwTimerGetPending( tSwTimerIndex SwTimerIndex )
{
    uint32_t retVal = 0;

    // Compute elapsed time.
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STARTED )
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <SwTimerGetPending+0x28>)
 8002256:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800225a:	7a1b      	ldrb	r3, [r3, #8]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d001      	beq.n	8002264 <SwTimerGetPending+0x10>
    {
        retVal = SwTimersArray[SwTimerIndex].timeoutMs - diffTime( getTime(), SwTimersArray[SwTimerIndex].startMs );
    }
    else
    {
        retVal = 0;
 8002260:	2000      	movs	r0, #0
    }

    return retVal;
 8002262:	4770      	bx	lr
{
 8002264:	b570      	push	{r4, r5, r6, lr}
        retVal = SwTimersArray[SwTimerIndex].timeoutMs - diffTime( getTime(), SwTimersArray[SwTimerIndex].startMs );
 8002266:	4e05      	ldr	r6, [pc, #20]	; (800227c <SwTimerGetPending+0x28>)
 8002268:	0104      	lsls	r4, r0, #4
 800226a:	1933      	adds	r3, r6, r4
 800226c:	685d      	ldr	r5, [r3, #4]
 800226e:	f7ff ff59 	bl	8002124 <getTime>
 8002272:	5931      	ldr	r1, [r6, r4]
 8002274:	f7ff ff4e 	bl	8002114 <diffTime>
 8002278:	1a28      	subs	r0, r5, r0
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	20000484 	.word	0x20000484

08002280 <SwTimerGetState>:
tSwTimerState SwTimerGetState( tSwTimerIndex SwTimerIndex  )
{
    tSwTimerState retVal = SW_TIMER_STATE_STOPPED;

    // Read timer state
    retVal = SwTimersArray[SwTimerIndex].state;
 8002280:	4b02      	ldr	r3, [pc, #8]	; (800228c <SwTimerGetState+0xc>)
 8002282:	eb03 1000 	add.w	r0, r3, r0, lsl #4

    return retVal;
}
 8002286:	7a00      	ldrb	r0, [r0, #8]
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000484 	.word	0x20000484

08002290 <SwTimerSetState>:
 * @brief  Set timer state
 * @param  pTimer:	Pointer to timer to be used.
 * @param  state:	New timer state.
 **********************************************************************/
eError SwTimerSetState( tSwTimerIndex SwTimerIndex, tSwTimerState state )
{
 8002290:	b538      	push	{r3, r4, r5, lr}
 8002292:	4605      	mov	r5, r0
 8002294:	460c      	mov	r4, r1
    eError result = RET_OK;

    switch( state )
 8002296:	2901      	cmp	r1, #1
 8002298:	d00b      	beq.n	80022b2 <SwTimerSetState+0x22>
 800229a:	b139      	cbz	r1, 80022ac <SwTimerSetState+0x1c>
 800229c:	2902      	cmp	r1, #2
 800229e:	d00b      	beq.n	80022b8 <SwTimerSetState+0x28>
            default:
                    break;
    }

    // Change timer state.
    SwTimersArray[SwTimerIndex].state = state;
 80022a0:	4807      	ldr	r0, [pc, #28]	; (80022c0 <SwTimerSetState+0x30>)
 80022a2:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80022a6:	7204      	strb	r4, [r0, #8]

    return result;
}
 80022a8:	2000      	movs	r0, #0
 80022aa:	bd38      	pop	{r3, r4, r5, pc}
                    SwTimerStopTimer( SwTimerIndex );
 80022ac:	f7ff ff56 	bl	800215c <SwTimerStopTimer>
                    break;
 80022b0:	e7f6      	b.n	80022a0 <SwTimerSetState+0x10>
                    SwTimerStartTimer( SwTimerIndex );
 80022b2:	f7ff ff67 	bl	8002184 <SwTimerStartTimer>
                    break;
 80022b6:	e7f3      	b.n	80022a0 <SwTimerSetState+0x10>
                    SwTimerCancelTimer( SwTimerIndex );
 80022b8:	f7ff ffae 	bl	8002218 <SwTimerCancelTimer>
                    break;
 80022bc:	e7f0      	b.n	80022a0 <SwTimerSetState+0x10>
 80022be:	bf00      	nop
 80022c0:	20000484 	.word	0x20000484

080022c4 <SwTimerSetCallbackFunction>:
 **********************************************************************/
eError SwTimerSetCallbackFunction ( tSwTimerIndex SwTimerIndex, tBool (*callbackFunction)(tSwTimerIndex SwTimerIndex) )
{
    eError result = RET_OK;

    if ( callbackFunction == NULL )
 80022c4:	b129      	cbz	r1, 80022d2 <SwTimerSetCallbackFunction+0xe>
    {
        result = RET_BAD_POINTER_ADDRESS;
    }
    else
    {
        SwTimersArray[SwTimerIndex].pFuncCB = callbackFunction;
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <SwTimerSetCallbackFunction+0x14>)
 80022c8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80022cc:	60c1      	str	r1, [r0, #12]
    eError result = RET_OK;
 80022ce:	2000      	movs	r0, #0
 80022d0:	4770      	bx	lr
        result = RET_BAD_POINTER_ADDRESS;
 80022d2:	2006      	movs	r0, #6
    }
    
    return result;
    
}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000484 	.word	0x20000484

080022dc <SwTimerIrq>:
 * @brief  Interrupt request rutine for periodic tick
 * @param  None.
 * @retval None.
 **********************************************************************/
void SwTimerIrq( void )
{
 80022dc:	b510      	push	{r4, lr}
    uint8_t SwTimerIndex = 0;

    // Increment time global variable.
    timeMs = timeMs + TIMER_PERIOD; //timeMs++;
 80022de:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <SwTimerIrq+0x1c>)
 80022e0:	6813      	ldr	r3, [r2, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	6013      	str	r3, [r2, #0]

    // Update timers
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 80022e6:	2400      	movs	r4, #0
 80022e8:	b104      	cbz	r4, 80022ec <SwTimerIrq+0x10>
    {
        SwTimerUpdateTimer( SwTimerIndex );
    }
}
 80022ea:	bd10      	pop	{r4, pc}
        SwTimerUpdateTimer( SwTimerIndex );
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7ff ff5f 	bl	80021b0 <SwTimerUpdateTimer>
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 80022f2:	3401      	adds	r4, #1
 80022f4:	b2e4      	uxtb	r4, r4
 80022f6:	e7f7      	b.n	80022e8 <SwTimerIrq+0xc>
 80022f8:	20000494 	.word	0x20000494

080022fc <initHregSwTimer>:
/***********************************************************************
 * @brief	API for init Timer.
 *
 **********************************************************************/
__weak eError initHregSwTimer( void )
{
 80022fc:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerInit();
 80022fe:	f7ff ff17 	bl	8002130 <SwTimerInit>

	return result;
}
 8002302:	bd08      	pop	{r3, pc}

08002304 <startHregSwTimer>:
/***********************************************************************
 * @brief	API for start Timer.
 *
 **********************************************************************/
__weak eError startHregSwTimer( void )
{
 8002304:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerStart();
 8002306:	f7ff ff21 	bl	800214c <SwTimerStart>

	return result;
}
 800230a:	bd08      	pop	{r3, pc}

0800230c <stopHregSwTimer>:
/***********************************************************************
 * @brief	API for stop Timer.
 *
 **********************************************************************/
__weak eError stopHregSwTimer( void )
{
 800230c:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerStop();
 800230e:	f7ff ff1f 	bl	8002150 <SwTimerStop>

	return result;
}
 8002312:	bd08      	pop	{r3, pc}

08002314 <sleepHregSwTimer>:
/***********************************************************************
 * @brief	API for sleep Timer.
 *
 **********************************************************************/
__weak eError sleepHregSwTimer( void )
{
 8002314:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerSleep();
 8002316:	f7ff ff1d 	bl	8002154 <SwTimerSleep>

	return result;
}
 800231a:	bd08      	pop	{r3, pc}

0800231c <wakeHregSwTimer>:
/***********************************************************************
 * @brief	API for wake Timer.
 *
 **********************************************************************/
__weak eError wakeHregSwTimer( void )
{
 800231c:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerWake();
 800231e:	f7ff ff1b 	bl	8002158 <SwTimerWake>

	return result;
}
 8002322:	bd08      	pop	{r3, pc}

08002324 <onWriteHregSwTimerCallbackFunction>:
/***********************************************************************
 * @brief	On Write function for Timer callbackFunction.
 *
 **********************************************************************/
__weak eError onWriteHregSwTimerCallbackFunction( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8002324:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerSetCallbackFunction( instance, (void*)param1 );
 8002326:	4611      	mov	r1, r2
 8002328:	f7ff ffcc 	bl	80022c4 <SwTimerSetCallbackFunction>

	return result;
}
 800232c:	bd08      	pop	{r3, pc}

0800232e <onReadHregSwTimerGetPending>:
/***********************************************************************
 * @brief	On Read function for Timer getPending.
 *
 **********************************************************************/
__weak eError onReadHregSwTimerGetPending( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 800232e:	b510      	push	{r4, lr}
 8002330:	4614      	mov	r4, r2
	eError result = RET_OK;

	*(uint32_t*)param1 = SwTimerGetPending( instance );
 8002332:	f7ff ff8f 	bl	8002254 <SwTimerGetPending>
 8002336:	6020      	str	r0, [r4, #0]

	return result;
}
 8002338:	2000      	movs	r0, #0
 800233a:	bd10      	pop	{r4, pc}

0800233c <onReadHregSwTimerState>:
/***********************************************************************
 * @brief	On Read function for Timer getState.
 *
 **********************************************************************/
__weak eError onReadHregSwTimerState( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 800233c:	b510      	push	{r4, lr}
 800233e:	4614      	mov	r4, r2
	eError result = RET_OK;

	*(tSwTimerState*)param1 = SwTimerGetState( instance );
 8002340:	f7ff ff9e 	bl	8002280 <SwTimerGetState>
 8002344:	7020      	strb	r0, [r4, #0]

	return result;
}
 8002346:	2000      	movs	r0, #0
 8002348:	bd10      	pop	{r4, pc}

0800234a <onWriteHregSwTimerState>:
/***********************************************************************
 * @brief	On Write function for Timer setState.
 *
 **********************************************************************/
__weak eError onWriteHregSwTimerState( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 800234a:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerSetState( instance, param1 );
 800234c:	b2d1      	uxtb	r1, r2
 800234e:	f7ff ff9f 	bl	8002290 <SwTimerSetState>

	return result;
}
 8002352:	bd08      	pop	{r3, pc}

08002354 <onReadHregSwTimerGetElapsed>:
/***********************************************************************
 * @brief	On Read function for Timer getElapsed.
 *
 **********************************************************************/
__weak eError onReadHregSwTimerGetElapsed( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8002354:	b510      	push	{r4, lr}
 8002356:	4614      	mov	r4, r2
	eError result = RET_OK;

	*(uint32_t *)param1 = SwTimerGetElapsed( instance );
 8002358:	f7ff ff70 	bl	800223c <SwTimerGetElapsed>
 800235c:	6020      	str	r0, [r4, #0]

	return result;
}
 800235e:	2000      	movs	r0, #0
 8002360:	bd10      	pop	{r4, pc}

08002362 <onWriteHregSwTimerSet>:
/***********************************************************************
 * @brief	On Write function for Timer set.
 *
 **********************************************************************/
__weak eError onWriteHregSwTimerSet( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8002362:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerSetTimeout( instance, param1 );
 8002364:	4611      	mov	r1, r2
 8002366:	f7ff ff61 	bl	800222c <SwTimerSetTimeout>

	return result;
}
 800236a:	bd08      	pop	{r3, pc}

0800236c <EEPROMGetNumOfInstances>:
 * @return num of instances
 ***************************************************************************/
static uint8_t EEPROMGetNumOfInstances(tVirtualEEPROM eeprom, uint16_t reg)
{
	uint8_t num;
	if (VirtualEEPROMInstanceMap[eeprom].typeArea == EEPROM_AREA_INST)
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <EEPROMGetNumOfInstances+0x20>)
 800236e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002372:	789b      	ldrb	r3, [r3, #2]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d001      	beq.n	800237c <EEPROMGetNumOfInstances+0x10>
	{
		num = VirtualEEPROMInstanceMap[eeprom].regTable.withInst[reg].numOfInstances;
	}
	else
	{
		num = UNIQUE_EEPROM_INSTANCE;
 8002378:	2001      	movs	r0, #1
	}
	return num;
}
 800237a:	4770      	bx	lr
		num = VirtualEEPROMInstanceMap[eeprom].regTable.withInst[reg].numOfInstances;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <EEPROMGetNumOfInstances+0x20>)
 800237e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002382:	6843      	ldr	r3, [r0, #4]
 8002384:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	08007cd0 	.word	0x08007cd0

08002390 <EEPROMGetAreaSize>:
 * @return size
 ***************************************************************************/
static uint16_t EEPROMGetAreaSize(tVirtualEEPROM eeprom, uint16_t reg)
{
	uint16_t size;
	if (VirtualEEPROMInstanceMap[eeprom].typeArea == EEPROM_AREA_INST)
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <EEPROMGetAreaSize+0x2c>)
 8002392:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002396:	789b      	ldrb	r3, [r3, #2]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d006      	beq.n	80023aa <EEPROMGetAreaSize+0x1a>
	{
		size = VirtualEEPROMInstanceMap[eeprom].regTable.withInst[reg].sizeOfInstance;
	}
	else
	{
		size = VirtualEEPROMInstanceMap[eeprom].regTable.noInst[reg].sizeOfInstance;
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <EEPROMGetAreaSize+0x2c>)
 800239e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80023a2:	6843      	ldr	r3, [r0, #4]
 80023a4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}
	return size;
}
 80023a8:	4770      	bx	lr
		size = VirtualEEPROMInstanceMap[eeprom].regTable.withInst[reg].sizeOfInstance;
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <EEPROMGetAreaSize+0x2c>)
 80023ac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80023b0:	6843      	ldr	r3, [r0, #4]
 80023b2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80023b6:	7848      	ldrb	r0, [r1, #1]
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	08007cd0 	.word	0x08007cd0

080023c0 <GetPageState>:
 * @brief  Get page state in page header
 * @param  flashArea to be read
 * @retval Page status
 ****************************************************************************/
static EE_State_type GetPageState(tFlash flashArea)
{
 80023c0:	b510      	push	{r4, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	4604      	mov	r4, r0
	EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 80023c6:	2200      	movs	r2, #0
 80023c8:	2300      	movs	r3, #0
 80023ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80023ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80023d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023d6:	e9cd 2300 	strd	r2, r3, [sp]

	/* Get page state information from page header (3 first elements) */
	FlashReadData(flashArea, &status1, (uint32_t) (EE_ELEMENT_SIZE*0U));
 80023da:	a906      	add	r1, sp, #24
 80023dc:	f000 fd48 	bl	8002e70 <FlashReadData>
	FlashReadData(flashArea, &status2, (uint32_t) (EE_ELEMENT_SIZE*1U));
 80023e0:	2208      	movs	r2, #8
 80023e2:	a904      	add	r1, sp, #16
 80023e4:	4620      	mov	r0, r4
 80023e6:	f000 fd43 	bl	8002e70 <FlashReadData>
	FlashReadData(flashArea, &status3, (uint32_t) (EE_ELEMENT_SIZE*2U));
 80023ea:	2210      	movs	r2, #16
 80023ec:	a902      	add	r1, sp, #8
 80023ee:	4620      	mov	r0, r4
 80023f0:	f000 fd3e 	bl	8002e70 <FlashReadData>
	FlashReadData(flashArea, &status4, (uint32_t) (EE_ELEMENT_SIZE*3U));
 80023f4:	2218      	movs	r2, #24
 80023f6:	4669      	mov	r1, sp
 80023f8:	4620      	mov	r0, r4
 80023fa:	f000 fd39 	bl	8002e70 <FlashReadData>

	/* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
	if (status4 != EE_PAGESTAT_ERASED)
 80023fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	bf08      	it	eq
 8002408:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800240c:	d002      	beq.n	8002414 <GetPageState+0x54>
	{
		return STATE_PAGE_ERASING;
 800240e:	2004      	movs	r0, #4
		return STATE_PAGE_RECEIVE;
	}

	/* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
	return STATE_PAGE_ERASED;
}
 8002410:	b008      	add	sp, #32
 8002412:	bd10      	pop	{r4, pc}
	if (status3 != EE_PAGESTAT_ERASED)
 8002414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	bf08      	it	eq
 800241e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002422:	d001      	beq.n	8002428 <GetPageState+0x68>
		return STATE_PAGE_VALID;
 8002424:	2003      	movs	r0, #3
 8002426:	e7f3      	b.n	8002410 <GetPageState+0x50>
	if (status2 != EE_PAGESTAT_ERASED)
 8002428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	bf08      	it	eq
 8002432:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002436:	d001      	beq.n	800243c <GetPageState+0x7c>
		return STATE_PAGE_ACTIVE;
 8002438:	2002      	movs	r0, #2
 800243a:	e7e9      	b.n	8002410 <GetPageState+0x50>
	if (status1 != EE_PAGESTAT_ERASED)
 800243c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	bf08      	it	eq
 8002446:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800244a:	d001      	beq.n	8002450 <GetPageState+0x90>
		return STATE_PAGE_RECEIVE;
 800244c:	2001      	movs	r0, #1
 800244e:	e7df      	b.n	8002410 <GetPageState+0x50>
	return STATE_PAGE_ERASED;
 8002450:	2000      	movs	r0, #0
 8002452:	e7dd      	b.n	8002410 <GetPageState+0x50>

08002454 <SetPageState>:
{
 8002454:	b500      	push	{lr}
 8002456:	b083      	sub	sp, #12
	switch(State)
 8002458:	3901      	subs	r1, #1
 800245a:	2903      	cmp	r1, #3
 800245c:	d839      	bhi.n	80024d2 <SetPageState+0x7e>
 800245e:	e8df f001 	tbb	[pc, r1]
 8002462:	0e02      	.short	0x0e02
 8002464:	2b1e      	.short	0x2b1e
			if (FlashProgramData(flashArea, EE_PAGESTAT_RECEIVE, (EE_ELEMENT_SIZE*0U)) != RET_OK)
 8002466:	2300      	movs	r3, #0
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800246e:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8002472:	f000 fd17 	bl	8002ea4 <FlashProgramData>
 8002476:	4603      	mov	r3, r0
 8002478:	b158      	cbz	r0, 8002492 <SetPageState+0x3e>
				return RET_FAIL;
 800247a:	2301      	movs	r3, #1
 800247c:	e009      	b.n	8002492 <SetPageState+0x3e>
			if (FlashProgramData(flashArea, EE_PAGESTAT_ACTIVE, (EE_ELEMENT_SIZE*1U)) != RET_OK)
 800247e:	2308      	movs	r3, #8
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8002486:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800248a:	f000 fd0b 	bl	8002ea4 <FlashProgramData>
 800248e:	4603      	mov	r3, r0
 8002490:	b918      	cbnz	r0, 800249a <SetPageState+0x46>
}
 8002492:	4618      	mov	r0, r3
 8002494:	b003      	add	sp, #12
 8002496:	f85d fb04 	ldr.w	pc, [sp], #4
				return RET_FAIL;
 800249a:	2301      	movs	r3, #1
 800249c:	e7f9      	b.n	8002492 <SetPageState+0x3e>
			if (FlashProgramData(flashArea, EE_PAGESTAT_VALID, (EE_ELEMENT_SIZE*2U)) != RET_OK)
 800249e:	2310      	movs	r3, #16
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80024a6:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80024aa:	f000 fcfb 	bl	8002ea4 <FlashProgramData>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d0ee      	beq.n	8002492 <SetPageState+0x3e>
				return RET_FAIL;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e7ec      	b.n	8002492 <SetPageState+0x3e>
			if (FlashProgramData(flashArea, EE_PAGESTAT_ERASING, (EE_ELEMENT_SIZE*4U)) != RET_OK)
 80024b8:	2320      	movs	r3, #32
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80024c0:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80024c4:	f000 fcee 	bl	8002ea4 <FlashProgramData>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2800      	cmp	r0, #0
 80024cc:	d0e1      	beq.n	8002492 <SetPageState+0x3e>
				return RET_FAIL;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e7df      	b.n	8002492 <SetPageState+0x3e>
	return RET_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e7dd      	b.n	8002492 <SetPageState+0x3e>
	...

080024d8 <VirtualEEPROMinit>:
{
 80024d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024dc:	b083      	sub	sp, #12
	uint16_t lastOffsetArea = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	9301      	str	r3, [sp, #4]
	uint16_t nextVirtOffset = 0x1;
 80024e2:	2501      	movs	r5, #1
	for (eeprom = 0; eeprom < NUM_OF_TABLE_EEPROM; eeprom++)
 80024e4:	461e      	mov	r6, r3
 80024e6:	e02d      	b.n	8002544 <VirtualEEPROMinit+0x6c>
				virtualEEPROMareaContext[eeprom].areaEEPROM[reg].virtualOffset = nextVirtOffset;
 80024e8:	4b20      	ldr	r3, [pc, #128]	; (800256c <VirtualEEPROMinit+0x94>)
 80024ea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	eb03 0884 	add.w	r8, r3, r4, lsl #2
 80024f4:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
				virtualEEPROMareaContext[eeprom].areaEEPROM[reg].size = EEPROMGetAreaSize(eeprom,reg);
 80024f8:	4639      	mov	r1, r7
 80024fa:	4630      	mov	r0, r6
 80024fc:	f7ff ff48 	bl	8002390 <EEPROMGetAreaSize>
 8002500:	f8a8 0002 	strh.w	r0, [r8, #2]
				nextNumInst = EEPROMGetNumOfInstances(eeprom,reg);
 8002504:	4639      	mov	r1, r7
 8002506:	4630      	mov	r0, r6
 8002508:	f7ff ff30 	bl	800236c <EEPROMGetNumOfInstances>
				nextVirtOffset = virtualEEPROMareaContext[eeprom].areaEEPROM[reg].virtualOffset + nextNumInst;
 800250c:	fa15 f580 	uxtah	r5, r5, r0
 8002510:	b2ad      	uxth	r5, r5
			for (reg = 0; reg < areaSize; reg++ )
 8002512:	3401      	adds	r4, #1
 8002514:	b2e4      	uxtb	r4, r4
 8002516:	b2a7      	uxth	r7, r4
 8002518:	454c      	cmp	r4, r9
 800251a:	d3e5      	bcc.n	80024e8 <VirtualEEPROMinit+0x10>
			if ( nextVirtOffset > (VirtualEEPROMInstanceMap[eeprom].offsetArea + lastOffsetArea))
 800251c:	9a01      	ldr	r2, [sp, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	445b      	add	r3, fp
 8002522:	429d      	cmp	r5, r3
 8002524:	dc20      	bgt.n	8002568 <VirtualEEPROMinit+0x90>
				nextVirtOffset = VirtualEEPROMInstanceMap[eeprom].offsetArea + lastOffsetArea;
 8002526:	4613      	mov	r3, r2
 8002528:	445b      	add	r3, fp
 800252a:	b29b      	uxth	r3, r3
 800252c:	9301      	str	r3, [sp, #4]
				lastOffsetArea = nextVirtOffset;
 800252e:	461d      	mov	r5, r3
 8002530:	e006      	b.n	8002540 <VirtualEEPROMinit+0x68>
			virtualEEPROMareaContext[eeprom].areaEEPROM[0].virtualOffset = 0xFFFF;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <VirtualEEPROMinit+0x94>)
 8002534:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800253e:	801a      	strh	r2, [r3, #0]
	for (eeprom = 0; eeprom < NUM_OF_TABLE_EEPROM; eeprom++)
 8002540:	3601      	adds	r6, #1
 8002542:	b2f6      	uxtb	r6, r6
 8002544:	2e04      	cmp	r6, #4
 8002546:	d80b      	bhi.n	8002560 <VirtualEEPROMinit+0x88>
		if ( VirtualEEPROMInstanceMap[eeprom].offsetArea != 0 )
 8002548:	46b2      	mov	sl, r6
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <VirtualEEPROMinit+0x98>)
 800254c:	f833 b036 	ldrh.w	fp, [r3, r6, lsl #3]
 8002550:	f1bb 0f00 	cmp.w	fp, #0
 8002554:	d0ed      	beq.n	8002532 <VirtualEEPROMinit+0x5a>
			areaSize = virtualEEPROMareaContext[eeprom].areaSize;
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <VirtualEEPROMinit+0x94>)
 8002558:	f813 9036 	ldrb.w	r9, [r3, r6, lsl #3]
			for (reg = 0; reg < areaSize; reg++ )
 800255c:	2400      	movs	r4, #0
 800255e:	e7da      	b.n	8002516 <VirtualEEPROMinit+0x3e>
	return success;
 8002560:	2000      	movs	r0, #0
}
 8002562:	b003      	add	sp, #12
 8002564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return RET_NOT_INITIALIZED;
 8002568:	2002      	movs	r0, #2
 800256a:	e7fa      	b.n	8002562 <VirtualEEPROMinit+0x8a>
 800256c:	08007ca4 	.word	0x08007ca4
 8002570:	08007cd0 	.word	0x08007cd0

08002574 <VirtualEEPROMStop>:
}
 8002574:	2000      	movs	r0, #0
 8002576:	4770      	bx	lr

08002578 <VirtualEEPROMSleep>:
}
 8002578:	2000      	movs	r0, #0
 800257a:	4770      	bx	lr

0800257c <VirtualEEPROMWake>:
}
 800257c:	2000      	movs	r0, #0
 800257e:	4770      	bx	lr

08002580 <VirtualEEPROMFormat>:
{
 8002580:	b570      	push	{r4, r5, r6, lr}
 8002582:	4606      	mov	r6, r0
	SetPageState(EEPROMDeviceMap[eepromDevice].flashArea1, STATE_PAGE_ERASING);
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <VirtualEEPROMFormat+0x60>)
 8002586:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
 800258a:	2104      	movs	r1, #4
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff ff61 	bl	8002454 <SetPageState>
	FlashStatus = FlashErase( EEPROMDeviceMap[eepromDevice].flashArea1, FLASH_ALL_PAGES);
 8002592:	21ff      	movs	r1, #255	; 0xff
 8002594:	4620      	mov	r0, r4
 8002596:	f000 fce7 	bl	8002f68 <FlashErase>
	if(FlashStatus == RET_OK)
 800259a:	4605      	mov	r5, r0
 800259c:	b110      	cbz	r0, 80025a4 <VirtualEEPROMFormat+0x24>
	if(FlashStatus == RET_OK)
 800259e:	b15d      	cbz	r5, 80025b8 <VirtualEEPROMFormat+0x38>
}
 80025a0:	4628      	mov	r0, r5
 80025a2:	bd70      	pop	{r4, r5, r6, pc}
		FlashStatus = SetPageState(EEPROMDeviceMap[eepromDevice].flashArea1, STATE_PAGE_ACTIVE);
 80025a4:	2102      	movs	r1, #2
 80025a6:	4620      	mov	r0, r4
 80025a8:	f7ff ff54 	bl	8002454 <SetPageState>
 80025ac:	4605      	mov	r5, r0
		virtualEEPROMRegister.ptrAddrOffset = INITIAL_DATA_AREA;
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <VirtualEEPROMFormat+0x64>)
 80025b0:	2220      	movs	r2, #32
 80025b2:	601a      	str	r2, [r3, #0]
		virtualEEPROMRegister.actualPage =  EEPROMDeviceMap[eepromDevice].flashArea1;
 80025b4:	721c      	strb	r4, [r3, #8]
 80025b6:	e7f2      	b.n	800259e <VirtualEEPROMFormat+0x1e>
		if(GetPageState(EEPROMDeviceMap[eepromDevice].flashArea2) != STATE_PAGE_ERASED)
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <VirtualEEPROMFormat+0x60>)
 80025ba:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 80025be:	7874      	ldrb	r4, [r6, #1]
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7ff fefd 	bl	80023c0 <GetPageState>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d0ea      	beq.n	80025a0 <VirtualEEPROMFormat+0x20>
			SetPageState(EEPROMDeviceMap[eepromDevice].flashArea2, STATE_PAGE_ERASING);
 80025ca:	2104      	movs	r1, #4
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7ff ff41 	bl	8002454 <SetPageState>
			FlashStatus = FlashErase( EEPROMDeviceMap[eepromDevice].flashArea2, FLASH_ALL_PAGES);
 80025d2:	21ff      	movs	r1, #255	; 0xff
 80025d4:	4620      	mov	r0, r4
 80025d6:	f000 fcc7 	bl	8002f68 <FlashErase>
 80025da:	4605      	mov	r5, r0
 80025dc:	e7e0      	b.n	80025a0 <VirtualEEPROMFormat+0x20>
 80025de:	bf00      	nop
 80025e0:	08007ccc 	.word	0x08007ccc
 80025e4:	200007b8 	.word	0x200007b8

080025e8 <VirtualEEPROMFindValidArea>:
{
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	4606      	mov	r6, r0
	FlashAreaStatus1 = GetPageState(EEPROMDeviceMap[eepromDevice].flashArea1);
 80025ec:	4c0a      	ldr	r4, [pc, #40]	; (8002618 <VirtualEEPROMFindValidArea+0x30>)
 80025ee:	f814 5010 	ldrb.w	r5, [r4, r0, lsl #1]
 80025f2:	4628      	mov	r0, r5
 80025f4:	f7ff fee4 	bl	80023c0 <GetPageState>
 80025f8:	4607      	mov	r7, r0
	FlashAreaStatus2 = GetPageState(EEPROMDeviceMap[eepromDevice].flashArea2);
 80025fa:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80025fe:	7864      	ldrb	r4, [r4, #1]
 8002600:	4620      	mov	r0, r4
 8002602:	f7ff fedd 	bl	80023c0 <GetPageState>
	if (FlashAreaStatus1 == STATE_PAGE_ACTIVE)
 8002606:	2f02      	cmp	r7, #2
 8002608:	d002      	beq.n	8002610 <VirtualEEPROMFindValidArea+0x28>
	else if (FlashAreaStatus2 == STATE_PAGE_ACTIVE)
 800260a:	2802      	cmp	r0, #2
 800260c:	d002      	beq.n	8002614 <VirtualEEPROMFindValidArea+0x2c>
	tFlash areaNumber 	= NO_VALID_AREA;
 800260e:	25ab      	movs	r5, #171	; 0xab
}
 8002610:	4628      	mov	r0, r5
 8002612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		areaNumber = EEPROMDeviceMap[eepromDevice].flashArea2;           /* Area2 valid */
 8002614:	4625      	mov	r5, r4
 8002616:	e7fb      	b.n	8002610 <VirtualEEPROMFindValidArea+0x28>
 8002618:	08007ccc 	.word	0x08007ccc

0800261c <VirtualEEPROMEraseOldPage>:
{
 800261c:	b510      	push	{r4, lr}
	if (virtualEEPROMRegister.actualPage == EEPROMDeviceMap[eepromDevice].flashArea2)       /* Area 2 valid */
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <VirtualEEPROMEraseOldPage+0x40>)
 8002620:	7a1a      	ldrb	r2, [r3, #8]
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <VirtualEEPROMEraseOldPage+0x44>)
 8002624:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002628:	785c      	ldrb	r4, [r3, #1]
 800262a:	42a2      	cmp	r2, r4
 800262c:	d005      	beq.n	800263a <VirtualEEPROMEraseOldPage+0x1e>
		FlashAreaStatus = GetPageState(EEPROMDeviceMap[eepromDevice].flashArea2);
 800262e:	4620      	mov	r0, r4
 8002630:	f7ff fec6 	bl	80023c0 <GetPageState>
	if ( FlashAreaStatus != STATE_PAGE_ERASED )
 8002634:	b940      	cbnz	r0, 8002648 <VirtualEEPROMEraseOldPage+0x2c>
	eError success = RET_OK;
 8002636:	2000      	movs	r0, #0
}
 8002638:	bd10      	pop	{r4, pc}
		FlashAreaStatus = GetPageState(EEPROMDeviceMap[eepromDevice].flashArea1);
 800263a:	4b09      	ldr	r3, [pc, #36]	; (8002660 <VirtualEEPROMEraseOldPage+0x44>)
 800263c:	f813 4010 	ldrb.w	r4, [r3, r0, lsl #1]
 8002640:	4620      	mov	r0, r4
 8002642:	f7ff febd 	bl	80023c0 <GetPageState>
 8002646:	e7f5      	b.n	8002634 <VirtualEEPROMEraseOldPage+0x18>
		SetPageState(OldArea, STATE_PAGE_ERASING);
 8002648:	2104      	movs	r1, #4
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff ff02 	bl	8002454 <SetPageState>
		success = FlashErase( OldArea, FLASH_ALL_PAGES);
 8002650:	21ff      	movs	r1, #255	; 0xff
 8002652:	4620      	mov	r0, r4
 8002654:	f000 fc88 	bl	8002f68 <FlashErase>
 8002658:	bd10      	pop	{r4, pc}
 800265a:	bf00      	nop
 800265c:	200007b8 	.word	0x200007b8
 8002660:	08007ccc 	.word	0x08007ccc

08002664 <findInCache>:
	for ( cacheIndex = VirtualEEPROMCacheUsed; cacheIndex > 0; --cacheIndex)
 8002664:	4b0d      	ldr	r3, [pc, #52]	; (800269c <findInCache+0x38>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	b1ab      	cbz	r3, 8002696 <findInCache+0x32>
{
 800266a:	b410      	push	{r4}
		if ( virtualEEPROMCache[cacheIndex].virtualAddress == virtualAddress)
 800266c:	461c      	mov	r4, r3
 800266e:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <findInCache+0x3c>)
 8002670:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8002674:	4282      	cmp	r2, r0
 8002676:	d005      	beq.n	8002684 <findInCache+0x20>
	for ( cacheIndex = VirtualEEPROMCacheUsed; cacheIndex > 0; --cacheIndex)
 8002678:	3b01      	subs	r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f5      	bne.n	800266c <findInCache+0x8>
	eError result = RET_FAIL;
 8002680:	2001      	movs	r0, #1
 8002682:	e005      	b.n	8002690 <findInCache+0x2c>
			*value = virtualEEPROMCache[cacheIndex].value;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <findInCache+0x3c>)
 8002686:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800268a:	6863      	ldr	r3, [r4, #4]
 800268c:	600b      	str	r3, [r1, #0]
			result = RET_OK;
 800268e:	2000      	movs	r0, #0
}
 8002690:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002694:	4770      	bx	lr
	eError result = RET_FAIL;
 8002696:	2001      	movs	r0, #1
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000498 	.word	0x20000498
 80026a0:	200007dc 	.word	0x200007dc

080026a4 <addToCache>:
	if ( (VirtualEEPROMCacheUsed < SIZE_OF_VIRTUAL_EEPROM_CACHE) )
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <addToCache+0x24>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b4f      	cmp	r3, #79	; 0x4f
 80026aa:	d80a      	bhi.n	80026c2 <addToCache+0x1e>
		virtualEEPROMCache[VirtualEEPROMCacheUsed].virtualAddress = virtualAddress;
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <addToCache+0x28>)
 80026ae:	f822 0033 	strh.w	r0, [r2, r3, lsl #3]
		virtualEEPROMCache[VirtualEEPROMCacheUsed].value = value;
 80026b2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80026b6:	6051      	str	r1, [r2, #4]
		VirtualEEPROMCacheUsed++;
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <addToCache+0x24>)
 80026bc:	7013      	strb	r3, [r2, #0]
		result = RET_OK;
 80026be:	2000      	movs	r0, #0
 80026c0:	4770      	bx	lr
	eError result = RET_FAIL;
 80026c2:	2001      	movs	r0, #1
}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000498 	.word	0x20000498
 80026cc:	200007dc 	.word	0x200007dc

080026d0 <updateCache>:
{
 80026d0:	b510      	push	{r4, lr}
 80026d2:	4604      	mov	r4, r0
	for ( cacheIndex = VirtualEEPROMCacheUsed; cacheIndex > 0; --cacheIndex)
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <updateCache+0x38>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b173      	cbz	r3, 80026f8 <updateCache+0x28>
		if ( virtualEEPROMCache[cacheIndex].virtualAddress == virtualAddress)
 80026da:	4618      	mov	r0, r3
 80026dc:	4a0b      	ldr	r2, [pc, #44]	; (800270c <updateCache+0x3c>)
 80026de:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 80026e2:	42a2      	cmp	r2, r4
 80026e4:	d002      	beq.n	80026ec <updateCache+0x1c>
	for ( cacheIndex = VirtualEEPROMCacheUsed; cacheIndex > 0; --cacheIndex)
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e7f5      	b.n	80026d8 <updateCache+0x8>
			virtualEEPROMCache[cacheIndex].value = value;
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <updateCache+0x3c>)
 80026ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80026f2:	6041      	str	r1, [r0, #4]
			result = RET_OK;
 80026f4:	2000      	movs	r0, #0
			break;
 80026f6:	e000      	b.n	80026fa <updateCache+0x2a>
	eError result = RET_FAIL;
 80026f8:	2001      	movs	r0, #1
	if ( result != RET_OK )
 80026fa:	b900      	cbnz	r0, 80026fe <updateCache+0x2e>
}
 80026fc:	bd10      	pop	{r4, pc}
 80026fe:	4620      	mov	r0, r4
		result = addToCache( virtualAddress, value);
 8002700:	f7ff ffd0 	bl	80026a4 <addToCache>
 8002704:	e7fa      	b.n	80026fc <updateCache+0x2c>
 8002706:	bf00      	nop
 8002708:	20000498 	.word	0x20000498
 800270c:	200007dc 	.word	0x200007dc

08002710 <CalculateCrc>:
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <CalculateCrc+0x14>)
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	609a      	str	r2, [r3, #8]
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  WRITE_REG(CRCx->DR, InData);
 800271a:	6018      	str	r0, [r3, #0]
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);
  *pReg = InData;
 800271c:	8019      	strh	r1, [r3, #0]
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
  return (uint16_t)READ_REG(CRCx->DR);
 800271e:	6818      	ldr	r0, [r3, #0]
  LL_CRC_FeedData32(CRC, Data);
  LL_CRC_FeedData16(CRC, VirtAddress);

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
}
 8002720:	b280      	uxth	r0, r0
 8002722:	4770      	bx	lr
 8002724:	40023000 	.word	0x40023000

08002728 <VirtualEEPROMReadVariable>:
{
 8002728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272a:	b083      	sub	sp, #12
 800272c:	4606      	mov	r6, r0
 800272e:	460d      	mov	r5, r1
 8002730:	4617      	mov	r7, r2
 8002732:	461c      	mov	r4, r3
	uint64_t OffsetValue = 0;
 8002734:	2200      	movs	r2, #0
 8002736:	2300      	movs	r3, #0
 8002738:	e9cd 2300 	strd	r2, r3, [sp]
	if ( findInCache(virtualOffset, Data) != RET_OK )
 800273c:	4639      	mov	r1, r7
 800273e:	4628      	mov	r0, r5
 8002740:	f7ff ff90 	bl	8002664 <findInCache>
 8002744:	b1f8      	cbz	r0, 8002786 <VirtualEEPROMReadVariable+0x5e>
		Offset = offsetStartAddr - EE_ELEMENT_SIZE;
 8002746:	3c08      	subs	r4, #8
		while (Offset >= INITIAL_DATA_AREA)
 8002748:	2c1f      	cmp	r4, #31
 800274a:	d91a      	bls.n	8002782 <VirtualEEPROMReadVariable+0x5a>
			FlashReadData( areaNumber, &OffsetValue, Offset);
 800274c:	4622      	mov	r2, r4
 800274e:	4669      	mov	r1, sp
 8002750:	4630      	mov	r0, r6
 8002752:	f000 fb8d 	bl	8002e70 <FlashReadData>
			if (EE_VIRTUALADDRESS_VALUE(OffsetValue) == virtualOffset)
 8002756:	9801      	ldr	r0, [sp, #4]
 8002758:	f8bd 1000 	ldrh.w	r1, [sp]
 800275c:	428d      	cmp	r5, r1
 800275e:	d001      	beq.n	8002764 <VirtualEEPROMReadVariable+0x3c>
				Offset -= EE_ELEMENT_SIZE;
 8002760:	3c08      	subs	r4, #8
 8002762:	e7f1      	b.n	8002748 <VirtualEEPROMReadVariable+0x20>
				crc = CalculateCrc(EE_DATA_VALUE(OffsetValue), EE_VIRTUALADDRESS_VALUE(OffsetValue));
 8002764:	f7ff ffd4 	bl	8002710 <CalculateCrc>
				if (crc == EE_CRC_VALUE(OffsetValue))
 8002768:	9901      	ldr	r1, [sp, #4]
 800276a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800276e:	4298      	cmp	r0, r3
 8002770:	d001      	beq.n	8002776 <VirtualEEPROMReadVariable+0x4e>
	uint16_t ReadStatus 	= 1;
 8002772:	2001      	movs	r0, #1
 8002774:	e008      	b.n	8002788 <VirtualEEPROMReadVariable+0x60>
					*Data = EE_DATA_VALUE(OffsetValue);
 8002776:	6039      	str	r1, [r7, #0]
					addToCache(virtualOffset, *Data);
 8002778:	4628      	mov	r0, r5
 800277a:	f7ff ff93 	bl	80026a4 <addToCache>
					ReadStatus = 0;
 800277e:	2000      	movs	r0, #0
 8002780:	e002      	b.n	8002788 <VirtualEEPROMReadVariable+0x60>
	uint16_t ReadStatus 	= 1;
 8002782:	2001      	movs	r0, #1
 8002784:	e000      	b.n	8002788 <VirtualEEPROMReadVariable+0x60>
		ReadStatus = 0;
 8002786:	2000      	movs	r0, #0
}
 8002788:	b003      	add	sp, #12
 800278a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800278c <VirtualEEPROMReadRegister>:
{
 800278c:	b510      	push	{r4, lr}
 800278e:	b082      	sub	sp, #8
	uint32_t varValue = 0;
 8002790:	2400      	movs	r4, #0
 8002792:	9401      	str	r4, [sp, #4]
	if ( instanceReg < virtualEEPROMareaContext[eeprom].areaEEPROM[reg].size )
 8002794:	4c0d      	ldr	r4, [pc, #52]	; (80027cc <VirtualEEPROMReadRegister+0x40>)
 8002796:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800279a:	6840      	ldr	r0, [r0, #4]
 800279c:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 80027a0:	8864      	ldrh	r4, [r4, #2]
 80027a2:	4294      	cmp	r4, r2
 80027a4:	d804      	bhi.n	80027b0 <VirtualEEPROMReadRegister+0x24>
    uint16_t varExist = 0;
 80027a6:	2000      	movs	r0, #0
    if ( varExist != 0 )
 80027a8:	b100      	cbz	r0, 80027ac <VirtualEEPROMReadRegister+0x20>
        result = RET_FAIL;
 80027aa:	2001      	movs	r0, #1
}
 80027ac:	b002      	add	sp, #8
 80027ae:	bd10      	pop	{r4, pc}
 80027b0:	461c      	mov	r4, r3
		offset = virtualEEPROMareaContext[eeprom].areaEEPROM[reg].virtualOffset + instanceReg;
 80027b2:	f830 1021 	ldrh.w	r1, [r0, r1, lsl #2]
 80027b6:	4411      	add	r1, r2
		varExist = VirtualEEPROMReadVariable(virtualEEPROMRegister.actualPage, offset, &varValue, virtualEEPROMRegister.ptrAddrOffset);
 80027b8:	4805      	ldr	r0, [pc, #20]	; (80027d0 <VirtualEEPROMReadRegister+0x44>)
 80027ba:	6803      	ldr	r3, [r0, #0]
 80027bc:	aa01      	add	r2, sp, #4
 80027be:	b289      	uxth	r1, r1
 80027c0:	7a00      	ldrb	r0, [r0, #8]
 80027c2:	f7ff ffb1 	bl	8002728 <VirtualEEPROMReadVariable>
		*value = varValue;
 80027c6:	9b01      	ldr	r3, [sp, #4]
 80027c8:	6023      	str	r3, [r4, #0]
 80027ca:	e7ed      	b.n	80027a8 <VirtualEEPROMReadRegister+0x1c>
 80027cc:	08007ca4 	.word	0x08007ca4
 80027d0:	200007b8 	.word	0x200007b8

080027d4 <VirtualEEPROMVerifyPageFullWriteVariable>:
	if (areaNumber == NO_VALID_AREA)
 80027d4:	28ab      	cmp	r0, #171	; 0xab
 80027d6:	d02d      	beq.n	8002834 <VirtualEEPROMVerifyPageFullWriteVariable+0x60>
{
 80027d8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	4614      	mov	r4, r2
 80027e0:	460d      	mov	r5, r1
 80027e2:	4606      	mov	r6, r0
	if ((Data == 0U) && (VirtOffset == 0U))
 80027e4:	b902      	cbnz	r2, 80027e8 <VirtualEEPROMVerifyPageFullWriteVariable+0x14>
 80027e6:	b1c9      	cbz	r1, 800281c <VirtualEEPROMVerifyPageFullWriteVariable+0x48>
		crc = CalculateCrc(Data, VirtOffset);
 80027e8:	4629      	mov	r1, r5
 80027ea:	4620      	mov	r0, r4
 80027ec:	f7ff ff90 	bl	8002710 <CalculateCrc>
	dataWrite = EE_ELEMENT_VALUE(VirtOffset, Data, crc);
 80027f0:	f04f 0800 	mov.w	r8, #0
 80027f4:	0400      	lsls	r0, r0, #16
 80027f6:	ea48 0800 	orr.w	r8, r8, r0
 80027fa:	b2aa      	uxth	r2, r5
 80027fc:	2300      	movs	r3, #0
	success = FlashProgramData(areaNumber, dataWrite, virtualEEPROMRegister.ptrAddrOffset);
 80027fe:	490e      	ldr	r1, [pc, #56]	; (8002838 <VirtualEEPROMVerifyPageFullWriteVariable+0x64>)
 8002800:	6809      	ldr	r1, [r1, #0]
 8002802:	9100      	str	r1, [sp, #0]
 8002804:	ea42 0208 	orr.w	r2, r2, r8
 8002808:	4323      	orrs	r3, r4
 800280a:	4630      	mov	r0, r6
 800280c:	f000 fb4a 	bl	8002ea4 <FlashProgramData>
	if (success == RET_OK)
 8002810:	4603      	mov	r3, r0
 8002812:	b128      	cbz	r0, 8002820 <VirtualEEPROMVerifyPageFullWriteVariable+0x4c>
	return PAGE_FULL;
 8002814:	2080      	movs	r0, #128	; 0x80
}
 8002816:	b002      	add	sp, #8
 8002818:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		crc = 0U;
 800281c:	4610      	mov	r0, r2
 800281e:	e7e7      	b.n	80027f0 <VirtualEEPROMVerifyPageFullWriteVariable+0x1c>
		if ( (virtualEEPROMRegister.ptrAddrOffset + EE_ELEMENT_SIZE) <= virtualEEPROMRegister.maxOffset )
 8002820:	4905      	ldr	r1, [pc, #20]	; (8002838 <VirtualEEPROMVerifyPageFullWriteVariable+0x64>)
 8002822:	680a      	ldr	r2, [r1, #0]
 8002824:	3208      	adds	r2, #8
 8002826:	6849      	ldr	r1, [r1, #4]
 8002828:	428a      	cmp	r2, r1
 800282a:	d801      	bhi.n	8002830 <VirtualEEPROMVerifyPageFullWriteVariable+0x5c>
			virtualEEPROMRegister.ptrAddrOffset += EE_ELEMENT_SIZE;
 800282c:	4902      	ldr	r1, [pc, #8]	; (8002838 <VirtualEEPROMVerifyPageFullWriteVariable+0x64>)
 800282e:	600a      	str	r2, [r1, #0]
		return success;
 8002830:	b298      	uxth	r0, r3
 8002832:	e7f0      	b.n	8002816 <VirtualEEPROMVerifyPageFullWriteVariable+0x42>
		return  NO_VALID_AREA;
 8002834:	20ab      	movs	r0, #171	; 0xab
 8002836:	4770      	bx	lr
 8002838:	200007b8 	.word	0x200007b8

0800283c <VirtualEEPROMTransferPage>:
{
 800283c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002840:	b082      	sub	sp, #8
	uint32_t DataVar		= 0;
 8002842:	2300      	movs	r3, #0
 8002844:	9300      	str	r3, [sp, #0]
	if (virtualEEPROMRegister.actualPage == EEPROMDeviceMap[eepromDevice].flashArea2)       /* Area2 valid */
 8002846:	4b45      	ldr	r3, [pc, #276]	; (800295c <VirtualEEPROMTransferPage+0x120>)
 8002848:	7a1a      	ldrb	r2, [r3, #8]
 800284a:	4b45      	ldr	r3, [pc, #276]	; (8002960 <VirtualEEPROMTransferPage+0x124>)
 800284c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002850:	f893 a001 	ldrb.w	sl, [r3, #1]
 8002854:	4552      	cmp	r2, sl
 8002856:	d009      	beq.n	800286c <VirtualEEPROMTransferPage+0x30>
	else if (virtualEEPROMRegister.actualPage == EEPROMDeviceMap[eepromDevice].flashArea1)  /* Area1 valid */
 8002858:	4b41      	ldr	r3, [pc, #260]	; (8002960 <VirtualEEPROMTransferPage+0x124>)
 800285a:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800285e:	429a      	cmp	r2, r3
 8002860:	d025      	beq.n	80028ae <VirtualEEPROMTransferPage+0x72>
		return NO_VALID_AREA;       /* No valid Page */
 8002862:	24ab      	movs	r4, #171	; 0xab
}
 8002864:	4620      	mov	r0, r4
 8002866:	b002      	add	sp, #8
 8002868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NewArea = EEPROMDeviceMap[eepromDevice].flashArea1;
 800286c:	4b3c      	ldr	r3, [pc, #240]	; (8002960 <VirtualEEPROMTransferPage+0x124>)
 800286e:	f813 9010 	ldrb.w	r9, [r3, r0, lsl #1]
	SetPageState(OldArea, STATE_PAGE_VALID);
 8002872:	2103      	movs	r1, #3
 8002874:	4650      	mov	r0, sl
 8002876:	f7ff fded 	bl	8002454 <SetPageState>
	if(GetPageState(NewArea) != STATE_PAGE_ERASED)
 800287a:	4648      	mov	r0, r9
 800287c:	f7ff fda0 	bl	80023c0 <GetPageState>
 8002880:	b148      	cbz	r0, 8002896 <VirtualEEPROMTransferPage+0x5a>
		SetPageState(NewArea, STATE_PAGE_ERASING);
 8002882:	2104      	movs	r1, #4
 8002884:	4648      	mov	r0, r9
 8002886:	f7ff fde5 	bl	8002454 <SetPageState>
		if(FlashErase(NewArea, FLASH_ALL_PAGES) != RET_OK)
 800288a:	21ff      	movs	r1, #255	; 0xff
 800288c:	4648      	mov	r0, r9
 800288e:	f000 fb6b 	bl	8002f68 <FlashErase>
 8002892:	2800      	cmp	r0, #0
 8002894:	d160      	bne.n	8002958 <VirtualEEPROMTransferPage+0x11c>
	SetPageState(NewArea, STATE_PAGE_RECEIVE);
 8002896:	2101      	movs	r1, #1
 8002898:	4648      	mov	r0, r9
 800289a:	f7ff fddb 	bl	8002454 <SetPageState>
	virtualEEPROMRegister.ptrAddrOffset = INITIAL_DATA_AREA;
 800289e:	2220      	movs	r2, #32
 80028a0:	4b2e      	ldr	r3, [pc, #184]	; (800295c <VirtualEEPROMTransferPage+0x120>)
 80028a2:	601a      	str	r2, [r3, #0]
	for (eepromTable = 0; eepromTable < NUM_OF_TABLE_EEPROM; eepromTable++ )
 80028a4:	2700      	movs	r7, #0
 80028a6:	2f04      	cmp	r7, #4
 80028a8:	d83c      	bhi.n	8002924 <VirtualEEPROMTransferPage+0xe8>
 80028aa:	2600      	movs	r6, #0
 80028ac:	e02f      	b.n	800290e <VirtualEEPROMTransferPage+0xd2>
		NewArea = EEPROMDeviceMap[eepromDevice].flashArea2;
 80028ae:	46d1      	mov	r9, sl
		OldArea = EEPROMDeviceMap[eepromDevice].flashArea1;
 80028b0:	469a      	mov	sl, r3
 80028b2:	e7de      	b.n	8002872 <VirtualEEPROMTransferPage+0x36>
					ReadStatus = VirtualEEPROMReadVariable(OldArea, offsetVar, &DataVar, virtualEEPROMRegister.maxOffset);
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <VirtualEEPROMTransferPage+0x120>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	466a      	mov	r2, sp
 80028ba:	4621      	mov	r1, r4
 80028bc:	4650      	mov	r0, sl
 80028be:	f7ff ff33 	bl	8002728 <VirtualEEPROMReadVariable>
 80028c2:	e017      	b.n	80028f4 <VirtualEEPROMTransferPage+0xb8>
			for (instance=0; instance < EEPROMGetNumOfInstances(eepromTable,eepromVar); instance++)
 80028c4:	3501      	adds	r5, #1
 80028c6:	b2ad      	uxth	r5, r5
 80028c8:	4631      	mov	r1, r6
 80028ca:	b2f8      	uxtb	r0, r7
 80028cc:	f7ff fd4e 	bl	800236c <EEPROMGetNumOfInstances>
 80028d0:	b280      	uxth	r0, r0
 80028d2:	4285      	cmp	r5, r0
 80028d4:	d219      	bcs.n	800290a <VirtualEEPROMTransferPage+0xce>
				offsetVar = virtualEEPROMareaContext[eepromTable].areaEEPROM[eepromVar].virtualOffset + instance;
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <VirtualEEPROMTransferPage+0x128>)
 80028d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 80028e2:	442c      	add	r4, r5
 80028e4:	b2a4      	uxth	r4, r4
				if ( findInCache(offsetVar, &DataVar) != RET_OK )
 80028e6:	4669      	mov	r1, sp
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7ff febb 	bl	8002664 <findInCache>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d1e0      	bne.n	80028b4 <VirtualEEPROMTransferPage+0x78>
					ReadStatus = 0;
 80028f2:	2000      	movs	r0, #0
				if (ReadStatus != 0x1)
 80028f4:	2801      	cmp	r0, #1
 80028f6:	d0e5      	beq.n	80028c4 <VirtualEEPROMTransferPage+0x88>
					EepromStatus = VirtualEEPROMVerifyPageFullWriteVariable(NewArea, offsetVar, DataVar);
 80028f8:	9a00      	ldr	r2, [sp, #0]
 80028fa:	4621      	mov	r1, r4
 80028fc:	4648      	mov	r0, r9
 80028fe:	f7ff ff69 	bl	80027d4 <VirtualEEPROMVerifyPageFullWriteVariable>
					if (EepromStatus != RET_OK)
 8002902:	2800      	cmp	r0, #0
 8002904:	d0de      	beq.n	80028c4 <VirtualEEPROMTransferPage+0x88>
						return EepromStatus;
 8002906:	b2c4      	uxtb	r4, r0
 8002908:	e7ac      	b.n	8002864 <VirtualEEPROMTransferPage+0x28>
		for (eepromVar = 0; eepromVar < virtualEEPROMareaContext[eepromTable].areaSize; eepromVar++)
 800290a:	3601      	adds	r6, #1
 800290c:	b2b6      	uxth	r6, r6
 800290e:	46b8      	mov	r8, r7
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <VirtualEEPROMTransferPage+0x128>)
 8002912:	f813 3037 	ldrb.w	r3, [r3, r7, lsl #3]
 8002916:	429e      	cmp	r6, r3
 8002918:	d201      	bcs.n	800291e <VirtualEEPROMTransferPage+0xe2>
 800291a:	2500      	movs	r5, #0
 800291c:	e7d4      	b.n	80028c8 <VirtualEEPROMTransferPage+0x8c>
	for (eepromTable = 0; eepromTable < NUM_OF_TABLE_EEPROM; eepromTable++ )
 800291e:	3701      	adds	r7, #1
 8002920:	b2bf      	uxth	r7, r7
 8002922:	e7c0      	b.n	80028a6 <VirtualEEPROMTransferPage+0x6a>
	SetPageState(NewArea, STATE_PAGE_ACTIVE);
 8002924:	2102      	movs	r1, #2
 8002926:	4648      	mov	r0, r9
 8002928:	f7ff fd94 	bl	8002454 <SetPageState>
	SetPageState(OldArea, STATE_PAGE_ERASING);
 800292c:	2104      	movs	r1, #4
 800292e:	4650      	mov	r0, sl
 8002930:	f7ff fd90 	bl	8002454 <SetPageState>
	if(FlashErase(OldArea, FLASH_ALL_PAGES) != RET_OK)
 8002934:	21ff      	movs	r1, #255	; 0xff
 8002936:	4650      	mov	r0, sl
 8002938:	f000 fb16 	bl	8002f68 <FlashErase>
 800293c:	4604      	mov	r4, r0
 800293e:	b108      	cbz	r0, 8002944 <VirtualEEPROMTransferPage+0x108>
		return RET_FAIL;
 8002940:	2401      	movs	r4, #1
 8002942:	e78f      	b.n	8002864 <VirtualEEPROMTransferPage+0x28>
	virtualEEPROMRegister.actualPage = NewArea;
 8002944:	4d05      	ldr	r5, [pc, #20]	; (800295c <VirtualEEPROMTransferPage+0x120>)
 8002946:	f885 9008 	strb.w	r9, [r5, #8]
	FlashGetSize( NewArea, &MaxOffset);
 800294a:	a901      	add	r1, sp, #4
 800294c:	4648      	mov	r0, r9
 800294e:	f000 fad5 	bl	8002efc <FlashGetSize>
	virtualEEPROMRegister.maxOffset = MaxOffset;
 8002952:	9b01      	ldr	r3, [sp, #4]
 8002954:	606b      	str	r3, [r5, #4]
	return success;
 8002956:	e785      	b.n	8002864 <VirtualEEPROMTransferPage+0x28>
			return RET_FAIL;
 8002958:	2401      	movs	r4, #1
 800295a:	e783      	b.n	8002864 <VirtualEEPROMTransferPage+0x28>
 800295c:	200007b8 	.word	0x200007b8
 8002960:	08007ccc 	.word	0x08007ccc
 8002964:	08007ca4 	.word	0x08007ca4

08002968 <VirtualEEPROMinitVirtual>:
{
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	4605      	mov	r5, r0
	FlashAreaStatus1 = GetPageState(EEPROMDeviceMap[eepromDevice].flashArea1);
 800296c:	4c3d      	ldr	r4, [pc, #244]	; (8002a64 <VirtualEEPROMinitVirtual+0xfc>)
 800296e:	f814 7010 	ldrb.w	r7, [r4, r0, lsl #1]
 8002972:	4638      	mov	r0, r7
 8002974:	f7ff fd24 	bl	80023c0 <GetPageState>
 8002978:	4606      	mov	r6, r0
	FlashAreaStatus2 = GetPageState(EEPROMDeviceMap[eepromDevice].flashArea2);
 800297a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800297e:	7864      	ldrb	r4, [r4, #1]
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff fd1d 	bl	80023c0 <GetPageState>
	switch(FlashAreaStatus1)
 8002986:	2e04      	cmp	r6, #4
 8002988:	d867      	bhi.n	8002a5a <VirtualEEPROMinitVirtual+0xf2>
 800298a:	e8df f006 	tbb	[pc, r6]
 800298e:	3503      	.short	0x3503
 8002990:	4c23      	.short	0x4c23
 8002992:	03          	.byte	0x03
 8002993:	00          	.byte	0x00
			virtualEEPROMRegister.actualPage = EEPROMDeviceMap[eepromDevice].flashArea2;
 8002994:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <VirtualEEPROMinitVirtual+0x100>)
 8002996:	721c      	strb	r4, [r3, #8]
			if(FlashAreaStatus2 == STATE_PAGE_ACTIVE)
 8002998:	2802      	cmp	r0, #2
 800299a:	d060      	beq.n	8002a5e <VirtualEEPROMinitVirtual+0xf6>
			else if(FlashAreaStatus2 == STATE_PAGE_RECEIVE)
 800299c:	2801      	cmp	r0, #1
 800299e:	d006      	beq.n	80029ae <VirtualEEPROMinitVirtual+0x46>
			else if(FlashAreaStatus2 == STATE_PAGE_VALID)
 80029a0:	2803      	cmp	r0, #3
 80029a2:	d012      	beq.n	80029ca <VirtualEEPROMinitVirtual+0x62>
	  			success = VirtualEEPROMFormat(eepromDevice);
 80029a4:	4628      	mov	r0, r5
 80029a6:	f7ff fdeb 	bl	8002580 <VirtualEEPROMFormat>
 80029aa:	4603      	mov	r3, r0
 80029ac:	e018      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
				if(FlashAreaStatus1 == STATE_PAGE_ERASING)
 80029ae:	2e04      	cmp	r6, #4
 80029b0:	d005      	beq.n	80029be <VirtualEEPROMinitVirtual+0x56>
			    success = SetPageState(EEPROMDeviceMap[eepromDevice].flashArea2, STATE_PAGE_ACTIVE);
 80029b2:	2102      	movs	r1, #2
 80029b4:	4620      	mov	r0, r4
 80029b6:	f7ff fd4d 	bl	8002454 <SetPageState>
 80029ba:	4603      	mov	r3, r0
 80029bc:	e010      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
					success = VirtualEEPROMEraseOldPage(eepromDevice);
 80029be:	4628      	mov	r0, r5
 80029c0:	f7ff fe2c 	bl	800261c <VirtualEEPROMEraseOldPage>
					if (success != RET_OK)
 80029c4:	4603      	mov	r3, r0
 80029c6:	b958      	cbnz	r0, 80029e0 <VirtualEEPROMinitVirtual+0x78>
 80029c8:	e7f3      	b.n	80029b2 <VirtualEEPROMinitVirtual+0x4a>
				success = VirtualEEPROMTransferPage(eepromDevice);
 80029ca:	4628      	mov	r0, r5
 80029cc:	f7ff ff36 	bl	800283c <VirtualEEPROMTransferPage>
 80029d0:	4603      	mov	r3, r0
 80029d2:	e005      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
			virtualEEPROMRegister.actualPage = EEPROMDeviceMap[eepromDevice].flashArea1;
 80029d4:	4b24      	ldr	r3, [pc, #144]	; (8002a68 <VirtualEEPROMinitVirtual+0x100>)
 80029d6:	721f      	strb	r7, [r3, #8]
			if(FlashAreaStatus2 == STATE_PAGE_ACTIVE)
 80029d8:	2802      	cmp	r0, #2
 80029da:	d003      	beq.n	80029e4 <VirtualEEPROMinitVirtual+0x7c>
			else if(FlashAreaStatus2 != STATE_PAGE_ERASED)
 80029dc:	b938      	cbnz	r0, 80029ee <VirtualEEPROMinitVirtual+0x86>
	eError 	success = RET_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  		success = VirtualEEPROMFormat(eepromDevice);
 80029e4:	4628      	mov	r0, r5
 80029e6:	f7ff fdcb 	bl	8002580 <VirtualEEPROMFormat>
 80029ea:	4603      	mov	r3, r0
 80029ec:	e7f8      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
				success = VirtualEEPROMEraseOldPage(eepromDevice);
 80029ee:	4628      	mov	r0, r5
 80029f0:	f7ff fe14 	bl	800261c <VirtualEEPROMEraseOldPage>
 80029f4:	4603      	mov	r3, r0
 80029f6:	e7f3      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
			if(FlashAreaStatus2 == STATE_PAGE_VALID)
 80029f8:	2803      	cmp	r0, #3
 80029fa:	d00d      	beq.n	8002a18 <VirtualEEPROMinitVirtual+0xb0>
				virtualEEPROMRegister.actualPage = EEPROMDeviceMap[eepromDevice].flashArea1;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <VirtualEEPROMinitVirtual+0x100>)
 80029fe:	721f      	strb	r7, [r3, #8]
				success = VirtualEEPROMEraseOldPage(eepromDevice);
 8002a00:	4628      	mov	r0, r5
 8002a02:	f7ff fe0b 	bl	800261c <VirtualEEPROMEraseOldPage>
				if(success != RET_OK)
 8002a06:	4603      	mov	r3, r0
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d1e9      	bne.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
			    success = SetPageState(EEPROMDeviceMap[eepromDevice].flashArea1, STATE_PAGE_ACTIVE);
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	4638      	mov	r0, r7
 8002a10:	f7ff fd20 	bl	8002454 <SetPageState>
 8002a14:	4603      	mov	r3, r0
 8002a16:	e7e3      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
				virtualEEPROMRegister.actualPage = EEPROMDeviceMap[eepromDevice].flashArea2;
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <VirtualEEPROMinitVirtual+0x100>)
 8002a1a:	721c      	strb	r4, [r3, #8]
				success = VirtualEEPROMTransferPage(eepromDevice);
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	f7ff ff0d 	bl	800283c <VirtualEEPROMTransferPage>
 8002a22:	4603      	mov	r3, r0
 8002a24:	e7dc      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
				virtualEEPROMRegister.actualPage = EEPROMDeviceMap[eepromDevice].flashArea1;
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <VirtualEEPROMinitVirtual+0x100>)
 8002a28:	721f      	strb	r7, [r3, #8]
				if(FlashAreaStatus2 == STATE_PAGE_RECEIVE)
 8002a2a:	2801      	cmp	r0, #1
 8002a2c:	d004      	beq.n	8002a38 <VirtualEEPROMinitVirtual+0xd0>
				else if(FlashAreaStatus2 == STATE_PAGE_ACTIVE)
 8002a2e:	2802      	cmp	r0, #2
 8002a30:	d007      	beq.n	8002a42 <VirtualEEPROMinitVirtual+0xda>
				else if(FlashAreaStatus2 == STATE_PAGE_ERASED)
 8002a32:	b168      	cbz	r0, 8002a50 <VirtualEEPROMinitVirtual+0xe8>
	eError 	success = RET_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e7d3      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
					success = VirtualEEPROMTransferPage(eepromDevice);
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f7ff feff 	bl	800283c <VirtualEEPROMTransferPage>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	e7ce      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
					virtualEEPROMRegister.actualPage = EEPROMDeviceMap[eepromDevice].flashArea2;
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <VirtualEEPROMinitVirtual+0x100>)
 8002a44:	721c      	strb	r4, [r3, #8]
					success = VirtualEEPROMEraseOldPage(eepromDevice);
 8002a46:	4628      	mov	r0, r5
 8002a48:	f7ff fde8 	bl	800261c <VirtualEEPROMEraseOldPage>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	e7c7      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
					success = VirtualEEPROMTransferPage(eepromDevice);
 8002a50:	4628      	mov	r0, r5
 8002a52:	f7ff fef3 	bl	800283c <VirtualEEPROMTransferPage>
 8002a56:	4603      	mov	r3, r0
 8002a58:	e7c2      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
	eError 	success = RET_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e7c0      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e7be      	b.n	80029e0 <VirtualEEPROMinitVirtual+0x78>
 8002a62:	bf00      	nop
 8002a64:	08007ccc 	.word	0x08007ccc
 8002a68:	200007b8 	.word	0x200007b8

08002a6c <VirtualEEPROMSearchPointer>:
{
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	4606      	mov	r6, r0
	areaNumber = VirtualEEPROMFindValidArea(eepromDevice, READ_FROM_VALID_AREA);
 8002a72:	2100      	movs	r1, #0
 8002a74:	f7ff fdb8 	bl	80025e8 <VirtualEEPROMFindValidArea>
	if(areaNumber == NO_VALID_AREA)
 8002a78:	28ab      	cmp	r0, #171	; 0xab
 8002a7a:	d02d      	beq.n	8002ad8 <VirtualEEPROMSearchPointer+0x6c>
 8002a7c:	4604      	mov	r4, r0
	virtualEEPROMRegister.actualPage = areaNumber;
 8002a7e:	4d17      	ldr	r5, [pc, #92]	; (8002adc <VirtualEEPROMSearchPointer+0x70>)
 8002a80:	7228      	strb	r0, [r5, #8]
	FlashGetSize( areaNumber, &MaxOffset);
 8002a82:	a901      	add	r1, sp, #4
 8002a84:	f000 fa3a 	bl	8002efc <FlashGetSize>
	virtualEEPROMRegister.maxOffset = MaxOffset;
 8002a88:	9b01      	ldr	r3, [sp, #4]
 8002a8a:	606b      	str	r3, [r5, #4]
	virtualEEPROMRegister.ptrAddrOffset = virtualEEPROMRegister.maxOffset;
 8002a8c:	602b      	str	r3, [r5, #0]
	eError success 	= RET_OK;
 8002a8e:	2500      	movs	r5, #0
	while ( virtualEEPROMRegister.ptrAddrOffset > INITIAL_DATA_AREA)
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <VirtualEEPROMSearchPointer+0x70>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	2a20      	cmp	r2, #32
 8002a96:	d912      	bls.n	8002abe <VirtualEEPROMSearchPointer+0x52>
		success = FlashReadData( areaNumber, &OffsetValue, virtualEEPROMRegister.ptrAddrOffset - EE_ELEMENT_SIZE);
 8002a98:	3a08      	subs	r2, #8
 8002a9a:	a902      	add	r1, sp, #8
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f000 f9e7 	bl	8002e70 <FlashReadData>
 8002aa2:	4605      	mov	r5, r0
		if ( OffsetValue == EE_PAGESTAT_ERASED)
 8002aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	bf08      	it	eq
 8002aae:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002ab2:	d104      	bne.n	8002abe <VirtualEEPROMSearchPointer+0x52>
			virtualEEPROMRegister.ptrAddrOffset -= EE_ELEMENT_SIZE;
 8002ab4:	4a09      	ldr	r2, [pc, #36]	; (8002adc <VirtualEEPROMSearchPointer+0x70>)
 8002ab6:	6813      	ldr	r3, [r2, #0]
 8002ab8:	3b08      	subs	r3, #8
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	e7e8      	b.n	8002a90 <VirtualEEPROMSearchPointer+0x24>
	diffOffset = (virtualEEPROMRegister.maxOffset - virtualEEPROMRegister.ptrAddrOffset);
 8002abe:	4a07      	ldr	r2, [pc, #28]	; (8002adc <VirtualEEPROMSearchPointer+0x70>)
 8002ac0:	6853      	ldr	r3, [r2, #4]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	1a9b      	subs	r3, r3, r2
	if ( diffOffset < EEPROM_BYTES_SWAP )
 8002ac6:	2b1f      	cmp	r3, #31
 8002ac8:	d902      	bls.n	8002ad0 <VirtualEEPROMSearchPointer+0x64>
}
 8002aca:	4628      	mov	r0, r5
 8002acc:	b004      	add	sp, #16
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
		VirtualEEPROMTransferPage(eepromDevice);
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	f7ff feb3 	bl	800283c <VirtualEEPROMTransferPage>
 8002ad6:	e7f8      	b.n	8002aca <VirtualEEPROMSearchPointer+0x5e>
		return success;
 8002ad8:	2501      	movs	r5, #1
 8002ada:	e7f6      	b.n	8002aca <VirtualEEPROMSearchPointer+0x5e>
 8002adc:	200007b8 	.word	0x200007b8

08002ae0 <VirtualEEPROMStart>:
{
 8002ae0:	b508      	push	{r3, lr}
	VirtualEEPROMinitVirtual(VIRTUAL_EEPROM);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7ff ff40 	bl	8002968 <VirtualEEPROMinitVirtual>
	VirtualEEPROMSearchPointer(VIRTUAL_EEPROM);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7ff ffbf 	bl	8002a6c <VirtualEEPROMSearchPointer>
}
 8002aee:	2000      	movs	r0, #0
 8002af0:	bd08      	pop	{r3, pc}
	...

08002af4 <VirtualEEPROMWriteVariable>:
{
 8002af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af8:	4607      	mov	r7, r0
 8002afa:	460e      	mov	r6, r1
 8002afc:	4690      	mov	r8, r2
	Status = VirtualEEPROMVerifyPageFullWriteVariable(virtualEEPROMRegister.actualPage, VirtOffset, Data);
 8002afe:	4c0b      	ldr	r4, [pc, #44]	; (8002b2c <VirtualEEPROMWriteVariable+0x38>)
 8002b00:	7a20      	ldrb	r0, [r4, #8]
 8002b02:	f7ff fe67 	bl	80027d4 <VirtualEEPROMVerifyPageFullWriteVariable>
 8002b06:	4605      	mov	r5, r0
	updateCache(VirtOffset, Data);
 8002b08:	4641      	mov	r1, r8
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	f7ff fde0 	bl	80026d0 <updateCache>
	diffOffset = (virtualEEPROMRegister.maxOffset - virtualEEPROMRegister.ptrAddrOffset);
 8002b10:	88a3      	ldrh	r3, [r4, #4]
 8002b12:	8822      	ldrh	r2, [r4, #0]
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	b29b      	uxth	r3, r3
	if ( diffOffset < EEPROM_BYTES_SWAP )
 8002b18:	2b1f      	cmp	r3, #31
 8002b1a:	d902      	bls.n	8002b22 <VirtualEEPROMWriteVariable+0x2e>
}
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		VirtualEEPROMTransferPage(eepromDevice);
 8002b22:	4638      	mov	r0, r7
 8002b24:	f7ff fe8a 	bl	800283c <VirtualEEPROMTransferPage>
 8002b28:	e7f8      	b.n	8002b1c <VirtualEEPROMWriteVariable+0x28>
 8002b2a:	bf00      	nop
 8002b2c:	200007b8 	.word	0x200007b8

08002b30 <VirtualEEPROMWriteRegister>:
{
 8002b30:	b510      	push	{r4, lr}
	if ( instanceReg < virtualEEPROMareaContext[eeprom].areaEEPROM[reg].size )
 8002b32:	4c0a      	ldr	r4, [pc, #40]	; (8002b5c <VirtualEEPROMWriteRegister+0x2c>)
 8002b34:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8002b38:	6844      	ldr	r4, [r0, #4]
 8002b3a:	eb04 0081 	add.w	r0, r4, r1, lsl #2
 8002b3e:	8840      	ldrh	r0, [r0, #2]
 8002b40:	4290      	cmp	r0, r2
 8002b42:	d801      	bhi.n	8002b48 <VirtualEEPROMWriteRegister+0x18>
	eError result = RET_FAIL;
 8002b44:	2001      	movs	r0, #1
}
 8002b46:	bd10      	pop	{r4, pc}
		offset = virtualEEPROMareaContext[eeprom].areaEEPROM[reg].virtualOffset + instanceReg;
 8002b48:	f834 1021 	ldrh.w	r1, [r4, r1, lsl #2]
 8002b4c:	4411      	add	r1, r2
		result = VirtualEEPROMWriteVariable(VIRTUAL_EEPROM, offset , value);
 8002b4e:	461a      	mov	r2, r3
 8002b50:	b289      	uxth	r1, r1
 8002b52:	2000      	movs	r0, #0
 8002b54:	f7ff ffce 	bl	8002af4 <VirtualEEPROMWriteVariable>
 8002b58:	b2c0      	uxtb	r0, r0
 8002b5a:	bd10      	pop	{r4, pc}
 8002b5c:	08007ca4 	.word	0x08007ca4

08002b60 <initHregVirtualEEPROM>:
/***********************************************************************
 * @brief	API for init EEPROM.
 *
 **********************************************************************/
__weak eError initHregVirtualEEPROM( void )
{
 8002b60:	b508      	push	{r3, lr}
	eError result = RET_OK;

	VirtualEEPROMinit();
 8002b62:	f7ff fcb9 	bl	80024d8 <VirtualEEPROMinit>

	return result;
}
 8002b66:	2000      	movs	r0, #0
 8002b68:	bd08      	pop	{r3, pc}

08002b6a <startHregVirtualEEPROM>:
/***********************************************************************
 * @brief	API for start EEPROM.
 *
 **********************************************************************/
__weak eError startHregVirtualEEPROM( void )
{
 8002b6a:	b508      	push	{r3, lr}
	eError result = RET_OK;

	VirtualEEPROMStart();
 8002b6c:	f7ff ffb8 	bl	8002ae0 <VirtualEEPROMStart>

	return result;
}
 8002b70:	2000      	movs	r0, #0
 8002b72:	bd08      	pop	{r3, pc}

08002b74 <stopHregVirtualEEPROM>:
/***********************************************************************
 * @brief	API for stop EEPROM.
 *
 **********************************************************************/
__weak eError stopHregVirtualEEPROM( void )
{
 8002b74:	b508      	push	{r3, lr}
	eError result = RET_OK;

	VirtualEEPROMStop();
 8002b76:	f7ff fcfd 	bl	8002574 <VirtualEEPROMStop>

	return result;
}
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	bd08      	pop	{r3, pc}

08002b7e <sleepHregVirtualEEPROM>:
/***********************************************************************
 * @brief	API for sleep EEPROM.
 *
 **********************************************************************/
__weak eError sleepHregVirtualEEPROM( void )
{
 8002b7e:	b508      	push	{r3, lr}
	eError result = RET_OK;

	VirtualEEPROMSleep();
 8002b80:	f7ff fcfa 	bl	8002578 <VirtualEEPROMSleep>

	return result;
}
 8002b84:	2000      	movs	r0, #0
 8002b86:	bd08      	pop	{r3, pc}

08002b88 <wakeHregVirtualEEPROM>:
/***********************************************************************
 * @brief	API for wake EEPROM.
 *
 **********************************************************************/
__weak eError wakeHregVirtualEEPROM( void )
{
 8002b88:	b508      	push	{r3, lr}
	eError result = RET_OK;

	VirtualEEPROMWake();
 8002b8a:	f7ff fcf7 	bl	800257c <VirtualEEPROMWake>

	return result;
}
 8002b8e:	2000      	movs	r0, #0
 8002b90:	bd08      	pop	{r3, pc}

08002b92 <onReadHregVirtualEEPROMData>:
//	READ_HREG( instance, HREG_VIRTUALEEPROM_INSTANCE_REG, &instanceReg);
//	READ_HREG( instance, HREG_VIRTUALEEPROM_REGISTER, &VirtualEepromReg);
//	result = VirtualEEPROMReadRegister((eEEVDeviceMap)instance, (tEEPROMMap)VirtualEepromReg, (uint8_t)instanceReg, (uint32_t*) param1);


	*(uint32_t*)param1 = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	6013      	str	r3, [r2, #0]
	result = RET_FAIL;

	return result;
}
 8002b96:	2001      	movs	r0, #1
 8002b98:	4770      	bx	lr

08002b9a <onWriteHregVirtualEEPROMData>:
//	result = VirtualEEPROMWriteRegister((tEEPROMInstance)instance, (tEEPROMMap)VirtualEepromReg, (uint8_t)instanceReg, (uint32_t) param1);

	result = RET_FAIL;

	return result;
}
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	4770      	bx	lr
	...

08002ba0 <pipeDeviceInit>:
 ****************************************************************************/
eError pipeDeviceInit( void )
{
	uint8_t i;

	for(i = 0; i < NUM_OF_PIPES; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d817      	bhi.n	8002bd6 <pipeDeviceInit+0x36>
{
 8002ba6:	b430      	push	{r4, r5}
	{
		pipes[i].bufferRxPtr = 0;
 8002ba8:	4c0c      	ldr	r4, [pc, #48]	; (8002bdc <pipeDeviceInit+0x3c>)
 8002baa:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
 8002bae:	2200      	movs	r2, #0
 8002bb0:	7142      	strb	r2, [r0, #5]
		pipes[i].bufferStartingPosition = 0;
 8002bb2:	7102      	strb	r2, [r0, #4]
		pipes[i].bufferLength = pipeMap[i].bufferSize;
 8002bb4:	0059      	lsls	r1, r3, #1
 8002bb6:	4419      	add	r1, r3
 8002bb8:	008d      	lsls	r5, r1, #2
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <pipeDeviceInit+0x40>)
 8002bbc:	442a      	add	r2, r5
 8002bbe:	7a11      	ldrb	r1, [r2, #8]
 8002bc0:	7181      	strb	r1, [r0, #6]
		pipes[i].buffer = pipeMap[i].bufferPtr;
 8002bc2:	6852      	ldr	r2, [r2, #4]
 8002bc4:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
	for(i = 0; i < NUM_OF_PIPES; i++)
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d9eb      	bls.n	8002ba8 <pipeDeviceInit+0x8>
	}

	return RET_OK;
}
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	bc30      	pop	{r4, r5}
 8002bd4:	4770      	bx	lr
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000a8c 	.word	0x20000a8c
 8002be0:	08007d24 	.word	0x08007d24

08002be4 <pipeDeviceStart>:
 *
 ****************************************************************************/
eError pipeDeviceStart( void )
{
	return RET_OK;
}
 8002be4:	2000      	movs	r0, #0
 8002be6:	4770      	bx	lr

08002be8 <pipeDeviceByteReceived>:
 * @param	data to be saved.
 * @return  None.
 ****************************************************************************/
eError pipeDeviceByteReceived(ePipes id, uint8_t data)
{
    pipes[id].buffer[pipes[id].bufferRxPtr] = data;
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <pipeDeviceByteReceived+0x30>)
 8002bea:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8002bee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002bf2:	7943      	ldrb	r3, [r0, #5]
 8002bf4:	54d1      	strb	r1, [r2, r3]
    pipes[id].bufferRxPtr = (pipes[id].bufferRxPtr + 1) % (pipes[id].bufferLength);
 8002bf6:	7943      	ldrb	r3, [r0, #5]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	7981      	ldrb	r1, [r0, #6]
 8002bfc:	fb92 f3f1 	sdiv	r3, r2, r1
 8002c00:	fb01 2313 	mls	r3, r1, r3, r2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	7143      	strb	r3, [r0, #5]
    if ( pipes[id].bufferRxPtr == pipes[id].bufferStartingPosition )
 8002c08:	7902      	ldrb	r2, [r0, #4]
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d001      	beq.n	8002c12 <pipeDeviceByteReceived+0x2a>
    {
        return RET_BUFFER_FULL;
    }

    return RET_OK;
 8002c0e:	2000      	movs	r0, #0
}
 8002c10:	4770      	bx	lr
        return RET_BUFFER_FULL;
 8002c12:	2008      	movs	r0, #8
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000a8c 	.word	0x20000a8c

08002c1c <pipeDeviceParseCommand>:
 *
 * @return  Success.
 *
 ****************************************************************************/
uint8_t pipeDeviceParseCommand(ePipes id, uint8_t *command, uint8_t length, int8_t *pattern, uint8_t patternSize,  uint8_t *commandSize)
{
 8002c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c20:	4680      	mov	r8, r0
 8002c22:	f89d 9020 	ldrb.w	r9, [sp, #32]
 8002c26:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    uint8_t success 		= FALSE;
    uint8_t bFound 			= FALSE;
    uint8_t patternIndex 	= 0;
    uint8_t bufferUsed 		= 0;
    uint8_t bufferPos 		= /*DmaChnGetDstPnt(DMA_CHANNEL1);*/pipes[id].bufferRxPtr;
 8002c2a:	4684      	mov	ip, r0
 8002c2c:	4836      	ldr	r0, [pc, #216]	; (8002d08 <pipeDeviceParseCommand+0xec>)
 8002c2e:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8002c32:	7945      	ldrb	r5, [r0, #5]
    uint8_t bufferStart 	= pipes[id].bufferStartingPosition;
 8002c34:	7904      	ldrb	r4, [r0, #4]

    *commandSize = 0;
 8002c36:	2600      	movs	r6, #0
 8002c38:	f88e 6000 	strb.w	r6, [lr]
    bufferUsed 	= (uint8_t)((pipes[id].bufferLength - bufferStart + bufferPos) % pipes[id].bufferLength);
 8002c3c:	7986      	ldrb	r6, [r0, #6]
 8002c3e:	1b30      	subs	r0, r6, r4
 8002c40:	4428      	add	r0, r5
 8002c42:	fb90 f5f6 	sdiv	r5, r0, r6
 8002c46:	fb06 0515 	mls	r5, r6, r5, r0

    if ( patternSize > 0 && bufferUsed >= patternSize  )
 8002c4a:	f1b9 0f00 	cmp.w	r9, #0
 8002c4e:	d057      	beq.n	8002d00 <pipeDeviceParseCommand+0xe4>
 8002c50:	b2ed      	uxtb	r5, r5
 8002c52:	454d      	cmp	r5, r9
 8002c54:	d302      	bcc.n	8002c5c <pipeDeviceParseCommand+0x40>
 8002c56:	2600      	movs	r6, #0
 8002c58:	4630      	mov	r0, r6
 8002c5a:	e02a      	b.n	8002cb2 <pipeDeviceParseCommand+0x96>
    uint8_t success 		= FALSE;
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            {
                command[(*commandSize)] = pipes[id].buffer[bufferStart];
                (*commandSize)++;
            }

            if ( pipes[id].buffer[bufferStart] == pattern[patternIndex] )
 8002c62:	4f29      	ldr	r7, [pc, #164]	; (8002d08 <pipeDeviceParseCommand+0xec>)
 8002c64:	f857 703c 	ldr.w	r7, [r7, ip, lsl #3]
 8002c68:	f817 a004 	ldrb.w	sl, [r7, r4]
 8002c6c:	579f      	ldrsb	r7, [r3, r6]
 8002c6e:	45ba      	cmp	sl, r7
 8002c70:	d033      	beq.n	8002cda <pipeDeviceParseCommand+0xbe>
                patternIndex++;
                bFound 			= (uint8_t)(patternIndex >= patternSize);
            }
            else
            {
                bufferStart 	= (uint8_t)((bufferStart + pipes[id].bufferLength - patternIndex) % pipes[id].bufferLength);
 8002c72:	4f25      	ldr	r7, [pc, #148]	; (8002d08 <pipeDeviceParseCommand+0xec>)
 8002c74:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 8002c78:	79bf      	ldrb	r7, [r7, #6]
 8002c7a:	443c      	add	r4, r7
 8002c7c:	1ba4      	subs	r4, r4, r6
 8002c7e:	fb94 faf7 	sdiv	sl, r4, r7
 8002c82:	fb07 441a 	mls	r4, r7, sl, r4
 8002c86:	b2e4      	uxtb	r4, r4
                bufferUsed		+= patternIndex;
 8002c88:	4435      	add	r5, r6
 8002c8a:	b2ed      	uxtb	r5, r5
                (*commandSize)	-= patternIndex;
 8002c8c:	f89e 7000 	ldrb.w	r7, [lr]
 8002c90:	1bbe      	subs	r6, r7, r6
 8002c92:	f88e 6000 	strb.w	r6, [lr]
                patternIndex 	= 0;
 8002c96:	4606      	mov	r6, r0
            }

            bufferStart		= (uint8_t)((bufferStart + 1) % pipes[id].bufferLength);
 8002c98:	f104 0a01 	add.w	sl, r4, #1
 8002c9c:	4f1a      	ldr	r7, [pc, #104]	; (8002d08 <pipeDeviceParseCommand+0xec>)
 8002c9e:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 8002ca2:	79bf      	ldrb	r7, [r7, #6]
 8002ca4:	fb9a f4f7 	sdiv	r4, sl, r7
 8002ca8:	fb07 a414 	mls	r4, r7, r4, sl
 8002cac:	b2e4      	uxtb	r4, r4
            bufferUsed--;
 8002cae:	3d01      	subs	r5, #1
 8002cb0:	b2ed      	uxtb	r5, r5
        while ( bufferUsed > 0 && bFound == FALSE )
 8002cb2:	b1cd      	cbz	r5, 8002ce8 <pipeDeviceParseCommand+0xcc>
 8002cb4:	b9c0      	cbnz	r0, 8002ce8 <pipeDeviceParseCommand+0xcc>
            if ( *commandSize < length )
 8002cb6:	f89e 7000 	ldrb.w	r7, [lr]
 8002cba:	4297      	cmp	r7, r2
 8002cbc:	d2d1      	bcs.n	8002c62 <pipeDeviceParseCommand+0x46>
                command[(*commandSize)] = pipes[id].buffer[bufferStart];
 8002cbe:	f8df a048 	ldr.w	sl, [pc, #72]	; 8002d08 <pipeDeviceParseCommand+0xec>
 8002cc2:	f85a a03c 	ldr.w	sl, [sl, ip, lsl #3]
 8002cc6:	f81a a004 	ldrb.w	sl, [sl, r4]
 8002cca:	f801 a007 	strb.w	sl, [r1, r7]
                (*commandSize)++;
 8002cce:	f89e 7000 	ldrb.w	r7, [lr]
 8002cd2:	3701      	adds	r7, #1
 8002cd4:	f88e 7000 	strb.w	r7, [lr]
 8002cd8:	e7c3      	b.n	8002c62 <pipeDeviceParseCommand+0x46>
                patternIndex++;
 8002cda:	3601      	adds	r6, #1
 8002cdc:	b2f6      	uxtb	r6, r6
                bFound 			= (uint8_t)(patternIndex >= patternSize);
 8002cde:	45b1      	cmp	r9, r6
 8002ce0:	bf8c      	ite	hi
 8002ce2:	2000      	movhi	r0, #0
 8002ce4:	2001      	movls	r0, #1
 8002ce6:	e7d7      	b.n	8002c98 <pipeDeviceParseCommand+0x7c>
        }

        if ( bFound == TRUE )
 8002ce8:	2801      	cmp	r0, #1
 8002cea:	d002      	beq.n	8002cf2 <pipeDeviceParseCommand+0xd6>
    uint8_t success 		= FALSE;
 8002cec:	2000      	movs	r0, #0
            success = TRUE;
        }
    }

    return success;
}
 8002cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            pipes[id].bufferStartingPosition = bufferStart;
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <pipeDeviceParseCommand+0xec>)
 8002cf4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8002cf8:	f888 4004 	strb.w	r4, [r8, #4]
 8002cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t success 		= FALSE;
 8002d00:	4648      	mov	r0, r9
 8002d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d06:	bf00      	nop
 8002d08:	20000a8c 	.word	0x20000a8c

08002d0c <pipeDeviceExtractData>:
 * Params:
 * Return: Nothing
 * Note :
 *****************************************************************************/
void pipeDeviceExtractData(ePipes id, uint8_t *command, uint8_t length, uint8_t *commandSize)
{
 8002d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t bufferUsed 		= 0;
	uint8_t bufferPos 		= pipes[id].bufferRxPtr;
 8002d0e:	4686      	mov	lr, r0
 8002d10:	4d16      	ldr	r5, [pc, #88]	; (8002d6c <pipeDeviceExtractData+0x60>)
 8002d12:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 8002d16:	796f      	ldrb	r7, [r5, #5]
	uint8_t bufferStart 	= pipes[id].bufferStartingPosition;
 8002d18:	792c      	ldrb	r4, [r5, #4]

	*commandSize 			= 0;
 8002d1a:	2600      	movs	r6, #0
 8002d1c:	701e      	strb	r6, [r3, #0]
	bufferUsed 				= (uint8_t)((pipes[id].bufferLength - bufferStart + bufferPos) % pipes[id].bufferLength);
 8002d1e:	79ae      	ldrb	r6, [r5, #6]
 8002d20:	1b35      	subs	r5, r6, r4
 8002d22:	443d      	add	r5, r7
 8002d24:	fb95 f7f6 	sdiv	r7, r5, r6
 8002d28:	fb06 5717 	mls	r7, r6, r7, r5
 8002d2c:	b2ff      	uxtb	r7, r7

	while ( bufferUsed > 0)
 8002d2e:	e00b      	b.n	8002d48 <pipeDeviceExtractData+0x3c>
		{
			command[(*commandSize)] = pipes[id].buffer[bufferStart];
			(*commandSize)++;
		}

		bufferStart		= (uint8_t)((bufferStart + 1) % pipes[id].bufferLength);
 8002d30:	1c66      	adds	r6, r4, #1
 8002d32:	4d0e      	ldr	r5, [pc, #56]	; (8002d6c <pipeDeviceExtractData+0x60>)
 8002d34:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
 8002d38:	79ad      	ldrb	r5, [r5, #6]
 8002d3a:	fb96 f4f5 	sdiv	r4, r6, r5
 8002d3e:	fb05 6414 	mls	r4, r5, r4, r6
 8002d42:	b2e4      	uxtb	r4, r4
		bufferUsed--;
 8002d44:	3f01      	subs	r7, #1
 8002d46:	b2ff      	uxtb	r7, r7
	while ( bufferUsed > 0)
 8002d48:	b15f      	cbz	r7, 8002d62 <pipeDeviceExtractData+0x56>
		if ( *commandSize < length )
 8002d4a:	781d      	ldrb	r5, [r3, #0]
 8002d4c:	4295      	cmp	r5, r2
 8002d4e:	d2ef      	bcs.n	8002d30 <pipeDeviceExtractData+0x24>
			command[(*commandSize)] = pipes[id].buffer[bufferStart];
 8002d50:	4e06      	ldr	r6, [pc, #24]	; (8002d6c <pipeDeviceExtractData+0x60>)
 8002d52:	f856 603e 	ldr.w	r6, [r6, lr, lsl #3]
 8002d56:	5d36      	ldrb	r6, [r6, r4]
 8002d58:	554e      	strb	r6, [r1, r5]
			(*commandSize)++;
 8002d5a:	781d      	ldrb	r5, [r3, #0]
 8002d5c:	3501      	adds	r5, #1
 8002d5e:	701d      	strb	r5, [r3, #0]
 8002d60:	e7e6      	b.n	8002d30 <pipeDeviceExtractData+0x24>
	}

	pipes[id].bufferStartingPosition = bufferStart;
 8002d62:	4b02      	ldr	r3, [pc, #8]	; (8002d6c <pipeDeviceExtractData+0x60>)
 8002d64:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002d68:	7104      	strb	r4, [r0, #4]
 8002d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d6c:	20000a8c 	.word	0x20000a8c

08002d70 <pipeDevice1ByteReceived>:


/**Helper functions to access each pipe */
#ifdef IS_PIPE1
inline eError pipeDevice1ByteReceived(uint8_t data)
{
 8002d70:	b508      	push	{r3, lr}
	return pipeDeviceByteReceived(PIPE_1, data);
 8002d72:	4601      	mov	r1, r0
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7ff ff37 	bl	8002be8 <pipeDeviceByteReceived>
}
 8002d7a:	bd08      	pop	{r3, pc}

08002d7c <pipeDevice2ByteReceived>:
#endif

#ifdef IS_PIPE2
inline eError pipeDevice2ByteReceived(uint8_t data)
{
 8002d7c:	b508      	push	{r3, lr}
	return pipeDeviceByteReceived(PIPE_2, data);
 8002d7e:	4601      	mov	r1, r0
 8002d80:	2001      	movs	r0, #1
 8002d82:	f7ff ff31 	bl	8002be8 <pipeDeviceByteReceived>
}
 8002d86:	bd08      	pop	{r3, pc}

08002d88 <FlashCalcOffset>:
 ****************************************************************************/
uint32_t FlashCalcOffset ( uint32_t initSector, uint32_t finalSector )
{
	uint32_t offset = 0;

	offset = (finalSector - initSector) * (FLASH_SECTOR_SIZE);
 8002d88:	1a08      	subs	r0, r1, r0

	return offset;
}
 8002d8a:	00c0      	lsls	r0, r0, #3
 8002d8c:	4770      	bx	lr
	...

08002d90 <FlashInit>:
{
 8002d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FlashContext[i].initAddress = FLASH_BASE;
 8002d94:	4c26      	ldr	r4, [pc, #152]	; (8002e30 <FlashInit+0xa0>)
 8002d96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d9a:	6063      	str	r3, [r4, #4]
	FlashContext[i].initSector = 0;
 8002d9c:	2600      	movs	r6, #0
 8002d9e:	6026      	str	r6, [r4, #0]
	FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, FlashInstanceMap[0].sectors);
 8002da0:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <FlashInit+0xa4>)
 8002da2:	681f      	ldr	r7, [r3, #0]
 8002da4:	4639      	mov	r1, r7
 8002da6:	4630      	mov	r0, r6
 8002da8:	f7ff ffee 	bl	8002d88 <FlashCalcOffset>
 8002dac:	60a0      	str	r0, [r4, #8]
	for (i = 1; i < NUM_OF_FLASH; i++)
 8002dae:	2401      	movs	r4, #1
 8002db0:	e005      	b.n	8002dbe <FlashInit+0x2e>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8002db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002db6:	e00f      	b.n	8002dd8 <FlashInit+0x48>
			success = RET_FAIL;
 8002db8:	2601      	movs	r6, #1
	for (i = 1; i < NUM_OF_FLASH; i++)
 8002dba:	3401      	adds	r4, #1
 8002dbc:	b2e4      	uxtb	r4, r4
 8002dbe:	2c03      	cmp	r4, #3
 8002dc0:	d833      	bhi.n	8002e2a <FlashInit+0x9a>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <FlashInit+0xa8>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d0f1      	beq.n	8002db2 <FlashInit+0x22>
 8002dce:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <FlashInit+0xac>)
 8002dd0:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8002dd4:	0adb      	lsrs	r3, r3, #11
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	429f      	cmp	r7, r3
 8002dda:	d2ed      	bcs.n	8002db8 <FlashInit+0x28>
			FlashContext[i].initSector = sectorUsed;
 8002ddc:	4d14      	ldr	r5, [pc, #80]	; (8002e30 <FlashInit+0xa0>)
 8002dde:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8002de2:	eb08 0204 	add.w	r2, r8, r4
 8002de6:	0093      	lsls	r3, r2, #2
 8002de8:	18e8      	adds	r0, r5, r3
 8002dea:	50ef      	str	r7, [r5, r3]
			FlashContext[i].initAddress = FlashContext[i-1].initAddress + FlashContext[i-1].maxOffset;
 8002dec:	f104 3eff 	add.w	lr, r4, #4294967295
 8002df0:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8002df4:	eb03 010e 	add.w	r1, r3, lr
 8002df8:	008a      	lsls	r2, r1, #2
 8002dfa:	442a      	add	r2, r5
 8002dfc:	6851      	ldr	r1, [r2, #4]
 8002dfe:	4473      	add	r3, lr
 8002e00:	009a      	lsls	r2, r3, #2
 8002e02:	442a      	add	r2, r5
 8002e04:	6893      	ldr	r3, [r2, #8]
 8002e06:	440b      	add	r3, r1
 8002e08:	6043      	str	r3, [r0, #4]
			FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, (sectorUsed + FlashInstanceMap[i].sectors));
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <FlashInit+0xa4>)
 8002e0c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002e10:	eb07 0903 	add.w	r9, r7, r3
 8002e14:	4649      	mov	r1, r9
 8002e16:	4638      	mov	r0, r7
 8002e18:	f7ff ffb6 	bl	8002d88 <FlashCalcOffset>
 8002e1c:	44a0      	add	r8, r4
 8002e1e:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8002e22:	441d      	add	r5, r3
 8002e24:	60a8      	str	r0, [r5, #8]
			sectorUsed +=  FlashInstanceMap[i].sectors;
 8002e26:	464f      	mov	r7, r9
 8002e28:	e7c7      	b.n	8002dba <FlashInit+0x2a>
}
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e30:	20000bcc 	.word	0x20000bcc
 8002e34:	08007d3c 	.word	0x08007d3c
 8002e38:	1fff75e0 	.word	0x1fff75e0
 8002e3c:	003ffc00 	.word	0x003ffc00

08002e40 <FlashStop>:
eError FlashStop( void )
{
	eError 	success = RET_OK;

	return success;
}
 8002e40:	2000      	movs	r0, #0
 8002e42:	4770      	bx	lr

08002e44 <FlashStart>:
eError FlashStart( void )
{
	eError 	success = RET_OK;

	return success;
}
 8002e44:	2000      	movs	r0, #0
 8002e46:	4770      	bx	lr

08002e48 <FlashSleep>:
eError FlashSleep( void )
{
	eError 	success = RET_OK;

	return success;
}
 8002e48:	2000      	movs	r0, #0
 8002e4a:	4770      	bx	lr

08002e4c <FlashWake>:
eError FlashWake( void )
{
	eError 	success = RET_OK;

	return success;
}
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	4770      	bx	lr

08002e50 <FlashLock>:
 * @param
 * @return 	Success or error status.
 *
 ****************************************************************************/
eError FlashLock( void)
{
 8002e50:	b508      	push	{r3, lr}
	eError success = RET_FAIL;

	HAL_StatusTypeDef flashStatus = HAL_ERROR;

	flashStatus = HAL_FLASH_Lock();
 8002e52:	f001 f9d5 	bl	8004200 <HAL_FLASH_Lock>
	if(flashStatus == HAL_OK)
 8002e56:	b908      	cbnz	r0, 8002e5c <FlashLock+0xc>
	{
		success = RET_OK;
 8002e58:	2000      	movs	r0, #0
	}

	return success;
}
 8002e5a:	bd08      	pop	{r3, pc}
	eError success = RET_FAIL;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	bd08      	pop	{r3, pc}

08002e60 <FlashUnlock>:
 * @param
 * @return 	Success or error status.
 *
 ****************************************************************************/
eError FlashUnlock( void)
{
 8002e60:	b508      	push	{r3, lr}
	eError success = RET_FAIL;

	HAL_StatusTypeDef flashStatus = HAL_ERROR;

	flashStatus = HAL_FLASH_Unlock();
 8002e62:	f001 f9b5 	bl	80041d0 <HAL_FLASH_Unlock>
	if(flashStatus == HAL_OK)
 8002e66:	b908      	cbnz	r0, 8002e6c <FlashUnlock+0xc>
	{
		success = RET_OK;
 8002e68:	2000      	movs	r0, #0
	}

	return success;
}
 8002e6a:	bd08      	pop	{r3, pc}
	eError success = RET_FAIL;
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	bd08      	pop	{r3, pc}

08002e70 <FlashReadData>:
 * 			offset: from 0 - to total flash area size
 * 			flashArea: Specifies the flash area.
 * @return 	Success or error status.
 ****************************************************************************/
eError FlashReadData(tFlash flashArea, uint64_t *data, uint32_t offset)
{
 8002e70:	b410      	push	{r4}
	eError 	success = RET_OK;

	uint32_t address = FLASH_DEFAULT_ADDRESS;

	if(offset>FlashContext[flashArea].maxOffset)
 8002e72:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8002e76:	009c      	lsls	r4, r3, #2
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <FlashReadData+0x30>)
 8002e7a:	4423      	add	r3, r4
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d30b      	bcc.n	8002e9a <FlashReadData+0x2a>
	{
		success = RET_FAIL;
	}
	else
	{
		address = FlashContext[flashArea].initAddress + offset;
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <FlashReadData+0x30>)
 8002e84:	4423      	add	r3, r4
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	441a      	add	r2, r3
		*data = (*(__IO uint64_t*)(address));
 8002e8a:	e9d2 2300 	ldrd	r2, r3, [r2]
 8002e8e:	e9c1 2300 	strd	r2, r3, [r1]
	eError 	success = RET_OK;
 8002e92:	2000      	movs	r0, #0
	}

	return success;
}
 8002e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e98:	4770      	bx	lr
		success = RET_FAIL;
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	e7fa      	b.n	8002e94 <FlashReadData+0x24>
 8002e9e:	bf00      	nop
 8002ea0:	20000bcc 	.word	0x20000bcc

08002ea4 <FlashProgramData>:
 *
 * @return 	success or error status.
 *
 ****************************************************************************/
eError FlashProgramData( tFlash flashArea, uint64_t data, uint32_t offset)
{
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	461f      	mov	r7, r3
 8002ea8:	9d06      	ldr	r5, [sp, #24]
	eError 	success = RET_OK;

	HAL_StatusTypeDef status = HAL_OK;

	/* Check the offset is valid */
	if(offset>FlashContext[flashArea].maxOffset)
 8002eaa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8002eae:	0099      	lsls	r1, r3, #2
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <FlashProgramData+0x54>)
 8002eb2:	440b      	add	r3, r1
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	42ab      	cmp	r3, r5
 8002eb8:	d202      	bcs.n	8002ec0 <FlashProgramData+0x1c>
	{
		success = RET_FAIL;
 8002eba:	2301      	movs	r3, #1
			success = FlashLock();
		}
	}

	return success;
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ec0:	4616      	mov	r6, r2
 8002ec2:	4604      	mov	r4, r0
		success = FlashUnlock();
 8002ec4:	f7ff ffcc 	bl	8002e60 <FlashUnlock>
		if(success == RET_OK)
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d1f6      	bne.n	8002ebc <FlashProgramData+0x18>
			status =  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (FlashContext[flashArea].initAddress + offset), data);
 8002ece:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8002ed2:	0082      	lsls	r2, r0, #2
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <FlashProgramData+0x54>)
 8002ed6:	4413      	add	r3, r2
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	4632      	mov	r2, r6
 8002edc:	463b      	mov	r3, r7
 8002ede:	4429      	add	r1, r5
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f001 f9df 	bl	80042a4 <HAL_FLASH_Program>
			if(status != HAL_OK)
 8002ee6:	b918      	cbnz	r0, 8002ef0 <FlashProgramData+0x4c>
			success = FlashLock();
 8002ee8:	f7ff ffb2 	bl	8002e50 <FlashLock>
 8002eec:	4603      	mov	r3, r0
 8002eee:	e7e5      	b.n	8002ebc <FlashProgramData+0x18>
				success = FlashLock();
 8002ef0:	f7ff ffae 	bl	8002e50 <FlashLock>
				return RET_FAIL;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e7e1      	b.n	8002ebc <FlashProgramData+0x18>
 8002ef8:	20000bcc 	.word	0x20000bcc

08002efc <FlashGetSize>:
 * @param
 * @return Success or error status.
 ****************************************************************************/
void FlashGetSize( tFlash flashArea, uint32_t *size)
{
	*size =   FlashContext[flashArea].maxOffset;
 8002efc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f00:	0082      	lsls	r2, r0, #2
 8002f02:	4b02      	ldr	r3, [pc, #8]	; (8002f0c <FlashGetSize+0x10>)
 8002f04:	4413      	add	r3, r2
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	600b      	str	r3, [r1, #0]
 8002f0a:	4770      	bx	lr
 8002f0c:	20000bcc 	.word	0x20000bcc

08002f10 <FlashGetPages>:
 * @param
 * @return Success or error status.
 ****************************************************************************/
uint8_t FlashGetPages( tFlash flashArea)
{
	uint8_t pages = FlashInstanceMap[flashArea].sectors / (FLASH_PAGE_SIZE / FLASH_SECTOR_SIZE);
 8002f10:	4b02      	ldr	r3, [pc, #8]	; (8002f1c <FlashGetPages+0xc>)
 8002f12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	return pages;
}
 8002f16:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002f1a:	4770      	bx	lr
 8002f1c:	08007d3c 	.word	0x08007d3c

08002f20 <FlashGetFirstPage>:
 ****************************************************************************/
uint8_t FlashGetFirstPage( tFlash flashArea )
{
	uint8_t fPage = 0;

	if (FlashContext[flashArea].initAddress < (FLASH_BASE + FLASH_BANK_SIZE))
 8002f20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f24:	0082      	lsls	r2, r0, #2
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <FlashGetFirstPage+0x38>)
 8002f28:	4413      	add	r3, r2
 8002f2a:	6858      	ldr	r0, [r3, #4]
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <FlashGetFirstPage+0x3c>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d00a      	beq.n	8002f4e <FlashGetFirstPage+0x2e>
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <FlashGetFirstPage+0x40>)
 8002f3a:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8002f3e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002f42:	4283      	cmp	r3, r0
 8002f44:	d805      	bhi.n	8002f52 <FlashGetFirstPage+0x32>
		fPage = (FlashContext[flashArea].initAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
	}
	else
	{
		/* Bank 2 */
		fPage = (FlashContext[flashArea].initAddress - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8002f46:	1ac0      	subs	r0, r0, r3
 8002f48:	f3c0 20c7 	ubfx	r0, r0, #11, #8
	}

	return fPage;
}
 8002f4c:	4770      	bx	lr
	if (FlashContext[flashArea].initAddress < (FLASH_BASE + FLASH_BANK_SIZE))
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <FlashGetFirstPage+0x44>)
 8002f50:	e7f7      	b.n	8002f42 <FlashGetFirstPage+0x22>
		fPage = (FlashContext[flashArea].initAddress - FLASH_BASE) / FLASH_PAGE_SIZE;
 8002f52:	f3c0 20c7 	ubfx	r0, r0, #11, #8
 8002f56:	4770      	bx	lr
 8002f58:	20000bcc 	.word	0x20000bcc
 8002f5c:	1fff75e0 	.word	0x1fff75e0
 8002f60:	003ffc00 	.word	0x003ffc00
 8002f64:	08080000 	.word	0x08080000

08002f68 <FlashErase>:
{
 8002f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	4607      	mov	r7, r0
 8002f6e:	460d      	mov	r5, r1
	uint32_t FlashEraseError = 0;
 8002f70:	2600      	movs	r6, #0
 8002f72:	9605      	str	r6, [sp, #20]
	uint32_t fPage = FlashGetFirstPage(flashArea);
 8002f74:	f7ff ffd4 	bl	8002f20 <FlashGetFirstPage>
 8002f78:	4604      	mov	r4, r0
	uint32_t totalPages = FlashGetPages(flashArea);
 8002f7a:	4638      	mov	r0, r7
 8002f7c:	f7ff ffc8 	bl	8002f10 <FlashGetPages>
	FlashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8002f80:	9601      	str	r6, [sp, #4]
	FlashErase.Banks     = FLASH_BANK_1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	9302      	str	r3, [sp, #8]
	if(page == FLASH_ALL_PAGES)
 8002f86:	2dff      	cmp	r5, #255	; 0xff
 8002f88:	d00a      	beq.n	8002fa0 <FlashErase+0x38>
		if(page < (fPage + totalPages))
 8002f8a:	4404      	add	r4, r0
 8002f8c:	42a5      	cmp	r5, r4
 8002f8e:	d20e      	bcs.n	8002fae <FlashErase+0x46>
			FlashErase.NbPages = 1;
 8002f90:	2301      	movs	r3, #1
 8002f92:	9304      	str	r3, [sp, #16]
			FlashErase.Page = page;
 8002f94:	9503      	str	r5, [sp, #12]
	eError 	success = RET_OK;
 8002f96:	2300      	movs	r3, #0
	if(success == RET_OK)
 8002f98:	b15b      	cbz	r3, 8002fb2 <FlashErase+0x4a>
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	b007      	add	sp, #28
 8002f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		FlashErase.NbPages = FlashGetPages(flashArea);
 8002fa0:	9004      	str	r0, [sp, #16]
		FlashErase.Page = FlashGetFirstPage(flashArea);
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	f7ff ffbc 	bl	8002f20 <FlashGetFirstPage>
 8002fa8:	9003      	str	r0, [sp, #12]
	eError 	success = RET_OK;
 8002faa:	4633      	mov	r3, r6
 8002fac:	e7f4      	b.n	8002f98 <FlashErase+0x30>
			success = RET_FAIL;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e7f2      	b.n	8002f98 <FlashErase+0x30>
		success = FlashUnlock();
 8002fb2:	f7ff ff55 	bl	8002e60 <FlashUnlock>
		if(success == RET_OK)
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	d1ee      	bne.n	8002f9a <FlashErase+0x32>
			flashStatus = HAL_FLASHEx_Erase(&FlashErase, &FlashEraseError);
 8002fbc:	a905      	add	r1, sp, #20
 8002fbe:	a801      	add	r0, sp, #4
 8002fc0:	f001 fa1c 	bl	80043fc <HAL_FLASHEx_Erase>
			if(flashStatus != HAL_OK)
 8002fc4:	b918      	cbnz	r0, 8002fce <FlashErase+0x66>
			success = FlashLock();
 8002fc6:	f7ff ff43 	bl	8002e50 <FlashLock>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	e7e5      	b.n	8002f9a <FlashErase+0x32>
				success = FlashLock();
 8002fce:	f7ff ff3f 	bl	8002e50 <FlashLock>
				return RET_FAIL;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e7e1      	b.n	8002f9a <FlashErase+0x32>

08002fd6 <initHregFlash>:
/***********************************************************************
 * @brief	API for init Flash.
 *
 **********************************************************************/
__weak eError initHregFlash( void )
{
 8002fd6:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = FlashInit();
 8002fd8:	f7ff feda 	bl	8002d90 <FlashInit>

	return result;
}
 8002fdc:	bd08      	pop	{r3, pc}

08002fde <startHregFlash>:
/***********************************************************************
 * @brief	API for start Flash.
 *
 **********************************************************************/
__weak eError startHregFlash( void )
{
 8002fde:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = FlashStart();
 8002fe0:	f7ff ff30 	bl	8002e44 <FlashStart>

	return result;
}
 8002fe4:	bd08      	pop	{r3, pc}

08002fe6 <stopHregFlash>:
/***********************************************************************
 * @brief	API for stop Flash.
 *
 **********************************************************************/
__weak eError stopHregFlash( void )
{
 8002fe6:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = FlashStop();
 8002fe8:	f7ff ff2a 	bl	8002e40 <FlashStop>

	return result;
}
 8002fec:	bd08      	pop	{r3, pc}

08002fee <sleepHregFlash>:
/***********************************************************************
 * @brief	API for sleep Flash.
 *
 **********************************************************************/
__weak eError sleepHregFlash( void )
{
 8002fee:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = FlashSleep();
 8002ff0:	f7ff ff2a 	bl	8002e48 <FlashSleep>

	return result;
}
 8002ff4:	bd08      	pop	{r3, pc}

08002ff6 <wakeHregFlash>:
/***********************************************************************
 * @brief	API for wake Flash.
 *
 **********************************************************************/
__weak eError wakeHregFlash( void )
{
 8002ff6:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = FlashWake();
 8002ff8:	f7ff ff28 	bl	8002e4c <FlashWake>

	return result;
}
 8002ffc:	bd08      	pop	{r3, pc}

08002ffe <onReadHregFlashSize>:
/***********************************************************************
 * @brief	On Read function for Flash size.
 *
 **********************************************************************/
__weak eError onReadHregFlashSize( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8002ffe:	b508      	push	{r3, lr}
	eError result = RET_OK;

	FlashGetSize( (tFlash)instance, (uint32_t*) param1);
 8003000:	4611      	mov	r1, r2
 8003002:	f7ff ff7b 	bl	8002efc <FlashGetSize>

	return result;
}
 8003006:	2000      	movs	r0, #0
 8003008:	bd08      	pop	{r3, pc}
	...

0800300c <onReadHregFlashData>:
/***********************************************************************
 * @brief	On Read function for Flash data.
 *
 **********************************************************************/
__weak eError onReadHregFlashData( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 800300c:	b530      	push	{r4, r5, lr}
 800300e:	b083      	sub	sp, #12
 8003010:	4604      	mov	r4, r0
 8003012:	4615      	mov	r5, r2
	eError result = RET_OK;

	uint32_t offset;
	READ_HREG( instance, HREG_FLASH_OFFSET, &offset);
 8003014:	aa01      	add	r2, sp, #4
 8003016:	4905      	ldr	r1, [pc, #20]	; (800302c <onReadHregFlashData+0x20>)
 8003018:	f7fd fc88 	bl	800092c <readHreg>
	result = FlashReadData((tFlash)instance, (uint64_t*) param1, offset);
 800301c:	9a01      	ldr	r2, [sp, #4]
 800301e:	4629      	mov	r1, r5
 8003020:	4620      	mov	r0, r4
 8003022:	f7ff ff25 	bl	8002e70 <FlashReadData>

	return result;
}
 8003026:	b003      	add	sp, #12
 8003028:	bd30      	pop	{r4, r5, pc}
 800302a:	bf00      	nop
 800302c:	080076b0 	.word	0x080076b0

08003030 <onWriteHregFlashData>:
/***********************************************************************
 * @brief	On Write function for Flash data.
 *
 **********************************************************************/
__weak eError onWriteHregFlashData( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8003030:	b530      	push	{r4, r5, lr}
 8003032:	b085      	sub	sp, #20
 8003034:	4604      	mov	r4, r0
 8003036:	4615      	mov	r5, r2
	eError result = RET_OK;

	uint32_t offset;
	READ_HREG( instance, HREG_FLASH_OFFSET, &offset);
 8003038:	aa03      	add	r2, sp, #12
 800303a:	4906      	ldr	r1, [pc, #24]	; (8003054 <onWriteHregFlashData+0x24>)
 800303c:	f7fd fc76 	bl	800092c <readHreg>
	result = FlashProgramData((tFlash)instance, (uint64_t) param1, offset);
 8003040:	9b03      	ldr	r3, [sp, #12]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	462a      	mov	r2, r5
 8003046:	2300      	movs	r3, #0
 8003048:	4620      	mov	r0, r4
 800304a:	f7ff ff2b 	bl	8002ea4 <FlashProgramData>

	return result;
}
 800304e:	b005      	add	sp, #20
 8003050:	bd30      	pop	{r4, r5, pc}
 8003052:	bf00      	nop
 8003054:	080076b0 	.word	0x080076b0

08003058 <GPIOStop>:
eError GPIOStop( void )
{
	eError 	success = RET_OK;

	return success;
}
 8003058:	2000      	movs	r0, #0
 800305a:	4770      	bx	lr

0800305c <GPIOStart>:
eError GPIOStart( void )
{
	eError 	success = RET_OK;

	return success;
}
 800305c:	2000      	movs	r0, #0
 800305e:	4770      	bx	lr

08003060 <GPIOSleep>:
eError GPIOSleep( void )
{
	eError 	success = RET_OK;

	return success;
}
 8003060:	2000      	movs	r0, #0
 8003062:	4770      	bx	lr

08003064 <GPIOWake>:
eError GPIOWake( void )
{
	eError 	success = RET_OK;

	return success;
}
 8003064:	2000      	movs	r0, #0
 8003066:	4770      	bx	lr

08003068 <GPIOWritePort>:
 ****************************************************************************/
eError GPIOWritePort(tGPIO port, tGPIOValue value)
{
	eError 	success = RET_OK;

	if ( value == GPIO_DEFAULT )
 8003068:	2903      	cmp	r1, #3
 800306a:	d015      	beq.n	8003098 <GPIOWritePort+0x30>
{
 800306c:	b508      	push	{r3, lr}
 800306e:	460a      	mov	r2, r1
		success = RET_INVALID_PARAMETER;
		return success;
	}


	if ( value != GPIO_TOGGLE )
 8003070:	2902      	cmp	r1, #2
 8003072:	d008      	beq.n	8003086 <GPIOWritePort+0x1e>
	{
		HAL_GPIO_WritePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin, value);
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <GPIOWritePort+0x34>)
 8003076:	0100      	lsls	r0, r0, #4
 8003078:	1819      	adds	r1, r3, r0
 800307a:	8889      	ldrh	r1, [r1, #4]
 800307c:	5818      	ldr	r0, [r3, r0]
 800307e:	f001 fb10 	bl	80046a2 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
	}

	return success;
 8003082:	2000      	movs	r0, #0
 8003084:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <GPIOWritePort+0x34>)
 8003088:	0100      	lsls	r0, r0, #4
 800308a:	181a      	adds	r2, r3, r0
 800308c:	8891      	ldrh	r1, [r2, #4]
 800308e:	5818      	ldr	r0, [r3, r0]
 8003090:	f001 fb0c 	bl	80046ac <HAL_GPIO_TogglePin>
	return success;
 8003094:	2000      	movs	r0, #0
 8003096:	bd08      	pop	{r3, pc}
		return success;
 8003098:	2005      	movs	r0, #5
 800309a:	4770      	bx	lr
 800309c:	08007d4c 	.word	0x08007d4c

080030a0 <GPIOReadPort>:
 * @param	port to read.
 * @param   value
 * @return  success.
 ****************************************************************************/
eError GPIOReadPort(tGPIO port,  tGPIOValue *value)
{
 80030a0:	b510      	push	{r4, lr}
 80030a2:	460c      	mov	r4, r1
	eError 	success = RET_OK;

	*value = HAL_GPIO_ReadPin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
 80030a4:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <GPIOReadPort+0x18>)
 80030a6:	0100      	lsls	r0, r0, #4
 80030a8:	181a      	adds	r2, r3, r0
 80030aa:	8891      	ldrh	r1, [r2, #4]
 80030ac:	5818      	ldr	r0, [r3, r0]
 80030ae:	f001 faf1 	bl	8004694 <HAL_GPIO_ReadPin>
 80030b2:	7020      	strb	r0, [r4, #0]

	return success;
}
 80030b4:	2000      	movs	r0, #0
 80030b6:	bd10      	pop	{r4, pc}
 80030b8:	08007d4c 	.word	0x08007d4c

080030bc <InitGPIOClock>:
 * @brief  Enable GPIO clock.
 * @param	port to enable clock.
 * @return  None.
 ****************************************************************************/
void InitGPIOClock(tGPIO port)
{
 80030bc:	b086      	sub	sp, #24
	/* Enable the GPIO Clock */
#ifdef GPIOA
	if ( GPIOInstanceMap[port].port == GPIOA ){
 80030be:	0103      	lsls	r3, r0, #4
 80030c0:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <InitGPIOClock+0xf8>)
 80030c2:	58d3      	ldr	r3, [r2, r3]
 80030c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80030c8:	d01f      	beq.n	800310a <InitGPIOClock+0x4e>
		__GPIOA_CLK_ENABLE();
	}
#endif //GPIOA

#ifdef GPIOB
	if( GPIOInstanceMap[port].port == GPIOB ){
 80030ca:	0103      	lsls	r3, r0, #4
 80030cc:	4a39      	ldr	r2, [pc, #228]	; (80031b4 <InitGPIOClock+0xf8>)
 80030ce:	58d2      	ldr	r2, [r2, r3]
 80030d0:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <InitGPIOClock+0xfc>)
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d027      	beq.n	8003126 <InitGPIOClock+0x6a>
		__GPIOB_CLK_ENABLE();
	}
#endif //GPIOB

#ifdef GPIOC
	if( GPIOInstanceMap[port].port == GPIOC ){
 80030d6:	0103      	lsls	r3, r0, #4
 80030d8:	4a36      	ldr	r2, [pc, #216]	; (80031b4 <InitGPIOClock+0xf8>)
 80030da:	58d2      	ldr	r2, [r2, r3]
 80030dc:	4b37      	ldr	r3, [pc, #220]	; (80031bc <InitGPIOClock+0x100>)
 80030de:	429a      	cmp	r2, r3
 80030e0:	d02f      	beq.n	8003142 <InitGPIOClock+0x86>
		__GPIOC_CLK_ENABLE();
	}
#endif //GPIOC

#ifdef GPIOD
	if( GPIOInstanceMap[port].port == GPIOD ){
 80030e2:	0103      	lsls	r3, r0, #4
 80030e4:	4a33      	ldr	r2, [pc, #204]	; (80031b4 <InitGPIOClock+0xf8>)
 80030e6:	58d2      	ldr	r2, [r2, r3]
 80030e8:	4b35      	ldr	r3, [pc, #212]	; (80031c0 <InitGPIOClock+0x104>)
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d037      	beq.n	800315e <InitGPIOClock+0xa2>
		__GPIOD_CLK_ENABLE();
	}
#endif //GPIOD

#ifdef GPIOE
	if( GPIOInstanceMap[port].port == GPIOE ){
 80030ee:	0103      	lsls	r3, r0, #4
 80030f0:	4a30      	ldr	r2, [pc, #192]	; (80031b4 <InitGPIOClock+0xf8>)
 80030f2:	58d2      	ldr	r2, [r2, r3]
 80030f4:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <InitGPIOClock+0x108>)
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d03f      	beq.n	800317a <InitGPIOClock+0xbe>
		__GPIOG_CLK_ENABLE();
	}
#endif //GPIOG

#ifdef GPIOH
	if( GPIOInstanceMap[port].port == GPIOH ){
 80030fa:	0100      	lsls	r0, r0, #4
 80030fc:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <InitGPIOClock+0xf8>)
 80030fe:	581a      	ldr	r2, [r3, r0]
 8003100:	4b31      	ldr	r3, [pc, #196]	; (80031c8 <InitGPIOClock+0x10c>)
 8003102:	429a      	cmp	r2, r3
 8003104:	d047      	beq.n	8003196 <InitGPIOClock+0xda>
		__GPIOI_CLK_ENABLE();
	}
#endif //GPIOI


}
 8003106:	b006      	add	sp, #24
 8003108:	4770      	bx	lr
		__GPIOA_CLK_ENABLE();
 800310a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800310e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	64da      	str	r2, [r3, #76]	; 0x4c
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	9b00      	ldr	r3, [sp, #0]
 8003124:	e7d1      	b.n	80030ca <InitGPIOClock+0xe>
		__GPIOB_CLK_ENABLE();
 8003126:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800312a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800312e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003130:	f042 0202 	orr.w	r2, r2, #2
 8003134:	64da      	str	r2, [r3, #76]	; 0x4c
 8003136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	9b01      	ldr	r3, [sp, #4]
 8003140:	e7c9      	b.n	80030d6 <InitGPIOClock+0x1a>
		__GPIOC_CLK_ENABLE();
 8003142:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003146:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800314a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800314c:	f042 0204 	orr.w	r2, r2, #4
 8003150:	64da      	str	r2, [r3, #76]	; 0x4c
 8003152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	9302      	str	r3, [sp, #8]
 800315a:	9b02      	ldr	r3, [sp, #8]
 800315c:	e7c1      	b.n	80030e2 <InitGPIOClock+0x26>
		__GPIOD_CLK_ENABLE();
 800315e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003162:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8003166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003168:	f042 0208 	orr.w	r2, r2, #8
 800316c:	64da      	str	r2, [r3, #76]	; 0x4c
 800316e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	9303      	str	r3, [sp, #12]
 8003176:	9b03      	ldr	r3, [sp, #12]
 8003178:	e7b9      	b.n	80030ee <InitGPIOClock+0x32>
		__GPIOE_CLK_ENABLE();
 800317a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800317e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003184:	f042 0210 	orr.w	r2, r2, #16
 8003188:	64da      	str	r2, [r3, #76]	; 0x4c
 800318a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	9304      	str	r3, [sp, #16]
 8003192:	9b04      	ldr	r3, [sp, #16]
 8003194:	e7b1      	b.n	80030fa <InitGPIOClock+0x3e>
		__GPIOH_CLK_ENABLE();
 8003196:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800319a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800319e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	9305      	str	r3, [sp, #20]
 80031ae:	9b05      	ldr	r3, [sp, #20]
}
 80031b0:	e7a9      	b.n	8003106 <InitGPIOClock+0x4a>
 80031b2:	bf00      	nop
 80031b4:	08007d4c 	.word	0x08007d4c
 80031b8:	48000400 	.word	0x48000400
 80031bc:	48000800 	.word	0x48000800
 80031c0:	48000c00 	.word	0x48000c00
 80031c4:	48001000 	.word	0x48001000
 80031c8:	48001c00 	.word	0x48001c00

080031cc <GPIOInit>:
{
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	b086      	sub	sp, #24
	for (port = 0; port < NUM_OF_GPIO; port++)
 80031d0:	2400      	movs	r4, #0
	eError 				success = RET_OK;
 80031d2:	4626      	mov	r6, r4
	for (port = 0; port < NUM_OF_GPIO; port++)
 80031d4:	e001      	b.n	80031da <GPIOInit+0xe>
 80031d6:	3401      	adds	r4, #1
 80031d8:	b2e4      	uxtb	r4, r4
 80031da:	2c05      	cmp	r4, #5
 80031dc:	d81b      	bhi.n	8003216 <GPIOInit+0x4a>
		InitGPIOClock(port);
 80031de:	4620      	mov	r0, r4
 80031e0:	f7ff ff6c 	bl	80030bc <InitGPIOClock>
        GPIO_InitStructure.Pin =  	(uint32_t)GPIOInstanceMap[port].pin;
 80031e4:	4a0d      	ldr	r2, [pc, #52]	; (800321c <GPIOInit+0x50>)
 80031e6:	0123      	lsls	r3, r4, #4
 80031e8:	18d5      	adds	r5, r2, r3
 80031ea:	88a9      	ldrh	r1, [r5, #4]
 80031ec:	9101      	str	r1, [sp, #4]
		GPIO_InitStructure.Mode = 	(uint32_t)GPIOInstanceMap[port].mode;
 80031ee:	68a9      	ldr	r1, [r5, #8]
 80031f0:	9102      	str	r1, [sp, #8]
		GPIO_InitStructure.Speed = 	(uint32_t)GPIOInstanceMap[port].speed;
 80031f2:	7b29      	ldrb	r1, [r5, #12]
 80031f4:	9104      	str	r1, [sp, #16]
		GPIO_InitStructure.Pull = 	(uint32_t)GPIOInstanceMap[port].pupd;
 80031f6:	7b69      	ldrb	r1, [r5, #13]
 80031f8:	9103      	str	r1, [sp, #12]
		GPIO_InitStructure.Alternate = (uint32_t)GPIOInstanceMap[port].alternate;
 80031fa:	7ba9      	ldrb	r1, [r5, #14]
 80031fc:	9105      	str	r1, [sp, #20]
		HAL_GPIO_Init(GPIOInstanceMap[port].port, &GPIO_InitStructure);
 80031fe:	a901      	add	r1, sp, #4
 8003200:	58d0      	ldr	r0, [r2, r3]
 8003202:	f001 f977 	bl	80044f4 <HAL_GPIO_Init>
		if ( GPIOInstanceMap[port].initialValue != GPIO_DEFAULT )
 8003206:	7be9      	ldrb	r1, [r5, #15]
 8003208:	2903      	cmp	r1, #3
 800320a:	d0e4      	beq.n	80031d6 <GPIOInit+0xa>
			success = GPIOWritePort(port, GPIOInstanceMap[port].initialValue);
 800320c:	4620      	mov	r0, r4
 800320e:	f7ff ff2b 	bl	8003068 <GPIOWritePort>
 8003212:	4606      	mov	r6, r0
 8003214:	e7df      	b.n	80031d6 <GPIOInit+0xa>
}
 8003216:	4630      	mov	r0, r6
 8003218:	b006      	add	sp, #24
 800321a:	bd70      	pop	{r4, r5, r6, pc}
 800321c:	08007d4c 	.word	0x08007d4c

08003220 <initHregGPIO>:
/***********************************************************************
 * @brief	API for init Gpio.
 *
 **********************************************************************/
__weak eError initHregGPIO( void )
{
 8003220:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOInit();
 8003222:	f7ff ffd3 	bl	80031cc <GPIOInit>

	return result;
}
 8003226:	bd08      	pop	{r3, pc}

08003228 <startHregGPIO>:
/***********************************************************************
 * @brief	API for start Gpio.
 *
 **********************************************************************/
__weak eError startHregGPIO( void )
{
 8003228:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOStart();
 800322a:	f7ff ff17 	bl	800305c <GPIOStart>

	return result;
}
 800322e:	bd08      	pop	{r3, pc}

08003230 <stopHregGPIO>:
/***********************************************************************
 * @brief	API for stop Gpio.
 *
 **********************************************************************/
__weak eError stopHregGPIO( void )
{
 8003230:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOStop();
 8003232:	f7ff ff11 	bl	8003058 <GPIOStop>

	return result;
}
 8003236:	bd08      	pop	{r3, pc}

08003238 <sleepHregGPIO>:
/***********************************************************************
 * @brief	API for sleep Gpio.
 *
 **********************************************************************/
__weak eError sleepHregGPIO( void )
{
 8003238:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOSleep();
 800323a:	f7ff ff11 	bl	8003060 <GPIOSleep>

	return result;
}
 800323e:	bd08      	pop	{r3, pc}

08003240 <wakeHregGPIO>:
/***********************************************************************
 * @brief	API for wake Gpio.
 *
 **********************************************************************/
__weak eError wakeHregGPIO( void )
{
 8003240:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOWake();
 8003242:	f7ff ff0f 	bl	8003064 <GPIOWake>

	return result;
}
 8003246:	bd08      	pop	{r3, pc}

08003248 <onReadHregGPIOValue>:
/***********************************************************************
 * @brief	On Read function for Gpio value.
 *
 **********************************************************************/
__weak eError onReadHregGPIOValue( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003248:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOReadPort((tGPIO)instance, (uint8_t*) param1);
 800324a:	4611      	mov	r1, r2
 800324c:	f7ff ff28 	bl	80030a0 <GPIOReadPort>

	return result;
}
 8003250:	bd08      	pop	{r3, pc}

08003252 <onWriteHregGPIOValue>:
/***********************************************************************
 * @brief	On Write function for Gpio value.
 *
 **********************************************************************/
__weak eError onWriteHregGPIOValue( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8003252:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOWritePort( instance ,param1);
 8003254:	b2d1      	uxtb	r1, r2
 8003256:	f7ff ff07 	bl	8003068 <GPIOWritePort>

	return result;
}
 800325a:	bd08      	pop	{r3, pc}

0800325c <interruptsInit>:
 * @brief  Init interrupts driver
 * 		   Configure all IRQ Channels declared on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsInit( void )
{
 800325c:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 800325e:	2400      	movs	r4, #0
 8003260:	e001      	b.n	8003266 <interruptsInit+0xa>
 8003262:	3401      	adds	r4, #1
 8003264:	b2e4      	uxtb	r4, r4
 8003266:	2c10      	cmp	r4, #16
 8003268:	d80c      	bhi.n	8003284 <interruptsInit+0x28>
	{
		if (IS_SETTABLE_PRIORITY_IRQ(interruptsInstanceMap[i].IRQn))
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <interruptsInit+0x2c>)
 800326c:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8003270:	f110 0f05 	cmn.w	r0, #5
 8003274:	dbf5      	blt.n	8003262 <interruptsInit+0x6>
		{
			HAL_NVIC_SetPriority(interruptsInstanceMap[i].IRQn, (uint32_t)interruptsInstanceMap[i].PreemptPriority, (uint32_t)interruptsInstanceMap[i].SubPriority);
 8003276:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800327a:	789a      	ldrb	r2, [r3, #2]
 800327c:	7859      	ldrb	r1, [r3, #1]
 800327e:	f000 fee7 	bl	8004050 <HAL_NVIC_SetPriority>
 8003282:	e7ee      	b.n	8003262 <interruptsInit+0x6>
		}
	}
	return result;
}
 8003284:	2000      	movs	r0, #0
 8003286:	bd10      	pop	{r4, pc}
 8003288:	20000110 	.word	0x20000110

0800328c <interruptsStart>:
 * @brief  Start interrupts driver
 * 		   Enable all IRQ Channels configured as ENABLE on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsStart( void )
{
 800328c:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 800328e:	2400      	movs	r4, #0
 8003290:	e001      	b.n	8003296 <interruptsStart+0xa>
 8003292:	3401      	adds	r4, #1
 8003294:	b2e4      	uxtb	r4, r4
 8003296:	2c10      	cmp	r4, #16
 8003298:	d80d      	bhi.n	80032b6 <interruptsStart+0x2a>
	{
		if (interruptsInstanceMap[i].State == IRQ_ENABLE)
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <interruptsStart+0x30>)
 800329c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80032a0:	78db      	ldrb	r3, [r3, #3]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d1f5      	bne.n	8003292 <interruptsStart+0x6>
		{
			if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[i].IRQn))
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <interruptsStart+0x30>)
 80032a8:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 80032ac:	2800      	cmp	r0, #0
 80032ae:	dbf0      	blt.n	8003292 <interruptsStart+0x6>
			{
				HAL_NVIC_EnableIRQ(interruptsInstanceMap[i].IRQn);
 80032b0:	f000 ff00 	bl	80040b4 <HAL_NVIC_EnableIRQ>
 80032b4:	e7ed      	b.n	8003292 <interruptsStart+0x6>

		}
	}

	return result;
}
 80032b6:	2000      	movs	r0, #0
 80032b8:	bd10      	pop	{r4, pc}
 80032ba:	bf00      	nop
 80032bc:	20000110 	.word	0x20000110

080032c0 <interruptsStop>:
 * @brief  Stop interrupts driver
 * 		   Disable all IRQ Channels declared on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsStop( void )
{
 80032c0:	b510      	push	{r4, lr}
	eError result = RET_OK;

	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 80032c2:	2400      	movs	r4, #0
 80032c4:	e001      	b.n	80032ca <interruptsStop+0xa>
 80032c6:	3401      	adds	r4, #1
 80032c8:	b2e4      	uxtb	r4, r4
 80032ca:	2c10      	cmp	r4, #16
 80032cc:	d807      	bhi.n	80032de <interruptsStop+0x1e>
	{
		if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[i].IRQn))
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <interruptsStop+0x24>)
 80032d0:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 80032d4:	2800      	cmp	r0, #0
 80032d6:	dbf6      	blt.n	80032c6 <interruptsStop+0x6>
		{
			HAL_NVIC_DisableIRQ(interruptsInstanceMap[i].IRQn);
 80032d8:	f000 fef8 	bl	80040cc <HAL_NVIC_DisableIRQ>
 80032dc:	e7f3      	b.n	80032c6 <interruptsStop+0x6>
		}
	}

	return result;
}
 80032de:	2000      	movs	r0, #0
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	bf00      	nop
 80032e4:	20000110 	.word	0x20000110

080032e8 <interruptsSleep>:
 * @brief  Sleep interrupts driver
 * 		   Disable all IRQ Channels declared on intPriorityMap list
 * @return eError :
 ****************************************************************************/
eError interruptsSleep( void )
{
 80032e8:	b508      	push	{r3, lr}
	eError result = RET_OK;

    interruptsStop();
 80032ea:	f7ff ffe9 	bl	80032c0 <interruptsStop>

	return result;
}
 80032ee:	2000      	movs	r0, #0
 80032f0:	bd08      	pop	{r3, pc}

080032f2 <interruptsWake>:
/*************************************************************************//**
 * @brief  Wake the interrupts driver
 * @return eError :
 ****************************************************************************/
eError interruptsWake( void )
{
 80032f2:	b508      	push	{r3, lr}
	eError result = RET_OK;

    interruptsStart();
 80032f4:	f7ff ffca 	bl	800328c <interruptsStart>

	return result;
}
 80032f8:	2000      	movs	r0, #0
 80032fa:	bd08      	pop	{r3, pc}

080032fc <interruptsGetState>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032fc:	f3ef 8310 	mrs	r3, PRIMASK
tIRQState interruptsGetState(tInterrupts indexIRQ)
{
	tIRQState state = IRQ_DISABLE;


	if (__get_PRIMASK()==0)
 8003300:	b953      	cbnz	r3, 8003318 <interruptsGetState+0x1c>
	{
		if (indexIRQ < MAX_IRQ)
 8003302:	2810      	cmp	r0, #16
 8003304:	d903      	bls.n	800330e <interruptsGetState+0x12>
		{
			state = interruptsInstanceMap[indexIRQ].State;
		}
		else if (indexIRQ==IRQ_ALL)
 8003306:	2811      	cmp	r0, #17
 8003308:	d008      	beq.n	800331c <interruptsGetState+0x20>
	tIRQState state = IRQ_DISABLE;
 800330a:	2000      	movs	r0, #0
 800330c:	4770      	bx	lr
			state = interruptsInstanceMap[indexIRQ].State;
 800330e:	4b04      	ldr	r3, [pc, #16]	; (8003320 <interruptsGetState+0x24>)
 8003310:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003314:	78c0      	ldrb	r0, [r0, #3]
 8003316:	4770      	bx	lr
	tIRQState state = IRQ_DISABLE;
 8003318:	2000      	movs	r0, #0
 800331a:	4770      	bx	lr
		{
			state = IRQ_ENABLE;
 800331c:	2001      	movs	r0, #1
		}
	}

	return state;

}
 800331e:	4770      	bx	lr
 8003320:	20000110 	.word	0x20000110

08003324 <interruptsEnable>:
 * @param	None.
 * @return  None.
 ****************************************************************************/
void interruptsEnable( void )
{
	if (countIrqAllDisable<=1)
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <interruptsEnable+0x24>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d906      	bls.n	800333c <interruptsEnable+0x18>
		countIrqAllDisable=0;
		__enable_irq();
	}
	else
	{
		countIrqAllDisable--;
 800332e:	4a06      	ldr	r2, [pc, #24]	; (8003348 <interruptsEnable+0x24>)
 8003330:	8813      	ldrh	r3, [r2, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	8013      	strh	r3, [r2, #0]
 800333a:	4770      	bx	lr
		countIrqAllDisable=0;
 800333c:	2200      	movs	r2, #0
 800333e:	4b02      	ldr	r3, [pc, #8]	; (8003348 <interruptsEnable+0x24>)
 8003340:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003342:	b662      	cpsie	i
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	2000049a 	.word	0x2000049a

0800334c <interruptsDisable>:
  __ASM volatile ("cpsid i" : : : "memory");
 800334c:	b672      	cpsid	i
 * @return  None.
 ****************************************************************************/
void interruptsDisable( void )
{
	__disable_irq();
	countIrqAllDisable++;
 800334e:	4a03      	ldr	r2, [pc, #12]	; (800335c <interruptsDisable+0x10>)
 8003350:	8813      	ldrh	r3, [r2, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	3301      	adds	r3, #1
 8003356:	b29b      	uxth	r3, r3
 8003358:	8013      	strh	r3, [r2, #0]
 800335a:	4770      	bx	lr
 800335c:	2000049a 	.word	0x2000049a

08003360 <interruptsSetState>:
	if (indexIRQ > MAX_IRQ)
 8003360:	2811      	cmp	r0, #17
 8003362:	d901      	bls.n	8003368 <interruptsSetState+0x8>
		result = RET_INVALID_PARAMETER;
 8003364:	2005      	movs	r0, #5
 8003366:	4770      	bx	lr
{
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	460d      	mov	r5, r1
 800336c:	4604      	mov	r4, r0
	else if (indexIRQ == IRQ_ALL)
 800336e:	d00e      	beq.n	800338e <interruptsSetState+0x2e>
	else if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[indexIRQ].IRQn))
 8003370:	4b16      	ldr	r3, [pc, #88]	; (80033cc <interruptsSetState+0x6c>)
 8003372:	f913 0020 	ldrsb.w	r0, [r3, r0, lsl #2]
 8003376:	2800      	cmp	r0, #0
 8003378:	db16      	blt.n	80033a8 <interruptsSetState+0x48>
		if (state == IRQ_ENABLE)
 800337a:	2901      	cmp	r1, #1
 800337c:	d011      	beq.n	80033a2 <interruptsSetState+0x42>
			HAL_NVIC_DisableIRQ(interruptsInstanceMap[indexIRQ].IRQn);
 800337e:	f000 fea5 	bl	80040cc <HAL_NVIC_DisableIRQ>
		interruptsInstanceMap[indexIRQ].State = state;
 8003382:	4812      	ldr	r0, [pc, #72]	; (80033cc <interruptsSetState+0x6c>)
 8003384:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8003388:	70c5      	strb	r5, [r0, #3]
	eError result = RET_OK;
 800338a:	2000      	movs	r0, #0
 800338c:	bd38      	pop	{r3, r4, r5, pc}
		if (state == IRQ_ENABLE)
 800338e:	2901      	cmp	r1, #1
 8003390:	d003      	beq.n	800339a <interruptsSetState+0x3a>
			interruptsDisable();
 8003392:	f7ff ffdb 	bl	800334c <interruptsDisable>
	eError result = RET_OK;
 8003396:	2000      	movs	r0, #0
 8003398:	bd38      	pop	{r3, r4, r5, pc}
			interruptsEnable();
 800339a:	f7ff ffc3 	bl	8003324 <interruptsEnable>
	eError result = RET_OK;
 800339e:	2000      	movs	r0, #0
 80033a0:	bd38      	pop	{r3, r4, r5, pc}
			HAL_NVIC_EnableIRQ(interruptsInstanceMap[indexIRQ].IRQn);
 80033a2:	f000 fe87 	bl	80040b4 <HAL_NVIC_EnableIRQ>
 80033a6:	e7ec      	b.n	8003382 <interruptsSetState+0x22>
	else if (interruptsInstanceMap[indexIRQ].IRQn == SysTick_IRQn)
 80033a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033ac:	d001      	beq.n	80033b2 <interruptsSetState+0x52>
		result = RET_INVALID_PARAMETER;
 80033ae:	2005      	movs	r0, #5
}
 80033b0:	bd38      	pop	{r3, r4, r5, pc}
		if (state == IRQ_ENABLE)
 80033b2:	2901      	cmp	r1, #1
 80033b4:	d007      	beq.n	80033c6 <interruptsSetState+0x66>
			HAL_SuspendTick();
 80033b6:	f000 fe3b 	bl	8004030 <HAL_SuspendTick>
		interruptsInstanceMap[indexIRQ].State = state;
 80033ba:	4804      	ldr	r0, [pc, #16]	; (80033cc <interruptsSetState+0x6c>)
 80033bc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80033c0:	70c5      	strb	r5, [r0, #3]
	eError result = RET_OK;
 80033c2:	2000      	movs	r0, #0
 80033c4:	bd38      	pop	{r3, r4, r5, pc}
			HAL_ResumeTick();
 80033c6:	f000 fe3b 	bl	8004040 <HAL_ResumeTick>
 80033ca:	e7f6      	b.n	80033ba <interruptsSetState+0x5a>
 80033cc:	20000110 	.word	0x20000110

080033d0 <initHregInterrupts>:
/***********************************************************************
 * @brief	API for init Interruptions.
 *
 **********************************************************************/
__weak eError initHregInterrupts( void )
{
 80033d0:	b508      	push	{r3, lr}
	eError result = RET_OK;

	interruptsInit();
 80033d2:	f7ff ff43 	bl	800325c <interruptsInit>

	return result;
}
 80033d6:	2000      	movs	r0, #0
 80033d8:	bd08      	pop	{r3, pc}

080033da <startHregInterrupts>:
/***********************************************************************
 * @brief	API for start Interruptions.
 *
 **********************************************************************/
__weak eError startHregInterrupts( void )
{
 80033da:	b508      	push	{r3, lr}
	eError result = RET_OK;

	interruptsStart();
 80033dc:	f7ff ff56 	bl	800328c <interruptsStart>

	return result;
}
 80033e0:	2000      	movs	r0, #0
 80033e2:	bd08      	pop	{r3, pc}

080033e4 <stopHregInterrupts>:
/***********************************************************************
 * @brief	API for stop Interruptions.
 *
 **********************************************************************/
__weak eError stopHregInterrupts( void )
{
 80033e4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	interruptsStop();
 80033e6:	f7ff ff6b 	bl	80032c0 <interruptsStop>

	return result;
}
 80033ea:	2000      	movs	r0, #0
 80033ec:	bd08      	pop	{r3, pc}

080033ee <sleepHregInterrupts>:
/***********************************************************************
 * @brief	API for sleep Interruptions.
 *
 **********************************************************************/
__weak eError sleepHregInterrupts( void )
{
 80033ee:	b508      	push	{r3, lr}
	eError result = RET_OK;

	interruptsSleep();
 80033f0:	f7ff ff7a 	bl	80032e8 <interruptsSleep>

	return result;
}
 80033f4:	2000      	movs	r0, #0
 80033f6:	bd08      	pop	{r3, pc}

080033f8 <wakeHregInterrupts>:
/***********************************************************************
 * @brief	API for wake Interruptions.
 *
 **********************************************************************/
__weak eError wakeHregInterrupts( void )
{
 80033f8:	b508      	push	{r3, lr}
	eError result = RET_OK;

	interruptsWake();
 80033fa:	f7ff ff7a 	bl	80032f2 <interruptsWake>

	return result;
}
 80033fe:	2000      	movs	r0, #0
 8003400:	bd08      	pop	{r3, pc}

08003402 <onReadHregInterruptsState>:
/***********************************************************************
 * @brief	On Read function for Interruptions enable.
 *
 **********************************************************************/
__weak eError onReadHregInterruptsState( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003402:	b510      	push	{r4, lr}
 8003404:	4614      	mov	r4, r2
	eError result = RET_OK;

	*(uint8_t*)param1 = interruptsGetState(instance);
 8003406:	f7ff ff79 	bl	80032fc <interruptsGetState>
 800340a:	7020      	strb	r0, [r4, #0]

	return result;
}
 800340c:	2000      	movs	r0, #0
 800340e:	bd10      	pop	{r4, pc}

08003410 <onWriteHregInterruptsState>:
/***********************************************************************
 * @brief	On Write function for Interruptions enable.
 *
 **********************************************************************/
__weak eError onWriteHregInterruptsState( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8003410:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = interruptsSetState(instance,param1);
 8003412:	b2d1      	uxtb	r1, r2
 8003414:	f7ff ffa4 	bl	8003360 <interruptsSetState>

	return result;
}
 8003418:	bd08      	pop	{r3, pc}

0800341a <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 800341a:	4770      	bx	lr

0800341c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800341c:	e7fe      	b.n	800341c <HardFault_Handler>

0800341e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800341e:	e7fe      	b.n	800341e <MemManage_Handler>

08003420 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003420:	e7fe      	b.n	8003420 <BusFault_Handler>

08003422 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003422:	e7fe      	b.n	8003422 <UsageFault_Handler>

08003424 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003424:	4770      	bx	lr

08003426 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003426:	4770      	bx	lr

08003428 <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 8003428:	b508      	push	{r3, lr}

	HAL_SYSTICK_IRQHandler();
 800342a:	f000 fe83 	bl	8004134 <HAL_SYSTICK_IRQHandler>
 800342e:	bd08      	pop	{r3, pc}

08003430 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 8003430:	4770      	bx	lr

08003432 <EXTI0_IRQHandler>:
 * @brief  This function handles external line 0 and 1 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
 8003432:	4770      	bx	lr

08003434 <EXTI1_IRQHandler>:
 * @brief  This function handles external line 0 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void)
{
 8003434:	4770      	bx	lr

08003436 <EXTI9_5_IRQHandler>:
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
}

void EXTI9_5_IRQHandler(void)
{
 8003436:	b508      	push	{r3, lr}
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003438:	2020      	movs	r0, #32
 800343a:	f001 f93b 	bl	80046b4 <HAL_GPIO_EXTI_IRQHandler>
 800343e:	bd08      	pop	{r3, pc}

08003440 <USART1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USART1_IRQHandler(void)
{
 8003440:	b508      	push	{r3, lr}
	HAL_UART1_Callback();
 8003442:	f000 f824 	bl	800348e <HAL_UART1_Callback>
 8003446:	bd08      	pop	{r3, pc}

08003448 <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */

void USART2_IRQHandler(void)
{
 8003448:	b508      	push	{r3, lr}
	HAL_UART2_Callback();
 800344a:	f000 f825 	bl	8003498 <HAL_UART2_Callback>
 800344e:	bd08      	pop	{r3, pc}

08003450 <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C1_EV_IRQHandler(void)
{
 8003450:	b508      	push	{r3, lr}
	HAL_I2C1_Callback();
 8003452:	f000 f826 	bl	80034a2 <HAL_I2C1_Callback>
 8003456:	bd08      	pop	{r3, pc}

08003458 <I2C2_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C2_EV_IRQHandler(void)
{
 8003458:	b508      	push	{r3, lr}
	HAL_I2C2_Callback();
 800345a:	f000 f823 	bl	80034a4 <HAL_I2C2_Callback>
 800345e:	bd08      	pop	{r3, pc}

08003460 <SPI1_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_IRQHandler(void)
{
 8003460:	b508      	push	{r3, lr}
    HAL_SPI1_Callback();
 8003462:	f000 f820 	bl	80034a6 <HAL_SPI1_Callback>
 8003466:	bd08      	pop	{r3, pc}

08003468 <SPI2_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI2_IRQHandler(void)
{
 8003468:	b508      	push	{r3, lr}
    HAL_SPI2_Callback();
 800346a:	f000 f81d 	bl	80034a8 <HAL_SPI2_Callback>
 800346e:	bd08      	pop	{r3, pc}

08003470 <SPI3_IRQHandler>:
}

void SPI3_IRQHandler(void)
{
 8003470:	b508      	push	{r3, lr}
    HAL_SPI3_Callback();
 8003472:	f000 f81a 	bl	80034aa <HAL_SPI3_Callback>
 8003476:	bd08      	pop	{r3, pc}

08003478 <TIM2_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8003478:	4770      	bx	lr

0800347a <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 800347a:	4770      	bx	lr

0800347c <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 800347c:	b508      	push	{r3, lr}
	HAL_IncTick();
 800347e:	f000 fdb9 	bl	8003ff4 <HAL_IncTick>

	SchedulerProcessesAutoEnable();
 8003482:	f7fd fc9b 	bl	8000dbc <SchedulerProcessesAutoEnable>
#ifdef SW_TIMER_AVAILABLE
	SwTimerIrq();
 8003486:	f7fe ff29 	bl	80022dc <SwTimerIrq>
 800348a:	bd08      	pop	{r3, pc}

0800348c <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800348c:	4770      	bx	lr

0800348e <HAL_UART1_Callback>:
  * @brief UART1 callback
  * @param None
  * @retval None
  */
void HAL_UART1_Callback(void)
{
 800348e:	b508      	push	{r3, lr}
#ifdef IS_UART1
   uartDriverMainIRQHandler(UART_1);
 8003490:	2000      	movs	r0, #0
 8003492:	f000 fbfb 	bl	8003c8c <uartDriverMainIRQHandler>
 8003496:	bd08      	pop	{r3, pc}

08003498 <HAL_UART2_Callback>:
  * @brief UART2 callback
  * @param None
  * @retval None
  */
void HAL_UART2_Callback(void)
{
 8003498:	b508      	push	{r3, lr}
#ifdef IS_UART2
	uartDriverMainIRQHandler(UART_2);
 800349a:	2001      	movs	r0, #1
 800349c:	f000 fbf6 	bl	8003c8c <uartDriverMainIRQHandler>
 80034a0:	bd08      	pop	{r3, pc}

080034a2 <HAL_I2C1_Callback>:
#endif
}


void HAL_I2C1_Callback(void)
{
 80034a2:	4770      	bx	lr

080034a4 <HAL_I2C2_Callback>:
	i2cDriverMainIRQHandler(I2C_1);
#endif
}

void HAL_I2C2_Callback(void)
{
 80034a4:	4770      	bx	lr

080034a6 <HAL_SPI1_Callback>:
	i2cDriverMainIRQHandler(I2C_2);
#endif
}

void HAL_SPI1_Callback(void)
{
 80034a6:	4770      	bx	lr

080034a8 <HAL_SPI2_Callback>:
    spiDriverMainIRQHandler(SPI_1);
#endif
}

void HAL_SPI2_Callback(void)
{
 80034a8:	4770      	bx	lr

080034aa <HAL_SPI3_Callback>:
    spiDriverMainIRQHandler(SPI_2);
#endif
}

void HAL_SPI3_Callback(void)
{
 80034aa:	4770      	bx	lr

080034ac <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034ac:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80034b0:	4905      	ldr	r1, [pc, #20]	; (80034c8 <NVIC_SystemReset+0x1c>)
 80034b2:	68ca      	ldr	r2, [r1, #12]
 80034b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80034b8:	4b04      	ldr	r3, [pc, #16]	; (80034cc <NVIC_SystemReset+0x20>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
 80034be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80034c2:	bf00      	nop
 80034c4:	e7fd      	b.n	80034c2 <NVIC_SystemReset+0x16>
 80034c6:	bf00      	nop
 80034c8:	e000ed00 	.word	0xe000ed00
 80034cc:	05fa0004 	.word	0x05fa0004

080034d0 <storePowerUpReason>:
 *
 ****************************************************************************/
static void storePowerUpReason( void )
{
	/* Check if the StandBy flag is set */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80034d0:	4b29      	ldr	r3, [pc, #164]	; (8003578 <storePowerUpReason+0xa8>)
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034d8:	d126      	bne.n	8003528 <storePowerUpReason+0x58>

		powerUpReason = SYSTEM_RESET_POWER_UP;
	}
	else
	{
		if ( __HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET )
 80034da:	4b28      	ldr	r3, [pc, #160]	; (800357c <storePowerUpReason+0xac>)
 80034dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80034e4:	d12f      	bne.n	8003546 <storePowerUpReason+0x76>
		{
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
		}
		else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <storePowerUpReason+0xac>)
 80034e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ec:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80034f0:	d12d      	bne.n	800354e <storePowerUpReason+0x7e>
		{
			powerUpReason = SYSTEM_RESET_WATCHDOG;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET )
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <storePowerUpReason+0xac>)
 80034f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80034fc:	d12b      	bne.n	8003556 <storePowerUpReason+0x86>
		{
			powerUpReason = SYSTEM_RESET_SOFTWARE;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET )
 80034fe:	4b1f      	ldr	r3, [pc, #124]	; (800357c <storePowerUpReason+0xac>)
 8003500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003504:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8003508:	d129      	bne.n	800355e <storePowerUpReason+0x8e>
		{
			powerUpReason = SYSTEM_RESET_POWER_UP;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET )
 800350a:	4b1c      	ldr	r3, [pc, #112]	; (800357c <storePowerUpReason+0xac>)
 800350c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003510:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003514:	d127      	bne.n	8003566 <storePowerUpReason+0x96>
		{
			powerUpReason = SYSTEM_BOR_RESET;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET )
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <storePowerUpReason+0xac>)
 8003518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351c:	2b00      	cmp	r3, #0
 800351e:	db26      	blt.n	800356e <storePowerUpReason+0x9e>
		{
			powerUpReason = SYSTEM_LOW_POWER_RESET;
		}
		else
		{
			powerUpReason = SYSTEM_FIRST_POWER_UP;
 8003520:	2200      	movs	r2, #0
 8003522:	4b17      	ldr	r3, [pc, #92]	; (8003580 <storePowerUpReason+0xb0>)
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e006      	b.n	8003536 <storePowerUpReason+0x66>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8003528:	f44f 7280 	mov.w	r2, #256	; 0x100
 800352c:	4b12      	ldr	r3, [pc, #72]	; (8003578 <storePowerUpReason+0xa8>)
 800352e:	619a      	str	r2, [r3, #24]
		powerUpReason = SYSTEM_RESET_POWER_UP;
 8003530:	2201      	movs	r2, #1
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <storePowerUpReason+0xb0>)
 8003534:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
 8003536:	4a11      	ldr	r2, [pc, #68]	; (800357c <storePowerUpReason+0xac>)
 8003538:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800353c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003540:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003544:	4770      	bx	lr
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
 8003546:	2207      	movs	r2, #7
 8003548:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <storePowerUpReason+0xb0>)
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	e7f3      	b.n	8003536 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_WATCHDOG;
 800354e:	2202      	movs	r2, #2
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <storePowerUpReason+0xb0>)
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e7ef      	b.n	8003536 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_SOFTWARE;
 8003556:	2203      	movs	r2, #3
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <storePowerUpReason+0xb0>)
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e7eb      	b.n	8003536 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_POWER_UP;
 800355e:	2201      	movs	r2, #1
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <storePowerUpReason+0xb0>)
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	e7e7      	b.n	8003536 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_BOR_RESET;
 8003566:	2204      	movs	r2, #4
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <storePowerUpReason+0xb0>)
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	e7e3      	b.n	8003536 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_LOW_POWER_RESET;
 800356e:	2206      	movs	r2, #6
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <storePowerUpReason+0xb0>)
 8003572:	701a      	strb	r2, [r3, #0]
 8003574:	e7df      	b.n	8003536 <storePowerUpReason+0x66>
 8003576:	bf00      	nop
 8003578:	40007000 	.word	0x40007000
 800357c:	40021000 	.word	0x40021000
 8003580:	2000049c 	.word	0x2000049c

08003584 <watchdogInit>:
	{
		result = WWDGInit();
	}
#endif
	return result;
}
 8003584:	2000      	movs	r0, #0
 8003586:	4770      	bx	lr

08003588 <SystemClock_Config>:
 *
 * @return  None.
 *
 ****************************************************************************/
static eError SystemClock_Config(void)
{
 8003588:	b500      	push	{lr}
 800358a:	b0b3      	sub	sp, #204	; 0xcc
	RCC_PeriphCLKInitTypeDef PeriphClkInit;
#endif

	do
	{
		RCC_OscInitStruct.OscillatorType = SystemMap.OscillatorType;
 800358c:	4b30      	ldr	r3, [pc, #192]	; (8003650 <SystemClock_Config+0xc8>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	9221      	str	r2, [sp, #132]	; 0x84
		RCC_OscInitStruct.HSEState	= SystemMap.HSEState;
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	9222      	str	r2, [sp, #136]	; 0x88
		RCC_OscInitStruct.HSICalibrationValue = SystemMap.HSICalibrationValue;
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	9225      	str	r2, [sp, #148]	; 0x94
		RCC_OscInitStruct.HSIState 	= SystemMap.HSIState;
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	9224      	str	r2, [sp, #144]	; 0x90
		RCC_OscInitStruct.LSEState = SystemMap.LSEState;
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	9223      	str	r2, [sp, #140]	; 0x8c
		RCC_OscInitStruct.LSIState = SystemMap.LSIState;
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	9226      	str	r2, [sp, #152]	; 0x98
		RCC_OscInitStruct.MSIState = SystemMap.MSIState;
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	9227      	str	r2, [sp, #156]	; 0x9c
		RCC_OscInitStruct.MSICalibrationValue = SystemMap.MSICalibrationValue;
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	9228      	str	r2, [sp, #160]	; 0xa0
		RCC_OscInitStruct.MSIClockRange= SystemMap.MSIClockRange;
 80035ae:	6a1a      	ldr	r2, [r3, #32]
 80035b0:	9229      	str	r2, [sp, #164]	; 0xa4

		RCC_OscInitStruct.PLL.PLLState 	= SystemMap.PLLState;
 80035b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035b4:	922b      	str	r2, [sp, #172]	; 0xac
		RCC_OscInitStruct.PLL.PLLSource = SystemMap.PLLSource;
 80035b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035b8:	922c      	str	r2, [sp, #176]	; 0xb0
		RCC_OscInitStruct.PLL.PLLM 		= SystemMap.PLLM;
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	922d      	str	r2, [sp, #180]	; 0xb4
		RCC_OscInitStruct.PLL.PLLN		= SystemMap.PLLN;
 80035be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c0:	922e      	str	r2, [sp, #184]	; 0xb8
		RCC_OscInitStruct.PLL.PLLP		= SystemMap.PLLP;
 80035c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c4:	922f      	str	r2, [sp, #188]	; 0xbc
		RCC_OscInitStruct.PLL.PLLQ		= SystemMap.PLLQ;
 80035c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c8:	9230      	str	r2, [sp, #192]	; 0xc0
		RCC_OscInitStruct.PLL.PLLR		= SystemMap.PLLR;
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	9331      	str	r3, [sp, #196]	; 0xc4
	#if (INDEPENDENT_WATCHDOG == 1)//Assure that LSI is configured ON (needed by IWDG)
		RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_LSI;
		RCC_OscInitStruct.LSIState |= RCC_LSI_ON;
	#endif

		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035ce:	a821      	add	r0, sp, #132	; 0x84
 80035d0:	f001 f9b8 	bl	8004944 <HAL_RCC_OscConfig>
 80035d4:	b118      	cbz	r0, 80035de <SystemClock_Config+0x56>
		{
			result = RET_FAIL;
 80035d6:	2001      	movs	r0, #1
		__HAL_RCC_SYSCFG_CLK_ENABLE();
	} while (0);

	return result;

}
 80035d8:	b033      	add	sp, #204	; 0xcc
 80035da:	f85d fb04 	ldr.w	pc, [sp], #4
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035de:	230f      	movs	r3, #15
 80035e0:	931c      	str	r3, [sp, #112]	; 0x70
		RCC_ClkInitStruct.SYSCLKSource 	 = SystemMap.SYSCLKSource;
 80035e2:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <SystemClock_Config+0xc8>)
 80035e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e6:	921d      	str	r2, [sp, #116]	; 0x74
		RCC_ClkInitStruct.AHBCLKDivider  = SystemMap.AHBCLKDivider;
 80035e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ea:	921e      	str	r2, [sp, #120]	; 0x78
		RCC_ClkInitStruct.APB1CLKDivider = SystemMap.APB1CLKDivider;
 80035ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ee:	921f      	str	r2, [sp, #124]	; 0x7c
		RCC_ClkInitStruct.APB2CLKDivider = SystemMap.APB2CLKDivider;
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	9320      	str	r3, [sp, #128]	; 0x80
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035f4:	2104      	movs	r1, #4
 80035f6:	a81c      	add	r0, sp, #112	; 0x70
 80035f8:	f001 fc90 	bl	8004f1c <HAL_RCC_ClockConfig>
 80035fc:	b108      	cbz	r0, 8003602 <SystemClock_Config+0x7a>
			result = RET_FAIL;
 80035fe:	2001      	movs	r0, #1
 8003600:	e7ea      	b.n	80035d8 <SystemClock_Config+0x50>
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003602:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003606:	f001 f88d 	bl	8004724 <HAL_PWREx_ControlVoltageScaling>
 800360a:	b108      	cbz	r0, 8003610 <SystemClock_Config+0x88>
			result = RET_FAIL;
 800360c:	2001      	movs	r0, #1
 800360e:	e7e3      	b.n	80035d8 <SystemClock_Config+0x50>
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003614:	9302      	str	r3, [sp, #8]
		PeriphClkInit.RTCClockSelection = SystemMap.RTCClockSelection;
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <SystemClock_Config+0xc8>)
 8003618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361a:	931b      	str	r3, [sp, #108]	; 0x6c
		HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800361c:	a802      	add	r0, sp, #8
 800361e:	f001 fe09 	bl	8005234 <HAL_RCCEx_PeriphCLKConfig>
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003622:	f001 fd23 	bl	800506c <HAL_RCC_GetHCLKFreq>
 8003626:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <SystemClock_Config+0xcc>)
 8003628:	fba3 3000 	umull	r3, r0, r3, r0
 800362c:	0980      	lsrs	r0, r0, #6
 800362e:	f000 fd5b 	bl	80040e8 <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003632:	2004      	movs	r0, #4
 8003634:	f000 fd6e 	bl	8004114 <HAL_SYSTICK_CLKSourceConfig>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8003638:	4b07      	ldr	r3, [pc, #28]	; (8003658 <SystemClock_Config+0xd0>)
 800363a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	661a      	str	r2, [r3, #96]	; 0x60
 8003642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	9b01      	ldr	r3, [sp, #4]
	eError result = RET_OK;
 800364c:	2000      	movs	r0, #0
 800364e:	e7c3      	b.n	80035d8 <SystemClock_Config+0x50>
 8003650:	08007dac 	.word	0x08007dac
 8003654:	10624dd3 	.word	0x10624dd3
 8003658:	40021000 	.word	0x40021000

0800365c <RTCSetInitDateTime>:
{
 800365c:	b510      	push	{r4, lr}
 800365e:	b086      	sub	sp, #24
	sTime.Hours = 0x0;
 8003660:	2300      	movs	r3, #0
 8003662:	f88d 3004 	strb.w	r3, [sp, #4]
	sTime.Minutes = 0x0;
 8003666:	f88d 3005 	strb.w	r3, [sp, #5]
	sTime.Seconds = 0x0;
 800366a:	f88d 3006 	strb.w	r3, [sp, #6]
	sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800366e:	2240      	movs	r2, #64	; 0x40
 8003670:	f88d 2007 	strb.w	r2, [sp, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003674:	9304      	str	r3, [sp, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003676:	9305      	str	r3, [sp, #20]
	if (RTCHandler.Instance != NULL) //RTC initialized
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <RTCSetInitDateTime+0x64>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	b1f3      	cbz	r3, 80036bc <RTCSetInitDateTime+0x60>
		if (HAL_RTC_SetTime(&RTCHandler, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800367e:	2201      	movs	r2, #1
 8003680:	a901      	add	r1, sp, #4
 8003682:	480f      	ldr	r0, [pc, #60]	; (80036c0 <RTCSetInitDateTime+0x64>)
 8003684:	f002 f84f 	bl	8005726 <HAL_RTC_SetTime>
 8003688:	b920      	cbnz	r0, 8003694 <RTCSetInitDateTime+0x38>
	eError result = RET_OK;
 800368a:	2400      	movs	r4, #0
		if (result == RET_OK)
 800368c:	b124      	cbz	r4, 8003698 <RTCSetInitDateTime+0x3c>
}
 800368e:	4620      	mov	r0, r4
 8003690:	b006      	add	sp, #24
 8003692:	bd10      	pop	{r4, pc}
			result = RET_FAIL;
 8003694:	2401      	movs	r4, #1
 8003696:	e7f9      	b.n	800368c <RTCSetInitDateTime+0x30>
			sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003698:	2201      	movs	r2, #1
 800369a:	f88d 2000 	strb.w	r2, [sp]
			sDate.Month = RTC_MONTH_JANUARY;
 800369e:	f88d 2001 	strb.w	r2, [sp, #1]
			sDate.Date = 0x1;
 80036a2:	f88d 2002 	strb.w	r2, [sp, #2]
			sDate.Year = 0x0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f88d 3003 	strb.w	r3, [sp, #3]
			if (HAL_RTC_SetDate(&RTCHandler, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80036ac:	4669      	mov	r1, sp
 80036ae:	4804      	ldr	r0, [pc, #16]	; (80036c0 <RTCSetInitDateTime+0x64>)
 80036b0:	f002 f8c1 	bl	8005836 <HAL_RTC_SetDate>
 80036b4:	2800      	cmp	r0, #0
 80036b6:	d0ea      	beq.n	800368e <RTCSetInitDateTime+0x32>
				result = RET_FAIL;
 80036b8:	2401      	movs	r4, #1
 80036ba:	e7e8      	b.n	800368e <RTCSetInitDateTime+0x32>
	eError result = RET_OK;
 80036bc:	2400      	movs	r4, #0
 80036be:	e7e6      	b.n	800368e <RTCSetInitDateTime+0x32>
 80036c0:	20000bfc 	.word	0x20000bfc

080036c4 <RTCInit>:
{
 80036c4:	b500      	push	{lr}
 80036c6:	b083      	sub	sp, #12
	__HAL_RCC_PWR_CLK_ENABLE();
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <RTCInit+0x50>)
 80036ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036d0:	659a      	str	r2, [r3, #88]	; 0x58
 80036d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036d4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80036d8:	9201      	str	r2, [sp, #4]
 80036da:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_RTC_ENABLE();
 80036dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80036e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	__HAL_RTC_RESET_HANDLE_STATE(&RTCHandler);
 80036e8:	480b      	ldr	r0, [pc, #44]	; (8003718 <RTCInit+0x54>)
 80036ea:	2300      	movs	r3, #0
 80036ec:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	RTCHandler.Instance = RTC;
 80036f0:	4a0a      	ldr	r2, [pc, #40]	; (800371c <RTCInit+0x58>)
 80036f2:	6002      	str	r2, [r0, #0]
	RTCHandler.Init.HourFormat = RTC_HOURFORMAT_24;
 80036f4:	6043      	str	r3, [r0, #4]
	RTCHandler.Init.AsynchPrediv = 127;
 80036f6:	227f      	movs	r2, #127	; 0x7f
 80036f8:	6082      	str	r2, [r0, #8]
	RTCHandler.Init.SynchPrediv = 0xF9;//aux;
 80036fa:	22f9      	movs	r2, #249	; 0xf9
 80036fc:	60c2      	str	r2, [r0, #12]
	RTCHandler.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036fe:	6103      	str	r3, [r0, #16]
	RTCHandler.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003700:	6183      	str	r3, [r0, #24]
	RTCHandler.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003702:	61c3      	str	r3, [r0, #28]
	HAL_RTC_Init(&RTCHandler);
 8003704:	f001 ff9a 	bl	800563c <HAL_RTC_Init>
	RTCSetInitDateTime();
 8003708:	f7ff ffa8 	bl	800365c <RTCSetInitDateTime>
}
 800370c:	b003      	add	sp, #12
 800370e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003712:	bf00      	nop
 8003714:	40021000 	.word	0x40021000
 8003718:	20000bfc 	.word	0x20000bfc
 800371c:	40002800 	.word	0x40002800

08003720 <stm32L4Init>:
{
 8003720:	b508      	push	{r3, lr}
	storePowerUpReason();
 8003722:	f7ff fed5 	bl	80034d0 <storePowerUpReason>
	result = SystemClock_Config();
 8003726:	f7ff ff2f 	bl	8003588 <SystemClock_Config>
	if (result == RET_OK)
 800372a:	4603      	mov	r3, r0
 800372c:	b108      	cbz	r0, 8003732 <stm32L4Init+0x12>
}
 800372e:	4618      	mov	r0, r3
 8003730:	bd08      	pop	{r3, pc}
			RTCInit();
 8003732:	f7ff ffc7 	bl	80036c4 <RTCInit>
			result = watchdogInit();
 8003736:	f7ff ff25 	bl	8003584 <watchdogInit>
 800373a:	4603      	mov	r3, r0
 800373c:	e7f7      	b.n	800372e <stm32L4Init+0xe>

0800373e <stm32L4Start>:
}
 800373e:	2000      	movs	r0, #0
 8003740:	4770      	bx	lr

08003742 <stm32L4Wake>:
}
 8003742:	2000      	movs	r0, #0
 8003744:	4770      	bx	lr
	...

08003748 <stm32L4SetPowerMode>:
	if (IS_POWER_MODE(powerMode))
 8003748:	2803      	cmp	r0, #3
 800374a:	d81e      	bhi.n	800378a <stm32L4SetPowerMode+0x42>
{
 800374c:	b500      	push	{lr}
 800374e:	b083      	sub	sp, #12
		switch ( powerMode )
 8003750:	2801      	cmp	r0, #1
 8003752:	d005      	beq.n	8003760 <stm32L4SetPowerMode+0x18>
 8003754:	2803      	cmp	r0, #3
 8003756:	d016      	beq.n	8003786 <stm32L4SetPowerMode+0x3e>
}
 8003758:	2000      	movs	r0, #0
 800375a:	b003      	add	sp, #12
 800375c:	f85d fb04 	ldr.w	pc, [sp], #4
			__PWR_CLK_ENABLE();
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <stm32L4SetPowerMode+0x48>)
 8003762:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003764:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003768:	659a      	str	r2, [r3, #88]	; 0x58
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	9b01      	ldr	r3, [sp, #4]
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003774:	221f      	movs	r2, #31
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <stm32L4SetPowerMode+0x4c>)
 8003778:	619a      	str	r2, [r3, #24]
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800377a:	2001      	movs	r0, #1
 800377c:	f000 ffa8 	bl	80046d0 <HAL_PWR_EnableWakeUpPin>
			HAL_PWR_EnterSTANDBYMode();
 8003780:	f000 ffb6 	bl	80046f0 <HAL_PWR_EnterSTANDBYMode>
 8003784:	e7fe      	b.n	8003784 <stm32L4SetPowerMode+0x3c>
			NVIC_SystemReset();
 8003786:	f7ff fe91 	bl	80034ac <NVIC_SystemReset>
}
 800378a:	2000      	movs	r0, #0
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	40007000 	.word	0x40007000

08003798 <stm32L4Stop>:
{
 8003798:	b508      	push	{r3, lr}
	result = stm32L4SetPowerMode(SYSTEM_EXECUTE_STANDBY);
 800379a:	2001      	movs	r0, #1
 800379c:	f7ff ffd4 	bl	8003748 <stm32L4SetPowerMode>
}
 80037a0:	bd08      	pop	{r3, pc}

080037a2 <stm32L4Sleep>:
{
 80037a2:	b508      	push	{r3, lr}
	result = stm32L4SetPowerMode(SYSTEM_EXECUTE_SLEEP);
 80037a4:	2002      	movs	r0, #2
 80037a6:	f7ff ffcf 	bl	8003748 <stm32L4SetPowerMode>
}
 80037aa:	bd08      	pop	{r3, pc}

080037ac <systemGetCLkFreq>:
 * @brief   Get the System CLK Frequency
 * @param   ClockFrequency.
 * @return  eError.
 ****************************************************************************/
eError systemGetCLkFreq(uint32_t *ClockFrequency)
{
 80037ac:	b510      	push	{r4, lr}
 80037ae:	4604      	mov	r4, r0
    eError result = RET_OK;

    *ClockFrequency = HAL_RCC_GetHCLKFreq();
 80037b0:	f001 fc5c 	bl	800506c <HAL_RCC_GetHCLKFreq>
 80037b4:	6020      	str	r0, [r4, #0]

    return result;
}
 80037b6:	2000      	movs	r0, #0
 80037b8:	bd10      	pop	{r4, pc}

080037ba <systemPreConfiguration>:
 *    then it will jump to execute the interrupt handler located in the Flash
 * @param	None.
 * @return  None.
 ****************************************************************************/
void systemPreConfiguration( void )
{
 80037ba:	4770      	bx	lr

080037bc <initHregSystem>:
/***********************************************************************
 * @brief	API for init System.
 *
 **********************************************************************/
__weak eError initHregSystem( void )
{
 80037bc:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = stm32L4Init();
 80037be:	f7ff ffaf 	bl	8003720 <stm32L4Init>

	return result;
}
 80037c2:	bd08      	pop	{r3, pc}

080037c4 <startHregSystem>:
/***********************************************************************
 * @brief	API for start System.
 *
 **********************************************************************/
__weak eError startHregSystem( void )
{
 80037c4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = stm32L4Start();
 80037c6:	f7ff ffba 	bl	800373e <stm32L4Start>

	return result;
}
 80037ca:	bd08      	pop	{r3, pc}

080037cc <stopHregSystem>:
/***********************************************************************
 * @brief	API for stop System.
 *
 **********************************************************************/
__weak eError stopHregSystem( void )
{
 80037cc:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = stm32L4Stop();
 80037ce:	f7ff ffe3 	bl	8003798 <stm32L4Stop>

	return result;
}
 80037d2:	bd08      	pop	{r3, pc}

080037d4 <sleepHregSystem>:
/***********************************************************************
 * @brief	API for sleep System.
 *
 **********************************************************************/
__weak eError sleepHregSystem( void )
{
 80037d4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = stm32L4Sleep();
 80037d6:	f7ff ffe4 	bl	80037a2 <stm32L4Sleep>

	return result;
}
 80037da:	bd08      	pop	{r3, pc}

080037dc <wakeHregSystem>:
/***********************************************************************
 * @brief	API for wake System.
 *
 **********************************************************************/
__weak eError wakeHregSystem( void )
{
 80037dc:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result =  stm32L4Wake();
 80037de:	f7ff ffb0 	bl	8003742 <stm32L4Wake>

	return result;
}
 80037e2:	bd08      	pop	{r3, pc}

080037e4 <onWriteHregSystemPowerMode>:
/***********************************************************************
 * @brief	On Write function for System powerMode.
 *
 **********************************************************************/
__weak eError onWriteHregSystemPowerMode( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 80037e4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = stm32L4SetPowerMode(param1);
 80037e6:	b2d0      	uxtb	r0, r2
 80037e8:	f7ff ffae 	bl	8003748 <stm32L4SetPowerMode>

	return result;
}
 80037ec:	bd08      	pop	{r3, pc}

080037ee <onReadHregSystemDate>:
	eError result = RET_OK;
#ifdef MON_RTC_ENABLED
	result = RTCGetDate(param1);
#endif
	return result;
}
 80037ee:	2000      	movs	r0, #0
 80037f0:	4770      	bx	lr

080037f2 <onWriteHregSystemDate>:
	eError result = RET_OK;
#ifdef MON_RTC_ENABLED
	result = RTCSetDate(param1);
#endif
	return result;
}
 80037f2:	2000      	movs	r0, #0
 80037f4:	4770      	bx	lr

080037f6 <onReadHregSystemTime>:
	eError result = RET_OK;
#ifdef MON_RTC_ENABLED
	result = RTCGetTime(param1);
#endif
	return result;
}
 80037f6:	2000      	movs	r0, #0
 80037f8:	4770      	bx	lr

080037fa <onWriteHregSystemTime>:
	eError result = RET_OK;
#ifdef MON_RTC_ENABLED
	result = RTCSetTime(param1);
#endif
	return result;
}
 80037fa:	2000      	movs	r0, #0
 80037fc:	4770      	bx	lr
	...

08003800 <spiRestartSlaveMode>:
/****************************************************************************
 *    PUBLIC FUNCTIONS
 ****************************************************************************/

static void spiRestartSlaveMode(SPI_HandleTypeDef *hspi)
{
 8003800:	b508      	push	{r3, lr}
    if (hspi->Instance == SPI3){
        i = SPI_3;
    }
#endif

    if(hspi->Init.Mode == SPI_MODE_SLAVE) {
 8003802:	6843      	ldr	r3, [r0, #4]
 8003804:	b103      	cbz	r3, 8003808 <spiRestartSlaveMode+0x8>
 8003806:	bd08      	pop	{r3, pc}
        HAL_SPI_Receive_IT(hspi, halRxSlaveBuffer[i], SPIInstanceMap[i].rxBufferSize);
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <spiRestartSlaveMode+0x18>)
 800380a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800380e:	4903      	ldr	r1, [pc, #12]	; (800381c <spiRestartSlaveMode+0x1c>)
 8003810:	f002 fa6a 	bl	8005ce8 <HAL_SPI_Receive_IT>
    }
}
 8003814:	e7f7      	b.n	8003806 <spiRestartSlaveMode+0x6>
 8003816:	bf00      	nop
 8003818:	08007e00 	.word	0x08007e00
 800381c:	20000c20 	.word	0x20000c20

08003820 <spiDriverReadITMasterMode>:
 * @param  rdBuffer Buffer where we want to get the data written to
 * @param  rdSize Amount of bytes to read
 * @return eError RET_OK if read process started successfully, RET_FAIL otherwise
 ****************************************************************************/
static eError spiDriverReadITMasterMode(tSpi spiDevice, uint8_t* rdBuffer , uint32_t rdSize)
{
 8003820:	b510      	push	{r4, lr}
    eError result = RET_OK;
    SPI_HandleTypeDef* hspi;
    tSpiPort spiPort;

    spiPort = SPIPeripheralMap[spiDevice].port;
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <spiDriverReadITMasterMode+0x1c>)
 8003824:	5618      	ldrsb	r0, [r3, r0]
    hspi     = &ST_SpiHandlers[spiPort];

    if(HAL_SPI_Receive_IT(hspi, rdBuffer, rdSize) != HAL_OK){
 8003826:	b292      	uxth	r2, r2
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <spiDriverReadITMasterMode+0x20>)
 800382a:	2464      	movs	r4, #100	; 0x64
 800382c:	fb04 3000 	mla	r0, r4, r0, r3
 8003830:	f002 fa5a 	bl	8005ce8 <HAL_SPI_Receive_IT>
 8003834:	b100      	cbz	r0, 8003838 <spiDriverReadITMasterMode+0x18>
        result = RET_FAIL;
 8003836:	2001      	movs	r0, #1
    }

    return result;
}
 8003838:	bd10      	pop	{r4, pc}
 800383a:	bf00      	nop
 800383c:	08007e00 	.word	0x08007e00
 8003840:	20000c20 	.word	0x20000c20

08003844 <spiDriverWriteIT>:
{
 8003844:	b570      	push	{r4, r5, r6, lr}
    spiPort = SPIPeripheralMap[spiDevice].port;
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <spiDriverWriteIT+0x38>)
 8003848:	561c      	ldrsb	r4, [r3, r0]
    hspi     = &ST_SpiHandlers[spiPort];
 800384a:	480d      	ldr	r0, [pc, #52]	; (8003880 <spiDriverWriteIT+0x3c>)
 800384c:	2364      	movs	r3, #100	; 0x64
 800384e:	fb03 0004 	mla	r0, r3, r4, r0
    if(hspi->Init.Mode == SPI_MODE_SLAVE){
 8003852:	6843      	ldr	r3, [r0, #4]
 8003854:	b95b      	cbnz	r3, 800386e <spiDriverWriteIT+0x2a>
        hspi->State = HAL_SPI_STATE_READY;
 8003856:	4d0a      	ldr	r5, [pc, #40]	; (8003880 <spiDriverWriteIT+0x3c>)
 8003858:	2364      	movs	r3, #100	; 0x64
 800385a:	fb03 f304 	mul.w	r3, r3, r4
 800385e:	2601      	movs	r6, #1
 8003860:	f880 605d 	strb.w	r6, [r0, #93]	; 0x5d
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR)); //Do NOT READ DATA!
 8003864:	58ec      	ldr	r4, [r5, r3]
 8003866:	6863      	ldr	r3, [r4, #4]
 8003868:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800386c:	6063      	str	r3, [r4, #4]
    if(HAL_SPI_Transmit_IT(hspi, buffer, size) != HAL_OK){
 800386e:	b292      	uxth	r2, r2
 8003870:	f002 f96a 	bl	8005b48 <HAL_SPI_Transmit_IT>
 8003874:	b100      	cbz	r0, 8003878 <spiDriverWriteIT+0x34>
        result = RET_BUSY;
 8003876:	2009      	movs	r0, #9
}
 8003878:	bd70      	pop	{r4, r5, r6, pc}
 800387a:	bf00      	nop
 800387c:	08007e00 	.word	0x08007e00
 8003880:	20000c20 	.word	0x20000c20

08003884 <spiDriverReadITSlaveMode>:
{
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	460f      	mov	r7, r1
 8003888:	4616      	mov	r6, r2
    spiPort = SPIPeripheralMap[spiDevice].port;
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <spiDriverReadITSlaveMode+0x38>)
 800388c:	561b      	ldrsb	r3, [r3, r0]
    if(GetQueuePendingBytes(&spiCBuffers[spiPort].rxBuffer) < rdSize ){
 800388e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003892:	00dd      	lsls	r5, r3, #3
 8003894:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <spiDriverReadITSlaveMode+0x3c>)
 8003896:	441d      	add	r5, r3
 8003898:	4628      	mov	r0, r5
 800389a:	f7fe f943 	bl	8001b24 <GetQueuePendingBytes>
 800389e:	42b0      	cmp	r0, r6
 80038a0:	d30a      	bcc.n	80038b8 <spiDriverReadITSlaveMode+0x34>
 80038a2:	2400      	movs	r4, #0
 80038a4:	e004      	b.n	80038b0 <spiDriverReadITSlaveMode+0x2c>
            byte = GetQueueByte(&spiCBuffers[spiPort].rxBuffer);
 80038a6:	4628      	mov	r0, r5
 80038a8:	f7fe f926 	bl	8001af8 <GetQueueByte>
            rdBuffer[i] = byte;
 80038ac:	5538      	strb	r0, [r7, r4]
        for(i=0; i<rdSize; i++){
 80038ae:	3401      	adds	r4, #1
 80038b0:	42b4      	cmp	r4, r6
 80038b2:	d3f8      	bcc.n	80038a6 <spiDriverReadITSlaveMode+0x22>
        result = RET_OK;
 80038b4:	2000      	movs	r0, #0
 80038b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result =  RET_FAIL;
 80038b8:	2001      	movs	r0, #1
}
 80038ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038bc:	08007e00 	.word	0x08007e00
 80038c0:	20000c20 	.word	0x20000c20

080038c4 <HAL_SPI_TxCpltCallback>:
void  HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi){
 80038c4:	b508      	push	{r3, lr}
    spiRestartSlaveMode(hspi);
 80038c6:	f7ff ff9b 	bl	8003800 <spiRestartSlaveMode>
 80038ca:	bd08      	pop	{r3, pc}

080038cc <HAL_SPI_ErrorCallback>:
void  HAL_SPI_ErrorCallback (SPI_HandleTypeDef *hspi){
 80038cc:	b508      	push	{r3, lr}
    spiRestartSlaveMode(hspi);
 80038ce:	f7ff ff97 	bl	8003800 <spiRestartSlaveMode>
 80038d2:	bd08      	pop	{r3, pc}

080038d4 <spiInit>:
}
 80038d4:	2000      	movs	r0, #0
 80038d6:	4770      	bx	lr

080038d8 <spiStop>:
}
 80038d8:	2000      	movs	r0, #0
 80038da:	4770      	bx	lr

080038dc <spiStart>:
}
 80038dc:	2000      	movs	r0, #0
 80038de:	4770      	bx	lr

080038e0 <spiSleep>:
}
 80038e0:	2000      	movs	r0, #0
 80038e2:	4770      	bx	lr

080038e4 <spiWake>:
}
 80038e4:	2000      	movs	r0, #0
 80038e6:	4770      	bx	lr

080038e8 <spiDriverStatus>:
{
 80038e8:	b508      	push	{r3, lr}
    spiPort = SPIPeripheralMap[spiDevice].port;
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <spiDriverStatus+0x38>)
 80038ec:	561a      	ldrsb	r2, [r3, r0]
    switch (HAL_SPI_GetState(hspi)){
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <spiDriverStatus+0x3c>)
 80038f0:	2064      	movs	r0, #100	; 0x64
 80038f2:	fb00 3002 	mla	r0, r0, r2, r3
 80038f6:	f002 fbdb 	bl	80060b0 <HAL_SPI_GetState>
 80038fa:	2807      	cmp	r0, #7
 80038fc:	d80b      	bhi.n	8003916 <spiDriverStatus+0x2e>
 80038fe:	e8df f000 	tbb	[pc, r0]
 8003902:	0c04      	.short	0x0c04
 8003904:	06060606 	.word	0x06060606
 8003908:	0808      	.short	0x0808
            return RET_NOT_INITIALIZED;
 800390a:	2002      	movs	r0, #2
 800390c:	bd08      	pop	{r3, pc}
            return RET_BUSY;
 800390e:	2009      	movs	r0, #9
 8003910:	bd08      	pop	{r3, pc}
            return RET_FAIL;
 8003912:	2001      	movs	r0, #1
 8003914:	bd08      	pop	{r3, pc}
    return RET_FAIL; //Default case, we don't know what happened
 8003916:	2001      	movs	r0, #1
 8003918:	bd08      	pop	{r3, pc}
            return RET_OK;
 800391a:	2000      	movs	r0, #0
}
 800391c:	bd08      	pop	{r3, pc}
 800391e:	bf00      	nop
 8003920:	08007e00 	.word	0x08007e00
 8003924:	20000c20 	.word	0x20000c20

08003928 <spiDriverWrite>:
{
 8003928:	b538      	push	{r3, r4, r5, lr}
    spiPort = SPIPeripheralMap[spiDevice].port;
 800392a:	4b1c      	ldr	r3, [pc, #112]	; (800399c <spiDriverWrite+0x74>)
 800392c:	561c      	ldrsb	r4, [r3, r0]
    bufferSize = spiBufferSize[spiPort];
 800392e:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <spiDriverWrite+0x78>)
 8003930:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if(bufferSize == 0){
 8003934:	b90d      	cbnz	r5, 800393a <spiDriverWrite+0x12>
        return RET_INVALID_PARAMETER;
 8003936:	2005      	movs	r0, #5
 8003938:	bd38      	pop	{r3, r4, r5, pc}
    if(bufferSize > SPIInstanceMap[spiPort].txBufferSize){
 800393a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800393e:	011a      	lsls	r2, r3, #4
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <spiDriverWrite+0x7c>)
 8003942:	4413      	add	r3, r2
 8003944:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003946:	429d      	cmp	r5, r3
 8003948:	d901      	bls.n	800394e <spiDriverWrite+0x26>
        return RET_INVALID_PARAMETER;
 800394a:	2005      	movs	r0, #5
 800394c:	bd38      	pop	{r3, r4, r5, pc}
    	if ( SPIInstanceMap[spiPort].dataSize == SPI_DATASIZE_8BIT){
 800394e:	4b15      	ldr	r3, [pc, #84]	; (80039a4 <spiDriverWrite+0x7c>)
 8003950:	4413      	add	r3, r2
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003958:	d004      	beq.n	8003964 <spiDriverWrite+0x3c>
    	else if(SPIInstanceMap[spiPort].dataSize == SPI_DATASIZE_16BIT)
 800395a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800395e:	d008      	beq.n	8003972 <spiDriverWrite+0x4a>
    		return RET_FAIL;
 8003960:	2001      	movs	r0, #1
}
 8003962:	bd38      	pop	{r3, r4, r5, pc}
    		memcpy(SPIInstanceMap[spiPort].txBufferPtr, buffer, bufferSize);
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <spiDriverWrite+0x7c>)
 8003966:	4413      	add	r3, r2
 8003968:	462a      	mov	r2, r5
 800396a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800396c:	f003 f964 	bl	8006c38 <memcpy>
 8003970:	e008      	b.n	8003984 <spiDriverWrite+0x5c>
    		memcpy(SPIInstanceMap[spiPort].txBufferPtr, buffer, bufferSize*2);
 8003972:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003976:	011a      	lsls	r2, r3, #4
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <spiDriverWrite+0x7c>)
 800397a:	4413      	add	r3, r2
 800397c:	006a      	lsls	r2, r5, #1
 800397e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003980:	f003 f95a 	bl	8006c38 <memcpy>
    result = spiDriverWriteIT(spiPort, SPIInstanceMap[spiPort].txBufferPtr, bufferSize);
 8003984:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003988:	011a      	lsls	r2, r3, #4
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <spiDriverWrite+0x7c>)
 800398c:	4413      	add	r3, r2
 800398e:	462a      	mov	r2, r5
 8003990:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003992:	b2e0      	uxtb	r0, r4
 8003994:	f7ff ff56 	bl	8003844 <spiDriverWriteIT>
    return result;
 8003998:	bd38      	pop	{r3, r4, r5, pc}
 800399a:	bf00      	nop
 800399c:	08007e00 	.word	0x08007e00
 80039a0:	20000c20 	.word	0x20000c20
 80039a4:	08007e00 	.word	0x08007e00

080039a8 <spiDriverRead>:
eError spiDriverRead(tSpi spiDevice, uint8_t* buffer)
{
    uint32_t rdSize;
    tSpiPort spiPort;

    spiPort = SPIPeripheralMap[spiDevice].port;
 80039a8:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <spiDriverRead+0x34>)
 80039aa:	5618      	ldrsb	r0, [r3, r0]
    rdSize = spiBufferSize[spiPort];
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <spiDriverRead+0x38>)
 80039ae:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

    if(rdSize == 0){
 80039b2:	b90a      	cbnz	r2, 80039b8 <spiDriverRead+0x10>
        return RET_INVALID_PARAMETER;
 80039b4:	2005      	movs	r0, #5
 80039b6:	4770      	bx	lr
{
 80039b8:	b510      	push	{r4, lr}
    }

#if defined(MON_SPI_RX_IT)
    if(SPIInstanceMap[spiPort].mode == SPI_MODE_MASTER){
 80039ba:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80039be:	011c      	lsls	r4, r3, #4
 80039c0:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <spiDriverRead+0x3c>)
 80039c2:	4423      	add	r3, r4
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ca:	d003      	beq.n	80039d4 <spiDriverRead+0x2c>
        return spiDriverReadITMasterMode(spiPort, buffer, rdSize);
    }
    else{
        return spiDriverReadITSlaveMode(spiPort, buffer, rdSize);
 80039cc:	b2c0      	uxtb	r0, r0
 80039ce:	f7ff ff59 	bl	8003884 <spiDriverReadITSlaveMode>
 80039d2:	bd10      	pop	{r4, pc}
        return spiDriverReadITMasterMode(spiPort, buffer, rdSize);
 80039d4:	b2c0      	uxtb	r0, r0
 80039d6:	f7ff ff23 	bl	8003820 <spiDriverReadITMasterMode>
 80039da:	bd10      	pop	{r4, pc}
 80039dc:	08007e00 	.word	0x08007e00
 80039e0:	20000c20 	.word	0x20000c20
 80039e4:	08007e00 	.word	0x08007e00

080039e8 <spiDriverSetBufferSize>:
eError spiDriverSetBufferSize(tSpi spiDevice, uint32_t bufferSize )
{
    eError result = RET_OK;
    tSpiPort spiPort;

    spiPort = SPIPeripheralMap[spiDevice].port;
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <spiDriverSetBufferSize+0x10>)
 80039ea:	561a      	ldrsb	r2, [r3, r0]

    spiBufferSize[spiPort] = bufferSize;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <spiDriverSetBufferSize+0x14>)
 80039ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return result;
}
 80039f2:	2000      	movs	r0, #0
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	08007e00 	.word	0x08007e00
 80039fc:	20000c20 	.word	0x20000c20

08003a00 <spiDriverGetBufferSize>:
 * @return  error state.
 *
 * @todo    pending implementation
 ****************************************************************************/
uint32_t spiDriverGetBufferSize(tSpi spiDevice)
{
 8003a00:	b508      	push	{r3, lr}

#if defined(MON_SPI_RX_IT) || defined(MON_SPI_RX_DMA)
    tSpiPort spiPort;

    spiPort = SPIPeripheralMap[spiDevice].port;
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <spiDriverGetBufferSize+0x18>)
 8003a04:	561b      	ldrsb	r3, [r3, r0]

    return (GetQueuePendingBytes(&spiCBuffers[spiPort].rxBuffer));
 8003a06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003a0a:	00da      	lsls	r2, r3, #3
 8003a0c:	4803      	ldr	r0, [pc, #12]	; (8003a1c <spiDriverGetBufferSize+0x1c>)
 8003a0e:	4410      	add	r0, r2
 8003a10:	f7fe f888 	bl	8001b24 <GetQueuePendingBytes>
#else
    return 0; //If it's Polling there are no buffers
#endif
}
 8003a14:	bd08      	pop	{r3, pc}
 8003a16:	bf00      	nop
 8003a18:	08007e00 	.word	0x08007e00
 8003a1c:	20000c20 	.word	0x20000c20

08003a20 <initHregSpi>:
/***********************************************************************
 * @brief	API for init Spi.
 *
 **********************************************************************/
__weak eError initHregSpi( void )
{
 8003a20:	b508      	push	{r3, lr}
	eError result = RET_OK;

    spiInit();
 8003a22:	f7ff ff57 	bl	80038d4 <spiInit>

	return result;
}
 8003a26:	2000      	movs	r0, #0
 8003a28:	bd08      	pop	{r3, pc}

08003a2a <startHregSpi>:
/***********************************************************************
 * @brief	API for start Spi.
 *
 **********************************************************************/
__weak eError startHregSpi( void )
{
 8003a2a:	b508      	push	{r3, lr}
	eError result = RET_OK;

    spiStart();
 8003a2c:	f7ff ff56 	bl	80038dc <spiStart>

	return result;
}
 8003a30:	2000      	movs	r0, #0
 8003a32:	bd08      	pop	{r3, pc}

08003a34 <stopHregSpi>:
/***********************************************************************
 * @brief	API for stop Spi.
 *
 **********************************************************************/
__weak eError stopHregSpi( void )
{
 8003a34:	b508      	push	{r3, lr}
	eError result = RET_OK;

    spiStop();
 8003a36:	f7ff ff4f 	bl	80038d8 <spiStop>

	return result;
}
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	bd08      	pop	{r3, pc}

08003a3e <sleepHregSpi>:
/***********************************************************************
 * @brief	API for sleep Spi.
 *
 **********************************************************************/
__weak eError sleepHregSpi( void )
{
 8003a3e:	b508      	push	{r3, lr}
	eError result = RET_OK;

    spiSleep();
 8003a40:	f7ff ff4e 	bl	80038e0 <spiSleep>

	return result;
}
 8003a44:	2000      	movs	r0, #0
 8003a46:	bd08      	pop	{r3, pc}

08003a48 <wakeHregSpi>:
/***********************************************************************
 * @brief	API for wake Spi.
 *
 **********************************************************************/
__weak eError wakeHregSpi( void )
{
 8003a48:	b508      	push	{r3, lr}
	eError result = RET_OK;

    spiWake();
 8003a4a:	f7ff ff4b 	bl	80038e4 <spiWake>

	return result;
}
 8003a4e:	2000      	movs	r0, #0
 8003a50:	bd08      	pop	{r3, pc}

08003a52 <onReadHregSpiBufferSize>:
/***********************************************************************
 * @brief	On Read function for Spi bufferSize.
 *
 **********************************************************************/
__weak eError onReadHregSpiBufferSize( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003a52:	b510      	push	{r4, lr}
 8003a54:	4614      	mov	r4, r2
	eError result = RET_OK;

    *(uint32_t*)param1 = spiDriverGetBufferSize((tSpi)instance);
 8003a56:	f7ff ffd3 	bl	8003a00 <spiDriverGetBufferSize>
 8003a5a:	6020      	str	r0, [r4, #0]

	return result;
}
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	bd10      	pop	{r4, pc}

08003a60 <onWriteHregSpiBufferSize>:
/***********************************************************************
 * @brief	On Write function for Spi bufferSize.
 *
 **********************************************************************/
__weak eError onWriteHregSpiBufferSize( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8003a60:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = spiDriverSetBufferSize((tSpi)instance, param1);
 8003a62:	4611      	mov	r1, r2
 8003a64:	f7ff ffc0 	bl	80039e8 <spiDriverSetBufferSize>

	return result;
}
 8003a68:	bd08      	pop	{r3, pc}

08003a6a <onReadHregSpiData>:
/***********************************************************************
 * @brief	On Read function for Spi data.
 *
 **********************************************************************/
__weak eError onReadHregSpiData( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003a6a:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = spiDriverRead((tSpi)instance, (uint8_t*) param1);
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	f7ff ff9b 	bl	80039a8 <spiDriverRead>

	return result;
}
 8003a72:	bd08      	pop	{r3, pc}

08003a74 <onWriteHregSpiData>:
/***********************************************************************
 * @brief	On Write function for Spi data.
 *
 **********************************************************************/
__weak eError onWriteHregSpiData( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8003a74:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = spiDriverWrite((tSpi)instance, (uint8_t*) param1);
 8003a76:	4611      	mov	r1, r2
 8003a78:	f7ff ff56 	bl	8003928 <spiDriverWrite>

	return result;
}
 8003a7c:	bd08      	pop	{r3, pc}

08003a7e <onReadHregSpiStatus>:
/***********************************************************************
 * @brief	On Read function for Spi status.
 *
 **********************************************************************/
__weak eError onReadHregSpiStatus( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003a7e:	b510      	push	{r4, lr}
 8003a80:	4614      	mov	r4, r2
	eError result = RET_OK;

    *(uint8_t*)param1 = spiDriverStatus((tSpi)instance);
 8003a82:	f7ff ff31 	bl	80038e8 <spiDriverStatus>
 8003a86:	7020      	strb	r0, [r4, #0]

	return result;
}
 8003a88:	2000      	movs	r0, #0
 8003a8a:	bd10      	pop	{r4, pc}

08003a8c <uartDriverReadIT>:
 * @param Buffer where we want to get the data written to
 * @param rdSize Amount of bytes to read
 * @return eError RET_OK if read successful, RET_FAIL otherwise
 ****************************************************************************/
static eError uartDriverReadIT(tUart uartPort, uint8_t* rdBuffer , uint32_t rdSize)
{
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	460f      	mov	r7, r1
 8003a90:	4616      	mov	r6, r2
    eError result = RET_FAIL;
    uint32_t i;
    uint8_t byte;

    if(GetQueuePendingBytes(&uartCBuffers[uartPort].rxBuffer) < rdSize ){
 8003a92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003a96:	00c5      	lsls	r5, r0, #3
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <uartDriverReadIT+0x34>)
 8003a9a:	441d      	add	r5, r3
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f7fe f841 	bl	8001b24 <GetQueuePendingBytes>
 8003aa2:	42b0      	cmp	r0, r6
 8003aa4:	d30a      	bcc.n	8003abc <uartDriverReadIT+0x30>
 8003aa6:	2400      	movs	r4, #0
 8003aa8:	e004      	b.n	8003ab4 <uartDriverReadIT+0x28>
        result =  RET_FAIL;
    }else{
        for(i=0; i<rdSize; i++){
            byte = GetQueueByte(&uartCBuffers[uartPort].rxBuffer);
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f7fe f824 	bl	8001af8 <GetQueueByte>
            rdBuffer[i] = byte;
 8003ab0:	5538      	strb	r0, [r7, r4]
        for(i=0; i<rdSize; i++){
 8003ab2:	3401      	adds	r4, #1
 8003ab4:	42b4      	cmp	r4, r6
 8003ab6:	d3f8      	bcc.n	8003aaa <uartDriverReadIT+0x1e>
        }
        result = RET_OK;
 8003ab8:	2000      	movs	r0, #0
 8003aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result =  RET_FAIL;
 8003abc:	2001      	movs	r0, #1
    }

    return result;
}
 8003abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ac0:	20000c20 	.word	0x20000c20

08003ac4 <uartDriverWritePolling>:
{
 8003ac4:	b538      	push	{r3, r4, r5, lr}
    bufferSize = uartBufferSize[uartPort];
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <uartDriverWritePolling+0x30>)
 8003ac8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    huart = &ST_UartHandlers[uartPort];
 8003acc:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8003ad0:	00dc      	lsls	r4, r3, #3
    timeout = (bufferSize * 8) * UARTInstanceMap[uartPort].baudRate;
 8003ad2:	252c      	movs	r5, #44	; 0x2c
 8003ad4:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <uartDriverWritePolling+0x34>)
 8003ad6:	fb05 3000 	mla	r0, r5, r0, r3
 8003ada:	6843      	ldr	r3, [r0, #4]
 8003adc:	fb03 f302 	mul.w	r3, r3, r2
    if (HAL_UART_Transmit(huart, buffer, bufferSize, timeout) != HAL_OK){
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	b292      	uxth	r2, r2
 8003ae4:	4805      	ldr	r0, [pc, #20]	; (8003afc <uartDriverWritePolling+0x38>)
 8003ae6:	4420      	add	r0, r4
 8003ae8:	f002 ffad 	bl	8006a46 <HAL_UART_Transmit>
 8003aec:	b100      	cbz	r0, 8003af0 <uartDriverWritePolling+0x2c>
        result = RET_FAIL;
 8003aee:	2001      	movs	r0, #1
}
 8003af0:	bd38      	pop	{r3, r4, r5, pc}
 8003af2:	bf00      	nop
 8003af4:	20000c54 	.word	0x20000c54
 8003af8:	08007e04 	.word	0x08007e04
 8003afc:	20000c5c 	.word	0x20000c5c

08003b00 <HAL_UART_MspInit>:
{
 8003b00:	b082      	sub	sp, #8
    if(huart->Instance == USART1){
 8003b02:	6803      	ldr	r3, [r0, #0]
 8003b04:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <HAL_UART_MspInit+0x4c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <HAL_UART_MspInit+0x14>
    else if (huart->Instance == USART2){
 8003b0a:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <HAL_UART_MspInit+0x50>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00c      	beq.n	8003b2a <HAL_UART_MspInit+0x2a>
}
 8003b10:	b002      	add	sp, #8
 8003b12:	4770      	bx	lr
        __HAL_RCC_USART1_CLK_ENABLE();
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <HAL_UART_MspInit+0x54>)
 8003b16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b1c:	661a      	str	r2, [r3, #96]	; 0x60
 8003b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	9b00      	ldr	r3, [sp, #0]
 8003b28:	e009      	b.n	8003b3e <HAL_UART_MspInit+0x3e>
        __HAL_RCC_USART2_CLK_ENABLE();
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <HAL_UART_MspInit+0x54>)
 8003b2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003b2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b32:	659a      	str	r2, [r3, #88]	; 0x58
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	9b01      	ldr	r3, [sp, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b3e:	6802      	ldr	r2, [r0, #0]
 8003b40:	6813      	ldr	r3, [r2, #0]
 8003b42:	f043 0320 	orr.w	r3, r3, #32
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e7e2      	b.n	8003b10 <HAL_UART_MspInit+0x10>
 8003b4a:	bf00      	nop
 8003b4c:	40013800 	.word	0x40013800
 8003b50:	40004400 	.word	0x40004400
 8003b54:	40021000 	.word	0x40021000

08003b58 <HAL_UART_MspDeInit>:
    if(huart->Instance == USART1){
 8003b58:	6803      	ldr	r3, [r0, #0]
 8003b5a:	4a0d      	ldr	r2, [pc, #52]	; (8003b90 <HAL_UART_MspDeInit+0x38>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <HAL_UART_MspDeInit+0x10>
    else if (huart->Instance == USART2){
 8003b60:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <HAL_UART_MspDeInit+0x3c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00a      	beq.n	8003b7c <HAL_UART_MspDeInit+0x24>
 8003b66:	4770      	bx	lr
        __HAL_RCC_USART1_FORCE_RESET();
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_UART_MspDeInit+0x40>)
 8003b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_RCC_USART1_RELEASE_RESET();
 8003b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
 8003b7a:	4770      	bx	lr
        __HAL_RCC_USART2_FORCE_RESET();
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_UART_MspDeInit+0x40>)
 8003b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_USART2_RELEASE_RESET();
 8003b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b88:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b8e:	e7ea      	b.n	8003b66 <HAL_UART_MspDeInit+0xe>
 8003b90:	40013800 	.word	0x40013800
 8003b94:	40004400 	.word	0x40004400
 8003b98:	40021000 	.word	0x40021000

08003b9c <HAL_UART_TxCpltCallback>:
{
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	b082      	sub	sp, #8
	if ( GetQueuePendingBytes(&uartCBuffers[uartPortIrq].txBuffer) != 0)
 8003ba0:	4b1a      	ldr	r3, [pc, #104]	; (8003c0c <HAL_UART_TxCpltCallback+0x70>)
 8003ba2:	f993 3000 	ldrsb.w	r3, [r3]
 8003ba6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003baa:	00d8      	lsls	r0, r3, #3
 8003bac:	3008      	adds	r0, #8
 8003bae:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <HAL_UART_TxCpltCallback+0x74>)
 8003bb0:	4418      	add	r0, r3
 8003bb2:	3004      	adds	r0, #4
 8003bb4:	f7fd ffb6 	bl	8001b24 <GetQueuePendingBytes>
 8003bb8:	b968      	cbnz	r0, 8003bd6 <HAL_UART_TxCpltCallback+0x3a>
		 __HAL_UART_DISABLE_IT(&ST_UartHandlers[uartPortIrq], UART_IT_TXE);
 8003bba:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <HAL_UART_TxCpltCallback+0x70>)
 8003bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8003bc0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8003bc4:	00da      	lsls	r2, r3, #3
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <HAL_UART_TxCpltCallback+0x78>)
 8003bc8:	589a      	ldr	r2, [r3, r2]
 8003bca:	6813      	ldr	r3, [r2, #0]
 8003bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bd0:	6013      	str	r3, [r2, #0]
}
 8003bd2:	b002      	add	sp, #8
 8003bd4:	bd10      	pop	{r4, pc}
		 byte = (uint8_t)(GetQueueByte(&uartCBuffers[uartPortIrq].txBuffer) & (uint8_t)0xFF);
 8003bd6:	4c0d      	ldr	r4, [pc, #52]	; (8003c0c <HAL_UART_TxCpltCallback+0x70>)
 8003bd8:	f994 3000 	ldrsb.w	r3, [r4]
 8003bdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003be0:	00d8      	lsls	r0, r3, #3
 8003be2:	3008      	adds	r0, #8
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <HAL_UART_TxCpltCallback+0x74>)
 8003be6:	4418      	add	r0, r3
 8003be8:	3004      	adds	r0, #4
 8003bea:	f7fd ff85 	bl	8001af8 <GetQueueByte>
 8003bee:	a902      	add	r1, sp, #8
 8003bf0:	f801 0d01 	strb.w	r0, [r1, #-1]!
		 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPortIrq], &byte, 1);
 8003bf4:	f994 3000 	ldrsb.w	r3, [r4]
 8003bf8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8003bfc:	00d8      	lsls	r0, r3, #3
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <HAL_UART_TxCpltCallback+0x78>)
 8003c02:	4418      	add	r0, r3
 8003c04:	f002 fad0 	bl	80061a8 <HAL_UART_Transmit_IT>
 8003c08:	e7e3      	b.n	8003bd2 <HAL_UART_TxCpltCallback+0x36>
 8003c0a:	bf00      	nop
 8003c0c:	2000049d 	.word	0x2000049d
 8003c10:	20000c20 	.word	0x20000c20
 8003c14:	20000c5c 	.word	0x20000c5c

08003c18 <HAL_UART_RxCpltCallback>:
{
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4604      	mov	r4, r0
	muart = &UARTInstanceMap[uartPortIrq];
 8003c1c:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <HAL_UART_RxCpltCallback+0x60>)
 8003c1e:	f993 2000 	ldrsb.w	r2, [r3]
	if(muart->rxCallback != NULL){
 8003c22:	232c      	movs	r3, #44	; 0x2c
 8003c24:	4915      	ldr	r1, [pc, #84]	; (8003c7c <HAL_UART_RxCpltCallback+0x64>)
 8003c26:	fb03 1302 	mla	r3, r3, r2, r1
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	b143      	cbz	r3, 8003c40 <HAL_UART_RxCpltCallback+0x28>
		muart->rxCallback(byteRxBuffer);
 8003c2e:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <HAL_UART_RxCpltCallback+0x68>)
 8003c30:	7810      	ldrb	r0, [r2, #0]
 8003c32:	4798      	blx	r3
	 HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8003c34:	2201      	movs	r2, #1
 8003c36:	4912      	ldr	r1, [pc, #72]	; (8003c80 <HAL_UART_RxCpltCallback+0x68>)
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f002 faf1 	bl	8006220 <HAL_UART_Receive_IT>
 8003c3e:	bd10      	pop	{r4, pc}
		if(GetQueueFreeBytes(&uartCBuffers[uartPortIrq].rxBuffer) > 0){
 8003c40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003c44:	00d3      	lsls	r3, r2, #3
 8003c46:	480f      	ldr	r0, [pc, #60]	; (8003c84 <HAL_UART_RxCpltCallback+0x6c>)
 8003c48:	4418      	add	r0, r3
 8003c4a:	f7fd ff6d 	bl	8001b28 <GetQueueFreeBytes>
 8003c4e:	b930      	cbnz	r0, 8003c5e <HAL_UART_RxCpltCallback+0x46>
			uartStatus[uartPortIrq] = RET_BUFFER_FULL;
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_UART_RxCpltCallback+0x60>)
 8003c52:	f993 3000 	ldrsb.w	r3, [r3]
 8003c56:	2108      	movs	r1, #8
 8003c58:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <HAL_UART_RxCpltCallback+0x70>)
 8003c5a:	54d1      	strb	r1, [r2, r3]
 8003c5c:	e7ea      	b.n	8003c34 <HAL_UART_RxCpltCallback+0x1c>
			AddQueueByte(&uartCBuffers[uartPortIrq].rxBuffer, byteRxBuffer);
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <HAL_UART_RxCpltCallback+0x60>)
 8003c60:	f993 3000 	ldrsb.w	r3, [r3]
 8003c64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003c68:	00da      	lsls	r2, r3, #3
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_UART_RxCpltCallback+0x68>)
 8003c6c:	7819      	ldrb	r1, [r3, #0]
 8003c6e:	4805      	ldr	r0, [pc, #20]	; (8003c84 <HAL_UART_RxCpltCallback+0x6c>)
 8003c70:	4410      	add	r0, r2
 8003c72:	f7fd ff2a 	bl	8001aca <AddQueueByte>
 8003c76:	e7dd      	b.n	8003c34 <HAL_UART_RxCpltCallback+0x1c>
 8003c78:	2000049d 	.word	0x2000049d
 8003c7c:	08007e04 	.word	0x08007e04
 8003c80:	20000d4c 	.word	0x20000d4c
 8003c84:	20000c20 	.word	0x20000c20
 8003c88:	20000c50 	.word	0x20000c50

08003c8c <uartDriverMainIRQHandler>:
{
 8003c8c:	b508      	push	{r3, lr}
    huart = &ST_UartHandlers[uartPort];
 8003c8e:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 8003c92:	00d3      	lsls	r3, r2, #3
    uartPortIrq = uartPort;
 8003c94:	4a03      	ldr	r2, [pc, #12]	; (8003ca4 <uartDriverMainIRQHandler+0x18>)
 8003c96:	7010      	strb	r0, [r2, #0]
    HAL_UART_IRQHandler(huart);
 8003c98:	4803      	ldr	r0, [pc, #12]	; (8003ca8 <uartDriverMainIRQHandler+0x1c>)
 8003c9a:	4418      	add	r0, r3
 8003c9c:	f002 fb9c 	bl	80063d8 <HAL_UART_IRQHandler>
 8003ca0:	bd08      	pop	{r3, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000049d 	.word	0x2000049d
 8003ca8:	20000c5c 	.word	0x20000c5c

08003cac <HAL_UART_ErrorCallback>:
{
 8003cac:	4770      	bx	lr
	...

08003cb0 <uartInit>:
{
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i=0; i<NUM_OF_UART; i++) {
 8003cb2:	2400      	movs	r4, #0
 8003cb4:	e02c      	b.n	8003d10 <uartInit+0x60>
        huart->Instance        = muart->port;
 8003cb6:	4a18      	ldr	r2, [pc, #96]	; (8003d18 <uartInit+0x68>)
 8003cb8:	232c      	movs	r3, #44	; 0x2c
 8003cba:	fb03 f304 	mul.w	r3, r3, r4
 8003cbe:	18d5      	adds	r5, r2, r3
 8003cc0:	58d0      	ldr	r0, [r2, r3]
 8003cc2:	4916      	ldr	r1, [pc, #88]	; (8003d1c <uartInit+0x6c>)
 8003cc4:	0123      	lsls	r3, r4, #4
 8003cc6:	1b1b      	subs	r3, r3, r4
 8003cc8:	00da      	lsls	r2, r3, #3
 8003cca:	188b      	adds	r3, r1, r2
 8003ccc:	5088      	str	r0, [r1, r2]
        huart->Init.BaudRate   = muart->baudRate;
 8003cce:	686a      	ldr	r2, [r5, #4]
 8003cd0:	605a      	str	r2, [r3, #4]
        huart->Init.WordLength = muart->dataSize;
 8003cd2:	7a2a      	ldrb	r2, [r5, #8]
 8003cd4:	609a      	str	r2, [r3, #8]
        huart->Init.StopBits   = muart->stopBits;
 8003cd6:	7aaa      	ldrb	r2, [r5, #10]
 8003cd8:	60da      	str	r2, [r3, #12]
        huart->Init.Parity     = muart->parity;
 8003cda:	7a6a      	ldrb	r2, [r5, #9]
 8003cdc:	611a      	str	r2, [r3, #16]
        huart->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003cde:	2200      	movs	r2, #0
 8003ce0:	619a      	str	r2, [r3, #24]
        huart->Init.Mode       = UART_MODE_TX_RX;
 8003ce2:	210c      	movs	r1, #12
 8003ce4:	6159      	str	r1, [r3, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003ce6:	61da      	str	r2, [r3, #28]
		CreateQueue(&uartCBuffers[i].rxBuffer,
 8003ce8:	0066      	lsls	r6, r4, #1
 8003cea:	1933      	adds	r3, r6, r4
 8003cec:	00d8      	lsls	r0, r3, #3
 8003cee:	4f0c      	ldr	r7, [pc, #48]	; (8003d20 <uartInit+0x70>)
 8003cf0:	8aaa      	ldrh	r2, [r5, #20]
 8003cf2:	69a9      	ldr	r1, [r5, #24]
 8003cf4:	4438      	add	r0, r7
 8003cf6:	f7fd fee1 	bl	8001abc <CreateQueue>
		CreateQueue(&uartCBuffers[i].txBuffer,
 8003cfa:	4426      	add	r6, r4
 8003cfc:	00f0      	lsls	r0, r6, #3
 8003cfe:	3008      	adds	r0, #8
 8003d00:	4438      	add	r0, r7
 8003d02:	89aa      	ldrh	r2, [r5, #12]
 8003d04:	6929      	ldr	r1, [r5, #16]
 8003d06:	3004      	adds	r0, #4
 8003d08:	f7fd fed8 	bl	8001abc <CreateQueue>
    for(i=0; i<NUM_OF_UART; i++) {
 8003d0c:	3401      	adds	r4, #1
 8003d0e:	b2e4      	uxtb	r4, r4
 8003d10:	2c01      	cmp	r4, #1
 8003d12:	d9d0      	bls.n	8003cb6 <uartInit+0x6>
}
 8003d14:	2000      	movs	r0, #0
 8003d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d18:	08007e04 	.word	0x08007e04
 8003d1c:	20000c5c 	.word	0x20000c5c
 8003d20:	20000c20 	.word	0x20000c20

08003d24 <uartStop>:
{
 8003d24:	b510      	push	{r4, lr}
    for(i=0; i<NUM_OF_UART; i++){
 8003d26:	2400      	movs	r4, #0
 8003d28:	2c01      	cmp	r4, #1
 8003d2a:	d80a      	bhi.n	8003d42 <uartStop+0x1e>
        huart = &ST_UartHandlers[i];
 8003d2c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 8003d30:	00d3      	lsls	r3, r2, #3
        if(HAL_UART_DeInit(huart) != HAL_OK)
 8003d32:	4806      	ldr	r0, [pc, #24]	; (8003d4c <uartStop+0x28>)
 8003d34:	4418      	add	r0, r3
 8003d36:	f002 fa17 	bl	8006168 <HAL_UART_DeInit>
 8003d3a:	b920      	cbnz	r0, 8003d46 <uartStop+0x22>
    for(i=0; i<NUM_OF_UART; i++){
 8003d3c:	3401      	adds	r4, #1
 8003d3e:	b2e4      	uxtb	r4, r4
 8003d40:	e7f2      	b.n	8003d28 <uartStop+0x4>
    return result;
 8003d42:	2000      	movs	r0, #0
 8003d44:	bd10      	pop	{r4, pc}
            return RET_FAIL;
 8003d46:	2001      	movs	r0, #1
}
 8003d48:	bd10      	pop	{r4, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000c5c 	.word	0x20000c5c

08003d50 <uartStart>:
{
 8003d50:	b538      	push	{r3, r4, r5, lr}
    for(i=0; i<NUM_OF_UART; i++){
 8003d52:	2400      	movs	r4, #0
 8003d54:	2c01      	cmp	r4, #1
 8003d56:	d814      	bhi.n	8003d82 <uartStart+0x32>
        huart = &ST_UartHandlers[i];
 8003d58:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003d5c:	00dd      	lsls	r5, r3, #3
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <uartStart+0x40>)
 8003d60:	441d      	add	r5, r3
        if(HAL_UART_DeInit(huart) != HAL_OK)
 8003d62:	4628      	mov	r0, r5
 8003d64:	f002 fa00 	bl	8006168 <HAL_UART_DeInit>
 8003d68:	b968      	cbnz	r0, 8003d86 <uartStart+0x36>
        if(HAL_UART_Init(huart) != HAL_OK)
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f002 ff0b 	bl	8006b86 <HAL_UART_Init>
 8003d70:	b958      	cbnz	r0, 8003d8a <uartStart+0x3a>
        HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8003d72:	2201      	movs	r2, #1
 8003d74:	4907      	ldr	r1, [pc, #28]	; (8003d94 <uartStart+0x44>)
 8003d76:	4628      	mov	r0, r5
 8003d78:	f002 fa52 	bl	8006220 <HAL_UART_Receive_IT>
    for(i=0; i<NUM_OF_UART; i++){
 8003d7c:	3401      	adds	r4, #1
 8003d7e:	b2e4      	uxtb	r4, r4
 8003d80:	e7e8      	b.n	8003d54 <uartStart+0x4>
    return result;
 8003d82:	2000      	movs	r0, #0
 8003d84:	bd38      	pop	{r3, r4, r5, pc}
            return RET_FAIL;
 8003d86:	2001      	movs	r0, #1
 8003d88:	bd38      	pop	{r3, r4, r5, pc}
            return RET_FAIL;
 8003d8a:	2001      	movs	r0, #1
}
 8003d8c:	bd38      	pop	{r3, r4, r5, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000c5c 	.word	0x20000c5c
 8003d94:	20000d4c 	.word	0x20000d4c

08003d98 <uartSleep>:
}
 8003d98:	2000      	movs	r0, #0
 8003d9a:	4770      	bx	lr

08003d9c <uartDriverSetBufferSize>:
    uartBufferSize[uartPort] = bufferSize;
 8003d9c:	4b02      	ldr	r3, [pc, #8]	; (8003da8 <uartDriverSetBufferSize+0xc>)
 8003d9e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8003da2:	2000      	movs	r0, #0
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000c54 	.word	0x20000c54

08003dac <uartDriverGetBufferSize>:
{
 8003dac:	b508      	push	{r3, lr}
    return (GetQueuePendingBytes(&uartCBuffers[uartPort].rxBuffer));
 8003dae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003db2:	00c3      	lsls	r3, r0, #3
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <uartDriverGetBufferSize+0x14>)
 8003db6:	4418      	add	r0, r3
 8003db8:	f7fd feb4 	bl	8001b24 <GetQueuePendingBytes>
}
 8003dbc:	bd08      	pop	{r3, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000c20 	.word	0x20000c20

08003dc4 <uartDriverWrite>:
{
 8003dc4:	b508      	push	{r3, lr}
    bufferSize = uartBufferSize[uartPort];
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <uartDriverWrite+0x14>)
 8003dc8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    if(bufferSize == 0){
 8003dcc:	b90a      	cbnz	r2, 8003dd2 <uartDriverWrite+0xe>
        return RET_INVALID_PARAMETER;
 8003dce:	2005      	movs	r0, #5
}
 8003dd0:	bd08      	pop	{r3, pc}
    result = uartDriverWritePolling(uartPort, buffer, bufferSize);
 8003dd2:	f7ff fe77 	bl	8003ac4 <uartDriverWritePolling>
    return result;
 8003dd6:	bd08      	pop	{r3, pc}
 8003dd8:	20000c54 	.word	0x20000c54

08003ddc <uartDriverRead>:
 * @param uartPort UART port to read from
 * @param buffer Buffer where to write the data to
 * @return eError RET_OK if read successful, RET_FAIL otherwise
 ****************************************************************************/
eError uartDriverRead(tUart uartPort, uint8_t* buffer)
{
 8003ddc:	b508      	push	{r3, lr}
    uint32_t rdSize;

    rdSize = uartBufferSize[uartPort];

#if defined(MON_UART_RX_IT)
    return uartDriverReadIT(uartPort, buffer, rdSize);
 8003dde:	4b03      	ldr	r3, [pc, #12]	; (8003dec <uartDriverRead+0x10>)
 8003de0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8003de4:	f7ff fe52 	bl	8003a8c <uartDriverReadIT>
    return uartDriverReadPolling(uartPort, buffer, rdSize );
#else
#endif

    return result;
}
 8003de8:	bd08      	pop	{r3, pc}
 8003dea:	bf00      	nop
 8003dec:	20000c54 	.word	0x20000c54

08003df0 <uartDriverStatus>:
#if defined(MON_UART_RX_IT) || defined(MON_UART_TX_IT)
    return uartStatus[uartPort];
#else
    return RET_OK;
#endif
}
 8003df0:	4b01      	ldr	r3, [pc, #4]	; (8003df8 <uartDriverStatus+0x8>)
 8003df2:	5c18      	ldrb	r0, [r3, r0]
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	20000c50 	.word	0x20000c50

08003dfc <initHregUart>:
/***********************************************************************
 * @brief	API for init Uart.
 *
 **********************************************************************/
__weak eError initHregUart( void )
{
 8003dfc:	b508      	push	{r3, lr}
	eError result = RET_OK;

	uartInit();
 8003dfe:	f7ff ff57 	bl	8003cb0 <uartInit>

	return result;
}
 8003e02:	2000      	movs	r0, #0
 8003e04:	bd08      	pop	{r3, pc}

08003e06 <startHregUart>:
/***********************************************************************
 * @brief	API for start Uart.
 *
 **********************************************************************/
__weak eError startHregUart( void )
{
 8003e06:	b508      	push	{r3, lr}
	eError result = RET_OK;

	uartStart();
 8003e08:	f7ff ffa2 	bl	8003d50 <uartStart>

	return result;
}
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	bd08      	pop	{r3, pc}

08003e10 <stopHregUart>:
/***********************************************************************
 * @brief	API for stop Uart.
 *
 **********************************************************************/
__weak eError stopHregUart( void )
{
 8003e10:	b508      	push	{r3, lr}
	eError result = RET_OK;

	uartStop();
 8003e12:	f7ff ff87 	bl	8003d24 <uartStop>

	return result;
}
 8003e16:	2000      	movs	r0, #0
 8003e18:	bd08      	pop	{r3, pc}

08003e1a <sleepHregUart>:
/***********************************************************************
 * @brief	API for sleep Uart.
 *
 **********************************************************************/
__weak eError sleepHregUart( void )
{
 8003e1a:	b508      	push	{r3, lr}
	eError result = RET_OK;

	uartSleep();
 8003e1c:	f7ff ffbc 	bl	8003d98 <uartSleep>

	return result;
}
 8003e20:	2000      	movs	r0, #0
 8003e22:	bd08      	pop	{r3, pc}

08003e24 <wakeHregUart>:
	eError result = RET_OK;

	//Add your code here.

	return result;
}
 8003e24:	2000      	movs	r0, #0
 8003e26:	4770      	bx	lr

08003e28 <onReadHregUartBufferSize>:
/***********************************************************************
 * @brief	On Read function for Uart bufferSize.
 *
 **********************************************************************/
__weak eError onReadHregUartBufferSize( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003e28:	b510      	push	{r4, lr}
 8003e2a:	4614      	mov	r4, r2
	eError result = RET_OK;

    *(uint32_t*)param1 = uartDriverGetBufferSize((tUart)instance);
 8003e2c:	b240      	sxtb	r0, r0
 8003e2e:	f7ff ffbd 	bl	8003dac <uartDriverGetBufferSize>
 8003e32:	6020      	str	r0, [r4, #0]

	return result;
}
 8003e34:	2000      	movs	r0, #0
 8003e36:	bd10      	pop	{r4, pc}

08003e38 <onWriteHregUartBufferSize>:
/***********************************************************************
 * @brief	On Write function for Uart bufferSize.
 *
 **********************************************************************/
__weak eError onWriteHregUartBufferSize( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8003e38:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = uartDriverSetBufferSize((tUart)instance, param1);
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	b240      	sxtb	r0, r0
 8003e3e:	f7ff ffad 	bl	8003d9c <uartDriverSetBufferSize>

	return result;
}
 8003e42:	bd08      	pop	{r3, pc}

08003e44 <onReadHregUartData>:
/***********************************************************************
 * @brief	On Read function for Uart data.
 *
 **********************************************************************/
__weak eError onReadHregUartData( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003e44:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = uartDriverRead((tUart)instance, (uint8_t*) param1);
 8003e46:	4611      	mov	r1, r2
 8003e48:	b240      	sxtb	r0, r0
 8003e4a:	f7ff ffc7 	bl	8003ddc <uartDriverRead>

	return result;
}
 8003e4e:	bd08      	pop	{r3, pc}

08003e50 <onWriteHregUartData>:
/***********************************************************************
 * @brief	On Write function for Uart data.
 *
 **********************************************************************/
__weak eError onWriteHregUartData( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8003e50:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = uartDriverWrite((tUart)instance, (uint8_t*) param1);
 8003e52:	4611      	mov	r1, r2
 8003e54:	b240      	sxtb	r0, r0
 8003e56:	f7ff ffb5 	bl	8003dc4 <uartDriverWrite>

	return result;
}
 8003e5a:	bd08      	pop	{r3, pc}

08003e5c <onReadHregUartStatus>:
/***********************************************************************
 * @brief	On Read function for Uart status.
 *
 **********************************************************************/
__weak eError onReadHregUartStatus( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	4614      	mov	r4, r2
	eError result = RET_OK;

    *(uint8_t*)param1 = uartDriverStatus((tUart)instance);
 8003e60:	b240      	sxtb	r0, r0
 8003e62:	f7ff ffc5 	bl	8003df0 <uartDriverStatus>
 8003e66:	7020      	strb	r0, [r4, #0]

	return result;
}
 8003e68:	2000      	movs	r0, #0
 8003e6a:	bd10      	pop	{r4, pc}

08003e6c <initSystemMw>:
 *
 * @return  None.
 *
 ****************************************************************************/
void initSystemMw( void )
{
 8003e6c:	b508      	push	{r3, lr}
	/* Initialise the HREG layer */
	initHregAll();
 8003e6e:	f7fc fbf3 	bl	8000658 <initHregAll>

	/* Initialise pipe Device */
    pipeDeviceInit();
 8003e72:	f7fe fe95 	bl	8002ba0 <pipeDeviceInit>

    /* Start HREG layer */
	startHregGroupAll();
 8003e76:	f7fc fc23 	bl	80006c0 <startHregGroupAll>

	/* Start pipe Device */
    pipeDeviceStart();
 8003e7a:	f7fe feb3 	bl	8002be4 <pipeDeviceStart>
 8003e7e:	bd08      	pop	{r3, pc}

08003e80 <callSystemMwTask>:
 *
 * @return  None.
 *
 ****************************************************************************/
void callSystemMwTask( void )
{
 8003e80:	b508      	push	{r3, lr}
	uint8_t    value;

	value = READ_SREG(SREG_SYSTEM_MW_NOTIF);
 8003e82:	2005      	movs	r0, #5
 8003e84:	f7fc feff 	bl	8000c86 <readSreg>

	switch (value)
 8003e88:	b2c0      	uxtb	r0, r0
 8003e8a:	3801      	subs	r0, #1
 8003e8c:	2809      	cmp	r0, #9
 8003e8e:	d841      	bhi.n	8003f14 <callSystemMwTask+0x94>
 8003e90:	e8df f000 	tbb	[pc, r0]
 8003e94:	4033101e 	.word	0x4033101e
 8003e98:	40404040 	.word	0x40404040
 8003e9c:	0540      	.short	0x0540
	{
		case NOTIF_SYSTEM_MW_POWER_OFF:
			/* Debug info */
			printShellString((int8_t *)"System OFF ...", VERBOSE_GENERAL);
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	481d      	ldr	r0, [pc, #116]	; (8003f18 <callSystemMwTask+0x98>)
 8003ea2:	f7fd f961 	bl	8001168 <printShellString>
			/* Stop all drivers */
			stopHregGroupAll();
 8003ea6:	f7fc fbf1 	bl	800068c <stopHregGroupAll>
			/* Clear */
			WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_NO_REQUEST);
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2005      	movs	r0, #5
 8003eae:	f7fc ff21 	bl	8000cf4 <writeSreg>
			break;
 8003eb2:	bd08      	pop	{r3, pc}

		case NOTIF_SYSTEM_MW_BOOTLOADER:
			/* Debug info */
			printShellString((int8_t *)"System BOOT ...", VERBOSE_GENERAL);
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4819      	ldr	r0, [pc, #100]	; (8003f1c <callSystemMwTask+0x9c>)
 8003eb8:	f7fd f956 	bl	8001168 <printShellString>
			/* Notify driver level about the bootloader process */
			WRITE_HREG(UNIQUE_INSTANCE, HREG_SYSTEM_POWER_MODE, NOTIF_SYSTEM_MW_BOOTLOADER);
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	4918      	ldr	r1, [pc, #96]	; (8003f20 <callSystemMwTask+0xa0>)
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f7fc fcb3 	bl	800082c <writeHreg>
			/* Clear */
			WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_NO_REQUEST);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	2005      	movs	r0, #5
 8003eca:	f7fc ff13 	bl	8000cf4 <writeSreg>
			break;
 8003ece:	bd08      	pop	{r3, pc}

		case NOTIF_SYSTEM_MW_SLEEP:
			/* Debug info */
			printShellString((int8_t *)"System SLEEP ...", VERBOSE_GENERAL);
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4814      	ldr	r0, [pc, #80]	; (8003f24 <callSystemMwTask+0xa4>)
 8003ed4:	f7fd f948 	bl	8001168 <printShellString>
			/* Sleep all HREG groups */
			sleepHregGroupAll();
 8003ed8:	f7fc fc7c 	bl	80007d4 <sleepHregGroupAll>
			/* Clear */
			WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_NO_REQUEST);
 8003edc:	2100      	movs	r1, #0
 8003ede:	2005      	movs	r0, #5
 8003ee0:	f7fc ff08 	bl	8000cf4 <writeSreg>

			/* Execute Sleep routine*/
			WRITE_HREG(UNIQUE_INSTANCE, HREG_SYSTEM_POWER_MODE, NOTIF_SYSTEM_MW_SLEEP);
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	490e      	ldr	r1, [pc, #56]	; (8003f20 <callSystemMwTask+0xa0>)
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f7fc fc9f 	bl	800082c <writeHreg>

			/* Wake up all HREG groups */
			wakeHregGroupAll();
 8003eee:	f7fc fc87 	bl	8000800 <wakeHregGroupAll>
			/* Wake Up condition */
			requestSystemAppPowerState(POWER_STATE_WAKE_UP);
 8003ef2:	2002      	movs	r0, #2
 8003ef4:	f7fc fba8 	bl	8000648 <requestSystemAppPowerState>
			break;
 8003ef8:	bd08      	pop	{r3, pc}

		case NOTIF_SYSTEM_MW_RESET:
			/* Debug info */
			printShellString((int8_t *)"System RESET ...", VERBOSE_GENERAL);
 8003efa:	2101      	movs	r1, #1
 8003efc:	480a      	ldr	r0, [pc, #40]	; (8003f28 <callSystemMwTask+0xa8>)
 8003efe:	f7fd f933 	bl	8001168 <printShellString>
			/* Notify driver level about the reset process */
			WRITE_HREG(UNIQUE_INSTANCE, HREG_SYSTEM_POWER_MODE, NOTIF_SYSTEM_MW_RESET);
 8003f02:	2203      	movs	r2, #3
 8003f04:	4906      	ldr	r1, [pc, #24]	; (8003f20 <callSystemMwTask+0xa0>)
 8003f06:	2000      	movs	r0, #0
 8003f08:	f7fc fc90 	bl	800082c <writeHreg>
			/* Clear */
			WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_NO_REQUEST);
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	2005      	movs	r0, #5
 8003f10:	f7fc fef0 	bl	8000cf4 <writeSreg>
 8003f14:	bd08      	pop	{r3, pc}
 8003f16:	bf00      	nop
 8003f18:	08007e5c 	.word	0x08007e5c
 8003f1c:	08007e6c 	.word	0x08007e6c
 8003f20:	080077a0 	.word	0x080077a0
 8003f24:	08007e7c 	.word	0x08007e7c
 8003f28:	08007e90 	.word	0x08007e90

08003f2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003f30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003f32:	e003      	b.n	8003f3c <LoopCopyDataInit>

08003f34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003f34:	4b0c      	ldr	r3, [pc, #48]	; (8003f68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003f36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003f38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003f3a:	3104      	adds	r1, #4

08003f3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f3c:	480b      	ldr	r0, [pc, #44]	; (8003f6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f44:	d3f6      	bcc.n	8003f34 <CopyDataInit>
	ldr	r2, =_sbss
 8003f46:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f48:	e002      	b.n	8003f50 <LoopFillZerobss>

08003f4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f4c:	f842 3b04 	str.w	r3, [r2], #4

08003f50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <LoopForever+0x16>)
	cmp	r2, r3
 8003f52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f54:	d3f9      	bcc.n	8003f4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f56:	f000 f813 	bl	8003f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f5a:	f002 fe49 	bl	8006bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f5e:	f7fc fb1f 	bl	80005a0 <main>

08003f62 <LoopForever>:

LoopForever:
    b LoopForever
 8003f62:	e7fe      	b.n	8003f62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f64:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8003f68:	08007f30 	.word	0x08007f30
	ldr	r0, =_sdata
 8003f6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f70:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8003f74:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8003f78:	20001020 	.word	0x20001020

08003f7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f7c:	e7fe      	b.n	8003f7c <ADC1_IRQHandler>
	...

08003f80 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f80:	490f      	ldr	r1, [pc, #60]	; (8003fc0 <SystemInit+0x40>)
 8003f82:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003f86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <SystemInit+0x44>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003f98:	2000      	movs	r0, #0
 8003f9a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003fa2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003fa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fac:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fb4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003fb6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fbc:	608b      	str	r3, [r1, #8]
 8003fbe:	4770      	bx	lr
 8003fc0:	e000ed00 	.word	0xe000ed00
 8003fc4:	40021000 	.word	0x40021000

08003fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8003fcc:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_InitTick+0x24>)
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <HAL_InitTick+0x28>)
 8003fd2:	fba3 3000 	umull	r3, r0, r3, r0
 8003fd6:	0980      	lsrs	r0, r0, #6
 8003fd8:	f000 f886 	bl	80040e8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4621      	mov	r1, r4
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	f000 f834 	bl	8004050 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8003fe8:	2000      	movs	r0, #0
 8003fea:	bd10      	pop	{r4, pc}
 8003fec:	20000154 	.word	0x20000154
 8003ff0:	10624dd3 	.word	0x10624dd3

08003ff4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003ff4:	4a02      	ldr	r2, [pc, #8]	; (8004000 <HAL_IncTick+0xc>)
 8003ff6:	6813      	ldr	r3, [r2, #0]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	20001018 	.word	0x20001018

08004004 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004004:	4b01      	ldr	r3, [pc, #4]	; (800400c <HAL_GetTick+0x8>)
 8004006:	6818      	ldr	r0, [r3, #0]
}
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20001018 	.word	0x20001018

08004010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004010:	b538      	push	{r3, r4, r5, lr}
 8004012:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004014:	f7ff fff6 	bl	8004004 <HAL_GetTick>
 8004018:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800401a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800401e:	d000      	beq.n	8004022 <HAL_Delay+0x12>
  {
    wait++;
 8004020:	3401      	adds	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8004022:	f7ff ffef 	bl	8004004 <HAL_GetTick>
 8004026:	1b40      	subs	r0, r0, r5
 8004028:	4284      	cmp	r4, r0
 800402a:	d8fa      	bhi.n	8004022 <HAL_Delay+0x12>
  {
  }
}
 800402c:	bd38      	pop	{r3, r4, r5, pc}
	...

08004030 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004030:	4a02      	ldr	r2, [pc, #8]	; (800403c <HAL_SuspendTick+0xc>)
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	f023 0302 	bic.w	r3, r3, #2
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4770      	bx	lr
 800403c:	e000e010 	.word	0xe000e010

08004040 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004040:	4a02      	ldr	r2, [pc, #8]	; (800404c <HAL_ResumeTick+0xc>)
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	f043 0302 	orr.w	r3, r3, #2
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4770      	bx	lr
 800404c:	e000e010 	.word	0xe000e010

08004050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004050:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004052:	4b16      	ldr	r3, [pc, #88]	; (80040ac <HAL_NVIC_SetPriority+0x5c>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800405a:	f1c3 0407 	rsb	r4, r3, #7
 800405e:	2c04      	cmp	r4, #4
 8004060:	bf28      	it	cs
 8004062:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004064:	1d1d      	adds	r5, r3, #4
 8004066:	2d06      	cmp	r5, #6
 8004068:	d917      	bls.n	800409a <HAL_NVIC_SetPriority+0x4a>
 800406a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	2501      	movs	r5, #1
 800406e:	fa05 f404 	lsl.w	r4, r5, r4
 8004072:	3c01      	subs	r4, #1
 8004074:	4021      	ands	r1, r4
 8004076:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004078:	fa05 f303 	lsl.w	r3, r5, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8004082:	2800      	cmp	r0, #0
 8004084:	db0b      	blt.n	800409e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004086:	0109      	lsls	r1, r1, #4
 8004088:	b2c9      	uxtb	r1, r1
 800408a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800408e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004092:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004096:	bc30      	pop	{r4, r5}
 8004098:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800409a:	2300      	movs	r3, #0
 800409c:	e7e6      	b.n	800406c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409e:	f000 000f 	and.w	r0, r0, #15
 80040a2:	0109      	lsls	r1, r1, #4
 80040a4:	b2c9      	uxtb	r1, r1
 80040a6:	4b02      	ldr	r3, [pc, #8]	; (80040b0 <HAL_NVIC_SetPriority+0x60>)
 80040a8:	5419      	strb	r1, [r3, r0]
 80040aa:	e7f4      	b.n	8004096 <HAL_NVIC_SetPriority+0x46>
 80040ac:	e000ed00 	.word	0xe000ed00
 80040b0:	e000ed14 	.word	0xe000ed14

080040b4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80040b4:	0942      	lsrs	r2, r0, #5
 80040b6:	f000 001f 	and.w	r0, r0, #31
 80040ba:	2301      	movs	r3, #1
 80040bc:	fa03 f000 	lsl.w	r0, r3, r0
 80040c0:	4b01      	ldr	r3, [pc, #4]	; (80040c8 <HAL_NVIC_EnableIRQ+0x14>)
 80040c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80040c6:	4770      	bx	lr
 80040c8:	e000e100 	.word	0xe000e100

080040cc <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80040cc:	0943      	lsrs	r3, r0, #5
 80040ce:	f000 001f 	and.w	r0, r0, #31
 80040d2:	2201      	movs	r2, #1
 80040d4:	fa02 f000 	lsl.w	r0, r2, r0
 80040d8:	3320      	adds	r3, #32
 80040da:	4a02      	ldr	r2, [pc, #8]	; (80040e4 <HAL_NVIC_DisableIRQ+0x18>)
 80040dc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	e000e100 	.word	0xe000e100

080040e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040e8:	3801      	subs	r0, #1
 80040ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80040ee:	d20a      	bcs.n	8004106 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_SYSTICK_Config+0x24>)
 80040f2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f4:	21f0      	movs	r1, #240	; 0xf0
 80040f6:	4a06      	ldr	r2, [pc, #24]	; (8004110 <HAL_SYSTICK_Config+0x28>)
 80040f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040fc:	2000      	movs	r0, #0
 80040fe:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004100:	2207      	movs	r2, #7
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004106:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	e000e010 	.word	0xe000e010
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004114:	2804      	cmp	r0, #4
 8004116:	d005      	beq.n	8004124 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004118:	4a05      	ldr	r2, [pc, #20]	; (8004130 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004124:	4a02      	ldr	r2, [pc, #8]	; (8004130 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	f043 0304 	orr.w	r3, r3, #4
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4770      	bx	lr
 8004130:	e000e010 	.word	0xe000e010

08004134 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004134:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004136:	f7ff f9a1 	bl	800347c <HAL_SYSTICK_Callback>
 800413a:	bd08      	pop	{r3, pc}

0800413c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800413c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800413e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d003      	beq.n	8004150 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004148:	2304      	movs	r3, #4
 800414a:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800414c:	2001      	movs	r0, #1
 800414e:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004150:	6802      	ldr	r2, [r0, #0]
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	f023 030e 	bic.w	r3, r3, #14
 8004158:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800415a:	6802      	ldr	r2, [r0, #0]
 800415c:	6813      	ldr	r3, [r2, #0]
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004164:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004166:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004168:	f003 031c 	and.w	r3, r3, #28
 800416c:	2201      	movs	r2, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	604b      	str	r3, [r1, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004174:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004178:	2300      	movs	r3, #0
 800417a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800417e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004180:	b113      	cbz	r3, 8004188 <HAL_DMA_Abort_IT+0x4c>
    {
      hdma->XferAbortCallback(hdma);
 8004182:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004184:	2000      	movs	r0, #0
 8004186:	bd08      	pop	{r3, pc}
 8004188:	2000      	movs	r0, #0
    }
  }
  return status;
}
 800418a:	bd08      	pop	{r3, pc}

0800418c <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800418c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800418e:	4c05      	ldr	r4, [pc, #20]	; (80041a4 <FLASH_Program_DoubleWord+0x18>)
 8004190:	6961      	ldr	r1, [r4, #20]
 8004192:	f041 0101 	orr.w	r1, r1, #1
 8004196:	6161      	str	r1, [r4, #20]

  /* Program the double word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004198:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800419a:	6043      	str	r3, [r0, #4]
}
 800419c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40022000 	.word	0x40022000

080041a8 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80041a8:	4a08      	ldr	r2, [pc, #32]	; (80041cc <FLASH_Program_Fast+0x24>)
 80041aa:	6953      	ldr	r3, [r2, #20]
 80041ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80041b2:	b672      	cpsid	i
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80041b4:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80041b6:	f851 2b04 	ldr.w	r2, [r1], #4
 80041ba:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 80041be:	3b01      	subs	r3, #1
  } while (row_index != 0U);
 80041c0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80041c4:	d1f7      	bne.n	80041b6 <FLASH_Program_Fast+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 80041c6:	b662      	cpsie	i
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40022000 	.word	0x40022000

080041d0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_FLASH_Unlock+0x28>)
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db01      	blt.n	80041dc <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2000      	movs	r0, #0
 80041da:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_FLASH_Unlock+0x28>)
 80041de:	4a07      	ldr	r2, [pc, #28]	; (80041fc <HAL_FLASH_Unlock+0x2c>)
 80041e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80041e2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80041e6:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	db01      	blt.n	80041f2 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80041ee:	2000      	movs	r0, #0
 80041f0:	4770      	bx	lr
      status = HAL_ERROR;
 80041f2:	2001      	movs	r0, #1
}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40022000 	.word	0x40022000
 80041fc:	45670123 	.word	0x45670123

08004200 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004200:	4a03      	ldr	r2, [pc, #12]	; (8004210 <HAL_FLASH_Lock+0x10>)
 8004202:	6953      	ldr	r3, [r2, #20]
 8004204:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004208:	6153      	str	r3, [r2, #20]
}
 800420a:	2000      	movs	r0, #0
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40022000 	.word	0x40022000

08004214 <FLASH_WaitForLastOperation>:
{
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff fef4 	bl	8004004 <HAL_GetTick>
 800421c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800421e:	4b1f      	ldr	r3, [pc, #124]	; (800429c <FLASH_WaitForLastOperation+0x88>)
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004226:	d009      	beq.n	800423c <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 8004228:	f1b4 3fff 	cmp.w	r4, #4294967295
 800422c:	d0f7      	beq.n	800421e <FLASH_WaitForLastOperation+0xa>
      if((HAL_GetTick() - tickstart) >= Timeout)
 800422e:	f7ff fee9 	bl	8004004 <HAL_GetTick>
 8004232:	1b40      	subs	r0, r0, r5
 8004234:	4284      	cmp	r4, r0
 8004236:	d8f2      	bhi.n	800421e <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8004238:	2003      	movs	r0, #3
 800423a:	bd38      	pop	{r3, r4, r5, pc}
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800423c:	4a17      	ldr	r2, [pc, #92]	; (800429c <FLASH_WaitForLastOperation+0x88>)
 800423e:	6913      	ldr	r3, [r2, #16]
 8004240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004244:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8004248:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800424c:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8004250:	6992      	ldr	r2, [r2, #24]
 8004252:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
  if(error != 0u)
 8004256:	4313      	orrs	r3, r2
 8004258:	d011      	beq.n	800427e <FLASH_WaitForLastOperation+0x6a>
    pFlash.ErrorCode |= error;
 800425a:	4911      	ldr	r1, [pc, #68]	; (80042a0 <FLASH_WaitForLastOperation+0x8c>)
 800425c:	684a      	ldr	r2, [r1, #4]
 800425e:	431a      	orrs	r2, r3
 8004260:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8004262:	f013 4240 	ands.w	r2, r3, #3221225472	; 0xc0000000
 8004266:	d003      	beq.n	8004270 <FLASH_WaitForLastOperation+0x5c>
 8004268:	490c      	ldr	r1, [pc, #48]	; (800429c <FLASH_WaitForLastOperation+0x88>)
 800426a:	6988      	ldr	r0, [r1, #24]
 800426c:	4302      	orrs	r2, r0
 800426e:	618a      	str	r2, [r1, #24]
 8004270:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 8004274:	d00d      	beq.n	8004292 <FLASH_WaitForLastOperation+0x7e>
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <FLASH_WaitForLastOperation+0x88>)
 8004278:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 800427a:	2001      	movs	r0, #1
 800427c:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <FLASH_WaitForLastOperation+0x88>)
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f013 0f01 	tst.w	r3, #1
 8004286:	d006      	beq.n	8004296 <FLASH_WaitForLastOperation+0x82>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004288:	2201      	movs	r2, #1
 800428a:	4b04      	ldr	r3, [pc, #16]	; (800429c <FLASH_WaitForLastOperation+0x88>)
 800428c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800428e:	2000      	movs	r0, #0
 8004290:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004292:	2001      	movs	r0, #1
 8004294:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004296:	2000      	movs	r0, #0
}
 8004298:	bd38      	pop	{r3, r4, r5, pc}
 800429a:	bf00      	nop
 800429c:	40022000 	.word	0x40022000
 80042a0:	20000158 	.word	0x20000158

080042a4 <HAL_FLASH_Program>:
{
 80042a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80042a8:	4c28      	ldr	r4, [pc, #160]	; (800434c <HAL_FLASH_Program+0xa8>)
 80042aa:	7824      	ldrb	r4, [r4, #0]
 80042ac:	2c01      	cmp	r4, #1
 80042ae:	d103      	bne.n	80042b8 <HAL_FLASH_Program+0x14>
 80042b0:	2402      	movs	r4, #2
}
 80042b2:	4620      	mov	r0, r4
 80042b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b8:	4698      	mov	r8, r3
 80042ba:	4617      	mov	r7, r2
 80042bc:	460e      	mov	r6, r1
 80042be:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80042c0:	2201      	movs	r2, #1
 80042c2:	4b22      	ldr	r3, [pc, #136]	; (800434c <HAL_FLASH_Program+0xa8>)
 80042c4:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042ca:	f7ff ffa3 	bl	8004214 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80042ce:	4604      	mov	r4, r0
 80042d0:	bb08      	cbnz	r0, 8004316 <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80042d2:	2200      	movs	r2, #0
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_FLASH_Program+0xa8>)
 80042d6:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80042d8:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <HAL_FLASH_Program+0xac>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80042e0:	d01d      	beq.n	800431e <HAL_FLASH_Program+0x7a>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80042e2:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <HAL_FLASH_Program+0xac>)
 80042e4:	6813      	ldr	r3, [r2, #0]
 80042e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042ea:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80042ec:	2202      	movs	r2, #2
 80042ee:	4b17      	ldr	r3, [pc, #92]	; (800434c <HAL_FLASH_Program+0xa8>)
 80042f0:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80042f2:	b1c5      	cbz	r5, 8004326 <HAL_FLASH_Program+0x82>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80042f4:	1e6b      	subs	r3, r5, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d91c      	bls.n	8004334 <HAL_FLASH_Program+0x90>
  uint32_t prog_bit = 0;
 80042fa:	2500      	movs	r5, #0
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004300:	f7ff ff88 	bl	8004214 <FLASH_WaitForLastOperation>
 8004304:	4604      	mov	r4, r0
    if (prog_bit != 0U)
 8004306:	b125      	cbz	r5, 8004312 <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004308:	4a11      	ldr	r2, [pc, #68]	; (8004350 <HAL_FLASH_Program+0xac>)
 800430a:	6953      	ldr	r3, [r2, #20]
 800430c:	ea23 0505 	bic.w	r5, r3, r5
 8004310:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 8004312:	f000 f843 	bl	800439c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004316:	2200      	movs	r2, #0
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_FLASH_Program+0xa8>)
 800431a:	701a      	strb	r2, [r3, #0]
  return status;
 800431c:	e7c9      	b.n	80042b2 <HAL_FLASH_Program+0xe>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800431e:	2200      	movs	r2, #0
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_FLASH_Program+0xa8>)
 8004322:	771a      	strb	r2, [r3, #28]
 8004324:	e7e5      	b.n	80042f2 <HAL_FLASH_Program+0x4e>
      FLASH_Program_DoubleWord(Address, Data);
 8004326:	463a      	mov	r2, r7
 8004328:	4643      	mov	r3, r8
 800432a:	4630      	mov	r0, r6
 800432c:	f7ff ff2e 	bl	800418c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004330:	2501      	movs	r5, #1
 8004332:	e7e3      	b.n	80042fc <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004334:	4639      	mov	r1, r7
 8004336:	4630      	mov	r0, r6
 8004338:	f7ff ff36 	bl	80041a8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800433c:	2d02      	cmp	r5, #2
 800433e:	d001      	beq.n	8004344 <HAL_FLASH_Program+0xa0>
  uint32_t prog_bit = 0;
 8004340:	2500      	movs	r5, #0
 8004342:	e7db      	b.n	80042fc <HAL_FLASH_Program+0x58>
        prog_bit = FLASH_CR_FSTPG;
 8004344:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8004348:	e7d8      	b.n	80042fc <HAL_FLASH_Program+0x58>
 800434a:	bf00      	nop
 800434c:	20000158 	.word	0x20000158
 8004350:	40022000 	.word	0x40022000

08004354 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004354:	f010 0f01 	tst.w	r0, #1
 8004358:	d004      	beq.n	8004364 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800435a:	4a05      	ldr	r2, [pc, #20]	; (8004370 <FLASH_MassErase+0x1c>)
 800435c:	6953      	ldr	r3, [r2, #20]
 800435e:	f043 0304 	orr.w	r3, r3, #4
 8004362:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004364:	4a02      	ldr	r2, [pc, #8]	; (8004370 <FLASH_MassErase+0x1c>)
 8004366:	6953      	ldr	r3, [r2, #20]
 8004368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436c:	6153      	str	r3, [r2, #20]
 800436e:	4770      	bx	lr
 8004370:	40022000 	.word	0x40022000

08004374 <FLASH_PageErase>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <FLASH_PageErase+0x24>)
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800437c:	00c0      	lsls	r0, r0, #3
 800437e:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 8004382:	4302      	orrs	r2, r0
 8004384:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	f042 0202 	orr.w	r2, r2, #2
 800438c:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004394:	615a      	str	r2, [r3, #20]
 8004396:	4770      	bx	lr
 8004398:	40022000 	.word	0x40022000

0800439c <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <FLASH_FlushCaches+0x58>)
 800439e:	7f1b      	ldrb	r3, [r3, #28]
 80043a0:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d009      	beq.n	80043ba <FLASH_FlushCaches+0x1e>
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d007      	beq.n	80043ba <FLASH_FlushCaches+0x1e>
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 80043aa:	3b02      	subs	r3, #2
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d911      	bls.n	80043d6 <FLASH_FlushCaches+0x3a>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80043b2:	2200      	movs	r2, #0
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <FLASH_FlushCaches+0x58>)
 80043b6:	771a      	strb	r2, [r3, #28]
 80043b8:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80043ba:	4a0f      	ldr	r2, [pc, #60]	; (80043f8 <FLASH_FlushCaches+0x5c>)
 80043bc:	6811      	ldr	r1, [r2, #0]
 80043be:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80043c2:	6011      	str	r1, [r2, #0]
 80043c4:	6811      	ldr	r1, [r2, #0]
 80043c6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80043ca:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043cc:	6811      	ldr	r1, [r2, #0]
 80043ce:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80043d2:	6011      	str	r1, [r2, #0]
 80043d4:	e7e9      	b.n	80043aa <FLASH_FlushCaches+0xe>
    __HAL_FLASH_DATA_CACHE_RESET();
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <FLASH_FlushCaches+0x5c>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043e6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e7df      	b.n	80043b2 <FLASH_FlushCaches+0x16>
 80043f2:	bf00      	nop
 80043f4:	20000158 	.word	0x20000158
 80043f8:	40022000 	.word	0x40022000

080043fc <HAL_FLASHEx_Erase>:
{
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80043fe:	4b3b      	ldr	r3, [pc, #236]	; (80044ec <HAL_FLASHEx_Erase+0xf0>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d102      	bne.n	800440c <HAL_FLASHEx_Erase+0x10>
 8004406:	2702      	movs	r7, #2
}
 8004408:	4638      	mov	r0, r7
 800440a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800440c:	460e      	mov	r6, r1
 800440e:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8004410:	2201      	movs	r2, #1
 8004412:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_FLASHEx_Erase+0xf0>)
 8004414:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004416:	f24c 3050 	movw	r0, #50000	; 0xc350
 800441a:	f7ff fefb 	bl	8004214 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800441e:	4607      	mov	r7, r0
 8004420:	2800      	cmp	r0, #0
 8004422:	d15e      	bne.n	80044e2 <HAL_FLASHEx_Erase+0xe6>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004424:	2200      	movs	r2, #0
 8004426:	4b31      	ldr	r3, [pc, #196]	; (80044ec <HAL_FLASHEx_Erase+0xf0>)
 8004428:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800442a:	4b31      	ldr	r3, [pc, #196]	; (80044f0 <HAL_FLASHEx_Erase+0xf4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004432:	d033      	beq.n	800449c <HAL_FLASHEx_Erase+0xa0>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004434:	4b2e      	ldr	r3, [pc, #184]	; (80044f0 <HAL_FLASHEx_Erase+0xf4>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800443c:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004444:	d026      	beq.n	8004494 <HAL_FLASHEx_Erase+0x98>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004446:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <HAL_FLASHEx_Erase+0xf4>)
 8004448:	6813      	ldr	r3, [r2, #0]
 800444a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800444e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004450:	2203      	movs	r2, #3
 8004452:	4b26      	ldr	r3, [pc, #152]	; (80044ec <HAL_FLASHEx_Erase+0xf0>)
 8004454:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d031      	beq.n	80044c0 <HAL_FLASHEx_Erase+0xc4>
      *PageError = 0xFFFFFFFFU;
 800445c:	f04f 33ff 	mov.w	r3, #4294967295
 8004460:	6033      	str	r3, [r6, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004462:	68a5      	ldr	r5, [r4, #8]
 8004464:	68a3      	ldr	r3, [r4, #8]
 8004466:	68e2      	ldr	r2, [r4, #12]
 8004468:	4413      	add	r3, r2
 800446a:	429d      	cmp	r5, r3
 800446c:	d237      	bcs.n	80044de <HAL_FLASHEx_Erase+0xe2>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800446e:	6861      	ldr	r1, [r4, #4]
 8004470:	4628      	mov	r0, r5
 8004472:	f7ff ff7f 	bl	8004374 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004476:	f24c 3050 	movw	r0, #50000	; 0xc350
 800447a:	f7ff fecb 	bl	8004214 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800447e:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <HAL_FLASHEx_Erase+0xf4>)
 8004480:	6953      	ldr	r3, [r2, #20]
 8004482:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004486:	f023 0302 	bic.w	r3, r3, #2
 800448a:	6153      	str	r3, [r2, #20]
        if (status != HAL_OK)
 800448c:	4607      	mov	r7, r0
 800448e:	bb28      	cbnz	r0, 80044dc <HAL_FLASHEx_Erase+0xe0>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004490:	3501      	adds	r5, #1
 8004492:	e7e7      	b.n	8004464 <HAL_FLASHEx_Erase+0x68>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004494:	2201      	movs	r2, #1
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <HAL_FLASHEx_Erase+0xf0>)
 8004498:	771a      	strb	r2, [r3, #28]
 800449a:	e7dc      	b.n	8004456 <HAL_FLASHEx_Erase+0x5a>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800449c:	4b14      	ldr	r3, [pc, #80]	; (80044f0 <HAL_FLASHEx_Erase+0xf4>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80044a4:	d008      	beq.n	80044b8 <HAL_FLASHEx_Erase+0xbc>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80044a6:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <HAL_FLASHEx_Erase+0xf4>)
 80044a8:	6813      	ldr	r3, [r2, #0]
 80044aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ae:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80044b0:	2202      	movs	r2, #2
 80044b2:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <HAL_FLASHEx_Erase+0xf0>)
 80044b4:	771a      	strb	r2, [r3, #28]
 80044b6:	e7ce      	b.n	8004456 <HAL_FLASHEx_Erase+0x5a>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80044b8:	2200      	movs	r2, #0
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HAL_FLASHEx_Erase+0xf0>)
 80044bc:	771a      	strb	r2, [r3, #28]
 80044be:	e7ca      	b.n	8004456 <HAL_FLASHEx_Erase+0x5a>
      FLASH_MassErase(pEraseInit->Banks);
 80044c0:	6860      	ldr	r0, [r4, #4]
 80044c2:	f7ff ff47 	bl	8004354 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80044ca:	f7ff fea3 	bl	8004214 <FLASH_WaitForLastOperation>
 80044ce:	4607      	mov	r7, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80044d0:	4a07      	ldr	r2, [pc, #28]	; (80044f0 <HAL_FLASHEx_Erase+0xf4>)
 80044d2:	6953      	ldr	r3, [r2, #20]
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	6153      	str	r3, [r2, #20]
 80044da:	e000      	b.n	80044de <HAL_FLASHEx_Erase+0xe2>
          *PageError = page_index;
 80044dc:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 80044de:	f7ff ff5d 	bl	800439c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80044e2:	2200      	movs	r2, #0
 80044e4:	4b01      	ldr	r3, [pc, #4]	; (80044ec <HAL_FLASHEx_Erase+0xf0>)
 80044e6:	701a      	strb	r2, [r3, #0]
  return status;
 80044e8:	e78e      	b.n	8004408 <HAL_FLASHEx_Erase+0xc>
 80044ea:	bf00      	nop
 80044ec:	20000158 	.word	0x20000158
 80044f0:	40022000 	.word	0x40022000

080044f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f6:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 80044f8:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80044fa:	e08c      	b.n	8004616 <HAL_GPIO_Init+0x122>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80044fc:	08de      	lsrs	r6, r3, #3
 80044fe:	3608      	adds	r6, #8
 8004500:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004504:	f003 0e07 	and.w	lr, r3, #7
 8004508:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800450c:	270f      	movs	r7, #15
 800450e:	fa07 f70e 	lsl.w	r7, r7, lr
 8004512:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004516:	690f      	ldr	r7, [r1, #16]
 8004518:	fa07 f70e 	lsl.w	r7, r7, lr
 800451c:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 800451e:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8004522:	e087      	b.n	8004634 <HAL_GPIO_Init+0x140>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004524:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8004526:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8004528:	68cf      	ldr	r7, [r1, #12]
 800452a:	fa07 f70e 	lsl.w	r7, r7, lr
 800452e:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8004530:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004532:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004534:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004538:	684e      	ldr	r6, [r1, #4]
 800453a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800453e:	409e      	lsls	r6, r3
 8004540:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8004542:	6045      	str	r5, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004544:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8004546:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004548:	688d      	ldr	r5, [r1, #8]
 800454a:	fa05 f50e 	lsl.w	r5, r5, lr
 800454e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8004550:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004552:	684c      	ldr	r4, [r1, #4]
 8004554:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8004558:	d05c      	beq.n	8004614 <HAL_GPIO_Init+0x120>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455a:	4c4a      	ldr	r4, [pc, #296]	; (8004684 <HAL_GPIO_Init+0x190>)
 800455c:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800455e:	f045 0501 	orr.w	r5, r5, #1
 8004562:	6625      	str	r5, [r4, #96]	; 0x60
 8004564:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8004566:	f004 0401 	and.w	r4, r4, #1
 800456a:	9401      	str	r4, [sp, #4]
 800456c:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 800456e:	089d      	lsrs	r5, r3, #2
 8004570:	1cae      	adds	r6, r5, #2
 8004572:	4c45      	ldr	r4, [pc, #276]	; (8004688 <HAL_GPIO_Init+0x194>)
 8004574:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004578:	f003 0603 	and.w	r6, r3, #3
 800457c:	00b6      	lsls	r6, r6, #2
 800457e:	270f      	movs	r7, #15
 8004580:	40b7      	lsls	r7, r6
 8004582:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8004586:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800458a:	d070      	beq.n	800466e <HAL_GPIO_Init+0x17a>
 800458c:	4f3f      	ldr	r7, [pc, #252]	; (800468c <HAL_GPIO_Init+0x198>)
 800458e:	42b8      	cmp	r0, r7
 8004590:	d06f      	beq.n	8004672 <HAL_GPIO_Init+0x17e>
 8004592:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8004596:	42b8      	cmp	r0, r7
 8004598:	d06d      	beq.n	8004676 <HAL_GPIO_Init+0x182>
 800459a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800459e:	42b8      	cmp	r0, r7
 80045a0:	d06b      	beq.n	800467a <HAL_GPIO_Init+0x186>
 80045a2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80045a6:	42b8      	cmp	r0, r7
 80045a8:	d05f      	beq.n	800466a <HAL_GPIO_Init+0x176>
 80045aa:	2707      	movs	r7, #7
 80045ac:	fa07 f606 	lsl.w	r6, r7, r6
 80045b0:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 80045b2:	3502      	adds	r5, #2
 80045b4:	4e34      	ldr	r6, [pc, #208]	; (8004688 <HAL_GPIO_Init+0x194>)
 80045b6:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045ba:	4c35      	ldr	r4, [pc, #212]	; (8004690 <HAL_GPIO_Init+0x19c>)
 80045bc:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80045be:	43d4      	mvns	r4, r2
 80045c0:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045c4:	684f      	ldr	r7, [r1, #4]
 80045c6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80045ca:	d001      	beq.n	80045d0 <HAL_GPIO_Init+0xdc>
        {
          temp |= iocurrent;
 80045cc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80045d0:	4d2f      	ldr	r5, [pc, #188]	; (8004690 <HAL_GPIO_Init+0x19c>)
 80045d2:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 80045d4:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 80045d6:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045da:	684f      	ldr	r7, [r1, #4]
 80045dc:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80045e0:	d001      	beq.n	80045e6 <HAL_GPIO_Init+0xf2>
        {
          temp |= iocurrent;
 80045e2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80045e6:	4d2a      	ldr	r5, [pc, #168]	; (8004690 <HAL_GPIO_Init+0x19c>)
 80045e8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045ea:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f0:	684f      	ldr	r7, [r1, #4]
 80045f2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80045f6:	d001      	beq.n	80045fc <HAL_GPIO_Init+0x108>
        {
          temp |= iocurrent;
 80045f8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80045fc:	4d24      	ldr	r5, [pc, #144]	; (8004690 <HAL_GPIO_Init+0x19c>)
 80045fe:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8004600:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8004602:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004604:	684e      	ldr	r6, [r1, #4]
 8004606:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800460a:	d001      	beq.n	8004610 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 800460c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <HAL_GPIO_Init+0x19c>)
 8004612:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8004614:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004616:	680a      	ldr	r2, [r1, #0]
 8004618:	fa32 f403 	lsrs.w	r4, r2, r3
 800461c:	d02f      	beq.n	800467e <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800461e:	2501      	movs	r5, #1
 8004620:	409d      	lsls	r5, r3
    if(iocurrent)
 8004622:	402a      	ands	r2, r5
 8004624:	d0f6      	beq.n	8004614 <HAL_GPIO_Init+0x120>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004626:	684c      	ldr	r4, [r1, #4]
 8004628:	2c02      	cmp	r4, #2
 800462a:	f43f af67 	beq.w	80044fc <HAL_GPIO_Init+0x8>
 800462e:	2c12      	cmp	r4, #18
 8004630:	f43f af64 	beq.w	80044fc <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8004634:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8004636:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800463a:	2403      	movs	r4, #3
 800463c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004640:	43e4      	mvns	r4, r4
 8004642:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004644:	684f      	ldr	r7, [r1, #4]
 8004646:	f007 0703 	and.w	r7, r7, #3
 800464a:	fa07 f70e 	lsl.w	r7, r7, lr
 800464e:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8004650:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004652:	684e      	ldr	r6, [r1, #4]
 8004654:	1e77      	subs	r7, r6, #1
 8004656:	2f01      	cmp	r7, #1
 8004658:	f67f af64 	bls.w	8004524 <HAL_GPIO_Init+0x30>
 800465c:	2e11      	cmp	r6, #17
 800465e:	f43f af61 	beq.w	8004524 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004662:	2e12      	cmp	r6, #18
 8004664:	f47f af6e 	bne.w	8004544 <HAL_GPIO_Init+0x50>
 8004668:	e75c      	b.n	8004524 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800466a:	2704      	movs	r7, #4
 800466c:	e79e      	b.n	80045ac <HAL_GPIO_Init+0xb8>
 800466e:	2700      	movs	r7, #0
 8004670:	e79c      	b.n	80045ac <HAL_GPIO_Init+0xb8>
 8004672:	2701      	movs	r7, #1
 8004674:	e79a      	b.n	80045ac <HAL_GPIO_Init+0xb8>
 8004676:	2702      	movs	r7, #2
 8004678:	e798      	b.n	80045ac <HAL_GPIO_Init+0xb8>
 800467a:	2703      	movs	r7, #3
 800467c:	e796      	b.n	80045ac <HAL_GPIO_Init+0xb8>
  }
}
 800467e:	b003      	add	sp, #12
 8004680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004682:	bf00      	nop
 8004684:	40021000 	.word	0x40021000
 8004688:	40010000 	.word	0x40010000
 800468c:	48000400 	.word	0x48000400
 8004690:	40010400 	.word	0x40010400

08004694 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004694:	6903      	ldr	r3, [r0, #16]
 8004696:	4219      	tst	r1, r3
 8004698:	d101      	bne.n	800469e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800469a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800469c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800469e:	2001      	movs	r0, #1
 80046a0:	4770      	bx	lr

080046a2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046a2:	b90a      	cbnz	r2, 80046a8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046a4:	6281      	str	r1, [r0, #40]	; 0x28
 80046a6:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046a8:	6181      	str	r1, [r0, #24]
 80046aa:	4770      	bx	lr

080046ac <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80046ac:	6943      	ldr	r3, [r0, #20]
 80046ae:	4059      	eors	r1, r3
 80046b0:	6141      	str	r1, [r0, #20]
 80046b2:	4770      	bx	lr

080046b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046b4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	4203      	tst	r3, r0
 80046bc:	d100      	bne.n	80046c0 <HAL_GPIO_EXTI_IRQHandler+0xc>
 80046be:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046c0:	4b02      	ldr	r3, [pc, #8]	; (80046cc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80046c2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046c4:	f7fe fee2 	bl	800348c <HAL_GPIO_EXTI_Callback>
  }
}
 80046c8:	e7f9      	b.n	80046be <HAL_GPIO_EXTI_IRQHandler+0xa>
 80046ca:	bf00      	nop
 80046cc:	40010400 	.word	0x40010400

080046d0 <HAL_PWR_EnableWakeUpPin>:
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity)); 
  
  /* Specifies the Wake-Up pin polarity for the event detection 
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT)); 
 80046d0:	4a06      	ldr	r2, [pc, #24]	; (80046ec <HAL_PWR_EnableWakeUpPin+0x1c>)
 80046d2:	68d3      	ldr	r3, [r2, #12]
 80046d4:	f000 011f 	and.w	r1, r0, #31
 80046d8:	ea23 0301 	bic.w	r3, r3, r1
 80046dc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80046e0:	60d0      	str	r0, [r2, #12]
    
  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 80046e2:	6893      	ldr	r3, [r2, #8]
 80046e4:	4319      	orrs	r1, r3
 80046e6:	6091      	str	r1, [r2, #8]
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40007000 	.word	0x40007000

080046f0 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80046f0:	4a06      	ldr	r2, [pc, #24]	; (800470c <HAL_PWR_EnterSTANDBYMode+0x1c>)
 80046f2:	6813      	ldr	r3, [r2, #0]
 80046f4:	f023 0307 	bic.w	r3, r3, #7
 80046f8:	f043 0303 	orr.w	r3, r3, #3
 80046fc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80046fe:	4a04      	ldr	r2, [pc, #16]	; (8004710 <HAL_PWR_EnterSTANDBYMode+0x20>)
 8004700:	6913      	ldr	r3, [r2, #16]
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8004708:	bf30      	wfi
 800470a:	4770      	bx	lr
 800470c:	40007000 	.word	0x40007000
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004714:	4b02      	ldr	r3, [pc, #8]	; (8004720 <HAL_PWREx_GetVoltageRange+0xc>)
 8004716:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8004718:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	40007000 	.word	0x40007000

08004724 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004724:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004728:	d00f      	beq.n	800474a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x88>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004736:	d037      	beq.n	80047a8 <HAL_PWREx_ControlVoltageScaling+0x84>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004738:	4a1c      	ldr	r2, [pc, #112]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x88>)
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004740:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004744:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8004746:	2000      	movs	r0, #0
 8004748:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800474a:	4b18      	ldr	r3, [pc, #96]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x88>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004756:	d023      	beq.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x7c>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004758:	4a14      	ldr	r2, [pc, #80]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x88>)
 800475a:	6813      	ldr	r3, [r2, #0]
 800475c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004764:	6013      	str	r3, [r2, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8004766:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800476e:	f502 325b 	add.w	r2, r2, #224256	; 0x36c00
 8004772:	f202 2283 	addw	r2, r2, #643	; 0x283
 8004776:	fba2 2303 	umull	r2, r3, r2, r3
 800477a:	0c9a      	lsrs	r2, r3, #18
 800477c:	2332      	movs	r3, #50	; 0x32
 800477e:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8004782:	e000      	b.n	8004786 <HAL_PWREx_ControlVoltageScaling+0x62>
        wait_loop_index--;
 8004784:	3b01      	subs	r3, #1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8004786:	b123      	cbz	r3, 8004792 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004788:	4a08      	ldr	r2, [pc, #32]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x88>)
 800478a:	6952      	ldr	r2, [r2, #20]
 800478c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004790:	d1f8      	bne.n	8004784 <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_PWREx_ControlVoltageScaling+0x88>)
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800479a:	d003      	beq.n	80047a4 <HAL_PWREx_ControlVoltageScaling+0x80>
        return HAL_TIMEOUT;
 800479c:	2003      	movs	r0, #3
 800479e:	4770      	bx	lr
  return HAL_OK;
 80047a0:	2000      	movs	r0, #0
 80047a2:	4770      	bx	lr
 80047a4:	2000      	movs	r0, #0
 80047a6:	4770      	bx	lr
 80047a8:	2000      	movs	r0, #0
}  
 80047aa:	4770      	bx	lr
 80047ac:	40007000 	.word	0x40007000
 80047b0:	20000154 	.word	0x20000154

080047b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047b4:	b530      	push	{r4, r5, lr}
 80047b6:	b083      	sub	sp, #12
 80047b8:	4605      	mov	r5, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047ba:	4b20      	ldr	r3, [pc, #128]	; (800483c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80047c2:	d00b      	beq.n	80047dc <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047c4:	f7ff ffa6 	bl	8004714 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80047cc:	d017      	beq.n	80047fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047ce:	2d80      	cmp	r5, #128	; 0x80
 80047d0:	d81f      	bhi.n	8004812 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047d2:	d02d      	beq.n	8004830 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047d4:	2d70      	cmp	r5, #112	; 0x70
 80047d6:	d02d      	beq.n	8004834 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047d8:	2100      	movs	r1, #0
 80047da:	e01b      	b.n	8004814 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 80047dc:	4c17      	ldr	r4, [pc, #92]	; (800483c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 80047de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80047e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80047f0:	f7ff ff90 	bl	8004714 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80047f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80047fc:	e7e4      	b.n	80047c8 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80047fe:	2d80      	cmp	r5, #128	; 0x80
 8004800:	d903      	bls.n	800480a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8004802:	2da0      	cmp	r5, #160	; 0xa0
 8004804:	d903      	bls.n	800480e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004806:	2102      	movs	r1, #2
 8004808:	e004      	b.n	8004814 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800480a:	2100      	movs	r1, #0
 800480c:	e002      	b.n	8004814 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800480e:	2101      	movs	r1, #1
 8004810:	e000      	b.n	8004814 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8004812:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004814:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8004816:	6813      	ldr	r3, [r2, #0]
 8004818:	f023 0307 	bic.w	r3, r3, #7
 800481c:	430b      	orrs	r3, r1
 800481e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004820:	6813      	ldr	r3, [r2, #0]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	4299      	cmp	r1, r3
 8004828:	d006      	beq.n	8004838 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 800482a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800482c:	b003      	add	sp, #12
 800482e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8004830:	2102      	movs	r1, #2
 8004832:	e7ef      	b.n	8004814 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8004834:	2101      	movs	r1, #1
 8004836:	e7ed      	b.n	8004814 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8004838:	2000      	movs	r0, #0
 800483a:	e7f7      	b.n	800482c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800483c:	40021000 	.word	0x40021000
 8004840:	40022000 	.word	0x40022000

08004844 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8004844:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f013 0f0c 	tst.w	r3, #12
 800484c:	d01a      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x40>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 800484e:	4b39      	ldr	r3, [pc, #228]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d00e      	beq.n	8004878 <HAL_RCC_GetSysClockFreq+0x34>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800485a:	4b36      	ldr	r3, [pc, #216]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b04      	cmp	r3, #4
 8004864:	d02f      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x82>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004866:	4b33      	ldr	r3, [pc, #204]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b08      	cmp	r3, #8
 8004870:	d02c      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8004872:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8004874:	4601      	mov	r1, r0
 8004876:	e018      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x66>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8004878:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d1ea      	bne.n	800485a <HAL_RCC_GetSysClockFreq+0x16>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f013 0f08 	tst.w	r3, #8
 800488c:	d114      	bne.n	80048b8 <HAL_RCC_GetSysClockFreq+0x74>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800488e:	4b29      	ldr	r3, [pc, #164]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004894:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 8004898:	4a27      	ldr	r2, [pc, #156]	; (8004938 <HAL_RCC_GetSysClockFreq+0xf4>)
 800489a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800489e:	4b25      	ldr	r3, [pc, #148]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f013 0f0c 	tst.w	r3, #12
 80048a6:	d00c      	beq.n	80048c2 <HAL_RCC_GetSysClockFreq+0x7e>
  uint32_t sysclockfreq = 0U;
 80048a8:	2000      	movs	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048aa:	4a22      	ldr	r2, [pc, #136]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 80048ac:	6893      	ldr	r3, [r2, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b0c      	cmp	r3, #12
 80048b4:	d00d      	beq.n	80048d2 <HAL_RCC_GetSysClockFreq+0x8e>
}
 80048b6:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048b8:	4b1e      	ldr	r3, [pc, #120]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80048c0:	e7ea      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = msirange;
 80048c2:	4608      	mov	r0, r1
 80048c4:	e7f1      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSI_VALUE;
 80048c6:	481d      	ldr	r0, [pc, #116]	; (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80048c8:	2100      	movs	r1, #0
 80048ca:	e7ee      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSE_VALUE;
 80048cc:	481c      	ldr	r0, [pc, #112]	; (8004940 <HAL_RCC_GetSysClockFreq+0xfc>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 80048ce:	2100      	movs	r1, #0
 80048d0:	e7eb      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048d2:	4613      	mov	r3, r2
 80048d4:	68d2      	ldr	r2, [r2, #12]
 80048d6:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80048e0:	3301      	adds	r3, #1
    switch (pllsource)
 80048e2:	2a02      	cmp	r2, #2
 80048e4:	d00a      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0xb8>
 80048e6:	2a03      	cmp	r2, #3
 80048e8:	d01a      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0xdc>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ee:	4a11      	ldr	r2, [pc, #68]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 80048f0:	68d0      	ldr	r0, [r2, #12]
 80048f2:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80048f6:	fb00 f003 	mul.w	r0, r0, r3
      break;
 80048fa:	e008      	b.n	800490e <HAL_RCC_GetSysClockFreq+0xca>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048fc:	480f      	ldr	r0, [pc, #60]	; (800493c <HAL_RCC_GetSysClockFreq+0xf8>)
 80048fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004902:	4a0c      	ldr	r2, [pc, #48]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004904:	68d0      	ldr	r0, [r2, #12]
 8004906:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800490a:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004916:	3301      	adds	r3, #1
 8004918:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800491a:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800491e:	e7ca      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x72>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004920:	4807      	ldr	r0, [pc, #28]	; (8004940 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004922:	fbb0 f3f3 	udiv	r3, r0, r3
 8004926:	4a03      	ldr	r2, [pc, #12]	; (8004934 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004928:	68d0      	ldr	r0, [r2, #12]
 800492a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800492e:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8004932:	e7ec      	b.n	800490e <HAL_RCC_GetSysClockFreq+0xca>
 8004934:	40021000 	.word	0x40021000
 8004938:	08007ebc 	.word	0x08007ebc
 800493c:	00f42400 	.word	0x00f42400
 8004940:	007a1200 	.word	0x007a1200

08004944 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004944:	2800      	cmp	r0, #0
 8004946:	f000 82d7 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x5b4>
{
 800494a:	b570      	push	{r4, r5, r6, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004950:	6803      	ldr	r3, [r0, #0]
 8004952:	f013 0f10 	tst.w	r3, #16
 8004956:	d03f      	beq.n	80049d8 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8004958:	4b97      	ldr	r3, [pc, #604]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f013 0f0c 	tst.w	r3, #12
 8004960:	f040 8092 	bne.w	8004a88 <HAL_RCC_OscConfig+0x144>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004964:	4b94      	ldr	r3, [pc, #592]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f013 0f02 	tst.w	r3, #2
 800496c:	d003      	beq.n	8004976 <HAL_RCC_OscConfig+0x32>
 800496e:	6983      	ldr	r3, [r0, #24]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 82c3 	beq.w	8004efc <HAL_RCC_OscConfig+0x5b8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004976:	6a20      	ldr	r0, [r4, #32]
 8004978:	4b8f      	ldr	r3, [pc, #572]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f013 0f08 	tst.w	r3, #8
 8004980:	d062      	beq.n	8004a48 <HAL_RCC_OscConfig+0x104>
 8004982:	4b8d      	ldr	r3, [pc, #564]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800498a:	4283      	cmp	r3, r0
 800498c:	d263      	bcs.n	8004a56 <HAL_RCC_OscConfig+0x112>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800498e:	f7ff ff11 	bl	80047b4 <RCC_SetFlashLatencyFromMSIRange>
 8004992:	2800      	cmp	r0, #0
 8004994:	f040 82b4 	bne.w	8004f00 <HAL_RCC_OscConfig+0x5bc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004998:	4b87      	ldr	r3, [pc, #540]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80049a8:	6a21      	ldr	r1, [r4, #32]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80049b4:	69e1      	ldr	r1, [r4, #28]
 80049b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80049ba:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049bc:	f7ff ff42 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 80049c0:	4b7d      	ldr	r3, [pc, #500]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049c8:	4a7c      	ldr	r2, [pc, #496]	; (8004bbc <HAL_RCC_OscConfig+0x278>)
 80049ca:	5cd3      	ldrb	r3, [r2, r3]
 80049cc:	40d8      	lsrs	r0, r3
 80049ce:	4b7c      	ldr	r3, [pc, #496]	; (8004bc0 <HAL_RCC_OscConfig+0x27c>)
 80049d0:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 80049d2:	2000      	movs	r0, #0
 80049d4:	f7ff faf8 	bl	8003fc8 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	f013 0f01 	tst.w	r3, #1
 80049de:	f000 80a1 	beq.w	8004b24 <HAL_RCC_OscConfig+0x1e0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80049e2:	4b75      	ldr	r3, [pc, #468]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	f000 8091 	beq.w	8004b12 <HAL_RCC_OscConfig+0x1ce>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049f0:	4b71      	ldr	r3, [pc, #452]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80049f8:	2b0c      	cmp	r3, #12
 80049fa:	f000 8083 	beq.w	8004b04 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a04:	f000 80b5 	beq.w	8004b72 <HAL_RCC_OscConfig+0x22e>
 8004a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a0c:	f000 80b7 	beq.w	8004b7e <HAL_RCC_OscConfig+0x23a>
 8004a10:	4b69      	ldr	r3, [pc, #420]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a20:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a22:	6863      	ldr	r3, [r4, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 80b7 	beq.w	8004b98 <HAL_RCC_OscConfig+0x254>
        tickstart = HAL_GetTick();
 8004a2a:	f7ff faeb 	bl	8004004 <HAL_GetTick>
 8004a2e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8004a30:	4b61      	ldr	r3, [pc, #388]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a38:	d174      	bne.n	8004b24 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a3a:	f7ff fae3 	bl	8004004 <HAL_GetTick>
 8004a3e:	1b40      	subs	r0, r0, r5
 8004a40:	2864      	cmp	r0, #100	; 0x64
 8004a42:	d9f5      	bls.n	8004a30 <HAL_RCC_OscConfig+0xec>
            return HAL_TIMEOUT;
 8004a44:	2003      	movs	r0, #3
 8004a46:	e262      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a48:	4b5b      	ldr	r3, [pc, #364]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a54:	e799      	b.n	800498a <HAL_RCC_OscConfig+0x46>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a56:	4b58      	ldr	r3, [pc, #352]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f042 0208 	orr.w	r2, r2, #8
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004a66:	6a21      	ldr	r1, [r4, #32]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004a72:	69e1      	ldr	r1, [r4, #28]
 8004a74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004a78:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a7a:	6a20      	ldr	r0, [r4, #32]
 8004a7c:	f7ff fe9a 	bl	80047b4 <RCC_SetFlashLatencyFromMSIRange>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d09b      	beq.n	80049bc <HAL_RCC_OscConfig+0x78>
            return HAL_ERROR;
 8004a84:	2001      	movs	r0, #1
 8004a86:	e242      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a88:	6983      	ldr	r3, [r0, #24]
 8004a8a:	b333      	cbz	r3, 8004ada <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_MSI_ENABLE();
 8004a8c:	4a4a      	ldr	r2, [pc, #296]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004a8e:	6813      	ldr	r3, [r2, #0]
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a96:	f7ff fab5 	bl	8004004 <HAL_GetTick>
 8004a9a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8004a9c:	4b46      	ldr	r3, [pc, #280]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f013 0f02 	tst.w	r3, #2
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aa6:	f7ff faad 	bl	8004004 <HAL_GetTick>
 8004aaa:	1b40      	subs	r0, r0, r5
 8004aac:	2802      	cmp	r0, #2
 8004aae:	d9f5      	bls.n	8004a9c <HAL_RCC_OscConfig+0x158>
            return HAL_TIMEOUT;
 8004ab0:	2003      	movs	r0, #3
 8004ab2:	e22c      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ab4:	4b40      	ldr	r3, [pc, #256]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	f042 0208 	orr.w	r2, r2, #8
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004ac4:	6a21      	ldr	r1, [r4, #32]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004ad0:	69e1      	ldr	r1, [r4, #28]
 8004ad2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004ad6:	605a      	str	r2, [r3, #4]
 8004ad8:	e77e      	b.n	80049d8 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_MSI_DISABLE();
 8004ada:	4a37      	ldr	r2, [pc, #220]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004adc:	6813      	ldr	r3, [r2, #0]
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ae4:	f7ff fa8e 	bl	8004004 <HAL_GetTick>
 8004ae8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8004aea:	4b33      	ldr	r3, [pc, #204]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f013 0f02 	tst.w	r3, #2
 8004af2:	f43f af71 	beq.w	80049d8 <HAL_RCC_OscConfig+0x94>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004af6:	f7ff fa85 	bl	8004004 <HAL_GetTick>
 8004afa:	1b40      	subs	r0, r0, r5
 8004afc:	2802      	cmp	r0, #2
 8004afe:	d9f4      	bls.n	8004aea <HAL_RCC_OscConfig+0x1a6>
            return HAL_TIMEOUT;
 8004b00:	2003      	movs	r0, #3
 8004b02:	e204      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b04:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	f47f af76 	bne.w	80049fe <HAL_RCC_OscConfig+0xba>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b12:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b1a:	d003      	beq.n	8004b24 <HAL_RCC_OscConfig+0x1e0>
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 81f0 	beq.w	8004f04 <HAL_RCC_OscConfig+0x5c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	f013 0f02 	tst.w	r3, #2
 8004b2a:	d062      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x2ae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8004b2c:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d04b      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x28c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b38:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8004b40:	2b0c      	cmp	r3, #12
 8004b42:	d03f      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b44:	68e3      	ldr	r3, [r4, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d079      	beq.n	8004c3e <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_HSI_ENABLE();
 8004b4a:	4a1b      	ldr	r2, [pc, #108]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004b4c:	6813      	ldr	r3, [r2, #0]
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b52:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b54:	f7ff fa56 	bl	8004004 <HAL_GetTick>
 8004b58:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004b5a:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b62:	d163      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2e8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b64:	f7ff fa4e 	bl	8004004 <HAL_GetTick>
 8004b68:	1b40      	subs	r0, r0, r5
 8004b6a:	2802      	cmp	r0, #2
 8004b6c:	d9f5      	bls.n	8004b5a <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8004b6e:	2003      	movs	r0, #3
 8004b70:	e1cd      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b72:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004b74:	6813      	ldr	r3, [r2, #0]
 8004b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	e751      	b.n	8004a22 <HAL_RCC_OscConfig+0xde>
 8004b7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b82:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e744      	b.n	8004a22 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8004b98:	f7ff fa34 	bl	8004004 <HAL_GetTick>
 8004b9c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <HAL_RCC_OscConfig+0x274>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ba6:	d0bd      	beq.n	8004b24 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7ff fa2c 	bl	8004004 <HAL_GetTick>
 8004bac:	1b40      	subs	r0, r0, r5
 8004bae:	2864      	cmp	r0, #100	; 0x64
 8004bb0:	d9f5      	bls.n	8004b9e <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8004bb2:	2003      	movs	r0, #3
 8004bb4:	e1ab      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	08007ea4 	.word	0x08007ea4
 8004bc0:	20000154 	.word	0x20000154
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004bc4:	4bb1      	ldr	r3, [pc, #708]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d1b9      	bne.n	8004b44 <HAL_RCC_OscConfig+0x200>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd0:	4bae      	ldr	r3, [pc, #696]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004bd8:	d003      	beq.n	8004be2 <HAL_RCC_OscConfig+0x29e>
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8193 	beq.w	8004f08 <HAL_RCC_OscConfig+0x5c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be2:	4aaa      	ldr	r2, [pc, #680]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004be4:	6853      	ldr	r3, [r2, #4]
 8004be6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004bea:	6921      	ldr	r1, [r4, #16]
 8004bec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004bf0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	f013 0f08 	tst.w	r3, #8
 8004bf8:	d04c      	beq.n	8004c94 <HAL_RCC_OscConfig+0x350>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bfa:	6963      	ldr	r3, [r4, #20]
 8004bfc:	b39b      	cbz	r3, 8004c66 <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_LSI_ENABLE();
 8004bfe:	4aa3      	ldr	r2, [pc, #652]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c00:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004c0c:	f7ff f9fa 	bl	8004004 <HAL_GetTick>
 8004c10:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8004c12:	4b9e      	ldr	r3, [pc, #632]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c18:	f013 0f02 	tst.w	r3, #2
 8004c1c:	d13a      	bne.n	8004c94 <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1e:	f7ff f9f1 	bl	8004004 <HAL_GetTick>
 8004c22:	1b40      	subs	r0, r0, r5
 8004c24:	2802      	cmp	r0, #2
 8004c26:	d9f4      	bls.n	8004c12 <HAL_RCC_OscConfig+0x2ce>
          return HAL_TIMEOUT;
 8004c28:	2003      	movs	r0, #3
 8004c2a:	e170      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c2c:	4a97      	ldr	r2, [pc, #604]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c2e:	6853      	ldr	r3, [r2, #4]
 8004c30:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c34:	6921      	ldr	r1, [r4, #16]
 8004c36:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c3a:	6053      	str	r3, [r2, #4]
 8004c3c:	e7d9      	b.n	8004bf2 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_HSI_DISABLE();
 8004c3e:	4a93      	ldr	r2, [pc, #588]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c40:	6813      	ldr	r3, [r2, #0]
 8004c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c46:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c48:	f7ff f9dc 	bl	8004004 <HAL_GetTick>
 8004c4c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8004c4e:	4b8f      	ldr	r3, [pc, #572]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004c56:	d0cc      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x2ae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c58:	f7ff f9d4 	bl	8004004 <HAL_GetTick>
 8004c5c:	1b40      	subs	r0, r0, r5
 8004c5e:	2802      	cmp	r0, #2
 8004c60:	d9f5      	bls.n	8004c4e <HAL_RCC_OscConfig+0x30a>
            return HAL_TIMEOUT;
 8004c62:	2003      	movs	r0, #3
 8004c64:	e153      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_LSI_DISABLE();
 8004c66:	4a89      	ldr	r2, [pc, #548]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c68:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004c74:	f7ff f9c6 	bl	8004004 <HAL_GetTick>
 8004c78:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8004c7a:	4b84      	ldr	r3, [pc, #528]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c80:	f013 0f02 	tst.w	r3, #2
 8004c84:	d006      	beq.n	8004c94 <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c86:	f7ff f9bd 	bl	8004004 <HAL_GetTick>
 8004c8a:	1b40      	subs	r0, r0, r5
 8004c8c:	2802      	cmp	r0, #2
 8004c8e:	d9f4      	bls.n	8004c7a <HAL_RCC_OscConfig+0x336>
          return HAL_TIMEOUT;
 8004c90:	2003      	movs	r0, #3
 8004c92:	e13c      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	f013 0f04 	tst.w	r3, #4
 8004c9a:	d07a      	beq.n	8004d92 <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c9c:	4b7b      	ldr	r3, [pc, #492]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004ca4:	d136      	bne.n	8004d14 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca6:	4b79      	ldr	r3, [pc, #484]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004ca8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004caa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cae:	659a      	str	r2, [r3, #88]	; 0x58
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004cba:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbc:	4b74      	ldr	r3, [pc, #464]	; (8004e90 <HAL_RCC_OscConfig+0x54c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc6:	68a3      	ldr	r3, [r4, #8]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d039      	beq.n	8004d40 <HAL_RCC_OscConfig+0x3fc>
 8004ccc:	2b05      	cmp	r3, #5
 8004cce:	d03f      	beq.n	8004d50 <HAL_RCC_OscConfig+0x40c>
 8004cd0:	4b6e      	ldr	r3, [pc, #440]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004cd2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004cde:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004ce2:	f022 0204 	bic.w	r2, r2, #4
 8004ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d03d      	beq.n	8004d6c <HAL_RCC_OscConfig+0x428>
      tickstart = HAL_GetTick();
 8004cf0:	f7ff f988 	bl	8004004 <HAL_GetTick>
 8004cf4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8004cf6:	4b65      	ldr	r3, [pc, #404]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	f013 0f02 	tst.w	r3, #2
 8004d00:	d146      	bne.n	8004d90 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7ff f97f 	bl	8004004 <HAL_GetTick>
 8004d06:	1b80      	subs	r0, r0, r6
 8004d08:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d0c:	4298      	cmp	r0, r3
 8004d0e:	d9f2      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8004d10:	2003      	movs	r0, #3
 8004d12:	e0fc      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
    FlagStatus       pwrclkchanged = RESET;
 8004d14:	2500      	movs	r5, #0
 8004d16:	e7d1      	b.n	8004cbc <HAL_RCC_OscConfig+0x378>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d18:	4a5d      	ldr	r2, [pc, #372]	; (8004e90 <HAL_RCC_OscConfig+0x54c>)
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d20:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004d22:	f7ff f96f 	bl	8004004 <HAL_GetTick>
 8004d26:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d28:	4b59      	ldr	r3, [pc, #356]	; (8004e90 <HAL_RCC_OscConfig+0x54c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d30:	d1c9      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d32:	f7ff f967 	bl	8004004 <HAL_GetTick>
 8004d36:	1b80      	subs	r0, r0, r6
 8004d38:	2802      	cmp	r0, #2
 8004d3a:	d9f5      	bls.n	8004d28 <HAL_RCC_OscConfig+0x3e4>
          return HAL_TIMEOUT;
 8004d3c:	2003      	movs	r0, #3
 8004d3e:	e0e6      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d40:	4a52      	ldr	r2, [pc, #328]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d42:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d4e:	e7cc      	b.n	8004cea <HAL_RCC_OscConfig+0x3a6>
 8004d50:	4b4e      	ldr	r3, [pc, #312]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d52:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004d56:	f042 0204 	orr.w	r2, r2, #4
 8004d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004d5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004d6a:	e7be      	b.n	8004cea <HAL_RCC_OscConfig+0x3a6>
      tickstart = HAL_GetTick();
 8004d6c:	f7ff f94a 	bl	8004004 <HAL_GetTick>
 8004d70:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8004d72:	4b46      	ldr	r3, [pc, #280]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	f013 0f02 	tst.w	r3, #2
 8004d7c:	d008      	beq.n	8004d90 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7e:	f7ff f941 	bl	8004004 <HAL_GetTick>
 8004d82:	1b80      	subs	r0, r0, r6
 8004d84:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d88:	4298      	cmp	r0, r3
 8004d8a:	d9f2      	bls.n	8004d72 <HAL_RCC_OscConfig+0x42e>
          return HAL_TIMEOUT;
 8004d8c:	2003      	movs	r0, #3
 8004d8e:	e0be      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
    if(pwrclkchanged == SET)
 8004d90:	b9e5      	cbnz	r5, 8004dcc <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	f013 0f20 	tst.w	r3, #32
 8004d98:	d035      	beq.n	8004e06 <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d9c:	b1e3      	cbz	r3, 8004dd8 <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 8004d9e:	4a3b      	ldr	r2, [pc, #236]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004da0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004dac:	f7ff f92a 	bl	8004004 <HAL_GetTick>
 8004db0:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8004db2:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004db8:	f013 0f02 	tst.w	r3, #2
 8004dbc:	d123      	bne.n	8004e06 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dbe:	f7ff f921 	bl	8004004 <HAL_GetTick>
 8004dc2:	1b40      	subs	r0, r0, r5
 8004dc4:	2802      	cmp	r0, #2
 8004dc6:	d9f4      	bls.n	8004db2 <HAL_RCC_OscConfig+0x46e>
          return HAL_TIMEOUT;
 8004dc8:	2003      	movs	r0, #3
 8004dca:	e0a0      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dcc:	4a2f      	ldr	r2, [pc, #188]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004dce:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8004dd6:	e7dc      	b.n	8004d92 <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 8004dd8:	4a2c      	ldr	r2, [pc, #176]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004dda:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004de6:	f7ff f90d 	bl	8004004 <HAL_GetTick>
 8004dea:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8004dec:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004df2:	f013 0f02 	tst.w	r3, #2
 8004df6:	d006      	beq.n	8004e06 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004df8:	f7ff f904 	bl	8004004 <HAL_GetTick>
 8004dfc:	1b40      	subs	r0, r0, r5
 8004dfe:	2802      	cmp	r0, #2
 8004e00:	d9f4      	bls.n	8004dec <HAL_RCC_OscConfig+0x4a8>
          return HAL_TIMEOUT;
 8004e02:	2003      	movs	r0, #3
 8004e04:	e083      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d07f      	beq.n	8004f0c <HAL_RCC_OscConfig+0x5c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e0e:	6892      	ldr	r2, [r2, #8]
 8004e10:	f002 020c 	and.w	r2, r2, #12
 8004e14:	2a0c      	cmp	r2, #12
 8004e16:	d07c      	beq.n	8004f12 <HAL_RCC_OscConfig+0x5ce>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d023      	beq.n	8004e64 <HAL_RCC_OscConfig+0x520>
        __HAL_RCC_PLL_DISABLE();
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004e24:	601a      	str	r2, [r3, #0]
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004e2c:	d104      	bne.n	8004e38 <HAL_RCC_OscConfig+0x4f4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e2e:	4a17      	ldr	r2, [pc, #92]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e30:	68d3      	ldr	r3, [r2, #12]
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004e38:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e3a:	68d3      	ldr	r3, [r2, #12]
 8004e3c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e44:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004e46:	f7ff f8dd 	bl	8004004 <HAL_GetTick>
 8004e4a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e54:	d04e      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e56:	f7ff f8d5 	bl	8004004 <HAL_GetTick>
 8004e5a:	1b00      	subs	r0, r0, r4
 8004e5c:	2802      	cmp	r0, #2
 8004e5e:	d9f5      	bls.n	8004e4c <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8004e60:	2003      	movs	r0, #3
 8004e62:	e054      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_PLL_DISABLE();
 8004e64:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e66:	6813      	ldr	r3, [r2, #0]
 8004e68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e6c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e6e:	f7ff f8c9 	bl	8004004 <HAL_GetTick>
 8004e72:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_OscConfig+0x548>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCC_OscConfig+0x550>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7ff f8c1 	bl	8004004 <HAL_GetTick>
 8004e82:	1b40      	subs	r0, r0, r5
 8004e84:	2802      	cmp	r0, #2
 8004e86:	d9f5      	bls.n	8004e74 <HAL_RCC_OscConfig+0x530>
            return HAL_TIMEOUT;
 8004e88:	2003      	movs	r0, #3
 8004e8a:	e040      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	40007000 	.word	0x40007000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e96:	1e5a      	subs	r2, r3, #1
 8004e98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004ea0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004ea6:	0852      	lsrs	r2, r2, #1
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004eae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004eb0:	0852      	lsrs	r2, r2, #1
 8004eb2:	3a01      	subs	r2, #1
 8004eb4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004eb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004eba:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004ebe:	4a16      	ldr	r2, [pc, #88]	; (8004f18 <HAL_RCC_OscConfig+0x5d4>)
 8004ec0:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004ec2:	6813      	ldr	r3, [r2, #0]
 8004ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ec8:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004eca:	68d3      	ldr	r3, [r2, #12]
 8004ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ed0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004ed2:	f7ff f897 	bl	8004004 <HAL_GetTick>
 8004ed6:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <HAL_RCC_OscConfig+0x5d4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004ee0:	d106      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x5ac>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee2:	f7ff f88f 	bl	8004004 <HAL_GetTick>
 8004ee6:	1b00      	subs	r0, r0, r4
 8004ee8:	2802      	cmp	r0, #2
 8004eea:	d9f5      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x594>
            return HAL_TIMEOUT;
 8004eec:	2003      	movs	r0, #3
 8004eee:	e00e      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	e00c      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
    return HAL_ERROR;
 8004ef8:	2001      	movs	r0, #1
 8004efa:	4770      	bx	lr
        return HAL_ERROR;
 8004efc:	2001      	movs	r0, #1
 8004efe:	e006      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
            return HAL_ERROR;
 8004f00:	2001      	movs	r0, #1
 8004f02:	e004      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8004f04:	2001      	movs	r0, #1
 8004f06:	e002      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8004f08:	2001      	movs	r0, #1
 8004f0a:	e000      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 8004f0c:	2000      	movs	r0, #0
}
 8004f0e:	b002      	add	sp, #8
 8004f10:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004f12:	2001      	movs	r0, #1
 8004f14:	e7fb      	b.n	8004f0e <HAL_RCC_OscConfig+0x5ca>
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000

08004f1c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	f000 8099 	beq.w	8005054 <HAL_RCC_ClockConfig+0x138>
{
 8004f22:	b570      	push	{r4, r5, r6, lr}
 8004f24:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f26:	4b4d      	ldr	r3, [pc, #308]	; (800505c <HAL_RCC_ClockConfig+0x140>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	428b      	cmp	r3, r1
 8004f30:	d20c      	bcs.n	8004f4c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f32:	4a4a      	ldr	r2, [pc, #296]	; (800505c <HAL_RCC_ClockConfig+0x140>)
 8004f34:	6813      	ldr	r3, [r2, #0]
 8004f36:	f023 0307 	bic.w	r3, r3, #7
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	6813      	ldr	r3, [r2, #0]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	4299      	cmp	r1, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8004f48:	2001      	movs	r0, #1
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	f013 0f01 	tst.w	r3, #1
 8004f54:	d039      	beq.n	8004fca <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f56:	6863      	ldr	r3, [r4, #4]
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d009      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d026      	beq.n	8004fae <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f60:	bb63      	cbnz	r3, 8004fbc <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8004f62:	4a3f      	ldr	r2, [pc, #252]	; (8005060 <HAL_RCC_ClockConfig+0x144>)
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	f012 0f02 	tst.w	r2, #2
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8004f70:	4a3b      	ldr	r2, [pc, #236]	; (8005060 <HAL_RCC_ClockConfig+0x144>)
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004f78:	d06e      	beq.n	8005058 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f7a:	4939      	ldr	r1, [pc, #228]	; (8005060 <HAL_RCC_ClockConfig+0x144>)
 8004f7c:	688a      	ldr	r2, [r1, #8]
 8004f7e:	f022 0203 	bic.w	r2, r2, #3
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004f86:	f7ff f83d 	bl	8004004 <HAL_GetTick>
 8004f8a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8c:	4b34      	ldr	r3, [pc, #208]	; (8005060 <HAL_RCC_ClockConfig+0x144>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 030c 	and.w	r3, r3, #12
 8004f94:	6862      	ldr	r2, [r4, #4]
 8004f96:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004f9a:	d016      	beq.n	8004fca <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7ff f832 	bl	8004004 <HAL_GetTick>
 8004fa0:	1b80      	subs	r0, r0, r6
 8004fa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8004fa6:	4298      	cmp	r0, r3
 8004fa8:	d9f0      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8004faa:	2003      	movs	r0, #3
 8004fac:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8004fae:	4a2c      	ldr	r2, [pc, #176]	; (8005060 <HAL_RCC_ClockConfig+0x144>)
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004fb6:	d1e0      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8004fb8:	2001      	movs	r0, #1
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004fbc:	4a28      	ldr	r2, [pc, #160]	; (8005060 <HAL_RCC_ClockConfig+0x144>)
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004fc4:	d1d9      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	f013 0f02 	tst.w	r3, #2
 8004fd0:	d006      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd2:	4a23      	ldr	r2, [pc, #140]	; (8005060 <HAL_RCC_ClockConfig+0x144>)
 8004fd4:	6893      	ldr	r3, [r2, #8]
 8004fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fda:	68a1      	ldr	r1, [r4, #8]
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	; (800505c <HAL_RCC_ClockConfig+0x140>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	429d      	cmp	r5, r3
 8004fea:	d20c      	bcs.n	8005006 <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fec:	4a1b      	ldr	r2, [pc, #108]	; (800505c <HAL_RCC_ClockConfig+0x140>)
 8004fee:	6813      	ldr	r3, [r2, #0]
 8004ff0:	f023 0307 	bic.w	r3, r3, #7
 8004ff4:	432b      	orrs	r3, r5
 8004ff6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff8:	6813      	ldr	r3, [r2, #0]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	429d      	cmp	r5, r3
 8005000:	d001      	beq.n	8005006 <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 8005002:	2001      	movs	r0, #1
}
 8005004:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	f013 0f04 	tst.w	r3, #4
 800500c:	d006      	beq.n	800501c <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800500e:	4a14      	ldr	r2, [pc, #80]	; (8005060 <HAL_RCC_ClockConfig+0x144>)
 8005010:	6893      	ldr	r3, [r2, #8]
 8005012:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005016:	68e1      	ldr	r1, [r4, #12]
 8005018:	430b      	orrs	r3, r1
 800501a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	f013 0f08 	tst.w	r3, #8
 8005022:	d007      	beq.n	8005034 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005024:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x144>)
 8005026:	6893      	ldr	r3, [r2, #8]
 8005028:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800502c:	6921      	ldr	r1, [r4, #16]
 800502e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005032:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005034:	f7ff fc06 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCC_ClockConfig+0x144>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <HAL_RCC_ClockConfig+0x148>)
 8005042:	5cd3      	ldrb	r3, [r2, r3]
 8005044:	40d8      	lsrs	r0, r3
 8005046:	4b08      	ldr	r3, [pc, #32]	; (8005068 <HAL_RCC_ClockConfig+0x14c>)
 8005048:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800504a:	2000      	movs	r0, #0
 800504c:	f7fe ffbc 	bl	8003fc8 <HAL_InitTick>
  return HAL_OK;
 8005050:	2000      	movs	r0, #0
 8005052:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005054:	2001      	movs	r0, #1
 8005056:	4770      	bx	lr
        return HAL_ERROR;
 8005058:	2001      	movs	r0, #1
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	40022000 	.word	0x40022000
 8005060:	40021000 	.word	0x40021000
 8005064:	08007ea4 	.word	0x08007ea4
 8005068:	20000154 	.word	0x20000154

0800506c <HAL_RCC_GetHCLKFreq>:
}
 800506c:	4b01      	ldr	r3, [pc, #4]	; (8005074 <HAL_RCC_GetHCLKFreq+0x8>)
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000154 	.word	0x20000154

08005078 <HAL_RCC_GetPCLK1Freq>:
{
 8005078:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800507a:	f7ff fff7 	bl	800506c <HAL_RCC_GetHCLKFreq>
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005086:	4a03      	ldr	r2, [pc, #12]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005088:	5cd3      	ldrb	r3, [r2, r3]
}
 800508a:	40d8      	lsrs	r0, r3
 800508c:	bd08      	pop	{r3, pc}
 800508e:	bf00      	nop
 8005090:	40021000 	.word	0x40021000
 8005094:	08007eb4 	.word	0x08007eb4

08005098 <HAL_RCC_GetPCLK2Freq>:
{
 8005098:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800509a:	f7ff ffe7 	bl	800506c <HAL_RCC_GetHCLKFreq>
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80050a6:	4a03      	ldr	r2, [pc, #12]	; (80050b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80050a8:	5cd3      	ldrb	r3, [r2, r3]
}
 80050aa:	40d8      	lsrs	r0, r3
 80050ac:	bd08      	pop	{r3, pc}
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	08007eb4 	.word	0x08007eb4

080050b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050ba:	4b5d      	ldr	r3, [pc, #372]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f013 0f03 	tst.w	r3, #3
 80050c2:	d019      	beq.n	80050f8 <RCCEx_PLLSAI1_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050c4:	4b5a      	ldr	r3, [pc, #360]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	6802      	ldr	r2, [r0, #0]
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d004      	beq.n	80050dc <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80050d2:	2401      	movs	r4, #1
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80050d4:	2c00      	cmp	r4, #0
 80050d6:	d048      	beq.n	800516a <RCCEx_PLLSAI1_Config+0xb2>
      }
    }
  }

  return status;
}
 80050d8:	4620      	mov	r0, r4
 80050da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80050dc:	2a00      	cmp	r2, #0
 80050de:	d042      	beq.n	8005166 <RCCEx_PLLSAI1_Config+0xae>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80050e0:	4b53      	ldr	r3, [pc, #332]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80050e8:	3301      	adds	r3, #1
 80050ea:	6842      	ldr	r2, [r0, #4]
       ||
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d001      	beq.n	80050f4 <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 80050f0:	2401      	movs	r4, #1
 80050f2:	e7ef      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 80050f4:	2400      	movs	r4, #0
 80050f6:	e7ed      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 80050f8:	6803      	ldr	r3, [r0, #0]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d018      	beq.n	8005130 <RCCEx_PLLSAI1_Config+0x78>
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d01d      	beq.n	800513e <RCCEx_PLLSAI1_Config+0x86>
 8005102:	2b01      	cmp	r3, #1
 8005104:	d00d      	beq.n	8005122 <RCCEx_PLLSAI1_Config+0x6a>
      status = HAL_ERROR;
 8005106:	2401      	movs	r4, #1
    if(status == HAL_OK)
 8005108:	2c00      	cmp	r4, #0
 800510a:	d1e3      	bne.n	80050d4 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800510c:	4e48      	ldr	r6, [pc, #288]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 800510e:	68f2      	ldr	r2, [r6, #12]
 8005110:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005114:	6845      	ldr	r5, [r0, #4]
 8005116:	3d01      	subs	r5, #1
 8005118:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800511c:	4313      	orrs	r3, r2
 800511e:	60f3      	str	r3, [r6, #12]
 8005120:	e7d8      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005122:	4a43      	ldr	r2, [pc, #268]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	f012 0f02 	tst.w	r2, #2
 800512a:	d014      	beq.n	8005156 <RCCEx_PLLSAI1_Config+0x9e>
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2400      	movs	r4, #0
 800512e:	e7eb      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005130:	4a3f      	ldr	r2, [pc, #252]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005138:	d00f      	beq.n	800515a <RCCEx_PLLSAI1_Config+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 800513a:	2400      	movs	r4, #0
 800513c:	e7e4      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800513e:	4a3c      	ldr	r2, [pc, #240]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005146:	d10a      	bne.n	800515e <RCCEx_PLLSAI1_Config+0xa6>
 8005148:	4a39      	ldr	r2, [pc, #228]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8005150:	d007      	beq.n	8005162 <RCCEx_PLLSAI1_Config+0xaa>
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2400      	movs	r4, #0
 8005154:	e7d8      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 8005156:	2401      	movs	r4, #1
 8005158:	e7d6      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 800515a:	2401      	movs	r4, #1
 800515c:	e7d4      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800515e:	2400      	movs	r4, #0
 8005160:	e7d2      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 8005162:	2401      	movs	r4, #1
 8005164:	e7d0      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 8005166:	2401      	movs	r4, #1
 8005168:	e7b4      	b.n	80050d4 <RCCEx_PLLSAI1_Config+0x1c>
 800516a:	460f      	mov	r7, r1
 800516c:	4605      	mov	r5, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 800516e:	4a30      	ldr	r2, [pc, #192]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 8005170:	6813      	ldr	r3, [r2, #0]
 8005172:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005176:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005178:	f7fe ff44 	bl	8004004 <HAL_GetTick>
 800517c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800517e:	4b2c      	ldr	r3, [pc, #176]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005186:	d005      	beq.n	8005194 <RCCEx_PLLSAI1_Config+0xdc>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005188:	f7fe ff3c 	bl	8004004 <HAL_GetTick>
 800518c:	1b80      	subs	r0, r0, r6
 800518e:	2802      	cmp	r0, #2
 8005190:	d9f5      	bls.n	800517e <RCCEx_PLLSAI1_Config+0xc6>
        status = HAL_TIMEOUT;
 8005192:	2403      	movs	r4, #3
    if(status == HAL_OK)
 8005194:	2c00      	cmp	r4, #0
 8005196:	d19f      	bne.n	80050d8 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8005198:	bb47      	cbnz	r7, 80051ec <RCCEx_PLLSAI1_Config+0x134>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800519a:	4925      	ldr	r1, [pc, #148]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 800519c:	690b      	ldr	r3, [r1, #16]
 800519e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80051a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051a6:	68a8      	ldr	r0, [r5, #8]
 80051a8:	68ea      	ldr	r2, [r5, #12]
 80051aa:	06d2      	lsls	r2, r2, #27
 80051ac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80051b0:	4313      	orrs	r3, r2
 80051b2:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80051b4:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 80051b6:	6813      	ldr	r3, [r2, #0]
 80051b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051bc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80051be:	f7fe ff21 	bl	8004004 <HAL_GetTick>
 80051c2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80051c4:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80051cc:	d105      	bne.n	80051da <RCCEx_PLLSAI1_Config+0x122>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051ce:	f7fe ff19 	bl	8004004 <HAL_GetTick>
 80051d2:	1b80      	subs	r0, r0, r6
 80051d4:	2802      	cmp	r0, #2
 80051d6:	d9f5      	bls.n	80051c4 <RCCEx_PLLSAI1_Config+0x10c>
          status = HAL_TIMEOUT;
 80051d8:	2403      	movs	r4, #3
      if(status == HAL_OK)
 80051da:	2c00      	cmp	r4, #0
 80051dc:	f47f af7c 	bne.w	80050d8 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 80051e2:	6913      	ldr	r3, [r2, #16]
 80051e4:	69a9      	ldr	r1, [r5, #24]
 80051e6:	430b      	orrs	r3, r1
 80051e8:	6113      	str	r3, [r2, #16]
 80051ea:	e775      	b.n	80050d8 <RCCEx_PLLSAI1_Config+0x20>
      else if(Divider == DIVIDER_Q_UPDATE)
 80051ec:	2f01      	cmp	r7, #1
 80051ee:	d00f      	beq.n	8005210 <RCCEx_PLLSAI1_Config+0x158>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051f0:	480f      	ldr	r0, [pc, #60]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 80051f2:	6902      	ldr	r2, [r0, #16]
 80051f4:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80051f8:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80051fc:	68a9      	ldr	r1, [r5, #8]
 80051fe:	696b      	ldr	r3, [r5, #20]
 8005200:	085b      	lsrs	r3, r3, #1
 8005202:	3b01      	subs	r3, #1
 8005204:	065b      	lsls	r3, r3, #25
 8005206:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800520a:	4313      	orrs	r3, r2
 800520c:	6103      	str	r3, [r0, #16]
 800520e:	e7d1      	b.n	80051b4 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005210:	4807      	ldr	r0, [pc, #28]	; (8005230 <RCCEx_PLLSAI1_Config+0x178>)
 8005212:	6902      	ldr	r2, [r0, #16]
 8005214:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005218:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800521c:	68a9      	ldr	r1, [r5, #8]
 800521e:	692b      	ldr	r3, [r5, #16]
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	3b01      	subs	r3, #1
 8005224:	055b      	lsls	r3, r3, #21
 8005226:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800522a:	4313      	orrs	r3, r2
 800522c:	6103      	str	r3, [r0, #16]
 800522e:	e7c1      	b.n	80051b4 <RCCEx_PLLSAI1_Config+0xfc>
 8005230:	40021000 	.word	0x40021000

08005234 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800523c:	6803      	ldr	r3, [r0, #0]
 800523e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005242:	d024      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005244:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005246:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800524a:	d013      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800524c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005250:	d002      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005252:	b1b3      	cbz	r3, 8005282 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      ret = HAL_ERROR;
 8005254:	2701      	movs	r7, #1
 8005256:	e000      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005258:	2700      	movs	r7, #0
    if(ret == HAL_OK)
 800525a:	2f00      	cmp	r7, #0
 800525c:	d16f      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800525e:	4abd      	ldr	r2, [pc, #756]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005260:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005264:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005268:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800526a:	430b      	orrs	r3, r1
 800526c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005270:	463e      	mov	r6, r7
 8005272:	e00e      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005274:	4ab7      	ldr	r2, [pc, #732]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005276:	68d3      	ldr	r3, [r2, #12]
 8005278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527c:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800527e:	2700      	movs	r7, #0
      break;
 8005280:	e7eb      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x26>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005282:	2100      	movs	r1, #0
 8005284:	3004      	adds	r0, #4
 8005286:	f7ff ff17 	bl	80050b8 <RCCEx_PLLSAI1_Config>
 800528a:	4607      	mov	r7, r0
      break;
 800528c:	e7e5      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800528e:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005290:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005298:	d06d      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800529a:	4bae      	ldr	r3, [pc, #696]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800529c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80052a2:	d14e      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80052a4:	4bab      	ldr	r3, [pc, #684]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80052a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80052ac:	659a      	str	r2, [r3, #88]	; 0x58
 80052ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80052b8:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052bc:	4aa6      	ldr	r2, [pc, #664]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80052c6:	f7fe fe9d 	bl	8004004 <HAL_GetTick>
 80052ca:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80052cc:	4ba2      	ldr	r3, [pc, #648]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80052d4:	d105      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0xae>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d6:	f7fe fe95 	bl	8004004 <HAL_GetTick>
 80052da:	1b40      	subs	r0, r0, r5
 80052dc:	2802      	cmp	r0, #2
 80052de:	d9f5      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x98>
        ret = HAL_TIMEOUT;
 80052e0:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 80052e2:	2f00      	cmp	r7, #0
 80052e4:	d142      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052e6:	4b9b      	ldr	r3, [pc, #620]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052ec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80052f0:	d015      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xea>
 80052f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d012      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0xea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052f8:	4a96      	ldr	r2, [pc, #600]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80052fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005302:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8005306:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800530a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800530e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8005312:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005316:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800531a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800531e:	f013 0f01 	tst.w	r3, #1
 8005322:	d111      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 8005324:	2f00      	cmp	r7, #0
 8005326:	f040 8113 	bne.w	8005550 <HAL_RCCEx_PeriphCLKConfig+0x31c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532a:	4a8a      	ldr	r2, [pc, #552]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800532c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005334:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005336:	430b      	orrs	r3, r1
 8005338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800533c:	e017      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x13a>
      status = ret;
 800533e:	463e      	mov	r6, r7
 8005340:	e7a7      	b.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;
 8005342:	f04f 0800 	mov.w	r8, #0
 8005346:	e7b9      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x88>
        tickstart = HAL_GetTick();
 8005348:	f7fe fe5c 	bl	8004004 <HAL_GetTick>
 800534c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800534e:	4b81      	ldr	r3, [pc, #516]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005354:	f013 0f02 	tst.w	r3, #2
 8005358:	d1e4      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535a:	f7fe fe53 	bl	8004004 <HAL_GetTick>
 800535e:	1b40      	subs	r0, r0, r5
 8005360:	f241 3388 	movw	r3, #5000	; 0x1388
 8005364:	4298      	cmp	r0, r3
 8005366:	d9f2      	bls.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 8005368:	2703      	movs	r7, #3
 800536a:	e7db      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      status = ret;
 800536c:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 800536e:	f1b8 0f00 	cmp.w	r8, #0
 8005372:	f040 80f3 	bne.w	800555c <HAL_RCCEx_PeriphCLKConfig+0x328>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	f013 0f01 	tst.w	r3, #1
 800537c:	d008      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800537e:	4a75      	ldr	r2, [pc, #468]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005380:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005384:	f023 0303 	bic.w	r3, r3, #3
 8005388:	6a21      	ldr	r1, [r4, #32]
 800538a:	430b      	orrs	r3, r1
 800538c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	f013 0f02 	tst.w	r3, #2
 8005396:	d008      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005398:	4a6e      	ldr	r2, [pc, #440]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800539a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800539e:	f023 030c 	bic.w	r3, r3, #12
 80053a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80053a4:	430b      	orrs	r3, r1
 80053a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	f013 0f04 	tst.w	r3, #4
 80053b0:	d008      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053b2:	4a68      	ldr	r2, [pc, #416]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80053bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80053be:	430b      	orrs	r3, r1
 80053c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	f013 0f08 	tst.w	r3, #8
 80053ca:	d008      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053cc:	4a61      	ldr	r2, [pc, #388]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053ce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80053d8:	430b      	orrs	r3, r1
 80053da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	f013 0f20 	tst.w	r3, #32
 80053e4:	d008      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053e6:	4a5b      	ldr	r2, [pc, #364]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80053e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80053f2:	430b      	orrs	r3, r1
 80053f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80053fe:	d008      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005400:	4a54      	ldr	r2, [pc, #336]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005402:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005406:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800540a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800540c:	430b      	orrs	r3, r1
 800540e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005418:	d008      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800541a:	4a4e      	ldr	r2, [pc, #312]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800541c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005420:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005424:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005426:	430b      	orrs	r3, r1
 8005428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005432:	d008      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005434:	4a47      	ldr	r2, [pc, #284]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005436:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800543a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800543e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005440:	430b      	orrs	r3, r1
 8005442:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	f013 0f80 	tst.w	r3, #128	; 0x80
 800544c:	d008      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800544e:	4a41      	ldr	r2, [pc, #260]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005450:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8005454:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005458:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800545a:	430b      	orrs	r3, r1
 800545c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005466:	d008      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005468:	4a3a      	ldr	r2, [pc, #232]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800546a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800546e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005472:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005474:	430b      	orrs	r3, r1
 8005476:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005480:	d008      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x260>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005482:	4a34      	ldr	r2, [pc, #208]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005484:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8005488:	f023 0303 	bic.w	r3, r3, #3
 800548c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800548e:	430b      	orrs	r3, r1
 8005490:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005494:	6823      	ldr	r3, [r4, #0]
 8005496:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800549a:	d00f      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800549c:	4a2d      	ldr	r2, [pc, #180]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800549e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054a2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80054a6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80054a8:	430b      	orrs	r3, r1
 80054aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80054b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b4:	d058      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x334>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ba:	d05a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80054c2:	d00f      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054c4:	4a23      	ldr	r2, [pc, #140]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80054c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054ca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80054ce:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80054d0:	430b      	orrs	r3, r1
 80054d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054dc:	d051      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054e2:	d053      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x358>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80054ea:	d00f      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054ec:	4a19      	ldr	r2, [pc, #100]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80054ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80054f2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80054f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80054f8:	430b      	orrs	r3, r1
 80054fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005504:	d04a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x368>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800550a:	d04c      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005512:	d00c      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005514:	4a0f      	ldr	r2, [pc, #60]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005516:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800551a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800551e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005520:	430b      	orrs	r3, r1
 8005522:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005526:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800552c:	d043      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005534:	d008      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005536:	4a07      	ldr	r2, [pc, #28]	; (8005554 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005538:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800553c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005540:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005542:	430b      	orrs	r3, r1
 8005544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8005548:	4630      	mov	r0, r6
 800554a:	b002      	add	sp, #8
 800554c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8005550:	463e      	mov	r6, r7
 8005552:	e70c      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8005554:	40021000 	.word	0x40021000
 8005558:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_DISABLE();
 800555c:	4a1a      	ldr	r2, [pc, #104]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800555e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005564:	6593      	str	r3, [r2, #88]	; 0x58
 8005566:	e706      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005568:	68d3      	ldr	r3, [r2, #12]
 800556a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800556e:	60d3      	str	r3, [r2, #12]
 8005570:	e7a4      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005572:	2101      	movs	r1, #1
 8005574:	1d20      	adds	r0, r4, #4
 8005576:	f7ff fd9f 	bl	80050b8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800557a:	2800      	cmp	r0, #0
 800557c:	d09e      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x288>
          status = ret;
 800557e:	4606      	mov	r6, r0
 8005580:	e79c      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005582:	68d3      	ldr	r3, [r2, #12]
 8005584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005588:	60d3      	str	r3, [r2, #12]
 800558a:	e7ab      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800558c:	2101      	movs	r1, #1
 800558e:	1d20      	adds	r0, r4, #4
 8005590:	f7ff fd92 	bl	80050b8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005594:	2800      	cmp	r0, #0
 8005596:	d0a5      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        status = ret;
 8005598:	4606      	mov	r6, r0
 800559a:	e7a3      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800559c:	68d3      	ldr	r3, [r2, #12]
 800559e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a2:	60d3      	str	r3, [r2, #12]
 80055a4:	e7b2      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a6:	2101      	movs	r1, #1
 80055a8:	1d20      	adds	r0, r4, #4
 80055aa:	f7ff fd85 	bl	80050b8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d0ac      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
        status = ret;
 80055b2:	4606      	mov	r6, r0
 80055b4:	e7aa      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055b6:	2102      	movs	r1, #2
 80055b8:	1d20      	adds	r0, r4, #4
 80055ba:	f7ff fd7d 	bl	80050b8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80055be:	2800      	cmp	r0, #0
 80055c0:	d0b5      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        status = ret;
 80055c2:	4606      	mov	r6, r0
 80055c4:	e7b3      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80055c6:	bf00      	nop
 80055c8:	40021000 	.word	0x40021000

080055cc <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc: RTC handle  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80055cc:	4770      	bx	lr

080055ce <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80055ce:	b538      	push	{r3, r4, r5, lr}
 80055d0:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80055d2:	6802      	ldr	r2, [r0, #0]
 80055d4:	68d3      	ldr	r3, [r2, #12]
 80055d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055da:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80055dc:	f7fe fd12 	bl	8004004 <HAL_GetTick>
 80055e0:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80055e2:	6823      	ldr	r3, [r4, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f013 0f20 	tst.w	r3, #32
 80055ea:	d107      	bne.n	80055fc <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80055ec:	f7fe fd0a 	bl	8004004 <HAL_GetTick>
 80055f0:	1b40      	subs	r0, r0, r5
 80055f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80055f6:	d9f4      	bls.n	80055e2 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 80055f8:	2003      	movs	r0, #3
    }
  }

  return HAL_OK;
}
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80055fc:	2000      	movs	r0, #0
 80055fe:	bd38      	pop	{r3, r4, r5, pc}

08005600 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005600:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005602:	6803      	ldr	r3, [r0, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	f012 0f40 	tst.w	r2, #64	; 0x40
 800560a:	d001      	beq.n	8005610 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800560c:	2000      	movs	r0, #0
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005612:	f04f 32ff 	mov.w	r2, #4294967295
 8005616:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005618:	f7fe fcf4 	bl	8004004 <HAL_GetTick>
 800561c:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005626:	d107      	bne.n	8005638 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005628:	f7fe fcec 	bl	8004004 <HAL_GetTick>
 800562c:	1b40      	subs	r0, r0, r5
 800562e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005632:	d9f4      	bls.n	800561e <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8005634:	2003      	movs	r0, #3
}
 8005636:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8005638:	2000      	movs	r0, #0
 800563a:	bd38      	pop	{r3, r4, r5, pc}

0800563c <HAL_RTC_Init>:
{
 800563c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800563e:	2800      	cmp	r0, #0
 8005640:	d064      	beq.n	800570c <HAL_RTC_Init+0xd0>
 8005642:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005644:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005648:	2b00      	cmp	r3, #0
 800564a:	d045      	beq.n	80056d8 <HAL_RTC_Init+0x9c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800564c:	2302      	movs	r3, #2
 800564e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	22ca      	movs	r2, #202	; 0xca
 8005656:	625a      	str	r2, [r3, #36]	; 0x24
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	2253      	movs	r2, #83	; 0x53
 800565c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800565e:	4620      	mov	r0, r4
 8005660:	f7ff ffce 	bl	8005600 <RTC_EnterInitMode>
 8005664:	4605      	mov	r5, r0
 8005666:	2800      	cmp	r0, #0
 8005668:	d13b      	bne.n	80056e2 <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800566a:	6822      	ldr	r2, [r4, #0]
 800566c:	6893      	ldr	r3, [r2, #8]
 800566e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005676:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005678:	6821      	ldr	r1, [r4, #0]
 800567a:	688a      	ldr	r2, [r1, #8]
 800567c:	6863      	ldr	r3, [r4, #4]
 800567e:	6920      	ldr	r0, [r4, #16]
 8005680:	4303      	orrs	r3, r0
 8005682:	69a0      	ldr	r0, [r4, #24]
 8005684:	4303      	orrs	r3, r0
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	68e2      	ldr	r2, [r4, #12]
 800568e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005690:	6822      	ldr	r2, [r4, #0]
 8005692:	6913      	ldr	r3, [r2, #16]
 8005694:	68a1      	ldr	r1, [r4, #8]
 8005696:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800569a:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	68d3      	ldr	r3, [r2, #12]
 80056a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f013 0f20 	tst.w	r3, #32
 80056ae:	d020      	beq.n	80056f2 <HAL_RTC_Init+0xb6>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80056b0:	6822      	ldr	r2, [r4, #0]
 80056b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80056b4:	f023 0303 	bic.w	r3, r3, #3
 80056b8:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80056ba:	6821      	ldr	r1, [r4, #0]
 80056bc:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80056be:	69e2      	ldr	r2, [r4, #28]
 80056c0:	6960      	ldr	r0, [r4, #20]
 80056c2:	4302      	orrs	r2, r0
 80056c4:	4313      	orrs	r3, r2
 80056c6:	64cb      	str	r3, [r1, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	22ff      	movs	r2, #255	; 0xff
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80056d4:	4628      	mov	r0, r5
 80056d6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80056d8:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 80056dc:	f7ff ff76 	bl	80055cc <HAL_RTC_MspInit>
 80056e0:	e7b4      	b.n	800564c <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	22ff      	movs	r2, #255	; 0xff
 80056e6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056e8:	2304      	movs	r3, #4
 80056ea:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 80056ee:	2501      	movs	r5, #1
 80056f0:	e7f0      	b.n	80056d4 <HAL_RTC_Init+0x98>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056f2:	4620      	mov	r0, r4
 80056f4:	f7ff ff6b 	bl	80055ce <HAL_RTC_WaitForSynchro>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d0d9      	beq.n	80056b0 <HAL_RTC_Init+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	22ff      	movs	r2, #255	; 0xff
 8005700:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005702:	2304      	movs	r3, #4
 8005704:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return HAL_ERROR;
 8005708:	2501      	movs	r5, #1
 800570a:	e7e3      	b.n	80056d4 <HAL_RTC_Init+0x98>
     return HAL_ERROR;
 800570c:	2501      	movs	r5, #1
 800570e:	e7e1      	b.n	80056d4 <HAL_RTC_Init+0x98>

08005710 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8005710:	2300      	movs	r3, #0

  while(Value >= 10)
 8005712:	e002      	b.n	800571a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005714:	3301      	adds	r3, #1
    Value -= 10;
 8005716:	380a      	subs	r0, #10
 8005718:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 800571a:	2809      	cmp	r0, #9
 800571c:	d8fa      	bhi.n	8005714 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	b2db      	uxtb	r3, r3
}
 8005722:	4318      	orrs	r0, r3
 8005724:	4770      	bx	lr

08005726 <HAL_RTC_SetTime>:
{
 8005726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005728:	f890 3020 	ldrb.w	r3, [r0, #32]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d07f      	beq.n	8005830 <HAL_RTC_SetTime+0x10a>
 8005730:	460e      	mov	r6, r1
 8005732:	4604      	mov	r4, r0
 8005734:	2301      	movs	r3, #1
 8005736:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800573a:	2302      	movs	r3, #2
 800573c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 8005740:	2a00      	cmp	r2, #0
 8005742:	d148      	bne.n	80057d6 <HAL_RTC_SetTime+0xb0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005744:	6803      	ldr	r3, [r0, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f013 0f40 	tst.w	r3, #64	; 0x40
 800574c:	d101      	bne.n	8005752 <HAL_RTC_SetTime+0x2c>
      sTime->TimeFormat = 0x00;
 800574e:	2300      	movs	r3, #0
 8005750:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005752:	7830      	ldrb	r0, [r6, #0]
 8005754:	f7ff ffdc 	bl	8005710 <RTC_ByteToBcd2>
 8005758:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800575a:	7870      	ldrb	r0, [r6, #1]
 800575c:	f7ff ffd8 	bl	8005710 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005760:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005764:	78b0      	ldrb	r0, [r6, #2]
 8005766:	f7ff ffd3 	bl	8005710 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800576a:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16));
 800576c:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800576e:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	22ca      	movs	r2, #202	; 0xca
 8005776:	625a      	str	r2, [r3, #36]	; 0x24
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	2253      	movs	r2, #83	; 0x53
 800577c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800577e:	4620      	mov	r0, r4
 8005780:	f7ff ff3e 	bl	8005600 <RTC_EnterInitMode>
 8005784:	4607      	mov	r7, r0
 8005786:	2800      	cmp	r0, #0
 8005788:	d137      	bne.n	80057fa <HAL_RTC_SetTime+0xd4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8005790:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8005794:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8005796:	6822      	ldr	r2, [r4, #0]
 8005798:	6893      	ldr	r3, [r2, #8]
 800579a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800579e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057a0:	6821      	ldr	r1, [r4, #0]
 80057a2:	688b      	ldr	r3, [r1, #8]
 80057a4:	68f2      	ldr	r2, [r6, #12]
 80057a6:	6930      	ldr	r0, [r6, #16]
 80057a8:	4302      	orrs	r2, r0
 80057aa:	4313      	orrs	r3, r2
 80057ac:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	68d3      	ldr	r3, [r2, #12]
 80057b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f013 0f20 	tst.w	r3, #32
 80057c0:	d026      	beq.n	8005810 <HAL_RTC_SetTime+0xea>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	22ff      	movs	r2, #255	; 0xff
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 80057ce:	2300      	movs	r3, #0
 80057d0:	f884 3020 	strb.w	r3, [r4, #32]
   return HAL_OK;
 80057d4:	e02d      	b.n	8005832 <HAL_RTC_SetTime+0x10c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80057d6:	6803      	ldr	r3, [r0, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80057de:	d101      	bne.n	80057e4 <HAL_RTC_SetTime+0xbe>
      sTime->TimeFormat = 0x00;
 80057e0:	2300      	movs	r3, #0
 80057e2:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80057e4:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80057e6:	7870      	ldrb	r0, [r6, #1]
 80057e8:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80057ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 80057ee:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80057f0:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16));
 80057f2:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80057f4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80057f8:	e7bb      	b.n	8005772 <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	22ff      	movs	r2, #255	; 0xff
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005800:	2304      	movs	r3, #4
 8005802:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8005806:	2300      	movs	r3, #0
 8005808:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800580c:	2701      	movs	r7, #1
 800580e:	e010      	b.n	8005832 <HAL_RTC_SetTime+0x10c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005810:	4620      	mov	r0, r4
 8005812:	f7ff fedc 	bl	80055ce <HAL_RTC_WaitForSynchro>
 8005816:	2800      	cmp	r0, #0
 8005818:	d0d3      	beq.n	80057c2 <HAL_RTC_SetTime+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	22ff      	movs	r2, #255	; 0xff
 800581e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005820:	2304      	movs	r3, #4
 8005822:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8005826:	2300      	movs	r3, #0
 8005828:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800582c:	2701      	movs	r7, #1
 800582e:	e000      	b.n	8005832 <HAL_RTC_SetTime+0x10c>
  __HAL_LOCK(hrtc);
 8005830:	2702      	movs	r7, #2
}
 8005832:	4638      	mov	r0, r7
 8005834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005836 <HAL_RTC_SetDate>:
{
 8005836:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8005838:	f890 3020 	ldrb.w	r3, [r0, #32]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d06d      	beq.n	800591c <HAL_RTC_SetDate+0xe6>
 8005840:	2301      	movs	r3, #1
 8005842:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005846:	2302      	movs	r3, #2
 8005848:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800584c:	b93a      	cbnz	r2, 800585e <HAL_RTC_SetDate+0x28>
 800584e:	784b      	ldrb	r3, [r1, #1]
 8005850:	f013 0f10 	tst.w	r3, #16
 8005854:	d003      	beq.n	800585e <HAL_RTC_SetDate+0x28>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005856:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800585a:	330a      	adds	r3, #10
 800585c:	704b      	strb	r3, [r1, #1]
 800585e:	460e      	mov	r6, r1
 8005860:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8005862:	2a00      	cmp	r2, #0
 8005864:	d134      	bne.n	80058d0 <HAL_RTC_SetDate+0x9a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005866:	78c8      	ldrb	r0, [r1, #3]
 8005868:	f7ff ff52 	bl	8005710 <RTC_ByteToBcd2>
 800586c:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800586e:	7870      	ldrb	r0, [r6, #1]
 8005870:	f7ff ff4e 	bl	8005710 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005874:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005878:	78b0      	ldrb	r0, [r6, #2]
 800587a:	f7ff ff49 	bl	8005710 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800587e:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13));
 8005880:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005882:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	22ca      	movs	r2, #202	; 0xca
 800588a:	625a      	str	r2, [r3, #36]	; 0x24
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	2253      	movs	r2, #83	; 0x53
 8005890:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005892:	4620      	mov	r0, r4
 8005894:	f7ff feb4 	bl	8005600 <RTC_EnterInitMode>
 8005898:	4606      	mov	r6, r0
 800589a:	bb20      	cbnz	r0, 80058e6 <HAL_RTC_SetDate+0xb0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80058a2:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80058a6:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	68d3      	ldr	r3, [r2, #12]
 80058ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058b0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f013 0f20 	tst.w	r3, #32
 80058ba:	d01f      	beq.n	80058fc <HAL_RTC_SetDate+0xc6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	22ff      	movs	r2, #255	; 0xff
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80058c2:	2301      	movs	r3, #1
 80058c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80058c8:	2300      	movs	r3, #0
 80058ca:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 80058ce:	e026      	b.n	800591e <HAL_RTC_SetDate+0xe8>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 80058d0:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 80058d2:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80058d4:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 80058d6:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80058d8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 80058dc:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13));
 80058de:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80058e0:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80058e4:	e7cf      	b.n	8005886 <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	22ff      	movs	r2, #255	; 0xff
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058ec:	2304      	movs	r3, #4
 80058ee:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 80058f2:	2300      	movs	r3, #0
 80058f4:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80058f8:	2601      	movs	r6, #1
 80058fa:	e010      	b.n	800591e <HAL_RTC_SetDate+0xe8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7ff fe66 	bl	80055ce <HAL_RTC_WaitForSynchro>
 8005902:	2800      	cmp	r0, #0
 8005904:	d0da      	beq.n	80058bc <HAL_RTC_SetDate+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	22ff      	movs	r2, #255	; 0xff
 800590a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800590c:	2304      	movs	r3, #4
 800590e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8005912:	2300      	movs	r3, #0
 8005914:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8005918:	2601      	movs	r6, #1
 800591a:	e000      	b.n	800591e <HAL_RTC_SetDate+0xe8>
 __HAL_LOCK(hrtc);
 800591c:	2602      	movs	r6, #2
}
 800591e:	4630      	mov	r0, r6
 8005920:	bd70      	pop	{r4, r5, r6, pc}

08005922 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005924:	4605      	mov	r5, r0
 8005926:	460f      	mov	r7, r1
 8005928:	4616      	mov	r6, r2
 800592a:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800592c:	e039      	b.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0x80>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800592e:	b12c      	cbz	r4, 800593c <SPI_WaitFlagStateUntilTimeout+0x1a>
 8005930:	f7fe fb68 	bl	8004004 <HAL_GetTick>
 8005934:	9b06      	ldr	r3, [sp, #24]
 8005936:	1ac0      	subs	r0, r0, r3
 8005938:	4284      	cmp	r4, r0
 800593a:	d832      	bhi.n	80059a2 <SPI_WaitFlagStateUntilTimeout+0x80>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800593c:	682a      	ldr	r2, [r5, #0]
 800593e:	6853      	ldr	r3, [r2, #4]
 8005940:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005944:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005946:	686b      	ldr	r3, [r5, #4]
 8005948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594c:	d00b      	beq.n	8005966 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800594e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005954:	d014      	beq.n	8005980 <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005956:	2301      	movs	r3, #1
 8005958:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800595c:	2300      	movs	r3, #0
 800595e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005962:	2003      	movs	r0, #3
 8005964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005966:	68ab      	ldr	r3, [r5, #8]
 8005968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596c:	d002      	beq.n	8005974 <SPI_WaitFlagStateUntilTimeout+0x52>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800596e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005972:	d1ec      	bne.n	800594e <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8005974:	682a      	ldr	r2, [r5, #0]
 8005976:	6813      	ldr	r3, [r2, #0]
 8005978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e7e6      	b.n	800594e <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 8005980:	682a      	ldr	r2, [r5, #0]
 8005982:	6813      	ldr	r3, [r2, #0]
 8005984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	682a      	ldr	r2, [r5, #0]
 800598c:	6813      	ldr	r3, [r2, #0]
 800598e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e7df      	b.n	8005956 <SPI_WaitFlagStateUntilTimeout+0x34>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005996:	2301      	movs	r3, #1
 8005998:	42b3      	cmp	r3, r6
 800599a:	d009      	beq.n	80059b0 <SPI_WaitFlagStateUntilTimeout+0x8e>
    if (Timeout != HAL_MAX_DELAY)
 800599c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80059a0:	d1c5      	bne.n	800592e <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059a2:	682b      	ldr	r3, [r5, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	ea37 0303 	bics.w	r3, r7, r3
 80059aa:	d0f4      	beq.n	8005996 <SPI_WaitFlagStateUntilTimeout+0x74>
 80059ac:	2300      	movs	r3, #0
 80059ae:	e7f3      	b.n	8005998 <SPI_WaitFlagStateUntilTimeout+0x76>
      }
    }
  }

  return HAL_OK;
 80059b0:	2000      	movs	r0, #0
}
 80059b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059b6:	b083      	sub	sp, #12
 80059b8:	4607      	mov	r7, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	4615      	mov	r5, r2
 80059be:	461e      	mov	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80059c0:	e002      	b.n	80059c8 <SPI_WaitFifoStateUntilTimeout+0x14>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 80059c2:	f1b6 3fff 	cmp.w	r6, #4294967295
 80059c6:	d110      	bne.n	80059ea <SPI_WaitFifoStateUntilTimeout+0x36>
  while ((hspi->Instance->SR & Fifo) != State)
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	6893      	ldr	r3, [r2, #8]
 80059cc:	4023      	ands	r3, r4
 80059ce:	42ab      	cmp	r3, r5
 80059d0:	d03f      	beq.n	8005a52 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80059d2:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80059d6:	d1f4      	bne.n	80059c2 <SPI_WaitFifoStateUntilTimeout+0xe>
 80059d8:	2d00      	cmp	r5, #0
 80059da:	d1f2      	bne.n	80059c2 <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80059dc:	7b13      	ldrb	r3, [r2, #12]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 80059e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80059e8:	e7eb      	b.n	80059c2 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80059ea:	b12e      	cbz	r6, 80059f8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80059ec:	f7fe fb0a 	bl	8004004 <HAL_GetTick>
 80059f0:	9b08      	ldr	r3, [sp, #32]
 80059f2:	1ac0      	subs	r0, r0, r3
 80059f4:	4286      	cmp	r6, r0
 80059f6:	d8e7      	bhi.n	80059c8 <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	6853      	ldr	r3, [r2, #4]
 80059fc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005a00:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a08:	d00b      	beq.n	8005a22 <SPI_WaitFifoStateUntilTimeout+0x6e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a10:	d014      	beq.n	8005a3c <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a18:	2300      	movs	r3, #0
 8005a1a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a1e:	2003      	movs	r0, #3
 8005a20:	e018      	b.n	8005a54 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a28:	d002      	beq.n	8005a30 <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2e:	d1ec      	bne.n	8005a0a <SPI_WaitFifoStateUntilTimeout+0x56>
          __HAL_SPI_DISABLE(hspi);
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	6813      	ldr	r3, [r2, #0]
 8005a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	e7e6      	b.n	8005a0a <SPI_WaitFifoStateUntilTimeout+0x56>
          SPI_RESET_CRC(hspi);
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	6813      	ldr	r3, [r2, #0]
 8005a4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	e7df      	b.n	8005a12 <SPI_WaitFifoStateUntilTimeout+0x5e>
      }
    }
  }

  return HAL_OK;
 8005a52:	2000      	movs	r0, #0
}
 8005a54:	b003      	add	sp, #12
 8005a56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	460d      	mov	r5, r1
 8005a60:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a62:	9200      	str	r2, [sp, #0]
 8005a64:	460b      	mov	r3, r1
 8005a66:	2200      	movs	r2, #0
 8005a68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a6c:	f7ff ffa2 	bl	80059b4 <SPI_WaitFifoStateUntilTimeout>
 8005a70:	b138      	cbz	r0, 8005a82 <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a72:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a74:	f043 0320 	orr.w	r3, r3, #32
 8005a78:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	b002      	add	sp, #8
 8005a80:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a82:	9600      	str	r6, [sp, #0]
 8005a84:	462b      	mov	r3, r5
 8005a86:	2200      	movs	r2, #0
 8005a88:	2180      	movs	r1, #128	; 0x80
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f7ff ff49 	bl	8005922 <SPI_WaitFlagStateUntilTimeout>
 8005a90:	b128      	cbz	r0, 8005a9e <SPI_EndRxTxTransaction+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a92:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a94:	f043 0320 	orr.w	r3, r3, #32
 8005a98:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e7ee      	b.n	8005a7c <SPI_EndRxTxTransaction+0x24>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a9e:	9600      	str	r6, [sp, #0]
 8005aa0:	462b      	mov	r3, r5
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f7ff ff83 	bl	80059b4 <SPI_WaitFifoStateUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d0e3      	beq.n	8005a7c <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ab6:	f043 0320 	orr.w	r3, r3, #32
 8005aba:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e7dd      	b.n	8005a7c <SPI_EndRxTxTransaction+0x24>

08005ac0 <SPI_EndRxTransaction>:
{
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	460d      	mov	r5, r1
 8005ac8:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aca:	6843      	ldr	r3, [r0, #4]
 8005acc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ad0:	d010      	beq.n	8005af4 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad2:	9600      	str	r6, [sp, #0]
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2180      	movs	r1, #128	; 0x80
 8005ada:	4620      	mov	r0, r4
 8005adc:	f7ff ff21 	bl	8005922 <SPI_WaitFlagStateUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	b1a0      	cbz	r0, 8005b0e <SPI_EndRxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ae4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005ae6:	f043 0320 	orr.w	r3, r3, #32
 8005aea:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	b002      	add	sp, #8
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af4:	6883      	ldr	r3, [r0, #8]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afa:	d002      	beq.n	8005b02 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b00:	d1e7      	bne.n	8005ad2 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	6813      	ldr	r3, [r2, #0]
 8005b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	e7e1      	b.n	8005ad2 <SPI_EndRxTransaction+0x12>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b0e:	6862      	ldr	r2, [r4, #4]
 8005b10:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005b14:	d1eb      	bne.n	8005aee <SPI_EndRxTransaction+0x2e>
 8005b16:	68a2      	ldr	r2, [r4, #8]
 8005b18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005b1c:	d002      	beq.n	8005b24 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b1e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005b22:	d1e4      	bne.n	8005aee <SPI_EndRxTransaction+0x2e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b24:	9600      	str	r6, [sp, #0]
 8005b26:	462b      	mov	r3, r5
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7ff ff40 	bl	80059b4 <SPI_WaitFifoStateUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2800      	cmp	r0, #0
 8005b38:	d0d9      	beq.n	8005aee <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005b3c:	f043 0320 	orr.w	r3, r3, #32
 8005b40:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e7d3      	b.n	8005aee <SPI_EndRxTransaction+0x2e>
	...

08005b48 <HAL_SPI_Transmit_IT>:
{
 8005b48:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8005b4a:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8005b4e:	2801      	cmp	r0, #1
 8005b50:	d047      	beq.n	8005be2 <HAL_SPI_Transmit_IT+0x9a>
 8005b52:	2001      	movs	r0, #1
 8005b54:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	d039      	beq.n	8005bd0 <HAL_SPI_Transmit_IT+0x88>
 8005b5c:	2a00      	cmp	r2, #0
 8005b5e:	d039      	beq.n	8005bd4 <HAL_SPI_Transmit_IT+0x8c>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005b60:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8005b64:	b2c0      	uxtb	r0, r0
 8005b66:	2801      	cmp	r0, #1
 8005b68:	d001      	beq.n	8005b6e <HAL_SPI_Transmit_IT+0x26>
    errorcode = HAL_BUSY;
 8005b6a:	2002      	movs	r0, #2
 8005b6c:	e033      	b.n	8005bd6 <HAL_SPI_Transmit_IT+0x8e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b6e:	2003      	movs	r0, #3
 8005b70:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b74:	2000      	movs	r0, #0
 8005b76:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b78:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b7e:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b80:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005b84:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8005b88:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8005b90:	d915      	bls.n	8005bbe <HAL_SPI_Transmit_IT+0x76>
    hspi->TxISR = SPI_TxISR_16BIT;
 8005b92:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <HAL_SPI_Transmit_IT+0xa0>)
 8005b94:	651a      	str	r2, [r3, #80]	; 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005b9c:	d012      	beq.n	8005bc4 <HAL_SPI_Transmit_IT+0x7c>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	684a      	ldr	r2, [r1, #4]
 8005ba2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005ba6:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	6811      	ldr	r1, [r2, #0]
 8005bac:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005bb0:	d115      	bne.n	8005bde <HAL_SPI_Transmit_IT+0x96>
    __HAL_SPI_ENABLE(hspi);
 8005bb2:	6811      	ldr	r1, [r2, #0]
 8005bb4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005bb8:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e00b      	b.n	8005bd6 <HAL_SPI_Transmit_IT+0x8e>
    hspi->TxISR = SPI_TxISR_8BIT;
 8005bbe:	4a0b      	ldr	r2, [pc, #44]	; (8005bec <HAL_SPI_Transmit_IT+0xa4>)
 8005bc0:	651a      	str	r2, [r3, #80]	; 0x50
 8005bc2:	e7e8      	b.n	8005b96 <HAL_SPI_Transmit_IT+0x4e>
    SPI_1LINE_TX(hspi);
 8005bc4:	6819      	ldr	r1, [r3, #0]
 8005bc6:	680a      	ldr	r2, [r1, #0]
 8005bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bcc:	600a      	str	r2, [r1, #0]
 8005bce:	e7e6      	b.n	8005b9e <HAL_SPI_Transmit_IT+0x56>
    errorcode = HAL_ERROR;
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	e000      	b.n	8005bd6 <HAL_SPI_Transmit_IT+0x8e>
 8005bd4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bdc:	4770      	bx	lr
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bde:	2000      	movs	r0, #0
 8005be0:	e7f9      	b.n	8005bd6 <HAL_SPI_Transmit_IT+0x8e>
  __HAL_LOCK(hspi);
 8005be2:	2002      	movs	r0, #2
}
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	08005e45 	.word	0x08005e45
 8005bec:	08005e1f 	.word	0x08005e1f

08005bf0 <HAL_SPI_TransmitReceive_IT>:
{
 8005bf0:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 8005bf2:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8005bf6:	2c01      	cmp	r4, #1
 8005bf8:	d06c      	beq.n	8005cd4 <HAL_SPI_TransmitReceive_IT+0xe4>
 8005bfa:	2401      	movs	r4, #1
 8005bfc:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp  = hspi->State;
 8005c00:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8005c04:	b2e4      	uxtb	r4, r4
  tmp1 = hspi->Init.Mode;
 8005c06:	6845      	ldr	r5, [r0, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8005c08:	2c01      	cmp	r4, #1
 8005c0a:	d010      	beq.n	8005c2e <HAL_SPI_TransmitReceive_IT+0x3e>
 8005c0c:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8005c10:	d006      	beq.n	8005c20 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 8005c12:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 8005c14:	2200      	movs	r2, #0
 8005c16:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	bc30      	pop	{r4, r5}
 8005c1e:	4770      	bx	lr
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8005c20:	6885      	ldr	r5, [r0, #8]
 8005c22:	2d00      	cmp	r5, #0
 8005c24:	d14c      	bne.n	8005cc0 <HAL_SPI_TransmitReceive_IT+0xd0>
 8005c26:	2c04      	cmp	r4, #4
 8005c28:	d001      	beq.n	8005c2e <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e7f2      	b.n	8005c14 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c2e:	2900      	cmp	r1, #0
 8005c30:	d048      	beq.n	8005cc4 <HAL_SPI_TransmitReceive_IT+0xd4>
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d048      	beq.n	8005cc8 <HAL_SPI_TransmitReceive_IT+0xd8>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d048      	beq.n	8005ccc <HAL_SPI_TransmitReceive_IT+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c3a:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8005c3e:	b2e4      	uxtb	r4, r4
 8005c40:	2c04      	cmp	r4, #4
 8005c42:	d002      	beq.n	8005c4a <HAL_SPI_TransmitReceive_IT+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c44:	2405      	movs	r4, #5
 8005c46:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c4a:	2400      	movs	r4, #0
 8005c4c:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c4e:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c50:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c52:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c54:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c56:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005c5a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c5e:	68c3      	ldr	r3, [r0, #12]
 8005c60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c64:	d921      	bls.n	8005caa <HAL_SPI_TransmitReceive_IT+0xba>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005c66:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <HAL_SPI_TransmitReceive_IT+0xe8>)
 8005c68:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005c6a:	4b1c      	ldr	r3, [pc, #112]	; (8005cdc <HAL_SPI_TransmitReceive_IT+0xec>)
 8005c6c:	6503      	str	r3, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 8005c6e:	68c3      	ldr	r3, [r0, #12]
 8005c70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c74:	d804      	bhi.n	8005c80 <HAL_SPI_TransmitReceive_IT+0x90>
 8005c76:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d919      	bls.n	8005cb4 <HAL_SPI_TransmitReceive_IT+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c80:	6802      	ldr	r2, [r0, #0]
 8005c82:	6853      	ldr	r3, [r2, #4]
 8005c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c88:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c8a:	6802      	ldr	r2, [r0, #0]
 8005c8c:	6853      	ldr	r3, [r2, #4]
 8005c8e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8005c92:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c94:	6803      	ldr	r3, [r0, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005c9c:	d118      	bne.n	8005cd0 <HAL_SPI_TransmitReceive_IT+0xe0>
    __HAL_SPI_ENABLE(hspi);
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ca4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e7b4      	b.n	8005c14 <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005caa:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <HAL_SPI_TransmitReceive_IT+0xf0>)
 8005cac:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005cae:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <HAL_SPI_TransmitReceive_IT+0xf4>)
 8005cb0:	6503      	str	r3, [r0, #80]	; 0x50
 8005cb2:	e7dc      	b.n	8005c6e <HAL_SPI_TransmitReceive_IT+0x7e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cb4:	6802      	ldr	r2, [r0, #0]
 8005cb6:	6853      	ldr	r3, [r2, #4]
 8005cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cbc:	6053      	str	r3, [r2, #4]
 8005cbe:	e7e4      	b.n	8005c8a <HAL_SPI_TransmitReceive_IT+0x9a>
    errorcode = HAL_BUSY;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e7a7      	b.n	8005c14 <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e7a5      	b.n	8005c14 <HAL_SPI_TransmitReceive_IT+0x24>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e7a3      	b.n	8005c14 <HAL_SPI_TransmitReceive_IT+0x24>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e7a1      	b.n	8005c14 <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e79f      	b.n	8005c14 <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e7a0      	b.n	8005c1a <HAL_SPI_TransmitReceive_IT+0x2a>
 8005cd8:	08006073 	.word	0x08006073
 8005cdc:	08006039 	.word	0x08006039
 8005ce0:	08005fbf 	.word	0x08005fbf
 8005ce4:	08005f65 	.word	0x08005f65

08005ce8 <HAL_SPI_Receive_IT>:
{
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005cec:	6880      	ldr	r0, [r0, #8]
 8005cee:	b918      	cbnz	r0, 8005cf8 <HAL_SPI_Receive_IT+0x10>
 8005cf0:	6863      	ldr	r3, [r4, #4]
 8005cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf6:	d010      	beq.n	8005d1a <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 8005cf8:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8005cfc:	2801      	cmp	r0, #1
 8005cfe:	d05a      	beq.n	8005db6 <HAL_SPI_Receive_IT+0xce>
 8005d00:	2301      	movs	r3, #1
 8005d02:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8005d06:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005d0a:	b2c0      	uxtb	r0, r0
 8005d0c:	4298      	cmp	r0, r3
 8005d0e:	d00d      	beq.n	8005d2c <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 8005d10:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005d12:	2300      	movs	r3, #0
 8005d14:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8005d18:	bd10      	pop	{r4, pc}
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d1e:	2204      	movs	r2, #4
 8005d20:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8005d24:	460a      	mov	r2, r1
 8005d26:	f7ff ff63 	bl	8005bf0 <HAL_SPI_TransmitReceive_IT>
 8005d2a:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 8005d2c:	2900      	cmp	r1, #0
 8005d2e:	d03c      	beq.n	8005daa <HAL_SPI_Receive_IT+0xc2>
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	d03c      	beq.n	8005dae <HAL_SPI_Receive_IT+0xc6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d34:	2304      	movs	r3, #4
 8005d36:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d3e:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005d40:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005d44:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d48:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005d4a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005d4c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d4e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d50:	68e3      	ldr	r3, [r4, #12]
 8005d52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d56:	d91a      	bls.n	8005d8e <HAL_SPI_Receive_IT+0xa6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	6853      	ldr	r3, [r2, #4]
 8005d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d60:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005d62:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <HAL_SPI_Receive_IT+0xd4>)
 8005d64:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d66:	68a3      	ldr	r3, [r4, #8]
 8005d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6c:	d017      	beq.n	8005d9e <HAL_SPI_Receive_IT+0xb6>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	6853      	ldr	r3, [r2, #4]
 8005d72:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d76:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005d80:	d117      	bne.n	8005db2 <HAL_SPI_Receive_IT+0xca>
    __HAL_SPI_ENABLE(hspi);
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d88:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	e7c1      	b.n	8005d12 <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	6853      	ldr	r3, [r2, #4]
 8005d92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d96:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005d98:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <HAL_SPI_Receive_IT+0xd8>)
 8005d9a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005d9c:	e7e3      	b.n	8005d66 <HAL_SPI_Receive_IT+0x7e>
    SPI_1LINE_RX(hspi);
 8005d9e:	6822      	ldr	r2, [r4, #0]
 8005da0:	6813      	ldr	r3, [r2, #0]
 8005da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e7e1      	b.n	8005d6e <HAL_SPI_Receive_IT+0x86>
    errorcode = HAL_ERROR;
 8005daa:	2001      	movs	r0, #1
 8005dac:	e7b1      	b.n	8005d12 <HAL_SPI_Receive_IT+0x2a>
 8005dae:	2001      	movs	r0, #1
 8005db0:	e7af      	b.n	8005d12 <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005db2:	2000      	movs	r0, #0
 8005db4:	e7ad      	b.n	8005d12 <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 8005db6:	2002      	movs	r0, #2
}
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	bf00      	nop
 8005dbc:	08005ed9 	.word	0x08005ed9
 8005dc0:	08005ead 	.word	0x08005ead

08005dc4 <HAL_SPI_RxCpltCallback>:
{
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_SPI_TxRxCpltCallback>:
{
 8005dc6:	4770      	bx	lr

08005dc8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dce:	f7fe f919 	bl	8004004 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	6853      	ldr	r3, [r2, #4]
 8005dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dda:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ddc:	4602      	mov	r2, r0
 8005dde:	2164      	movs	r1, #100	; 0x64
 8005de0:	4620      	mov	r0, r4
 8005de2:	f7ff fe39 	bl	8005a58 <SPI_EndRxTxTransaction>
 8005de6:	b118      	cbz	r0, 8005df0 <SPI_CloseTx_ISR+0x28>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005dea:	f043 0320 	orr.w	r3, r3, #32
 8005dee:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005df0:	68a3      	ldr	r3, [r4, #8]
 8005df2:	b933      	cbnz	r3, 8005e02 <SPI_CloseTx_ISR+0x3a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	9201      	str	r2, [sp, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e08:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005e0a:	b923      	cbnz	r3, 8005e16 <SPI_CloseTx_ISR+0x4e>
  {
    /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f7fd fd59 	bl	80038c4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005e12:	b002      	add	sp, #8
 8005e14:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7fd fd58 	bl	80038cc <HAL_SPI_ErrorCallback>
 8005e1c:	e7f9      	b.n	8005e12 <SPI_CloseTx_ISR+0x4a>

08005e1e <SPI_TxISR_8BIT>:
{
 8005e1e:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005e20:	6802      	ldr	r2, [r0, #0]
 8005e22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005e24:	1c59      	adds	r1, r3, #1
 8005e26:	6381      	str	r1, [r0, #56]	; 0x38
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	7313      	strb	r3, [r2, #12]
  hspi->TxXferCount--;
 8005e2c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8005e36:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	b103      	cbz	r3, 8005e3e <SPI_TxISR_8BIT+0x20>
 8005e3c:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 8005e3e:	f7ff ffc3 	bl	8005dc8 <SPI_CloseTx_ISR>
}
 8005e42:	e7fb      	b.n	8005e3c <SPI_TxISR_8BIT+0x1e>

08005e44 <SPI_TxISR_16BIT>:
{
 8005e44:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e46:	6803      	ldr	r3, [r0, #0]
 8005e48:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005e4a:	8812      	ldrh	r2, [r2, #0]
 8005e4c:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005e50:	3302      	adds	r3, #2
 8005e52:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8005e54:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8005e5e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	b103      	cbz	r3, 8005e66 <SPI_TxISR_16BIT+0x22>
 8005e64:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 8005e66:	f7ff ffaf 	bl	8005dc8 <SPI_CloseTx_ISR>
}
 8005e6a:	e7fb      	b.n	8005e64 <SPI_TxISR_16BIT+0x20>

08005e6c <SPI_CloseRx_ISR>:
{
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005e70:	6802      	ldr	r2, [r0, #0]
 8005e72:	6853      	ldr	r3, [r2, #4]
 8005e74:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005e78:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005e7a:	f7fe f8c3 	bl	8004004 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	2164      	movs	r1, #100	; 0x64
 8005e82:	4620      	mov	r0, r4
 8005e84:	f7ff fe1c 	bl	8005ac0 <SPI_EndRxTransaction>
 8005e88:	b118      	cbz	r0, 8005e92 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005e8c:	f043 0320 	orr.w	r3, r3, #32
 8005e90:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005e98:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005e9a:	b11b      	cbz	r3, 8005ea4 <SPI_CloseRx_ISR+0x38>
      HAL_SPI_ErrorCallback(hspi);
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7fd fd15 	bl	80038cc <HAL_SPI_ErrorCallback>
 8005ea2:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f7ff ff8d 	bl	8005dc4 <HAL_SPI_RxCpltCallback>
 8005eaa:	bd10      	pop	{r4, pc}

08005eac <SPI_RxISR_8BIT>:
{
 8005eac:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005eae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	6402      	str	r2, [r0, #64]	; 0x40
 8005eb4:	6802      	ldr	r2, [r0, #0]
 8005eb6:	7b12      	ldrb	r2, [r2, #12]
 8005eb8:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 8005eba:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8005ec8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	b103      	cbz	r3, 8005ed2 <SPI_RxISR_8BIT+0x26>
 8005ed0:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8005ed2:	f7ff ffcb 	bl	8005e6c <SPI_CloseRx_ISR>
}
 8005ed6:	e7fb      	b.n	8005ed0 <SPI_RxISR_8BIT+0x24>

08005ed8 <SPI_RxISR_16BIT>:
{
 8005ed8:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005eda:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005edc:	6802      	ldr	r2, [r0, #0]
 8005ede:	68d2      	ldr	r2, [r2, #12]
 8005ee0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ee2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8005ee8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8005ef6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	b103      	cbz	r3, 8005f00 <SPI_RxISR_16BIT+0x28>
 8005efe:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8005f00:	f7ff ffb4 	bl	8005e6c <SPI_CloseRx_ISR>
}
 8005f04:	e7fb      	b.n	8005efe <SPI_RxISR_16BIT+0x26>

08005f06 <SPI_CloseRxTx_ISR>:
{
 8005f06:	b510      	push	{r4, lr}
 8005f08:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8005f0a:	f7fe f87b 	bl	8004004 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	6853      	ldr	r3, [r2, #4]
 8005f12:	f023 0320 	bic.w	r3, r3, #32
 8005f16:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005f18:	4602      	mov	r2, r0
 8005f1a:	2164      	movs	r1, #100	; 0x64
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f7ff fd9b 	bl	8005a58 <SPI_EndRxTxTransaction>
 8005f22:	b118      	cbz	r0, 8005f2c <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f24:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f26:	f043 0320 	orr.w	r3, r3, #32
 8005f2a:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005f2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f2e:	b993      	cbnz	r3, 8005f56 <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005f30:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d006      	beq.n	8005f48 <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7ff ff40 	bl	8005dc6 <HAL_SPI_TxRxCpltCallback>
 8005f46:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f7ff ff38 	bl	8005dc4 <HAL_SPI_RxCpltCallback>
 8005f54:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f7fd fcb5 	bl	80038cc <HAL_SPI_ErrorCallback>
 8005f62:	bd10      	pop	{r4, pc}

08005f64 <SPI_2linesTxISR_8BIT>:
{
 8005f64:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 8005f66:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d918      	bls.n	8005fa0 <SPI_2linesTxISR_8BIT+0x3c>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f6e:	6803      	ldr	r3, [r0, #0]
 8005f70:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005f72:	8812      	ldrh	r2, [r2, #0]
 8005f74:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f76:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005f78:	3302      	adds	r3, #2
 8005f7a:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005f7c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b02      	subs	r3, #2
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8005f86:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	b943      	cbnz	r3, 8005f9e <SPI_2linesTxISR_8BIT+0x3a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005f8c:	6802      	ldr	r2, [r0, #0]
 8005f8e:	6853      	ldr	r3, [r2, #4]
 8005f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f94:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8005f96:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	b163      	cbz	r3, 8005fb8 <SPI_2linesTxISR_8BIT+0x54>
 8005f9e:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005fa0:	6802      	ldr	r2, [r0, #0]
 8005fa2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005fa4:	1c59      	adds	r1, r3, #1
 8005fa6:	6381      	str	r1, [r0, #56]	; 0x38
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	7313      	strb	r3, [r2, #12]
    hspi->TxXferCount--;
 8005fac:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8005fb6:	e7e6      	b.n	8005f86 <SPI_2linesTxISR_8BIT+0x22>
      SPI_CloseRxTx_ISR(hspi);
 8005fb8:	f7ff ffa5 	bl	8005f06 <SPI_CloseRxTx_ISR>
}
 8005fbc:	e7ef      	b.n	8005f9e <SPI_2linesTxISR_8BIT+0x3a>

08005fbe <SPI_2linesRxISR_8BIT>:
{
 8005fbe:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 8005fc0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d925      	bls.n	8006016 <SPI_2linesRxISR_8BIT+0x58>
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005fcc:	6802      	ldr	r2, [r0, #0]
 8005fce:	68d2      	ldr	r2, [r2, #12]
 8005fd0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fd2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005fd8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b02      	subs	r3, #2
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005fe6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d00c      	beq.n	800600a <SPI_2linesRxISR_8BIT+0x4c>
  if (hspi->RxXferCount == 0U)
 8005ff0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	b93b      	cbnz	r3, 8006008 <SPI_2linesRxISR_8BIT+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005ff8:	6802      	ldr	r2, [r0, #0]
 8005ffa:	6853      	ldr	r3, [r2, #4]
 8005ffc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006000:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8006002:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006004:	b29b      	uxth	r3, r3
 8006006:	b1a3      	cbz	r3, 8006032 <SPI_2linesRxISR_8BIT+0x74>
 8006008:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800600a:	6802      	ldr	r2, [r0, #0]
 800600c:	6853      	ldr	r3, [r2, #4]
 800600e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006012:	6053      	str	r3, [r2, #4]
 8006014:	e7ec      	b.n	8005ff0 <SPI_2linesRxISR_8BIT+0x32>
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 8006016:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	6402      	str	r2, [r0, #64]	; 0x40
 800601c:	6802      	ldr	r2, [r0, #0]
 800601e:	7b12      	ldrb	r2, [r2, #12]
 8006020:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8006022:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29b      	uxth	r3, r3
 800602c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8006030:	e7de      	b.n	8005ff0 <SPI_2linesRxISR_8BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 8006032:	f7ff ff68 	bl	8005f06 <SPI_CloseRxTx_ISR>
}
 8006036:	e7e7      	b.n	8006008 <SPI_2linesRxISR_8BIT+0x4a>

08006038 <SPI_2linesTxISR_16BIT>:
{
 8006038:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800603a:	6803      	ldr	r3, [r0, #0]
 800603c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006042:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006044:	3302      	adds	r3, #2
 8006046:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8006048:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800604a:	b29b      	uxth	r3, r3
 800604c:	3b01      	subs	r3, #1
 800604e:	b29b      	uxth	r3, r3
 8006050:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8006052:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8006054:	b29b      	uxth	r3, r3
 8006056:	b943      	cbnz	r3, 800606a <SPI_2linesTxISR_16BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006058:	6802      	ldr	r2, [r0, #0]
 800605a:	6853      	ldr	r3, [r2, #4]
 800605c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006060:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8006062:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006066:	b29b      	uxth	r3, r3
 8006068:	b103      	cbz	r3, 800606c <SPI_2linesTxISR_16BIT+0x34>
 800606a:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800606c:	f7ff ff4b 	bl	8005f06 <SPI_CloseRxTx_ISR>
}
 8006070:	e7fb      	b.n	800606a <SPI_2linesTxISR_16BIT+0x32>

08006072 <SPI_2linesRxISR_16BIT>:
{
 8006072:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006074:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006076:	6802      	ldr	r2, [r0, #0]
 8006078:	68d2      	ldr	r2, [r2, #12]
 800607a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800607c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800607e:	3302      	adds	r3, #2
 8006080:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8006082:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29b      	uxth	r3, r3
 800608c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8006090:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006094:	b29b      	uxth	r3, r3
 8006096:	b93b      	cbnz	r3, 80060a8 <SPI_2linesRxISR_16BIT+0x36>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006098:	6802      	ldr	r2, [r0, #0]
 800609a:	6853      	ldr	r3, [r2, #4]
 800609c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a0:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 80060a2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	b103      	cbz	r3, 80060aa <SPI_2linesRxISR_16BIT+0x38>
 80060a8:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 80060aa:	f7ff ff2c 	bl	8005f06 <SPI_CloseRxTx_ISR>
}
 80060ae:	e7fb      	b.n	80060a8 <SPI_2linesRxISR_16BIT+0x36>

080060b0 <HAL_SPI_GetState>:
  return hspi->State;
 80060b0:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80060b4:	4770      	bx	lr

080060b6 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060b6:	6802      	ldr	r2, [r0, #0]
 80060b8:	6813      	ldr	r3, [r2, #0]
 80060ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060be:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c0:	6802      	ldr	r2, [r0, #0]
 80060c2:	6893      	ldr	r3, [r2, #8]
 80060c4:	f023 0301 	bic.w	r3, r3, #1
 80060c8:	6093      	str	r3, [r2, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ca:	2320      	movs	r3, #32
 80060cc:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	6603      	str	r3, [r0, #96]	; 0x60
 80060d4:	4770      	bx	lr

080060d6 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060d6:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b21      	cmp	r3, #33	; 0x21
 80060de:	d000      	beq.n	80060e2 <UART_TxISR_8BIT+0xc>
 80060e0:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 80060e2:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	b16b      	cbz	r3, 8006106 <UART_TxISR_8BIT+0x30>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80060ea:	6802      	ldr	r2, [r0, #0]
 80060ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80060ee:	1c59      	adds	r1, r3, #1
 80060f0:	64c1      	str	r1, [r0, #76]	; 0x4c
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80060f6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8006104:	e7ec      	b.n	80060e0 <UART_TxISR_8BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006106:	6802      	ldr	r2, [r0, #0]
 8006108:	6813      	ldr	r3, [r2, #0]
 800610a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800610e:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006110:	6802      	ldr	r2, [r0, #0]
 8006112:	6813      	ldr	r3, [r2, #0]
 8006114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4770      	bx	lr

0800611c <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800611c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b21      	cmp	r3, #33	; 0x21
 8006124:	d000      	beq.n	8006128 <UART_TxISR_16BIT+0xc>
 8006126:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 8006128:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800612c:	b29b      	uxth	r3, r3
 800612e:	b183      	cbz	r3, 8006152 <UART_TxISR_16BIT+0x36>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006130:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8006132:	6802      	ldr	r2, [r0, #0]
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2;
 800613c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800613e:	3302      	adds	r3, #2
 8006140:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8006142:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29b      	uxth	r3, r3
 800614c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8006150:	e7e9      	b.n	8006126 <UART_TxISR_16BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006152:	6802      	ldr	r2, [r0, #0]
 8006154:	6813      	ldr	r3, [r2, #0]
 8006156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800615a:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800615c:	6802      	ldr	r2, [r0, #0]
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	4770      	bx	lr

08006168 <HAL_UART_DeInit>:
  if (huart == NULL)
 8006168:	b1d8      	cbz	r0, 80061a2 <HAL_UART_DeInit+0x3a>
{
 800616a:	b538      	push	{r3, r4, r5, lr}
 800616c:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800616e:	2324      	movs	r3, #36	; 0x24
 8006170:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8006174:	6802      	ldr	r2, [r0, #0]
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800617e:	6803      	ldr	r3, [r0, #0]
 8006180:	2500      	movs	r5, #0
 8006182:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006184:	6803      	ldr	r3, [r0, #0]
 8006186:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006188:	6803      	ldr	r3, [r0, #0]
 800618a:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800618c:	f7fd fce4 	bl	8003b58 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006190:	6765      	str	r5, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 8006192:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 8006196:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 800619a:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  return HAL_OK;
 800619e:	4628      	mov	r0, r5
 80061a0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80061a2:	2001      	movs	r0, #1
 80061a4:	4770      	bx	lr
	...

080061a8 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80061a8:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d001      	beq.n	80061b6 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 80061b2:	2002      	movs	r0, #2
 80061b4:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 80061b6:	b341      	cbz	r1, 800620a <HAL_UART_Transmit_IT+0x62>
 80061b8:	b34a      	cbz	r2, 800620e <HAL_UART_Transmit_IT+0x66>
    __HAL_LOCK(huart);
 80061ba:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d027      	beq.n	8006212 <HAL_UART_Transmit_IT+0x6a>
 80061c2:	2301      	movs	r3, #1
 80061c4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 80061c8:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80061ca:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80061ce:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d6:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061d8:	2321      	movs	r3, #33	; 0x21
 80061da:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061de:	6883      	ldr	r3, [r0, #8]
 80061e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e4:	d00b      	beq.n	80061fe <HAL_UART_Transmit_IT+0x56>
        huart->TxISR = UART_TxISR_8BIT;
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <HAL_UART_Transmit_IT+0x70>)
 80061e8:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_UNLOCK(huart);
 80061ea:	2300      	movs	r3, #0
 80061ec:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80061f0:	6801      	ldr	r1, [r0, #0]
 80061f2:	680a      	ldr	r2, [r1, #0]
 80061f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061f8:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80061fa:	4618      	mov	r0, r3
 80061fc:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fe:	6903      	ldr	r3, [r0, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1f0      	bne.n	80061e6 <HAL_UART_Transmit_IT+0x3e>
        huart->TxISR = UART_TxISR_16BIT;
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <HAL_UART_Transmit_IT+0x74>)
 8006206:	6643      	str	r3, [r0, #100]	; 0x64
 8006208:	e7ef      	b.n	80061ea <HAL_UART_Transmit_IT+0x42>
      return HAL_ERROR;
 800620a:	2001      	movs	r0, #1
 800620c:	4770      	bx	lr
 800620e:	2001      	movs	r0, #1
 8006210:	4770      	bx	lr
    __HAL_LOCK(huart);
 8006212:	2002      	movs	r0, #2
}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	080060d7 	.word	0x080060d7
 800621c:	0800611d 	.word	0x0800611d

08006220 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006220:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b20      	cmp	r3, #32
 8006228:	d001      	beq.n	800622e <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 800622a:	2002      	movs	r0, #2
 800622c:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 800622e:	2900      	cmp	r1, #0
 8006230:	d056      	beq.n	80062e0 <HAL_UART_Receive_IT+0xc0>
 8006232:	2a00      	cmp	r2, #0
 8006234:	d056      	beq.n	80062e4 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 8006236:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800623a:	2b01      	cmp	r3, #1
 800623c:	d054      	beq.n	80062e8 <HAL_UART_Receive_IT+0xc8>
 800623e:	2301      	movs	r3, #1
 8006240:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 8006244:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8006246:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800624a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 800624e:	2300      	movs	r3, #0
 8006250:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8006252:	6883      	ldr	r3, [r0, #8]
 8006254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006258:	d006      	beq.n	8006268 <HAL_UART_Receive_IT+0x48>
 800625a:	b9a3      	cbnz	r3, 8006286 <HAL_UART_Receive_IT+0x66>
 800625c:	6903      	ldr	r3, [r0, #16]
 800625e:	b973      	cbnz	r3, 800627e <HAL_UART_Receive_IT+0x5e>
 8006260:	23ff      	movs	r3, #255	; 0xff
 8006262:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006266:	e011      	b.n	800628c <HAL_UART_Receive_IT+0x6c>
 8006268:	6903      	ldr	r3, [r0, #16]
 800626a:	b923      	cbnz	r3, 8006276 <HAL_UART_Receive_IT+0x56>
 800626c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006270:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006274:	e00a      	b.n	800628c <HAL_UART_Receive_IT+0x6c>
 8006276:	23ff      	movs	r3, #255	; 0xff
 8006278:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800627c:	e006      	b.n	800628c <HAL_UART_Receive_IT+0x6c>
 800627e:	237f      	movs	r3, #127	; 0x7f
 8006280:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8006284:	e002      	b.n	800628c <HAL_UART_Receive_IT+0x6c>
 8006286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800628a:	d019      	beq.n	80062c0 <HAL_UART_Receive_IT+0xa0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	2300      	movs	r3, #0
 800628e:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006290:	2322      	movs	r3, #34	; 0x22
 8006292:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006296:	6802      	ldr	r2, [r0, #0]
 8006298:	6893      	ldr	r3, [r2, #8]
 800629a:	f043 0301 	orr.w	r3, r3, #1
 800629e:	6093      	str	r3, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a0:	6883      	ldr	r3, [r0, #8]
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a6:	d015      	beq.n	80062d4 <HAL_UART_Receive_IT+0xb4>
        huart->RxISR = UART_RxISR_8BIT;
 80062a8:	4b10      	ldr	r3, [pc, #64]	; (80062ec <HAL_UART_Receive_IT+0xcc>)
 80062aa:	6603      	str	r3, [r0, #96]	; 0x60
      __HAL_UNLOCK(huart);
 80062ac:	2300      	movs	r3, #0
 80062ae:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80062b2:	6801      	ldr	r1, [r0, #0]
 80062b4:	680a      	ldr	r2, [r1, #0]
 80062b6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80062ba:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80062bc:	4618      	mov	r0, r3
 80062be:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80062c0:	6903      	ldr	r3, [r0, #16]
 80062c2:	b91b      	cbnz	r3, 80062cc <HAL_UART_Receive_IT+0xac>
 80062c4:	237f      	movs	r3, #127	; 0x7f
 80062c6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80062ca:	e7df      	b.n	800628c <HAL_UART_Receive_IT+0x6c>
 80062cc:	233f      	movs	r3, #63	; 0x3f
 80062ce:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80062d2:	e7db      	b.n	800628c <HAL_UART_Receive_IT+0x6c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d4:	6903      	ldr	r3, [r0, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1e6      	bne.n	80062a8 <HAL_UART_Receive_IT+0x88>
        huart->RxISR = UART_RxISR_16BIT;
 80062da:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <HAL_UART_Receive_IT+0xd0>)
 80062dc:	6603      	str	r3, [r0, #96]	; 0x60
 80062de:	e7e5      	b.n	80062ac <HAL_UART_Receive_IT+0x8c>
      return HAL_ERROR;
 80062e0:	2001      	movs	r0, #1
 80062e2:	4770      	bx	lr
 80062e4:	2001      	movs	r0, #1
 80062e6:	4770      	bx	lr
    __HAL_LOCK(huart);
 80062e8:	2002      	movs	r0, #2
}
 80062ea:	4770      	bx	lr
 80062ec:	08006311 	.word	0x08006311
 80062f0:	08006375 	.word	0x08006375

080062f4 <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062f4:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062f6:	6801      	ldr	r1, [r0, #0]
 80062f8:	680a      	ldr	r2, [r1, #0]
 80062fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062fe:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006300:	2220      	movs	r2, #32
 8006302:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006306:	2200      	movs	r2, #0
 8006308:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800630a:	f7fd fc47 	bl	8003b9c <HAL_UART_TxCpltCallback>
 800630e:	bd08      	pop	{r3, pc}

08006310 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 8006310:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006314:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b22      	cmp	r3, #34	; 0x22
 800631c:	d006      	beq.n	800632c <UART_RxISR_8BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800631e:	6802      	ldr	r2, [r0, #0]
 8006320:	8b13      	ldrh	r3, [r2, #24]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f043 0308 	orr.w	r3, r3, #8
 8006328:	8313      	strh	r3, [r2, #24]
  }
}
 800632a:	4770      	bx	lr
{
 800632c:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800632e:	6803      	ldr	r3, [r0, #0]
 8006330:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006332:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006334:	1c5c      	adds	r4, r3, #1
 8006336:	6544      	str	r4, [r0, #84]	; 0x54
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	400a      	ands	r2, r1
 800633c:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0)
 800633e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29b      	uxth	r3, r3
 8006348:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800634c:	b103      	cbz	r3, 8006350 <UART_RxISR_8BIT+0x40>
 800634e:	bd10      	pop	{r4, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006350:	6802      	ldr	r2, [r0, #0]
 8006352:	6813      	ldr	r3, [r2, #0]
 8006354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006358:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635a:	6802      	ldr	r2, [r0, #0]
 800635c:	6893      	ldr	r3, [r2, #8]
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8006364:	2320      	movs	r3, #32
 8006366:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 800636a:	2300      	movs	r3, #0
 800636c:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800636e:	f7fd fc53 	bl	8003c18 <HAL_UART_RxCpltCallback>
 8006372:	bd10      	pop	{r4, pc}

08006374 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006374:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006376:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800637a:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b22      	cmp	r3, #34	; 0x22
 8006382:	d006      	beq.n	8006392 <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006384:	6802      	ldr	r2, [r0, #0]
 8006386:	8b13      	ldrh	r3, [r2, #24]
 8006388:	b29b      	uxth	r3, r3
 800638a:	f043 0308 	orr.w	r3, r3, #8
 800638e:	8313      	strh	r3, [r2, #24]
 8006390:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006392:	6803      	ldr	r3, [r0, #0]
 8006394:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006396:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8006398:	400a      	ands	r2, r1
 800639a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2;
 800639c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800639e:	3302      	adds	r3, #2
 80063a0:	6543      	str	r3, [r0, #84]	; 0x54
    if (--huart->RxXferCount == 0)
 80063a2:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1ed      	bne.n	8006390 <UART_RxISR_16BIT+0x1c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063b4:	6802      	ldr	r2, [r0, #0]
 80063b6:	6813      	ldr	r3, [r2, #0]
 80063b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063bc:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	6802      	ldr	r2, [r0, #0]
 80063c0:	6893      	ldr	r3, [r2, #8]
 80063c2:	f023 0301 	bic.w	r3, r3, #1
 80063c6:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80063c8:	2320      	movs	r3, #32
 80063ca:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 80063d2:	f7fd fc21 	bl	8003c18 <HAL_UART_RxCpltCallback>
 80063d6:	bd08      	pop	{r3, pc}

080063d8 <HAL_UART_IRQHandler>:
{
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063dc:	6802      	ldr	r2, [r0, #0]
 80063de:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063e0:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063e2:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 80063e4:	f013 050f 	ands.w	r5, r3, #15
 80063e8:	d10c      	bne.n	8006404 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 80063ea:	f013 0f20 	tst.w	r3, #32
 80063ee:	d009      	beq.n	8006404 <HAL_UART_IRQHandler+0x2c>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063f0:	f011 0f20 	tst.w	r1, #32
 80063f4:	d006      	beq.n	8006404 <HAL_UART_IRQHandler+0x2c>
      if (huart->RxISR != NULL)
 80063f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 8093 	beq.w	8006524 <HAL_UART_IRQHandler+0x14c>
        huart->RxISR(huart);
 80063fe:	4620      	mov	r0, r4
 8006400:	4798      	blx	r3
 8006402:	bd38      	pop	{r3, r4, r5, pc}
  if ((errorflags != RESET)
 8006404:	2d00      	cmp	r5, #0
 8006406:	d06f      	beq.n	80064e8 <HAL_UART_IRQHandler+0x110>
      && (((cr3its & USART_CR3_EIE) != RESET)
 8006408:	f010 0501 	ands.w	r5, r0, #1
 800640c:	d102      	bne.n	8006414 <HAL_UART_IRQHandler+0x3c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800640e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8006412:	d069      	beq.n	80064e8 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006414:	f013 0f01 	tst.w	r3, #1
 8006418:	d007      	beq.n	800642a <HAL_UART_IRQHandler+0x52>
 800641a:	f411 7f80 	tst.w	r1, #256	; 0x100
 800641e:	d004      	beq.n	800642a <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006420:	2001      	movs	r0, #1
 8006422:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006424:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006426:	4302      	orrs	r2, r0
 8006428:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800642a:	f013 0f02 	tst.w	r3, #2
 800642e:	d007      	beq.n	8006440 <HAL_UART_IRQHandler+0x68>
 8006430:	b135      	cbz	r5, 8006440 <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	2002      	movs	r0, #2
 8006436:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006438:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800643a:	f042 0204 	orr.w	r2, r2, #4
 800643e:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006440:	f013 0f04 	tst.w	r3, #4
 8006444:	d007      	beq.n	8006456 <HAL_UART_IRQHandler+0x7e>
 8006446:	b135      	cbz	r5, 8006456 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006448:	6822      	ldr	r2, [r4, #0]
 800644a:	2004      	movs	r0, #4
 800644c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800644e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006450:	f042 0202 	orr.w	r2, r2, #2
 8006454:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8006456:	f013 0f08 	tst.w	r3, #8
 800645a:	d009      	beq.n	8006470 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 800645c:	f011 0f20 	tst.w	r1, #32
 8006460:	d100      	bne.n	8006464 <HAL_UART_IRQHandler+0x8c>
 8006462:	b12d      	cbz	r5, 8006470 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006464:	6822      	ldr	r2, [r4, #0]
 8006466:	2008      	movs	r0, #8
 8006468:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800646a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800646c:	4302      	orrs	r2, r0
 800646e:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006470:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006472:	2a00      	cmp	r2, #0
 8006474:	d056      	beq.n	8006524 <HAL_UART_IRQHandler+0x14c>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8006476:	f013 0f20 	tst.w	r3, #32
 800647a:	d006      	beq.n	800648a <HAL_UART_IRQHandler+0xb2>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800647c:	f011 0f20 	tst.w	r1, #32
 8006480:	d003      	beq.n	800648a <HAL_UART_IRQHandler+0xb2>
        if (huart->RxISR != NULL)
 8006482:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006484:	b10b      	cbz	r3, 800648a <HAL_UART_IRQHandler+0xb2>
          huart->RxISR(huart);
 8006486:	4620      	mov	r0, r4
 8006488:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800648a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800648c:	f013 0f08 	tst.w	r3, #8
 8006490:	d104      	bne.n	800649c <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006496:	f013 0f40 	tst.w	r3, #64	; 0x40
 800649a:	d01f      	beq.n	80064dc <HAL_UART_IRQHandler+0x104>
        UART_EndRxTransfer(huart);
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff fe0a 	bl	80060b6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80064aa:	d013      	beq.n	80064d4 <HAL_UART_IRQHandler+0xfc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064b2:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80064b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80064b6:	b14b      	cbz	r3, 80064cc <HAL_UART_IRQHandler+0xf4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064b8:	4a1d      	ldr	r2, [pc, #116]	; (8006530 <HAL_UART_IRQHandler+0x158>)
 80064ba:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064bc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80064be:	f7fd fe3d 	bl	800413c <HAL_DMA_Abort_IT>
 80064c2:	b378      	cbz	r0, 8006524 <HAL_UART_IRQHandler+0x14c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064c4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80064c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80064c8:	4798      	blx	r3
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
            HAL_UART_ErrorCallback(huart);
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7fd fbed 	bl	8003cac <HAL_UART_ErrorCallback>
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7fd fbe9 	bl	8003cac <HAL_UART_ErrorCallback>
 80064da:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80064dc:	4620      	mov	r0, r4
 80064de:	f7fd fbe5 	bl	8003cac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e2:	2300      	movs	r3, #0
 80064e4:	6763      	str	r3, [r4, #116]	; 0x74
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80064e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80064ec:	d002      	beq.n	80064f4 <HAL_UART_IRQHandler+0x11c>
 80064ee:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80064f2:	d10a      	bne.n	800650a <HAL_UART_IRQHandler+0x132>
  if (((isrflags & USART_ISR_TXE) != RESET)
 80064f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064f8:	d00e      	beq.n	8006518 <HAL_UART_IRQHandler+0x140>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80064fe:	d00b      	beq.n	8006518 <HAL_UART_IRQHandler+0x140>
    if (huart->TxISR != NULL)
 8006500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006502:	b17b      	cbz	r3, 8006524 <HAL_UART_IRQHandler+0x14c>
      huart->TxISR(huart);
 8006504:	4620      	mov	r0, r4
 8006506:	4798      	blx	r3
 8006508:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800650a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800650e:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006510:	4620      	mov	r0, r4
 8006512:	f000 fb6c 	bl	8006bee <HAL_UARTEx_WakeupCallback>
    return;
 8006516:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006518:	f013 0f40 	tst.w	r3, #64	; 0x40
 800651c:	d002      	beq.n	8006524 <HAL_UART_IRQHandler+0x14c>
 800651e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006522:	d100      	bne.n	8006526 <HAL_UART_IRQHandler+0x14e>
 8006524:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff fee4 	bl	80062f4 <UART_EndTransmit_IT>
    return;
 800652c:	e7fa      	b.n	8006524 <HAL_UART_IRQHandler+0x14c>
 800652e:	bf00      	nop
 8006530:	08006535 	.word	0x08006535

08006534 <UART_DMAAbortOnError>:
{
 8006534:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006536:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800653e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8006542:	f7fd fbb3 	bl	8003cac <HAL_UART_ErrorCallback>
 8006546:	bd08      	pop	{r3, pc}

08006548 <UART_SetConfig>:
{
 8006548:	e92d 4b78 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, fp, lr}
 800654c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800654e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006550:	6883      	ldr	r3, [r0, #8]
 8006552:	6902      	ldr	r2, [r0, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	6942      	ldr	r2, [r0, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	69c2      	ldr	r2, [r0, #28]
 800655c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800655e:	6808      	ldr	r0, [r1, #0]
 8006560:	4a9b      	ldr	r2, [pc, #620]	; (80067d0 <UART_SetConfig+0x288>)
 8006562:	4002      	ands	r2, r0
 8006564:	4313      	orrs	r3, r2
 8006566:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006568:	6822      	ldr	r2, [r4, #0]
 800656a:	6853      	ldr	r3, [r2, #4]
 800656c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006570:	68e1      	ldr	r1, [r4, #12]
 8006572:	430b      	orrs	r3, r1
 8006574:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006576:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006578:	6822      	ldr	r2, [r4, #0]
 800657a:	4996      	ldr	r1, [pc, #600]	; (80067d4 <UART_SetConfig+0x28c>)
 800657c:	428a      	cmp	r2, r1
 800657e:	d001      	beq.n	8006584 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8006580:	6a21      	ldr	r1, [r4, #32]
 8006582:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006584:	6891      	ldr	r1, [r2, #8]
 8006586:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800658a:	430b      	orrs	r3, r1
 800658c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	4a91      	ldr	r2, [pc, #580]	; (80067d8 <UART_SetConfig+0x290>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d023      	beq.n	80065de <UART_SetConfig+0x96>
 8006596:	4a91      	ldr	r2, [pc, #580]	; (80067dc <UART_SetConfig+0x294>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d034      	beq.n	8006606 <UART_SetConfig+0xbe>
 800659c:	4a90      	ldr	r2, [pc, #576]	; (80067e0 <UART_SetConfig+0x298>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d04a      	beq.n	8006638 <UART_SetConfig+0xf0>
 80065a2:	4a90      	ldr	r2, [pc, #576]	; (80067e4 <UART_SetConfig+0x29c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d05d      	beq.n	8006664 <UART_SetConfig+0x11c>
 80065a8:	4a8a      	ldr	r2, [pc, #552]	; (80067d4 <UART_SetConfig+0x28c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d070      	beq.n	8006690 <UART_SetConfig+0x148>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80065ae:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80065b0:	4a88      	ldr	r2, [pc, #544]	; (80067d4 <UART_SetConfig+0x28c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	f000 808f 	beq.w	80066d6 <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065b8:	69e3      	ldr	r3, [r4, #28]
 80065ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065be:	f000 80fd 	beq.w	80067bc <UART_SetConfig+0x274>
    switch (clocksource)
 80065c2:	2d08      	cmp	r5, #8
 80065c4:	f200 819b 	bhi.w	80068fe <UART_SetConfig+0x3b6>
 80065c8:	e8df f015 	tbh	[pc, r5, lsl #1]
 80065cc:	0171015a 	.word	0x0171015a
 80065d0:	0199017b 	.word	0x0199017b
 80065d4:	01990186 	.word	0x01990186
 80065d8:	01990199 	.word	0x01990199
 80065dc:	0190      	.short	0x0190
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065de:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80065e2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80065e6:	f002 0203 	and.w	r2, r2, #3
 80065ea:	2a03      	cmp	r2, #3
 80065ec:	d809      	bhi.n	8006602 <UART_SetConfig+0xba>
 80065ee:	e8df f002 	tbb	[pc, r2]
 80065f2:	0402      	.short	0x0402
 80065f4:	0668      	.short	0x0668
 80065f6:	2501      	movs	r5, #1
 80065f8:	e7da      	b.n	80065b0 <UART_SetConfig+0x68>
 80065fa:	2504      	movs	r5, #4
 80065fc:	e7d8      	b.n	80065b0 <UART_SetConfig+0x68>
 80065fe:	2508      	movs	r5, #8
 8006600:	e7d6      	b.n	80065b0 <UART_SetConfig+0x68>
 8006602:	2510      	movs	r5, #16
 8006604:	e7d4      	b.n	80065b0 <UART_SetConfig+0x68>
 8006606:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800660a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800660e:	f002 020c 	and.w	r2, r2, #12
 8006612:	2a0c      	cmp	r2, #12
 8006614:	d80e      	bhi.n	8006634 <UART_SetConfig+0xec>
 8006616:	e8df f002 	tbb	[pc, r2]
 800661a:	0d07      	.short	0x0d07
 800661c:	0d090d0d 	.word	0x0d090d0d
 8006620:	0d560d0d 	.word	0x0d560d0d
 8006624:	0d0d      	.short	0x0d0d
 8006626:	0b          	.byte	0x0b
 8006627:	00          	.byte	0x00
 8006628:	2500      	movs	r5, #0
 800662a:	e7c1      	b.n	80065b0 <UART_SetConfig+0x68>
 800662c:	2504      	movs	r5, #4
 800662e:	e7bf      	b.n	80065b0 <UART_SetConfig+0x68>
 8006630:	2508      	movs	r5, #8
 8006632:	e7bd      	b.n	80065b0 <UART_SetConfig+0x68>
 8006634:	2510      	movs	r5, #16
 8006636:	e7bb      	b.n	80065b0 <UART_SetConfig+0x68>
 8006638:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800663c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006640:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006644:	2a10      	cmp	r2, #16
 8006646:	d009      	beq.n	800665c <UART_SetConfig+0x114>
 8006648:	d905      	bls.n	8006656 <UART_SetConfig+0x10e>
 800664a:	2a20      	cmp	r2, #32
 800664c:	d03d      	beq.n	80066ca <UART_SetConfig+0x182>
 800664e:	2a30      	cmp	r2, #48	; 0x30
 8006650:	d106      	bne.n	8006660 <UART_SetConfig+0x118>
 8006652:	2508      	movs	r5, #8
 8006654:	e7ac      	b.n	80065b0 <UART_SetConfig+0x68>
 8006656:	b91a      	cbnz	r2, 8006660 <UART_SetConfig+0x118>
 8006658:	2500      	movs	r5, #0
 800665a:	e7a9      	b.n	80065b0 <UART_SetConfig+0x68>
 800665c:	2504      	movs	r5, #4
 800665e:	e7a7      	b.n	80065b0 <UART_SetConfig+0x68>
 8006660:	2510      	movs	r5, #16
 8006662:	e7a5      	b.n	80065b0 <UART_SetConfig+0x68>
 8006664:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8006668:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800666c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8006670:	2a40      	cmp	r2, #64	; 0x40
 8006672:	d009      	beq.n	8006688 <UART_SetConfig+0x140>
 8006674:	d905      	bls.n	8006682 <UART_SetConfig+0x13a>
 8006676:	2a80      	cmp	r2, #128	; 0x80
 8006678:	d029      	beq.n	80066ce <UART_SetConfig+0x186>
 800667a:	2ac0      	cmp	r2, #192	; 0xc0
 800667c:	d106      	bne.n	800668c <UART_SetConfig+0x144>
 800667e:	2508      	movs	r5, #8
 8006680:	e796      	b.n	80065b0 <UART_SetConfig+0x68>
 8006682:	b91a      	cbnz	r2, 800668c <UART_SetConfig+0x144>
 8006684:	2500      	movs	r5, #0
 8006686:	e793      	b.n	80065b0 <UART_SetConfig+0x68>
 8006688:	2504      	movs	r5, #4
 800668a:	e791      	b.n	80065b0 <UART_SetConfig+0x68>
 800668c:	2510      	movs	r5, #16
 800668e:	e78f      	b.n	80065b0 <UART_SetConfig+0x68>
 8006690:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8006694:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006698:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800669c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80066a0:	d00b      	beq.n	80066ba <UART_SetConfig+0x172>
 80066a2:	d907      	bls.n	80066b4 <UART_SetConfig+0x16c>
 80066a4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80066a8:	d013      	beq.n	80066d2 <UART_SetConfig+0x18a>
 80066aa:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80066ae:	d106      	bne.n	80066be <UART_SetConfig+0x176>
 80066b0:	2508      	movs	r5, #8
 80066b2:	e77d      	b.n	80065b0 <UART_SetConfig+0x68>
 80066b4:	b91a      	cbnz	r2, 80066be <UART_SetConfig+0x176>
 80066b6:	2500      	movs	r5, #0
 80066b8:	e77a      	b.n	80065b0 <UART_SetConfig+0x68>
 80066ba:	2504      	movs	r5, #4
 80066bc:	e778      	b.n	80065b0 <UART_SetConfig+0x68>
 80066be:	2510      	movs	r5, #16
 80066c0:	e776      	b.n	80065b0 <UART_SetConfig+0x68>
 80066c2:	2502      	movs	r5, #2
 80066c4:	e774      	b.n	80065b0 <UART_SetConfig+0x68>
 80066c6:	2502      	movs	r5, #2
 80066c8:	e772      	b.n	80065b0 <UART_SetConfig+0x68>
 80066ca:	2502      	movs	r5, #2
 80066cc:	e770      	b.n	80065b0 <UART_SetConfig+0x68>
 80066ce:	2502      	movs	r5, #2
 80066d0:	e76e      	b.n	80065b0 <UART_SetConfig+0x68>
 80066d2:	2502      	movs	r5, #2
 80066d4:	e76c      	b.n	80065b0 <UART_SetConfig+0x68>
    switch (clocksource)
 80066d6:	2d08      	cmp	r5, #8
 80066d8:	d811      	bhi.n	80066fe <UART_SetConfig+0x1b6>
 80066da:	e8df f005 	tbb	[pc, r5]
 80066de:	1008      	.short	0x1008
 80066e0:	100c1005 	.word	0x100c1005
 80066e4:	1010      	.short	0x1010
 80066e6:	13          	.byte	0x13
 80066e7:	00          	.byte	0x00
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80066e8:	483f      	ldr	r0, [pc, #252]	; (80067e8 <UART_SetConfig+0x2a0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ea:	2600      	movs	r6, #0
 80066ec:	e00d      	b.n	800670a <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80066ee:	f7fe fcc3 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 80066f2:	2600      	movs	r6, #0
        break;
 80066f4:	e009      	b.n	800670a <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80066f6:	f7fe f8a5 	bl	8004844 <HAL_RCC_GetSysClockFreq>
  HAL_StatusTypeDef ret               = HAL_OK;
 80066fa:	2600      	movs	r6, #0
        break;
 80066fc:	e005      	b.n	800670a <UART_SetConfig+0x1c2>
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80066fe:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8006700:	2601      	movs	r6, #1
        break;
 8006702:	e002      	b.n	800670a <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006704:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 8006708:	2600      	movs	r6, #0
    if (lpuart_ker_ck_pres != 0U)
 800670a:	2800      	cmp	r0, #0
 800670c:	f000 80c9 	beq.w	80068a2 <UART_SetConfig+0x35a>
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8006710:	6862      	ldr	r2, [r4, #4]
 8006712:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006716:	4298      	cmp	r0, r3
 8006718:	f0c0 80f4 	bcc.w	8006904 <UART_SetConfig+0x3bc>
 800671c:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006720:	f200 80f2 	bhi.w	8006908 <UART_SetConfig+0x3c0>
        switch (clocksource)
 8006724:	2d08      	cmp	r5, #8
 8006726:	d846      	bhi.n	80067b6 <UART_SetConfig+0x26e>
 8006728:	e8df f005 	tbb	[pc, r5]
 800672c:	451f4505 	.word	0x451f4505
 8006730:	45454529 	.word	0x45454529
 8006734:	3b          	.byte	0x3b
 8006735:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006736:	f7fe fc9f 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 800673a:	2300      	movs	r3, #0
 800673c:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8006740:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8006744:	6862      	ldr	r2, [r4, #4]
 8006746:	0850      	lsrs	r0, r2, #1
 8006748:	eb18 0b00 	adds.w	fp, r8, r0
 800674c:	f149 0c00 	adc.w	ip, r9, #0
 8006750:	4658      	mov	r0, fp
 8006752:	4661      	mov	r1, ip
 8006754:	f7f9 fd9c 	bl	8000290 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006758:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800675c:	4b23      	ldr	r3, [pc, #140]	; (80067ec <UART_SetConfig+0x2a4>)
 800675e:	429a      	cmp	r2, r3
 8006760:	f200 80d4 	bhi.w	800690c <UART_SetConfig+0x3c4>
          huart->Instance->BRR = usartdiv;
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	60d8      	str	r0, [r3, #12]
 8006768:	e09b      	b.n	80068a2 <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800676a:	0855      	lsrs	r5, r2, #1
 800676c:	2300      	movs	r3, #0
 800676e:	4820      	ldr	r0, [pc, #128]	; (80067f0 <UART_SetConfig+0x2a8>)
 8006770:	2100      	movs	r1, #0
 8006772:	1940      	adds	r0, r0, r5
 8006774:	f141 0100 	adc.w	r1, r1, #0
 8006778:	f7f9 fd8a 	bl	8000290 <__aeabi_uldivmod>
            break;
 800677c:	e7ec      	b.n	8006758 <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800677e:	f7fe f861 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8006782:	2300      	movs	r3, #0
 8006784:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8006788:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800678c:	6862      	ldr	r2, [r4, #4]
 800678e:	0850      	lsrs	r0, r2, #1
 8006790:	eb18 0b00 	adds.w	fp, r8, r0
 8006794:	f149 0c00 	adc.w	ip, r9, #0
 8006798:	4658      	mov	r0, fp
 800679a:	4661      	mov	r1, ip
 800679c:	f7f9 fd78 	bl	8000290 <__aeabi_uldivmod>
            break;
 80067a0:	e7da      	b.n	8006758 <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80067a2:	0850      	lsrs	r0, r2, #1
 80067a4:	2100      	movs	r1, #0
 80067a6:	2300      	movs	r3, #0
 80067a8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 80067ac:	f141 0100 	adc.w	r1, r1, #0
 80067b0:	f7f9 fd6e 	bl	8000290 <__aeabi_uldivmod>
            break;
 80067b4:	e7d0      	b.n	8006758 <UART_SetConfig+0x210>
            ret = HAL_ERROR;
 80067b6:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 80067b8:	2000      	movs	r0, #0
 80067ba:	e7cd      	b.n	8006758 <UART_SetConfig+0x210>
    switch (clocksource)
 80067bc:	2d08      	cmp	r5, #8
 80067be:	d85c      	bhi.n	800687a <UART_SetConfig+0x332>
 80067c0:	e8df f005 	tbb	[pc, r5]
 80067c4:	5b3c3118 	.word	0x5b3c3118
 80067c8:	5b5b5b47 	.word	0x5b5b5b47
 80067cc:	52          	.byte	0x52
 80067cd:	00          	.byte	0x00
 80067ce:	bf00      	nop
 80067d0:	efff69f3 	.word	0xefff69f3
 80067d4:	40008000 	.word	0x40008000
 80067d8:	40013800 	.word	0x40013800
 80067dc:	40004400 	.word	0x40004400
 80067e0:	40004800 	.word	0x40004800
 80067e4:	40004c00 	.word	0x40004c00
 80067e8:	00f42400 	.word	0x00f42400
 80067ec:	000ffcff 	.word	0x000ffcff
 80067f0:	f4240000 	.word	0xf4240000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80067f4:	f7fe fc40 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 80067f8:	6862      	ldr	r2, [r4, #4]
 80067fa:	0853      	lsrs	r3, r2, #1
 80067fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006800:	fbb3 f3f2 	udiv	r3, r3, r2
 8006804:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006806:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006808:	f1a3 0110 	sub.w	r1, r3, #16
 800680c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006810:	4291      	cmp	r1, r2
 8006812:	d87d      	bhi.n	8006910 <UART_SetConfig+0x3c8>
      brrtemp = usartdiv & 0xFFF0U;
 8006814:	b29a      	uxth	r2, r3
 8006816:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800681a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800681e:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8006820:	6822      	ldr	r2, [r4, #0]
 8006822:	60d3      	str	r3, [r2, #12]
 8006824:	e03d      	b.n	80068a2 <UART_SetConfig+0x35a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006826:	f7fe fc37 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 800682a:	6862      	ldr	r2, [r4, #4]
 800682c:	0853      	lsrs	r3, r2, #1
 800682e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006832:	fbb3 f3f2 	udiv	r3, r3, r2
 8006836:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006838:	2600      	movs	r6, #0
        break;
 800683a:	e7e5      	b.n	8006808 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800683c:	6862      	ldr	r2, [r4, #4]
 800683e:	0853      	lsrs	r3, r2, #1
 8006840:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006844:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006848:	fbb3 f3f2 	udiv	r3, r3, r2
 800684c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800684e:	2600      	movs	r6, #0
        break;
 8006850:	e7da      	b.n	8006808 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006852:	f7fd fff7 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 8006856:	6862      	ldr	r2, [r4, #4]
 8006858:	0853      	lsrs	r3, r2, #1
 800685a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800685e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006862:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006864:	2600      	movs	r6, #0
        break;
 8006866:	e7cf      	b.n	8006808 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006868:	6862      	ldr	r2, [r4, #4]
 800686a:	0853      	lsrs	r3, r2, #1
 800686c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006870:	fbb3 f3f2 	udiv	r3, r3, r2
 8006874:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8006876:	2600      	movs	r6, #0
        break;
 8006878:	e7c6      	b.n	8006808 <UART_SetConfig+0x2c0>
        ret = HAL_ERROR;
 800687a:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800687c:	2300      	movs	r3, #0
 800687e:	e7c3      	b.n	8006808 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006880:	f7fe fbfa 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8006884:	6863      	ldr	r3, [r4, #4]
 8006886:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800688a:	fbb0 f0f3 	udiv	r0, r0, r3
 800688e:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8006890:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006892:	f1a0 0210 	sub.w	r2, r0, #16
 8006896:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800689a:	429a      	cmp	r2, r3
 800689c:	d83a      	bhi.n	8006914 <UART_SetConfig+0x3cc>
      huart->Instance->BRR = usartdiv;
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80068a6:	6663      	str	r3, [r4, #100]	; 0x64
}
 80068a8:	4630      	mov	r0, r6
 80068aa:	e8bd 8b78 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80068ae:	f7fe fbf3 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 80068b2:	6863      	ldr	r3, [r4, #4]
 80068b4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80068b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80068bc:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80068be:	2600      	movs	r6, #0
        break;
 80068c0:	e7e7      	b.n	8006892 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80068c2:	6863      	ldr	r3, [r4, #4]
 80068c4:	0858      	lsrs	r0, r3, #1
 80068c6:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 80068ca:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 80068ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80068d2:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80068d4:	2600      	movs	r6, #0
        break;
 80068d6:	e7dc      	b.n	8006892 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80068d8:	f7fd ffb4 	bl	8004844 <HAL_RCC_GetSysClockFreq>
 80068dc:	6863      	ldr	r3, [r4, #4]
 80068de:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80068e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80068e6:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80068e8:	2600      	movs	r6, #0
        break;
 80068ea:	e7d2      	b.n	8006892 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80068ec:	6863      	ldr	r3, [r4, #4]
 80068ee:	0858      	lsrs	r0, r3, #1
 80068f0:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80068f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80068f8:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80068fa:	2600      	movs	r6, #0
        break;
 80068fc:	e7c9      	b.n	8006892 <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 80068fe:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006900:	2000      	movs	r0, #0
 8006902:	e7c6      	b.n	8006892 <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 8006904:	2601      	movs	r6, #1
 8006906:	e7cc      	b.n	80068a2 <UART_SetConfig+0x35a>
 8006908:	2601      	movs	r6, #1
 800690a:	e7ca      	b.n	80068a2 <UART_SetConfig+0x35a>
          ret = HAL_ERROR;
 800690c:	2601      	movs	r6, #1
 800690e:	e7c8      	b.n	80068a2 <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 8006910:	2601      	movs	r6, #1
 8006912:	e7c6      	b.n	80068a2 <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 8006914:	2601      	movs	r6, #1
 8006916:	e7c4      	b.n	80068a2 <UART_SetConfig+0x35a>

08006918 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006918:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800691a:	f013 0f01 	tst.w	r3, #1
 800691e:	d006      	beq.n	800692e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006920:	6802      	ldr	r2, [r0, #0]
 8006922:	6853      	ldr	r3, [r2, #4]
 8006924:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006928:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800692a:	430b      	orrs	r3, r1
 800692c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800692e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006930:	f013 0f02 	tst.w	r3, #2
 8006934:	d006      	beq.n	8006944 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006936:	6802      	ldr	r2, [r0, #0]
 8006938:	6853      	ldr	r3, [r2, #4]
 800693a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006940:	430b      	orrs	r3, r1
 8006942:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006944:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006946:	f013 0f04 	tst.w	r3, #4
 800694a:	d006      	beq.n	800695a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800694c:	6802      	ldr	r2, [r0, #0]
 800694e:	6853      	ldr	r3, [r2, #4]
 8006950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006954:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006956:	430b      	orrs	r3, r1
 8006958:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800695a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800695c:	f013 0f08 	tst.w	r3, #8
 8006960:	d006      	beq.n	8006970 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006962:	6802      	ldr	r2, [r0, #0]
 8006964:	6853      	ldr	r3, [r2, #4]
 8006966:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800696a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800696c:	430b      	orrs	r3, r1
 800696e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006970:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006972:	f013 0f10 	tst.w	r3, #16
 8006976:	d006      	beq.n	8006986 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006978:	6802      	ldr	r2, [r0, #0]
 800697a:	6893      	ldr	r3, [r2, #8]
 800697c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006980:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006982:	430b      	orrs	r3, r1
 8006984:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006986:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006988:	f013 0f20 	tst.w	r3, #32
 800698c:	d006      	beq.n	800699c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800698e:	6802      	ldr	r2, [r0, #0]
 8006990:	6893      	ldr	r3, [r2, #8]
 8006992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006996:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006998:	430b      	orrs	r3, r1
 800699a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800699c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800699e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069a2:	d00a      	beq.n	80069ba <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a4:	6802      	ldr	r2, [r0, #0]
 80069a6:	6853      	ldr	r3, [r2, #4]
 80069a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069ac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80069ae:	430b      	orrs	r3, r1
 80069b0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80069b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069b8:	d00b      	beq.n	80069d2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80069bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80069c0:	d006      	beq.n	80069d0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069c2:	6802      	ldr	r2, [r0, #0]
 80069c4:	6853      	ldr	r3, [r2, #4]
 80069c6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80069ca:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80069cc:	430b      	orrs	r3, r1
 80069ce:	6053      	str	r3, [r2, #4]
 80069d0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069d2:	6802      	ldr	r2, [r0, #0]
 80069d4:	6853      	ldr	r3, [r2, #4]
 80069d6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80069da:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80069dc:	430b      	orrs	r3, r1
 80069de:	6053      	str	r3, [r2, #4]
 80069e0:	e7eb      	b.n	80069ba <UART_AdvFeatureConfig+0xa2>

080069e2 <UART_WaitOnFlagUntilTimeout>:
{
 80069e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e6:	4605      	mov	r5, r0
 80069e8:	460f      	mov	r7, r1
 80069ea:	4616      	mov	r6, r2
 80069ec:	4698      	mov	r8, r3
 80069ee:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	ea37 0303 	bics.w	r3, r7, r3
 80069f8:	bf0c      	ite	eq
 80069fa:	2301      	moveq	r3, #1
 80069fc:	2300      	movne	r3, #0
 80069fe:	42b3      	cmp	r3, r6
 8006a00:	d11e      	bne.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8006a02:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006a06:	d0f3      	beq.n	80069f0 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a08:	b12c      	cbz	r4, 8006a16 <UART_WaitOnFlagUntilTimeout+0x34>
 8006a0a:	f7fd fafb 	bl	8004004 <HAL_GetTick>
 8006a0e:	eba0 0008 	sub.w	r0, r0, r8
 8006a12:	4284      	cmp	r4, r0
 8006a14:	d2ec      	bcs.n	80069f0 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a16:	682a      	ldr	r2, [r5, #0]
 8006a18:	6813      	ldr	r3, [r2, #0]
 8006a1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a1e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a20:	682a      	ldr	r2, [r5, #0]
 8006a22:	6893      	ldr	r3, [r2, #8]
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006a2a:	2320      	movs	r3, #32
 8006a2c:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8006a30:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8006a34:	2300      	movs	r3, #0
 8006a36:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8006a3a:	2003      	movs	r0, #3
 8006a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8006a40:	2000      	movs	r0, #0
}
 8006a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006a46 <HAL_UART_Transmit>:
{
 8006a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006a4e:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d004      	beq.n	8006a62 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8006a58:	2302      	movs	r3, #2
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	b002      	add	sp, #8
 8006a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a62:	4604      	mov	r4, r0
 8006a64:	460d      	mov	r5, r1
 8006a66:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	d04e      	beq.n	8006b0a <HAL_UART_Transmit+0xc4>
 8006a6c:	2a00      	cmp	r2, #0
 8006a6e:	d04e      	beq.n	8006b0e <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8006a70:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_UART_Transmit+0x36>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e7ee      	b.n	8006a5a <HAL_UART_Transmit+0x14>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a82:	2300      	movs	r3, #0
 8006a84:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a86:	2321      	movs	r3, #33	; 0x21
 8006a88:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8006a8c:	f7fd faba 	bl	8004004 <HAL_GetTick>
 8006a90:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006a92:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a96:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a9a:	e00a      	b.n	8006ab2 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	782a      	ldrb	r2, [r5, #0]
 8006aa0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006aa2:	3501      	adds	r5, #1
      huart->TxXferCount--;
 8006aa4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ab2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	b1ab      	cbz	r3, 8006ae6 <HAL_UART_Transmit+0xa0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006aba:	9600      	str	r6, [sp, #0]
 8006abc:	463b      	mov	r3, r7
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2180      	movs	r1, #128	; 0x80
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f7ff ff8d 	bl	80069e2 <UART_WaitOnFlagUntilTimeout>
 8006ac8:	bb18      	cbnz	r0, 8006b12 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aca:	68a3      	ldr	r3, [r4, #8]
 8006acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad0:	d1e4      	bne.n	8006a9c <HAL_UART_Transmit+0x56>
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e1      	bne.n	8006a9c <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006ad8:	6822      	ldr	r2, [r4, #0]
 8006ada:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8006ae4:	e7de      	b.n	8006aa4 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ae6:	9600      	str	r6, [sp, #0]
 8006ae8:	463b      	mov	r3, r7
 8006aea:	2200      	movs	r2, #0
 8006aec:	2140      	movs	r1, #64	; 0x40
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7ff ff77 	bl	80069e2 <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	b108      	cbz	r0, 8006afc <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e7ae      	b.n	8006a5a <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8006afc:	2220      	movs	r2, #32
 8006afe:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8006b02:	2200      	movs	r2, #0
 8006b04:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 8006b08:	e7a7      	b.n	8006a5a <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e7a5      	b.n	8006a5a <HAL_UART_Transmit+0x14>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e7a3      	b.n	8006a5a <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e7a1      	b.n	8006a5a <HAL_UART_Transmit+0x14>

08006b16 <UART_CheckIdleState>:
{
 8006b16:	b530      	push	{r4, r5, lr}
 8006b18:	b083      	sub	sp, #12
 8006b1a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	6743      	str	r3, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8006b20:	f7fd fa70 	bl	8004004 <HAL_GetTick>
 8006b24:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f013 0f08 	tst.w	r3, #8
 8006b2e:	d10e      	bne.n	8006b4e <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f013 0f04 	tst.w	r3, #4
 8006b38:	d117      	bne.n	8006b6a <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8006b3a:	2320      	movs	r3, #32
 8006b3c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8006b40:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 8006b44:	2000      	movs	r0, #0
 8006b46:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8006b4a:	b003      	add	sp, #12
 8006b4c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	4603      	mov	r3, r0
 8006b56:	2200      	movs	r2, #0
 8006b58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7ff ff40 	bl	80069e2 <UART_WaitOnFlagUntilTimeout>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d0e4      	beq.n	8006b30 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8006b66:	2003      	movs	r0, #3
 8006b68:	e7ef      	b.n	8006b4a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	462b      	mov	r3, r5
 8006b72:	2200      	movs	r2, #0
 8006b74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f7ff ff32 	bl	80069e2 <UART_WaitOnFlagUntilTimeout>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d0db      	beq.n	8006b3a <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8006b82:	2003      	movs	r0, #3
 8006b84:	e7e1      	b.n	8006b4a <UART_CheckIdleState+0x34>

08006b86 <HAL_UART_Init>:
  if (huart == NULL)
 8006b86:	b378      	cbz	r0, 8006be8 <HAL_UART_Init+0x62>
{
 8006b88:	b510      	push	{r4, lr}
 8006b8a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006b8c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8006b90:	b30b      	cbz	r3, 8006bd6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b92:	2324      	movs	r3, #36	; 0x24
 8006b94:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	6813      	ldr	r3, [r2, #0]
 8006b9c:	f023 0301 	bic.w	r3, r3, #1
 8006ba0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f7ff fcd0 	bl	8006548 <UART_SetConfig>
 8006ba8:	2801      	cmp	r0, #1
 8006baa:	d01f      	beq.n	8006bec <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bae:	b9bb      	cbnz	r3, 8006be0 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	6853      	ldr	r3, [r2, #4]
 8006bb4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006bb8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bba:	6822      	ldr	r2, [r4, #0]
 8006bbc:	6893      	ldr	r3, [r2, #8]
 8006bbe:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006bc2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	6813      	ldr	r3, [r2, #0]
 8006bc8:	f043 0301 	orr.w	r3, r3, #1
 8006bcc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f7ff ffa1 	bl	8006b16 <UART_CheckIdleState>
 8006bd4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006bd6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8006bda:	f7fc ff91 	bl	8003b00 <HAL_UART_MspInit>
 8006bde:	e7d8      	b.n	8006b92 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006be0:	4620      	mov	r0, r4
 8006be2:	f7ff fe99 	bl	8006918 <UART_AdvFeatureConfig>
 8006be6:	e7e3      	b.n	8006bb0 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006be8:	2001      	movs	r0, #1
 8006bea:	4770      	bx	lr
}
 8006bec:	bd10      	pop	{r4, pc}

08006bee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bee:	4770      	bx	lr

08006bf0 <__libc_init_array>:
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	4e0d      	ldr	r6, [pc, #52]	; (8006c28 <__libc_init_array+0x38>)
 8006bf4:	4c0d      	ldr	r4, [pc, #52]	; (8006c2c <__libc_init_array+0x3c>)
 8006bf6:	1ba4      	subs	r4, r4, r6
 8006bf8:	10a4      	asrs	r4, r4, #2
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	42a5      	cmp	r5, r4
 8006bfe:	d109      	bne.n	8006c14 <__libc_init_array+0x24>
 8006c00:	4e0b      	ldr	r6, [pc, #44]	; (8006c30 <__libc_init_array+0x40>)
 8006c02:	4c0c      	ldr	r4, [pc, #48]	; (8006c34 <__libc_init_array+0x44>)
 8006c04:	f000 fc5c 	bl	80074c0 <_init>
 8006c08:	1ba4      	subs	r4, r4, r6
 8006c0a:	10a4      	asrs	r4, r4, #2
 8006c0c:	2500      	movs	r5, #0
 8006c0e:	42a5      	cmp	r5, r4
 8006c10:	d105      	bne.n	8006c1e <__libc_init_array+0x2e>
 8006c12:	bd70      	pop	{r4, r5, r6, pc}
 8006c14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c18:	4798      	blx	r3
 8006c1a:	3501      	adds	r5, #1
 8006c1c:	e7ee      	b.n	8006bfc <__libc_init_array+0xc>
 8006c1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c22:	4798      	blx	r3
 8006c24:	3501      	adds	r5, #1
 8006c26:	e7f2      	b.n	8006c0e <__libc_init_array+0x1e>
 8006c28:	08007f28 	.word	0x08007f28
 8006c2c:	08007f28 	.word	0x08007f28
 8006c30:	08007f28 	.word	0x08007f28
 8006c34:	08007f2c 	.word	0x08007f2c

08006c38 <memcpy>:
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	1e43      	subs	r3, r0, #1
 8006c3c:	440a      	add	r2, r1
 8006c3e:	4291      	cmp	r1, r2
 8006c40:	d100      	bne.n	8006c44 <memcpy+0xc>
 8006c42:	bd10      	pop	{r4, pc}
 8006c44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c4c:	e7f7      	b.n	8006c3e <memcpy+0x6>

08006c4e <memset>:
 8006c4e:	4402      	add	r2, r0
 8006c50:	4603      	mov	r3, r0
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d100      	bne.n	8006c58 <memset+0xa>
 8006c56:	4770      	bx	lr
 8006c58:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5c:	e7f9      	b.n	8006c52 <memset+0x4>

08006c5e <strncmp>:
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	b16a      	cbz	r2, 8006c7e <strncmp+0x20>
 8006c62:	3901      	subs	r1, #1
 8006c64:	1884      	adds	r4, r0, r2
 8006c66:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006c6a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d103      	bne.n	8006c7a <strncmp+0x1c>
 8006c72:	42a0      	cmp	r0, r4
 8006c74:	d001      	beq.n	8006c7a <strncmp+0x1c>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f5      	bne.n	8006c66 <strncmp+0x8>
 8006c7a:	1a98      	subs	r0, r3, r2
 8006c7c:	bd10      	pop	{r4, pc}
 8006c7e:	4610      	mov	r0, r2
 8006c80:	bd10      	pop	{r4, pc}

08006c82 <_vsiprintf_r>:
 8006c82:	b510      	push	{r4, lr}
 8006c84:	b09a      	sub	sp, #104	; 0x68
 8006c86:	f44f 7402 	mov.w	r4, #520	; 0x208
 8006c8a:	9100      	str	r1, [sp, #0]
 8006c8c:	9104      	str	r1, [sp, #16]
 8006c8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c92:	9102      	str	r1, [sp, #8]
 8006c94:	9105      	str	r1, [sp, #20]
 8006c96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006c9a:	f8ad 100e 	strh.w	r1, [sp, #14]
 8006c9e:	4669      	mov	r1, sp
 8006ca0:	f8ad 400c 	strh.w	r4, [sp, #12]
 8006ca4:	f000 f86c 	bl	8006d80 <_svfiprintf_r>
 8006ca8:	9b00      	ldr	r3, [sp, #0]
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
 8006cae:	b01a      	add	sp, #104	; 0x68
 8006cb0:	bd10      	pop	{r4, pc}
	...

08006cb4 <vsiprintf>:
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	460a      	mov	r2, r1
 8006cb8:	4601      	mov	r1, r0
 8006cba:	4802      	ldr	r0, [pc, #8]	; (8006cc4 <vsiprintf+0x10>)
 8006cbc:	6800      	ldr	r0, [r0, #0]
 8006cbe:	f7ff bfe0 	b.w	8006c82 <_vsiprintf_r>
 8006cc2:	bf00      	nop
 8006cc4:	20000178 	.word	0x20000178

08006cc8 <__ssputs_r>:
 8006cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ccc:	688e      	ldr	r6, [r1, #8]
 8006cce:	429e      	cmp	r6, r3
 8006cd0:	4682      	mov	sl, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	4691      	mov	r9, r2
 8006cd6:	4698      	mov	r8, r3
 8006cd8:	d835      	bhi.n	8006d46 <__ssputs_r+0x7e>
 8006cda:	898a      	ldrh	r2, [r1, #12]
 8006cdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ce0:	d031      	beq.n	8006d46 <__ssputs_r+0x7e>
 8006ce2:	6825      	ldr	r5, [r4, #0]
 8006ce4:	6909      	ldr	r1, [r1, #16]
 8006ce6:	1a6f      	subs	r7, r5, r1
 8006ce8:	6965      	ldr	r5, [r4, #20]
 8006cea:	2302      	movs	r3, #2
 8006cec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cf0:	fb95 f5f3 	sdiv	r5, r5, r3
 8006cf4:	f108 0301 	add.w	r3, r8, #1
 8006cf8:	443b      	add	r3, r7
 8006cfa:	429d      	cmp	r5, r3
 8006cfc:	bf38      	it	cc
 8006cfe:	461d      	movcc	r5, r3
 8006d00:	0553      	lsls	r3, r2, #21
 8006d02:	d531      	bpl.n	8006d68 <__ssputs_r+0xa0>
 8006d04:	4629      	mov	r1, r5
 8006d06:	f000 fb2d 	bl	8007364 <_malloc_r>
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	b950      	cbnz	r0, 8006d24 <__ssputs_r+0x5c>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	f8ca 3000 	str.w	r3, [sl]
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d1a:	81a3      	strh	r3, [r4, #12]
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d24:	463a      	mov	r2, r7
 8006d26:	6921      	ldr	r1, [r4, #16]
 8006d28:	f7ff ff86 	bl	8006c38 <memcpy>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	6126      	str	r6, [r4, #16]
 8006d3a:	6165      	str	r5, [r4, #20]
 8006d3c:	443e      	add	r6, r7
 8006d3e:	1bed      	subs	r5, r5, r7
 8006d40:	6026      	str	r6, [r4, #0]
 8006d42:	60a5      	str	r5, [r4, #8]
 8006d44:	4646      	mov	r6, r8
 8006d46:	4546      	cmp	r6, r8
 8006d48:	bf28      	it	cs
 8006d4a:	4646      	movcs	r6, r8
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	4649      	mov	r1, r9
 8006d50:	6820      	ldr	r0, [r4, #0]
 8006d52:	f000 fa9f 	bl	8007294 <memmove>
 8006d56:	68a3      	ldr	r3, [r4, #8]
 8006d58:	1b9b      	subs	r3, r3, r6
 8006d5a:	60a3      	str	r3, [r4, #8]
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	441e      	add	r6, r3
 8006d60:	6026      	str	r6, [r4, #0]
 8006d62:	2000      	movs	r0, #0
 8006d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d68:	462a      	mov	r2, r5
 8006d6a:	f000 fb59 	bl	8007420 <_realloc_r>
 8006d6e:	4606      	mov	r6, r0
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d1e1      	bne.n	8006d38 <__ssputs_r+0x70>
 8006d74:	6921      	ldr	r1, [r4, #16]
 8006d76:	4650      	mov	r0, sl
 8006d78:	f000 faa6 	bl	80072c8 <_free_r>
 8006d7c:	e7c7      	b.n	8006d0e <__ssputs_r+0x46>
	...

08006d80 <_svfiprintf_r>:
 8006d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d84:	b09d      	sub	sp, #116	; 0x74
 8006d86:	4680      	mov	r8, r0
 8006d88:	9303      	str	r3, [sp, #12]
 8006d8a:	898b      	ldrh	r3, [r1, #12]
 8006d8c:	061c      	lsls	r4, r3, #24
 8006d8e:	460d      	mov	r5, r1
 8006d90:	4616      	mov	r6, r2
 8006d92:	d50f      	bpl.n	8006db4 <_svfiprintf_r+0x34>
 8006d94:	690b      	ldr	r3, [r1, #16]
 8006d96:	b96b      	cbnz	r3, 8006db4 <_svfiprintf_r+0x34>
 8006d98:	2140      	movs	r1, #64	; 0x40
 8006d9a:	f000 fae3 	bl	8007364 <_malloc_r>
 8006d9e:	6028      	str	r0, [r5, #0]
 8006da0:	6128      	str	r0, [r5, #16]
 8006da2:	b928      	cbnz	r0, 8006db0 <_svfiprintf_r+0x30>
 8006da4:	230c      	movs	r3, #12
 8006da6:	f8c8 3000 	str.w	r3, [r8]
 8006daa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dae:	e0c5      	b.n	8006f3c <_svfiprintf_r+0x1bc>
 8006db0:	2340      	movs	r3, #64	; 0x40
 8006db2:	616b      	str	r3, [r5, #20]
 8006db4:	2300      	movs	r3, #0
 8006db6:	9309      	str	r3, [sp, #36]	; 0x24
 8006db8:	2320      	movs	r3, #32
 8006dba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dbe:	2330      	movs	r3, #48	; 0x30
 8006dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dc4:	f04f 0b01 	mov.w	fp, #1
 8006dc8:	4637      	mov	r7, r6
 8006dca:	463c      	mov	r4, r7
 8006dcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d13c      	bne.n	8006e4e <_svfiprintf_r+0xce>
 8006dd4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006dd8:	d00b      	beq.n	8006df2 <_svfiprintf_r+0x72>
 8006dda:	4653      	mov	r3, sl
 8006ddc:	4632      	mov	r2, r6
 8006dde:	4629      	mov	r1, r5
 8006de0:	4640      	mov	r0, r8
 8006de2:	f7ff ff71 	bl	8006cc8 <__ssputs_r>
 8006de6:	3001      	adds	r0, #1
 8006de8:	f000 80a3 	beq.w	8006f32 <_svfiprintf_r+0x1b2>
 8006dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dee:	4453      	add	r3, sl
 8006df0:	9309      	str	r3, [sp, #36]	; 0x24
 8006df2:	783b      	ldrb	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 809c 	beq.w	8006f32 <_svfiprintf_r+0x1b2>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006e00:	9304      	str	r3, [sp, #16]
 8006e02:	9307      	str	r3, [sp, #28]
 8006e04:	9205      	str	r2, [sp, #20]
 8006e06:	9306      	str	r3, [sp, #24]
 8006e08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e0c:	931a      	str	r3, [sp, #104]	; 0x68
 8006e0e:	2205      	movs	r2, #5
 8006e10:	7821      	ldrb	r1, [r4, #0]
 8006e12:	4850      	ldr	r0, [pc, #320]	; (8006f54 <_svfiprintf_r+0x1d4>)
 8006e14:	f7f9 f9ec 	bl	80001f0 <memchr>
 8006e18:	1c67      	adds	r7, r4, #1
 8006e1a:	9b04      	ldr	r3, [sp, #16]
 8006e1c:	b9d8      	cbnz	r0, 8006e56 <_svfiprintf_r+0xd6>
 8006e1e:	06d9      	lsls	r1, r3, #27
 8006e20:	bf44      	itt	mi
 8006e22:	2220      	movmi	r2, #32
 8006e24:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e28:	071a      	lsls	r2, r3, #28
 8006e2a:	bf44      	itt	mi
 8006e2c:	222b      	movmi	r2, #43	; 0x2b
 8006e2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e32:	7822      	ldrb	r2, [r4, #0]
 8006e34:	2a2a      	cmp	r2, #42	; 0x2a
 8006e36:	d016      	beq.n	8006e66 <_svfiprintf_r+0xe6>
 8006e38:	9a07      	ldr	r2, [sp, #28]
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	200a      	movs	r0, #10
 8006e3e:	4627      	mov	r7, r4
 8006e40:	3401      	adds	r4, #1
 8006e42:	783b      	ldrb	r3, [r7, #0]
 8006e44:	3b30      	subs	r3, #48	; 0x30
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d951      	bls.n	8006eee <_svfiprintf_r+0x16e>
 8006e4a:	b1c9      	cbz	r1, 8006e80 <_svfiprintf_r+0x100>
 8006e4c:	e011      	b.n	8006e72 <_svfiprintf_r+0xf2>
 8006e4e:	2b25      	cmp	r3, #37	; 0x25
 8006e50:	d0c0      	beq.n	8006dd4 <_svfiprintf_r+0x54>
 8006e52:	4627      	mov	r7, r4
 8006e54:	e7b9      	b.n	8006dca <_svfiprintf_r+0x4a>
 8006e56:	4a3f      	ldr	r2, [pc, #252]	; (8006f54 <_svfiprintf_r+0x1d4>)
 8006e58:	1a80      	subs	r0, r0, r2
 8006e5a:	fa0b f000 	lsl.w	r0, fp, r0
 8006e5e:	4318      	orrs	r0, r3
 8006e60:	9004      	str	r0, [sp, #16]
 8006e62:	463c      	mov	r4, r7
 8006e64:	e7d3      	b.n	8006e0e <_svfiprintf_r+0x8e>
 8006e66:	9a03      	ldr	r2, [sp, #12]
 8006e68:	1d11      	adds	r1, r2, #4
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	9103      	str	r1, [sp, #12]
 8006e6e:	2a00      	cmp	r2, #0
 8006e70:	db01      	blt.n	8006e76 <_svfiprintf_r+0xf6>
 8006e72:	9207      	str	r2, [sp, #28]
 8006e74:	e004      	b.n	8006e80 <_svfiprintf_r+0x100>
 8006e76:	4252      	negs	r2, r2
 8006e78:	f043 0302 	orr.w	r3, r3, #2
 8006e7c:	9207      	str	r2, [sp, #28]
 8006e7e:	9304      	str	r3, [sp, #16]
 8006e80:	783b      	ldrb	r3, [r7, #0]
 8006e82:	2b2e      	cmp	r3, #46	; 0x2e
 8006e84:	d10e      	bne.n	8006ea4 <_svfiprintf_r+0x124>
 8006e86:	787b      	ldrb	r3, [r7, #1]
 8006e88:	2b2a      	cmp	r3, #42	; 0x2a
 8006e8a:	f107 0101 	add.w	r1, r7, #1
 8006e8e:	d132      	bne.n	8006ef6 <_svfiprintf_r+0x176>
 8006e90:	9b03      	ldr	r3, [sp, #12]
 8006e92:	1d1a      	adds	r2, r3, #4
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	9203      	str	r2, [sp, #12]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bfb8      	it	lt
 8006e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ea0:	3702      	adds	r7, #2
 8006ea2:	9305      	str	r3, [sp, #20]
 8006ea4:	4c2c      	ldr	r4, [pc, #176]	; (8006f58 <_svfiprintf_r+0x1d8>)
 8006ea6:	7839      	ldrb	r1, [r7, #0]
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7f9 f9a0 	bl	80001f0 <memchr>
 8006eb0:	b138      	cbz	r0, 8006ec2 <_svfiprintf_r+0x142>
 8006eb2:	2340      	movs	r3, #64	; 0x40
 8006eb4:	1b00      	subs	r0, r0, r4
 8006eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	4303      	orrs	r3, r0
 8006ebe:	9304      	str	r3, [sp, #16]
 8006ec0:	3701      	adds	r7, #1
 8006ec2:	7839      	ldrb	r1, [r7, #0]
 8006ec4:	4825      	ldr	r0, [pc, #148]	; (8006f5c <_svfiprintf_r+0x1dc>)
 8006ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006eca:	2206      	movs	r2, #6
 8006ecc:	1c7e      	adds	r6, r7, #1
 8006ece:	f7f9 f98f 	bl	80001f0 <memchr>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d035      	beq.n	8006f42 <_svfiprintf_r+0x1c2>
 8006ed6:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <_svfiprintf_r+0x1e0>)
 8006ed8:	b9fb      	cbnz	r3, 8006f1a <_svfiprintf_r+0x19a>
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	3307      	adds	r3, #7
 8006ede:	f023 0307 	bic.w	r3, r3, #7
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	9303      	str	r3, [sp, #12]
 8006ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee8:	444b      	add	r3, r9
 8006eea:	9309      	str	r3, [sp, #36]	; 0x24
 8006eec:	e76c      	b.n	8006dc8 <_svfiprintf_r+0x48>
 8006eee:	fb00 3202 	mla	r2, r0, r2, r3
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	e7a3      	b.n	8006e3e <_svfiprintf_r+0xbe>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	9305      	str	r3, [sp, #20]
 8006efa:	4618      	mov	r0, r3
 8006efc:	240a      	movs	r4, #10
 8006efe:	460f      	mov	r7, r1
 8006f00:	3101      	adds	r1, #1
 8006f02:	783a      	ldrb	r2, [r7, #0]
 8006f04:	3a30      	subs	r2, #48	; 0x30
 8006f06:	2a09      	cmp	r2, #9
 8006f08:	d903      	bls.n	8006f12 <_svfiprintf_r+0x192>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0ca      	beq.n	8006ea4 <_svfiprintf_r+0x124>
 8006f0e:	9005      	str	r0, [sp, #20]
 8006f10:	e7c8      	b.n	8006ea4 <_svfiprintf_r+0x124>
 8006f12:	fb04 2000 	mla	r0, r4, r0, r2
 8006f16:	2301      	movs	r3, #1
 8006f18:	e7f1      	b.n	8006efe <_svfiprintf_r+0x17e>
 8006f1a:	ab03      	add	r3, sp, #12
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	462a      	mov	r2, r5
 8006f20:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <_svfiprintf_r+0x1e4>)
 8006f22:	a904      	add	r1, sp, #16
 8006f24:	4640      	mov	r0, r8
 8006f26:	f3af 8000 	nop.w
 8006f2a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f2e:	4681      	mov	r9, r0
 8006f30:	d1d9      	bne.n	8006ee6 <_svfiprintf_r+0x166>
 8006f32:	89ab      	ldrh	r3, [r5, #12]
 8006f34:	065b      	lsls	r3, r3, #25
 8006f36:	f53f af38 	bmi.w	8006daa <_svfiprintf_r+0x2a>
 8006f3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f3c:	b01d      	add	sp, #116	; 0x74
 8006f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f42:	ab03      	add	r3, sp, #12
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	462a      	mov	r2, r5
 8006f48:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <_svfiprintf_r+0x1e4>)
 8006f4a:	a904      	add	r1, sp, #16
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	f000 f881 	bl	8007054 <_printf_i>
 8006f52:	e7ea      	b.n	8006f2a <_svfiprintf_r+0x1aa>
 8006f54:	08007eec 	.word	0x08007eec
 8006f58:	08007ef2 	.word	0x08007ef2
 8006f5c:	08007ef6 	.word	0x08007ef6
 8006f60:	00000000 	.word	0x00000000
 8006f64:	08006cc9 	.word	0x08006cc9

08006f68 <_printf_common>:
 8006f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f6c:	4691      	mov	r9, r2
 8006f6e:	461f      	mov	r7, r3
 8006f70:	688a      	ldr	r2, [r1, #8]
 8006f72:	690b      	ldr	r3, [r1, #16]
 8006f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	bfb8      	it	lt
 8006f7c:	4613      	movlt	r3, r2
 8006f7e:	f8c9 3000 	str.w	r3, [r9]
 8006f82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f86:	4606      	mov	r6, r0
 8006f88:	460c      	mov	r4, r1
 8006f8a:	b112      	cbz	r2, 8006f92 <_printf_common+0x2a>
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	f8c9 3000 	str.w	r3, [r9]
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	0699      	lsls	r1, r3, #26
 8006f96:	bf42      	ittt	mi
 8006f98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f9c:	3302      	addmi	r3, #2
 8006f9e:	f8c9 3000 	strmi.w	r3, [r9]
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	f015 0506 	ands.w	r5, r5, #6
 8006fa8:	d107      	bne.n	8006fba <_printf_common+0x52>
 8006faa:	f104 0a19 	add.w	sl, r4, #25
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	429d      	cmp	r5, r3
 8006fb8:	db29      	blt.n	800700e <_printf_common+0xa6>
 8006fba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	3300      	adds	r3, #0
 8006fc2:	bf18      	it	ne
 8006fc4:	2301      	movne	r3, #1
 8006fc6:	0692      	lsls	r2, r2, #26
 8006fc8:	d42e      	bmi.n	8007028 <_printf_common+0xc0>
 8006fca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fce:	4639      	mov	r1, r7
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	47c0      	blx	r8
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d021      	beq.n	800701c <_printf_common+0xb4>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	68e5      	ldr	r5, [r4, #12]
 8006fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8006fe0:	f003 0306 	and.w	r3, r3, #6
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	bf08      	it	eq
 8006fe8:	1aad      	subeq	r5, r5, r2
 8006fea:	68a3      	ldr	r3, [r4, #8]
 8006fec:	6922      	ldr	r2, [r4, #16]
 8006fee:	bf0c      	ite	eq
 8006ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff4:	2500      	movne	r5, #0
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	bfc4      	itt	gt
 8006ffa:	1a9b      	subgt	r3, r3, r2
 8006ffc:	18ed      	addgt	r5, r5, r3
 8006ffe:	f04f 0900 	mov.w	r9, #0
 8007002:	341a      	adds	r4, #26
 8007004:	454d      	cmp	r5, r9
 8007006:	d11b      	bne.n	8007040 <_printf_common+0xd8>
 8007008:	2000      	movs	r0, #0
 800700a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800700e:	2301      	movs	r3, #1
 8007010:	4652      	mov	r2, sl
 8007012:	4639      	mov	r1, r7
 8007014:	4630      	mov	r0, r6
 8007016:	47c0      	blx	r8
 8007018:	3001      	adds	r0, #1
 800701a:	d103      	bne.n	8007024 <_printf_common+0xbc>
 800701c:	f04f 30ff 	mov.w	r0, #4294967295
 8007020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007024:	3501      	adds	r5, #1
 8007026:	e7c2      	b.n	8006fae <_printf_common+0x46>
 8007028:	18e1      	adds	r1, r4, r3
 800702a:	1c5a      	adds	r2, r3, #1
 800702c:	2030      	movs	r0, #48	; 0x30
 800702e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007032:	4422      	add	r2, r4
 8007034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800703c:	3302      	adds	r3, #2
 800703e:	e7c4      	b.n	8006fca <_printf_common+0x62>
 8007040:	2301      	movs	r3, #1
 8007042:	4622      	mov	r2, r4
 8007044:	4639      	mov	r1, r7
 8007046:	4630      	mov	r0, r6
 8007048:	47c0      	blx	r8
 800704a:	3001      	adds	r0, #1
 800704c:	d0e6      	beq.n	800701c <_printf_common+0xb4>
 800704e:	f109 0901 	add.w	r9, r9, #1
 8007052:	e7d7      	b.n	8007004 <_printf_common+0x9c>

08007054 <_printf_i>:
 8007054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007058:	4617      	mov	r7, r2
 800705a:	7e0a      	ldrb	r2, [r1, #24]
 800705c:	b085      	sub	sp, #20
 800705e:	2a6e      	cmp	r2, #110	; 0x6e
 8007060:	4698      	mov	r8, r3
 8007062:	4606      	mov	r6, r0
 8007064:	460c      	mov	r4, r1
 8007066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007068:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800706c:	f000 80bc 	beq.w	80071e8 <_printf_i+0x194>
 8007070:	d81a      	bhi.n	80070a8 <_printf_i+0x54>
 8007072:	2a63      	cmp	r2, #99	; 0x63
 8007074:	d02e      	beq.n	80070d4 <_printf_i+0x80>
 8007076:	d80a      	bhi.n	800708e <_printf_i+0x3a>
 8007078:	2a00      	cmp	r2, #0
 800707a:	f000 80c8 	beq.w	800720e <_printf_i+0x1ba>
 800707e:	2a58      	cmp	r2, #88	; 0x58
 8007080:	f000 808a 	beq.w	8007198 <_printf_i+0x144>
 8007084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007088:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800708c:	e02a      	b.n	80070e4 <_printf_i+0x90>
 800708e:	2a64      	cmp	r2, #100	; 0x64
 8007090:	d001      	beq.n	8007096 <_printf_i+0x42>
 8007092:	2a69      	cmp	r2, #105	; 0x69
 8007094:	d1f6      	bne.n	8007084 <_printf_i+0x30>
 8007096:	6821      	ldr	r1, [r4, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800709e:	d023      	beq.n	80070e8 <_printf_i+0x94>
 80070a0:	1d11      	adds	r1, r2, #4
 80070a2:	6019      	str	r1, [r3, #0]
 80070a4:	6813      	ldr	r3, [r2, #0]
 80070a6:	e027      	b.n	80070f8 <_printf_i+0xa4>
 80070a8:	2a73      	cmp	r2, #115	; 0x73
 80070aa:	f000 80b4 	beq.w	8007216 <_printf_i+0x1c2>
 80070ae:	d808      	bhi.n	80070c2 <_printf_i+0x6e>
 80070b0:	2a6f      	cmp	r2, #111	; 0x6f
 80070b2:	d02a      	beq.n	800710a <_printf_i+0xb6>
 80070b4:	2a70      	cmp	r2, #112	; 0x70
 80070b6:	d1e5      	bne.n	8007084 <_printf_i+0x30>
 80070b8:	680a      	ldr	r2, [r1, #0]
 80070ba:	f042 0220 	orr.w	r2, r2, #32
 80070be:	600a      	str	r2, [r1, #0]
 80070c0:	e003      	b.n	80070ca <_printf_i+0x76>
 80070c2:	2a75      	cmp	r2, #117	; 0x75
 80070c4:	d021      	beq.n	800710a <_printf_i+0xb6>
 80070c6:	2a78      	cmp	r2, #120	; 0x78
 80070c8:	d1dc      	bne.n	8007084 <_printf_i+0x30>
 80070ca:	2278      	movs	r2, #120	; 0x78
 80070cc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80070d0:	496e      	ldr	r1, [pc, #440]	; (800728c <_printf_i+0x238>)
 80070d2:	e064      	b.n	800719e <_printf_i+0x14a>
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80070da:	1d11      	adds	r1, r2, #4
 80070dc:	6019      	str	r1, [r3, #0]
 80070de:	6813      	ldr	r3, [r2, #0]
 80070e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0a3      	b.n	8007230 <_printf_i+0x1dc>
 80070e8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80070ec:	f102 0104 	add.w	r1, r2, #4
 80070f0:	6019      	str	r1, [r3, #0]
 80070f2:	d0d7      	beq.n	80070a4 <_printf_i+0x50>
 80070f4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	da03      	bge.n	8007104 <_printf_i+0xb0>
 80070fc:	222d      	movs	r2, #45	; 0x2d
 80070fe:	425b      	negs	r3, r3
 8007100:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007104:	4962      	ldr	r1, [pc, #392]	; (8007290 <_printf_i+0x23c>)
 8007106:	220a      	movs	r2, #10
 8007108:	e017      	b.n	800713a <_printf_i+0xe6>
 800710a:	6820      	ldr	r0, [r4, #0]
 800710c:	6819      	ldr	r1, [r3, #0]
 800710e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007112:	d003      	beq.n	800711c <_printf_i+0xc8>
 8007114:	1d08      	adds	r0, r1, #4
 8007116:	6018      	str	r0, [r3, #0]
 8007118:	680b      	ldr	r3, [r1, #0]
 800711a:	e006      	b.n	800712a <_printf_i+0xd6>
 800711c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007120:	f101 0004 	add.w	r0, r1, #4
 8007124:	6018      	str	r0, [r3, #0]
 8007126:	d0f7      	beq.n	8007118 <_printf_i+0xc4>
 8007128:	880b      	ldrh	r3, [r1, #0]
 800712a:	4959      	ldr	r1, [pc, #356]	; (8007290 <_printf_i+0x23c>)
 800712c:	2a6f      	cmp	r2, #111	; 0x6f
 800712e:	bf14      	ite	ne
 8007130:	220a      	movne	r2, #10
 8007132:	2208      	moveq	r2, #8
 8007134:	2000      	movs	r0, #0
 8007136:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800713a:	6865      	ldr	r5, [r4, #4]
 800713c:	60a5      	str	r5, [r4, #8]
 800713e:	2d00      	cmp	r5, #0
 8007140:	f2c0 809c 	blt.w	800727c <_printf_i+0x228>
 8007144:	6820      	ldr	r0, [r4, #0]
 8007146:	f020 0004 	bic.w	r0, r0, #4
 800714a:	6020      	str	r0, [r4, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d13f      	bne.n	80071d0 <_printf_i+0x17c>
 8007150:	2d00      	cmp	r5, #0
 8007152:	f040 8095 	bne.w	8007280 <_printf_i+0x22c>
 8007156:	4675      	mov	r5, lr
 8007158:	2a08      	cmp	r2, #8
 800715a:	d10b      	bne.n	8007174 <_printf_i+0x120>
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	07da      	lsls	r2, r3, #31
 8007160:	d508      	bpl.n	8007174 <_printf_i+0x120>
 8007162:	6923      	ldr	r3, [r4, #16]
 8007164:	6862      	ldr	r2, [r4, #4]
 8007166:	429a      	cmp	r2, r3
 8007168:	bfde      	ittt	le
 800716a:	2330      	movle	r3, #48	; 0x30
 800716c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007170:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007174:	ebae 0305 	sub.w	r3, lr, r5
 8007178:	6123      	str	r3, [r4, #16]
 800717a:	f8cd 8000 	str.w	r8, [sp]
 800717e:	463b      	mov	r3, r7
 8007180:	aa03      	add	r2, sp, #12
 8007182:	4621      	mov	r1, r4
 8007184:	4630      	mov	r0, r6
 8007186:	f7ff feef 	bl	8006f68 <_printf_common>
 800718a:	3001      	adds	r0, #1
 800718c:	d155      	bne.n	800723a <_printf_i+0x1e6>
 800718e:	f04f 30ff 	mov.w	r0, #4294967295
 8007192:	b005      	add	sp, #20
 8007194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007198:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800719c:	493c      	ldr	r1, [pc, #240]	; (8007290 <_printf_i+0x23c>)
 800719e:	6822      	ldr	r2, [r4, #0]
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80071a6:	f100 0504 	add.w	r5, r0, #4
 80071aa:	601d      	str	r5, [r3, #0]
 80071ac:	d001      	beq.n	80071b2 <_printf_i+0x15e>
 80071ae:	6803      	ldr	r3, [r0, #0]
 80071b0:	e002      	b.n	80071b8 <_printf_i+0x164>
 80071b2:	0655      	lsls	r5, r2, #25
 80071b4:	d5fb      	bpl.n	80071ae <_printf_i+0x15a>
 80071b6:	8803      	ldrh	r3, [r0, #0]
 80071b8:	07d0      	lsls	r0, r2, #31
 80071ba:	bf44      	itt	mi
 80071bc:	f042 0220 	orrmi.w	r2, r2, #32
 80071c0:	6022      	strmi	r2, [r4, #0]
 80071c2:	b91b      	cbnz	r3, 80071cc <_printf_i+0x178>
 80071c4:	6822      	ldr	r2, [r4, #0]
 80071c6:	f022 0220 	bic.w	r2, r2, #32
 80071ca:	6022      	str	r2, [r4, #0]
 80071cc:	2210      	movs	r2, #16
 80071ce:	e7b1      	b.n	8007134 <_printf_i+0xe0>
 80071d0:	4675      	mov	r5, lr
 80071d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80071d6:	fb02 3310 	mls	r3, r2, r0, r3
 80071da:	5ccb      	ldrb	r3, [r1, r3]
 80071dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80071e0:	4603      	mov	r3, r0
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d1f5      	bne.n	80071d2 <_printf_i+0x17e>
 80071e6:	e7b7      	b.n	8007158 <_printf_i+0x104>
 80071e8:	6808      	ldr	r0, [r1, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	6949      	ldr	r1, [r1, #20]
 80071ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80071f2:	d004      	beq.n	80071fe <_printf_i+0x1aa>
 80071f4:	1d10      	adds	r0, r2, #4
 80071f6:	6018      	str	r0, [r3, #0]
 80071f8:	6813      	ldr	r3, [r2, #0]
 80071fa:	6019      	str	r1, [r3, #0]
 80071fc:	e007      	b.n	800720e <_printf_i+0x1ba>
 80071fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007202:	f102 0004 	add.w	r0, r2, #4
 8007206:	6018      	str	r0, [r3, #0]
 8007208:	6813      	ldr	r3, [r2, #0]
 800720a:	d0f6      	beq.n	80071fa <_printf_i+0x1a6>
 800720c:	8019      	strh	r1, [r3, #0]
 800720e:	2300      	movs	r3, #0
 8007210:	6123      	str	r3, [r4, #16]
 8007212:	4675      	mov	r5, lr
 8007214:	e7b1      	b.n	800717a <_printf_i+0x126>
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	1d11      	adds	r1, r2, #4
 800721a:	6019      	str	r1, [r3, #0]
 800721c:	6815      	ldr	r5, [r2, #0]
 800721e:	6862      	ldr	r2, [r4, #4]
 8007220:	2100      	movs	r1, #0
 8007222:	4628      	mov	r0, r5
 8007224:	f7f8 ffe4 	bl	80001f0 <memchr>
 8007228:	b108      	cbz	r0, 800722e <_printf_i+0x1da>
 800722a:	1b40      	subs	r0, r0, r5
 800722c:	6060      	str	r0, [r4, #4]
 800722e:	6863      	ldr	r3, [r4, #4]
 8007230:	6123      	str	r3, [r4, #16]
 8007232:	2300      	movs	r3, #0
 8007234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007238:	e79f      	b.n	800717a <_printf_i+0x126>
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	462a      	mov	r2, r5
 800723e:	4639      	mov	r1, r7
 8007240:	4630      	mov	r0, r6
 8007242:	47c0      	blx	r8
 8007244:	3001      	adds	r0, #1
 8007246:	d0a2      	beq.n	800718e <_printf_i+0x13a>
 8007248:	6823      	ldr	r3, [r4, #0]
 800724a:	079b      	lsls	r3, r3, #30
 800724c:	d507      	bpl.n	800725e <_printf_i+0x20a>
 800724e:	2500      	movs	r5, #0
 8007250:	f104 0919 	add.w	r9, r4, #25
 8007254:	68e3      	ldr	r3, [r4, #12]
 8007256:	9a03      	ldr	r2, [sp, #12]
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	429d      	cmp	r5, r3
 800725c:	db05      	blt.n	800726a <_printf_i+0x216>
 800725e:	68e0      	ldr	r0, [r4, #12]
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	4298      	cmp	r0, r3
 8007264:	bfb8      	it	lt
 8007266:	4618      	movlt	r0, r3
 8007268:	e793      	b.n	8007192 <_printf_i+0x13e>
 800726a:	2301      	movs	r3, #1
 800726c:	464a      	mov	r2, r9
 800726e:	4639      	mov	r1, r7
 8007270:	4630      	mov	r0, r6
 8007272:	47c0      	blx	r8
 8007274:	3001      	adds	r0, #1
 8007276:	d08a      	beq.n	800718e <_printf_i+0x13a>
 8007278:	3501      	adds	r5, #1
 800727a:	e7eb      	b.n	8007254 <_printf_i+0x200>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1a7      	bne.n	80071d0 <_printf_i+0x17c>
 8007280:	780b      	ldrb	r3, [r1, #0]
 8007282:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007286:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800728a:	e765      	b.n	8007158 <_printf_i+0x104>
 800728c:	08007f0e 	.word	0x08007f0e
 8007290:	08007efd 	.word	0x08007efd

08007294 <memmove>:
 8007294:	4288      	cmp	r0, r1
 8007296:	b510      	push	{r4, lr}
 8007298:	eb01 0302 	add.w	r3, r1, r2
 800729c:	d803      	bhi.n	80072a6 <memmove+0x12>
 800729e:	1e42      	subs	r2, r0, #1
 80072a0:	4299      	cmp	r1, r3
 80072a2:	d10c      	bne.n	80072be <memmove+0x2a>
 80072a4:	bd10      	pop	{r4, pc}
 80072a6:	4298      	cmp	r0, r3
 80072a8:	d2f9      	bcs.n	800729e <memmove+0xa>
 80072aa:	1881      	adds	r1, r0, r2
 80072ac:	1ad2      	subs	r2, r2, r3
 80072ae:	42d3      	cmn	r3, r2
 80072b0:	d100      	bne.n	80072b4 <memmove+0x20>
 80072b2:	bd10      	pop	{r4, pc}
 80072b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80072bc:	e7f7      	b.n	80072ae <memmove+0x1a>
 80072be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80072c6:	e7eb      	b.n	80072a0 <memmove+0xc>

080072c8 <_free_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4605      	mov	r5, r0
 80072cc:	2900      	cmp	r1, #0
 80072ce:	d045      	beq.n	800735c <_free_r+0x94>
 80072d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d4:	1f0c      	subs	r4, r1, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfb8      	it	lt
 80072da:	18e4      	addlt	r4, r4, r3
 80072dc:	f000 f8d6 	bl	800748c <__malloc_lock>
 80072e0:	4a1f      	ldr	r2, [pc, #124]	; (8007360 <_free_r+0x98>)
 80072e2:	6813      	ldr	r3, [r2, #0]
 80072e4:	4610      	mov	r0, r2
 80072e6:	b933      	cbnz	r3, 80072f6 <_free_r+0x2e>
 80072e8:	6063      	str	r3, [r4, #4]
 80072ea:	6014      	str	r4, [r2, #0]
 80072ec:	4628      	mov	r0, r5
 80072ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072f2:	f000 b8cc 	b.w	800748e <__malloc_unlock>
 80072f6:	42a3      	cmp	r3, r4
 80072f8:	d90c      	bls.n	8007314 <_free_r+0x4c>
 80072fa:	6821      	ldr	r1, [r4, #0]
 80072fc:	1862      	adds	r2, r4, r1
 80072fe:	4293      	cmp	r3, r2
 8007300:	bf04      	itt	eq
 8007302:	681a      	ldreq	r2, [r3, #0]
 8007304:	685b      	ldreq	r3, [r3, #4]
 8007306:	6063      	str	r3, [r4, #4]
 8007308:	bf04      	itt	eq
 800730a:	1852      	addeq	r2, r2, r1
 800730c:	6022      	streq	r2, [r4, #0]
 800730e:	6004      	str	r4, [r0, #0]
 8007310:	e7ec      	b.n	80072ec <_free_r+0x24>
 8007312:	4613      	mov	r3, r2
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	b10a      	cbz	r2, 800731c <_free_r+0x54>
 8007318:	42a2      	cmp	r2, r4
 800731a:	d9fa      	bls.n	8007312 <_free_r+0x4a>
 800731c:	6819      	ldr	r1, [r3, #0]
 800731e:	1858      	adds	r0, r3, r1
 8007320:	42a0      	cmp	r0, r4
 8007322:	d10b      	bne.n	800733c <_free_r+0x74>
 8007324:	6820      	ldr	r0, [r4, #0]
 8007326:	4401      	add	r1, r0
 8007328:	1858      	adds	r0, r3, r1
 800732a:	4282      	cmp	r2, r0
 800732c:	6019      	str	r1, [r3, #0]
 800732e:	d1dd      	bne.n	80072ec <_free_r+0x24>
 8007330:	6810      	ldr	r0, [r2, #0]
 8007332:	6852      	ldr	r2, [r2, #4]
 8007334:	605a      	str	r2, [r3, #4]
 8007336:	4401      	add	r1, r0
 8007338:	6019      	str	r1, [r3, #0]
 800733a:	e7d7      	b.n	80072ec <_free_r+0x24>
 800733c:	d902      	bls.n	8007344 <_free_r+0x7c>
 800733e:	230c      	movs	r3, #12
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	e7d3      	b.n	80072ec <_free_r+0x24>
 8007344:	6820      	ldr	r0, [r4, #0]
 8007346:	1821      	adds	r1, r4, r0
 8007348:	428a      	cmp	r2, r1
 800734a:	bf04      	itt	eq
 800734c:	6811      	ldreq	r1, [r2, #0]
 800734e:	6852      	ldreq	r2, [r2, #4]
 8007350:	6062      	str	r2, [r4, #4]
 8007352:	bf04      	itt	eq
 8007354:	1809      	addeq	r1, r1, r0
 8007356:	6021      	streq	r1, [r4, #0]
 8007358:	605c      	str	r4, [r3, #4]
 800735a:	e7c7      	b.n	80072ec <_free_r+0x24>
 800735c:	bd38      	pop	{r3, r4, r5, pc}
 800735e:	bf00      	nop
 8007360:	200004a0 	.word	0x200004a0

08007364 <_malloc_r>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	1ccd      	adds	r5, r1, #3
 8007368:	f025 0503 	bic.w	r5, r5, #3
 800736c:	3508      	adds	r5, #8
 800736e:	2d0c      	cmp	r5, #12
 8007370:	bf38      	it	cc
 8007372:	250c      	movcc	r5, #12
 8007374:	2d00      	cmp	r5, #0
 8007376:	4606      	mov	r6, r0
 8007378:	db01      	blt.n	800737e <_malloc_r+0x1a>
 800737a:	42a9      	cmp	r1, r5
 800737c:	d903      	bls.n	8007386 <_malloc_r+0x22>
 800737e:	230c      	movs	r3, #12
 8007380:	6033      	str	r3, [r6, #0]
 8007382:	2000      	movs	r0, #0
 8007384:	bd70      	pop	{r4, r5, r6, pc}
 8007386:	f000 f881 	bl	800748c <__malloc_lock>
 800738a:	4a23      	ldr	r2, [pc, #140]	; (8007418 <_malloc_r+0xb4>)
 800738c:	6814      	ldr	r4, [r2, #0]
 800738e:	4621      	mov	r1, r4
 8007390:	b991      	cbnz	r1, 80073b8 <_malloc_r+0x54>
 8007392:	4c22      	ldr	r4, [pc, #136]	; (800741c <_malloc_r+0xb8>)
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	b91b      	cbnz	r3, 80073a0 <_malloc_r+0x3c>
 8007398:	4630      	mov	r0, r6
 800739a:	f000 f867 	bl	800746c <_sbrk_r>
 800739e:	6020      	str	r0, [r4, #0]
 80073a0:	4629      	mov	r1, r5
 80073a2:	4630      	mov	r0, r6
 80073a4:	f000 f862 	bl	800746c <_sbrk_r>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d126      	bne.n	80073fa <_malloc_r+0x96>
 80073ac:	230c      	movs	r3, #12
 80073ae:	6033      	str	r3, [r6, #0]
 80073b0:	4630      	mov	r0, r6
 80073b2:	f000 f86c 	bl	800748e <__malloc_unlock>
 80073b6:	e7e4      	b.n	8007382 <_malloc_r+0x1e>
 80073b8:	680b      	ldr	r3, [r1, #0]
 80073ba:	1b5b      	subs	r3, r3, r5
 80073bc:	d41a      	bmi.n	80073f4 <_malloc_r+0x90>
 80073be:	2b0b      	cmp	r3, #11
 80073c0:	d90f      	bls.n	80073e2 <_malloc_r+0x7e>
 80073c2:	600b      	str	r3, [r1, #0]
 80073c4:	50cd      	str	r5, [r1, r3]
 80073c6:	18cc      	adds	r4, r1, r3
 80073c8:	4630      	mov	r0, r6
 80073ca:	f000 f860 	bl	800748e <__malloc_unlock>
 80073ce:	f104 000b 	add.w	r0, r4, #11
 80073d2:	1d23      	adds	r3, r4, #4
 80073d4:	f020 0007 	bic.w	r0, r0, #7
 80073d8:	1ac3      	subs	r3, r0, r3
 80073da:	d01b      	beq.n	8007414 <_malloc_r+0xb0>
 80073dc:	425a      	negs	r2, r3
 80073de:	50e2      	str	r2, [r4, r3]
 80073e0:	bd70      	pop	{r4, r5, r6, pc}
 80073e2:	428c      	cmp	r4, r1
 80073e4:	bf0d      	iteet	eq
 80073e6:	6863      	ldreq	r3, [r4, #4]
 80073e8:	684b      	ldrne	r3, [r1, #4]
 80073ea:	6063      	strne	r3, [r4, #4]
 80073ec:	6013      	streq	r3, [r2, #0]
 80073ee:	bf18      	it	ne
 80073f0:	460c      	movne	r4, r1
 80073f2:	e7e9      	b.n	80073c8 <_malloc_r+0x64>
 80073f4:	460c      	mov	r4, r1
 80073f6:	6849      	ldr	r1, [r1, #4]
 80073f8:	e7ca      	b.n	8007390 <_malloc_r+0x2c>
 80073fa:	1cc4      	adds	r4, r0, #3
 80073fc:	f024 0403 	bic.w	r4, r4, #3
 8007400:	42a0      	cmp	r0, r4
 8007402:	d005      	beq.n	8007410 <_malloc_r+0xac>
 8007404:	1a21      	subs	r1, r4, r0
 8007406:	4630      	mov	r0, r6
 8007408:	f000 f830 	bl	800746c <_sbrk_r>
 800740c:	3001      	adds	r0, #1
 800740e:	d0cd      	beq.n	80073ac <_malloc_r+0x48>
 8007410:	6025      	str	r5, [r4, #0]
 8007412:	e7d9      	b.n	80073c8 <_malloc_r+0x64>
 8007414:	bd70      	pop	{r4, r5, r6, pc}
 8007416:	bf00      	nop
 8007418:	200004a0 	.word	0x200004a0
 800741c:	200004a4 	.word	0x200004a4

08007420 <_realloc_r>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	4607      	mov	r7, r0
 8007424:	4614      	mov	r4, r2
 8007426:	460e      	mov	r6, r1
 8007428:	b921      	cbnz	r1, 8007434 <_realloc_r+0x14>
 800742a:	4611      	mov	r1, r2
 800742c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007430:	f7ff bf98 	b.w	8007364 <_malloc_r>
 8007434:	b922      	cbnz	r2, 8007440 <_realloc_r+0x20>
 8007436:	f7ff ff47 	bl	80072c8 <_free_r>
 800743a:	4625      	mov	r5, r4
 800743c:	4628      	mov	r0, r5
 800743e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007440:	f000 f826 	bl	8007490 <_malloc_usable_size_r>
 8007444:	4284      	cmp	r4, r0
 8007446:	d90f      	bls.n	8007468 <_realloc_r+0x48>
 8007448:	4621      	mov	r1, r4
 800744a:	4638      	mov	r0, r7
 800744c:	f7ff ff8a 	bl	8007364 <_malloc_r>
 8007450:	4605      	mov	r5, r0
 8007452:	2800      	cmp	r0, #0
 8007454:	d0f2      	beq.n	800743c <_realloc_r+0x1c>
 8007456:	4631      	mov	r1, r6
 8007458:	4622      	mov	r2, r4
 800745a:	f7ff fbed 	bl	8006c38 <memcpy>
 800745e:	4631      	mov	r1, r6
 8007460:	4638      	mov	r0, r7
 8007462:	f7ff ff31 	bl	80072c8 <_free_r>
 8007466:	e7e9      	b.n	800743c <_realloc_r+0x1c>
 8007468:	4635      	mov	r5, r6
 800746a:	e7e7      	b.n	800743c <_realloc_r+0x1c>

0800746c <_sbrk_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4c06      	ldr	r4, [pc, #24]	; (8007488 <_sbrk_r+0x1c>)
 8007470:	2300      	movs	r3, #0
 8007472:	4605      	mov	r5, r0
 8007474:	4608      	mov	r0, r1
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	f000 f814 	bl	80074a4 <_sbrk>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_sbrk_r+0x1a>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	b103      	cbz	r3, 8007486 <_sbrk_r+0x1a>
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	2000101c 	.word	0x2000101c

0800748c <__malloc_lock>:
 800748c:	4770      	bx	lr

0800748e <__malloc_unlock>:
 800748e:	4770      	bx	lr

08007490 <_malloc_usable_size_r>:
 8007490:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007494:	2800      	cmp	r0, #0
 8007496:	f1a0 0004 	sub.w	r0, r0, #4
 800749a:	bfbc      	itt	lt
 800749c:	580b      	ldrlt	r3, [r1, r0]
 800749e:	18c0      	addlt	r0, r0, r3
 80074a0:	4770      	bx	lr
	...

080074a4 <_sbrk>:
 80074a4:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <_sbrk+0x14>)
 80074a6:	6819      	ldr	r1, [r3, #0]
 80074a8:	4602      	mov	r2, r0
 80074aa:	b909      	cbnz	r1, 80074b0 <_sbrk+0xc>
 80074ac:	4903      	ldr	r1, [pc, #12]	; (80074bc <_sbrk+0x18>)
 80074ae:	6019      	str	r1, [r3, #0]
 80074b0:	6818      	ldr	r0, [r3, #0]
 80074b2:	4402      	add	r2, r0
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	4770      	bx	lr
 80074b8:	200004a8 	.word	0x200004a8
 80074bc:	20001020 	.word	0x20001020

080074c0 <_init>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	bf00      	nop
 80074c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c6:	bc08      	pop	{r3}
 80074c8:	469e      	mov	lr, r3
 80074ca:	4770      	bx	lr

080074cc <_fini>:
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	bf00      	nop
 80074d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d2:	bc08      	pop	{r3}
 80074d4:	469e      	mov	lr, r3
 80074d6:	4770      	bx	lr
