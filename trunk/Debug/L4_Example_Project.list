
L4_Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e80  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08005014  08005014  00015014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000048  20000000  08005330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  00020048  2**0
                  CONTENTS
  8 .bss          000006f8  20000048  20000048  00020048  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000740  20000740  00020048  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 11 .debug_info   00032418  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000620d  00000000  00000000  00052490  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000016e0  00000000  00000000  000586a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001520  00000000  00000000  00059d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e824  00000000  00000000  0005b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000797a  00000000  00000000  00069ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0007143e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003988  00000000  00000000  000714bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000dea0  00000000  00000000  00074e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000048 	.word	0x20000048
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004ffc 	.word	0x08004ffc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000004c 	.word	0x2000004c
 80001d0:	08004ffc 	.word	0x08004ffc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
 *
 * @details Initializes applications.
 * @details Call system application to execute active applications.
 ****************************************************************************/
int  main()
{
 80004e4:	b508      	push	{r3, lr}
	/* Call to initial specific platform configuration */
    systemPreConfiguration();
 80004e6:	f000 ff5d 	bl	80013a4 <systemPreConfiguration>

    /* HAL TEST */
    GPIOInit();
 80004ea:	f000 fd55 	bl	8000f98 <GPIOInit>
    stm32L4Init();
 80004ee:	f000 ff43 	bl	8001378 <stm32L4Init>

    interruptsInit();
 80004f2:	f000 fd7b 	bl	8000fec <interruptsInit>
    interruptsStart();
 80004f6:	f000 fd91 	bl	800101c <interruptsStart>

    spiInit();
 80004fa:	f001 f835 	bl	8001568 <spiInit>
    spiStart();
 80004fe:	f001 f87b 	bl	80015f8 <spiStart>

    uartInit();
 8000502:	f001 f97f 	bl	8001804 <uartInit>
    uartStart();
 8000506:	f001 f9b7 	bl	8001878 <uartStart>

    FlashInit();
 800050a:	f000 fc49 	bl	8000da0 <FlashInit>
    SwTimerInit();
 800050e:	f000 fb0f 	bl	8000b30 <SwTimerInit>

    dmaInit();
 8000512:	f000 fba1 	bl	8000c58 <dmaInit>
    dmaStart();
 8000516:	f000 fbd3 	bl	8000cc0 <dmaStart>
    sdInit();
 800051a:	f000 fa87 	bl	8000a2c <sdInit>
    sdStart();
 800051e:	f000 fab3 	bl	8000a88 <sdStart>
    /*\ HAL TEST */

	/* Applications Initialization */
    SchedulerInit();
 8000522:	f000 f939 	bl	8000798 <SchedulerInit>

    while (TRUE)
    {
        SchedulerNextSystemProcess();
 8000526:	f000 f9e5 	bl	80008f4 <SchedulerNextSystemProcess>
 800052a:	e7fc      	b.n	8000526 <main+0x42>

0800052c <initSystemApp>:
 *
 * @details Initializes HREG and SREG layers.
 * @details Initializes all applications
 ****************************************************************************/
void initSystemApp( void )
{
 800052c:	b508      	push	{r3, lr}
    requestPowerState = POWER_STATE_NO_REQUEST;
 800052e:	2200      	movs	r2, #0
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <initSystemApp+0x10>)
 8000532:	701a      	strb	r2, [r3, #0]

    initSregAll();    /* Initialise the SREG layer */
 8000534:	f000 f8bc 	bl	80006b0 <initSregAll>
 8000538:	bd08      	pop	{r3, pc}
 800053a:	bf00      	nop
 800053c:	2000007c 	.word	0x2000007c

08000540 <callSystemApp>:
 *
 * @details depending on current state, executes active applications.
 * @details calls system middleware task
 ****************************************************************************/
void callSystemApp( void )
{
 8000540:	b508      	push	{r3, lr}
    uint8_t systemState;

    /* HAL TEST */
    // GPIO
    GPIOWritePort(GPIO_LED_1, GPIO_TOGGLE);
 8000542:	2102      	movs	r1, #2
 8000544:	2000      	movs	r0, #0
 8000546:	f000 fc83 	bl	8000e50 <GPIOWritePort>
    /* END HAL TEST */

    /* System state machine */
    systemState = READ_SREG(SREG_SYSTEM_STATE);
 800054a:	2004      	movs	r0, #4
 800054c:	f000 f8cf 	bl	80006ee <readSreg>
 8000550:	b2c1      	uxtb	r1, r0
    //systemState = SYSTEM_APP_INIT_SHELL;
    switch ( systemState )
 8000552:	2904      	cmp	r1, #4
 8000554:	d82e      	bhi.n	80005b4 <callSystemApp+0x74>
 8000556:	e8df f001 	tbb	[pc, r1]
 800055a:	032c      	.short	0x032c
 800055c:	2d0e      	.short	0x2d0e
 800055e:	05          	.byte	0x05
 800055f:	00          	.byte	0x00
			break;
        
		case SYSTEM_APP_INIT:
			/* Application init dispather */
			
			systemState = SYSTEM_APP_ON;
 8000560:	2102      	movs	r1, #2
            break;
 8000562:	e027      	b.n	80005b4 <callSystemApp+0x74>

        case SYSTEM_APP_SLEPT:
			/* Application sleep dispather */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_WAKE_UP ) 
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <callSystemApp+0x7c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d123      	bne.n	80005b4 <callSystemApp+0x74>
            {
				/* Wake up */
                systemState = SYSTEM_APP_ON;
                requestPowerState = POWER_STATE_NO_REQUEST;
 800056c:	2100      	movs	r1, #0
 800056e:	4a13      	ldr	r2, [pc, #76]	; (80005bc <callSystemApp+0x7c>)
 8000570:	7011      	strb	r1, [r2, #0]
                systemState = SYSTEM_APP_ON;
 8000572:	4619      	mov	r1, r3
 8000574:	e01e      	b.n	80005b4 <callSystemApp+0x74>

        case SYSTEM_APP_ON:
			/* Application dispatcher */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_START_SHUTDOWN )
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <callSystemApp+0x7c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d007      	beq.n	800058e <callSystemApp+0x4e>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
                
                /* Power off */
                systemState = SYSTEM_APP_POWER_OFF;
            }
            else if ( requestPowerState == POWER_STATE_GO_TO_SLEEP )
 800057e:	2b03      	cmp	r3, #3
 8000580:	d00b      	beq.n	800059a <callSystemApp+0x5a>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
                
                /* Slept */
                systemState = SYSTEM_APP_SLEPT;
            }
            else if ( requestPowerState == POWER_STATE_REBOOT )
 8000582:	2b04      	cmp	r3, #4
 8000584:	d00f      	beq.n	80005a6 <callSystemApp+0x66>
                systemState = SYSTEM_APP_REBOOT;
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
            }
            
            /* Reset power state request */
            requestPowerState = POWER_STATE_NO_REQUEST;
 8000586:	2200      	movs	r2, #0
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <callSystemApp+0x7c>)
 800058a:	701a      	strb	r2, [r3, #0]
            break;
 800058c:	e012      	b.n	80005b4 <callSystemApp+0x74>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
 800058e:	210a      	movs	r1, #10
 8000590:	2005      	movs	r0, #5
 8000592:	f000 f8c7 	bl	8000724 <writeSreg>
                systemState = SYSTEM_APP_POWER_OFF;
 8000596:	2103      	movs	r1, #3
 8000598:	e7f5      	b.n	8000586 <callSystemApp+0x46>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
 800059a:	2101      	movs	r1, #1
 800059c:	2005      	movs	r0, #5
 800059e:	f000 f8c1 	bl	8000724 <writeSreg>
                systemState = SYSTEM_APP_SLEPT;
 80005a2:	2104      	movs	r1, #4
 80005a4:	e7ef      	b.n	8000586 <callSystemApp+0x46>
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
 80005a6:	2103      	movs	r1, #3
 80005a8:	2005      	movs	r0, #5
 80005aa:	f000 f8bb 	bl	8000724 <writeSreg>
                systemState = SYSTEM_APP_REBOOT;
 80005ae:	2105      	movs	r1, #5
 80005b0:	e7e9      	b.n	8000586 <callSystemApp+0x46>
			systemState = SYSTEM_APP_INIT;
 80005b2:	2101      	movs	r1, #1
			break;
        
    }
    
    /* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
 80005b4:	2004      	movs	r0, #4
 80005b6:	f000 f8b5 	bl	8000724 <writeSreg>
 80005ba:	bd08      	pop	{r3, pc}
 80005bc:	2000007c 	.word	0x2000007c

080005c0 <sregWrite>:
eError sregWrite(SREG sreg, uint32_t value)
{
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <sregWrite+0x38>)
 80005c2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80005c6:	7852      	ldrb	r2, [r2, #1]
	switch(SREGInstanceMap[sreg].type)
 80005c8:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d008      	beq.n	80005e2 <sregWrite+0x22>
 80005d0:	b11b      	cbz	r3, 80005da <sregWrite+0x1a>
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d00a      	beq.n	80005ec <sregWrite+0x2c>
			break;
		case SREG_UINT32:
			SREG32Context[index] = (uint32_t)value;
			break;
		default:
			success = RET_INVALID_PARAMETER;
 80005d6:	2005      	movs	r0, #5
			break;
	}

	return success;
}
 80005d8:	4770      	bx	lr
			SREG8Context[index] = (uint8_t)value;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <sregWrite+0x3c>)
 80005dc:	5499      	strb	r1, [r3, r2]
	eError success = RET_OK;
 80005de:	2000      	movs	r0, #0
			break;
 80005e0:	4770      	bx	lr
			SREG16Context[index] = (uint16_t)value;
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <sregWrite+0x40>)
 80005e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	eError success = RET_OK;
 80005e8:	2000      	movs	r0, #0
			break;
 80005ea:	4770      	bx	lr
			SREG32Context[index] = (uint32_t)value;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <sregWrite+0x44>)
 80005ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eError success = RET_OK;
 80005f2:	2000      	movs	r0, #0
			break;
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	08005044 	.word	0x08005044
 80005fc:	20000080 	.word	0x20000080
 8000600:	20000090 	.word	0x20000090
 8000604:	20000088 	.word	0x20000088

08000608 <sregReadParam>:
 * @param	sreg
 * @param	sregParam struct
 * @return  RET_OK or RET_FAIL
 ****************************************************************************/
eError sregReadParam(SREG sreg, tSREGParam *sregParam)
{
 8000608:	b430      	push	{r4, r5}
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 800060a:	4a22      	ldr	r2, [pc, #136]	; (8000694 <sregReadParam+0x8c>)
 800060c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8000610:	785b      	ldrb	r3, [r3, #1]
	switch(SREGInstanceMap[sreg].type)
 8000612:	f812 2020 	ldrb.w	r2, [r2, r0, lsl #2]
 8000616:	2a01      	cmp	r2, #1
 8000618:	d014      	beq.n	8000644 <sregReadParam+0x3c>
 800061a:	b11a      	cbz	r2, 8000624 <sregReadParam+0x1c>
 800061c:	2a02      	cmp	r2, #2
 800061e:	d025      	beq.n	800066c <sregReadParam+0x64>
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
			break;
		default:
			success = RET_INVALID_PARAMETER;
 8000620:	2005      	movs	r0, #5
 8000622:	e00d      	b.n	8000640 <sregReadParam+0x38>
			sregParam->Data = (uint32_t)SREG8Context[index];
 8000624:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <sregReadParam+0x90>)
 8000626:	5cd2      	ldrb	r2, [r2, r3]
 8000628:	600a      	str	r2, [r1, #0]
			sregParam->Init = (uint32_t)(SREG8InstanceMap[index].Init);
 800062a:	481c      	ldr	r0, [pc, #112]	; (800069c <sregReadParam+0x94>)
 800062c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000630:	18c2      	adds	r2, r0, r3
 8000632:	7894      	ldrb	r4, [r2, #2]
 8000634:	60cc      	str	r4, [r1, #12]
			sregParam->Max  = (uint32_t)(SREG8InstanceMap[index].Max);
 8000636:	5cc3      	ldrb	r3, [r0, r3]
 8000638:	604b      	str	r3, [r1, #4]
			sregParam->Min  = (uint32_t)(SREG8InstanceMap[index].Min);
 800063a:	7853      	ldrb	r3, [r2, #1]
 800063c:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 800063e:	2000      	movs	r0, #0
			break;
	}

	return success;
}
 8000640:	bc30      	pop	{r4, r5}
 8000642:	4770      	bx	lr
			sregParam->Data  = (uint32_t)SREG16Context[index];
 8000644:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <sregReadParam+0x98>)
 8000646:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800064a:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG16InstanceMap[index].Init);
 800064c:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <sregReadParam+0x9c>)
 800064e:	0058      	lsls	r0, r3, #1
 8000650:	18c5      	adds	r5, r0, r3
 8000652:	006c      	lsls	r4, r5, #1
 8000654:	1915      	adds	r5, r2, r4
 8000656:	88ad      	ldrh	r5, [r5, #4]
 8000658:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG16InstanceMap[index].Max);
 800065a:	5b14      	ldrh	r4, [r2, r4]
 800065c:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG16InstanceMap[index].Min);
 800065e:	4403      	add	r3, r0
 8000660:	0058      	lsls	r0, r3, #1
 8000662:	4402      	add	r2, r0
 8000664:	8853      	ldrh	r3, [r2, #2]
 8000666:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000668:	2000      	movs	r0, #0
			break;
 800066a:	e7e9      	b.n	8000640 <sregReadParam+0x38>
			sregParam->Data  = (uint32_t)SREG32Context[index];
 800066c:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <sregReadParam+0xa0>)
 800066e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000672:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <sregReadParam+0xa4>)
 8000676:	0058      	lsls	r0, r3, #1
 8000678:	18c5      	adds	r5, r0, r3
 800067a:	00ac      	lsls	r4, r5, #2
 800067c:	1915      	adds	r5, r2, r4
 800067e:	68ad      	ldr	r5, [r5, #8]
 8000680:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
 8000682:	5914      	ldr	r4, [r2, r4]
 8000684:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
 8000686:	4403      	add	r3, r0
 8000688:	0098      	lsls	r0, r3, #2
 800068a:	4402      	add	r2, r0
 800068c:	6853      	ldr	r3, [r2, #4]
 800068e:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000690:	2000      	movs	r0, #0
			break;
 8000692:	e7d5      	b.n	8000640 <sregReadParam+0x38>
 8000694:	08005044 	.word	0x08005044
 8000698:	20000080 	.word	0x20000080
 800069c:	0800502c 	.word	0x0800502c
 80006a0:	20000090 	.word	0x20000090
 80006a4:	08005014 	.word	0x08005014
 80006a8:	20000088 	.word	0x20000088
 80006ac:	08005014 	.word	0x08005014

080006b0 <initSregAll>:
{
 80006b0:	b510      	push	{r4, lr}
 80006b2:	b084      	sub	sp, #16
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 80006b4:	2400      	movs	r4, #0
 80006b6:	e009      	b.n	80006cc <initSregAll+0x1c>
		sregReadParam(sreg, &sregParam);
 80006b8:	4669      	mov	r1, sp
 80006ba:	4620      	mov	r0, r4
 80006bc:	f7ff ffa4 	bl	8000608 <sregReadParam>
		sregWrite(sreg, sregParam.Init);
 80006c0:	9903      	ldr	r1, [sp, #12]
 80006c2:	4620      	mov	r0, r4
 80006c4:	f7ff ff7c 	bl	80005c0 <sregWrite>
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 80006c8:	3401      	adds	r4, #1
 80006ca:	b2e4      	uxtb	r4, r4
 80006cc:	2c08      	cmp	r4, #8
 80006ce:	d9f3      	bls.n	80006b8 <initSregAll+0x8>
}
 80006d0:	b004      	add	sp, #16
 80006d2:	bd10      	pop	{r4, pc}

080006d4 <readSregTableStd>:
{
 80006d4:	b500      	push	{lr}
 80006d6:	b085      	sub	sp, #20
	success = sregReadParam(sreg, &sregParam);
 80006d8:	4669      	mov	r1, sp
 80006da:	f7ff ff95 	bl	8000608 <sregReadParam>
	if ( success == RET_OK )
 80006de:	b120      	cbz	r0, 80006ea <readSregTableStd+0x16>
    uint32_t ret_data = 0xffffffff;
 80006e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80006e4:	b005      	add	sp, #20
 80006e6:	f85d fb04 	ldr.w	pc, [sp], #4
		ret_data = sregParam.Data;
 80006ea:	9800      	ldr	r0, [sp, #0]
 80006ec:	e7fa      	b.n	80006e4 <readSregTableStd+0x10>

080006ee <readSreg>:
{
 80006ee:	b508      	push	{r3, lr}
	return readSregTableStd(sreg);
 80006f0:	f7ff fff0 	bl	80006d4 <readSregTableStd>
}
 80006f4:	bd08      	pop	{r3, pc}

080006f6 <writeSregTableStd>:
{
 80006f6:	b570      	push	{r4, r5, r6, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	4606      	mov	r6, r0
 80006fc:	460d      	mov	r5, r1
	result = sregReadParam(sreg, &sregParam);
 80006fe:	4669      	mov	r1, sp
 8000700:	f7ff ff82 	bl	8000608 <sregReadParam>
 8000704:	4604      	mov	r4, r0
	if ( value > sregParam.Max )
 8000706:	9901      	ldr	r1, [sp, #4]
 8000708:	42a9      	cmp	r1, r5
 800070a:	d303      	bcc.n	8000714 <writeSregTableStd+0x1e>
	else if ( value < sregParam.Min )
 800070c:	9902      	ldr	r1, [sp, #8]
 800070e:	428d      	cmp	r5, r1
 8000710:	d300      	bcc.n	8000714 <writeSregTableStd+0x1e>
 8000712:	4629      	mov	r1, r5
	if ( result == RET_OK )
 8000714:	b114      	cbz	r4, 800071c <writeSregTableStd+0x26>
}
 8000716:	4620      	mov	r0, r4
 8000718:	b004      	add	sp, #16
 800071a:	bd70      	pop	{r4, r5, r6, pc}
		sregWrite(sreg, value);
 800071c:	4630      	mov	r0, r6
 800071e:	f7ff ff4f 	bl	80005c0 <sregWrite>
 8000722:	e7f8      	b.n	8000716 <writeSregTableStd+0x20>

08000724 <writeSreg>:
{
 8000724:	b508      	push	{r3, lr}
	return writeSregTableStd( sreg, value );
 8000726:	f7ff ffe6 	bl	80006f6 <writeSregTableStd>
}
 800072a:	bd08      	pop	{r3, pc}

0800072c <SchedulerResetProcessTable>:
 ****************************************************************************/
void SchedulerResetProcessTable(void)
{
	uint8_t i;

	ptrTask	= 0;
 800072c:	2300      	movs	r3, #0
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <SchedulerResetProcessTable+0x5c>)
 8000730:	7013      	strb	r3, [r2, #0]

 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000732:	2b01      	cmp	r3, #1
 8000734:	d826      	bhi.n	8000784 <SchedulerResetProcessTable+0x58>
{
 8000736:	b430      	push	{r4, r5}
 	{
		schedulerProcess[i].uiTimeProcessCounter	= 0;
 8000738:	4914      	ldr	r1, [pc, #80]	; (800078c <SchedulerResetProcessTable+0x60>)
 800073a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800073e:	f36f 020d 	bfc	r2, #0, #14
 8000742:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		schedulerProcess[i].bEnabledSystemTask	= SchedulerInstanceMap[i].initState;
 8000746:	005a      	lsls	r2, r3, #1
 8000748:	18d0      	adds	r0, r2, r3
 800074a:	0084      	lsls	r4, r0, #2
 800074c:	4810      	ldr	r0, [pc, #64]	; (8000790 <SchedulerResetProcessTable+0x64>)
 800074e:	4420      	add	r0, r4
 8000750:	7a84      	ldrb	r4, [r0, #10]
 8000752:	4411      	add	r1, r2
 8000754:	7848      	ldrb	r0, [r1, #1]
 8000756:	f364 1086 	bfi	r0, r4, #6, #1
		schedulerProcess[i].bEnabledUrgentSystemTask = FALSE;
 800075a:	f36f 10c7 	bfc	r0, #7, #1
 800075e:	7048      	strb	r0, [r1, #1]

		schedulerContext[i].maxDelayProcessCtn = 0;
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <SchedulerResetProcessTable+0x68>)
 8000762:	18d0      	adds	r0, r2, r3
 8000764:	00c5      	lsls	r5, r0, #3
 8000766:	194c      	adds	r4, r1, r5
 8000768:	2000      	movs	r0, #0
 800076a:	81a0      	strh	r0, [r4, #12]
		schedulerContext[i].maximumTaskTime_us = 0;
 800076c:	60a0      	str	r0, [r4, #8]
		schedulerContext[i].averageTaskTime_us = 0;
 800076e:	5148      	str	r0, [r1, r5]
		schedulerContext[i].currentTaskTime_us = 0;
 8000770:	6060      	str	r0, [r4, #4]
		schedulerContext[i].cntTaskTime = 0;
 8000772:	6120      	str	r0, [r4, #16]
		schedulerContext[i].userEnabled = TRUE;
 8000774:	2201      	movs	r2, #1
 8000776:	7562      	strb	r2, [r4, #21]
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000778:	4413      	add	r3, r2
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b01      	cmp	r3, #1
 800077e:	d9db      	bls.n	8000738 <SchedulerResetProcessTable+0xc>
 	}
}
 8000780:	bc30      	pop	{r4, r5}
 8000782:	4770      	bx	lr
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	200000c4 	.word	0x200000c4
 800078c:	200000c8 	.word	0x200000c8
 8000790:	08005068 	.word	0x08005068
 8000794:	20000094 	.word	0x20000094

08000798 <SchedulerInit>:
{
 8000798:	b510      	push	{r4, lr}
	SchedulerResetProcessTable();
 800079a:	f7ff ffc7 	bl	800072c <SchedulerResetProcessTable>
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 800079e:	2400      	movs	r4, #0
 80007a0:	e001      	b.n	80007a6 <SchedulerInit+0xe>
 80007a2:	3401      	adds	r4, #1
 80007a4:	b2e4      	uxtb	r4, r4
 80007a6:	2c01      	cmp	r4, #1
 80007a8:	d808      	bhi.n	80007bc <SchedulerInit+0x24>
		if(SchedulerInstanceMap[i].InitProcess != NULL)
 80007aa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80007ae:	0093      	lsls	r3, r2, #2
 80007b0:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <SchedulerInit+0x3c>)
 80007b2:	58d3      	ldr	r3, [r2, r3]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d0f4      	beq.n	80007a2 <SchedulerInit+0xa>
			(*(SchedulerInstanceMap[i].InitProcess))();
 80007b8:	4798      	blx	r3
 80007ba:	e7f2      	b.n	80007a2 <SchedulerInit+0xa>
    systemGetCLkFreq(&ticks_per_us);
 80007bc:	4c06      	ldr	r4, [pc, #24]	; (80007d8 <SchedulerInit+0x40>)
 80007be:	4620      	mov	r0, r4
 80007c0:	f000 fde9 	bl	8001396 <systemGetCLkFreq>
    ticks_per_us /= 1000000;
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <SchedulerInit+0x44>)
 80007c8:	fba2 2303 	umull	r2, r3, r2, r3
 80007cc:	0c9b      	lsrs	r3, r3, #18
 80007ce:	6023      	str	r3, [r4, #0]
 80007d0:	bd10      	pop	{r4, pc}
 80007d2:	bf00      	nop
 80007d4:	08005068 	.word	0x08005068
 80007d8:	20000090 	.word	0x20000090
 80007dc:	431bde83 	.word	0x431bde83

080007e0 <SchedulerProcessesAutoEnable>:
 ****************************************************************************/
void SchedulerProcessesAutoEnable(void)
{
	uint8_t i;

	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d825      	bhi.n	8000832 <SchedulerProcessesAutoEnable+0x52>
{
 80007e6:	b430      	push	{r4, r5}
 80007e8:	e003      	b.n	80007f2 <SchedulerProcessesAutoEnable+0x12>
	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80007ea:	3301      	adds	r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d81d      	bhi.n	800082e <SchedulerProcessesAutoEnable+0x4e>
	{
		schedulerProcess[i].uiTimeProcessCounter++;
 80007f2:	4810      	ldr	r0, [pc, #64]	; (8000834 <SchedulerProcessesAutoEnable+0x54>)
 80007f4:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80007f8:	f3c2 010d 	ubfx	r1, r2, #0, #14
 80007fc:	3101      	adds	r1, #1
 80007fe:	f361 020d 	bfi	r2, r1, #0, #14
 8000802:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

		// If currentTaskTime it's enable, update 1000uS=1mS
		if (schedulerContext[i].taskActive == TRUE && schedulerContext[i].userEnabled == TRUE )
 8000806:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800080a:	00d1      	lsls	r1, r2, #3
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SchedulerProcessesAutoEnable+0x58>)
 800080e:	440a      	add	r2, r1
 8000810:	7d12      	ldrb	r2, [r2, #20]
 8000812:	2a00      	cmp	r2, #0
 8000814:	d0e9      	beq.n	80007ea <SchedulerProcessesAutoEnable+0xa>
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <SchedulerProcessesAutoEnable+0x58>)
 8000818:	440a      	add	r2, r1
 800081a:	7d52      	ldrb	r2, [r2, #21]
 800081c:	2a00      	cmp	r2, #0
 800081e:	d0e4      	beq.n	80007ea <SchedulerProcessesAutoEnable+0xa>
		{
			schedulerContext[i].currentTaskTime_us += 1000;
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <SchedulerProcessesAutoEnable+0x58>)
 8000822:	4401      	add	r1, r0
 8000824:	684a      	ldr	r2, [r1, #4]
 8000826:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 800082a:	604a      	str	r2, [r1, #4]
 800082c:	e7dd      	b.n	80007ea <SchedulerProcessesAutoEnable+0xa>
		}
	}
}
 800082e:	bc30      	pop	{r4, r5}
 8000830:	4770      	bx	lr
 8000832:	4770      	bx	lr
 8000834:	200000c8 	.word	0x200000c8
 8000838:	20000094 	.word	0x20000094

0800083c <SchedulerUpdateTaskTime>:
 * @brief  	Update average task time, maximum task time
 * @param   process, initTime, finalTime
 * @return  none
 ****************************************************************************/
void SchedulerUpdateTaskTime(int32_t initTimeTaskScheduler, int32_t finalTimeTaskScheduler)
{
 800083c:	b4f0      	push	{r4, r5, r6, r7}
	uint64_t averageTaskTemp;
	schedulerContext[ptrTask].currentTaskTime_us += ((initTimeTaskScheduler - finalTimeTaskScheduler)/(int32_t)(ticks_per_us));
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <SchedulerUpdateTaskTime+0x48>)
 8000840:	781a      	ldrb	r2, [r3, #0]
 8000842:	1a41      	subs	r1, r0, r1
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <SchedulerUpdateTaskTime+0x4c>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	fb91 f1f0 	sdiv	r1, r1, r0
 800084c:	4e0f      	ldr	r6, [pc, #60]	; (800088c <SchedulerUpdateTaskTime+0x50>)
 800084e:	0053      	lsls	r3, r2, #1
 8000850:	4413      	add	r3, r2
 8000852:	00dd      	lsls	r5, r3, #3
 8000854:	1974      	adds	r4, r6, r5
 8000856:	6863      	ldr	r3, [r4, #4]
 8000858:	4419      	add	r1, r3
 800085a:	6061      	str	r1, [r4, #4]
	schedulerContext[ptrTask].cntTaskTime %= MAX_TASK_TIME_CNT;
 800085c:	6923      	ldr	r3, [r4, #16]
 800085e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000862:	bf28      	it	cs
 8000864:	3301      	addcs	r3, #1
	schedulerContext[ptrTask].cntTaskTime++;
 8000866:	1c58      	adds	r0, r3, #1
 8000868:	6120      	str	r0, [r4, #16]

	/* Calculate the average task time */
	averageTaskTemp = (uint64_t)(schedulerContext[ptrTask].averageTaskTime_us*(schedulerContext[ptrTask].cntTaskTime-1));
 800086a:	5977      	ldr	r7, [r6, r5]
	schedulerContext[ptrTask].averageTaskTime_us = (uint32_t)(averageTaskTemp + schedulerContext[ptrTask].currentTaskTime_us) / schedulerContext[ptrTask].cntTaskTime;
 800086c:	fb07 1303 	mla	r3, r7, r3, r1
 8000870:	fbb3 f3f0 	udiv	r3, r3, r0
 8000874:	5173      	str	r3, [r6, r5]

    /* If current Task Time is higher than maximum, update maximum task time */
    if ( schedulerContext[ptrTask].currentTaskTime_us > schedulerContext[ptrTask].maximumTaskTime_us )
 8000876:	68a3      	ldr	r3, [r4, #8]
 8000878:	4299      	cmp	r1, r3
 800087a:	d900      	bls.n	800087e <SchedulerUpdateTaskTime+0x42>
    {
    	schedulerContext[ptrTask].maximumTaskTime_us = schedulerContext[ptrTask].currentTaskTime_us;
 800087c:	60a1      	str	r1, [r4, #8]
    }

}
 800087e:	bcf0      	pop	{r4, r5, r6, r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	200000c4 	.word	0x200000c4
 8000888:	20000090 	.word	0x20000090
 800088c:	20000094 	.word	0x20000094

08000890 <SchedulerExecuteSystemProcess>:
{
 8000890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	schedulerContext[ptrTask].currentTaskTime_us = 0;
 8000894:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80008f0 <SchedulerExecuteSystemProcess+0x60>
 8000898:	f898 1000 	ldrb.w	r1, [r8]
 800089c:	4c11      	ldr	r4, [pc, #68]	; (80008e4 <SchedulerExecuteSystemProcess+0x54>)
 800089e:	004b      	lsls	r3, r1, #1
 80008a0:	1858      	adds	r0, r3, r1
 80008a2:	00c2      	lsls	r2, r0, #3
 80008a4:	4422      	add	r2, r4
 80008a6:	2700      	movs	r7, #0
 80008a8:	6057      	str	r7, [r2, #4]
	initTimeTaskScheduler =  SYSTEM_TICK;
 80008aa:	4e0f      	ldr	r6, [pc, #60]	; (80008e8 <SchedulerExecuteSystemProcess+0x58>)
 80008ac:	68b5      	ldr	r5, [r6, #8]
	schedulerContext[ptrTask].taskActive = TRUE;
 80008ae:	2001      	movs	r0, #1
 80008b0:	7510      	strb	r0, [r2, #20]
    (*(SchedulerInstanceMap[ptrTask].CallProcess))();
 80008b2:	440b      	add	r3, r1
 80008b4:	009a      	lsls	r2, r3, #2
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <SchedulerExecuteSystemProcess+0x5c>)
 80008b8:	4413      	add	r3, r2
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	4798      	blx	r3
	schedulerContext[ptrTask].taskActive = FALSE;
 80008be:	f898 0000 	ldrb.w	r0, [r8]
 80008c2:	0043      	lsls	r3, r0, #1
 80008c4:	1819      	adds	r1, r3, r0
 80008c6:	00ca      	lsls	r2, r1, #3
 80008c8:	4422      	add	r2, r4
 80008ca:	7517      	strb	r7, [r2, #20]
    finalTimeTaskScheduler = SYSTEM_TICK;
 80008cc:	68b1      	ldr	r1, [r6, #8]
    if ( schedulerContext[ptrTask].userEnabled == TRUE )
 80008ce:	4403      	add	r3, r0
 80008d0:	00da      	lsls	r2, r3, #3
 80008d2:	4414      	add	r4, r2
 80008d4:	7d63      	ldrb	r3, [r4, #21]
 80008d6:	b90b      	cbnz	r3, 80008dc <SchedulerExecuteSystemProcess+0x4c>
 80008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	SchedulerUpdateTaskTime(initTimeTaskScheduler, finalTimeTaskScheduler);
 80008dc:	4628      	mov	r0, r5
 80008de:	f7ff ffad 	bl	800083c <SchedulerUpdateTaskTime>
}
 80008e2:	e7f9      	b.n	80008d8 <SchedulerExecuteSystemProcess+0x48>
 80008e4:	20000094 	.word	0x20000094
 80008e8:	e000e010 	.word	0xe000e010
 80008ec:	08005068 	.word	0x08005068
 80008f0:	200000c4 	.word	0x200000c4

080008f4 <SchedulerNextSystemProcess>:
{
 80008f4:	b570      	push	{r4, r5, r6, lr}
    uint8_t i			= 0;
 80008f6:	2400      	movs	r4, #0
    bool taskExecuted	= FALSE;
 80008f8:	4620      	mov	r0, r4
 80008fa:	e027      	b.n	800094c <SchedulerNextSystemProcess+0x58>
			if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE )
 80008fc:	2a00      	cmp	r2, #0
 80008fe:	d148      	bne.n	8000992 <SchedulerNextSystemProcess+0x9e>
				schedulerProcess[ptrTask].uiTimeProcessCounter = 0;
 8000900:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <SchedulerNextSystemProcess+0xb0>)
 8000902:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000906:	f36f 010d 	bfc	r1, #0, #14
 800090a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (schedulerContext[ptrTask].maxDelayProcessCtn < (schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess))
 800090e:	005a      	lsls	r2, r3, #1
 8000910:	18d1      	adds	r1, r2, r3
 8000912:	00c8      	lsls	r0, r1, #3
 8000914:	4924      	ldr	r1, [pc, #144]	; (80009a8 <SchedulerNextSystemProcess+0xb4>)
 8000916:	4401      	add	r1, r0
 8000918:	898d      	ldrh	r5, [r1, #12]
 800091a:	4922      	ldr	r1, [pc, #136]	; (80009a4 <SchedulerNextSystemProcess+0xb0>)
 800091c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000920:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000924:	441a      	add	r2, r3
 8000926:	0090      	lsls	r0, r2, #2
 8000928:	4a20      	ldr	r2, [pc, #128]	; (80009ac <SchedulerNextSystemProcess+0xb8>)
 800092a:	4402      	add	r2, r0
 800092c:	8912      	ldrh	r2, [r2, #8]
 800092e:	1a88      	subs	r0, r1, r2
 8000930:	4285      	cmp	r5, r0
 8000932:	da05      	bge.n	8000940 <SchedulerNextSystemProcess+0x4c>
				schedulerContext[ptrTask].maxDelayProcessCtn = schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess;
 8000934:	005a      	lsls	r2, r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	00da      	lsls	r2, r3, #3
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <SchedulerNextSystemProcess+0xb4>)
 800093c:	4413      	add	r3, r2
 800093e:	8198      	strh	r0, [r3, #12]
			SchedulerExecuteSystemProcess();
 8000940:	f7ff ffa6 	bl	8000890 <SchedulerExecuteSystemProcess>
			taskExecuted = TRUE;
 8000944:	2001      	movs	r0, #1
	while ( ( taskExecuted == FALSE ) && ( i <= NUM_OF_SCHED_TASKS ) );
 8000946:	bb60      	cbnz	r0, 80009a2 <SchedulerNextSystemProcess+0xae>
 8000948:	2c02      	cmp	r4, #2
 800094a:	d82a      	bhi.n	80009a2 <SchedulerNextSystemProcess+0xae>
        i++;
 800094c:	3401      	adds	r4, #1
 800094e:	b2e4      	uxtb	r4, r4
        ptrTask++;
 8000950:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <SchedulerNextSystemProcess+0xbc>)
 8000952:	7813      	ldrb	r3, [r2, #0]
 8000954:	3301      	adds	r3, #1
		ptrTask %= NUM_OF_SCHED_TASKS;
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	7013      	strb	r3, [r2, #0]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 800095c:	4a11      	ldr	r2, [pc, #68]	; (80009a4 <SchedulerNextSystemProcess+0xb0>)
 800095e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000962:	7852      	ldrb	r2, [r2, #1]
 8000964:	09d2      	lsrs	r2, r2, #7
 8000966:	d1c9      	bne.n	80008fc <SchedulerNextSystemProcess+0x8>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000968:	490e      	ldr	r1, [pc, #56]	; (80009a4 <SchedulerNextSystemProcess+0xb0>)
 800096a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800096e:	7849      	ldrb	r1, [r1, #1]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000970:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000974:	d0e7      	beq.n	8000946 <SchedulerNextSystemProcess+0x52>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000976:	490b      	ldr	r1, [pc, #44]	; (80009a4 <SchedulerNextSystemProcess+0xb0>)
 8000978:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 800097c:	f3c5 050d 	ubfx	r5, r5, #0, #14
 8000980:	0059      	lsls	r1, r3, #1
 8000982:	4419      	add	r1, r3
 8000984:	008e      	lsls	r6, r1, #2
 8000986:	4909      	ldr	r1, [pc, #36]	; (80009ac <SchedulerNextSystemProcess+0xb8>)
 8000988:	4431      	add	r1, r6
 800098a:	8909      	ldrh	r1, [r1, #8]
 800098c:	428d      	cmp	r5, r1
 800098e:	dbda      	blt.n	8000946 <SchedulerNextSystemProcess+0x52>
 8000990:	e7b4      	b.n	80008fc <SchedulerNextSystemProcess+0x8>
				schedulerProcess[ptrTask].bEnabledUrgentSystemTask = FALSE;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <SchedulerNextSystemProcess+0xb0>)
 8000994:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000998:	7851      	ldrb	r1, [r2, #1]
 800099a:	f36f 11c7 	bfc	r1, #7, #1
 800099e:	7051      	strb	r1, [r2, #1]
 80009a0:	e7b5      	b.n	800090e <SchedulerNextSystemProcess+0x1a>
}
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	200000c8 	.word	0x200000c8
 80009a8:	20000094 	.word	0x20000094
 80009ac:	08005068 	.word	0x08005068
 80009b0:	200000c4 	.word	0x200000c4

080009b4 <CreateQueue>:
 * @return  None.
 *
 ****************************************************************************/
void CreateQueue(tCircularBuffer* buffer, uint8_t* bufferPtr, uint16_t size)
{
	buffer->bufferPtr = bufferPtr;
 80009b4:	6081      	str	r1, [r0, #8]
	buffer->bufferLen = size;
 80009b6:	80c2      	strh	r2, [r0, #6]
	buffer->readPtr = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	8043      	strh	r3, [r0, #2]
	buffer->writePtr = 0;
 80009bc:	8083      	strh	r3, [r0, #4]
    buffer->numOfBytes = 0;
 80009be:	8003      	strh	r3, [r0, #0]
 80009c0:	4770      	bx	lr

080009c2 <AddQueueByte>:
 *
 * @return  None.
 *
 ****************************************************************************/
void AddQueueByte(tCircularBuffer* buffer, uint8_t data)
{
 80009c2:	b538      	push	{r3, r4, r5, lr}
 80009c4:	4604      	mov	r4, r0
 80009c6:	460d      	mov	r5, r1
	interruptsDisable();
 80009c8:	f000 fb56 	bl	8001078 <interruptsDisable>
    buffer->bufferPtr[buffer->writePtr]= data;
 80009cc:	68a2      	ldr	r2, [r4, #8]
 80009ce:	88a3      	ldrh	r3, [r4, #4]
 80009d0:	54d5      	strb	r5, [r2, r3]
    buffer->numOfBytes++;
 80009d2:	8823      	ldrh	r3, [r4, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	8023      	strh	r3, [r4, #0]
    buffer->writePtr++;
 80009d8:	88a3      	ldrh	r3, [r4, #4]
 80009da:	3301      	adds	r3, #1
 80009dc:	b29b      	uxth	r3, r3
    buffer->writePtr %= buffer->bufferLen;
 80009de:	88e1      	ldrh	r1, [r4, #6]
 80009e0:	fbb3 f2f1 	udiv	r2, r3, r1
 80009e4:	fb01 3312 	mls	r3, r1, r2, r3
 80009e8:	80a3      	strh	r3, [r4, #4]
	interruptsEnable();
 80009ea:	f000 fb31 	bl	8001050 <interruptsEnable>
 80009ee:	bd38      	pop	{r3, r4, r5, pc}

080009f0 <GetQueueByte>:
 *
 * @return  Next byte into queue
 *
 ****************************************************************************/
uint8_t GetQueueByte(tCircularBuffer* buffer)
{
 80009f0:	b538      	push	{r3, r4, r5, lr}
 80009f2:	4604      	mov	r4, r0
    uint8_t result;
	interruptsDisable();
 80009f4:	f000 fb40 	bl	8001078 <interruptsDisable>
    result = buffer->bufferPtr[buffer->readPtr];
 80009f8:	68a2      	ldr	r2, [r4, #8]
 80009fa:	8863      	ldrh	r3, [r4, #2]
 80009fc:	5cd5      	ldrb	r5, [r2, r3]
    buffer->numOfBytes--;
 80009fe:	8822      	ldrh	r2, [r4, #0]
 8000a00:	3a01      	subs	r2, #1
 8000a02:	8022      	strh	r2, [r4, #0]
    buffer->readPtr++;
 8000a04:	3301      	adds	r3, #1
 8000a06:	b29b      	uxth	r3, r3
    buffer->readPtr %= buffer->bufferLen;
 8000a08:	88e1      	ldrh	r1, [r4, #6]
 8000a0a:	fbb3 f2f1 	udiv	r2, r3, r1
 8000a0e:	fb01 3312 	mls	r3, r1, r2, r3
 8000a12:	8063      	strh	r3, [r4, #2]
    interruptsEnable();
 8000a14:	f000 fb1c 	bl	8001050 <interruptsEnable>
    return result;
}
 8000a18:	4628      	mov	r0, r5
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}

08000a1c <GetQueuePendingBytes>:
 *
 ****************************************************************************/
uint16_t GetQueuePendingBytes(tCircularBuffer* buffer)
{
    return buffer->numOfBytes;
}
 8000a1c:	8800      	ldrh	r0, [r0, #0]
 8000a1e:	4770      	bx	lr

08000a20 <GetQueueFreeBytes>:
 * @return  Free spaces in queue
 *
 ****************************************************************************/
uint16_t GetQueueFreeBytes(tCircularBuffer* buffer)
{
    return (buffer->bufferLen-buffer->numOfBytes);
 8000a20:	88c3      	ldrh	r3, [r0, #6]
 8000a22:	8800      	ldrh	r0, [r0, #0]
 8000a24:	1a18      	subs	r0, r3, r0
}
 8000a26:	b280      	uxth	r0, r0
 8000a28:	4770      	bx	lr
	...

08000a2c <sdInit>:
 * @brief  Init SDIO driver.
 * @return  eError.
 *
 ****************************************************************************/
eError sdInit(void)
{
 8000a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	result = RET_OK;

	const tSdioInit* msd;
	SD_HandleTypeDef* hsd;

	for(i=0; i<NUM_OF_SD; i++)
 8000a2e:	2400      	movs	r4, #0
	result = RET_OK;
 8000a30:	4625      	mov	r5, r4
	for(i=0; i<NUM_OF_SD; i++)
 8000a32:	b10c      	cbz	r4, 8000a38 <sdInit+0xc>
		}

	}
	return  result;

}
 8000a34:	4628      	mov	r0, r5
 8000a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		hsd = &uSdHandle[i];
 8000a38:	0162      	lsls	r2, r4, #5
 8000a3a:	1913      	adds	r3, r2, r4
 8000a3c:	0099      	lsls	r1, r3, #2
 8000a3e:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <sdInit+0x50>)
 8000a40:	18c8      	adds	r0, r1, r3
		hsd->Instance = SDMMC1;
 8000a42:	4e0f      	ldr	r6, [pc, #60]	; (8000a80 <sdInit+0x54>)
 8000a44:	50ce      	str	r6, [r1, r3]
		hsd->Init.ClockEdge = msd->ClockEdge;
 8000a46:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8000a84 <sdInit+0x58>
 8000a4a:	0061      	lsls	r1, r4, #1
 8000a4c:	4421      	add	r1, r4
 8000a4e:	00ce      	lsls	r6, r1, #3
 8000a50:	eb0e 0106 	add.w	r1, lr, r6
 8000a54:	684f      	ldr	r7, [r1, #4]
 8000a56:	6047      	str	r7, [r0, #4]
		hsd->Init.ClockBypass = msd->ClockBypass;
 8000a58:	688f      	ldr	r7, [r1, #8]
 8000a5a:	6087      	str	r7, [r0, #8]
		hsd->Init.ClockPowerSave = msd->ClockPowerSave;
 8000a5c:	68cf      	ldr	r7, [r1, #12]
 8000a5e:	60c7      	str	r7, [r0, #12]
		hsd->Init.ClockDiv = msd->ClockDiv;
 8000a60:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8000a64:	6186      	str	r6, [r0, #24]
		hsd->Init.BusWide = msd->BusWide;
 8000a66:	690e      	ldr	r6, [r1, #16]
 8000a68:	6106      	str	r6, [r0, #16]
		hsd->Init.HardwareFlowControl = msd->HardwareFlowControl;
 8000a6a:	694e      	ldr	r6, [r1, #20]
 8000a6c:	6146      	str	r6, [r0, #20]
		if(HAL_SD_Init(hsd) != HAL_OK)
 8000a6e:	f002 fdf6 	bl	800365e <HAL_SD_Init>
 8000a72:	b100      	cbz	r0, 8000a76 <sdInit+0x4a>
			result = RET_NOT_INITIALIZED;
 8000a74:	2502      	movs	r5, #2
	for(i=0; i<NUM_OF_SD; i++)
 8000a76:	3401      	adds	r4, #1
 8000a78:	b2e4      	uxtb	r4, r4
 8000a7a:	e7da      	b.n	8000a32 <sdInit+0x6>
 8000a7c:	200000cc 	.word	0x200000cc
 8000a80:	40012800 	.word	0x40012800
 8000a84:	08005080 	.word	0x08005080

08000a88 <sdStart>:
 *
 * @return  None.
 *
 ****************************************************************************/
eError sdStart( void )
{
 8000a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a8c:	b082      	sub	sp, #8
	uint8_t i;
	eError result = RET_OK;
	SD_HandleTypeDef* hsd;

	__HAL_RCC_SDIO_CLK_ENABLE();
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <sdStart+0x80>)
 8000a90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a96:	661a      	str	r2, [r3, #96]	; 0x60
 8000a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	9b01      	ldr	r3, [sp, #4]
	eError result = RET_OK;
 8000aa2:	2000      	movs	r0, #0

	for(i=0; i<NUM_OF_SD; i++)
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	b114      	cbz	r4, 8000aae <sdStart+0x26>
#endif

	}

	return result;
}
 8000aa8:	b002      	add	sp, #8
 8000aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hsd = &uSdHandle[i];
 8000aae:	4626      	mov	r6, r4
 8000ab0:	0163      	lsls	r3, r4, #5
 8000ab2:	4423      	add	r3, r4
 8000ab4:	009f      	lsls	r7, r3, #2
 8000ab6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8000b0c <sdStart+0x84>
 8000aba:	eb07 0508 	add.w	r5, r7, r8
		if(HAL_SD_ConfigWideBusOperation(hsd, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000abe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac2:	4628      	mov	r0, r5
 8000ac4:	f002 fdea 	bl	800369c <HAL_SD_ConfigWideBusOperation>
		if(SDMMC_PowerState_ON(hsd->Instance) != HAL_OK)
 8000ac8:	f858 0007 	ldr.w	r0, [r8, r7]
 8000acc:	f004 f843 	bl	8004b56 <SDMMC_PowerState_ON>
 8000ad0:	b1b8      	cbz	r0, 8000b02 <sdStart+0x7a>
			result = RET_FAIL;
 8000ad2:	2001      	movs	r0, #1
		__SDMMC_ENABLE(hsd->Instance);
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <sdStart+0x84>)
 8000ad6:	0172      	lsls	r2, r6, #5
 8000ad8:	1997      	adds	r7, r2, r6
 8000ada:	00b9      	lsls	r1, r7, #2
 8000adc:	eb03 0e01 	add.w	lr, r3, r1
 8000ae0:	585f      	ldr	r7, [r3, r1]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000ae8:	6079      	str	r1, [r7, #4]
		__HAL_LINKDMA(hsd, hdmarx, DMA_Handler[SD_RX_CHANNEL]);
 8000aea:	4909      	ldr	r1, [pc, #36]	; (8000b10 <sdStart+0x88>)
 8000aec:	f8ce 1040 	str.w	r1, [lr, #64]	; 0x40
 8000af0:	628d      	str	r5, [r1, #40]	; 0x28
		__HAL_LINKDMA(hsd, hdmatx, DMA_Handler[SD_TX_CHANNEL]);
 8000af2:	f101 0248 	add.w	r2, r1, #72	; 0x48
 8000af6:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
 8000afa:	670d      	str	r5, [r1, #112]	; 0x70
	for(i=0; i<NUM_OF_SD; i++)
 8000afc:	3401      	adds	r4, #1
 8000afe:	b2e4      	uxtb	r4, r4
 8000b00:	e7d1      	b.n	8000aa6 <sdStart+0x1e>
			result = RET_OK;
 8000b02:	2000      	movs	r0, #0
 8000b04:	e7e6      	b.n	8000ad4 <sdStart+0x4c>
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	200000cc 	.word	0x200000cc
 8000b10:	20000158 	.word	0x20000158

08000b14 <diffTime>:
 **********************************************************************/
static uint32_t diffTime( uint32_t timeA, uint32_t timeB )
{
    uint32_t retVal = 0;

    if( timeA >= timeB )
 8000b14:	4288      	cmp	r0, r1
 8000b16:	d202      	bcs.n	8000b1e <diffTime+0xa>
    {
            retVal = timeA - timeB;
    }
    else
    {
            retVal = UINT32_MAX - (timeB - timeA);
 8000b18:	1a09      	subs	r1, r1, r0
 8000b1a:	43c8      	mvns	r0, r1
    }

    return retVal;
}
 8000b1c:	4770      	bx	lr
            retVal = timeA - timeB;
 8000b1e:	1a40      	subs	r0, r0, r1
 8000b20:	4770      	bx	lr
	...

08000b24 <getTime>:
    uint32_t retVal = 0;

    retVal = timeMs;

    return retVal;
}
 8000b24:	4b01      	ldr	r3, [pc, #4]	; (8000b2c <getTime+0x8>)
 8000b26:	6818      	ldr	r0, [r3, #0]
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000074 	.word	0x20000074

08000b30 <SwTimerInit>:
eError SwTimerInit( void )
{
    eError result = RET_OK;
    uint8_t i;

    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8000b30:	2300      	movs	r3, #0
 8000b32:	b10b      	cbz	r3, 8000b38 <SwTimerInit+0x8>
    {
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
    }

    return result;
}
 8000b34:	2000      	movs	r0, #0
 8000b36:	4770      	bx	lr
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
 8000b38:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <SwTimerInit+0x18>)
 8000b3a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000b3e:	2100      	movs	r1, #0
 8000b40:	7211      	strb	r1, [r2, #8]
    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8000b42:	3301      	adds	r3, #1
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	e7f4      	b.n	8000b32 <SwTimerInit+0x2>
 8000b48:	20000064 	.word	0x20000064

08000b4c <SwTimerResetTimer>:
/**********************************************************************
 * @brief  Reset and start the timer
 * @param  pTimer:	Pointer to timer to be restart.
 **********************************************************************/
eError SwTimerResetTimer( tSwTimerIndex SwTimerIndex )
{
 8000b4c:	b510      	push	{r4, lr}
 8000b4e:	4604      	mov	r4, r0
    eError result = RET_OK;

    // Reset the timer.
    SwTimersArray[SwTimerIndex].startMs = getTime();
 8000b50:	f7ff ffe8 	bl	8000b24 <getTime>
 8000b54:	0124      	lsls	r4, r4, #4
 8000b56:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <SwTimerResetTimer+0x14>)
 8000b58:	5118      	str	r0, [r3, r4]

    return result;
}
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	bd10      	pop	{r4, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000064 	.word	0x20000064

08000b64 <SwTimerStartTimer>:
{
 8000b64:	b510      	push	{r4, lr}
 8000b66:	4604      	mov	r4, r0
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_CANCELLED ||
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <SwTimerStartTimer+0x28>)
 8000b6a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000b6e:	7a1b      	ldrb	r3, [r3, #8]
 8000b70:	3b02      	subs	r3, #2
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d906      	bls.n	8000b86 <SwTimerStartTimer+0x22>
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_STARTED;
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <SwTimerStartTimer+0x28>)
 8000b7a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8000b7e:	2301      	movs	r3, #1
 8000b80:	7203      	strb	r3, [r0, #8]
}
 8000b82:	2000      	movs	r0, #0
 8000b84:	bd10      	pop	{r4, pc}
        SwTimerResetTimer( SwTimerIndex );
 8000b86:	f7ff ffe1 	bl	8000b4c <SwTimerResetTimer>
 8000b8a:	e7f5      	b.n	8000b78 <SwTimerStartTimer+0x14>
 8000b8c:	20000064 	.word	0x20000064

08000b90 <SwTimerUpdateTimer>:
 * @brief  Updates all timers every millisecond
 * @param
 * @retval
 **********************************************************************/
eError SwTimerUpdateTimer( tSwTimerIndex SwTimerIndex )
{
 8000b90:	b538      	push	{r3, r4, r5, lr}
 8000b92:	4604      	mov	r4, r0
    eError result = RET_OK;
    tBool restartTimer = FALSE;

    // If timer is started, check timeout.
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STARTED )
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <SwTimerUpdateTimer+0x60>)
 8000b96:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000b9a:	7a1b      	ldrb	r3, [r3, #8]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d00a      	beq.n	8000bb6 <SwTimerUpdateTimer+0x26>
            }
        }
    }
    // If the timer is stopped, simply shifts the start time,
    // this keeps the elapsed time.
    else if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STOPPED )
 8000ba0:	b9fb      	cbnz	r3, 8000be2 <SwTimerUpdateTimer+0x52>
    {
        SwTimersArray[SwTimerIndex].startMs++;
 8000ba2:	4913      	ldr	r1, [pc, #76]	; (8000bf0 <SwTimerUpdateTimer+0x60>)
 8000ba4:	0102      	lsls	r2, r0, #4
 8000ba6:	588b      	ldr	r3, [r1, r2]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	508b      	str	r3, [r1, r2]
    tBool restartTimer = FALSE;
 8000bac:	2000      	movs	r0, #0
    }

    if ( restartTimer == TRUE )
 8000bae:	2801      	cmp	r0, #1
 8000bb0:	d019      	beq.n	8000be6 <SwTimerUpdateTimer+0x56>
    {
        SwTimerStartTimer(SwTimerIndex);
    }

    return result;
}
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
        if( diffTime( timeMs, SwTimersArray[SwTimerIndex].startMs ) >= SwTimersArray[SwTimerIndex].timeoutMs )
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <SwTimerUpdateTimer+0x60>)
 8000bb8:	0103      	lsls	r3, r0, #4
 8000bba:	18d5      	adds	r5, r2, r3
 8000bbc:	58d1      	ldr	r1, [r2, r3]
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <SwTimerUpdateTimer+0x64>)
 8000bc0:	6818      	ldr	r0, [r3, #0]
 8000bc2:	f7ff ffa7 	bl	8000b14 <diffTime>
 8000bc6:	686b      	ldr	r3, [r5, #4]
 8000bc8:	4298      	cmp	r0, r3
 8000bca:	d306      	bcc.n	8000bda <SwTimerUpdateTimer+0x4a>
            SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_EXPIRED;
 8000bcc:	2203      	movs	r2, #3
 8000bce:	722a      	strb	r2, [r5, #8]
            if( NULL != SwTimersArray[SwTimerIndex].pFuncCB )
 8000bd0:	68eb      	ldr	r3, [r5, #12]
 8000bd2:	b123      	cbz	r3, 8000bde <SwTimerUpdateTimer+0x4e>
                    restartTimer = SwTimersArray[SwTimerIndex].pFuncCB(SwTimerIndex);
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	4798      	blx	r3
 8000bd8:	e7e9      	b.n	8000bae <SwTimerUpdateTimer+0x1e>
    tBool restartTimer = FALSE;
 8000bda:	2000      	movs	r0, #0
 8000bdc:	e7e7      	b.n	8000bae <SwTimerUpdateTimer+0x1e>
 8000bde:	2000      	movs	r0, #0
 8000be0:	e7e5      	b.n	8000bae <SwTimerUpdateTimer+0x1e>
 8000be2:	2000      	movs	r0, #0
 8000be4:	e7e3      	b.n	8000bae <SwTimerUpdateTimer+0x1e>
        SwTimerStartTimer(SwTimerIndex);
 8000be6:	4620      	mov	r0, r4
 8000be8:	f7ff ffbc 	bl	8000b64 <SwTimerStartTimer>
 8000bec:	e7e1      	b.n	8000bb2 <SwTimerUpdateTimer+0x22>
 8000bee:	bf00      	nop
 8000bf0:	20000064 	.word	0x20000064
 8000bf4:	20000074 	.word	0x20000074

08000bf8 <SwTimerIrq>:
 * @brief  Interrupt request rutine for periodic tick
 * @param  None.
 * @retval None.
 **********************************************************************/
void SwTimerIrq( void )
{
 8000bf8:	b510      	push	{r4, lr}
    uint8_t SwTimerIndex = 0;

    // Increment time global variable.
    timeMs = timeMs + TIMER_PERIOD; //timeMs++;
 8000bfa:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <SwTimerIrq+0x1c>)
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	6013      	str	r3, [r2, #0]

    // Update timers
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8000c02:	2400      	movs	r4, #0
 8000c04:	b104      	cbz	r4, 8000c08 <SwTimerIrq+0x10>
    {
        SwTimerUpdateTimer( SwTimerIndex );
    }
}
 8000c06:	bd10      	pop	{r4, pc}
        SwTimerUpdateTimer( SwTimerIndex );
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f7ff ffc1 	bl	8000b90 <SwTimerUpdateTimer>
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8000c0e:	3401      	adds	r4, #1
 8000c10:	b2e4      	uxtb	r4, r4
 8000c12:	e7f7      	b.n	8000c04 <SwTimerIrq+0xc>
 8000c14:	20000074 	.word	0x20000074

08000c18 <pipeDeviceByteReceived>:
 * @param	data to be saved.
 * @return  None.
 ****************************************************************************/
eError pipeDeviceByteReceived(ePipes id, uint8_t data)
{
    pipes[id].buffer[pipes[id].bufferRxPtr] = data;
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <pipeDeviceByteReceived+0x30>)
 8000c1a:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8000c1e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000c22:	7943      	ldrb	r3, [r0, #5]
 8000c24:	54d1      	strb	r1, [r2, r3]
    pipes[id].bufferRxPtr = (pipes[id].bufferRxPtr + 1) % (pipes[id].bufferLength);
 8000c26:	7943      	ldrb	r3, [r0, #5]
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	7981      	ldrb	r1, [r0, #6]
 8000c2c:	fb92 f3f1 	sdiv	r3, r2, r1
 8000c30:	fb01 2313 	mls	r3, r1, r3, r2
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	7143      	strb	r3, [r0, #5]
    if ( pipes[id].bufferRxPtr == pipes[id].bufferStartingPosition )
 8000c38:	7902      	ldrb	r2, [r0, #4]
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d001      	beq.n	8000c42 <pipeDeviceByteReceived+0x2a>
    {
        return RET_BUFFER_FULL;
    }

    return RET_OK;
 8000c3e:	2000      	movs	r0, #0
}
 8000c40:	4770      	bx	lr
        return RET_BUFFER_FULL;
 8000c42:	2008      	movs	r0, #8
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000150 	.word	0x20000150

08000c4c <pipeDevice1ByteReceived>:


/**Helper functions to access each pipe */
#ifdef IS_PIPE1
inline eError pipeDevice1ByteReceived(uint8_t data)
{
 8000c4c:	b508      	push	{r3, lr}
	return pipeDeviceByteReceived(PIPE_1, data);
 8000c4e:	4601      	mov	r1, r0
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff ffe1 	bl	8000c18 <pipeDeviceByteReceived>
}
 8000c56:	bd08      	pop	{r3, pc}

08000c58 <dmaInit>:
 * @brief  Init DMA driver.
 * @return  eError.
 *
 ****************************************************************************/
eError dmaInit(void)
{
 8000c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	eError result = RET_OK;
	tDmaStream dmaStream;
	DMA_HandleTypeDef* hdma;

	for (dmaStream = 0; dmaStream<NUM_OF_DMA_STREAMS; dmaStream++)
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	e026      	b.n	8000cae <dmaInit+0x56>
	{
		hdma = &DMA_Handler[dmaStream];
 8000c60:	00e7      	lsls	r7, r4, #3
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8000c68:	4e13      	ldr	r6, [pc, #76]	; (8000cb8 <dmaInit+0x60>)
 8000c6a:	eb08 0506 	add.w	r5, r8, r6

		/* Deinitialize the stream for new transfer */
		HAL_DMA_DeInit(hdma);
 8000c6e:	4628      	mov	r0, r5
 8000c70:	f000 ff8a 	bl	8001b88 <HAL_DMA_DeInit>

		 /* Determine the DMA to which belongs the stream */
		hdma->Instance = dmaStreamMap[dmaStream].DMAy_Streamx;
 8000c74:	4911      	ldr	r1, [pc, #68]	; (8000cbc <dmaInit+0x64>)
 8000c76:	0063      	lsls	r3, r4, #1
 8000c78:	4423      	add	r3, r4
 8000c7a:	011a      	lsls	r2, r3, #4
 8000c7c:	188b      	adds	r3, r1, r2
 8000c7e:	588a      	ldr	r2, [r1, r2]
 8000c80:	f848 2006 	str.w	r2, [r8, r6]
		hdma->Init.Request = dmaStreamMap[dmaStream].Request;
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	606a      	str	r2, [r5, #4]
		hdma->Init.Direction = dmaStreamMap[dmaStream].DIR;
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	60aa      	str	r2, [r5, #8]
		hdma->Init.PeriphInc =  dmaStreamMap[dmaStream].PeripheralInc;
 8000c8c:	695a      	ldr	r2, [r3, #20]
 8000c8e:	60ea      	str	r2, [r5, #12]
		hdma->Init.MemInc = dmaStreamMap[dmaStream].MemoryInc;
 8000c90:	699a      	ldr	r2, [r3, #24]
 8000c92:	612a      	str	r2, [r5, #16]
		hdma->Init.PeriphDataAlignment = dmaStreamMap[dmaStream].PeripheralDataSize;
 8000c94:	69da      	ldr	r2, [r3, #28]
 8000c96:	616a      	str	r2, [r5, #20]
		hdma->Init.MemDataAlignment = dmaStreamMap[dmaStream].MemoryDataSize;
 8000c98:	6a1a      	ldr	r2, [r3, #32]
 8000c9a:	61aa      	str	r2, [r5, #24]
		hdma->Init.Mode = dmaStreamMap[dmaStream].Mode;
 8000c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c9e:	61ea      	str	r2, [r5, #28]
		hdma->Init.Priority = dmaStreamMap[dmaStream].Priority;
 8000ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ca2:	622a      	str	r2, [r5, #32]

		/* Configure the DMA stream */
		HAL_DMA_Init(hdma);
 8000ca4:	4628      	mov	r0, r5
 8000ca6:	f000 fef3 	bl	8001a90 <HAL_DMA_Init>
	for (dmaStream = 0; dmaStream<NUM_OF_DMA_STREAMS; dmaStream++)
 8000caa:	3401      	adds	r4, #1
 8000cac:	b264      	sxtb	r4, r4
 8000cae:	2c01      	cmp	r4, #1
 8000cb0:	ddd6      	ble.n	8000c60 <dmaInit+0x8>

	}

	return result;

}
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cb8:	20000158 	.word	0x20000158
 8000cbc:	08005098 	.word	0x08005098

08000cc0 <dmaStart>:
{
	eError result = RET_OK;
	tDmaStream dmaStream;
	DMA_HandleTypeDef* hdma;

	for (dmaStream = 0; dmaStream<NUM_OF_DMA_STREAMS; dmaStream++)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2a01      	cmp	r2, #1
 8000cc4:	dc58      	bgt.n	8000d78 <dmaStart+0xb8>
{
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	e028      	b.n	8000d1c <dmaStart+0x5c>
		if (hdma->Instance < DMA2_Channel1)
		{
			/* DMA1 */
			__HAL_RCC_DMA1_CLK_ENABLE();
		}
		else if ((hdma->Instance >= DMA2_Channel1) && (hdma->Instance <= DMA2_Channel7 ))
 8000cca:	482c      	ldr	r0, [pc, #176]	; (8000d7c <dmaStart+0xbc>)
 8000ccc:	4408      	add	r0, r1
 8000cce:	2878      	cmp	r0, #120	; 0x78
 8000cd0:	d837      	bhi.n	8000d42 <dmaStart+0x82>
		{
			/* DMA2 */
			__HAL_RCC_DMA2_CLK_ENABLE();
 8000cd2:	492b      	ldr	r1, [pc, #172]	; (8000d80 <dmaStart+0xc0>)
 8000cd4:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8000cd6:	f040 0002 	orr.w	r0, r0, #2
 8000cda:	6488      	str	r0, [r1, #72]	; 0x48
 8000cdc:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8000cde:	f001 0102 	and.w	r1, r1, #2
 8000ce2:	9101      	str	r1, [sp, #4]
 8000ce4:	9901      	ldr	r1, [sp, #4]
 8000ce6:	e02c      	b.n	8000d42 <dmaStart+0x82>
		}

		/* Configure DMA Rx parameters */
		__HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_GL4 | DMA_FLAG_TE4 | DMA_FLAG_HT4 | DMA_FLAG_TC4);
 8000ce8:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8000cec:	4925      	ldr	r1, [pc, #148]	; (8000d84 <dmaStart+0xc4>)
 8000cee:	6048      	str	r0, [r1, #4]

		if(dmaStreamMap[dmaStream].dmaInitState == TRUE)
 8000cf0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8000cf4:	0108      	lsls	r0, r1, #4
 8000cf6:	4924      	ldr	r1, [pc, #144]	; (8000d88 <dmaStart+0xc8>)
 8000cf8:	4401      	add	r1, r0
 8000cfa:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8000cfe:	2901      	cmp	r1, #1
 8000d00:	d02d      	beq.n	8000d5e <dmaStart+0x9e>
		{
			__HAL_DMA_ENABLE(hdma);
		}
		else
		{
			__HAL_DMA_DISABLE(hdma);
 8000d02:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000d06:	00d9      	lsls	r1, r3, #3
 8000d08:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <dmaStart+0xcc>)
 8000d0a:	5859      	ldr	r1, [r3, r1]
 8000d0c:	680b      	ldr	r3, [r1, #0]
 8000d0e:	f023 0301 	bic.w	r3, r3, #1
 8000d12:	600b      	str	r3, [r1, #0]
	for (dmaStream = 0; dmaStream<NUM_OF_DMA_STREAMS; dmaStream++)
 8000d14:	3201      	adds	r2, #1
 8000d16:	b252      	sxtb	r2, r2
 8000d18:	2a01      	cmp	r2, #1
 8000d1a:	dc2a      	bgt.n	8000d72 <dmaStart+0xb2>
		hdma = &DMA_Handler[dmaStream];
 8000d1c:	4613      	mov	r3, r2
		if (hdma->Instance < DMA2_Channel1)
 8000d1e:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 8000d22:	00c1      	lsls	r1, r0, #3
 8000d24:	4819      	ldr	r0, [pc, #100]	; (8000d8c <dmaStart+0xcc>)
 8000d26:	5841      	ldr	r1, [r0, r1]
 8000d28:	4819      	ldr	r0, [pc, #100]	; (8000d90 <dmaStart+0xd0>)
 8000d2a:	4281      	cmp	r1, r0
 8000d2c:	d8cd      	bhi.n	8000cca <dmaStart+0xa>
			__HAL_RCC_DMA1_CLK_ENABLE();
 8000d2e:	4914      	ldr	r1, [pc, #80]	; (8000d80 <dmaStart+0xc0>)
 8000d30:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8000d32:	f040 0001 	orr.w	r0, r0, #1
 8000d36:	6488      	str	r0, [r1, #72]	; 0x48
 8000d38:	6c89      	ldr	r1, [r1, #72]	; 0x48
 8000d3a:	f001 0101 	and.w	r1, r1, #1
 8000d3e:	9100      	str	r1, [sp, #0]
 8000d40:	9900      	ldr	r1, [sp, #0]
		__HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_GL4 | DMA_FLAG_TE4 | DMA_FLAG_HT4 | DMA_FLAG_TC4);
 8000d42:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
 8000d46:	00c1      	lsls	r1, r0, #3
 8000d48:	4810      	ldr	r0, [pc, #64]	; (8000d8c <dmaStart+0xcc>)
 8000d4a:	5840      	ldr	r0, [r0, r1]
 8000d4c:	4911      	ldr	r1, [pc, #68]	; (8000d94 <dmaStart+0xd4>)
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d9ca      	bls.n	8000ce8 <dmaStart+0x28>
 8000d52:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8000d56:	f501 7160 	add.w	r1, r1, #896	; 0x380
 8000d5a:	6048      	str	r0, [r1, #4]
 8000d5c:	e7c8      	b.n	8000cf0 <dmaStart+0x30>
			__HAL_DMA_ENABLE(hdma);
 8000d5e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000d62:	00d9      	lsls	r1, r3, #3
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <dmaStart+0xcc>)
 8000d66:	5859      	ldr	r1, [r3, r1]
 8000d68:	680b      	ldr	r3, [r1, #0]
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	600b      	str	r3, [r1, #0]
 8000d70:	e7d0      	b.n	8000d14 <dmaStart+0x54>
		}

	}

	return result;
}
 8000d72:	2000      	movs	r0, #0
 8000d74:	b002      	add	sp, #8
 8000d76:	4770      	bx	lr
 8000d78:	2000      	movs	r0, #0
 8000d7a:	4770      	bx	lr
 8000d7c:	bffdfbf8 	.word	0xbffdfbf8
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40020000 	.word	0x40020000
 8000d88:	08005098 	.word	0x08005098
 8000d8c:	20000158 	.word	0x20000158
 8000d90:	40020407 	.word	0x40020407
 8000d94:	40020080 	.word	0x40020080

08000d98 <FlashCalcOffset>:
 ****************************************************************************/
uint32_t FlashCalcOffset ( uint32_t initSector, uint32_t finalSector )
{
	uint32_t offset = 0;

	offset = (finalSector - initSector) * (FLASH_SECTOR_SIZE);
 8000d98:	1a08      	subs	r0, r1, r0

	return offset;
}
 8000d9a:	00c0      	lsls	r0, r0, #3
 8000d9c:	4770      	bx	lr
	...

08000da0 <FlashInit>:
{
 8000da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FlashContext[i].initAddress = FLASH_BASE;
 8000da4:	4c26      	ldr	r4, [pc, #152]	; (8000e40 <FlashInit+0xa0>)
 8000da6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000daa:	6063      	str	r3, [r4, #4]
	FlashContext[i].initSector = 0;
 8000dac:	2600      	movs	r6, #0
 8000dae:	6026      	str	r6, [r4, #0]
	FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, FlashInstanceMap[0].sectors);
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <FlashInit+0xa4>)
 8000db2:	681f      	ldr	r7, [r3, #0]
 8000db4:	4639      	mov	r1, r7
 8000db6:	4630      	mov	r0, r6
 8000db8:	f7ff ffee 	bl	8000d98 <FlashCalcOffset>
 8000dbc:	60a0      	str	r0, [r4, #8]
	for (i = 1; i < NUM_OF_FLASH; i++)
 8000dbe:	2401      	movs	r4, #1
 8000dc0:	e005      	b.n	8000dce <FlashInit+0x2e>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8000dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc6:	e00f      	b.n	8000de8 <FlashInit+0x48>
			success = RET_FAIL;
 8000dc8:	2601      	movs	r6, #1
	for (i = 1; i < NUM_OF_FLASH; i++)
 8000dca:	3401      	adds	r4, #1
 8000dcc:	b2e4      	uxtb	r4, r4
 8000dce:	2c03      	cmp	r4, #3
 8000dd0:	d833      	bhi.n	8000e3a <FlashInit+0x9a>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <FlashInit+0xa8>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d0f1      	beq.n	8000dc2 <FlashInit+0x22>
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <FlashInit+0xac>)
 8000de0:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8000de4:	0adb      	lsrs	r3, r3, #11
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	429f      	cmp	r7, r3
 8000dea:	d2ed      	bcs.n	8000dc8 <FlashInit+0x28>
			FlashContext[i].initSector = sectorUsed;
 8000dec:	4d14      	ldr	r5, [pc, #80]	; (8000e40 <FlashInit+0xa0>)
 8000dee:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8000df2:	eb08 0204 	add.w	r2, r8, r4
 8000df6:	0093      	lsls	r3, r2, #2
 8000df8:	18e8      	adds	r0, r5, r3
 8000dfa:	50ef      	str	r7, [r5, r3]
			FlashContext[i].initAddress = FlashContext[i-1].initAddress + FlashContext[i-1].maxOffset;
 8000dfc:	f104 3eff 	add.w	lr, r4, #4294967295
 8000e00:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8000e04:	eb03 010e 	add.w	r1, r3, lr
 8000e08:	008a      	lsls	r2, r1, #2
 8000e0a:	442a      	add	r2, r5
 8000e0c:	6851      	ldr	r1, [r2, #4]
 8000e0e:	4473      	add	r3, lr
 8000e10:	009a      	lsls	r2, r3, #2
 8000e12:	442a      	add	r2, r5
 8000e14:	6893      	ldr	r3, [r2, #8]
 8000e16:	440b      	add	r3, r1
 8000e18:	6043      	str	r3, [r0, #4]
			FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, (sectorUsed + FlashInstanceMap[i].sectors));
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <FlashInit+0xa4>)
 8000e1c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000e20:	eb07 0903 	add.w	r9, r7, r3
 8000e24:	4649      	mov	r1, r9
 8000e26:	4638      	mov	r0, r7
 8000e28:	f7ff ffb6 	bl	8000d98 <FlashCalcOffset>
 8000e2c:	44a0      	add	r8, r4
 8000e2e:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8000e32:	441d      	add	r5, r3
 8000e34:	60a8      	str	r0, [r5, #8]
			sectorUsed +=  FlashInstanceMap[i].sectors;
 8000e36:	464f      	mov	r7, r9
 8000e38:	e7c7      	b.n	8000dca <FlashInit+0x2a>
}
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e40:	200001e8 	.word	0x200001e8
 8000e44:	08005098 	.word	0x08005098
 8000e48:	1fff75e0 	.word	0x1fff75e0
 8000e4c:	003ffc00 	.word	0x003ffc00

08000e50 <GPIOWritePort>:
 ****************************************************************************/
eError GPIOWritePort(tGPIO port, tGPIOValue value)
{
	eError 	success = RET_OK;

	if ( value == GPIO_DEFAULT )
 8000e50:	2903      	cmp	r1, #3
 8000e52:	d015      	beq.n	8000e80 <GPIOWritePort+0x30>
{
 8000e54:	b508      	push	{r3, lr}
 8000e56:	460a      	mov	r2, r1
		success = RET_INVALID_PARAMETER;
		return success;
	}


	if ( value != GPIO_TOGGLE )
 8000e58:	2902      	cmp	r1, #2
 8000e5a:	d008      	beq.n	8000e6e <GPIOWritePort+0x1e>
	{
		HAL_GPIO_WritePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin, value);
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <GPIOWritePort+0x34>)
 8000e5e:	0100      	lsls	r0, r0, #4
 8000e60:	1819      	adds	r1, r3, r0
 8000e62:	8889      	ldrh	r1, [r1, #4]
 8000e64:	5818      	ldr	r0, [r3, r0]
 8000e66:	f000 ffeb 	bl	8001e40 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
	}

	return success;
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <GPIOWritePort+0x34>)
 8000e70:	0100      	lsls	r0, r0, #4
 8000e72:	181a      	adds	r2, r3, r0
 8000e74:	8891      	ldrh	r1, [r2, #4]
 8000e76:	5818      	ldr	r0, [r3, r0]
 8000e78:	f000 ffe7 	bl	8001e4a <HAL_GPIO_TogglePin>
	return success;
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	bd08      	pop	{r3, pc}
		return success;
 8000e80:	2005      	movs	r0, #5
 8000e82:	4770      	bx	lr
 8000e84:	080050a8 	.word	0x080050a8

08000e88 <InitGPIOClock>:
 * @brief  Enable GPIO clock.
 * @param	port to enable clock.
 * @return  None.
 ****************************************************************************/
void InitGPIOClock(tGPIO port)
{
 8000e88:	b086      	sub	sp, #24
	/* Enable the GPIO Clock */
#ifdef GPIOA
	if ( GPIOInstanceMap[port].port == GPIOA ){
 8000e8a:	0103      	lsls	r3, r0, #4
 8000e8c:	4a3c      	ldr	r2, [pc, #240]	; (8000f80 <InitGPIOClock+0xf8>)
 8000e8e:	58d3      	ldr	r3, [r2, r3]
 8000e90:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e94:	d01f      	beq.n	8000ed6 <InitGPIOClock+0x4e>
		__GPIOA_CLK_ENABLE();
	}
#endif //GPIOA

#ifdef GPIOB
	if( GPIOInstanceMap[port].port == GPIOB ){
 8000e96:	0103      	lsls	r3, r0, #4
 8000e98:	4a39      	ldr	r2, [pc, #228]	; (8000f80 <InitGPIOClock+0xf8>)
 8000e9a:	58d2      	ldr	r2, [r2, r3]
 8000e9c:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <InitGPIOClock+0xfc>)
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d027      	beq.n	8000ef2 <InitGPIOClock+0x6a>
		__GPIOB_CLK_ENABLE();
	}
#endif //GPIOB

#ifdef GPIOC
	if( GPIOInstanceMap[port].port == GPIOC ){
 8000ea2:	0103      	lsls	r3, r0, #4
 8000ea4:	4a36      	ldr	r2, [pc, #216]	; (8000f80 <InitGPIOClock+0xf8>)
 8000ea6:	58d2      	ldr	r2, [r2, r3]
 8000ea8:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <InitGPIOClock+0x100>)
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d02f      	beq.n	8000f0e <InitGPIOClock+0x86>
		__GPIOC_CLK_ENABLE();
	}
#endif //GPIOC

#ifdef GPIOD
	if( GPIOInstanceMap[port].port == GPIOD ){
 8000eae:	0103      	lsls	r3, r0, #4
 8000eb0:	4a33      	ldr	r2, [pc, #204]	; (8000f80 <InitGPIOClock+0xf8>)
 8000eb2:	58d2      	ldr	r2, [r2, r3]
 8000eb4:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <InitGPIOClock+0x104>)
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d037      	beq.n	8000f2a <InitGPIOClock+0xa2>
		__GPIOD_CLK_ENABLE();
	}
#endif //GPIOD

#ifdef GPIOE
	if( GPIOInstanceMap[port].port == GPIOE ){
 8000eba:	0103      	lsls	r3, r0, #4
 8000ebc:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <InitGPIOClock+0xf8>)
 8000ebe:	58d2      	ldr	r2, [r2, r3]
 8000ec0:	4b33      	ldr	r3, [pc, #204]	; (8000f90 <InitGPIOClock+0x108>)
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d03f      	beq.n	8000f46 <InitGPIOClock+0xbe>
		__GPIOG_CLK_ENABLE();
	}
#endif //GPIOG

#ifdef GPIOH
	if( GPIOInstanceMap[port].port == GPIOH ){
 8000ec6:	0100      	lsls	r0, r0, #4
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <InitGPIOClock+0xf8>)
 8000eca:	581a      	ldr	r2, [r3, r0]
 8000ecc:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <InitGPIOClock+0x10c>)
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d047      	beq.n	8000f62 <InitGPIOClock+0xda>
		__GPIOI_CLK_ENABLE();
	}
#endif //GPIOI


}
 8000ed2:	b006      	add	sp, #24
 8000ed4:	4770      	bx	lr
		__GPIOA_CLK_ENABLE();
 8000ed6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000eda:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ee0:	f042 0201 	orr.w	r2, r2, #1
 8000ee4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	9b00      	ldr	r3, [sp, #0]
 8000ef0:	e7d1      	b.n	8000e96 <InitGPIOClock+0xe>
		__GPIOB_CLK_ENABLE();
 8000ef2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000ef6:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8000efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000efc:	f042 0202 	orr.w	r2, r2, #2
 8000f00:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	9b01      	ldr	r3, [sp, #4]
 8000f0c:	e7c9      	b.n	8000ea2 <InitGPIOClock+0x1a>
		__GPIOC_CLK_ENABLE();
 8000f0e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000f12:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f18:	f042 0204 	orr.w	r2, r2, #4
 8000f1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	9b02      	ldr	r3, [sp, #8]
 8000f28:	e7c1      	b.n	8000eae <InitGPIOClock+0x26>
		__GPIOD_CLK_ENABLE();
 8000f2a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000f2e:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f34:	f042 0208 	orr.w	r2, r2, #8
 8000f38:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3c:	f003 0308 	and.w	r3, r3, #8
 8000f40:	9303      	str	r3, [sp, #12]
 8000f42:	9b03      	ldr	r3, [sp, #12]
 8000f44:	e7b9      	b.n	8000eba <InitGPIOClock+0x32>
		__GPIOE_CLK_ENABLE();
 8000f46:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000f4a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f50:	f042 0210 	orr.w	r2, r2, #16
 8000f54:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	9304      	str	r3, [sp, #16]
 8000f5e:	9b04      	ldr	r3, [sp, #16]
 8000f60:	e7b1      	b.n	8000ec6 <InitGPIOClock+0x3e>
		__GPIOH_CLK_ENABLE();
 8000f62:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000f66:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f70:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f78:	9305      	str	r3, [sp, #20]
 8000f7a:	9b05      	ldr	r3, [sp, #20]
}
 8000f7c:	e7a9      	b.n	8000ed2 <InitGPIOClock+0x4a>
 8000f7e:	bf00      	nop
 8000f80:	080050a8 	.word	0x080050a8
 8000f84:	48000400 	.word	0x48000400
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	48000c00 	.word	0x48000c00
 8000f90:	48001000 	.word	0x48001000
 8000f94:	48001c00 	.word	0x48001c00

08000f98 <GPIOInit>:
{
 8000f98:	b570      	push	{r4, r5, r6, lr}
 8000f9a:	b086      	sub	sp, #24
	for (port = 0; port < NUM_OF_GPIO; port++)
 8000f9c:	2400      	movs	r4, #0
	eError 				success = RET_OK;
 8000f9e:	4626      	mov	r6, r4
	for (port = 0; port < NUM_OF_GPIO; port++)
 8000fa0:	e001      	b.n	8000fa6 <GPIOInit+0xe>
 8000fa2:	3401      	adds	r4, #1
 8000fa4:	b2e4      	uxtb	r4, r4
 8000fa6:	2c10      	cmp	r4, #16
 8000fa8:	d81b      	bhi.n	8000fe2 <GPIOInit+0x4a>
		InitGPIOClock(port);
 8000faa:	4620      	mov	r0, r4
 8000fac:	f7ff ff6c 	bl	8000e88 <InitGPIOClock>
        GPIO_InitStructure.Pin =  	(uint32_t)GPIOInstanceMap[port].pin;
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <GPIOInit+0x50>)
 8000fb2:	0123      	lsls	r3, r4, #4
 8000fb4:	18d5      	adds	r5, r2, r3
 8000fb6:	88a9      	ldrh	r1, [r5, #4]
 8000fb8:	9101      	str	r1, [sp, #4]
		GPIO_InitStructure.Mode = 	(uint32_t)GPIOInstanceMap[port].mode;
 8000fba:	68a9      	ldr	r1, [r5, #8]
 8000fbc:	9102      	str	r1, [sp, #8]
		GPIO_InitStructure.Speed = 	(uint32_t)GPIOInstanceMap[port].speed;
 8000fbe:	7b29      	ldrb	r1, [r5, #12]
 8000fc0:	9104      	str	r1, [sp, #16]
		GPIO_InitStructure.Pull = 	(uint32_t)GPIOInstanceMap[port].pupd;
 8000fc2:	7b69      	ldrb	r1, [r5, #13]
 8000fc4:	9103      	str	r1, [sp, #12]
		GPIO_InitStructure.Alternate = (uint32_t)GPIOInstanceMap[port].alternate;
 8000fc6:	7ba9      	ldrb	r1, [r5, #14]
 8000fc8:	9105      	str	r1, [sp, #20]
		HAL_GPIO_Init(GPIOInstanceMap[port].port, &GPIO_InitStructure);
 8000fca:	a901      	add	r1, sp, #4
 8000fcc:	58d0      	ldr	r0, [r2, r3]
 8000fce:	f000 fe67 	bl	8001ca0 <HAL_GPIO_Init>
		if ( GPIOInstanceMap[port].initialValue != GPIO_DEFAULT )
 8000fd2:	7be9      	ldrb	r1, [r5, #15]
 8000fd4:	2903      	cmp	r1, #3
 8000fd6:	d0e4      	beq.n	8000fa2 <GPIOInit+0xa>
			success = GPIOWritePort(port, GPIOInstanceMap[port].initialValue);
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f7ff ff39 	bl	8000e50 <GPIOWritePort>
 8000fde:	4606      	mov	r6, r0
 8000fe0:	e7df      	b.n	8000fa2 <GPIOInit+0xa>
}
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	b006      	add	sp, #24
 8000fe6:	bd70      	pop	{r4, r5, r6, pc}
 8000fe8:	080050a8 	.word	0x080050a8

08000fec <interruptsInit>:
 * @brief  Init interrupts driver
 * 		   Configure all IRQ Channels declared on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsInit( void )
{
 8000fec:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 8000fee:	2400      	movs	r4, #0
 8000ff0:	e001      	b.n	8000ff6 <interruptsInit+0xa>
 8000ff2:	3401      	adds	r4, #1
 8000ff4:	b2e4      	uxtb	r4, r4
 8000ff6:	2c10      	cmp	r4, #16
 8000ff8:	d80c      	bhi.n	8001014 <interruptsInit+0x28>
	{
		if (IS_SETTABLE_PRIORITY_IRQ(interruptsInstanceMap[i].IRQn))
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <interruptsInit+0x2c>)
 8000ffc:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8001000:	f110 0f05 	cmn.w	r0, #5
 8001004:	dbf5      	blt.n	8000ff2 <interruptsInit+0x6>
		{
			HAL_NVIC_SetPriority(interruptsInstanceMap[i].IRQn, (uint32_t)interruptsInstanceMap[i].PreemptPriority, (uint32_t)interruptsInstanceMap[i].SubPriority);
 8001006:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800100a:	789a      	ldrb	r2, [r3, #2]
 800100c:	7859      	ldrb	r1, [r3, #1]
 800100e:	f000 fcd7 	bl	80019c0 <HAL_NVIC_SetPriority>
 8001012:	e7ee      	b.n	8000ff2 <interruptsInit+0x6>
		}
	}
	return result;
}
 8001014:	2000      	movs	r0, #0
 8001016:	bd10      	pop	{r4, pc}
 8001018:	20000000 	.word	0x20000000

0800101c <interruptsStart>:
 * @brief  Start interrupts driver
 * 		   Enable all IRQ Channels configured as ENABLE on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsStart( void )
{
 800101c:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 800101e:	2400      	movs	r4, #0
 8001020:	e001      	b.n	8001026 <interruptsStart+0xa>
 8001022:	3401      	adds	r4, #1
 8001024:	b2e4      	uxtb	r4, r4
 8001026:	2c10      	cmp	r4, #16
 8001028:	d80d      	bhi.n	8001046 <interruptsStart+0x2a>
	{
		if (interruptsInstanceMap[i].State == IRQ_ENABLE)
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <interruptsStart+0x30>)
 800102c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001030:	78db      	ldrb	r3, [r3, #3]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d1f5      	bne.n	8001022 <interruptsStart+0x6>
		{
			if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[i].IRQn))
 8001036:	4b05      	ldr	r3, [pc, #20]	; (800104c <interruptsStart+0x30>)
 8001038:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 800103c:	2800      	cmp	r0, #0
 800103e:	dbf0      	blt.n	8001022 <interruptsStart+0x6>
			{
				HAL_NVIC_EnableIRQ(interruptsInstanceMap[i].IRQn);
 8001040:	f000 fcf0 	bl	8001a24 <HAL_NVIC_EnableIRQ>
 8001044:	e7ed      	b.n	8001022 <interruptsStart+0x6>

		}
	}

	return result;
}
 8001046:	2000      	movs	r0, #0
 8001048:	bd10      	pop	{r4, pc}
 800104a:	bf00      	nop
 800104c:	20000000 	.word	0x20000000

08001050 <interruptsEnable>:
 * @param	None.
 * @return  None.
 ****************************************************************************/
void interruptsEnable( void )
{
	if (countIrqAllDisable<=1)
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <interruptsEnable+0x24>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d906      	bls.n	8001068 <interruptsEnable+0x18>
		countIrqAllDisable=0;
		__enable_irq();
	}
	else
	{
		countIrqAllDisable--;
 800105a:	4a06      	ldr	r2, [pc, #24]	; (8001074 <interruptsEnable+0x24>)
 800105c:	8813      	ldrh	r3, [r2, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	3b01      	subs	r3, #1
 8001062:	b29b      	uxth	r3, r3
 8001064:	8013      	strh	r3, [r2, #0]
 8001066:	4770      	bx	lr
		countIrqAllDisable=0;
 8001068:	2200      	movs	r2, #0
 800106a:	4b02      	ldr	r3, [pc, #8]	; (8001074 <interruptsEnable+0x24>)
 800106c:	801a      	strh	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800106e:	b662      	cpsie	i
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000078 	.word	0x20000078

08001078 <interruptsDisable>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
 * @return  None.
 ****************************************************************************/
void interruptsDisable( void )
{
	__disable_irq();
	countIrqAllDisable++;
 800107a:	4a03      	ldr	r2, [pc, #12]	; (8001088 <interruptsDisable+0x10>)
 800107c:	8813      	ldrh	r3, [r2, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	3301      	adds	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	8013      	strh	r3, [r2, #0]
 8001086:	4770      	bx	lr
 8001088:	20000078 	.word	0x20000078

0800108c <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 800108c:	4770      	bx	lr

0800108e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800108e:	e7fe      	b.n	800108e <HardFault_Handler>

08001090 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001090:	e7fe      	b.n	8001090 <MemManage_Handler>

08001092 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler>

08001094 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler>

08001096 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001096:	4770      	bx	lr

08001098 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 800109a:	b508      	push	{r3, lr}

	HAL_SYSTICK_IRQHandler();
 800109c:	f000 fcf4 	bl	8001a88 <HAL_SYSTICK_IRQHandler>
 80010a0:	bd08      	pop	{r3, pc}

080010a2 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 80010a2:	4770      	bx	lr

080010a4 <EXTI0_IRQHandler>:
 * @brief  This function handles external line 0 and 1 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
 80010a4:	4770      	bx	lr

080010a6 <EXTI1_IRQHandler>:
 * @brief  This function handles external line 0 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void)
{
 80010a6:	4770      	bx	lr

080010a8 <EXTI9_5_IRQHandler>:
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
}

void EXTI9_5_IRQHandler(void)
{
 80010a8:	b508      	push	{r3, lr}
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80010aa:	2020      	movs	r0, #32
 80010ac:	f000 fed2 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
 80010b0:	bd08      	pop	{r3, pc}

080010b2 <USART1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USART1_IRQHandler(void)
{
 80010b2:	b508      	push	{r3, lr}
	HAL_UART1_Callback();
 80010b4:	f000 f824 	bl	8001100 <HAL_UART1_Callback>
 80010b8:	bd08      	pop	{r3, pc}

080010ba <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */

void USART2_IRQHandler(void)
{
 80010ba:	b508      	push	{r3, lr}
	HAL_UART2_Callback();
 80010bc:	f000 f821 	bl	8001102 <HAL_UART2_Callback>
 80010c0:	bd08      	pop	{r3, pc}

080010c2 <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C1_EV_IRQHandler(void)
{
 80010c2:	b508      	push	{r3, lr}
	HAL_I2C1_Callback();
 80010c4:	f000 f822 	bl	800110c <HAL_I2C1_Callback>
 80010c8:	bd08      	pop	{r3, pc}

080010ca <I2C2_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C2_EV_IRQHandler(void)
{
 80010ca:	b508      	push	{r3, lr}
	HAL_I2C2_Callback();
 80010cc:	f000 f81f 	bl	800110e <HAL_I2C2_Callback>
 80010d0:	bd08      	pop	{r3, pc}

080010d2 <SPI1_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_IRQHandler(void)
{
 80010d2:	b508      	push	{r3, lr}
    HAL_SPI1_Callback();
 80010d4:	f000 f81c 	bl	8001110 <HAL_SPI1_Callback>
 80010d8:	bd08      	pop	{r3, pc}

080010da <SPI2_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI2_IRQHandler(void)
{
 80010da:	b508      	push	{r3, lr}
    HAL_SPI2_Callback();
 80010dc:	f000 f81d 	bl	800111a <HAL_SPI2_Callback>
 80010e0:	bd08      	pop	{r3, pc}

080010e2 <SPI3_IRQHandler>:
}

void SPI3_IRQHandler(void)
{
 80010e2:	b508      	push	{r3, lr}
    HAL_SPI3_Callback();
 80010e4:	f000 f81a 	bl	800111c <HAL_SPI3_Callback>
 80010e8:	bd08      	pop	{r3, pc}

080010ea <TIM2_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 80010ea:	4770      	bx	lr

080010ec <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 80010ec:	4770      	bx	lr

080010ee <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 80010ee:	b508      	push	{r3, lr}
	HAL_IncTick();
 80010f0:	f000 fc48 	bl	8001984 <HAL_IncTick>

	SchedulerProcessesAutoEnable();
 80010f4:	f7ff fb74 	bl	80007e0 <SchedulerProcessesAutoEnable>
#ifdef SW_TIMER_AVAILABLE
	SwTimerIrq();
 80010f8:	f7ff fd7e 	bl	8000bf8 <SwTimerIrq>
 80010fc:	bd08      	pop	{r3, pc}

080010fe <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010fe:	4770      	bx	lr

08001100 <HAL_UART1_Callback>:
  * @brief UART1 callback
  * @param None
  * @retval None
  */
void HAL_UART1_Callback(void)
{
 8001100:	4770      	bx	lr

08001102 <HAL_UART2_Callback>:
  * @brief UART2 callback
  * @param None
  * @retval None
  */
void HAL_UART2_Callback(void)
{
 8001102:	b508      	push	{r3, lr}
#ifdef IS_UART2
	uartDriverMainIRQHandler(UART_2);
 8001104:	2000      	movs	r0, #0
 8001106:	f000 fb6b 	bl	80017e0 <uartDriverMainIRQHandler>
 800110a:	bd08      	pop	{r3, pc}

0800110c <HAL_I2C1_Callback>:
#endif
}


void HAL_I2C1_Callback(void)
{
 800110c:	4770      	bx	lr

0800110e <HAL_I2C2_Callback>:
	i2cDriverMainIRQHandler(I2C_1);
#endif
}

void HAL_I2C2_Callback(void)
{
 800110e:	4770      	bx	lr

08001110 <HAL_SPI1_Callback>:
	i2cDriverMainIRQHandler(I2C_2);
#endif
}

void HAL_SPI1_Callback(void)
{
 8001110:	b508      	push	{r3, lr}
#ifdef IS_SPI1
    spiDriverMainIRQHandler(SPI_1);
 8001112:	2000      	movs	r0, #0
 8001114:	f000 f9b6 	bl	8001484 <spiDriverMainIRQHandler>
 8001118:	bd08      	pop	{r3, pc}

0800111a <HAL_SPI2_Callback>:
#endif
}

void HAL_SPI2_Callback(void)
{
 800111a:	4770      	bx	lr

0800111c <HAL_SPI3_Callback>:
    spiDriverMainIRQHandler(SPI_2);
#endif
}

void HAL_SPI3_Callback(void)
{
 800111c:	b508      	push	{r3, lr}
#ifdef IS_SPI3
    spiDriverMainIRQHandler(SPI_3);
 800111e:	2001      	movs	r0, #1
 8001120:	f000 f9b0 	bl	8001484 <spiDriverMainIRQHandler>
 8001124:	bd08      	pop	{r3, pc}
	...

08001128 <storePowerUpReason>:
 *
 ****************************************************************************/
static void storePowerUpReason( void )
{
	/* Check if the StandBy flag is set */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001128:	4b29      	ldr	r3, [pc, #164]	; (80011d0 <storePowerUpReason+0xa8>)
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001130:	d126      	bne.n	8001180 <storePowerUpReason+0x58>

		powerUpReason = SYSTEM_RESET_POWER_UP;
	}
	else
	{
		if ( __HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET )
 8001132:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <storePowerUpReason+0xac>)
 8001134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001138:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800113c:	d12f      	bne.n	800119e <storePowerUpReason+0x76>
		{
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
		}
		else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <storePowerUpReason+0xac>)
 8001140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001144:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001148:	d12d      	bne.n	80011a6 <storePowerUpReason+0x7e>
		{
			powerUpReason = SYSTEM_RESET_WATCHDOG;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET )
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <storePowerUpReason+0xac>)
 800114c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001150:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001154:	d12b      	bne.n	80011ae <storePowerUpReason+0x86>
		{
			powerUpReason = SYSTEM_RESET_SOFTWARE;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET )
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <storePowerUpReason+0xac>)
 8001158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115c:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001160:	d129      	bne.n	80011b6 <storePowerUpReason+0x8e>
		{
			powerUpReason = SYSTEM_RESET_POWER_UP;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET )
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <storePowerUpReason+0xac>)
 8001164:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001168:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800116c:	d127      	bne.n	80011be <storePowerUpReason+0x96>
		{
			powerUpReason = SYSTEM_BOR_RESET;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET )
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <storePowerUpReason+0xac>)
 8001170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001174:	2b00      	cmp	r3, #0
 8001176:	db26      	blt.n	80011c6 <storePowerUpReason+0x9e>
		{
			powerUpReason = SYSTEM_LOW_POWER_RESET;
		}
		else
		{
			powerUpReason = SYSTEM_FIRST_POWER_UP;
 8001178:	2200      	movs	r2, #0
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <storePowerUpReason+0xb0>)
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e006      	b.n	800118e <storePowerUpReason+0x66>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8001180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <storePowerUpReason+0xa8>)
 8001186:	619a      	str	r2, [r3, #24]
		powerUpReason = SYSTEM_RESET_POWER_UP;
 8001188:	2201      	movs	r2, #1
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <storePowerUpReason+0xb0>)
 800118c:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <storePowerUpReason+0xac>)
 8001190:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001194:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800119c:	4770      	bx	lr
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
 800119e:	2207      	movs	r2, #7
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <storePowerUpReason+0xb0>)
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	e7f3      	b.n	800118e <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_WATCHDOG;
 80011a6:	2202      	movs	r2, #2
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <storePowerUpReason+0xb0>)
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e7ef      	b.n	800118e <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_SOFTWARE;
 80011ae:	2203      	movs	r2, #3
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <storePowerUpReason+0xb0>)
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	e7eb      	b.n	800118e <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_POWER_UP;
 80011b6:	2201      	movs	r2, #1
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <storePowerUpReason+0xb0>)
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e7e7      	b.n	800118e <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_BOR_RESET;
 80011be:	2204      	movs	r2, #4
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <storePowerUpReason+0xb0>)
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e7e3      	b.n	800118e <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_LOW_POWER_RESET;
 80011c6:	2206      	movs	r2, #6
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <storePowerUpReason+0xb0>)
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	e7df      	b.n	800118e <storePowerUpReason+0x66>
 80011ce:	bf00      	nop
 80011d0:	40007000 	.word	0x40007000
 80011d4:	40021000 	.word	0x40021000
 80011d8:	2000007a 	.word	0x2000007a

080011dc <watchdogInit>:
	{
		result = WWDGInit();
	}
#endif
	return result;
}
 80011dc:	2000      	movs	r0, #0
 80011de:	4770      	bx	lr

080011e0 <SystemClock_Config>:
 *
 * @return  None.
 *
 ****************************************************************************/
static eError SystemClock_Config(void)
{
 80011e0:	b500      	push	{lr}
 80011e2:	b0b3      	sub	sp, #204	; 0xcc
	RCC_PeriphCLKInitTypeDef PeriphClkInit;
#endif

	do
	{
		RCC_OscInitStruct.OscillatorType = SystemMap.OscillatorType;
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <SystemClock_Config+0xc8>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	9221      	str	r2, [sp, #132]	; 0x84
		RCC_OscInitStruct.HSEState	= SystemMap.HSEState;
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	9222      	str	r2, [sp, #136]	; 0x88
		RCC_OscInitStruct.HSICalibrationValue = SystemMap.HSICalibrationValue;
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	9225      	str	r2, [sp, #148]	; 0x94
		RCC_OscInitStruct.HSIState 	= SystemMap.HSIState;
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	9224      	str	r2, [sp, #144]	; 0x90
		RCC_OscInitStruct.LSEState = SystemMap.LSEState;
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	9223      	str	r2, [sp, #140]	; 0x8c
		RCC_OscInitStruct.LSIState = SystemMap.LSIState;
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	9226      	str	r2, [sp, #152]	; 0x98
		RCC_OscInitStruct.MSIState = SystemMap.MSIState;
 80011fe:	699a      	ldr	r2, [r3, #24]
 8001200:	9227      	str	r2, [sp, #156]	; 0x9c
		RCC_OscInitStruct.MSICalibrationValue = SystemMap.MSICalibrationValue;
 8001202:	69da      	ldr	r2, [r3, #28]
 8001204:	9228      	str	r2, [sp, #160]	; 0xa0
		RCC_OscInitStruct.MSIClockRange= SystemMap.MSIClockRange;
 8001206:	6a1a      	ldr	r2, [r3, #32]
 8001208:	9229      	str	r2, [sp, #164]	; 0xa4

		RCC_OscInitStruct.PLL.PLLState 	= SystemMap.PLLState;
 800120a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800120c:	922b      	str	r2, [sp, #172]	; 0xac
		RCC_OscInitStruct.PLL.PLLSource = SystemMap.PLLSource;
 800120e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001210:	922c      	str	r2, [sp, #176]	; 0xb0
		RCC_OscInitStruct.PLL.PLLM 		= SystemMap.PLLM;
 8001212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001214:	922d      	str	r2, [sp, #180]	; 0xb4
		RCC_OscInitStruct.PLL.PLLN		= SystemMap.PLLN;
 8001216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001218:	922e      	str	r2, [sp, #184]	; 0xb8
		RCC_OscInitStruct.PLL.PLLP		= SystemMap.PLLP;
 800121a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121c:	922f      	str	r2, [sp, #188]	; 0xbc
		RCC_OscInitStruct.PLL.PLLQ		= SystemMap.PLLQ;
 800121e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001220:	9230      	str	r2, [sp, #192]	; 0xc0
		RCC_OscInitStruct.PLL.PLLR		= SystemMap.PLLR;
 8001222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001224:	9331      	str	r3, [sp, #196]	; 0xc4
	#if (INDEPENDENT_WATCHDOG == 1)//Assure that LSI is configured ON (needed by IWDG)
		RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_LSI;
		RCC_OscInitStruct.LSIState |= RCC_LSI_ON;
	#endif

		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001226:	a821      	add	r0, sp, #132	; 0x84
 8001228:	f000 ff3a 	bl	80020a0 <HAL_RCC_OscConfig>
 800122c:	b118      	cbz	r0, 8001236 <SystemClock_Config+0x56>
		{
			result = RET_FAIL;
 800122e:	2001      	movs	r0, #1
		__HAL_RCC_SYSCFG_CLK_ENABLE();
	} while (0);

	return result;

}
 8001230:	b033      	add	sp, #204	; 0xcc
 8001232:	f85d fb04 	ldr.w	pc, [sp], #4
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001236:	230f      	movs	r3, #15
 8001238:	931c      	str	r3, [sp, #112]	; 0x70
		RCC_ClkInitStruct.SYSCLKSource 	 = SystemMap.SYSCLKSource;
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <SystemClock_Config+0xc8>)
 800123c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123e:	921d      	str	r2, [sp, #116]	; 0x74
		RCC_ClkInitStruct.AHBCLKDivider  = SystemMap.AHBCLKDivider;
 8001240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001242:	921e      	str	r2, [sp, #120]	; 0x78
		RCC_ClkInitStruct.APB1CLKDivider = SystemMap.APB1CLKDivider;
 8001244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001246:	921f      	str	r2, [sp, #124]	; 0x7c
		RCC_ClkInitStruct.APB2CLKDivider = SystemMap.APB2CLKDivider;
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	9320      	str	r3, [sp, #128]	; 0x80
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800124c:	2104      	movs	r1, #4
 800124e:	a81c      	add	r0, sp, #112	; 0x70
 8001250:	f001 fa12 	bl	8002678 <HAL_RCC_ClockConfig>
 8001254:	b108      	cbz	r0, 800125a <SystemClock_Config+0x7a>
			result = RET_FAIL;
 8001256:	2001      	movs	r0, #1
 8001258:	e7ea      	b.n	8001230 <SystemClock_Config+0x50>
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800125a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800125e:	f000 fe0f 	bl	8001e80 <HAL_PWREx_ControlVoltageScaling>
 8001262:	b108      	cbz	r0, 8001268 <SystemClock_Config+0x88>
			result = RET_FAIL;
 8001264:	2001      	movs	r0, #1
 8001266:	e7e3      	b.n	8001230 <SystemClock_Config+0x50>
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001268:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800126c:	9302      	str	r3, [sp, #8]
		PeriphClkInit.RTCClockSelection = SystemMap.RTCClockSelection;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <SystemClock_Config+0xc8>)
 8001270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001272:	931b      	str	r3, [sp, #108]	; 0x6c
		HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001274:	a802      	add	r0, sp, #8
 8001276:	f001 fb8b 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800127a:	f001 faa5 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <SystemClock_Config+0xcc>)
 8001280:	fba3 3000 	umull	r3, r0, r3, r0
 8001284:	0980      	lsrs	r0, r0, #6
 8001286:	f000 fbd9 	bl	8001a3c <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800128a:	2004      	movs	r0, #4
 800128c:	f000 fbec 	bl	8001a68 <HAL_SYSTICK_CLKSourceConfig>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <SystemClock_Config+0xd0>)
 8001292:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001294:	f042 0201 	orr.w	r2, r2, #1
 8001298:	661a      	str	r2, [r3, #96]	; 0x60
 800129a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	9b01      	ldr	r3, [sp, #4]
	eError result = RET_OK;
 80012a4:	2000      	movs	r0, #0
 80012a6:	e7c3      	b.n	8001230 <SystemClock_Config+0x50>
 80012a8:	080051b8 	.word	0x080051b8
 80012ac:	10624dd3 	.word	0x10624dd3
 80012b0:	40021000 	.word	0x40021000

080012b4 <RTCSetInitDateTime>:
{
 80012b4:	b510      	push	{r4, lr}
 80012b6:	b086      	sub	sp, #24
	sTime.Hours = 0x0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f88d 3004 	strb.w	r3, [sp, #4]
	sTime.Minutes = 0x0;
 80012be:	f88d 3005 	strb.w	r3, [sp, #5]
	sTime.Seconds = 0x0;
 80012c2:	f88d 3006 	strb.w	r3, [sp, #6]
	sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 80012c6:	2240      	movs	r2, #64	; 0x40
 80012c8:	f88d 2007 	strb.w	r2, [sp, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012cc:	9304      	str	r3, [sp, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012ce:	9305      	str	r3, [sp, #20]
	if (RTCHandler.Instance != NULL) //RTC initialized
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <RTCSetInitDateTime+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	b1f3      	cbz	r3, 8001314 <RTCSetInitDateTime+0x60>
		if (HAL_RTC_SetTime(&RTCHandler, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012d6:	2201      	movs	r2, #1
 80012d8:	a901      	add	r1, sp, #4
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <RTCSetInitDateTime+0x64>)
 80012dc:	f001 fdd1 	bl	8002e82 <HAL_RTC_SetTime>
 80012e0:	b920      	cbnz	r0, 80012ec <RTCSetInitDateTime+0x38>
	eError result = RET_OK;
 80012e2:	2400      	movs	r4, #0
		if (result == RET_OK)
 80012e4:	b124      	cbz	r4, 80012f0 <RTCSetInitDateTime+0x3c>
}
 80012e6:	4620      	mov	r0, r4
 80012e8:	b006      	add	sp, #24
 80012ea:	bd10      	pop	{r4, pc}
			result = RET_FAIL;
 80012ec:	2401      	movs	r4, #1
 80012ee:	e7f9      	b.n	80012e4 <RTCSetInitDateTime+0x30>
			sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012f0:	2201      	movs	r2, #1
 80012f2:	f88d 2000 	strb.w	r2, [sp]
			sDate.Month = RTC_MONTH_JANUARY;
 80012f6:	f88d 2001 	strb.w	r2, [sp, #1]
			sDate.Date = 0x1;
 80012fa:	f88d 2002 	strb.w	r2, [sp, #2]
			sDate.Year = 0x0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f88d 3003 	strb.w	r3, [sp, #3]
			if (HAL_RTC_SetDate(&RTCHandler, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001304:	4669      	mov	r1, sp
 8001306:	4804      	ldr	r0, [pc, #16]	; (8001318 <RTCSetInitDateTime+0x64>)
 8001308:	f001 fe43 	bl	8002f92 <HAL_RTC_SetDate>
 800130c:	2800      	cmp	r0, #0
 800130e:	d0ea      	beq.n	80012e6 <RTCSetInitDateTime+0x32>
				result = RET_FAIL;
 8001310:	2401      	movs	r4, #1
 8001312:	e7e8      	b.n	80012e6 <RTCSetInitDateTime+0x32>
	eError result = RET_OK;
 8001314:	2400      	movs	r4, #0
 8001316:	e7e6      	b.n	80012e6 <RTCSetInitDateTime+0x32>
 8001318:	20000218 	.word	0x20000218

0800131c <RTCInit>:
{
 800131c:	b500      	push	{lr}
 800131e:	b083      	sub	sp, #12
	__HAL_RCC_PWR_CLK_ENABLE();
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <RTCInit+0x50>)
 8001322:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001324:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001328:	659a      	str	r2, [r3, #88]	; 0x58
 800132a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800132c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_RTC_ENABLE();
 8001334:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800133c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	__HAL_RTC_RESET_HANDLE_STATE(&RTCHandler);
 8001340:	480b      	ldr	r0, [pc, #44]	; (8001370 <RTCInit+0x54>)
 8001342:	2300      	movs	r3, #0
 8001344:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	RTCHandler.Instance = RTC;
 8001348:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <RTCInit+0x58>)
 800134a:	6002      	str	r2, [r0, #0]
	RTCHandler.Init.HourFormat = RTC_HOURFORMAT_24;
 800134c:	6043      	str	r3, [r0, #4]
	RTCHandler.Init.AsynchPrediv = 127;
 800134e:	227f      	movs	r2, #127	; 0x7f
 8001350:	6082      	str	r2, [r0, #8]
	RTCHandler.Init.SynchPrediv = 0xF9;//aux;
 8001352:	22f9      	movs	r2, #249	; 0xf9
 8001354:	60c2      	str	r2, [r0, #12]
	RTCHandler.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001356:	6103      	str	r3, [r0, #16]
	RTCHandler.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001358:	6183      	str	r3, [r0, #24]
	RTCHandler.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800135a:	61c3      	str	r3, [r0, #28]
	HAL_RTC_Init(&RTCHandler);
 800135c:	f001 fd1c 	bl	8002d98 <HAL_RTC_Init>
	RTCSetInitDateTime();
 8001360:	f7ff ffa8 	bl	80012b4 <RTCSetInitDateTime>
}
 8001364:	b003      	add	sp, #12
 8001366:	f85d fb04 	ldr.w	pc, [sp], #4
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	20000218 	.word	0x20000218
 8001374:	40002800 	.word	0x40002800

08001378 <stm32L4Init>:
{
 8001378:	b508      	push	{r3, lr}
	storePowerUpReason();
 800137a:	f7ff fed5 	bl	8001128 <storePowerUpReason>
	result = SystemClock_Config();
 800137e:	f7ff ff2f 	bl	80011e0 <SystemClock_Config>
	if (result == RET_OK)
 8001382:	4603      	mov	r3, r0
 8001384:	b108      	cbz	r0, 800138a <stm32L4Init+0x12>
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd08      	pop	{r3, pc}
			RTCInit();
 800138a:	f7ff ffc7 	bl	800131c <RTCInit>
			result = watchdogInit();
 800138e:	f7ff ff25 	bl	80011dc <watchdogInit>
 8001392:	4603      	mov	r3, r0
 8001394:	e7f7      	b.n	8001386 <stm32L4Init+0xe>

08001396 <systemGetCLkFreq>:
 * @brief   Get the System CLK Frequency
 * @param   ClockFrequency.
 * @return  eError.
 ****************************************************************************/
eError systemGetCLkFreq(uint32_t *ClockFrequency)
{
 8001396:	b510      	push	{r4, lr}
 8001398:	4604      	mov	r4, r0
    eError result = RET_OK;

    *ClockFrequency = HAL_RCC_GetHCLKFreq();
 800139a:	f001 fa15 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 800139e:	6020      	str	r0, [r4, #0]

    return result;
}
 80013a0:	2000      	movs	r0, #0
 80013a2:	bd10      	pop	{r4, pc}

080013a4 <systemPreConfiguration>:
 *    then it will jump to execute the interrupt handler located in the Flash
 * @param	None.
 * @return  None.
 ****************************************************************************/
void systemPreConfiguration( void )
{
 80013a4:	4770      	bx	lr
	...

080013a8 <spiRestartSlaveMode>:
/****************************************************************************
 *    PUBLIC FUNCTIONS
 ****************************************************************************/

static void spiRestartSlaveMode(SPI_HandleTypeDef *hspi)
{
 80013a8:	b508      	push	{r3, lr}
    uint8_t i;
#ifdef IS_SPI1
    if (hspi->Instance == SPI1){
 80013aa:	6802      	ldr	r2, [r0, #0]
    if (hspi->Instance == SPI2){
        i = SPI_2;
    }
#endif
#ifdef IS_SPI3
    if (hspi->Instance == SPI3){
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <spiRestartSlaveMode+0x30>)
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d003      	beq.n	80013ba <spiRestartSlaveMode+0x12>
 80013b2:	2100      	movs	r1, #0
        i = SPI_3;
    }
#endif

    if(hspi->Init.Mode == SPI_MODE_SLAVE) {
 80013b4:	6843      	ldr	r3, [r0, #4]
 80013b6:	b113      	cbz	r3, 80013be <spiRestartSlaveMode+0x16>
 80013b8:	bd08      	pop	{r3, pc}
        i = SPI_3;
 80013ba:	2101      	movs	r1, #1
 80013bc:	e7fa      	b.n	80013b4 <spiRestartSlaveMode+0xc>
        HAL_SPI_Receive_IT(hspi, halRxSlaveBuffer[i], SPIInstanceMap[i].rxBufferSize);
 80013be:	008b      	lsls	r3, r1, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	4a06      	ldr	r2, [pc, #24]	; (80013dc <spiRestartSlaveMode+0x34>)
 80013c4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80013c8:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80013cc:	4904      	ldr	r1, [pc, #16]	; (80013e0 <spiRestartSlaveMode+0x38>)
 80013ce:	4419      	add	r1, r3
 80013d0:	f002 fbb2 	bl	8003b38 <HAL_SPI_Receive_IT>
    }
}
 80013d4:	e7f0      	b.n	80013b8 <spiRestartSlaveMode+0x10>
 80013d6:	bf00      	nop
 80013d8:	40003c00 	.word	0x40003c00
 80013dc:	0800520c 	.word	0x0800520c
 80013e0:	20000334 	.word	0x20000334

080013e4 <HAL_SPI_ErrorCallback>:
}

/**
 * When an error ocurred. If it's SLAVE mode. Start Listening again
 **/
void  HAL_SPI_ErrorCallback (SPI_HandleTypeDef *hspi){
 80013e4:	b508      	push	{r3, lr}
    spiRestartSlaveMode(hspi);
 80013e6:	f7ff ffdf 	bl	80013a8 <spiRestartSlaveMode>
 80013ea:	bd08      	pop	{r3, pc}

080013ec <HAL_SPI_MspInit>:
  *           - NVIC configuration for SPI interrupt request enable (SHOULD NOT BE DONE HERE)
  * @param hspi: SPI handle pointer
  * @retval None
 ****************************************************************************/
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80013ec:	b082      	sub	sp, #8
#if defined(IS_SPI1)
    if (hspi->Instance == SPI1){
 80013ee:	6802      	ldr	r2, [r0, #0]
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_SPI_MspInit+0x48>)
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d005      	beq.n	8001402 <HAL_SPI_MspInit+0x16>
        __HAL_RCC_SPI2_CLK_ENABLE();
    }
#endif

#if defined(IS_SPI3)
    if (hspi->Instance == SPI3){
 80013f6:	6802      	ldr	r2, [r0, #0]
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_SPI_MspInit+0x4c>)
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d00d      	beq.n	800141a <HAL_SPI_MspInit+0x2e>
        /* Enable SPI clock */
        __HAL_RCC_SPI3_CLK_ENABLE();
    }
#endif
}
 80013fe:	b002      	add	sp, #8
 8001400:	4770      	bx	lr
        __HAL_RCC_SPI1_CLK_ENABLE();
 8001402:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001406:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001408:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800140c:	661a      	str	r2, [r3, #96]	; 0x60
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	9b00      	ldr	r3, [sp, #0]
 8001418:	e7ed      	b.n	80013f6 <HAL_SPI_MspInit+0xa>
        __HAL_RCC_SPI3_CLK_ENABLE();
 800141a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800141e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001424:	659a      	str	r2, [r3, #88]	; 0x58
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	9b01      	ldr	r3, [sp, #4]
}
 8001430:	e7e5      	b.n	80013fe <HAL_SPI_MspInit+0x12>
 8001432:	bf00      	nop
 8001434:	40013000 	.word	0x40013000
 8001438:	40003c00 	.word	0x40003c00

0800143c <HAL_SPI_MspDeInit>:
 * @param hspi ST Handler
 ****************************************************************************/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
#if defined(IS_SPI1)
    if(hspi->Instance == SPI1){
 800143c:	6802      	ldr	r2, [r0, #0]
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_SPI_MspDeInit+0x40>)
 8001440:	429a      	cmp	r2, r3
 8001442:	d004      	beq.n	800144e <HAL_SPI_MspDeInit+0x12>
        __HAL_RCC_SPI2_RELEASE_RESET();
    }
#endif

#if defined(IS_SPI3)
    if(hspi->Instance == SPI3){
 8001444:	6802      	ldr	r2, [r0, #0]
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_SPI_MspDeInit+0x44>)
 8001448:	429a      	cmp	r2, r3
 800144a:	d00b      	beq.n	8001464 <HAL_SPI_MspDeInit+0x28>
 800144c:	4770      	bx	lr
        __HAL_RCC_SPI1_FORCE_RESET();
 800144e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001458:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_RCC_SPI1_RELEASE_RESET();
 800145a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800145c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
 8001462:	e7ef      	b.n	8001444 <HAL_SPI_MspDeInit+0x8>
        __HAL_RCC_SPI3_FORCE_RESET();
 8001464:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8001468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800146a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800146e:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_SPI3_RELEASE_RESET();
 8001470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001476:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif
}
 8001478:	e7e8      	b.n	800144c <HAL_SPI_MspDeInit+0x10>
 800147a:	bf00      	nop
 800147c:	40013000 	.word	0x40013000
 8001480:	40003c00 	.word	0x40003c00

08001484 <spiDriverMainIRQHandler>:
 * 3) Prepare For Slave mode lecture in case the spiPort is a slave
 *
 * @param  spiPort Which port caused the interrupt
 ****************************************************************************/
void spiDriverMainIRQHandler(tSpiPort spiPort)
{
 8001484:	b570      	push	{r4, r5, r6, lr}
 8001486:	4604      	mov	r4, r0
    SPI_HandleTypeDef* hspi; //ST HAL SPI
    const tSpiInstanceMap* mspi;
    uint16_t interrupt;
    uint8_t byte;

    hspi        = &ST_SpiHandlers[spiPort];
 8001488:	2364      	movs	r3, #100	; 0x64
 800148a:	fb03 f300 	mul.w	r3, r3, r0
 800148e:	4a32      	ldr	r2, [pc, #200]	; (8001558 <spiDriverMainIRQHandler+0xd4>)
 8001490:	1898      	adds	r0, r3, r2
    uint32_t itsource = hspi->Instance->CR2;
 8001492:	589b      	ldr	r3, [r3, r2]
 8001494:	6859      	ldr	r1, [r3, #4]
    uint32_t itflag   = hspi->Instance->SR;
 8001496:	689b      	ldr	r3, [r3, #8]
    if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8001498:	f003 0241 	and.w	r2, r3, #65	; 0x41
 800149c:	2a01      	cmp	r2, #1
 800149e:	d007      	beq.n	80014b0 <spiDriverMainIRQHandler+0x2c>
    else if(((itflag & SPI_FLAG_TXE) != RESET) &&
 80014a0:	f013 0f02 	tst.w	r3, #2
 80014a4:	d009      	beq.n	80014ba <spiDriverMainIRQHandler+0x36>
 80014a6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80014aa:	d10c      	bne.n	80014c6 <spiDriverMainIRQHandler+0x42>
    return SPI_IT_ERR;
 80014ac:	2520      	movs	r5, #32
 80014ae:	e005      	b.n	80014bc <spiDriverMainIRQHandler+0x38>
            ((itflag & SPI_FLAG_RXNE) != RESET) &&
 80014b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80014b4:	d0f4      	beq.n	80014a0 <spiDriverMainIRQHandler+0x1c>
        return SPI_IT_RXNE;
 80014b6:	2540      	movs	r5, #64	; 0x40
 80014b8:	e000      	b.n	80014bc <spiDriverMainIRQHandler+0x38>
    return SPI_IT_ERR;
 80014ba:	2520      	movs	r5, #32
    mspi        = &SPIInstanceMap[spiPort];
    interrupt   = interruptType(hspi);

    HAL_SPI_IRQHandler(hspi);
 80014bc:	f002 fcce 	bl	8003e5c <HAL_SPI_IRQHandler>

    //If it was a read. Check what we read and put it in our buffer
    //+call any defined callback
    if(interrupt == SPI_IT_RXNE){
 80014c0:	2d40      	cmp	r5, #64	; 0x40
 80014c2:	d002      	beq.n	80014ca <spiDriverMainIRQHandler+0x46>
 80014c4:	bd70      	pop	{r4, r5, r6, pc}
        return SPI_IT_TXE;
 80014c6:	2580      	movs	r5, #128	; 0x80
 80014c8:	e7f8      	b.n	80014bc <spiDriverMainIRQHandler+0x38>
        //We'll retrieve whatever is already writtern in the buffer
        byte = *(hspi->pRxBuffPtr-1);
 80014ca:	2364      	movs	r3, #100	; 0x64
 80014cc:	4a22      	ldr	r2, [pc, #136]	; (8001558 <spiDriverMainIRQHandler+0xd4>)
 80014ce:	fb03 2304 	mla	r3, r3, r4, r2
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f813 5c01 	ldrb.w	r5, [r3, #-1]

        //Process the BYTE
        if(mspi->rxCallback!= NULL){
 80014d8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80014dc:	011a      	lsls	r2, r3, #4
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <spiDriverMainIRQHandler+0xd8>)
 80014e0:	4413      	add	r3, r2
 80014e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e4:	b34b      	cbz	r3, 800153a <spiDriverMainIRQHandler+0xb6>
            mspi->rxCallback(byte);
 80014e6:	4628      	mov	r0, r5
 80014e8:	4798      	blx	r3
        }

        /* In Slave mode will re-enable
        * interrupts and reset the ST handler as appropiate to continue
        * listening*/
        if(hspi->Init.Mode == SPI_MODE_SLAVE){
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	4a1a      	ldr	r2, [pc, #104]	; (8001558 <spiDriverMainIRQHandler+0xd4>)
 80014ee:	fb03 2304 	mla	r3, r3, r4, r2
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e5      	bne.n	80014c4 <spiDriverMainIRQHandler+0x40>
            hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80014f8:	2364      	movs	r3, #100	; 0x64
 80014fa:	fb03 2304 	mla	r3, r3, r4, r2
 80014fe:	2204      	movs	r2, #4
 8001500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001504:	2200      	movs	r2, #0
 8001506:	661a      	str	r2, [r3, #96]	; 0x60
            hspi->pRxBuffPtr  = halRxSlaveBuffer[spiPort];
 8001508:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800150c:	4914      	ldr	r1, [pc, #80]	; (8001560 <spiDriverMainIRQHandler+0xdc>)
 800150e:	440a      	add	r2, r1
 8001510:	641a      	str	r2, [r3, #64]	; 0x40
            hspi->RxXferSize  = RX_HAL_BUFFER_SIZE;
 8001512:	2205      	movs	r2, #5
 8001514:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
            hspi->RxXferCount = RX_HAL_BUFFER_SIZE;
 8001518:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

            if(hspi->RxXferCount == 0){
 800151c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1ce      	bne.n	80014c4 <spiDriverMainIRQHandler+0x40>
                __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001526:	2364      	movs	r3, #100	; 0x64
 8001528:	fb03 f404 	mul.w	r4, r3, r4
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <spiDriverMainIRQHandler+0xd4>)
 800152e:	591a      	ldr	r2, [r3, r4]
 8001530:	6853      	ldr	r3, [r2, #4]
 8001532:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001536:	6053      	str	r3, [r2, #4]
            }
        }
    }
}
 8001538:	e7c4      	b.n	80014c4 <spiDriverMainIRQHandler+0x40>
            if(GetQueueFreeBytes(&spiCBuffers[spiPort].rxBuffer) > 0){
 800153a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800153e:	00d3      	lsls	r3, r2, #3
 8001540:	4e08      	ldr	r6, [pc, #32]	; (8001564 <spiDriverMainIRQHandler+0xe0>)
 8001542:	441e      	add	r6, r3
 8001544:	4630      	mov	r0, r6
 8001546:	f7ff fa6b 	bl	8000a20 <GetQueueFreeBytes>
 800154a:	2800      	cmp	r0, #0
 800154c:	d0cd      	beq.n	80014ea <spiDriverMainIRQHandler+0x66>
                AddQueueByte(&spiCBuffers[spiPort].rxBuffer, byte);
 800154e:	4629      	mov	r1, r5
 8001550:	4630      	mov	r0, r6
 8001552:	f7ff fa36 	bl	80009c2 <AddQueueByte>
 8001556:	e7c8      	b.n	80014ea <spiDriverMainIRQHandler+0x66>
 8001558:	2000023c 	.word	0x2000023c
 800155c:	0800520c 	.word	0x0800520c
 8001560:	20000334 	.word	0x20000334
 8001564:	20000304 	.word	0x20000304

08001568 <spiInit>:
 *         any microcontroller register
 *
 * @return RET_OK or RET_FAIL
 ****************************************************************************/
eError spiInit(void)
{
 8001568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eError result = RET_OK;
    SPI_HandleTypeDef* hspi;
    const tSpiInstanceMap* mspi;
    uint8_t i;

    for(i=0; i<NUM_OF_SPI; i++) {
 800156a:	2500      	movs	r5, #0
 800156c:	e03a      	b.n	80015e4 <spiInit+0x7c>
        hspi                         = &ST_SpiHandlers[i];
        mspi                         = &SPIInstanceMap[i];
        hspi->Instance               = mspi->port;
 800156e:	491f      	ldr	r1, [pc, #124]	; (80015ec <spiInit+0x84>)
 8001570:	00ab      	lsls	r3, r5, #2
 8001572:	442b      	add	r3, r5
 8001574:	011a      	lsls	r2, r3, #4
 8001576:	188c      	adds	r4, r1, r2
 8001578:	5888      	ldr	r0, [r1, r2]
 800157a:	491d      	ldr	r1, [pc, #116]	; (80015f0 <spiInit+0x88>)
 800157c:	2264      	movs	r2, #100	; 0x64
 800157e:	fb02 f205 	mul.w	r2, r2, r5
 8001582:	188b      	adds	r3, r1, r2
 8001584:	5088      	str	r0, [r1, r2]
        hspi->Init.BaudRatePrescaler = mspi->bratePreescale;
 8001586:	68a2      	ldr	r2, [r4, #8]
 8001588:	61da      	str	r2, [r3, #28]
        hspi->Init.Direction         = mspi->direction;
 800158a:	68e2      	ldr	r2, [r4, #12]
 800158c:	609a      	str	r2, [r3, #8]
        hspi->Init.CLKPhase          = mspi->clkPhase;
 800158e:	6922      	ldr	r2, [r4, #16]
 8001590:	615a      	str	r2, [r3, #20]
        hspi->Init.CLKPolarity       = mspi->clkPol;
 8001592:	6962      	ldr	r2, [r4, #20]
 8001594:	611a      	str	r2, [r3, #16]
        hspi->Init.CRCCalculation    = mspi->crcCal;
 8001596:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
        hspi->Init.CRCPolynomial     = mspi->crcPol;
 800159a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
        hspi->Init.CRCLength		 = mspi->crcLength;
 800159e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80015a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->Init.DataSize          = mspi->dataSize;
 80015a2:	69a2      	ldr	r2, [r4, #24]
 80015a4:	60da      	str	r2, [r3, #12]
        hspi->Init.FirstBit          = mspi->firstBit;
 80015a6:	69e2      	ldr	r2, [r4, #28]
 80015a8:	621a      	str	r2, [r3, #32]
        hspi->Init.NSS               = mspi->NSS;
 80015aa:	6a22      	ldr	r2, [r4, #32]
 80015ac:	619a      	str	r2, [r3, #24]
        hspi->Init.NSSPMode			 = mspi->NSSPMode;
 80015ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->Init.TIMode            = mspi->TIMMode;
 80015b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
        hspi->Init.Mode              = mspi->mode;
 80015b6:	6862      	ldr	r2, [r4, #4]
 80015b8:	605a      	str	r2, [r3, #4]



#if defined(MON_SPI_TX_IT) || defined(MON_SPI_RX_IT)
		CreateQueue(&spiCBuffers[i].rxBuffer,
 80015ba:	006e      	lsls	r6, r5, #1
 80015bc:	1973      	adds	r3, r6, r5
 80015be:	00d8      	lsls	r0, r3, #3
 80015c0:	4f0c      	ldr	r7, [pc, #48]	; (80015f4 <spiInit+0x8c>)
 80015c2:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80015c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80015c8:	4438      	add	r0, r7
 80015ca:	f7ff f9f3 	bl	80009b4 <CreateQueue>
                SPIInstanceMap[i].rxBufferPtr,
                SPIInstanceMap[i].rxBufferSize);

		CreateQueue(&spiCBuffers[i].txBuffer,
 80015ce:	442e      	add	r6, r5
 80015d0:	00f0      	lsls	r0, r6, #3
 80015d2:	3008      	adds	r0, #8
 80015d4:	4438      	add	r0, r7
 80015d6:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80015d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80015da:	3004      	adds	r0, #4
 80015dc:	f7ff f9ea 	bl	80009b4 <CreateQueue>
    for(i=0; i<NUM_OF_SPI; i++) {
 80015e0:	3501      	adds	r5, #1
 80015e2:	b2ed      	uxtb	r5, r5
 80015e4:	2d01      	cmp	r5, #1
 80015e6:	d9c2      	bls.n	800156e <spiInit+0x6>
                SPIInstanceMap[i].txBufferSize);
#endif
    }

    return result;
}
 80015e8:	2000      	movs	r0, #0
 80015ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ec:	0800520c 	.word	0x0800520c
 80015f0:	2000023c 	.word	0x2000023c
 80015f4:	20000304 	.word	0x20000304

080015f8 <spiStart>:
 * @brief  Star the SPI handler. Called after init, sets up the microcontroller
 *         to work with SPI
 * @return RET_OK or RET_FAIL
 ****************************************************************************/
eError spiStart(void)
{
 80015f8:	b538      	push	{r3, r4, r5, lr}
    uint8_t i;
    SPI_HandleTypeDef*  hspi;  //HAL spi

    for(i=0; i<NUM_OF_SPI; i++) {
 80015fa:	2400      	movs	r4, #0
 80015fc:	e001      	b.n	8001602 <spiStart+0xa>
 80015fe:	3401      	adds	r4, #1
 8001600:	b2e4      	uxtb	r4, r4
 8001602:	2c01      	cmp	r4, #1
 8001604:	d81e      	bhi.n	8001644 <spiStart+0x4c>
        hspi = &ST_SpiHandlers[i];
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <spiStart+0x50>)
 8001608:	2564      	movs	r5, #100	; 0x64
 800160a:	fb05 3504 	mla	r5, r5, r4, r3
        HAL_SPI_DeInit(hspi);
 800160e:	4628      	mov	r0, r5
 8001610:	f002 fa00 	bl	8003a14 <HAL_SPI_DeInit>
        HAL_SPI_Init(hspi);
 8001614:	4628      	mov	r0, r5
 8001616:	f002 f9a5 	bl	8003964 <HAL_SPI_Init>
        /* Configure Generic communication so we can use the HAL
        * IRQ functions to retrieve the data, but not use the HAL_RECEIVE_IT
        * functions since we'll set the RXNE interrupt. We are using here a
        * halRxSlaveBuffer to configure the ST HAL, but we'll be using our own buffers
        * */
        if(SPIInstanceMap[i].mode == SPI_MODE_SLAVE){
 800161a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800161e:	011a      	lsls	r2, r3, #4
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <spiStart+0x54>)
 8001622:	4413      	add	r3, r2
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1e9      	bne.n	80015fe <spiStart+0x6>
            HAL_SPI_Receive_IT(hspi, halRxSlaveBuffer[i], SPIInstanceMap[i].rxBufferSize);
 800162a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <spiStart+0x54>)
 8001630:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001634:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <spiStart+0x58>)
 800163a:	4419      	add	r1, r3
 800163c:	4628      	mov	r0, r5
 800163e:	f002 fa7b 	bl	8003b38 <HAL_SPI_Receive_IT>
 8001642:	e7dc      	b.n	80015fe <spiStart+0x6>
        }
    }

    return RET_OK;
}
 8001644:	2000      	movs	r0, #0
 8001646:	bd38      	pop	{r3, r4, r5, pc}
 8001648:	2000023c 	.word	0x2000023c
 800164c:	0800520c 	.word	0x0800520c
 8001650:	20000334 	.word	0x20000334

08001654 <HAL_UART_MspInit>:
 * @brief HAL callback for UART initialization. Starts the clocks
 * @todo Also starts interrupts, but it's not supposed to do so
 * @param huart ST Huart handler
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001654:	b082      	sub	sp, #8
    if(huart->Instance == USART1){
 8001656:	6803      	ldr	r3, [r0, #0]
 8001658:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_UART_MspInit+0x4c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d004      	beq.n	8001668 <HAL_UART_MspInit+0x14>
        __HAL_RCC_USART1_CLK_ENABLE();
    }
    else if (huart->Instance == USART2){
 800165e:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_UART_MspInit+0x50>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d00c      	beq.n	800167e <HAL_UART_MspInit+0x2a>

#if defined(MON_UART_RX_IT)
    /* Enable the UART Data Register not empty Interrupt. ALWAYS ENABLED */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
#endif
}
 8001664:	b002      	add	sp, #8
 8001666:	4770      	bx	lr
        __HAL_RCC_USART1_CLK_ENABLE();
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_UART_MspInit+0x54>)
 800166a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800166c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001670:	661a      	str	r2, [r3, #96]	; 0x60
 8001672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	9b00      	ldr	r3, [sp, #0]
 800167c:	e009      	b.n	8001692 <HAL_UART_MspInit+0x3e>
        __HAL_RCC_USART2_CLK_ENABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_UART_MspInit+0x54>)
 8001680:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001682:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001686:	659a      	str	r2, [r3, #88]	; 0x58
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9b01      	ldr	r3, [sp, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001692:	6802      	ldr	r2, [r0, #0]
 8001694:	6813      	ldr	r3, [r2, #0]
 8001696:	f043 0320 	orr.w	r3, r3, #32
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e7e2      	b.n	8001664 <HAL_UART_MspInit+0x10>
 800169e:	bf00      	nop
 80016a0:	40013800 	.word	0x40013800
 80016a4:	40004400 	.word	0x40004400
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_UART_MspDeInit>:
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
    if(huart->Instance == USART1){
 80016ac:	6803      	ldr	r3, [r0, #0]
 80016ae:	4a0d      	ldr	r2, [pc, #52]	; (80016e4 <HAL_UART_MspDeInit+0x38>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d003      	beq.n	80016bc <HAL_UART_MspDeInit+0x10>
        __HAL_RCC_USART1_FORCE_RESET();
        __HAL_RCC_USART1_RELEASE_RESET();
    }
    else if (huart->Instance == USART2){
 80016b4:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <HAL_UART_MspDeInit+0x3c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00a      	beq.n	80016d0 <HAL_UART_MspDeInit+0x24>
 80016ba:	4770      	bx	lr
        __HAL_RCC_USART1_FORCE_RESET();
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_UART_MspDeInit+0x40>)
 80016be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_RCC_USART1_RELEASE_RESET();
 80016c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
 80016ce:	4770      	bx	lr
        __HAL_RCC_USART2_FORCE_RESET();
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_UART_MspDeInit+0x40>)
 80016d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_USART2_RELEASE_RESET();
 80016da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016dc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
    else if (huart->Instance == USART6){
        __HAL_RCC_USART6_FORCE_RESET();
        __HAL_RCC_USART6_RELEASE_RESET();
    }
#endif
}
 80016e2:	e7ea      	b.n	80016ba <HAL_UART_MspDeInit+0xe>
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40004400 	.word	0x40004400
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
****************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016f0:	b510      	push	{r4, lr}
 80016f2:	b082      	sub	sp, #8
	uint8_t byte;
	if ( GetQueuePendingBytes(&uartCBuffers[uartPortIrq].txBuffer) != 0)
 80016f4:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_UART_TxCpltCallback+0x70>)
 80016f6:	f993 3000 	ldrsb.w	r3, [r3]
 80016fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016fe:	00d8      	lsls	r0, r3, #3
 8001700:	3008      	adds	r0, #8
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_UART_TxCpltCallback+0x74>)
 8001704:	4418      	add	r0, r3
 8001706:	3004      	adds	r0, #4
 8001708:	f7ff f988 	bl	8000a1c <GetQueuePendingBytes>
 800170c:	b968      	cbnz	r0, 800172a <HAL_UART_TxCpltCallback+0x3a>
		 byte = (uint8_t)(GetQueueByte(&uartCBuffers[uartPortIrq].txBuffer) & (uint8_t)0xFF);
		 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPortIrq], &byte, 1);
	}
	else
	{
		 __HAL_UART_DISABLE_IT(&ST_UartHandlers[uartPortIrq], UART_IT_TXE);
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_UART_TxCpltCallback+0x70>)
 8001710:	f993 3000 	ldrsb.w	r3, [r3]
 8001714:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001718:	00da      	lsls	r2, r3, #3
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <HAL_UART_TxCpltCallback+0x78>)
 800171c:	589a      	ldr	r2, [r3, r2]
 800171e:	6813      	ldr	r3, [r2, #0]
 8001720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001724:	6013      	str	r3, [r2, #0]
	}
}
 8001726:	b002      	add	sp, #8
 8001728:	bd10      	pop	{r4, pc}
		 byte = (uint8_t)(GetQueueByte(&uartCBuffers[uartPortIrq].txBuffer) & (uint8_t)0xFF);
 800172a:	4c0d      	ldr	r4, [pc, #52]	; (8001760 <HAL_UART_TxCpltCallback+0x70>)
 800172c:	f994 3000 	ldrsb.w	r3, [r4]
 8001730:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001734:	00d8      	lsls	r0, r3, #3
 8001736:	3008      	adds	r0, #8
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_UART_TxCpltCallback+0x74>)
 800173a:	4418      	add	r0, r3
 800173c:	3004      	adds	r0, #4
 800173e:	f7ff f957 	bl	80009f0 <GetQueueByte>
 8001742:	a902      	add	r1, sp, #8
 8001744:	f801 0d01 	strb.w	r0, [r1, #-1]!
		 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPortIrq], &byte, 1);
 8001748:	f994 3000 	ldrsb.w	r3, [r4]
 800174c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001750:	00d8      	lsls	r0, r3, #3
 8001752:	2201      	movs	r2, #1
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <HAL_UART_TxCpltCallback+0x78>)
 8001756:	4418      	add	r0, r3
 8001758:	f002 fc84 	bl	8004064 <HAL_UART_Transmit_IT>
 800175c:	e7e3      	b.n	8001726 <HAL_UART_TxCpltCallback+0x36>
 800175e:	bf00      	nop
 8001760:	2000007b 	.word	0x2000007b
 8001764:	2000053c 	.word	0x2000053c
 8001768:	2000055c 	.word	0x2000055c

0800176c <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callback.
 * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 ****************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800176c:	b510      	push	{r4, lr}
 800176e:	4604      	mov	r4, r0
	const tUartInstanceMap* muart; //Montseny handler

	muart = &UARTInstanceMap[uartPortIrq];
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_UART_RxCpltCallback+0x60>)
 8001772:	f993 2000 	ldrsb.w	r2, [r3]

	//IF callback defined use it. Otherwise, default behaviour
	if(muart->rxCallback != NULL){
 8001776:	232c      	movs	r3, #44	; 0x2c
 8001778:	4915      	ldr	r1, [pc, #84]	; (80017d0 <HAL_UART_RxCpltCallback+0x64>)
 800177a:	fb03 1302 	mla	r3, r3, r2, r1
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	b143      	cbz	r3, 8001794 <HAL_UART_RxCpltCallback+0x28>
		muart->rxCallback(byteRxBuffer);
 8001782:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <HAL_UART_RxCpltCallback+0x68>)
 8001784:	7810      	ldrb	r0, [r2, #0]
 8001786:	4798      	blx	r3
		else{
			uartStatus[uartPortIrq] = RET_BUFFER_FULL;
		}
	}

	 HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8001788:	2201      	movs	r2, #1
 800178a:	4912      	ldr	r1, [pc, #72]	; (80017d4 <HAL_UART_RxCpltCallback+0x68>)
 800178c:	4620      	mov	r0, r4
 800178e:	f002 fca5 	bl	80040dc <HAL_UART_Receive_IT>
 8001792:	bd10      	pop	{r4, pc}
		if(GetQueueFreeBytes(&uartCBuffers[uartPortIrq].rxBuffer) > 0){
 8001794:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001798:	00d3      	lsls	r3, r2, #3
 800179a:	480f      	ldr	r0, [pc, #60]	; (80017d8 <HAL_UART_RxCpltCallback+0x6c>)
 800179c:	4418      	add	r0, r3
 800179e:	f7ff f93f 	bl	8000a20 <GetQueueFreeBytes>
 80017a2:	b930      	cbnz	r0, 80017b2 <HAL_UART_RxCpltCallback+0x46>
			uartStatus[uartPortIrq] = RET_BUFFER_FULL;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_UART_RxCpltCallback+0x60>)
 80017a6:	f993 3000 	ldrsb.w	r3, [r3]
 80017aa:	2108      	movs	r1, #8
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_UART_RxCpltCallback+0x70>)
 80017ae:	54d1      	strb	r1, [r2, r3]
 80017b0:	e7ea      	b.n	8001788 <HAL_UART_RxCpltCallback+0x1c>
			AddQueueByte(&uartCBuffers[uartPortIrq].rxBuffer, byteRxBuffer);
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_UART_RxCpltCallback+0x60>)
 80017b4:	f993 3000 	ldrsb.w	r3, [r3]
 80017b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80017bc:	00da      	lsls	r2, r3, #3
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <HAL_UART_RxCpltCallback+0x68>)
 80017c0:	7819      	ldrb	r1, [r3, #0]
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_UART_RxCpltCallback+0x6c>)
 80017c4:	4410      	add	r0, r2
 80017c6:	f7ff f8fc 	bl	80009c2 <AddQueueByte>
 80017ca:	e7dd      	b.n	8001788 <HAL_UART_RxCpltCallback+0x1c>
 80017cc:	2000007b 	.word	0x2000007b
 80017d0:	080052ac 	.word	0x080052ac
 80017d4:	200005d4 	.word	0x200005d4
 80017d8:	2000053c 	.word	0x2000053c
 80017dc:	20000554 	.word	0x20000554

080017e0 <uartDriverMainIRQHandler>:
/*************************************************************************//**
 * @brief  Callback Handler for the UART interrupt.
 * @param  uartPort Which port caused the interrupt
 ****************************************************************************/
void uartDriverMainIRQHandler(tUart uartPort)
{
 80017e0:	b508      	push	{r3, lr}
    UART_HandleTypeDef* huart; //HAL Uart

    huart = &ST_UartHandlers[uartPort];
 80017e2:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 80017e6:	00d3      	lsls	r3, r2, #3
    uartPortIrq = uartPort;
 80017e8:	4a03      	ldr	r2, [pc, #12]	; (80017f8 <uartDriverMainIRQHandler+0x18>)
 80017ea:	7010      	strb	r0, [r2, #0]
    HAL_UART_IRQHandler(huart);
 80017ec:	4803      	ldr	r0, [pc, #12]	; (80017fc <uartDriverMainIRQHandler+0x1c>)
 80017ee:	4418      	add	r0, r3
 80017f0:	f002 fd50 	bl	8004294 <HAL_UART_IRQHandler>
 80017f4:	bd08      	pop	{r3, pc}
 80017f6:	bf00      	nop
 80017f8:	2000007b 	.word	0x2000007b
 80017fc:	2000055c 	.word	0x2000055c

08001800 <HAL_UART_ErrorCallback>:
/*************************************************************************//**
 * @brief  Callback Handler for Errors in UART.
 * @param  huart Which port caused the interrupt
 ****************************************************************************/
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001800:	4770      	bx	lr
	...

08001804 <uartInit>:
 * 		   Initializes all UART declared on UART_map list
 *
 * @return  None.
 ****************************************************************************/
eError uartInit(void)
{
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eError result = RET_OK;
    UART_HandleTypeDef* huart;  //ST handler
    const tUartInstanceMap* muart;  //Montseny handler
    uint8_t i;

    for(i=0; i<NUM_OF_UART; i++) {
 8001806:	2400      	movs	r4, #0
 8001808:	b10c      	cbz	r4, 800180e <uartInit+0xa>




    return result;
}
 800180a:	2000      	movs	r0, #0
 800180c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance        = muart->port;
 800180e:	4a17      	ldr	r2, [pc, #92]	; (800186c <uartInit+0x68>)
 8001810:	232c      	movs	r3, #44	; 0x2c
 8001812:	fb03 f304 	mul.w	r3, r3, r4
 8001816:	18d5      	adds	r5, r2, r3
 8001818:	58d0      	ldr	r0, [r2, r3]
 800181a:	4915      	ldr	r1, [pc, #84]	; (8001870 <uartInit+0x6c>)
 800181c:	0123      	lsls	r3, r4, #4
 800181e:	1b1b      	subs	r3, r3, r4
 8001820:	00da      	lsls	r2, r3, #3
 8001822:	188b      	adds	r3, r1, r2
 8001824:	5088      	str	r0, [r1, r2]
        huart->Init.BaudRate   = muart->baudRate;
 8001826:	686a      	ldr	r2, [r5, #4]
 8001828:	605a      	str	r2, [r3, #4]
        huart->Init.WordLength = muart->dataSize;
 800182a:	7a2a      	ldrb	r2, [r5, #8]
 800182c:	609a      	str	r2, [r3, #8]
        huart->Init.StopBits   = muart->stopBits;
 800182e:	7aaa      	ldrb	r2, [r5, #10]
 8001830:	60da      	str	r2, [r3, #12]
        huart->Init.Parity     = muart->parity;
 8001832:	7a6a      	ldrb	r2, [r5, #9]
 8001834:	611a      	str	r2, [r3, #16]
        huart->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
        huart->Init.Mode       = UART_MODE_TX_RX;
 800183a:	210c      	movs	r1, #12
 800183c:	6159      	str	r1, [r3, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800183e:	61da      	str	r2, [r3, #28]
		CreateQueue(&uartCBuffers[i].rxBuffer,
 8001840:	0066      	lsls	r6, r4, #1
 8001842:	1933      	adds	r3, r6, r4
 8001844:	00d8      	lsls	r0, r3, #3
 8001846:	4f0b      	ldr	r7, [pc, #44]	; (8001874 <uartInit+0x70>)
 8001848:	8aaa      	ldrh	r2, [r5, #20]
 800184a:	69a9      	ldr	r1, [r5, #24]
 800184c:	4438      	add	r0, r7
 800184e:	f7ff f8b1 	bl	80009b4 <CreateQueue>
		CreateQueue(&uartCBuffers[i].txBuffer,
 8001852:	4426      	add	r6, r4
 8001854:	00f0      	lsls	r0, r6, #3
 8001856:	3008      	adds	r0, #8
 8001858:	4438      	add	r0, r7
 800185a:	89aa      	ldrh	r2, [r5, #12]
 800185c:	6929      	ldr	r1, [r5, #16]
 800185e:	3004      	adds	r0, #4
 8001860:	f7ff f8a8 	bl	80009b4 <CreateQueue>
    for(i=0; i<NUM_OF_UART; i++) {
 8001864:	3401      	adds	r4, #1
 8001866:	b2e4      	uxtb	r4, r4
 8001868:	e7ce      	b.n	8001808 <uartInit+0x4>
 800186a:	bf00      	nop
 800186c:	080052ac 	.word	0x080052ac
 8001870:	2000055c 	.word	0x2000055c
 8001874:	2000053c 	.word	0x2000053c

08001878 <uartStart>:
/*************************************************************************//**
 * @brief  Starts UART driver.
 * @return  None.
 ****************************************************************************/
eError uartStart(void)
{
 8001878:	b538      	push	{r3, r4, r5, lr}
    eError result = RET_OK;
    uint8_t i;
    UART_HandleTypeDef* huart;

    for(i=0; i<NUM_OF_UART; i++){
 800187a:	2400      	movs	r4, #0
 800187c:	b10c      	cbz	r4, 8001882 <uartStart+0xa>
#if defined(MON_UART_RX_IT) || defined(MON_UART_RX_DMA)
        HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
#endif
    }

    return result;
 800187e:	2000      	movs	r0, #0
 8001880:	bd38      	pop	{r3, r4, r5, pc}
        huart = &ST_UartHandlers[i];
 8001882:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8001886:	00dd      	lsls	r5, r3, #3
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <uartStart+0x3c>)
 800188a:	441d      	add	r5, r3
        if(HAL_UART_DeInit(huart) != HAL_OK)
 800188c:	4628      	mov	r0, r5
 800188e:	f002 fbc9 	bl	8004024 <HAL_UART_DeInit>
 8001892:	b958      	cbnz	r0, 80018ac <uartStart+0x34>
        if(HAL_UART_Init(huart) != HAL_OK)
 8001894:	4628      	mov	r0, r5
 8001896:	f003 f86c 	bl	8004972 <HAL_UART_Init>
 800189a:	b948      	cbnz	r0, 80018b0 <uartStart+0x38>
        HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 800189c:	2201      	movs	r2, #1
 800189e:	4906      	ldr	r1, [pc, #24]	; (80018b8 <uartStart+0x40>)
 80018a0:	4628      	mov	r0, r5
 80018a2:	f002 fc1b 	bl	80040dc <HAL_UART_Receive_IT>
    for(i=0; i<NUM_OF_UART; i++){
 80018a6:	3401      	adds	r4, #1
 80018a8:	b2e4      	uxtb	r4, r4
 80018aa:	e7e7      	b.n	800187c <uartStart+0x4>
            return RET_FAIL;
 80018ac:	2001      	movs	r0, #1
 80018ae:	bd38      	pop	{r3, r4, r5, pc}
            return RET_FAIL;
 80018b0:	2001      	movs	r0, #1
}
 80018b2:	bd38      	pop	{r3, r4, r5, pc}
 80018b4:	2000055c 	.word	0x2000055c
 80018b8:	200005d4 	.word	0x200005d4

080018bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018c2:	e003      	b.n	80018cc <LoopCopyDataInit>

080018c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018ca:	3104      	adds	r1, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018cc:	480b      	ldr	r0, [pc, #44]	; (80018fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80018ce:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018d4:	d3f6      	bcc.n	80018c4 <CopyDataInit>
	ldr	r2, =_sbss
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <LoopForever+0x12>)
	b	LoopFillZerobss
 80018d8:	e002      	b.n	80018e0 <LoopFillZerobss>

080018da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80018da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80018dc:	f842 3b04 	str.w	r3, [r2], #4

080018e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <LoopForever+0x16>)
	cmp	r2, r3
 80018e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80018e4:	d3f9      	bcc.n	80018da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018e6:	f000 f813 	bl	8001910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ea:	f003 fb63 	bl	8004fb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ee:	f7fe fdf9 	bl	80004e4 <main>

080018f2 <LoopForever>:

LoopForever:
    b LoopForever
 80018f2:	e7fe      	b.n	80018f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018f4:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 80018f8:	08005330 	.word	0x08005330
	ldr	r0, =_sdata
 80018fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001900:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 8001904:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 8001908:	20000740 	.word	0x20000740

0800190c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC1_IRQHandler>
	...

08001910 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001910:	490f      	ldr	r1, [pc, #60]	; (8001950 <SystemInit+0x40>)
 8001912:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001916:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <SystemInit+0x44>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001928:	2000      	movs	r0, #0
 800192a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001932:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001936:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800193c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001944:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001946:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001948:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800194c:	608b      	str	r3, [r1, #8]
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b510      	push	{r4, lr}
 800195a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_InitTick+0x24>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <HAL_InitTick+0x28>)
 8001962:	fba3 3000 	umull	r3, r0, r3, r0
 8001966:	0980      	lsrs	r0, r0, #6
 8001968:	f000 f868 	bl	8001a3c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800196c:	2200      	movs	r2, #0
 800196e:	4621      	mov	r1, r4
 8001970:	f04f 30ff 	mov.w	r0, #4294967295
 8001974:	f000 f824 	bl	80019c0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001978:	2000      	movs	r0, #0
 800197a:	bd10      	pop	{r4, pc}
 800197c:	20000044 	.word	0x20000044
 8001980:	10624dd3 	.word	0x10624dd3

08001984 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001984:	4a02      	ldr	r2, [pc, #8]	; (8001990 <HAL_IncTick+0xc>)
 8001986:	6813      	ldr	r3, [r2, #0]
 8001988:	3301      	adds	r3, #1
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000073c 	.word	0x2000073c

08001994 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001994:	4b01      	ldr	r3, [pc, #4]	; (800199c <HAL_GetTick+0x8>)
 8001996:	6818      	ldr	r0, [r3, #0]
}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	2000073c 	.word	0x2000073c

080019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a0:	b538      	push	{r3, r4, r5, lr}
 80019a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff fff6 	bl	8001994 <HAL_GetTick>
 80019a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	f1b4 3fff 	cmp.w	r4, #4294967295
 80019ae:	d000      	beq.n	80019b2 <HAL_Delay+0x12>
  {
    wait++;
 80019b0:	3401      	adds	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 80019b2:	f7ff ffef 	bl	8001994 <HAL_GetTick>
 80019b6:	1b40      	subs	r0, r0, r5
 80019b8:	4284      	cmp	r4, r0
 80019ba:	d8fa      	bhi.n	80019b2 <HAL_Delay+0x12>
  {
  }
}
 80019bc:	bd38      	pop	{r3, r4, r5, pc}
	...

080019c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c2:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <HAL_NVIC_SetPriority+0x5c>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ca:	f1c3 0407 	rsb	r4, r3, #7
 80019ce:	2c04      	cmp	r4, #4
 80019d0:	bf28      	it	cs
 80019d2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d4:	1d1d      	adds	r5, r3, #4
 80019d6:	2d06      	cmp	r5, #6
 80019d8:	d917      	bls.n	8001a0a <HAL_NVIC_SetPriority+0x4a>
 80019da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	2501      	movs	r5, #1
 80019de:	fa05 f404 	lsl.w	r4, r5, r4
 80019e2:	3c01      	subs	r4, #1
 80019e4:	4021      	ands	r1, r4
 80019e6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	fa05 f303 	lsl.w	r3, r5, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80019f2:	2800      	cmp	r0, #0
 80019f4:	db0b      	blt.n	8001a0e <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	0109      	lsls	r1, r1, #4
 80019f8:	b2c9      	uxtb	r1, r1
 80019fa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019fe:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001a02:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a06:	bc30      	pop	{r4, r5}
 8001a08:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e7e6      	b.n	80019dc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	f000 000f 	and.w	r0, r0, #15
 8001a12:	0109      	lsls	r1, r1, #4
 8001a14:	b2c9      	uxtb	r1, r1
 8001a16:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HAL_NVIC_SetPriority+0x60>)
 8001a18:	5419      	strb	r1, [r3, r0]
 8001a1a:	e7f4      	b.n	8001a06 <HAL_NVIC_SetPriority+0x46>
 8001a1c:	e000ed00 	.word	0xe000ed00
 8001a20:	e000ed14 	.word	0xe000ed14

08001a24 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a24:	0942      	lsrs	r2, r0, #5
 8001a26:	f000 001f 	and.w	r0, r0, #31
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8001a30:	4b01      	ldr	r3, [pc, #4]	; (8001a38 <HAL_NVIC_EnableIRQ+0x14>)
 8001a32:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	3801      	subs	r0, #1
 8001a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a42:	d20a      	bcs.n	8001a5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_SYSTICK_Config+0x24>)
 8001a46:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a48:	21f0      	movs	r1, #240	; 0xf0
 8001a4a:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <HAL_SYSTICK_Config+0x28>)
 8001a4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	2000      	movs	r0, #0
 8001a52:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a68:	2804      	cmp	r0, #4
 8001a6a:	d005      	beq.n	8001a78 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a6c:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001a6e:	6813      	ldr	r3, [r2, #0]
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a78:	4a02      	ldr	r2, [pc, #8]	; (8001a84 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001a7a:	6813      	ldr	r3, [r2, #0]
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4770      	bx	lr
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001a88:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001a8a:	f7ff fb30 	bl	80010ee <HAL_SYSTICK_Callback>
 8001a8e:	bd08      	pop	{r3, pc}

08001a90 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d069      	beq.n	8001b68 <HAL_DMA_Init+0xd8>
{
 8001a94:	b410      	push	{r4}
 8001a96:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a98:	6801      	ldr	r1, [r0, #0]
 8001a9a:	4a34      	ldr	r2, [pc, #208]	; (8001b6c <HAL_DMA_Init+0xdc>)
 8001a9c:	4291      	cmp	r1, r2
 8001a9e:	d845      	bhi.n	8001b2c <HAL_DMA_Init+0x9c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001aa0:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <HAL_DMA_Init+0xe0>)
 8001aa2:	440a      	add	r2, r1
 8001aa4:	4933      	ldr	r1, [pc, #204]	; (8001b74 <HAL_DMA_Init+0xe4>)
 8001aa6:	fba1 1202 	umull	r1, r2, r1, r2
 8001aaa:	0912      	lsrs	r2, r2, #4
 8001aac:	0092      	lsls	r2, r2, #2
 8001aae:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ab0:	4a31      	ldr	r2, [pc, #196]	; (8001b78 <HAL_DMA_Init+0xe8>)
 8001ab2:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	6801      	ldr	r1, [r0, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001abe:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8001ac2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ac6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac8:	68dc      	ldr	r4, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001aca:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001acc:	691c      	ldr	r4, [r3, #16]
 8001ace:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad0:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad2:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad4:	699c      	ldr	r4, [r3, #24]
 8001ad6:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ad8:	69dc      	ldr	r4, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ada:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001adc:	6a1c      	ldr	r4, [r3, #32]
 8001ade:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8001ae0:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ae2:	6002      	str	r2, [r0, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001aea:	d015      	beq.n	8001b18 <HAL_DMA_Init+0x88>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001aec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_DMA_Init+0xe8>)
 8001af0:	4291      	cmp	r1, r2
 8001af2:	d026      	beq.n	8001b42 <HAL_DMA_Init+0xb2>
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001af4:	4a21      	ldr	r2, [pc, #132]	; (8001b7c <HAL_DMA_Init+0xec>)
 8001af6:	6811      	ldr	r1, [r2, #0]
 8001af8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001afa:	f000 041c 	and.w	r4, r0, #28
 8001afe:	200f      	movs	r0, #15
 8001b00:	40a0      	lsls	r0, r4
 8001b02:	ea21 0100 	bic.w	r1, r1, r0
 8001b06:	6011      	str	r1, [r2, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b08:	6811      	ldr	r1, [r2, #0]
 8001b0a:	6858      	ldr	r0, [r3, #4]
 8001b0c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001b0e:	f004 041c 	and.w	r4, r4, #28
 8001b12:	40a0      	lsls	r0, r4
 8001b14:	4301      	orrs	r1, r0
 8001b16:	6011      	str	r1, [r2, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b18:	2000      	movs	r0, #0
 8001b1a:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b22:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b2a:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <HAL_DMA_Init+0xf0>)
 8001b2e:	440a      	add	r2, r1
 8001b30:	4910      	ldr	r1, [pc, #64]	; (8001b74 <HAL_DMA_Init+0xe4>)
 8001b32:	fba1 1202 	umull	r1, r2, r1, r2
 8001b36:	0912      	lsrs	r2, r2, #4
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001b3c:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_DMA_Init+0xf4>)
 8001b3e:	6402      	str	r2, [r0, #64]	; 0x40
 8001b40:	e7b8      	b.n	8001ab4 <HAL_DMA_Init+0x24>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b42:	32a8      	adds	r2, #168	; 0xa8
 8001b44:	6811      	ldr	r1, [r2, #0]
 8001b46:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001b48:	f000 041c 	and.w	r4, r0, #28
 8001b4c:	200f      	movs	r0, #15
 8001b4e:	40a0      	lsls	r0, r4
 8001b50:	ea21 0100 	bic.w	r1, r1, r0
 8001b54:	6011      	str	r1, [r2, #0]
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b56:	6811      	ldr	r1, [r2, #0]
 8001b58:	6858      	ldr	r0, [r3, #4]
 8001b5a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8001b5c:	f004 041c 	and.w	r4, r4, #28
 8001b60:	40a0      	lsls	r0, r4
 8001b62:	4301      	orrs	r1, r0
 8001b64:	6011      	str	r1, [r2, #0]
 8001b66:	e7d7      	b.n	8001b18 <HAL_DMA_Init+0x88>
    return HAL_ERROR;
 8001b68:	2001      	movs	r0, #1
 8001b6a:	4770      	bx	lr
 8001b6c:	40020407 	.word	0x40020407
 8001b70:	bffdfff8 	.word	0xbffdfff8
 8001b74:	cccccccd 	.word	0xcccccccd
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	400204a8 	.word	0x400204a8
 8001b80:	bffdfbf8 	.word	0xbffdfbf8
 8001b84:	40020400 	.word	0x40020400

08001b88 <HAL_DMA_DeInit>:
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d04f      	beq.n	8001c2c <HAL_DMA_DeInit+0xa4>
{
 8001b8c:	b410      	push	{r4}
 8001b8e:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001b90:	6801      	ldr	r1, [r0, #0]
 8001b92:	680a      	ldr	r2, [r1, #0]
 8001b94:	f022 0201 	bic.w	r2, r2, #1
 8001b98:	600a      	str	r2, [r1, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b9a:	6801      	ldr	r1, [r0, #0]
 8001b9c:	4a24      	ldr	r2, [pc, #144]	; (8001c30 <HAL_DMA_DeInit+0xa8>)
 8001b9e:	4291      	cmp	r1, r2
 8001ba0:	d82e      	bhi.n	8001c00 <HAL_DMA_DeInit+0x78>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ba2:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <HAL_DMA_DeInit+0xac>)
 8001ba4:	440a      	add	r2, r1
 8001ba6:	4924      	ldr	r1, [pc, #144]	; (8001c38 <HAL_DMA_DeInit+0xb0>)
 8001ba8:	fba1 1202 	umull	r1, r2, r1, r2
 8001bac:	0912      	lsrs	r2, r2, #4
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001bb2:	4a22      	ldr	r2, [pc, #136]	; (8001c3c <HAL_DMA_DeInit+0xb4>)
 8001bb4:	6402      	str	r2, [r0, #64]	; 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2100      	movs	r1, #0
 8001bba:	6011      	str	r1, [r2, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001bbc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bc0:	f002 011c 	and.w	r1, r2, #28
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	408a      	lsls	r2, r1
 8001bc8:	6042      	str	r2, [r0, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8001bca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001bcc:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <HAL_DMA_DeInit+0xb4>)
 8001bce:	4291      	cmp	r1, r2
 8001bd0:	d021      	beq.n	8001c16 <HAL_DMA_DeInit+0x8e>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bd2:	4c1b      	ldr	r4, [pc, #108]	; (8001c40 <HAL_DMA_DeInit+0xb8>)
 8001bd4:	6822      	ldr	r2, [r4, #0]
 8001bd6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001bd8:	f001 001c 	and.w	r0, r1, #28
 8001bdc:	210f      	movs	r1, #15
 8001bde:	4081      	lsls	r1, r0
 8001be0:	ea22 0201 	bic.w	r2, r2, r1
 8001be4:	6022      	str	r2, [r4, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001be6:	2000      	movs	r0, #0
 8001be8:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001bea:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001bec:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001bee:	6398      	str	r0, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf0:	63d8      	str	r0, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001bf2:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001bf6:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24

  return HAL_OK;
}
 8001bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bfe:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c00:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <HAL_DMA_DeInit+0xbc>)
 8001c02:	440a      	add	r2, r1
 8001c04:	490c      	ldr	r1, [pc, #48]	; (8001c38 <HAL_DMA_DeInit+0xb0>)
 8001c06:	fba1 1202 	umull	r1, r2, r1, r2
 8001c0a:	0912      	lsrs	r2, r2, #4
 8001c0c:	0092      	lsls	r2, r2, #2
 8001c0e:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c10:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_DMA_DeInit+0xc0>)
 8001c12:	6402      	str	r2, [r0, #64]	; 0x40
 8001c14:	e7cf      	b.n	8001bb6 <HAL_DMA_DeInit+0x2e>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c16:	4c0d      	ldr	r4, [pc, #52]	; (8001c4c <HAL_DMA_DeInit+0xc4>)
 8001c18:	6822      	ldr	r2, [r4, #0]
 8001c1a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001c1c:	f001 001c 	and.w	r0, r1, #28
 8001c20:	210f      	movs	r1, #15
 8001c22:	4081      	lsls	r1, r0
 8001c24:	ea22 0201 	bic.w	r2, r2, r1
 8001c28:	6022      	str	r2, [r4, #0]
 8001c2a:	e7dc      	b.n	8001be6 <HAL_DMA_DeInit+0x5e>
    return HAL_ERROR;
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	4770      	bx	lr
 8001c30:	40020407 	.word	0x40020407
 8001c34:	bffdfff8 	.word	0xbffdfff8
 8001c38:	cccccccd 	.word	0xcccccccd
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	400204a8 	.word	0x400204a8
 8001c44:	bffdfbf8 	.word	0xbffdfbf8
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	400200a8 	.word	0x400200a8

08001c50 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c50:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c52:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d003      	beq.n	8001c64 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001c60:	2001      	movs	r0, #1
 8001c62:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c64:	6802      	ldr	r2, [r0, #0]
 8001c66:	6813      	ldr	r3, [r2, #0]
 8001c68:	f023 030e 	bic.w	r3, r3, #14
 8001c6c:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c78:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001c7a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001c7c:	f003 031c 	and.w	r3, r3, #28
 8001c80:	2201      	movs	r2, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	604b      	str	r3, [r1, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c88:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c92:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c94:	b113      	cbz	r3, 8001c9c <HAL_DMA_Abort_IT+0x4c>
    {
      hdma->XferAbortCallback(hdma);
 8001c96:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c98:	2000      	movs	r0, #0
 8001c9a:	bd08      	pop	{r3, pc}
 8001c9c:	2000      	movs	r0, #0
    }
  }
  return status;
}
 8001c9e:	bd08      	pop	{r3, pc}

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 8001ca4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001ca6:	e08c      	b.n	8001dc2 <HAL_GPIO_Init+0x122>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ca8:	08de      	lsrs	r6, r3, #3
 8001caa:	3608      	adds	r6, #8
 8001cac:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cb0:	f003 0e07 	and.w	lr, r3, #7
 8001cb4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001cb8:	270f      	movs	r7, #15
 8001cba:	fa07 f70e 	lsl.w	r7, r7, lr
 8001cbe:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cc2:	690f      	ldr	r7, [r1, #16]
 8001cc4:	fa07 f70e 	lsl.w	r7, r7, lr
 8001cc8:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8001cca:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8001cce:	e087      	b.n	8001de0 <HAL_GPIO_Init+0x140>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001cd2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cd4:	68cf      	ldr	r7, [r1, #12]
 8001cd6:	fa07 f70e 	lsl.w	r7, r7, lr
 8001cda:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8001cdc:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cde:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ce0:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ce4:	684e      	ldr	r6, [r1, #4]
 8001ce6:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001cea:	409e      	lsls	r6, r3
 8001cec:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001cee:	6045      	str	r5, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cf0:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001cf2:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cf4:	688d      	ldr	r5, [r1, #8]
 8001cf6:	fa05 f50e 	lsl.w	r5, r5, lr
 8001cfa:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001cfc:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfe:	684c      	ldr	r4, [r1, #4]
 8001d00:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001d04:	d05c      	beq.n	8001dc0 <HAL_GPIO_Init+0x120>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	4c4a      	ldr	r4, [pc, #296]	; (8001e30 <HAL_GPIO_Init+0x190>)
 8001d08:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8001d0a:	f045 0501 	orr.w	r5, r5, #1
 8001d0e:	6625      	str	r5, [r4, #96]	; 0x60
 8001d10:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8001d12:	f004 0401 	and.w	r4, r4, #1
 8001d16:	9401      	str	r4, [sp, #4]
 8001d18:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d1a:	089d      	lsrs	r5, r3, #2
 8001d1c:	1cae      	adds	r6, r5, #2
 8001d1e:	4c45      	ldr	r4, [pc, #276]	; (8001e34 <HAL_GPIO_Init+0x194>)
 8001d20:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d24:	f003 0603 	and.w	r6, r3, #3
 8001d28:	00b6      	lsls	r6, r6, #2
 8001d2a:	270f      	movs	r7, #15
 8001d2c:	40b7      	lsls	r7, r6
 8001d2e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001d32:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001d36:	d070      	beq.n	8001e1a <HAL_GPIO_Init+0x17a>
 8001d38:	4f3f      	ldr	r7, [pc, #252]	; (8001e38 <HAL_GPIO_Init+0x198>)
 8001d3a:	42b8      	cmp	r0, r7
 8001d3c:	d06f      	beq.n	8001e1e <HAL_GPIO_Init+0x17e>
 8001d3e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001d42:	42b8      	cmp	r0, r7
 8001d44:	d06d      	beq.n	8001e22 <HAL_GPIO_Init+0x182>
 8001d46:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001d4a:	42b8      	cmp	r0, r7
 8001d4c:	d06b      	beq.n	8001e26 <HAL_GPIO_Init+0x186>
 8001d4e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001d52:	42b8      	cmp	r0, r7
 8001d54:	d05f      	beq.n	8001e16 <HAL_GPIO_Init+0x176>
 8001d56:	2707      	movs	r7, #7
 8001d58:	fa07 f606 	lsl.w	r6, r7, r6
 8001d5c:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d5e:	3502      	adds	r5, #2
 8001d60:	4e34      	ldr	r6, [pc, #208]	; (8001e34 <HAL_GPIO_Init+0x194>)
 8001d62:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d66:	4c35      	ldr	r4, [pc, #212]	; (8001e3c <HAL_GPIO_Init+0x19c>)
 8001d68:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	43d4      	mvns	r4, r2
 8001d6c:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d70:	684f      	ldr	r7, [r1, #4]
 8001d72:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001d76:	d001      	beq.n	8001d7c <HAL_GPIO_Init+0xdc>
        {
          temp |= iocurrent;
 8001d78:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001d7c:	4d2f      	ldr	r5, [pc, #188]	; (8001e3c <HAL_GPIO_Init+0x19c>)
 8001d7e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8001d80:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d86:	684f      	ldr	r7, [r1, #4]
 8001d88:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001d8c:	d001      	beq.n	8001d92 <HAL_GPIO_Init+0xf2>
        {
          temp |= iocurrent;
 8001d8e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001d92:	4d2a      	ldr	r5, [pc, #168]	; (8001e3c <HAL_GPIO_Init+0x19c>)
 8001d94:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d96:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d9c:	684f      	ldr	r7, [r1, #4]
 8001d9e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001da2:	d001      	beq.n	8001da8 <HAL_GPIO_Init+0x108>
        {
          temp |= iocurrent;
 8001da4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001da8:	4d24      	ldr	r5, [pc, #144]	; (8001e3c <HAL_GPIO_Init+0x19c>)
 8001daa:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001dac:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db0:	684e      	ldr	r6, [r1, #4]
 8001db2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001db6:	d001      	beq.n	8001dbc <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 8001db8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001dbc:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <HAL_GPIO_Init+0x19c>)
 8001dbe:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8001dc0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001dc2:	680a      	ldr	r2, [r1, #0]
 8001dc4:	fa32 f403 	lsrs.w	r4, r2, r3
 8001dc8:	d02f      	beq.n	8001e2a <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001dca:	2501      	movs	r5, #1
 8001dcc:	409d      	lsls	r5, r3
    if(iocurrent)
 8001dce:	402a      	ands	r2, r5
 8001dd0:	d0f6      	beq.n	8001dc0 <HAL_GPIO_Init+0x120>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd2:	684c      	ldr	r4, [r1, #4]
 8001dd4:	2c02      	cmp	r4, #2
 8001dd6:	f43f af67 	beq.w	8001ca8 <HAL_GPIO_Init+0x8>
 8001dda:	2c12      	cmp	r4, #18
 8001ddc:	f43f af64 	beq.w	8001ca8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001de0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001de2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001de6:	2403      	movs	r4, #3
 8001de8:	fa04 f40e 	lsl.w	r4, r4, lr
 8001dec:	43e4      	mvns	r4, r4
 8001dee:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001df0:	684f      	ldr	r7, [r1, #4]
 8001df2:	f007 0703 	and.w	r7, r7, #3
 8001df6:	fa07 f70e 	lsl.w	r7, r7, lr
 8001dfa:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001dfc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dfe:	684e      	ldr	r6, [r1, #4]
 8001e00:	1e77      	subs	r7, r6, #1
 8001e02:	2f01      	cmp	r7, #1
 8001e04:	f67f af64 	bls.w	8001cd0 <HAL_GPIO_Init+0x30>
 8001e08:	2e11      	cmp	r6, #17
 8001e0a:	f43f af61 	beq.w	8001cd0 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e0e:	2e12      	cmp	r6, #18
 8001e10:	f47f af6e 	bne.w	8001cf0 <HAL_GPIO_Init+0x50>
 8001e14:	e75c      	b.n	8001cd0 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001e16:	2704      	movs	r7, #4
 8001e18:	e79e      	b.n	8001d58 <HAL_GPIO_Init+0xb8>
 8001e1a:	2700      	movs	r7, #0
 8001e1c:	e79c      	b.n	8001d58 <HAL_GPIO_Init+0xb8>
 8001e1e:	2701      	movs	r7, #1
 8001e20:	e79a      	b.n	8001d58 <HAL_GPIO_Init+0xb8>
 8001e22:	2702      	movs	r7, #2
 8001e24:	e798      	b.n	8001d58 <HAL_GPIO_Init+0xb8>
 8001e26:	2703      	movs	r7, #3
 8001e28:	e796      	b.n	8001d58 <HAL_GPIO_Init+0xb8>
  }
}
 8001e2a:	b003      	add	sp, #12
 8001e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000
 8001e38:	48000400 	.word	0x48000400
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e40:	b90a      	cbnz	r2, 8001e46 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e42:	6281      	str	r1, [r0, #40]	; 0x28
 8001e44:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e46:	6181      	str	r1, [r0, #24]
 8001e48:	4770      	bx	lr

08001e4a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001e4a:	6943      	ldr	r3, [r0, #20]
 8001e4c:	4059      	eors	r1, r3
 8001e4e:	6141      	str	r1, [r0, #20]
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e54:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	4203      	tst	r3, r0
 8001e5c:	d100      	bne.n	8001e60 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8001e5e:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e60:	4b02      	ldr	r3, [pc, #8]	; (8001e6c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001e62:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e64:	f7ff f94b 	bl	80010fe <HAL_GPIO_EXTI_Callback>
  }
}
 8001e68:	e7f9      	b.n	8001e5e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001e6a:	bf00      	nop
 8001e6c:	40010400 	.word	0x40010400

08001e70 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e70:	4b02      	ldr	r3, [pc, #8]	; (8001e7c <HAL_PWREx_GetVoltageRange+0xc>)
 8001e72:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001e74:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40007000 	.word	0x40007000

08001e80 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e80:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001e84:	d00f      	beq.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e92:	d037      	beq.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x84>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e94:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001e96:	6813      	ldr	r3, [r2, #0]
 8001e98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb2:	d023      	beq.n	8001efc <HAL_PWREx_ControlVoltageScaling+0x7c>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ebc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec0:	6013      	str	r3, [r2, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001eca:	f502 325b 	add.w	r2, r2, #224256	; 0x36c00
 8001ece:	f202 2283 	addw	r2, r2, #643	; 0x283
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0c9a      	lsrs	r2, r3, #18
 8001ed8:	2332      	movs	r3, #50	; 0x32
 8001eda:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001ede:	e000      	b.n	8001ee2 <HAL_PWREx_ControlVoltageScaling+0x62>
        wait_loop_index--;
 8001ee0:	3b01      	subs	r3, #1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001ee2:	b123      	cbz	r3, 8001eee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001ee6:	6952      	ldr	r2, [r2, #20]
 8001ee8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001eec:	d1f8      	bne.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001ef6:	d003      	beq.n	8001f00 <HAL_PWREx_ControlVoltageScaling+0x80>
        return HAL_TIMEOUT;
 8001ef8:	2003      	movs	r0, #3
 8001efa:	4770      	bx	lr
  return HAL_OK;
 8001efc:	2000      	movs	r0, #0
 8001efe:	4770      	bx	lr
 8001f00:	2000      	movs	r0, #0
 8001f02:	4770      	bx	lr
 8001f04:	2000      	movs	r0, #0
}  
 8001f06:	4770      	bx	lr
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	20000044 	.word	0x20000044

08001f10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f10:	b530      	push	{r4, r5, lr}
 8001f12:	b083      	sub	sp, #12
 8001f14:	4605      	mov	r5, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001f1e:	d00b      	beq.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f20:	f7ff ffa6 	bl	8001e70 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f24:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001f28:	d017      	beq.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f2a:	2d80      	cmp	r5, #128	; 0x80
 8001f2c:	d81f      	bhi.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f2e:	d02d      	beq.n	8001f8c <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f30:	2d70      	cmp	r5, #112	; 0x70
 8001f32:	d02d      	beq.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f34:	2100      	movs	r1, #0
 8001f36:	e01b      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4c17      	ldr	r4, [pc, #92]	; (8001f98 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001f3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001f4c:	f7ff ff90 	bl	8001e70 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f56:	65a3      	str	r3, [r4, #88]	; 0x58
 8001f58:	e7e4      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8001f5a:	2d80      	cmp	r5, #128	; 0x80
 8001f5c:	d903      	bls.n	8001f66 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8001f5e:	2da0      	cmp	r5, #160	; 0xa0
 8001f60:	d903      	bls.n	8001f6a <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f62:	2102      	movs	r1, #2
 8001f64:	e004      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f66:	2100      	movs	r1, #0
 8001f68:	e002      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	e000      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f6e:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f70:	4a0a      	ldr	r2, [pc, #40]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001f72:	6813      	ldr	r3, [r2, #0]
 8001f74:	f023 0307 	bic.w	r3, r3, #7
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	4299      	cmp	r1, r3
 8001f84:	d006      	beq.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8001f86:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8001f88:	b003      	add	sp, #12
 8001f8a:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	e7ef      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f90:	2101      	movs	r1, #1
 8001f92:	e7ed      	b.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8001f94:	2000      	movs	r0, #0
 8001f96:	e7f7      	b.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40022000 	.word	0x40022000

08001fa0 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001fa0:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f013 0f0c 	tst.w	r3, #12
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x40>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001faa:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d00e      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x34>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fb6:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d02f      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x82>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fc2:	4b33      	ldr	r3, [pc, #204]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d02c      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001fce:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001fd0:	4601      	mov	r1, r0
 8001fd2:	e018      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x66>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d1ea      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x16>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f013 0f08 	tst.w	r3, #8
 8001fe8:	d114      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0x74>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fea:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff0:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 8001ff4:	4a27      	ldr	r2, [pc, #156]	; (8002094 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ff6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001ffa:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f013 0f0c 	tst.w	r3, #12
 8002002:	d00c      	beq.n	800201e <HAL_RCC_GetSysClockFreq+0x7e>
  uint32_t sysclockfreq = 0U;
 8002004:	2000      	movs	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002006:	4a22      	ldr	r2, [pc, #136]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002008:	6893      	ldr	r3, [r2, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d00d      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x8e>
}
 8002012:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002014:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800201c:	e7ea      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = msirange;
 800201e:	4608      	mov	r0, r1
 8002020:	e7f1      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSI_VALUE;
 8002022:	481d      	ldr	r0, [pc, #116]	; (8002098 <HAL_RCC_GetSysClockFreq+0xf8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8002024:	2100      	movs	r1, #0
 8002026:	e7ee      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSE_VALUE;
 8002028:	481c      	ldr	r0, [pc, #112]	; (800209c <HAL_RCC_GetSysClockFreq+0xfc>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800202a:	2100      	movs	r1, #0
 800202c:	e7eb      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800202e:	4613      	mov	r3, r2
 8002030:	68d2      	ldr	r2, [r2, #12]
 8002032:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800203c:	3301      	adds	r3, #1
    switch (pllsource)
 800203e:	2a02      	cmp	r2, #2
 8002040:	d00a      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0xb8>
 8002042:	2a03      	cmp	r2, #3
 8002044:	d01a      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0xdc>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002046:	fbb1 f3f3 	udiv	r3, r1, r3
 800204a:	4a11      	ldr	r2, [pc, #68]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 800204c:	68d0      	ldr	r0, [r2, #12]
 800204e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002052:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8002056:	e008      	b.n	800206a <HAL_RCC_GetSysClockFreq+0xca>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002058:	480f      	ldr	r0, [pc, #60]	; (8002098 <HAL_RCC_GetSysClockFreq+0xf8>)
 800205a:	fbb0 f3f3 	udiv	r3, r0, r3
 800205e:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002060:	68d0      	ldr	r0, [r2, #12]
 8002062:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8002066:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002072:	3301      	adds	r3, #1
 8002074:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8002076:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 800207a:	e7ca      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x72>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <HAL_RCC_GetSysClockFreq+0xfc>)
 800207e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002082:	4a03      	ldr	r2, [pc, #12]	; (8002090 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002084:	68d0      	ldr	r0, [r2, #12]
 8002086:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800208a:	fb00 f003 	mul.w	r0, r0, r3
      break;
 800208e:	e7ec      	b.n	800206a <HAL_RCC_GetSysClockFreq+0xca>
 8002090:	40021000 	.word	0x40021000
 8002094:	080052f0 	.word	0x080052f0
 8002098:	00f42400 	.word	0x00f42400
 800209c:	007a1200 	.word	0x007a1200

080020a0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80020a0:	2800      	cmp	r0, #0
 80020a2:	f000 82d7 	beq.w	8002654 <HAL_RCC_OscConfig+0x5b4>
{
 80020a6:	b570      	push	{r4, r5, r6, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ac:	6803      	ldr	r3, [r0, #0]
 80020ae:	f013 0f10 	tst.w	r3, #16
 80020b2:	d03f      	beq.n	8002134 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80020b4:	4b97      	ldr	r3, [pc, #604]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f013 0f0c 	tst.w	r3, #12
 80020bc:	f040 8092 	bne.w	80021e4 <HAL_RCC_OscConfig+0x144>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c0:	4b94      	ldr	r3, [pc, #592]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f013 0f02 	tst.w	r3, #2
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_OscConfig+0x32>
 80020ca:	6983      	ldr	r3, [r0, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 82c3 	beq.w	8002658 <HAL_RCC_OscConfig+0x5b8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020d2:	6a20      	ldr	r0, [r4, #32]
 80020d4:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f013 0f08 	tst.w	r3, #8
 80020dc:	d062      	beq.n	80021a4 <HAL_RCC_OscConfig+0x104>
 80020de:	4b8d      	ldr	r3, [pc, #564]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e6:	4283      	cmp	r3, r0
 80020e8:	d263      	bcs.n	80021b2 <HAL_RCC_OscConfig+0x112>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ea:	f7ff ff11 	bl	8001f10 <RCC_SetFlashLatencyFromMSIRange>
 80020ee:	2800      	cmp	r0, #0
 80020f0:	f040 82b4 	bne.w	800265c <HAL_RCC_OscConfig+0x5bc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f4:	4b87      	ldr	r3, [pc, #540]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f042 0208 	orr.w	r2, r2, #8
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002104:	6a21      	ldr	r1, [r4, #32]
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002110:	69e1      	ldr	r1, [r4, #28]
 8002112:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002116:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002118:	f7ff ff42 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 800211c:	4b7d      	ldr	r3, [pc, #500]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002124:	4a7c      	ldr	r2, [pc, #496]	; (8002318 <HAL_RCC_OscConfig+0x278>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	40d8      	lsrs	r0, r3
 800212a:	4b7c      	ldr	r3, [pc, #496]	; (800231c <HAL_RCC_OscConfig+0x27c>)
 800212c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff fc12 	bl	8001958 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	f013 0f01 	tst.w	r3, #1
 800213a:	f000 80a1 	beq.w	8002280 <HAL_RCC_OscConfig+0x1e0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 800213e:	4b75      	ldr	r3, [pc, #468]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b08      	cmp	r3, #8
 8002148:	f000 8091 	beq.w	800226e <HAL_RCC_OscConfig+0x1ce>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800214c:	4b71      	ldr	r3, [pc, #452]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8002154:	2b0c      	cmp	r3, #12
 8002156:	f000 8083 	beq.w	8002260 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215a:	6863      	ldr	r3, [r4, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	f000 80b5 	beq.w	80022ce <HAL_RCC_OscConfig+0x22e>
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	f000 80b7 	beq.w	80022da <HAL_RCC_OscConfig+0x23a>
 800216c:	4b69      	ldr	r3, [pc, #420]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800217c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217e:	6863      	ldr	r3, [r4, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80b7 	beq.w	80022f4 <HAL_RCC_OscConfig+0x254>
        tickstart = HAL_GetTick();
 8002186:	f7ff fc05 	bl	8001994 <HAL_GetTick>
 800218a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800218c:	4b61      	ldr	r3, [pc, #388]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002194:	d174      	bne.n	8002280 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002196:	f7ff fbfd 	bl	8001994 <HAL_GetTick>
 800219a:	1b40      	subs	r0, r0, r5
 800219c:	2864      	cmp	r0, #100	; 0x64
 800219e:	d9f5      	bls.n	800218c <HAL_RCC_OscConfig+0xec>
            return HAL_TIMEOUT;
 80021a0:	2003      	movs	r0, #3
 80021a2:	e262      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021a4:	4b5b      	ldr	r3, [pc, #364]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b0:	e799      	b.n	80020e6 <HAL_RCC_OscConfig+0x46>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b2:	4b58      	ldr	r3, [pc, #352]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	f042 0208 	orr.w	r2, r2, #8
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021c2:	6a21      	ldr	r1, [r4, #32]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80021ce:	69e1      	ldr	r1, [r4, #28]
 80021d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021d4:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d6:	6a20      	ldr	r0, [r4, #32]
 80021d8:	f7ff fe9a 	bl	8001f10 <RCC_SetFlashLatencyFromMSIRange>
 80021dc:	2800      	cmp	r0, #0
 80021de:	d09b      	beq.n	8002118 <HAL_RCC_OscConfig+0x78>
            return HAL_ERROR;
 80021e0:	2001      	movs	r0, #1
 80021e2:	e242      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021e4:	6983      	ldr	r3, [r0, #24]
 80021e6:	b333      	cbz	r3, 8002236 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_MSI_ENABLE();
 80021e8:	4a4a      	ldr	r2, [pc, #296]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80021f2:	f7ff fbcf 	bl	8001994 <HAL_GetTick>
 80021f6:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80021f8:	4b46      	ldr	r3, [pc, #280]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f013 0f02 	tst.w	r3, #2
 8002200:	d106      	bne.n	8002210 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002202:	f7ff fbc7 	bl	8001994 <HAL_GetTick>
 8002206:	1b40      	subs	r0, r0, r5
 8002208:	2802      	cmp	r0, #2
 800220a:	d9f5      	bls.n	80021f8 <HAL_RCC_OscConfig+0x158>
            return HAL_TIMEOUT;
 800220c:	2003      	movs	r0, #3
 800220e:	e22c      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002210:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	f042 0208 	orr.w	r2, r2, #8
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002220:	6a21      	ldr	r1, [r4, #32]
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800222c:	69e1      	ldr	r1, [r4, #28]
 800222e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	e77e      	b.n	8002134 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_MSI_DISABLE();
 8002236:	4a37      	ldr	r2, [pc, #220]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 8002238:	6813      	ldr	r3, [r2, #0]
 800223a:	f023 0301 	bic.w	r3, r3, #1
 800223e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002240:	f7ff fba8 	bl	8001994 <HAL_GetTick>
 8002244:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8002246:	4b33      	ldr	r3, [pc, #204]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f013 0f02 	tst.w	r3, #2
 800224e:	f43f af71 	beq.w	8002134 <HAL_RCC_OscConfig+0x94>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002252:	f7ff fb9f 	bl	8001994 <HAL_GetTick>
 8002256:	1b40      	subs	r0, r0, r5
 8002258:	2802      	cmp	r0, #2
 800225a:	d9f4      	bls.n	8002246 <HAL_RCC_OscConfig+0x1a6>
            return HAL_TIMEOUT;
 800225c:	2003      	movs	r0, #3
 800225e:	e204      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002260:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b03      	cmp	r3, #3
 800226a:	f47f af76 	bne.w	800215a <HAL_RCC_OscConfig+0xba>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002276:	d003      	beq.n	8002280 <HAL_RCC_OscConfig+0x1e0>
 8002278:	6863      	ldr	r3, [r4, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 81f0 	beq.w	8002660 <HAL_RCC_OscConfig+0x5c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002280:	6823      	ldr	r3, [r4, #0]
 8002282:	f013 0f02 	tst.w	r3, #2
 8002286:	d062      	beq.n	800234e <HAL_RCC_OscConfig+0x2ae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b04      	cmp	r3, #4
 8002292:	d04b      	beq.n	800232c <HAL_RCC_OscConfig+0x28c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d03f      	beq.n	8002320 <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a0:	68e3      	ldr	r3, [r4, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d079      	beq.n	800239a <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_HSI_ENABLE();
 80022a6:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022a8:	6813      	ldr	r3, [r2, #0]
 80022aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80022b0:	f7ff fb70 	bl	8001994 <HAL_GetTick>
 80022b4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022be:	d163      	bne.n	8002388 <HAL_RCC_OscConfig+0x2e8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7ff fb68 	bl	8001994 <HAL_GetTick>
 80022c4:	1b40      	subs	r0, r0, r5
 80022c6:	2802      	cmp	r0, #2
 80022c8:	d9f5      	bls.n	80022b6 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 80022ca:	2003      	movs	r0, #3
 80022cc:	e1cd      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ce:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022d0:	6813      	ldr	r3, [r2, #0]
 80022d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	e751      	b.n	800217e <HAL_RCC_OscConfig+0xde>
 80022da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022de:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e744      	b.n	800217e <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 80022f4:	f7ff fb4e 	bl	8001994 <HAL_GetTick>
 80022f8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002302:	d0bd      	beq.n	8002280 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fb46 	bl	8001994 <HAL_GetTick>
 8002308:	1b40      	subs	r0, r0, r5
 800230a:	2864      	cmp	r0, #100	; 0x64
 800230c:	d9f5      	bls.n	80022fa <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 800230e:	2003      	movs	r0, #3
 8002310:	e1ab      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	080052d8 	.word	0x080052d8
 800231c:	20000044 	.word	0x20000044
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002320:	4bb1      	ldr	r3, [pc, #708]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d1b9      	bne.n	80022a0 <HAL_RCC_OscConfig+0x200>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232c:	4bae      	ldr	r3, [pc, #696]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002334:	d003      	beq.n	800233e <HAL_RCC_OscConfig+0x29e>
 8002336:	68e3      	ldr	r3, [r4, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8193 	beq.w	8002664 <HAL_RCC_OscConfig+0x5c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233e:	4aaa      	ldr	r2, [pc, #680]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 8002340:	6853      	ldr	r3, [r2, #4]
 8002342:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002346:	6921      	ldr	r1, [r4, #16]
 8002348:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800234c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	f013 0f08 	tst.w	r3, #8
 8002354:	d04c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x350>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002356:	6963      	ldr	r3, [r4, #20]
 8002358:	b39b      	cbz	r3, 80023c2 <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_LSI_ENABLE();
 800235a:	4aa3      	ldr	r2, [pc, #652]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800235c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002368:	f7ff fb14 	bl	8001994 <HAL_GetTick>
 800236c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800236e:	4b9e      	ldr	r3, [pc, #632]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 8002370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002374:	f013 0f02 	tst.w	r3, #2
 8002378:	d13a      	bne.n	80023f0 <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237a:	f7ff fb0b 	bl	8001994 <HAL_GetTick>
 800237e:	1b40      	subs	r0, r0, r5
 8002380:	2802      	cmp	r0, #2
 8002382:	d9f4      	bls.n	800236e <HAL_RCC_OscConfig+0x2ce>
          return HAL_TIMEOUT;
 8002384:	2003      	movs	r0, #3
 8002386:	e170      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002388:	4a97      	ldr	r2, [pc, #604]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800238a:	6853      	ldr	r3, [r2, #4]
 800238c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002390:	6921      	ldr	r1, [r4, #16]
 8002392:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002396:	6053      	str	r3, [r2, #4]
 8002398:	e7d9      	b.n	800234e <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_HSI_DISABLE();
 800239a:	4a93      	ldr	r2, [pc, #588]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80023a4:	f7ff faf6 	bl	8001994 <HAL_GetTick>
 80023a8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80023aa:	4b8f      	ldr	r3, [pc, #572]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80023b2:	d0cc      	beq.n	800234e <HAL_RCC_OscConfig+0x2ae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7ff faee 	bl	8001994 <HAL_GetTick>
 80023b8:	1b40      	subs	r0, r0, r5
 80023ba:	2802      	cmp	r0, #2
 80023bc:	d9f5      	bls.n	80023aa <HAL_RCC_OscConfig+0x30a>
            return HAL_TIMEOUT;
 80023be:	2003      	movs	r0, #3
 80023c0:	e153      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_LSI_DISABLE();
 80023c2:	4a89      	ldr	r2, [pc, #548]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 80023c4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80023d0:	f7ff fae0 	bl	8001994 <HAL_GetTick>
 80023d4:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 80023d6:	4b84      	ldr	r3, [pc, #528]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023dc:	f013 0f02 	tst.w	r3, #2
 80023e0:	d006      	beq.n	80023f0 <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e2:	f7ff fad7 	bl	8001994 <HAL_GetTick>
 80023e6:	1b40      	subs	r0, r0, r5
 80023e8:	2802      	cmp	r0, #2
 80023ea:	d9f4      	bls.n	80023d6 <HAL_RCC_OscConfig+0x336>
          return HAL_TIMEOUT;
 80023ec:	2003      	movs	r0, #3
 80023ee:	e13c      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	f013 0f04 	tst.w	r3, #4
 80023f6:	d07a      	beq.n	80024ee <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023f8:	4b7b      	ldr	r3, [pc, #492]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002400:	d136      	bne.n	8002470 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b79      	ldr	r3, [pc, #484]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 8002404:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002406:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800240a:	659a      	str	r2, [r3, #88]	; 0x58
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002416:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002418:	4b74      	ldr	r3, [pc, #464]	; (80025ec <HAL_RCC_OscConfig+0x54c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002420:	d028      	beq.n	8002474 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002422:	68a3      	ldr	r3, [r4, #8]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d039      	beq.n	800249c <HAL_RCC_OscConfig+0x3fc>
 8002428:	2b05      	cmp	r3, #5
 800242a:	d03f      	beq.n	80024ac <HAL_RCC_OscConfig+0x40c>
 800242c:	4b6e      	ldr	r3, [pc, #440]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800242e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002432:	f022 0201 	bic.w	r2, r2, #1
 8002436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800243a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800243e:	f022 0204 	bic.w	r2, r2, #4
 8002442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002446:	68a3      	ldr	r3, [r4, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d03d      	beq.n	80024c8 <HAL_RCC_OscConfig+0x428>
      tickstart = HAL_GetTick();
 800244c:	f7ff faa2 	bl	8001994 <HAL_GetTick>
 8002450:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002452:	4b65      	ldr	r3, [pc, #404]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f013 0f02 	tst.w	r3, #2
 800245c:	d146      	bne.n	80024ec <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7ff fa99 	bl	8001994 <HAL_GetTick>
 8002462:	1b80      	subs	r0, r0, r6
 8002464:	f241 3388 	movw	r3, #5000	; 0x1388
 8002468:	4298      	cmp	r0, r3
 800246a:	d9f2      	bls.n	8002452 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 800246c:	2003      	movs	r0, #3
 800246e:	e0fc      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
    FlagStatus       pwrclkchanged = RESET;
 8002470:	2500      	movs	r5, #0
 8002472:	e7d1      	b.n	8002418 <HAL_RCC_OscConfig+0x378>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002474:	4a5d      	ldr	r2, [pc, #372]	; (80025ec <HAL_RCC_OscConfig+0x54c>)
 8002476:	6813      	ldr	r3, [r2, #0]
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800247e:	f7ff fa89 	bl	8001994 <HAL_GetTick>
 8002482:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002484:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_RCC_OscConfig+0x54c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f413 7f80 	tst.w	r3, #256	; 0x100
 800248c:	d1c9      	bne.n	8002422 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248e:	f7ff fa81 	bl	8001994 <HAL_GetTick>
 8002492:	1b80      	subs	r0, r0, r6
 8002494:	2802      	cmp	r0, #2
 8002496:	d9f5      	bls.n	8002484 <HAL_RCC_OscConfig+0x3e4>
          return HAL_TIMEOUT;
 8002498:	2003      	movs	r0, #3
 800249a:	e0e6      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800249e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024aa:	e7cc      	b.n	8002446 <HAL_RCC_OscConfig+0x3a6>
 80024ac:	4b4e      	ldr	r3, [pc, #312]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 80024ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80024b2:	f042 0204 	orr.w	r2, r2, #4
 80024b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80024ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80024c6:	e7be      	b.n	8002446 <HAL_RCC_OscConfig+0x3a6>
      tickstart = HAL_GetTick();
 80024c8:	f7ff fa64 	bl	8001994 <HAL_GetTick>
 80024cc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80024ce:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d4:	f013 0f02 	tst.w	r3, #2
 80024d8:	d008      	beq.n	80024ec <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7ff fa5b 	bl	8001994 <HAL_GetTick>
 80024de:	1b80      	subs	r0, r0, r6
 80024e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80024e4:	4298      	cmp	r0, r3
 80024e6:	d9f2      	bls.n	80024ce <HAL_RCC_OscConfig+0x42e>
          return HAL_TIMEOUT;
 80024e8:	2003      	movs	r0, #3
 80024ea:	e0be      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
    if(pwrclkchanged == SET)
 80024ec:	b9e5      	cbnz	r5, 8002528 <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	f013 0f20 	tst.w	r3, #32
 80024f4:	d035      	beq.n	8002562 <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024f8:	b1e3      	cbz	r3, 8002534 <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 80024fa:	4a3b      	ldr	r2, [pc, #236]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 80024fc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002508:	f7ff fa44 	bl	8001994 <HAL_GetTick>
 800250c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 800250e:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 8002510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002514:	f013 0f02 	tst.w	r3, #2
 8002518:	d123      	bne.n	8002562 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800251a:	f7ff fa3b 	bl	8001994 <HAL_GetTick>
 800251e:	1b40      	subs	r0, r0, r5
 8002520:	2802      	cmp	r0, #2
 8002522:	d9f4      	bls.n	800250e <HAL_RCC_OscConfig+0x46e>
          return HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
 8002526:	e0a0      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4a2f      	ldr	r2, [pc, #188]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800252a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002530:	6593      	str	r3, [r2, #88]	; 0x58
 8002532:	e7dc      	b.n	80024ee <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 8002534:	4a2c      	ldr	r2, [pc, #176]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 8002536:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002542:	f7ff fa27 	bl	8001994 <HAL_GetTick>
 8002546:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800254a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800254e:	f013 0f02 	tst.w	r3, #2
 8002552:	d006      	beq.n	8002562 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002554:	f7ff fa1e 	bl	8001994 <HAL_GetTick>
 8002558:	1b40      	subs	r0, r0, r5
 800255a:	2802      	cmp	r0, #2
 800255c:	d9f4      	bls.n	8002548 <HAL_RCC_OscConfig+0x4a8>
          return HAL_TIMEOUT;
 800255e:	2003      	movs	r0, #3
 8002560:	e083      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002562:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002564:	2b00      	cmp	r3, #0
 8002566:	d07f      	beq.n	8002668 <HAL_RCC_OscConfig+0x5c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002568:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800256a:	6892      	ldr	r2, [r2, #8]
 800256c:	f002 020c 	and.w	r2, r2, #12
 8002570:	2a0c      	cmp	r2, #12
 8002572:	d07c      	beq.n	800266e <HAL_RCC_OscConfig+0x5ce>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002574:	2b02      	cmp	r3, #2
 8002576:	d023      	beq.n	80025c0 <HAL_RCC_OscConfig+0x520>
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002580:	601a      	str	r2, [r3, #0]
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002588:	d104      	bne.n	8002594 <HAL_RCC_OscConfig+0x4f4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800258a:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 800258c:	68d3      	ldr	r3, [r2, #12]
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 8002596:	68d3      	ldr	r3, [r2, #12]
 8002598:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800259c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80025a2:	f7ff f9f7 	bl	8001994 <HAL_GetTick>
 80025a6:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025b0:	d04e      	beq.n	8002650 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b2:	f7ff f9ef 	bl	8001994 <HAL_GetTick>
 80025b6:	1b00      	subs	r0, r0, r4
 80025b8:	2802      	cmp	r0, #2
 80025ba:	d9f5      	bls.n	80025a8 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80025bc:	2003      	movs	r0, #3
 80025be:	e054      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_PLL_DISABLE();
 80025c0:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 80025c2:	6813      	ldr	r3, [r2, #0]
 80025c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025c8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80025ca:	f7ff f9e3 	bl	8001994 <HAL_GetTick>
 80025ce:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_OscConfig+0x548>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCC_OscConfig+0x550>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7ff f9db 	bl	8001994 <HAL_GetTick>
 80025de:	1b40      	subs	r0, r0, r5
 80025e0:	2802      	cmp	r0, #2
 80025e2:	d9f5      	bls.n	80025d0 <HAL_RCC_OscConfig+0x530>
            return HAL_TIMEOUT;
 80025e4:	2003      	movs	r0, #3
 80025e6:	e040      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40007000 	.word	0x40007000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025f2:	1e5a      	subs	r2, r3, #1
 80025f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80025fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80025fe:	4313      	orrs	r3, r2
 8002600:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002602:	0852      	lsrs	r2, r2, #1
 8002604:	3a01      	subs	r2, #1
 8002606:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800260a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800260c:	0852      	lsrs	r2, r2, #1
 800260e:	3a01      	subs	r2, #1
 8002610:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002614:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002616:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800261a:	4a16      	ldr	r2, [pc, #88]	; (8002674 <HAL_RCC_OscConfig+0x5d4>)
 800261c:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800261e:	6813      	ldr	r3, [r2, #0]
 8002620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002624:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002626:	68d3      	ldr	r3, [r2, #12]
 8002628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262c:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800262e:	f7ff f9b1 	bl	8001994 <HAL_GetTick>
 8002632:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_RCC_OscConfig+0x5d4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800263c:	d106      	bne.n	800264c <HAL_RCC_OscConfig+0x5ac>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263e:	f7ff f9a9 	bl	8001994 <HAL_GetTick>
 8002642:	1b00      	subs	r0, r0, r4
 8002644:	2802      	cmp	r0, #2
 8002646:	d9f5      	bls.n	8002634 <HAL_RCC_OscConfig+0x594>
            return HAL_TIMEOUT;
 8002648:	2003      	movs	r0, #3
 800264a:	e00e      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 800264c:	2000      	movs	r0, #0
 800264e:	e00c      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
 8002650:	2000      	movs	r0, #0
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
    return HAL_ERROR;
 8002654:	2001      	movs	r0, #1
 8002656:	4770      	bx	lr
        return HAL_ERROR;
 8002658:	2001      	movs	r0, #1
 800265a:	e006      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
            return HAL_ERROR;
 800265c:	2001      	movs	r0, #1
 800265e:	e004      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8002660:	2001      	movs	r0, #1
 8002662:	e002      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8002664:	2001      	movs	r0, #1
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 8002668:	2000      	movs	r0, #0
}
 800266a:	b002      	add	sp, #8
 800266c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800266e:	2001      	movs	r0, #1
 8002670:	e7fb      	b.n	800266a <HAL_RCC_OscConfig+0x5ca>
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000

08002678 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002678:	2800      	cmp	r0, #0
 800267a:	f000 8099 	beq.w	80027b0 <HAL_RCC_ClockConfig+0x138>
{
 800267e:	b570      	push	{r4, r5, r6, lr}
 8002680:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002682:	4b4d      	ldr	r3, [pc, #308]	; (80027b8 <HAL_RCC_ClockConfig+0x140>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	428b      	cmp	r3, r1
 800268c:	d20c      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4a4a      	ldr	r2, [pc, #296]	; (80027b8 <HAL_RCC_ClockConfig+0x140>)
 8002690:	6813      	ldr	r3, [r2, #0]
 8002692:	f023 0307 	bic.w	r3, r3, #7
 8002696:	430b      	orrs	r3, r1
 8002698:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	6813      	ldr	r3, [r2, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4299      	cmp	r1, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
 80026a6:	bd70      	pop	{r4, r5, r6, pc}
 80026a8:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	f013 0f01 	tst.w	r3, #1
 80026b0:	d039      	beq.n	8002726 <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026b2:	6863      	ldr	r3, [r4, #4]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d009      	beq.n	80026cc <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d026      	beq.n	800270a <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026bc:	bb63      	cbnz	r3, 8002718 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80026be:	4a3f      	ldr	r2, [pc, #252]	; (80027bc <HAL_RCC_ClockConfig+0x144>)
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	f012 0f02 	tst.w	r2, #2
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 80026c8:	2001      	movs	r0, #1
 80026ca:	bd70      	pop	{r4, r5, r6, pc}
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80026cc:	4a3b      	ldr	r2, [pc, #236]	; (80027bc <HAL_RCC_ClockConfig+0x144>)
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80026d4:	d06e      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4939      	ldr	r1, [pc, #228]	; (80027bc <HAL_RCC_ClockConfig+0x144>)
 80026d8:	688a      	ldr	r2, [r1, #8]
 80026da:	f022 0203 	bic.w	r2, r2, #3
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80026e2:	f7ff f957 	bl	8001994 <HAL_GetTick>
 80026e6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e8:	4b34      	ldr	r3, [pc, #208]	; (80027bc <HAL_RCC_ClockConfig+0x144>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	6862      	ldr	r2, [r4, #4]
 80026f2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80026f6:	d016      	beq.n	8002726 <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7ff f94c 	bl	8001994 <HAL_GetTick>
 80026fc:	1b80      	subs	r0, r0, r6
 80026fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002702:	4298      	cmp	r0, r3
 8002704:	d9f0      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8002706:	2003      	movs	r0, #3
 8002708:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800270a:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <HAL_RCC_ClockConfig+0x144>)
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002712:	d1e0      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
 8002716:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002718:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HAL_RCC_ClockConfig+0x144>)
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002720:	d1d9      	bne.n	80026d6 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002722:	2001      	movs	r0, #1
 8002724:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	f013 0f02 	tst.w	r3, #2
 800272c:	d006      	beq.n	800273c <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272e:	4a23      	ldr	r2, [pc, #140]	; (80027bc <HAL_RCC_ClockConfig+0x144>)
 8002730:	6893      	ldr	r3, [r2, #8]
 8002732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002736:	68a1      	ldr	r1, [r4, #8]
 8002738:	430b      	orrs	r3, r1
 800273a:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_RCC_ClockConfig+0x140>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	429d      	cmp	r5, r3
 8002746:	d20c      	bcs.n	8002762 <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002748:	4a1b      	ldr	r2, [pc, #108]	; (80027b8 <HAL_RCC_ClockConfig+0x140>)
 800274a:	6813      	ldr	r3, [r2, #0]
 800274c:	f023 0307 	bic.w	r3, r3, #7
 8002750:	432b      	orrs	r3, r5
 8002752:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	429d      	cmp	r5, r3
 800275c:	d001      	beq.n	8002762 <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 800275e:	2001      	movs	r0, #1
}
 8002760:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	f013 0f04 	tst.w	r3, #4
 8002768:	d006      	beq.n	8002778 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800276a:	4a14      	ldr	r2, [pc, #80]	; (80027bc <HAL_RCC_ClockConfig+0x144>)
 800276c:	6893      	ldr	r3, [r2, #8]
 800276e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002772:	68e1      	ldr	r1, [r4, #12]
 8002774:	430b      	orrs	r3, r1
 8002776:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002778:	6823      	ldr	r3, [r4, #0]
 800277a:	f013 0f08 	tst.w	r3, #8
 800277e:	d007      	beq.n	8002790 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002780:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_RCC_ClockConfig+0x144>)
 8002782:	6893      	ldr	r3, [r2, #8]
 8002784:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002788:	6921      	ldr	r1, [r4, #16]
 800278a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800278e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002790:	f7ff fc06 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCC_ClockConfig+0x144>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800279c:	4a08      	ldr	r2, [pc, #32]	; (80027c0 <HAL_RCC_ClockConfig+0x148>)
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	40d8      	lsrs	r0, r3
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_RCC_ClockConfig+0x14c>)
 80027a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7ff f8d6 	bl	8001958 <HAL_InitTick>
  return HAL_OK;
 80027ac:	2000      	movs	r0, #0
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80027b0:	2001      	movs	r0, #1
 80027b2:	4770      	bx	lr
        return HAL_ERROR;
 80027b4:	2001      	movs	r0, #1
 80027b6:	bd70      	pop	{r4, r5, r6, pc}
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	080052d8 	.word	0x080052d8
 80027c4:	20000044 	.word	0x20000044

080027c8 <HAL_RCC_GetHCLKFreq>:
}
 80027c8:	4b01      	ldr	r3, [pc, #4]	; (80027d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000044 	.word	0x20000044

080027d4 <HAL_RCC_GetPCLK1Freq>:
{
 80027d4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d6:	f7ff fff7 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80027e2:	4a03      	ldr	r2, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
}
 80027e6:	40d8      	lsrs	r0, r3
 80027e8:	bd08      	pop	{r3, pc}
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	080052e8 	.word	0x080052e8

080027f4 <HAL_RCC_GetPCLK2Freq>:
{
 80027f4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f6:	f7ff ffe7 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <HAL_RCC_GetPCLK2Freq+0x18>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002802:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002804:	5cd3      	ldrb	r3, [r2, r3]
}
 8002806:	40d8      	lsrs	r0, r3
 8002808:	bd08      	pop	{r3, pc}
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	080052e8 	.word	0x080052e8

08002814 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002816:	4b5d      	ldr	r3, [pc, #372]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f013 0f03 	tst.w	r3, #3
 800281e:	d019      	beq.n	8002854 <RCCEx_PLLSAI1_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002820:	4b5a      	ldr	r3, [pc, #360]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	6802      	ldr	r2, [r0, #0]
 800282a:	4293      	cmp	r3, r2
 800282c:	d004      	beq.n	8002838 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800282e:	2401      	movs	r4, #1
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002830:	2c00      	cmp	r4, #0
 8002832:	d048      	beq.n	80028c6 <RCCEx_PLLSAI1_Config+0xb2>
      }
    }
  }

  return status;
}
 8002834:	4620      	mov	r0, r4
 8002836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002838:	2a00      	cmp	r2, #0
 800283a:	d042      	beq.n	80028c2 <RCCEx_PLLSAI1_Config+0xae>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800283c:	4b53      	ldr	r3, [pc, #332]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002844:	3301      	adds	r3, #1
 8002846:	6842      	ldr	r2, [r0, #4]
       ||
 8002848:	4293      	cmp	r3, r2
 800284a:	d001      	beq.n	8002850 <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 800284c:	2401      	movs	r4, #1
 800284e:	e7ef      	b.n	8002830 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8002850:	2400      	movs	r4, #0
 8002852:	e7ed      	b.n	8002830 <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 8002854:	6803      	ldr	r3, [r0, #0]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d018      	beq.n	800288c <RCCEx_PLLSAI1_Config+0x78>
 800285a:	2b03      	cmp	r3, #3
 800285c:	d01d      	beq.n	800289a <RCCEx_PLLSAI1_Config+0x86>
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00d      	beq.n	800287e <RCCEx_PLLSAI1_Config+0x6a>
      status = HAL_ERROR;
 8002862:	2401      	movs	r4, #1
    if(status == HAL_OK)
 8002864:	2c00      	cmp	r4, #0
 8002866:	d1e3      	bne.n	8002830 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002868:	4e48      	ldr	r6, [pc, #288]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 800286a:	68f2      	ldr	r2, [r6, #12]
 800286c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002870:	6845      	ldr	r5, [r0, #4]
 8002872:	3d01      	subs	r5, #1
 8002874:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002878:	4313      	orrs	r3, r2
 800287a:	60f3      	str	r3, [r6, #12]
 800287c:	e7d8      	b.n	8002830 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800287e:	4a43      	ldr	r2, [pc, #268]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	f012 0f02 	tst.w	r2, #2
 8002886:	d014      	beq.n	80028b2 <RCCEx_PLLSAI1_Config+0x9e>
  HAL_StatusTypeDef status = HAL_OK;
 8002888:	2400      	movs	r4, #0
 800288a:	e7eb      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800288c:	4a3f      	ldr	r2, [pc, #252]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002894:	d00f      	beq.n	80028b6 <RCCEx_PLLSAI1_Config+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2400      	movs	r4, #0
 8002898:	e7e4      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800289a:	4a3c      	ldr	r2, [pc, #240]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80028a2:	d10a      	bne.n	80028ba <RCCEx_PLLSAI1_Config+0xa6>
 80028a4:	4a39      	ldr	r2, [pc, #228]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80028ac:	d007      	beq.n	80028be <RCCEx_PLLSAI1_Config+0xaa>
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2400      	movs	r4, #0
 80028b0:	e7d8      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80028b2:	2401      	movs	r4, #1
 80028b4:	e7d6      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80028b6:	2401      	movs	r4, #1
 80028b8:	e7d4      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2400      	movs	r4, #0
 80028bc:	e7d2      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80028be:	2401      	movs	r4, #1
 80028c0:	e7d0      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 80028c2:	2401      	movs	r4, #1
 80028c4:	e7b4      	b.n	8002830 <RCCEx_PLLSAI1_Config+0x1c>
 80028c6:	460f      	mov	r7, r1
 80028c8:	4605      	mov	r5, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 80028ca:	4a30      	ldr	r2, [pc, #192]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 80028cc:	6813      	ldr	r3, [r2, #0]
 80028ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028d2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80028d4:	f7ff f85e 	bl	8001994 <HAL_GetTick>
 80028d8:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80028da:	4b2c      	ldr	r3, [pc, #176]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80028e2:	d005      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0xdc>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028e4:	f7ff f856 	bl	8001994 <HAL_GetTick>
 80028e8:	1b80      	subs	r0, r0, r6
 80028ea:	2802      	cmp	r0, #2
 80028ec:	d9f5      	bls.n	80028da <RCCEx_PLLSAI1_Config+0xc6>
        status = HAL_TIMEOUT;
 80028ee:	2403      	movs	r4, #3
    if(status == HAL_OK)
 80028f0:	2c00      	cmp	r4, #0
 80028f2:	d19f      	bne.n	8002834 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80028f4:	bb47      	cbnz	r7, 8002948 <RCCEx_PLLSAI1_Config+0x134>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f6:	4925      	ldr	r1, [pc, #148]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 80028f8:	690b      	ldr	r3, [r1, #16]
 80028fa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002902:	68a8      	ldr	r0, [r5, #8]
 8002904:	68ea      	ldr	r2, [r5, #12]
 8002906:	06d2      	lsls	r2, r2, #27
 8002908:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800290c:	4313      	orrs	r3, r2
 800290e:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002910:	4a1e      	ldr	r2, [pc, #120]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 8002912:	6813      	ldr	r3, [r2, #0]
 8002914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002918:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800291a:	f7ff f83b 	bl	8001994 <HAL_GetTick>
 800291e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002928:	d105      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0x122>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800292a:	f7ff f833 	bl	8001994 <HAL_GetTick>
 800292e:	1b80      	subs	r0, r0, r6
 8002930:	2802      	cmp	r0, #2
 8002932:	d9f5      	bls.n	8002920 <RCCEx_PLLSAI1_Config+0x10c>
          status = HAL_TIMEOUT;
 8002934:	2403      	movs	r4, #3
      if(status == HAL_OK)
 8002936:	2c00      	cmp	r4, #0
 8002938:	f47f af7c 	bne.w	8002834 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800293c:	4a13      	ldr	r2, [pc, #76]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 800293e:	6913      	ldr	r3, [r2, #16]
 8002940:	69a9      	ldr	r1, [r5, #24]
 8002942:	430b      	orrs	r3, r1
 8002944:	6113      	str	r3, [r2, #16]
 8002946:	e775      	b.n	8002834 <RCCEx_PLLSAI1_Config+0x20>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002948:	2f01      	cmp	r7, #1
 800294a:	d00f      	beq.n	800296c <RCCEx_PLLSAI1_Config+0x158>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800294c:	480f      	ldr	r0, [pc, #60]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 800294e:	6902      	ldr	r2, [r0, #16]
 8002950:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002954:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002958:	68a9      	ldr	r1, [r5, #8]
 800295a:	696b      	ldr	r3, [r5, #20]
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	3b01      	subs	r3, #1
 8002960:	065b      	lsls	r3, r3, #25
 8002962:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002966:	4313      	orrs	r3, r2
 8002968:	6103      	str	r3, [r0, #16]
 800296a:	e7d1      	b.n	8002910 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800296c:	4807      	ldr	r0, [pc, #28]	; (800298c <RCCEx_PLLSAI1_Config+0x178>)
 800296e:	6902      	ldr	r2, [r0, #16]
 8002970:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002974:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002978:	68a9      	ldr	r1, [r5, #8]
 800297a:	692b      	ldr	r3, [r5, #16]
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	3b01      	subs	r3, #1
 8002980:	055b      	lsls	r3, r3, #21
 8002982:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002986:	4313      	orrs	r3, r2
 8002988:	6103      	str	r3, [r0, #16]
 800298a:	e7c1      	b.n	8002910 <RCCEx_PLLSAI1_Config+0xfc>
 800298c:	40021000 	.word	0x40021000

08002990 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002998:	6803      	ldr	r3, [r0, #0]
 800299a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800299e:	d024      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch(PeriphClkInit->Sai1ClockSelection)
 80029a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80029a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029a6:	d013      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80029a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80029ac:	d002      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80029ae:	b1b3      	cbz	r3, 80029de <HAL_RCCEx_PeriphCLKConfig+0x4e>
      ret = HAL_ERROR;
 80029b0:	2701      	movs	r7, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029b4:	2700      	movs	r7, #0
    if(ret == HAL_OK)
 80029b6:	2f00      	cmp	r7, #0
 80029b8:	d16f      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ba:	4abd      	ldr	r2, [pc, #756]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029c0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029c4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80029c6:	430b      	orrs	r3, r1
 80029c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029cc:	463e      	mov	r6, r7
 80029ce:	e00e      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80029d0:	4ab7      	ldr	r2, [pc, #732]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029d2:	68d3      	ldr	r3, [r2, #12]
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029da:	2700      	movs	r7, #0
      break;
 80029dc:	e7eb      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029de:	2100      	movs	r1, #0
 80029e0:	3004      	adds	r0, #4
 80029e2:	f7ff ff17 	bl	8002814 <RCCEx_PLLSAI1_Config>
 80029e6:	4607      	mov	r7, r0
      break;
 80029e8:	e7e5      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ea:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029ec:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029f4:	d06d      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f6:	4bae      	ldr	r3, [pc, #696]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80029fe:	d14e      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	4bab      	ldr	r3, [pc, #684]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a08:	659a      	str	r2, [r3, #88]	; 0x58
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a14:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a18:	4aa6      	ldr	r2, [pc, #664]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002a1a:	6813      	ldr	r3, [r2, #0]
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a20:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002a22:	f7fe ffb7 	bl	8001994 <HAL_GetTick>
 8002a26:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002a28:	4ba2      	ldr	r3, [pc, #648]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a30:	d105      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0xae>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a32:	f7fe ffaf 	bl	8001994 <HAL_GetTick>
 8002a36:	1b40      	subs	r0, r0, r5
 8002a38:	2802      	cmp	r0, #2
 8002a3a:	d9f5      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x98>
        ret = HAL_TIMEOUT;
 8002a3c:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 8002a3e:	2f00      	cmp	r7, #0
 8002a40:	d142      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a42:	4b9b      	ldr	r3, [pc, #620]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a48:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002a4c:	d015      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d012      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a54:	4a96      	ldr	r2, [pc, #600]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a5e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002a62:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002a66:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002a6e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002a72:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a7a:	f013 0f01 	tst.w	r3, #1
 8002a7e:	d111      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 8002a80:	2f00      	cmp	r7, #0
 8002a82:	f040 8113 	bne.w	8002cac <HAL_RCCEx_PeriphCLKConfig+0x31c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a86:	4a8a      	ldr	r2, [pc, #552]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a88:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a90:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002a92:	430b      	orrs	r3, r1
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a98:	e017      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x13a>
      status = ret;
 8002a9a:	463e      	mov	r6, r7
 8002a9c:	e7a7      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;
 8002a9e:	f04f 0800 	mov.w	r8, #0
 8002aa2:	e7b9      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x88>
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ff76 	bl	8001994 <HAL_GetTick>
 8002aa8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002aaa:	4b81      	ldr	r3, [pc, #516]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f013 0f02 	tst.w	r3, #2
 8002ab4:	d1e4      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe ff6d 	bl	8001994 <HAL_GetTick>
 8002aba:	1b40      	subs	r0, r0, r5
 8002abc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ac0:	4298      	cmp	r0, r3
 8002ac2:	d9f2      	bls.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 8002ac4:	2703      	movs	r7, #3
 8002ac6:	e7db      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      status = ret;
 8002ac8:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 8002aca:	f1b8 0f00 	cmp.w	r8, #0
 8002ace:	f040 80f3 	bne.w	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	f013 0f01 	tst.w	r3, #1
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ada:	4a75      	ldr	r2, [pc, #468]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002adc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ae0:	f023 0303 	bic.w	r3, r3, #3
 8002ae4:	6a21      	ldr	r1, [r4, #32]
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	f013 0f02 	tst.w	r3, #2
 8002af2:	d008      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002af4:	4a6e      	ldr	r2, [pc, #440]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002af6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002afa:	f023 030c 	bic.w	r3, r3, #12
 8002afe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b00:	430b      	orrs	r3, r1
 8002b02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	f013 0f04 	tst.w	r3, #4
 8002b0c:	d008      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b0e:	4a68      	ldr	r2, [pc, #416]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b14:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b18:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	f013 0f08 	tst.w	r3, #8
 8002b26:	d008      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b28:	4a61      	ldr	r2, [pc, #388]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002b32:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b34:	430b      	orrs	r3, r1
 8002b36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	f013 0f20 	tst.w	r3, #32
 8002b40:	d008      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b42:	4a5b      	ldr	r2, [pc, #364]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b44:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b5c:	4a54      	ldr	r2, [pc, #336]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b62:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002b66:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002b74:	d008      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b76:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b78:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002b82:	430b      	orrs	r3, r1
 8002b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b88:	6823      	ldr	r3, [r4, #0]
 8002b8a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b90:	4a47      	ldr	r2, [pc, #284]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002b92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ba8:	d008      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002baa:	4a41      	ldr	r2, [pc, #260]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bac:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002bb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bb4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bc4:	4a3a      	ldr	r2, [pc, #232]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002bca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bce:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002bdc:	d008      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bde:	4a34      	ldr	r2, [pc, #208]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002be0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002be4:	f023 0303 	bic.w	r3, r3, #3
 8002be8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002bea:	430b      	orrs	r3, r1
 8002bec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002bf6:	d00f      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bf8:	4a2d      	ldr	r2, [pc, #180]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002bfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002bfe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002c02:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002c04:	430b      	orrs	r3, r1
 8002c06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c10:	d058      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c16:	d05a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x33e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002c1e:	d00f      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c22:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002c26:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002c2a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c32:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c38:	d051      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x34e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c3e:	d053      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x358>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002c46:	d00f      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002c4e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002c52:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002c54:	430b      	orrs	r3, r1
 8002c56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c60:	d04a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c66:	d04c      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x372>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002c6e:	d00c      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c70:	4a0f      	ldr	r2, [pc, #60]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c72:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002c76:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002c7a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c88:	d043      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x382>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002c90:	d008      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c92:	4a07      	ldr	r2, [pc, #28]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002c94:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c9c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	b002      	add	sp, #8
 8002ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8002cac:	463e      	mov	r6, r7
 8002cae:	e70c      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002cba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc2:	e706      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc4:	68d3      	ldr	r3, [r2, #12]
 8002cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cca:	60d3      	str	r3, [r2, #12]
 8002ccc:	e7a4      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cce:	2101      	movs	r1, #1
 8002cd0:	1d20      	adds	r0, r4, #4
 8002cd2:	f7ff fd9f 	bl	8002814 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d09e      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x288>
          status = ret;
 8002cda:	4606      	mov	r6, r0
 8002cdc:	e79c      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cde:	68d3      	ldr	r3, [r2, #12]
 8002ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce4:	60d3      	str	r3, [r2, #12]
 8002ce6:	e7ab      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ce8:	2101      	movs	r1, #1
 8002cea:	1d20      	adds	r0, r4, #4
 8002cec:	f7ff fd92 	bl	8002814 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d0a5      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        status = ret;
 8002cf4:	4606      	mov	r6, r0
 8002cf6:	e7a3      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf8:	68d3      	ldr	r3, [r2, #12]
 8002cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfe:	60d3      	str	r3, [r2, #12]
 8002d00:	e7b2      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d02:	2101      	movs	r1, #1
 8002d04:	1d20      	adds	r0, r4, #4
 8002d06:	f7ff fd85 	bl	8002814 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	d0ac      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
        status = ret;
 8002d0e:	4606      	mov	r6, r0
 8002d10:	e7aa      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d12:	2102      	movs	r1, #2
 8002d14:	1d20      	adds	r0, r4, #4
 8002d16:	f7ff fd7d 	bl	8002814 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002d1a:	2800      	cmp	r0, #0
 8002d1c:	d0b5      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        status = ret;
 8002d1e:	4606      	mov	r6, r0
 8002d20:	e7b3      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc: RTC handle  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d28:	4770      	bx	lr

08002d2a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002d2a:	b538      	push	{r3, r4, r5, lr}
 8002d2c:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002d2e:	6802      	ldr	r2, [r0, #0]
 8002d30:	68d3      	ldr	r3, [r2, #12]
 8002d32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d36:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002d38:	f7fe fe2c 	bl	8001994 <HAL_GetTick>
 8002d3c:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f013 0f20 	tst.w	r3, #32
 8002d46:	d107      	bne.n	8002d58 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d48:	f7fe fe24 	bl	8001994 <HAL_GetTick>
 8002d4c:	1b40      	subs	r0, r0, r5
 8002d4e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d52:	d9f4      	bls.n	8002d3e <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002d54:	2003      	movs	r0, #3
    }
  }

  return HAL_OK;
}
 8002d56:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002d58:	2000      	movs	r0, #0
 8002d5a:	bd38      	pop	{r3, r4, r5, pc}

08002d5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002d5c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d5e:	6803      	ldr	r3, [r0, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002d66:	d001      	beq.n	8002d6c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002d68:	2000      	movs	r0, #0
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d72:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002d74:	f7fe fe0e 	bl	8001994 <HAL_GetTick>
 8002d78:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d82:	d107      	bne.n	8002d94 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d84:	f7fe fe06 	bl	8001994 <HAL_GetTick>
 8002d88:	1b40      	subs	r0, r0, r5
 8002d8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002d8e:	d9f4      	bls.n	8002d7a <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002d90:	2003      	movs	r0, #3
}
 8002d92:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002d94:	2000      	movs	r0, #0
 8002d96:	bd38      	pop	{r3, r4, r5, pc}

08002d98 <HAL_RTC_Init>:
{
 8002d98:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d064      	beq.n	8002e68 <HAL_RTC_Init+0xd0>
 8002d9e:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002da0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d045      	beq.n	8002e34 <HAL_RTC_Init+0x9c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	22ca      	movs	r2, #202	; 0xca
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	2253      	movs	r2, #83	; 0x53
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f7ff ffce 	bl	8002d5c <RTC_EnterInitMode>
 8002dc0:	4605      	mov	r5, r0
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d13b      	bne.n	8002e3e <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002dc6:	6822      	ldr	r2, [r4, #0]
 8002dc8:	6893      	ldr	r3, [r2, #8]
 8002dca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002dd4:	6821      	ldr	r1, [r4, #0]
 8002dd6:	688a      	ldr	r2, [r1, #8]
 8002dd8:	6863      	ldr	r3, [r4, #4]
 8002dda:	6920      	ldr	r0, [r4, #16]
 8002ddc:	4303      	orrs	r3, r0
 8002dde:	69a0      	ldr	r0, [r4, #24]
 8002de0:	4303      	orrs	r3, r0
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	68e2      	ldr	r2, [r4, #12]
 8002dea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002dec:	6822      	ldr	r2, [r4, #0]
 8002dee:	6913      	ldr	r3, [r2, #16]
 8002df0:	68a1      	ldr	r1, [r4, #8]
 8002df2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002df6:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002df8:	6822      	ldr	r2, [r4, #0]
 8002dfa:	68d3      	ldr	r3, [r2, #12]
 8002dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e00:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f013 0f20 	tst.w	r3, #32
 8002e0a:	d020      	beq.n	8002e4e <HAL_RTC_Init+0xb6>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002e10:	f023 0303 	bic.w	r3, r3, #3
 8002e14:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002e16:	6821      	ldr	r1, [r4, #0]
 8002e18:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002e1a:	69e2      	ldr	r2, [r4, #28]
 8002e1c:	6960      	ldr	r0, [r4, #20]
 8002e1e:	4302      	orrs	r2, r0
 8002e20:	4313      	orrs	r3, r2
 8002e22:	64cb      	str	r3, [r1, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	22ff      	movs	r2, #255	; 0xff
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8002e30:	4628      	mov	r0, r5
 8002e32:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002e34:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8002e38:	f7ff ff76 	bl	8002d28 <HAL_RTC_MspInit>
 8002e3c:	e7b4      	b.n	8002da8 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e44:	2304      	movs	r3, #4
 8002e46:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 8002e4a:	2501      	movs	r5, #1
 8002e4c:	e7f0      	b.n	8002e30 <HAL_RTC_Init+0x98>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e4e:	4620      	mov	r0, r4
 8002e50:	f7ff ff6b 	bl	8002d2a <HAL_RTC_WaitForSynchro>
 8002e54:	2800      	cmp	r0, #0
 8002e56:	d0d9      	beq.n	8002e0c <HAL_RTC_Init+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	22ff      	movs	r2, #255	; 0xff
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return HAL_ERROR;
 8002e64:	2501      	movs	r5, #1
 8002e66:	e7e3      	b.n	8002e30 <HAL_RTC_Init+0x98>
     return HAL_ERROR;
 8002e68:	2501      	movs	r5, #1
 8002e6a:	e7e1      	b.n	8002e30 <HAL_RTC_Init+0x98>

08002e6c <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002e6c:	2300      	movs	r3, #0

  while(Value >= 10)
 8002e6e:	e002      	b.n	8002e76 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002e70:	3301      	adds	r3, #1
    Value -= 10;
 8002e72:	380a      	subs	r0, #10
 8002e74:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8002e76:	2809      	cmp	r0, #9
 8002e78:	d8fa      	bhi.n	8002e70 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	b2db      	uxtb	r3, r3
}
 8002e7e:	4318      	orrs	r0, r3
 8002e80:	4770      	bx	lr

08002e82 <HAL_RTC_SetTime>:
{
 8002e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002e84:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d07f      	beq.n	8002f8c <HAL_RTC_SetTime+0x10a>
 8002e8c:	460e      	mov	r6, r1
 8002e8e:	4604      	mov	r4, r0
 8002e90:	2301      	movs	r3, #1
 8002e92:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e96:	2302      	movs	r3, #2
 8002e98:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 8002e9c:	2a00      	cmp	r2, #0
 8002e9e:	d148      	bne.n	8002f32 <HAL_RTC_SetTime+0xb0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ea0:	6803      	ldr	r3, [r0, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ea8:	d101      	bne.n	8002eae <HAL_RTC_SetTime+0x2c>
      sTime->TimeFormat = 0x00;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002eae:	7830      	ldrb	r0, [r6, #0]
 8002eb0:	f7ff ffdc 	bl	8002e6c <RTC_ByteToBcd2>
 8002eb4:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002eb6:	7870      	ldrb	r0, [r6, #1]
 8002eb8:	f7ff ffd8 	bl	8002e6c <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002ebc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002ec0:	78b0      	ldrb	r0, [r6, #2]
 8002ec2:	f7ff ffd3 	bl	8002e6c <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002ec6:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16));
 8002ec8:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002eca:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	22ca      	movs	r2, #202	; 0xca
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	2253      	movs	r2, #83	; 0x53
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002eda:	4620      	mov	r0, r4
 8002edc:	f7ff ff3e 	bl	8002d5c <RTC_EnterInitMode>
 8002ee0:	4607      	mov	r7, r0
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d137      	bne.n	8002f56 <HAL_RTC_SetTime+0xd4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002eec:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002ef0:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002ef2:	6822      	ldr	r2, [r4, #0]
 8002ef4:	6893      	ldr	r3, [r2, #8]
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002efc:	6821      	ldr	r1, [r4, #0]
 8002efe:	688b      	ldr	r3, [r1, #8]
 8002f00:	68f2      	ldr	r2, [r6, #12]
 8002f02:	6930      	ldr	r0, [r6, #16]
 8002f04:	4302      	orrs	r2, r0
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f0a:	6822      	ldr	r2, [r4, #0]
 8002f0c:	68d3      	ldr	r3, [r2, #12]
 8002f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f12:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f14:	6823      	ldr	r3, [r4, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f013 0f20 	tst.w	r3, #32
 8002f1c:	d026      	beq.n	8002f6c <HAL_RTC_SetTime+0xea>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	22ff      	movs	r2, #255	; 0xff
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f884 3020 	strb.w	r3, [r4, #32]
   return HAL_OK;
 8002f30:	e02d      	b.n	8002f8e <HAL_RTC_SetTime+0x10c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f32:	6803      	ldr	r3, [r0, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f3a:	d101      	bne.n	8002f40 <HAL_RTC_SetTime+0xbe>
      sTime->TimeFormat = 0x00;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002f40:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002f42:	7870      	ldrb	r0, [r6, #1]
 8002f44:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002f46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002f4a:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002f4c:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16));
 8002f4e:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002f50:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002f54:	e7bb      	b.n	8002ece <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	22ff      	movs	r2, #255	; 0xff
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002f62:	2300      	movs	r3, #0
 8002f64:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002f68:	2701      	movs	r7, #1
 8002f6a:	e010      	b.n	8002f8e <HAL_RTC_SetTime+0x10c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	f7ff fedc 	bl	8002d2a <HAL_RTC_WaitForSynchro>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	d0d3      	beq.n	8002f1e <HAL_RTC_SetTime+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002f82:	2300      	movs	r3, #0
 8002f84:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002f88:	2701      	movs	r7, #1
 8002f8a:	e000      	b.n	8002f8e <HAL_RTC_SetTime+0x10c>
  __HAL_LOCK(hrtc);
 8002f8c:	2702      	movs	r7, #2
}
 8002f8e:	4638      	mov	r0, r7
 8002f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f92 <HAL_RTC_SetDate>:
{
 8002f92:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002f94:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d06d      	beq.n	8003078 <HAL_RTC_SetDate+0xe6>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002fa8:	b93a      	cbnz	r2, 8002fba <HAL_RTC_SetDate+0x28>
 8002faa:	784b      	ldrb	r3, [r1, #1]
 8002fac:	f013 0f10 	tst.w	r3, #16
 8002fb0:	d003      	beq.n	8002fba <HAL_RTC_SetDate+0x28>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002fb2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002fb6:	330a      	adds	r3, #10
 8002fb8:	704b      	strb	r3, [r1, #1]
 8002fba:	460e      	mov	r6, r1
 8002fbc:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002fbe:	2a00      	cmp	r2, #0
 8002fc0:	d134      	bne.n	800302c <HAL_RTC_SetDate+0x9a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002fc2:	78c8      	ldrb	r0, [r1, #3]
 8002fc4:	f7ff ff52 	bl	8002e6c <RTC_ByteToBcd2>
 8002fc8:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002fca:	7870      	ldrb	r0, [r6, #1]
 8002fcc:	f7ff ff4e 	bl	8002e6c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002fd0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002fd4:	78b0      	ldrb	r0, [r6, #2]
 8002fd6:	f7ff ff49 	bl	8002e6c <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002fda:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13));
 8002fdc:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002fde:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	22ca      	movs	r2, #202	; 0xca
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	2253      	movs	r2, #83	; 0x53
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff feb4 	bl	8002d5c <RTC_EnterInitMode>
 8002ff4:	4606      	mov	r6, r0
 8002ff6:	bb20      	cbnz	r0, 8003042 <HAL_RTC_SetDate+0xb0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002ffe:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8003002:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003004:	6822      	ldr	r2, [r4, #0]
 8003006:	68d3      	ldr	r3, [r2, #12]
 8003008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800300c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f013 0f20 	tst.w	r3, #32
 8003016:	d01f      	beq.n	8003058 <HAL_RTC_SetDate+0xc6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800301e:	2301      	movs	r3, #1
 8003020:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8003024:	2300      	movs	r3, #0
 8003026:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 800302a:	e026      	b.n	800307a <HAL_RTC_SetDate+0xe8>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 800302c:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 800302e:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003030:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8003032:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003034:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8003038:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13));
 800303a:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800303c:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8003040:	e7cf      	b.n	8002fe2 <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	22ff      	movs	r2, #255	; 0xff
 8003046:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003048:	2304      	movs	r3, #4
 800304a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 800304e:	2300      	movs	r3, #0
 8003050:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8003054:	2601      	movs	r6, #1
 8003056:	e010      	b.n	800307a <HAL_RTC_SetDate+0xe8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003058:	4620      	mov	r0, r4
 800305a:	f7ff fe66 	bl	8002d2a <HAL_RTC_WaitForSynchro>
 800305e:	2800      	cmp	r0, #0
 8003060:	d0da      	beq.n	8003018 <HAL_RTC_SetDate+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	22ff      	movs	r2, #255	; 0xff
 8003066:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003068:	2304      	movs	r3, #4
 800306a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 800306e:	2300      	movs	r3, #0
 8003070:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8003074:	2601      	movs	r6, #1
 8003076:	e000      	b.n	800307a <HAL_RTC_SetDate+0xe8>
 __HAL_LOCK(hrtc);
 8003078:	2602      	movs	r6, #2
}
 800307a:	4630      	mov	r0, r6
 800307c:	bd70      	pop	{r4, r5, r6, pc}

0800307e <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800307e:	b570      	push	{r4, r5, r6, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	9301      	str	r3, [sp, #4]
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003088:	6800      	ldr	r0, [r0, #0]
 800308a:	f001 fec6 	bl	8004e1a <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800308e:	4605      	mov	r5, r0
 8003090:	b110      	cbz	r0, 8003098 <SD_PowerON+0x1a>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  return HAL_SD_ERROR_NONE;
}
 8003092:	4628      	mov	r0, r5
 8003094:	b002      	add	sp, #8
 8003096:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003098:	6820      	ldr	r0, [r4, #0]
 800309a:	f001 fed1 	bl	8004e40 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800309e:	4606      	mov	r6, r0
 80030a0:	b310      	cbz	r0, 80030e8 <SD_PowerON+0x6a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80030a2:	2300      	movs	r3, #0
 80030a4:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0, validvoltage = 0;
 80030a6:	462e      	mov	r6, r5
    while(validvoltage == 0U)
 80030a8:	b9de      	cbnz	r6, 80030e2 <SD_PowerON+0x64>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80030aa:	9b01      	ldr	r3, [sp, #4]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	9201      	str	r2, [sp, #4]
 80030b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d044      	beq.n	8003142 <SD_PowerON+0xc4>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80030b8:	2100      	movs	r1, #0
 80030ba:	6820      	ldr	r0, [r4, #0]
 80030bc:	f001 fed7 	bl	8004e6e <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d141      	bne.n	8003148 <SD_PowerON+0xca>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80030c4:	2100      	movs	r1, #0
 80030c6:	6820      	ldr	r0, [r4, #0]
 80030c8:	f001 fee9 	bl	8004e9e <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80030cc:	4606      	mov	r6, r0
 80030ce:	2800      	cmp	r0, #0
 80030d0:	d13d      	bne.n	800314e <SD_PowerON+0xd0>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80030d2:	2100      	movs	r1, #0
 80030d4:	6820      	ldr	r0, [r4, #0]
 80030d6:	f001 fd5e 	bl	8004b96 <SDMMC_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80030da:	0fc0      	lsrs	r0, r0, #31
 80030dc:	d0e4      	beq.n	80030a8 <SD_PowerON+0x2a>
 80030de:	4606      	mov	r6, r0
 80030e0:	e7e2      	b.n	80030a8 <SD_PowerON+0x2a>
    hsd->SdCard.CardType = CARD_SDSC;
 80030e2:	2300      	movs	r3, #0
 80030e4:	6463      	str	r3, [r4, #68]	; 0x44
 80030e6:	e7d4      	b.n	8003092 <SD_PowerON+0x14>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80030e8:	2301      	movs	r3, #1
 80030ea:	64a3      	str	r3, [r4, #72]	; 0x48
  uint32_t response = 0, validvoltage = 0;
 80030ec:	4605      	mov	r5, r0
    while(validvoltage == 0U)
 80030ee:	b9ed      	cbnz	r5, 800312c <SD_PowerON+0xae>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80030f0:	9b01      	ldr	r3, [sp, #4]
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	9201      	str	r2, [sp, #4]
 80030f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d02a      	beq.n	8003154 <SD_PowerON+0xd6>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80030fe:	2100      	movs	r1, #0
 8003100:	6820      	ldr	r0, [r4, #0]
 8003102:	f001 feb4 	bl	8004e6e <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003106:	4605      	mov	r5, r0
 8003108:	2800      	cmp	r0, #0
 800310a:	d1c2      	bne.n	8003092 <SD_PowerON+0x14>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800310c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003110:	6820      	ldr	r0, [r4, #0]
 8003112:	f001 fec4 	bl	8004e9e <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003116:	4605      	mov	r5, r0
 8003118:	2800      	cmp	r0, #0
 800311a:	d1ba      	bne.n	8003092 <SD_PowerON+0x14>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800311c:	2100      	movs	r1, #0
 800311e:	6820      	ldr	r0, [r4, #0]
 8003120:	f001 fd39 	bl	8004b96 <SDMMC_GetResponse>
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003124:	0fc3      	lsrs	r3, r0, #31
 8003126:	d0e2      	beq.n	80030ee <SD_PowerON+0x70>
 8003128:	461d      	mov	r5, r3
 800312a:	e7e0      	b.n	80030ee <SD_PowerON+0x70>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800312c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003130:	d103      	bne.n	800313a <SD_PowerON+0xbc>
      hsd->SdCard.CardType = CARD_SDSC;
 8003132:	2300      	movs	r3, #0
 8003134:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 8003136:	4635      	mov	r5, r6
 8003138:	e7ab      	b.n	8003092 <SD_PowerON+0x14>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800313a:	2301      	movs	r3, #1
 800313c:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_SD_ERROR_NONE;
 800313e:	4635      	mov	r5, r6
 8003140:	e7a7      	b.n	8003092 <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003142:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8003146:	e7a4      	b.n	8003092 <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003148:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800314c:	e7a1      	b.n	8003092 <SD_PowerON+0x14>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800314e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003152:	e79e      	b.n	8003092 <SD_PowerON+0x14>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003154:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8003158:	e79b      	b.n	8003092 <SD_PowerON+0x14>

0800315a <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800315a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	4604      	mov	r4, r0
 8003162:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7fe fc16 	bl	8001994 <HAL_GetTick>
 8003168:	4606      	mov	r6, r0
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 800316a:	2300      	movs	r3, #0
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8003170:	2108      	movs	r1, #8
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	f001 fe21 	bl	8004dba <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003178:	4605      	mov	r5, r0
 800317a:	b118      	cbz	r0, 8003184 <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
    
  }

  return HAL_SD_ERROR_NONE;
}
 800317c:	4628      	mov	r0, r5
 800317e:	b008      	add	sp, #32
 8003180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8003184:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003186:	0409      	lsls	r1, r1, #16
 8003188:	6820      	ldr	r0, [r4, #0]
 800318a:	f001 fe70 	bl	8004e6e <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 800318e:	4605      	mov	r5, r0
 8003190:	2800      	cmp	r0, #0
 8003192:	d1f3      	bne.n	800317c <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003194:	f04f 33ff 	mov.w	r3, #4294967295
 8003198:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 800319a:	2308      	movs	r3, #8
 800319c:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800319e:	2330      	movs	r3, #48	; 0x30
 80031a0:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80031a2:	2302      	movs	r3, #2
 80031a4:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80031aa:	2301      	movs	r3, #1
 80031ac:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80031ae:	a902      	add	r1, sp, #8
 80031b0:	6820      	ldr	r0, [r4, #0]
 80031b2:	f001 fded 	bl	8004d90 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	f001 fea2 	bl	8004f00 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80031bc:	4605      	mov	r5, r0
 80031be:	2800      	cmp	r0, #0
 80031c0:	d1dc      	bne.n	800317c <SD_FindSCR+0x22>
 80031c2:	4680      	mov	r8, r0
 80031c4:	e005      	b.n	80031d2 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80031c6:	f7fe fbe5 	bl	8001994 <HAL_GetTick>
 80031ca:	1b80      	subs	r0, r0, r6
 80031cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80031d0:	d043      	beq.n	800325a <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80031d2:	6820      	ldr	r0, [r4, #0]
 80031d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80031d6:	f240 432a 	movw	r3, #1066	; 0x42a
 80031da:	421a      	tst	r2, r3
 80031dc:	d10a      	bne.n	80031f4 <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80031de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031e0:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80031e4:	d0ef      	beq.n	80031c6 <SD_FindSCR+0x6c>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80031e6:	f001 fcb3 	bl	8004b50 <SDMMC_ReadFIFO>
 80031ea:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 80031ee:	f108 0801 	add.w	r8, r8, #1
 80031f2:	e7e8      	b.n	80031c6 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80031f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80031f6:	f013 0f08 	tst.w	r3, #8
 80031fa:	d002      	beq.n	8003202 <SD_FindSCR+0xa8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80031fc:	2508      	movs	r5, #8
 80031fe:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003200:	e7bc      	b.n	800317c <SD_FindSCR+0x22>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003202:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003204:	f013 0f02 	tst.w	r3, #2
 8003208:	d002      	beq.n	8003210 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800320a:	2502      	movs	r5, #2
 800320c:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800320e:	e7b5      	b.n	800317c <SD_FindSCR+0x22>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003210:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003212:	f013 0f20 	tst.w	r3, #32
 8003216:	d002      	beq.n	800321e <SD_FindSCR+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8003218:	2520      	movs	r5, #32
 800321a:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800321c:	e7ae      	b.n	800317c <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800321e:	f240 533a 	movw	r3, #1338	; 0x53a
 8003222:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003224:	9a01      	ldr	r2, [sp, #4]
 8003226:	0213      	lsls	r3, r2, #8
 8003228:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800322c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003230:	0a11      	lsrs	r1, r2, #8
 8003232:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003236:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003238:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800323c:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800323e:	9a00      	ldr	r2, [sp, #0]
 8003240:	0213      	lsls	r3, r2, #8
 8003242:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003246:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800324a:	0a11      	lsrs	r1, r2, #8
 800324c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003250:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003252:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003256:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 8003258:	e790      	b.n	800317c <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 800325a:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800325e:	e78d      	b.n	800317c <SD_FindSCR+0x22>

08003260 <SD_WideBus_Enable>:
{
 8003260:	b510      	push	{r4, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 8003266:	2100      	movs	r1, #0
 8003268:	9100      	str	r1, [sp, #0]
 800326a:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800326c:	6800      	ldr	r0, [r0, #0]
 800326e:	f001 fc92 	bl	8004b96 <SDMMC_GetResponse>
 8003272:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8003276:	d004      	beq.n	8003282 <SD_WideBus_Enable+0x22>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003278:	f44f 6300 	mov.w	r3, #2048	; 0x800
}   
 800327c:	4618      	mov	r0, r3
 800327e:	b002      	add	sp, #8
 8003280:	bd10      	pop	{r4, pc}
  errorstate = SD_FindSCR(hsd, scr);
 8003282:	4669      	mov	r1, sp
 8003284:	4620      	mov	r0, r4
 8003286:	f7ff ff68 	bl	800315a <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800328a:	4603      	mov	r3, r0
 800328c:	2800      	cmp	r0, #0
 800328e:	d1f5      	bne.n	800327c <SD_WideBus_Enable+0x1c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003290:	9b01      	ldr	r3, [sp, #4]
 8003292:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003296:	d102      	bne.n	800329e <SD_WideBus_Enable+0x3e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003298:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800329c:	e7ee      	b.n	800327c <SD_WideBus_Enable+0x1c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800329e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80032a0:	0409      	lsls	r1, r1, #16
 80032a2:	6820      	ldr	r0, [r4, #0]
 80032a4:	f001 fde3 	bl	8004e6e <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80032a8:	4603      	mov	r3, r0
 80032aa:	2800      	cmp	r0, #0
 80032ac:	d1e6      	bne.n	800327c <SD_WideBus_Enable+0x1c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80032ae:	2102      	movs	r1, #2
 80032b0:	6820      	ldr	r0, [r4, #0]
 80032b2:	f001 fe0d 	bl	8004ed0 <SDMMC_CmdBusWidth>
 80032b6:	4603      	mov	r3, r0
 80032b8:	e7e0      	b.n	800327c <SD_WideBus_Enable+0x1c>

080032ba <SD_WideBus_Disable>:
{
 80032ba:	b510      	push	{r4, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	4604      	mov	r4, r0
  uint32_t scr[2] = {0, 0};
 80032c0:	2100      	movs	r1, #0
 80032c2:	9100      	str	r1, [sp, #0]
 80032c4:	9101      	str	r1, [sp, #4]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80032c6:	6800      	ldr	r0, [r0, #0]
 80032c8:	f001 fc65 	bl	8004b96 <SDMMC_GetResponse>
 80032cc:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80032d0:	d004      	beq.n	80032dc <SD_WideBus_Disable+0x22>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80032d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	b002      	add	sp, #8
 80032da:	bd10      	pop	{r4, pc}
  errorstate = SD_FindSCR(hsd, scr);
 80032dc:	4669      	mov	r1, sp
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff ff3b 	bl	800315a <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 80032e4:	4603      	mov	r3, r0
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d1f5      	bne.n	80032d6 <SD_WideBus_Disable+0x1c>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80032ea:	9b01      	ldr	r3, [sp, #4]
 80032ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80032f0:	d102      	bne.n	80032f8 <SD_WideBus_Disable+0x3e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80032f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80032f6:	e7ee      	b.n	80032d6 <SD_WideBus_Disable+0x1c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80032f8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80032fa:	0409      	lsls	r1, r1, #16
 80032fc:	6820      	ldr	r0, [r4, #0]
 80032fe:	f001 fdb6 	bl	8004e6e <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003302:	4603      	mov	r3, r0
 8003304:	2800      	cmp	r0, #0
 8003306:	d1e6      	bne.n	80032d6 <SD_WideBus_Disable+0x1c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8003308:	2100      	movs	r1, #0
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	f001 fde0 	bl	8004ed0 <SDMMC_CmdBusWidth>
 8003310:	4603      	mov	r3, r0
 8003312:	e7e0      	b.n	80032d6 <SD_WideBus_Disable+0x1c>

08003314 <HAL_SD_MspInit>:
{
 8003314:	4770      	bx	lr
	...

08003318 <HAL_SD_GetCardCSD>:
{
 8003318:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800331a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800331c:	0f9b      	lsrs	r3, r3, #30
 800331e:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003320:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8003322:	f3c3 6383 	ubfx	r3, r3, #26, #4
 8003326:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003328:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003332:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8003336:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003338:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 800333c:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800333e:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8003342:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003344:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003346:	0d1b      	lsrs	r3, r3, #20
 8003348:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800334a:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003354:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003356:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800335a:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800335c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800335e:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8003362:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003364:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003366:	f3c3 3340 	ubfx	r3, r3, #13, #1
 800336a:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800336c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800336e:	f3c3 3300 	ubfx	r3, r3, #12, #1
 8003372:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003374:	2300      	movs	r3, #0
 8003376:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003378:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800337a:	2b00      	cmp	r3, #0
 800337c:	f040 8088 	bne.w	8003490 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003380:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003382:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003386:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800338a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800338c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8003390:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003392:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003394:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8003398:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800339a:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80033a4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80033a6:	f3c3 5342 	ubfx	r3, r3, #21, #3
 80033aa:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80033ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80033ae:	f3c3 4382 	ubfx	r3, r3, #18, #3
 80033b2:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80033b4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80033b6:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 80033ba:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80033bc:	690b      	ldr	r3, [r1, #16]
 80033be:	3301      	adds	r3, #1
 80033c0:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80033c2:	7e0a      	ldrb	r2, [r1, #24]
 80033c4:	f002 0207 	and.w	r2, r2, #7
 80033c8:	3202      	adds	r2, #2
 80033ca:	fa03 f202 	lsl.w	r2, r3, r2
 80033ce:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80033d0:	7a0b      	ldrb	r3, [r1, #8]
 80033d2:	f003 040f 	and.w	r4, r3, #15
 80033d6:	2301      	movs	r3, #1
 80033d8:	40a3      	lsls	r3, r4
 80033da:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 80033dc:	0a5b      	lsrs	r3, r3, #9
 80033de:	fb03 f302 	mul.w	r3, r3, r2
 80033e2:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80033e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e8:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80033ea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80033ec:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80033f0:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80033f2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80033f4:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 80033f8:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80033fa:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80033fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003400:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003402:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003404:	0fdb      	lsrs	r3, r3, #31
 8003406:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003408:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800340a:	f3c3 7341 	ubfx	r3, r3, #29, #2
 800340e:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003410:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003412:	f3c3 6382 	ubfx	r3, r3, #26, #3
 8003416:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003418:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800341a:	f3c3 5383 	ubfx	r3, r3, #22, #4
 800341e:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003420:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8003422:	f3c3 5340 	ubfx	r3, r3, #21, #1
 8003426:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003430:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 8003434:	f002 0201 	and.w	r2, r2, #1
 8003438:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800343c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800343e:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8003442:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003446:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003448:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800344c:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003450:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003452:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003456:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800345a:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800345c:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8003460:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003464:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003466:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800346a:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800346e:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8003470:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8003474:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003478:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800347a:	f3c2 0246 	ubfx	r2, r2, #1, #7
 800347e:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003482:	2201      	movs	r2, #1
 8003484:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8003488:	4618      	mov	r0, r3
}
 800348a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800348e:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003490:	2b01      	cmp	r3, #1
 8003492:	d00b      	beq.n	80034ac <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8003494:	6803      	ldr	r3, [r0, #0]
 8003496:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_SD_GetCardCSD+0x1b8>)
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800349a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a0:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80034a8:	4618      	mov	r0, r3
 80034aa:	e7ee      	b.n	800348a <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80034ac:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80034b4:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80034b8:	4313      	orrs	r3, r2
 80034ba:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80034bc:	690b      	ldr	r3, [r1, #16]
 80034be:	3301      	adds	r3, #1
 80034c0:	029b      	lsls	r3, r3, #10
 80034c2:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80034c4:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80034c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ca:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80034cc:	6603      	str	r3, [r0, #96]	; 0x60
 80034ce:	e78c      	b.n	80033ea <HAL_SD_GetCardCSD+0xd2>
 80034d0:	004005ff 	.word	0x004005ff

080034d4 <SD_InitCard>:
{
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	b090      	sub	sp, #64	; 0x40
 80034d8:	4604      	mov	r4, r0
  uint16_t sd_rca = 1;
 80034da:	2301      	movs	r3, #1
 80034dc:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U) 
 80034e0:	6800      	ldr	r0, [r0, #0]
 80034e2:	f001 fb3c 	bl	8004b5e <SDMMC_GetPowerState>
 80034e6:	b920      	cbnz	r0, 80034f2 <SD_InitCard+0x1e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034e8:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 80034ec:	4628      	mov	r0, r5
 80034ee:	b010      	add	sp, #64	; 0x40
 80034f0:	bd70      	pop	{r4, r5, r6, pc}
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80034f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d01a      	beq.n	800352e <SD_InitCard+0x5a>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80034f8:	6820      	ldr	r0, [r4, #0]
 80034fa:	f001 fd19 	bl	8004f30 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80034fe:	4605      	mov	r5, r0
 8003500:	2800      	cmp	r0, #0
 8003502:	d1f3      	bne.n	80034ec <SD_InitCard+0x18>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003504:	2100      	movs	r1, #0
 8003506:	6820      	ldr	r0, [r4, #0]
 8003508:	f001 fb45 	bl	8004b96 <SDMMC_GetResponse>
 800350c:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800350e:	2104      	movs	r1, #4
 8003510:	6820      	ldr	r0, [r4, #0]
 8003512:	f001 fb40 	bl	8004b96 <SDMMC_GetResponse>
 8003516:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003518:	2108      	movs	r1, #8
 800351a:	6820      	ldr	r0, [r4, #0]
 800351c:	f001 fb3b 	bl	8004b96 <SDMMC_GetResponse>
 8003520:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003522:	210c      	movs	r1, #12
 8003524:	6820      	ldr	r0, [r4, #0]
 8003526:	f001 fb36 	bl	8004b96 <SDMMC_GetResponse>
 800352a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800352e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003530:	2b03      	cmp	r3, #3
 8003532:	d007      	beq.n	8003544 <SD_InitCard+0x70>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003534:	f10d 0112 	add.w	r1, sp, #18
 8003538:	6820      	ldr	r0, [r4, #0]
 800353a:	f001 fd23 	bl	8004f84 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800353e:	4605      	mov	r5, r0
 8003540:	2800      	cmp	r0, #0
 8003542:	d1d3      	bne.n	80034ec <SD_InitCard+0x18>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003544:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003546:	2b03      	cmp	r3, #3
 8003548:	d01d      	beq.n	8003586 <SD_InitCard+0xb2>
    hsd->SdCard.RelCardAdd = sd_rca;
 800354a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800354e:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003550:	0409      	lsls	r1, r1, #16
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	f001 fd01 	bl	8004f5a <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003558:	4605      	mov	r5, r0
 800355a:	2800      	cmp	r0, #0
 800355c:	d1c6      	bne.n	80034ec <SD_InitCard+0x18>
      hsd->CSD[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800355e:	2100      	movs	r1, #0
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	f001 fb18 	bl	8004b96 <SDMMC_GetResponse>
 8003566:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003568:	2104      	movs	r1, #4
 800356a:	6820      	ldr	r0, [r4, #0]
 800356c:	f001 fb13 	bl	8004b96 <SDMMC_GetResponse>
 8003570:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003572:	2108      	movs	r1, #8
 8003574:	6820      	ldr	r0, [r4, #0]
 8003576:	f001 fb0e 	bl	8004b96 <SDMMC_GetResponse>
 800357a:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800357c:	210c      	movs	r1, #12
 800357e:	6820      	ldr	r0, [r4, #0]
 8003580:	f001 fb09 	bl	8004b96 <SDMMC_GetResponse>
 8003584:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8003586:	2104      	movs	r1, #4
 8003588:	6820      	ldr	r0, [r4, #0]
 800358a:	f001 fb04 	bl	8004b96 <SDMMC_GetResponse>
 800358e:	0d00      	lsrs	r0, r0, #20
 8003590:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003592:	a905      	add	r1, sp, #20
 8003594:	4620      	mov	r0, r4
 8003596:	f7ff febf 	bl	8003318 <HAL_SD_GetCardCSD>
 800359a:	b110      	cbz	r0, 80035a2 <SD_InitCard+0xce>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800359c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80035a0:	e7a4      	b.n	80034ec <SD_InitCard+0x18>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80035a2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80035a4:	0412      	lsls	r2, r2, #16
 80035a6:	2300      	movs	r3, #0
 80035a8:	6820      	ldr	r0, [r4, #0]
 80035aa:	f001 fc1e 	bl	8004dea <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035ae:	4605      	mov	r5, r0
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d19b      	bne.n	80034ec <SD_InitCard+0x18>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80035b4:	4623      	mov	r3, r4
 80035b6:	f853 6b10 	ldr.w	r6, [r3], #16
 80035ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80035c2:	3404      	adds	r4, #4
 80035c4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80035c8:	4630      	mov	r0, r6
 80035ca:	f001 faa5 	bl	8004b18 <SDMMC_Init>
  return HAL_SD_ERROR_NONE;
 80035ce:	e78d      	b.n	80034ec <SD_InitCard+0x18>

080035d0 <HAL_SD_InitCard>:
{
 80035d0:	b530      	push	{r4, r5, lr}
 80035d2:	b08b      	sub	sp, #44	; 0x2c
 80035d4:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80035d6:	2300      	movs	r3, #0
 80035d8:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80035da:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80035dc:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80035de:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80035e0:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80035e2:	2376      	movs	r3, #118	; 0x76
 80035e4:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDMMC_Init(hsd->Instance, Init);
 80035e6:	ab0a      	add	r3, sp, #40	; 0x28
 80035e8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80035ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80035f0:	ab04      	add	r3, sp, #16
 80035f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f4:	6820      	ldr	r0, [r4, #0]
 80035f6:	f001 fa8f 	bl	8004b18 <SDMMC_Init>
  if(status != HAL_OK)
 80035fa:	b118      	cbz	r0, 8003604 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 80035fc:	2501      	movs	r5, #1
}
 80035fe:	4628      	mov	r0, r5
 8003600:	b00b      	add	sp, #44	; 0x2c
 8003602:	bd30      	pop	{r4, r5, pc}
  __HAL_SD_DISABLE(hsd); 
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	6853      	ldr	r3, [r2, #4]
 8003608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800360c:	6053      	str	r3, [r2, #4]
  status = SDMMC_PowerState_ON(hsd->Instance);
 800360e:	6820      	ldr	r0, [r4, #0]
 8003610:	f001 faa1 	bl	8004b56 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8003614:	4605      	mov	r5, r0
 8003616:	b108      	cbz	r0, 800361c <HAL_SD_InitCard+0x4c>
    return HAL_ERROR;
 8003618:	2501      	movs	r5, #1
 800361a:	e7f0      	b.n	80035fe <HAL_SD_InitCard+0x2e>
  __HAL_SD_ENABLE(hsd);
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	6853      	ldr	r3, [r2, #4]
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6053      	str	r3, [r2, #4]
  HAL_Delay(2U);
 8003626:	2002      	movs	r0, #2
 8003628:	f7fe f9ba 	bl	80019a0 <HAL_Delay>
  errorstate = SD_PowerON(hsd);
 800362c:	4620      	mov	r0, r4
 800362e:	f7ff fd26 	bl	800307e <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003632:	4603      	mov	r3, r0
 8003634:	b130      	cbz	r0, 8003644 <HAL_SD_InitCard+0x74>
    hsd->State = HAL_SD_STATE_READY;
 8003636:	2501      	movs	r5, #1
 8003638:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800363c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800363e:	4313      	orrs	r3, r2
 8003640:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8003642:	e7dc      	b.n	80035fe <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8003644:	4620      	mov	r0, r4
 8003646:	f7ff ff45 	bl	80034d4 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 800364a:	4603      	mov	r3, r0
 800364c:	2800      	cmp	r0, #0
 800364e:	d0d6      	beq.n	80035fe <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 8003650:	2501      	movs	r5, #1
 8003652:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003656:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003658:	4313      	orrs	r3, r2
 800365a:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800365c:	e7cf      	b.n	80035fe <HAL_SD_InitCard+0x2e>

0800365e <HAL_SD_Init>:
  if(hsd == NULL)
 800365e:	b1c0      	cbz	r0, 8003692 <HAL_SD_Init+0x34>
{ 
 8003660:	b510      	push	{r4, lr}
 8003662:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8003664:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8003668:	b17b      	cbz	r3, 800368a <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 800366a:	2303      	movs	r3, #3
 800366c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003670:	4620      	mov	r0, r4
 8003672:	f7ff ffad 	bl	80035d0 <HAL_SD_InitCard>
 8003676:	4603      	mov	r3, r0
 8003678:	b970      	cbnz	r0, 8003698 <HAL_SD_Init+0x3a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800367a:	2200      	movs	r2, #0
 800367c:	63a2      	str	r2, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800367e:	6322      	str	r2, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003680:	2201      	movs	r2, #1
 8003682:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8003686:	4618      	mov	r0, r3
 8003688:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 800368a:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 800368c:	f7ff fe42 	bl	8003314 <HAL_SD_MspInit>
 8003690:	e7eb      	b.n	800366a <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
}
 8003694:	4618      	mov	r0, r3
 8003696:	4770      	bx	lr
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e7f4      	b.n	8003686 <HAL_SD_Init+0x28>

0800369c <HAL_SD_ConfigWideBusOperation>:
{
 800369c:	b530      	push	{r4, r5, lr}
 800369e:	b08b      	sub	sp, #44	; 0x2c
 80036a0:	4604      	mov	r4, r0
 80036a2:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80036a4:	2303      	movs	r3, #3
 80036a6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80036aa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d025      	beq.n	80036fc <HAL_SD_ConfigWideBusOperation+0x60>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80036b0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80036b4:	d011      	beq.n	80036da <HAL_SD_ConfigWideBusOperation+0x3e>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80036b6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80036ba:	d013      	beq.n	80036e4 <HAL_SD_ConfigWideBusOperation+0x48>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80036bc:	b1c1      	cbz	r1, 80036f0 <HAL_SD_ConfigWideBusOperation+0x54>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80036be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80036c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036c4:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80036c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036c8:	b1eb      	cbz	r3, 8003706 <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	4a1b      	ldr	r2, [pc, #108]	; (800373c <HAL_SD_ConfigWideBusOperation+0xa0>)
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036d0:	2001      	movs	r0, #1
 80036d2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80036d6:	b00b      	add	sp, #44	; 0x2c
 80036d8:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80036dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6383      	str	r3, [r0, #56]	; 0x38
 80036e2:	e7f0      	b.n	80036c6 <HAL_SD_ConfigWideBusOperation+0x2a>
      errorstate = SD_WideBus_Enable(hsd);
 80036e4:	f7ff fdbc 	bl	8003260 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 80036e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036ea:	4318      	orrs	r0, r3
 80036ec:	63a0      	str	r0, [r4, #56]	; 0x38
 80036ee:	e7ea      	b.n	80036c6 <HAL_SD_ConfigWideBusOperation+0x2a>
      errorstate = SD_WideBus_Disable(hsd);
 80036f0:	f7ff fde3 	bl	80032ba <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 80036f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036f6:	4318      	orrs	r0, r3
 80036f8:	63a0      	str	r0, [r4, #56]	; 0x38
 80036fa:	e7e4      	b.n	80036c6 <HAL_SD_ConfigWideBusOperation+0x2a>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	6383      	str	r3, [r0, #56]	; 0x38
 8003704:	e7df      	b.n	80036c6 <HAL_SD_ConfigWideBusOperation+0x2a>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003706:	6863      	ldr	r3, [r4, #4]
 8003708:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800370a:	68a3      	ldr	r3, [r4, #8]
 800370c:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800370e:	68e3      	ldr	r3, [r4, #12]
 8003710:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8003712:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003714:	6963      	ldr	r3, [r4, #20]
 8003716:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003718:	69a3      	ldr	r3, [r4, #24]
 800371a:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 800371c:	ab0a      	add	r3, sp, #40	; 0x28
 800371e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003722:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003726:	ab04      	add	r3, sp, #16
 8003728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372a:	6820      	ldr	r0, [r4, #0]
 800372c:	f001 f9f4 	bl	8004b18 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8003730:	2301      	movs	r3, #1
 8003732:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8003736:	2000      	movs	r0, #0
 8003738:	e7cd      	b.n	80036d6 <HAL_SD_ConfigWideBusOperation+0x3a>
 800373a:	bf00      	nop
 800373c:	004005ff 	.word	0x004005ff

08003740 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	4605      	mov	r5, r0
 8003744:	460f      	mov	r7, r1
 8003746:	4616      	mov	r6, r2
 8003748:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800374a:	e039      	b.n	80037c0 <SPI_WaitFlagStateUntilTimeout+0x80>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800374c:	b12c      	cbz	r4, 800375a <SPI_WaitFlagStateUntilTimeout+0x1a>
 800374e:	f7fe f921 	bl	8001994 <HAL_GetTick>
 8003752:	9b06      	ldr	r3, [sp, #24]
 8003754:	1ac0      	subs	r0, r0, r3
 8003756:	4284      	cmp	r4, r0
 8003758:	d832      	bhi.n	80037c0 <SPI_WaitFlagStateUntilTimeout+0x80>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800375a:	682a      	ldr	r2, [r5, #0]
 800375c:	6853      	ldr	r3, [r2, #4]
 800375e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003762:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003764:	686b      	ldr	r3, [r5, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376a:	d00b      	beq.n	8003784 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800376c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003772:	d014      	beq.n	800379e <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003774:	2301      	movs	r3, #1
 8003776:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800377a:	2300      	movs	r3, #0
 800377c:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003780:	2003      	movs	r0, #3
 8003782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003784:	68ab      	ldr	r3, [r5, #8]
 8003786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800378a:	d002      	beq.n	8003792 <SPI_WaitFlagStateUntilTimeout+0x52>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800378c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003790:	d1ec      	bne.n	800376c <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8003792:	682a      	ldr	r2, [r5, #0]
 8003794:	6813      	ldr	r3, [r2, #0]
 8003796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e7e6      	b.n	800376c <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 800379e:	682a      	ldr	r2, [r5, #0]
 80037a0:	6813      	ldr	r3, [r2, #0]
 80037a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	682a      	ldr	r2, [r5, #0]
 80037aa:	6813      	ldr	r3, [r2, #0]
 80037ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e7df      	b.n	8003774 <SPI_WaitFlagStateUntilTimeout+0x34>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037b4:	2301      	movs	r3, #1
 80037b6:	42b3      	cmp	r3, r6
 80037b8:	d009      	beq.n	80037ce <SPI_WaitFlagStateUntilTimeout+0x8e>
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	f1b4 3fff 	cmp.w	r4, #4294967295
 80037be:	d1c5      	bne.n	800374c <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037c0:	682b      	ldr	r3, [r5, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	ea37 0303 	bics.w	r3, r7, r3
 80037c8:	d0f4      	beq.n	80037b4 <SPI_WaitFlagStateUntilTimeout+0x74>
 80037ca:	2300      	movs	r3, #0
 80037cc:	e7f3      	b.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0x76>
      }
    }
  }

  return HAL_OK;
 80037ce:	2000      	movs	r0, #0
}
 80037d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037d2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d4:	b083      	sub	sp, #12
 80037d6:	4607      	mov	r7, r0
 80037d8:	460c      	mov	r4, r1
 80037da:	4615      	mov	r5, r2
 80037dc:	461e      	mov	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80037de:	e002      	b.n	80037e6 <SPI_WaitFifoStateUntilTimeout+0x14>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 80037e0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80037e4:	d110      	bne.n	8003808 <SPI_WaitFifoStateUntilTimeout+0x36>
  while ((hspi->Instance->SR & Fifo) != State)
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	6893      	ldr	r3, [r2, #8]
 80037ea:	4023      	ands	r3, r4
 80037ec:	42ab      	cmp	r3, r5
 80037ee:	d03f      	beq.n	8003870 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037f0:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 80037f4:	d1f4      	bne.n	80037e0 <SPI_WaitFifoStateUntilTimeout+0xe>
 80037f6:	2d00      	cmp	r5, #0
 80037f8:	d1f2      	bne.n	80037e0 <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80037fa:	7b13      	ldrb	r3, [r2, #12]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 8003802:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003806:	e7eb      	b.n	80037e0 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003808:	b12e      	cbz	r6, 8003816 <SPI_WaitFifoStateUntilTimeout+0x44>
 800380a:	f7fe f8c3 	bl	8001994 <HAL_GetTick>
 800380e:	9b08      	ldr	r3, [sp, #32]
 8003810:	1ac0      	subs	r0, r0, r3
 8003812:	4286      	cmp	r6, r0
 8003814:	d8e7      	bhi.n	80037e6 <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	6853      	ldr	r3, [r2, #4]
 800381a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800381e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003826:	d00b      	beq.n	8003840 <SPI_WaitFifoStateUntilTimeout+0x6e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382e:	d014      	beq.n	800385a <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003836:	2300      	movs	r3, #0
 8003838:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 800383c:	2003      	movs	r0, #3
 800383e:	e018      	b.n	8003872 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003846:	d002      	beq.n	800384e <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384c:	d1ec      	bne.n	8003828 <SPI_WaitFifoStateUntilTimeout+0x56>
          __HAL_SPI_DISABLE(hspi);
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	6813      	ldr	r3, [r2, #0]
 8003852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e7e6      	b.n	8003828 <SPI_WaitFifoStateUntilTimeout+0x56>
          SPI_RESET_CRC(hspi);
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	6813      	ldr	r3, [r2, #0]
 800385e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	6813      	ldr	r3, [r2, #0]
 8003868:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e7df      	b.n	8003830 <SPI_WaitFifoStateUntilTimeout+0x5e>
      }
    }
  }

  return HAL_OK;
 8003870:	2000      	movs	r0, #0
}
 8003872:	b003      	add	sp, #12
 8003874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003876 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003876:	b570      	push	{r4, r5, r6, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	4604      	mov	r4, r0
 800387c:	460d      	mov	r5, r1
 800387e:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003880:	9200      	str	r2, [sp, #0]
 8003882:	460b      	mov	r3, r1
 8003884:	2200      	movs	r2, #0
 8003886:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800388a:	f7ff ffa2 	bl	80037d2 <SPI_WaitFifoStateUntilTimeout>
 800388e:	b138      	cbz	r0, 80038a0 <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003890:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003892:	f043 0320 	orr.w	r3, r3, #32
 8003896:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800389a:	4618      	mov	r0, r3
 800389c:	b002      	add	sp, #8
 800389e:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038a0:	9600      	str	r6, [sp, #0]
 80038a2:	462b      	mov	r3, r5
 80038a4:	2200      	movs	r2, #0
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	4620      	mov	r0, r4
 80038aa:	f7ff ff49 	bl	8003740 <SPI_WaitFlagStateUntilTimeout>
 80038ae:	b128      	cbz	r0, 80038bc <SPI_EndRxTxTransaction+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80038b2:	f043 0320 	orr.w	r3, r3, #32
 80038b6:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e7ee      	b.n	800389a <SPI_EndRxTxTransaction+0x24>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038bc:	9600      	str	r6, [sp, #0]
 80038be:	462b      	mov	r3, r5
 80038c0:	2200      	movs	r2, #0
 80038c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038c6:	4620      	mov	r0, r4
 80038c8:	f7ff ff83 	bl	80037d2 <SPI_WaitFifoStateUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d0e3      	beq.n	800389a <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80038d4:	f043 0320 	orr.w	r3, r3, #32
 80038d8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e7dd      	b.n	800389a <SPI_EndRxTxTransaction+0x24>

080038de <SPI_EndRxTransaction>:
{
 80038de:	b570      	push	{r4, r5, r6, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	4604      	mov	r4, r0
 80038e4:	460d      	mov	r5, r1
 80038e6:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e8:	6843      	ldr	r3, [r0, #4]
 80038ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ee:	d010      	beq.n	8003912 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038f0:	9600      	str	r6, [sp, #0]
 80038f2:	462b      	mov	r3, r5
 80038f4:	2200      	movs	r2, #0
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	4620      	mov	r0, r4
 80038fa:	f7ff ff21 	bl	8003740 <SPI_WaitFlagStateUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	b1a0      	cbz	r0, 800392c <SPI_EndRxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003902:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003904:	f043 0320 	orr.w	r3, r3, #32
 8003908:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
}
 800390c:	4618      	mov	r0, r3
 800390e:	b002      	add	sp, #8
 8003910:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003912:	6883      	ldr	r3, [r0, #8]
 8003914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003918:	d002      	beq.n	8003920 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391e:	d1e7      	bne.n	80038f0 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8003920:	6822      	ldr	r2, [r4, #0]
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e7e1      	b.n	80038f0 <SPI_EndRxTransaction+0x12>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800392c:	6862      	ldr	r2, [r4, #4]
 800392e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003932:	d1eb      	bne.n	800390c <SPI_EndRxTransaction+0x2e>
 8003934:	68a2      	ldr	r2, [r4, #8]
 8003936:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800393a:	d002      	beq.n	8003942 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800393c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003940:	d1e4      	bne.n	800390c <SPI_EndRxTransaction+0x2e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003942:	9600      	str	r6, [sp, #0]
 8003944:	462b      	mov	r3, r5
 8003946:	2200      	movs	r2, #0
 8003948:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff ff40 	bl	80037d2 <SPI_WaitFifoStateUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2800      	cmp	r0, #0
 8003956:	d0d9      	beq.n	800390c <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003958:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800395a:	f043 0320 	orr.w	r3, r3, #32
 800395e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e7d3      	b.n	800390c <SPI_EndRxTransaction+0x2e>

08003964 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003964:	2800      	cmp	r0, #0
 8003966:	d053      	beq.n	8003a10 <HAL_SPI_Init+0xac>
{
 8003968:	b510      	push	{r4, lr}
 800396a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800396c:	2300      	movs	r3, #0
 800396e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003970:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003974:	2b00      	cmp	r3, #0
 8003976:	d040      	beq.n	80039fa <HAL_SPI_Init+0x96>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003978:	2302      	movs	r3, #2
 800397a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800397e:	6822      	ldr	r2, [r4, #0]
 8003980:	6813      	ldr	r3, [r2, #0]
 8003982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003986:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003988:	68e3      	ldr	r3, [r4, #12]
 800398a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800398e:	d939      	bls.n	8003a04 <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003990:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003992:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003996:	d004      	beq.n	80039a2 <HAL_SPI_Init+0x3e>
 8003998:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800399c:	d001      	beq.n	80039a2 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800399e:	2200      	movs	r2, #0
 80039a0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80039a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80039a4:	b922      	cbnz	r2, 80039b0 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039aa:	d92e      	bls.n	8003a0a <HAL_SPI_Init+0xa6>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80039ac:	2302      	movs	r3, #2
 80039ae:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80039b0:	6822      	ldr	r2, [r4, #0]
 80039b2:	6863      	ldr	r3, [r4, #4]
 80039b4:	68a0      	ldr	r0, [r4, #8]
 80039b6:	4303      	orrs	r3, r0
 80039b8:	6920      	ldr	r0, [r4, #16]
 80039ba:	4303      	orrs	r3, r0
 80039bc:	6960      	ldr	r0, [r4, #20]
 80039be:	4303      	orrs	r3, r0
 80039c0:	69a0      	ldr	r0, [r4, #24]
 80039c2:	f400 7000 	and.w	r0, r0, #512	; 0x200
 80039c6:	4303      	orrs	r3, r0
 80039c8:	69e0      	ldr	r0, [r4, #28]
 80039ca:	4303      	orrs	r3, r0
 80039cc:	6a20      	ldr	r0, [r4, #32]
 80039ce:	4303      	orrs	r3, r0
 80039d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80039d2:	4303      	orrs	r3, r0
 80039d4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80039d6:	6822      	ldr	r2, [r4, #0]
 80039d8:	8b63      	ldrh	r3, [r4, #26]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80039e0:	4303      	orrs	r3, r0
 80039e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80039e4:	4303      	orrs	r3, r0
 80039e6:	68e0      	ldr	r0, [r4, #12]
 80039e8:	4303      	orrs	r3, r0
 80039ea:	430b      	orrs	r3, r1
 80039ec:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ee:	2000      	movs	r0, #0
 80039f0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 80039f8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80039fa:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80039fe:	f7fd fcf5 	bl	80013ec <HAL_SPI_MspInit>
 8003a02:	e7b9      	b.n	8003978 <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a08:	e7c3      	b.n	8003992 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	6323      	str	r3, [r4, #48]	; 0x30
 8003a0e:	e7cf      	b.n	80039b0 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8003a10:	2001      	movs	r0, #1
 8003a12:	4770      	bx	lr

08003a14 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8003a14:	b190      	cbz	r0, 8003a3c <HAL_SPI_DeInit+0x28>
{
 8003a16:	b510      	push	{r4, lr}
 8003a18:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003a20:	6802      	ldr	r2, [r0, #0]
 8003a22:	6813      	ldr	r3, [r2, #0]
 8003a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a28:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003a2a:	f7fd fd07 	bl	800143c <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2e:	2000      	movs	r0, #0
 8003a30:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8003a32:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a36:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  return HAL_OK;
 8003a3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a3c:	2001      	movs	r0, #1
 8003a3e:	4770      	bx	lr

08003a40 <HAL_SPI_TransmitReceive_IT>:
{
 8003a40:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 8003a42:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8003a46:	2c01      	cmp	r4, #1
 8003a48:	d06c      	beq.n	8003b24 <HAL_SPI_TransmitReceive_IT+0xe4>
 8003a4a:	2401      	movs	r4, #1
 8003a4c:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp  = hspi->State;
 8003a50:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8003a54:	b2e4      	uxtb	r4, r4
  tmp1 = hspi->Init.Mode;
 8003a56:	6845      	ldr	r5, [r0, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8003a58:	2c01      	cmp	r4, #1
 8003a5a:	d010      	beq.n	8003a7e <HAL_SPI_TransmitReceive_IT+0x3e>
 8003a5c:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8003a60:	d006      	beq.n	8003a70 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 8003a64:	2200      	movs	r2, #0
 8003a66:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	bc30      	pop	{r4, r5}
 8003a6e:	4770      	bx	lr
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8003a70:	6885      	ldr	r5, [r0, #8]
 8003a72:	2d00      	cmp	r5, #0
 8003a74:	d14c      	bne.n	8003b10 <HAL_SPI_TransmitReceive_IT+0xd0>
 8003a76:	2c04      	cmp	r4, #4
 8003a78:	d001      	beq.n	8003a7e <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e7f2      	b.n	8003a64 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a7e:	2900      	cmp	r1, #0
 8003a80:	d048      	beq.n	8003b14 <HAL_SPI_TransmitReceive_IT+0xd4>
 8003a82:	2a00      	cmp	r2, #0
 8003a84:	d048      	beq.n	8003b18 <HAL_SPI_TransmitReceive_IT+0xd8>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d048      	beq.n	8003b1c <HAL_SPI_TransmitReceive_IT+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a8a:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8003a8e:	b2e4      	uxtb	r4, r4
 8003a90:	2c04      	cmp	r4, #4
 8003a92:	d002      	beq.n	8003a9a <HAL_SPI_TransmitReceive_IT+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a94:	2405      	movs	r4, #5
 8003a96:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a9a:	2400      	movs	r4, #0
 8003a9c:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a9e:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003aa0:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003aa2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aa4:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003aa6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003aaa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aae:	68c3      	ldr	r3, [r0, #12]
 8003ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ab4:	d921      	bls.n	8003afa <HAL_SPI_TransmitReceive_IT+0xba>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <HAL_SPI_TransmitReceive_IT+0xe8>)
 8003ab8:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003aba:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <HAL_SPI_TransmitReceive_IT+0xec>)
 8003abc:	6503      	str	r3, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 8003abe:	68c3      	ldr	r3, [r0, #12]
 8003ac0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ac4:	d804      	bhi.n	8003ad0 <HAL_SPI_TransmitReceive_IT+0x90>
 8003ac6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d919      	bls.n	8003b04 <HAL_SPI_TransmitReceive_IT+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ad0:	6802      	ldr	r2, [r0, #0]
 8003ad2:	6853      	ldr	r3, [r2, #4]
 8003ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ad8:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ada:	6802      	ldr	r2, [r0, #0]
 8003adc:	6853      	ldr	r3, [r2, #4]
 8003ade:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003ae2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ae4:	6803      	ldr	r3, [r0, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003aec:	d118      	bne.n	8003b20 <HAL_SPI_TransmitReceive_IT+0xe0>
    __HAL_SPI_ENABLE(hspi);
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e7b4      	b.n	8003a64 <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003afa:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <HAL_SPI_TransmitReceive_IT+0xf0>)
 8003afc:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_SPI_TransmitReceive_IT+0xf4>)
 8003b00:	6503      	str	r3, [r0, #80]	; 0x50
 8003b02:	e7dc      	b.n	8003abe <HAL_SPI_TransmitReceive_IT+0x7e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b04:	6802      	ldr	r2, [r0, #0]
 8003b06:	6853      	ldr	r3, [r2, #4]
 8003b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b0c:	6053      	str	r3, [r2, #4]
 8003b0e:	e7e4      	b.n	8003ada <HAL_SPI_TransmitReceive_IT+0x9a>
    errorcode = HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
 8003b12:	e7a7      	b.n	8003a64 <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e7a5      	b.n	8003a64 <HAL_SPI_TransmitReceive_IT+0x24>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e7a3      	b.n	8003a64 <HAL_SPI_TransmitReceive_IT+0x24>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e7a1      	b.n	8003a64 <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e79f      	b.n	8003a64 <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 8003b24:	2302      	movs	r3, #2
 8003b26:	e7a0      	b.n	8003a6a <HAL_SPI_TransmitReceive_IT+0x2a>
 8003b28:	08003e1f 	.word	0x08003e1f
 8003b2c:	08003de5 	.word	0x08003de5
 8003b30:	08003d6b 	.word	0x08003d6b
 8003b34:	08003d11 	.word	0x08003d11

08003b38 <HAL_SPI_Receive_IT>:
{
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003b3c:	6880      	ldr	r0, [r0, #8]
 8003b3e:	b918      	cbnz	r0, 8003b48 <HAL_SPI_Receive_IT+0x10>
 8003b40:	6863      	ldr	r3, [r4, #4]
 8003b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b46:	d010      	beq.n	8003b6a <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 8003b48:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8003b4c:	2801      	cmp	r0, #1
 8003b4e:	d05a      	beq.n	8003c06 <HAL_SPI_Receive_IT+0xce>
 8003b50:	2301      	movs	r3, #1
 8003b52:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8003b56:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003b5a:	b2c0      	uxtb	r0, r0
 8003b5c:	4298      	cmp	r0, r3
 8003b5e:	d00d      	beq.n	8003b7c <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 8003b60:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8003b62:	2300      	movs	r3, #0
 8003b64:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8003b68:	bd10      	pop	{r4, pc}
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b6e:	2204      	movs	r2, #4
 8003b70:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003b74:	460a      	mov	r2, r1
 8003b76:	f7ff ff63 	bl	8003a40 <HAL_SPI_TransmitReceive_IT>
 8003b7a:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 8003b7c:	2900      	cmp	r1, #0
 8003b7e:	d03c      	beq.n	8003bfa <HAL_SPI_Receive_IT+0xc2>
 8003b80:	2a00      	cmp	r2, #0
 8003b82:	d03c      	beq.n	8003bfe <HAL_SPI_Receive_IT+0xc6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b84:	2304      	movs	r3, #4
 8003b86:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b8e:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b90:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003b94:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b98:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003b9a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003b9c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b9e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ba0:	68e3      	ldr	r3, [r4, #12]
 8003ba2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ba6:	d91a      	bls.n	8003bde <HAL_SPI_Receive_IT+0xa6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	6853      	ldr	r3, [r2, #4]
 8003bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bb0:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003bb2:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <HAL_SPI_Receive_IT+0xd4>)
 8003bb4:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb6:	68a3      	ldr	r3, [r4, #8]
 8003bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bbc:	d017      	beq.n	8003bee <HAL_SPI_Receive_IT+0xb6>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	6853      	ldr	r3, [r2, #4]
 8003bc2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bc6:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003bd0:	d117      	bne.n	8003c02 <HAL_SPI_Receive_IT+0xca>
    __HAL_SPI_ENABLE(hspi);
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bd8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bda:	2000      	movs	r0, #0
 8003bdc:	e7c1      	b.n	8003b62 <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	6853      	ldr	r3, [r2, #4]
 8003be2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003be6:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <HAL_SPI_Receive_IT+0xd8>)
 8003bea:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003bec:	e7e3      	b.n	8003bb6 <HAL_SPI_Receive_IT+0x7e>
    SPI_1LINE_RX(hspi);
 8003bee:	6822      	ldr	r2, [r4, #0]
 8003bf0:	6813      	ldr	r3, [r2, #0]
 8003bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e7e1      	b.n	8003bbe <HAL_SPI_Receive_IT+0x86>
    errorcode = HAL_ERROR;
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	e7b1      	b.n	8003b62 <HAL_SPI_Receive_IT+0x2a>
 8003bfe:	2001      	movs	r0, #1
 8003c00:	e7af      	b.n	8003b62 <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c02:	2000      	movs	r0, #0
 8003c04:	e7ad      	b.n	8003b62 <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 8003c06:	2002      	movs	r0, #2
}
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08003c85 	.word	0x08003c85
 8003c10:	08003c59 	.word	0x08003c59

08003c14 <HAL_SPI_RxCpltCallback>:
{
 8003c14:	4770      	bx	lr

08003c16 <HAL_SPI_TxRxCpltCallback>:
{
 8003c16:	4770      	bx	lr

08003c18 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	4604      	mov	r4, r0
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003c1c:	6802      	ldr	r2, [r0, #0]
 8003c1e:	6853      	ldr	r3, [r2, #4]
 8003c20:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003c24:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003c26:	f7fd feb5 	bl	8001994 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	2164      	movs	r1, #100	; 0x64
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff fe55 	bl	80038de <SPI_EndRxTransaction>
 8003c34:	b118      	cbz	r0, 8003c3e <SPI_CloseRx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c36:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c38:	f043 0320 	orr.w	r3, r3, #32
 8003c3c:	6623      	str	r3, [r4, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003c44:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c46:	b11b      	cbz	r3, 8003c50 <SPI_CloseRx_ISR+0x38>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003c48:	4620      	mov	r0, r4
 8003c4a:	f7fd fbcb 	bl	80013e4 <HAL_SPI_ErrorCallback>
 8003c4e:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7ff ffdf 	bl	8003c14 <HAL_SPI_RxCpltCallback>
 8003c56:	bd10      	pop	{r4, pc}

08003c58 <SPI_RxISR_8BIT>:
{
 8003c58:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003c5a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	6402      	str	r2, [r0, #64]	; 0x40
 8003c60:	6802      	ldr	r2, [r0, #0]
 8003c62:	7b12      	ldrb	r2, [r2, #12]
 8003c64:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 8003c66:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8003c74:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	b103      	cbz	r3, 8003c7e <SPI_RxISR_8BIT+0x26>
 8003c7c:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8003c7e:	f7ff ffcb 	bl	8003c18 <SPI_CloseRx_ISR>
}
 8003c82:	e7fb      	b.n	8003c7c <SPI_RxISR_8BIT+0x24>

08003c84 <SPI_RxISR_16BIT>:
{
 8003c84:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003c88:	6802      	ldr	r2, [r0, #0]
 8003c8a:	68d2      	ldr	r2, [r2, #12]
 8003c8c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003c90:	3302      	adds	r3, #2
 8003c92:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003c94:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8003ca2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	b103      	cbz	r3, 8003cac <SPI_RxISR_16BIT+0x28>
 8003caa:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8003cac:	f7ff ffb4 	bl	8003c18 <SPI_CloseRx_ISR>
}
 8003cb0:	e7fb      	b.n	8003caa <SPI_RxISR_16BIT+0x26>

08003cb2 <SPI_CloseRxTx_ISR>:
{
 8003cb2:	b510      	push	{r4, lr}
 8003cb4:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8003cb6:	f7fd fe6d 	bl	8001994 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003cba:	6822      	ldr	r2, [r4, #0]
 8003cbc:	6853      	ldr	r3, [r2, #4]
 8003cbe:	f023 0320 	bic.w	r3, r3, #32
 8003cc2:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	2164      	movs	r1, #100	; 0x64
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7ff fdd4 	bl	8003876 <SPI_EndRxTxTransaction>
 8003cce:	b118      	cbz	r0, 8003cd8 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003cd2:	f043 0320 	orr.w	r3, r3, #32
 8003cd6:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003cd8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003cda:	b993      	cbnz	r3, 8003d02 <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003cdc:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d006      	beq.n	8003cf4 <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7ff ff92 	bl	8003c16 <HAL_SPI_TxRxCpltCallback>
 8003cf2:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f7ff ff8a 	bl	8003c14 <HAL_SPI_RxCpltCallback>
 8003d00:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 8003d02:	2301      	movs	r3, #1
 8003d04:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f7fd fb6b 	bl	80013e4 <HAL_SPI_ErrorCallback>
 8003d0e:	bd10      	pop	{r4, pc}

08003d10 <SPI_2linesTxISR_8BIT>:
{
 8003d10:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 8003d12:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d918      	bls.n	8003d4c <SPI_2linesTxISR_8BIT+0x3c>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d1a:	6803      	ldr	r3, [r0, #0]
 8003d1c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003d1e:	8812      	ldrh	r2, [r2, #0]
 8003d20:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d24:	3302      	adds	r3, #2
 8003d26:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003d28:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b02      	subs	r3, #2
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003d32:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	b943      	cbnz	r3, 8003d4a <SPI_2linesTxISR_8BIT+0x3a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003d38:	6802      	ldr	r2, [r0, #0]
 8003d3a:	6853      	ldr	r3, [r2, #4]
 8003d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d40:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003d42:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b163      	cbz	r3, 8003d64 <SPI_2linesTxISR_8BIT+0x54>
 8003d4a:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8003d4c:	6802      	ldr	r2, [r0, #0]
 8003d4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d50:	1c59      	adds	r1, r3, #1
 8003d52:	6381      	str	r1, [r0, #56]	; 0x38
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	7313      	strb	r3, [r2, #12]
    hspi->TxXferCount--;
 8003d58:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8003d62:	e7e6      	b.n	8003d32 <SPI_2linesTxISR_8BIT+0x22>
      SPI_CloseRxTx_ISR(hspi);
 8003d64:	f7ff ffa5 	bl	8003cb2 <SPI_CloseRxTx_ISR>
}
 8003d68:	e7ef      	b.n	8003d4a <SPI_2linesTxISR_8BIT+0x3a>

08003d6a <SPI_2linesRxISR_8BIT>:
{
 8003d6a:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 8003d6c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d925      	bls.n	8003dc2 <SPI_2linesRxISR_8BIT+0x58>
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003d78:	6802      	ldr	r2, [r0, #0]
 8003d7a:	68d2      	ldr	r2, [r2, #12]
 8003d7c:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003d80:	3302      	adds	r3, #2
 8003d82:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003d84:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b02      	subs	r3, #2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003d92:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d00c      	beq.n	8003db6 <SPI_2linesRxISR_8BIT+0x4c>
  if (hspi->RxXferCount == 0U)
 8003d9c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	b93b      	cbnz	r3, 8003db4 <SPI_2linesRxISR_8BIT+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003da4:	6802      	ldr	r2, [r0, #0]
 8003da6:	6853      	ldr	r3, [r2, #4]
 8003da8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003dac:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8003dae:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	b1a3      	cbz	r3, 8003dde <SPI_2linesRxISR_8BIT+0x74>
 8003db4:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003db6:	6802      	ldr	r2, [r0, #0]
 8003db8:	6853      	ldr	r3, [r2, #4]
 8003dba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dbe:	6053      	str	r3, [r2, #4]
 8003dc0:	e7ec      	b.n	8003d9c <SPI_2linesRxISR_8BIT+0x32>
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 8003dc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	6402      	str	r2, [r0, #64]	; 0x40
 8003dc8:	6802      	ldr	r2, [r0, #0]
 8003dca:	7b12      	ldrb	r2, [r2, #12]
 8003dcc:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8003dce:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8003ddc:	e7de      	b.n	8003d9c <SPI_2linesRxISR_8BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 8003dde:	f7ff ff68 	bl	8003cb2 <SPI_CloseRxTx_ISR>
}
 8003de2:	e7e7      	b.n	8003db4 <SPI_2linesRxISR_8BIT+0x4a>

08003de4 <SPI_2linesTxISR_16BIT>:
{
 8003de4:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003de6:	6803      	ldr	r3, [r0, #0]
 8003de8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003dea:	8812      	ldrh	r2, [r2, #0]
 8003dec:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003df0:	3302      	adds	r3, #2
 8003df2:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8003df4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003dfe:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	b943      	cbnz	r3, 8003e16 <SPI_2linesTxISR_16BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003e04:	6802      	ldr	r2, [r0, #0]
 8003e06:	6853      	ldr	r3, [r2, #4]
 8003e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e0c:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003e0e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	b103      	cbz	r3, 8003e18 <SPI_2linesTxISR_16BIT+0x34>
 8003e16:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8003e18:	f7ff ff4b 	bl	8003cb2 <SPI_CloseRxTx_ISR>
}
 8003e1c:	e7fb      	b.n	8003e16 <SPI_2linesTxISR_16BIT+0x32>

08003e1e <SPI_2linesRxISR_16BIT>:
{
 8003e1e:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e20:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e22:	6802      	ldr	r2, [r0, #0]
 8003e24:	68d2      	ldr	r2, [r2, #12]
 8003e26:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e28:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003e2e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8003e3c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	b93b      	cbnz	r3, 8003e54 <SPI_2linesRxISR_16BIT+0x36>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003e44:	6802      	ldr	r2, [r0, #0]
 8003e46:	6853      	ldr	r3, [r2, #4]
 8003e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4c:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8003e4e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	b103      	cbz	r3, 8003e56 <SPI_2linesRxISR_16BIT+0x38>
 8003e54:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8003e56:	f7ff ff2c 	bl	8003cb2 <SPI_CloseRxTx_ISR>
}
 8003e5a:	e7fb      	b.n	8003e54 <SPI_2linesRxISR_16BIT+0x36>

08003e5c <HAL_SPI_IRQHandler>:
{
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003e62:	6802      	ldr	r2, [r0, #0]
 8003e64:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003e66:	6893      	ldr	r3, [r2, #8]
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8003e68:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8003e6c:	2801      	cmp	r0, #1
 8003e6e:	d05c      	beq.n	8003f2a <HAL_SPI_IRQHandler+0xce>
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8003e70:	f013 0f02 	tst.w	r3, #2
 8003e74:	d002      	beq.n	8003e7c <HAL_SPI_IRQHandler+0x20>
 8003e76:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e7a:	d15d      	bne.n	8003f38 <HAL_SPI_IRQHandler+0xdc>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8003e7c:	f413 7fb0 	tst.w	r3, #352	; 0x160
 8003e80:	d05d      	beq.n	8003f3e <HAL_SPI_IRQHandler+0xe2>
 8003e82:	f011 0f20 	tst.w	r1, #32
 8003e86:	d05a      	beq.n	8003f3e <HAL_SPI_IRQHandler+0xe2>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8003e88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e8c:	d00f      	beq.n	8003eae <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e8e:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8003e92:	b2c0      	uxtb	r0, r0
 8003e94:	2803      	cmp	r0, #3
 8003e96:	d054      	beq.n	8003f42 <HAL_SPI_IRQHandler+0xe6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003e98:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003e9a:	f040 0004 	orr.w	r0, r0, #4
 8003e9e:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	9000      	str	r0, [sp, #0]
 8003ea4:	68d0      	ldr	r0, [r2, #12]
 8003ea6:	9000      	str	r0, [sp, #0]
 8003ea8:	6890      	ldr	r0, [r2, #8]
 8003eaa:	9000      	str	r0, [sp, #0]
 8003eac:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8003eae:	f013 0f20 	tst.w	r3, #32
 8003eb2:	d00c      	beq.n	8003ece <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003eb4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003eb6:	f040 0001 	orr.w	r0, r0, #1
 8003eba:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	9002      	str	r0, [sp, #8]
 8003ec0:	6890      	ldr	r0, [r2, #8]
 8003ec2:	9002      	str	r0, [sp, #8]
 8003ec4:	6810      	ldr	r0, [r2, #0]
 8003ec6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8003eca:	6010      	str	r0, [r2, #0]
 8003ecc:	9a02      	ldr	r2, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8003ece:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003ed2:	d009      	beq.n	8003ee8 <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ed4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003ed6:	f043 0308 	orr.w	r3, r3, #8
 8003eda:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003edc:	2300      	movs	r3, #0
 8003ede:	9303      	str	r3, [sp, #12]
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	9303      	str	r3, [sp, #12]
 8003ee6:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003eea:	b343      	cbz	r3, 8003f3e <HAL_SPI_IRQHandler+0xe2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003eec:	6822      	ldr	r2, [r4, #0]
 8003eee:	6853      	ldr	r3, [r2, #4]
 8003ef0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003ef4:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003efc:	f011 0f03 	tst.w	r1, #3
 8003f00:	d027      	beq.n	8003f52 <HAL_SPI_IRQHandler+0xf6>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003f02:	6822      	ldr	r2, [r4, #0]
 8003f04:	6853      	ldr	r3, [r2, #4]
 8003f06:	f023 0303 	bic.w	r3, r3, #3
 8003f0a:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003f0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f0e:	b123      	cbz	r3, 8003f1a <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f10:	4a12      	ldr	r2, [pc, #72]	; (8003f5c <HAL_SPI_IRQHandler+0x100>)
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8003f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f16:	f7fd fe9b 	bl	8001c50 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8003f1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f1c:	b17b      	cbz	r3, 8003f3e <HAL_SPI_IRQHandler+0xe2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003f1e:	4a0f      	ldr	r2, [pc, #60]	; (8003f5c <HAL_SPI_IRQHandler+0x100>)
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8003f22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f24:	f7fd fe94 	bl	8001c50 <HAL_DMA_Abort_IT>
 8003f28:	e009      	b.n	8003f3e <HAL_SPI_IRQHandler+0xe2>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8003f2a:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003f2e:	d09f      	beq.n	8003e70 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8003f30:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003f32:	4620      	mov	r0, r4
 8003f34:	4798      	blx	r3
    return;
 8003f36:	e002      	b.n	8003f3e <HAL_SPI_IRQHandler+0xe2>
    hspi->TxISR(hspi);
 8003f38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	4798      	blx	r3
}
 8003f3e:	b004      	add	sp, #16
 8003f40:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f42:	2300      	movs	r3, #0
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	68d3      	ldr	r3, [r2, #12]
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	6893      	ldr	r3, [r2, #8]
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	9b01      	ldr	r3, [sp, #4]
        return;
 8003f50:	e7f5      	b.n	8003f3e <HAL_SPI_IRQHandler+0xe2>
        HAL_SPI_ErrorCallback(hspi);
 8003f52:	4620      	mov	r0, r4
 8003f54:	f7fd fa46 	bl	80013e4 <HAL_SPI_ErrorCallback>
 8003f58:	e7f1      	b.n	8003f3e <HAL_SPI_IRQHandler+0xe2>
 8003f5a:	bf00      	nop
 8003f5c:	08003f61 	.word	0x08003f61

08003f60 <SPI_DMAAbortOnError>:
{
 8003f60:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f62:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003f6a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8003f6c:	f7fd fa3a 	bl	80013e4 <HAL_SPI_ErrorCallback>
 8003f70:	bd08      	pop	{r3, pc}

08003f72 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f72:	6802      	ldr	r2, [r0, #0]
 8003f74:	6813      	ldr	r3, [r2, #0]
 8003f76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f7a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7c:	6802      	ldr	r2, [r0, #0]
 8003f7e:	6893      	ldr	r3, [r2, #8]
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	6093      	str	r3, [r2, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f86:	2320      	movs	r3, #32
 8003f88:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	6603      	str	r3, [r0, #96]	; 0x60
 8003f90:	4770      	bx	lr

08003f92 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f92:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b21      	cmp	r3, #33	; 0x21
 8003f9a:	d000      	beq.n	8003f9e <UART_TxISR_8BIT+0xc>
 8003f9c:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 8003f9e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	b16b      	cbz	r3, 8003fc2 <UART_TxISR_8BIT+0x30>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8003fa6:	6802      	ldr	r2, [r0, #0]
 8003fa8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003faa:	1c59      	adds	r1, r3, #1
 8003fac:	64c1      	str	r1, [r0, #76]	; 0x4c
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003fb2:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8003fc0:	e7ec      	b.n	8003f9c <UART_TxISR_8BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003fc2:	6802      	ldr	r2, [r0, #0]
 8003fc4:	6813      	ldr	r3, [r2, #0]
 8003fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fca:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fcc:	6802      	ldr	r2, [r0, #0]
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4770      	bx	lr

08003fd8 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fd8:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b21      	cmp	r3, #33	; 0x21
 8003fe0:	d000      	beq.n	8003fe4 <UART_TxISR_16BIT+0xc>
 8003fe2:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 8003fe4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b183      	cbz	r3, 800400e <UART_TxISR_16BIT+0x36>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8003fee:	6802      	ldr	r2, [r0, #0]
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2;
 8003ff8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8003ffe:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29b      	uxth	r3, r3
 8004008:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 800400c:	e7e9      	b.n	8003fe2 <UART_TxISR_16BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800400e:	6802      	ldr	r2, [r0, #0]
 8004010:	6813      	ldr	r3, [r2, #0]
 8004012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004016:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004018:	6802      	ldr	r2, [r0, #0]
 800401a:	6813      	ldr	r3, [r2, #0]
 800401c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	4770      	bx	lr

08004024 <HAL_UART_DeInit>:
  if (huart == NULL)
 8004024:	b1d8      	cbz	r0, 800405e <HAL_UART_DeInit+0x3a>
{
 8004026:	b538      	push	{r3, r4, r5, lr}
 8004028:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800402a:	2324      	movs	r3, #36	; 0x24
 800402c:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8004030:	6802      	ldr	r2, [r0, #0]
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800403a:	6803      	ldr	r3, [r0, #0]
 800403c:	2500      	movs	r5, #0
 800403e:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004040:	6803      	ldr	r3, [r0, #0]
 8004042:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004044:	6803      	ldr	r3, [r0, #0]
 8004046:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8004048:	f7fd fb30 	bl	80016ac <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404c:	6765      	str	r5, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 800404e:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 8004052:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 8004056:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  return HAL_OK;
 800405a:	4628      	mov	r0, r5
 800405c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800405e:	2001      	movs	r0, #1
 8004060:	4770      	bx	lr
	...

08004064 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004064:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b20      	cmp	r3, #32
 800406c:	d001      	beq.n	8004072 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 800406e:	2002      	movs	r0, #2
 8004070:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8004072:	b341      	cbz	r1, 80040c6 <HAL_UART_Transmit_IT+0x62>
 8004074:	b34a      	cbz	r2, 80040ca <HAL_UART_Transmit_IT+0x66>
    __HAL_LOCK(huart);
 8004076:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800407a:	2b01      	cmp	r3, #1
 800407c:	d027      	beq.n	80040ce <HAL_UART_Transmit_IT+0x6a>
 800407e:	2301      	movs	r3, #1
 8004080:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8004084:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004086:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800408a:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004092:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004094:	2321      	movs	r3, #33	; 0x21
 8004096:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409a:	6883      	ldr	r3, [r0, #8]
 800409c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a0:	d00b      	beq.n	80040ba <HAL_UART_Transmit_IT+0x56>
        huart->TxISR = UART_TxISR_8BIT;
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <HAL_UART_Transmit_IT+0x70>)
 80040a4:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_UNLOCK(huart);
 80040a6:	2300      	movs	r3, #0
 80040a8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040ac:	6801      	ldr	r1, [r0, #0]
 80040ae:	680a      	ldr	r2, [r1, #0]
 80040b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040b4:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80040b6:	4618      	mov	r0, r3
 80040b8:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ba:	6903      	ldr	r3, [r0, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <HAL_UART_Transmit_IT+0x3e>
        huart->TxISR = UART_TxISR_16BIT;
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_UART_Transmit_IT+0x74>)
 80040c2:	6643      	str	r3, [r0, #100]	; 0x64
 80040c4:	e7ef      	b.n	80040a6 <HAL_UART_Transmit_IT+0x42>
      return HAL_ERROR;
 80040c6:	2001      	movs	r0, #1
 80040c8:	4770      	bx	lr
 80040ca:	2001      	movs	r0, #1
 80040cc:	4770      	bx	lr
    __HAL_LOCK(huart);
 80040ce:	2002      	movs	r0, #2
}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	08003f93 	.word	0x08003f93
 80040d8:	08003fd9 	.word	0x08003fd9

080040dc <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80040dc:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	d001      	beq.n	80040ea <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 80040e6:	2002      	movs	r0, #2
 80040e8:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 80040ea:	2900      	cmp	r1, #0
 80040ec:	d056      	beq.n	800419c <HAL_UART_Receive_IT+0xc0>
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	d056      	beq.n	80041a0 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 80040f2:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d054      	beq.n	80041a4 <HAL_UART_Receive_IT+0xc8>
 80040fa:	2301      	movs	r3, #1
 80040fc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 8004100:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004102:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8004106:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800410e:	6883      	ldr	r3, [r0, #8]
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004114:	d006      	beq.n	8004124 <HAL_UART_Receive_IT+0x48>
 8004116:	b9a3      	cbnz	r3, 8004142 <HAL_UART_Receive_IT+0x66>
 8004118:	6903      	ldr	r3, [r0, #16]
 800411a:	b973      	cbnz	r3, 800413a <HAL_UART_Receive_IT+0x5e>
 800411c:	23ff      	movs	r3, #255	; 0xff
 800411e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004122:	e011      	b.n	8004148 <HAL_UART_Receive_IT+0x6c>
 8004124:	6903      	ldr	r3, [r0, #16]
 8004126:	b923      	cbnz	r3, 8004132 <HAL_UART_Receive_IT+0x56>
 8004128:	f240 13ff 	movw	r3, #511	; 0x1ff
 800412c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004130:	e00a      	b.n	8004148 <HAL_UART_Receive_IT+0x6c>
 8004132:	23ff      	movs	r3, #255	; 0xff
 8004134:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004138:	e006      	b.n	8004148 <HAL_UART_Receive_IT+0x6c>
 800413a:	237f      	movs	r3, #127	; 0x7f
 800413c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004140:	e002      	b.n	8004148 <HAL_UART_Receive_IT+0x6c>
 8004142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004146:	d019      	beq.n	800417c <HAL_UART_Receive_IT+0xa0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	2300      	movs	r3, #0
 800414a:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800414c:	2322      	movs	r3, #34	; 0x22
 800414e:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	6802      	ldr	r2, [r0, #0]
 8004154:	6893      	ldr	r3, [r2, #8]
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6093      	str	r3, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	6883      	ldr	r3, [r0, #8]
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	d015      	beq.n	8004190 <HAL_UART_Receive_IT+0xb4>
        huart->RxISR = UART_RxISR_8BIT;
 8004164:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <HAL_UART_Receive_IT+0xcc>)
 8004166:	6603      	str	r3, [r0, #96]	; 0x60
      __HAL_UNLOCK(huart);
 8004168:	2300      	movs	r3, #0
 800416a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800416e:	6801      	ldr	r1, [r0, #0]
 8004170:	680a      	ldr	r2, [r1, #0]
 8004172:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004176:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8004178:	4618      	mov	r0, r3
 800417a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800417c:	6903      	ldr	r3, [r0, #16]
 800417e:	b91b      	cbnz	r3, 8004188 <HAL_UART_Receive_IT+0xac>
 8004180:	237f      	movs	r3, #127	; 0x7f
 8004182:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8004186:	e7df      	b.n	8004148 <HAL_UART_Receive_IT+0x6c>
 8004188:	233f      	movs	r3, #63	; 0x3f
 800418a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800418e:	e7db      	b.n	8004148 <HAL_UART_Receive_IT+0x6c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004190:	6903      	ldr	r3, [r0, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e6      	bne.n	8004164 <HAL_UART_Receive_IT+0x88>
        huart->RxISR = UART_RxISR_16BIT;
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_UART_Receive_IT+0xd0>)
 8004198:	6603      	str	r3, [r0, #96]	; 0x60
 800419a:	e7e5      	b.n	8004168 <HAL_UART_Receive_IT+0x8c>
      return HAL_ERROR;
 800419c:	2001      	movs	r0, #1
 800419e:	4770      	bx	lr
 80041a0:	2001      	movs	r0, #1
 80041a2:	4770      	bx	lr
    __HAL_LOCK(huart);
 80041a4:	2002      	movs	r0, #2
}
 80041a6:	4770      	bx	lr
 80041a8:	080041cd 	.word	0x080041cd
 80041ac:	08004231 	.word	0x08004231

080041b0 <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041b0:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041b2:	6801      	ldr	r1, [r0, #0]
 80041b4:	680a      	ldr	r2, [r1, #0]
 80041b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ba:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041bc:	2220      	movs	r2, #32
 80041be:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041c2:	2200      	movs	r2, #0
 80041c4:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041c6:	f7fd fa93 	bl	80016f0 <HAL_UART_TxCpltCallback>
 80041ca:	bd08      	pop	{r3, pc}

080041cc <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 80041cc:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041d0:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b22      	cmp	r3, #34	; 0x22
 80041d8:	d006      	beq.n	80041e8 <UART_RxISR_8BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041da:	6802      	ldr	r2, [r0, #0]
 80041dc:	8b13      	ldrh	r3, [r2, #24]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f043 0308 	orr.w	r3, r3, #8
 80041e4:	8313      	strh	r3, [r2, #24]
  }
}
 80041e6:	4770      	bx	lr
{
 80041e8:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041ea:	6803      	ldr	r3, [r0, #0]
 80041ec:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041ee:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80041f0:	1c5c      	adds	r4, r3, #1
 80041f2:	6544      	str	r4, [r0, #84]	; 0x54
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	400a      	ands	r2, r1
 80041f8:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0)
 80041fa:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8004208:	b103      	cbz	r3, 800420c <UART_RxISR_8BIT+0x40>
 800420a:	bd10      	pop	{r4, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800420c:	6802      	ldr	r2, [r0, #0]
 800420e:	6813      	ldr	r3, [r2, #0]
 8004210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004214:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004216:	6802      	ldr	r2, [r0, #0]
 8004218:	6893      	ldr	r3, [r2, #8]
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004220:	2320      	movs	r3, #32
 8004222:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 8004226:	2300      	movs	r3, #0
 8004228:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800422a:	f7fd fa9f 	bl	800176c <HAL_UART_RxCpltCallback>
 800422e:	bd10      	pop	{r4, pc}

08004230 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004230:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004232:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004236:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b22      	cmp	r3, #34	; 0x22
 800423e:	d006      	beq.n	800424e <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004240:	6802      	ldr	r2, [r0, #0]
 8004242:	8b13      	ldrh	r3, [r2, #24]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f043 0308 	orr.w	r3, r3, #8
 800424a:	8313      	strh	r3, [r2, #24]
 800424c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800424e:	6803      	ldr	r3, [r0, #0]
 8004250:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004252:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8004254:	400a      	ands	r2, r1
 8004256:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2;
 8004258:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800425a:	3302      	adds	r3, #2
 800425c:	6543      	str	r3, [r0, #84]	; 0x54
    if (--huart->RxXferCount == 0)
 800425e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29b      	uxth	r3, r3
 8004268:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1ed      	bne.n	800424c <UART_RxISR_16BIT+0x1c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004270:	6802      	ldr	r2, [r0, #0]
 8004272:	6813      	ldr	r3, [r2, #0]
 8004274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004278:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	6802      	ldr	r2, [r0, #0]
 800427c:	6893      	ldr	r3, [r2, #8]
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004284:	2320      	movs	r3, #32
 8004286:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 800428a:	2300      	movs	r3, #0
 800428c:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800428e:	f7fd fa6d 	bl	800176c <HAL_UART_RxCpltCallback>
 8004292:	bd08      	pop	{r3, pc}

08004294 <HAL_UART_IRQHandler>:
{
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004298:	6802      	ldr	r2, [r0, #0]
 800429a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800429c:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800429e:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 80042a0:	f013 050f 	ands.w	r5, r3, #15
 80042a4:	d10c      	bne.n	80042c0 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 80042a6:	f013 0f20 	tst.w	r3, #32
 80042aa:	d009      	beq.n	80042c0 <HAL_UART_IRQHandler+0x2c>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ac:	f011 0f20 	tst.w	r1, #32
 80042b0:	d006      	beq.n	80042c0 <HAL_UART_IRQHandler+0x2c>
      if (huart->RxISR != NULL)
 80042b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8093 	beq.w	80043e0 <HAL_UART_IRQHandler+0x14c>
        huart->RxISR(huart);
 80042ba:	4620      	mov	r0, r4
 80042bc:	4798      	blx	r3
 80042be:	bd38      	pop	{r3, r4, r5, pc}
  if ((errorflags != RESET)
 80042c0:	2d00      	cmp	r5, #0
 80042c2:	d06f      	beq.n	80043a4 <HAL_UART_IRQHandler+0x110>
      && (((cr3its & USART_CR3_EIE) != RESET)
 80042c4:	f010 0501 	ands.w	r5, r0, #1
 80042c8:	d102      	bne.n	80042d0 <HAL_UART_IRQHandler+0x3c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042ca:	f411 7f90 	tst.w	r1, #288	; 0x120
 80042ce:	d069      	beq.n	80043a4 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042d0:	f013 0f01 	tst.w	r3, #1
 80042d4:	d007      	beq.n	80042e6 <HAL_UART_IRQHandler+0x52>
 80042d6:	f411 7f80 	tst.w	r1, #256	; 0x100
 80042da:	d004      	beq.n	80042e6 <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042dc:	2001      	movs	r0, #1
 80042de:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042e0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80042e2:	4302      	orrs	r2, r0
 80042e4:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042e6:	f013 0f02 	tst.w	r3, #2
 80042ea:	d007      	beq.n	80042fc <HAL_UART_IRQHandler+0x68>
 80042ec:	b135      	cbz	r5, 80042fc <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	2002      	movs	r0, #2
 80042f2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042f4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80042f6:	f042 0204 	orr.w	r2, r2, #4
 80042fa:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042fc:	f013 0f04 	tst.w	r3, #4
 8004300:	d007      	beq.n	8004312 <HAL_UART_IRQHandler+0x7e>
 8004302:	b135      	cbz	r5, 8004312 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004304:	6822      	ldr	r2, [r4, #0]
 8004306:	2004      	movs	r0, #4
 8004308:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800430a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800430c:	f042 0202 	orr.w	r2, r2, #2
 8004310:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8004312:	f013 0f08 	tst.w	r3, #8
 8004316:	d009      	beq.n	800432c <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8004318:	f011 0f20 	tst.w	r1, #32
 800431c:	d100      	bne.n	8004320 <HAL_UART_IRQHandler+0x8c>
 800431e:	b12d      	cbz	r5, 800432c <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004320:	6822      	ldr	r2, [r4, #0]
 8004322:	2008      	movs	r0, #8
 8004324:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004326:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004328:	4302      	orrs	r2, r0
 800432a:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800432c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800432e:	2a00      	cmp	r2, #0
 8004330:	d056      	beq.n	80043e0 <HAL_UART_IRQHandler+0x14c>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8004332:	f013 0f20 	tst.w	r3, #32
 8004336:	d006      	beq.n	8004346 <HAL_UART_IRQHandler+0xb2>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004338:	f011 0f20 	tst.w	r1, #32
 800433c:	d003      	beq.n	8004346 <HAL_UART_IRQHandler+0xb2>
        if (huart->RxISR != NULL)
 800433e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004340:	b10b      	cbz	r3, 8004346 <HAL_UART_IRQHandler+0xb2>
          huart->RxISR(huart);
 8004342:	4620      	mov	r0, r4
 8004344:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004346:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004348:	f013 0f08 	tst.w	r3, #8
 800434c:	d104      	bne.n	8004358 <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8004352:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004356:	d01f      	beq.n	8004398 <HAL_UART_IRQHandler+0x104>
        UART_EndRxTransfer(huart);
 8004358:	4620      	mov	r0, r4
 800435a:	f7ff fe0a 	bl	8003f72 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004366:	d013      	beq.n	8004390 <HAL_UART_IRQHandler+0xfc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800436e:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004370:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004372:	b14b      	cbz	r3, 8004388 <HAL_UART_IRQHandler+0xf4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004374:	4a1d      	ldr	r2, [pc, #116]	; (80043ec <HAL_UART_IRQHandler+0x158>)
 8004376:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004378:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800437a:	f7fd fc69 	bl	8001c50 <HAL_DMA_Abort_IT>
 800437e:	b378      	cbz	r0, 80043e0 <HAL_UART_IRQHandler+0x14c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004380:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004382:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004384:	4798      	blx	r3
 8004386:	bd38      	pop	{r3, r4, r5, pc}
            HAL_UART_ErrorCallback(huart);
 8004388:	4620      	mov	r0, r4
 800438a:	f7fd fa39 	bl	8001800 <HAL_UART_ErrorCallback>
 800438e:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8004390:	4620      	mov	r0, r4
 8004392:	f7fd fa35 	bl	8001800 <HAL_UART_ErrorCallback>
 8004396:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8004398:	4620      	mov	r0, r4
 800439a:	f7fd fa31 	bl	8001800 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439e:	2300      	movs	r3, #0
 80043a0:	6763      	str	r3, [r4, #116]	; 0x74
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80043a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80043a8:	d002      	beq.n	80043b0 <HAL_UART_IRQHandler+0x11c>
 80043aa:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80043ae:	d10a      	bne.n	80043c6 <HAL_UART_IRQHandler+0x132>
  if (((isrflags & USART_ISR_TXE) != RESET)
 80043b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80043b4:	d00e      	beq.n	80043d4 <HAL_UART_IRQHandler+0x140>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80043ba:	d00b      	beq.n	80043d4 <HAL_UART_IRQHandler+0x140>
    if (huart->TxISR != NULL)
 80043bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043be:	b17b      	cbz	r3, 80043e0 <HAL_UART_IRQHandler+0x14c>
      huart->TxISR(huart);
 80043c0:	4620      	mov	r0, r4
 80043c2:	4798      	blx	r3
 80043c4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043ca:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80043cc:	4620      	mov	r0, r4
 80043ce:	f000 fb04 	bl	80049da <HAL_UARTEx_WakeupCallback>
    return;
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043d4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80043d8:	d002      	beq.n	80043e0 <HAL_UART_IRQHandler+0x14c>
 80043da:	f011 0f40 	tst.w	r1, #64	; 0x40
 80043de:	d100      	bne.n	80043e2 <HAL_UART_IRQHandler+0x14e>
 80043e0:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80043e2:	4620      	mov	r0, r4
 80043e4:	f7ff fee4 	bl	80041b0 <UART_EndTransmit_IT>
    return;
 80043e8:	e7fa      	b.n	80043e0 <HAL_UART_IRQHandler+0x14c>
 80043ea:	bf00      	nop
 80043ec:	080043f1 	.word	0x080043f1

080043f0 <UART_DMAAbortOnError>:
{
 80043f0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80043fa:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80043fe:	f7fd f9ff 	bl	8001800 <HAL_UART_ErrorCallback>
 8004402:	bd08      	pop	{r3, pc}

08004404 <UART_SetConfig>:
{
 8004404:	e92d 4b78 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, fp, lr}
 8004408:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800440a:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800440c:	6883      	ldr	r3, [r0, #8]
 800440e:	6902      	ldr	r2, [r0, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	6942      	ldr	r2, [r0, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	69c2      	ldr	r2, [r0, #28]
 8004418:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800441a:	6808      	ldr	r0, [r1, #0]
 800441c:	4a9b      	ldr	r2, [pc, #620]	; (800468c <UART_SetConfig+0x288>)
 800441e:	4002      	ands	r2, r0
 8004420:	4313      	orrs	r3, r2
 8004422:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004424:	6822      	ldr	r2, [r4, #0]
 8004426:	6853      	ldr	r3, [r2, #4]
 8004428:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800442c:	68e1      	ldr	r1, [r4, #12]
 800442e:	430b      	orrs	r3, r1
 8004430:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004432:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004434:	6822      	ldr	r2, [r4, #0]
 8004436:	4996      	ldr	r1, [pc, #600]	; (8004690 <UART_SetConfig+0x28c>)
 8004438:	428a      	cmp	r2, r1
 800443a:	d001      	beq.n	8004440 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 800443c:	6a21      	ldr	r1, [r4, #32]
 800443e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004440:	6891      	ldr	r1, [r2, #8]
 8004442:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8004446:	430b      	orrs	r3, r1
 8004448:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	4a91      	ldr	r2, [pc, #580]	; (8004694 <UART_SetConfig+0x290>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d023      	beq.n	800449a <UART_SetConfig+0x96>
 8004452:	4a91      	ldr	r2, [pc, #580]	; (8004698 <UART_SetConfig+0x294>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d034      	beq.n	80044c2 <UART_SetConfig+0xbe>
 8004458:	4a90      	ldr	r2, [pc, #576]	; (800469c <UART_SetConfig+0x298>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d04a      	beq.n	80044f4 <UART_SetConfig+0xf0>
 800445e:	4a90      	ldr	r2, [pc, #576]	; (80046a0 <UART_SetConfig+0x29c>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d05d      	beq.n	8004520 <UART_SetConfig+0x11c>
 8004464:	4a8a      	ldr	r2, [pc, #552]	; (8004690 <UART_SetConfig+0x28c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d070      	beq.n	800454c <UART_SetConfig+0x148>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800446a:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 800446c:	4a88      	ldr	r2, [pc, #544]	; (8004690 <UART_SetConfig+0x28c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	f000 808f 	beq.w	8004592 <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004474:	69e3      	ldr	r3, [r4, #28]
 8004476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447a:	f000 80fd 	beq.w	8004678 <UART_SetConfig+0x274>
    switch (clocksource)
 800447e:	2d08      	cmp	r5, #8
 8004480:	f200 819b 	bhi.w	80047ba <UART_SetConfig+0x3b6>
 8004484:	e8df f015 	tbh	[pc, r5, lsl #1]
 8004488:	0171015a 	.word	0x0171015a
 800448c:	0199017b 	.word	0x0199017b
 8004490:	01990186 	.word	0x01990186
 8004494:	01990199 	.word	0x01990199
 8004498:	0190      	.short	0x0190
  UART_GETCLOCKSOURCE(huart, clocksource);
 800449a:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800449e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80044a2:	f002 0203 	and.w	r2, r2, #3
 80044a6:	2a03      	cmp	r2, #3
 80044a8:	d809      	bhi.n	80044be <UART_SetConfig+0xba>
 80044aa:	e8df f002 	tbb	[pc, r2]
 80044ae:	0402      	.short	0x0402
 80044b0:	0668      	.short	0x0668
 80044b2:	2501      	movs	r5, #1
 80044b4:	e7da      	b.n	800446c <UART_SetConfig+0x68>
 80044b6:	2504      	movs	r5, #4
 80044b8:	e7d8      	b.n	800446c <UART_SetConfig+0x68>
 80044ba:	2508      	movs	r5, #8
 80044bc:	e7d6      	b.n	800446c <UART_SetConfig+0x68>
 80044be:	2510      	movs	r5, #16
 80044c0:	e7d4      	b.n	800446c <UART_SetConfig+0x68>
 80044c2:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80044c6:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80044ca:	f002 020c 	and.w	r2, r2, #12
 80044ce:	2a0c      	cmp	r2, #12
 80044d0:	d80e      	bhi.n	80044f0 <UART_SetConfig+0xec>
 80044d2:	e8df f002 	tbb	[pc, r2]
 80044d6:	0d07      	.short	0x0d07
 80044d8:	0d090d0d 	.word	0x0d090d0d
 80044dc:	0d560d0d 	.word	0x0d560d0d
 80044e0:	0d0d      	.short	0x0d0d
 80044e2:	0b          	.byte	0x0b
 80044e3:	00          	.byte	0x00
 80044e4:	2500      	movs	r5, #0
 80044e6:	e7c1      	b.n	800446c <UART_SetConfig+0x68>
 80044e8:	2504      	movs	r5, #4
 80044ea:	e7bf      	b.n	800446c <UART_SetConfig+0x68>
 80044ec:	2508      	movs	r5, #8
 80044ee:	e7bd      	b.n	800446c <UART_SetConfig+0x68>
 80044f0:	2510      	movs	r5, #16
 80044f2:	e7bb      	b.n	800446c <UART_SetConfig+0x68>
 80044f4:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80044f8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80044fc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8004500:	2a10      	cmp	r2, #16
 8004502:	d009      	beq.n	8004518 <UART_SetConfig+0x114>
 8004504:	d905      	bls.n	8004512 <UART_SetConfig+0x10e>
 8004506:	2a20      	cmp	r2, #32
 8004508:	d03d      	beq.n	8004586 <UART_SetConfig+0x182>
 800450a:	2a30      	cmp	r2, #48	; 0x30
 800450c:	d106      	bne.n	800451c <UART_SetConfig+0x118>
 800450e:	2508      	movs	r5, #8
 8004510:	e7ac      	b.n	800446c <UART_SetConfig+0x68>
 8004512:	b91a      	cbnz	r2, 800451c <UART_SetConfig+0x118>
 8004514:	2500      	movs	r5, #0
 8004516:	e7a9      	b.n	800446c <UART_SetConfig+0x68>
 8004518:	2504      	movs	r5, #4
 800451a:	e7a7      	b.n	800446c <UART_SetConfig+0x68>
 800451c:	2510      	movs	r5, #16
 800451e:	e7a5      	b.n	800446c <UART_SetConfig+0x68>
 8004520:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8004524:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004528:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800452c:	2a40      	cmp	r2, #64	; 0x40
 800452e:	d009      	beq.n	8004544 <UART_SetConfig+0x140>
 8004530:	d905      	bls.n	800453e <UART_SetConfig+0x13a>
 8004532:	2a80      	cmp	r2, #128	; 0x80
 8004534:	d029      	beq.n	800458a <UART_SetConfig+0x186>
 8004536:	2ac0      	cmp	r2, #192	; 0xc0
 8004538:	d106      	bne.n	8004548 <UART_SetConfig+0x144>
 800453a:	2508      	movs	r5, #8
 800453c:	e796      	b.n	800446c <UART_SetConfig+0x68>
 800453e:	b91a      	cbnz	r2, 8004548 <UART_SetConfig+0x144>
 8004540:	2500      	movs	r5, #0
 8004542:	e793      	b.n	800446c <UART_SetConfig+0x68>
 8004544:	2504      	movs	r5, #4
 8004546:	e791      	b.n	800446c <UART_SetConfig+0x68>
 8004548:	2510      	movs	r5, #16
 800454a:	e78f      	b.n	800446c <UART_SetConfig+0x68>
 800454c:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8004550:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8004554:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004558:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800455c:	d00b      	beq.n	8004576 <UART_SetConfig+0x172>
 800455e:	d907      	bls.n	8004570 <UART_SetConfig+0x16c>
 8004560:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004564:	d013      	beq.n	800458e <UART_SetConfig+0x18a>
 8004566:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800456a:	d106      	bne.n	800457a <UART_SetConfig+0x176>
 800456c:	2508      	movs	r5, #8
 800456e:	e77d      	b.n	800446c <UART_SetConfig+0x68>
 8004570:	b91a      	cbnz	r2, 800457a <UART_SetConfig+0x176>
 8004572:	2500      	movs	r5, #0
 8004574:	e77a      	b.n	800446c <UART_SetConfig+0x68>
 8004576:	2504      	movs	r5, #4
 8004578:	e778      	b.n	800446c <UART_SetConfig+0x68>
 800457a:	2510      	movs	r5, #16
 800457c:	e776      	b.n	800446c <UART_SetConfig+0x68>
 800457e:	2502      	movs	r5, #2
 8004580:	e774      	b.n	800446c <UART_SetConfig+0x68>
 8004582:	2502      	movs	r5, #2
 8004584:	e772      	b.n	800446c <UART_SetConfig+0x68>
 8004586:	2502      	movs	r5, #2
 8004588:	e770      	b.n	800446c <UART_SetConfig+0x68>
 800458a:	2502      	movs	r5, #2
 800458c:	e76e      	b.n	800446c <UART_SetConfig+0x68>
 800458e:	2502      	movs	r5, #2
 8004590:	e76c      	b.n	800446c <UART_SetConfig+0x68>
    switch (clocksource)
 8004592:	2d08      	cmp	r5, #8
 8004594:	d811      	bhi.n	80045ba <UART_SetConfig+0x1b6>
 8004596:	e8df f005 	tbb	[pc, r5]
 800459a:	1008      	.short	0x1008
 800459c:	100c1005 	.word	0x100c1005
 80045a0:	1010      	.short	0x1010
 80045a2:	13          	.byte	0x13
 80045a3:	00          	.byte	0x00
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80045a4:	483f      	ldr	r0, [pc, #252]	; (80046a4 <UART_SetConfig+0x2a0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 80045a6:	2600      	movs	r6, #0
 80045a8:	e00d      	b.n	80045c6 <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80045aa:	f7fe f913 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 80045ae:	2600      	movs	r6, #0
        break;
 80045b0:	e009      	b.n	80045c6 <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80045b2:	f7fd fcf5 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
  HAL_StatusTypeDef ret               = HAL_OK;
 80045b6:	2600      	movs	r6, #0
        break;
 80045b8:	e005      	b.n	80045c6 <UART_SetConfig+0x1c2>
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80045ba:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 80045bc:	2601      	movs	r6, #1
        break;
 80045be:	e002      	b.n	80045c6 <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80045c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c4:	2600      	movs	r6, #0
    if (lpuart_ker_ck_pres != 0U)
 80045c6:	2800      	cmp	r0, #0
 80045c8:	f000 80c9 	beq.w	800475e <UART_SetConfig+0x35a>
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80045cc:	6862      	ldr	r2, [r4, #4]
 80045ce:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80045d2:	4298      	cmp	r0, r3
 80045d4:	f0c0 80f4 	bcc.w	80047c0 <UART_SetConfig+0x3bc>
 80045d8:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80045dc:	f200 80f2 	bhi.w	80047c4 <UART_SetConfig+0x3c0>
        switch (clocksource)
 80045e0:	2d08      	cmp	r5, #8
 80045e2:	d846      	bhi.n	8004672 <UART_SetConfig+0x26e>
 80045e4:	e8df f005 	tbb	[pc, r5]
 80045e8:	451f4505 	.word	0x451f4505
 80045ec:	45454529 	.word	0x45454529
 80045f0:	3b          	.byte	0x3b
 80045f1:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045f2:	f7fe f8ef 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 80045f6:	2300      	movs	r3, #0
 80045f8:	ea4f 6910 	mov.w	r9, r0, lsr #24
 80045fc:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8004600:	6862      	ldr	r2, [r4, #4]
 8004602:	0850      	lsrs	r0, r2, #1
 8004604:	eb18 0b00 	adds.w	fp, r8, r0
 8004608:	f149 0c00 	adc.w	ip, r9, #0
 800460c:	4658      	mov	r0, fp
 800460e:	4661      	mov	r1, ip
 8004610:	f7fb fde0 	bl	80001d4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004614:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004618:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <UART_SetConfig+0x2a4>)
 800461a:	429a      	cmp	r2, r3
 800461c:	f200 80d4 	bhi.w	80047c8 <UART_SetConfig+0x3c4>
          huart->Instance->BRR = usartdiv;
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	60d8      	str	r0, [r3, #12]
 8004624:	e09b      	b.n	800475e <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8004626:	0855      	lsrs	r5, r2, #1
 8004628:	2300      	movs	r3, #0
 800462a:	4820      	ldr	r0, [pc, #128]	; (80046ac <UART_SetConfig+0x2a8>)
 800462c:	2100      	movs	r1, #0
 800462e:	1940      	adds	r0, r0, r5
 8004630:	f141 0100 	adc.w	r1, r1, #0
 8004634:	f7fb fdce 	bl	80001d4 <__aeabi_uldivmod>
            break;
 8004638:	e7ec      	b.n	8004614 <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800463a:	f7fd fcb1 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 800463e:	2300      	movs	r3, #0
 8004640:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8004644:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8004648:	6862      	ldr	r2, [r4, #4]
 800464a:	0850      	lsrs	r0, r2, #1
 800464c:	eb18 0b00 	adds.w	fp, r8, r0
 8004650:	f149 0c00 	adc.w	ip, r9, #0
 8004654:	4658      	mov	r0, fp
 8004656:	4661      	mov	r1, ip
 8004658:	f7fb fdbc 	bl	80001d4 <__aeabi_uldivmod>
            break;
 800465c:	e7da      	b.n	8004614 <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800465e:	0850      	lsrs	r0, r2, #1
 8004660:	2100      	movs	r1, #0
 8004662:	2300      	movs	r3, #0
 8004664:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8004668:	f141 0100 	adc.w	r1, r1, #0
 800466c:	f7fb fdb2 	bl	80001d4 <__aeabi_uldivmod>
            break;
 8004670:	e7d0      	b.n	8004614 <UART_SetConfig+0x210>
            ret = HAL_ERROR;
 8004672:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004674:	2000      	movs	r0, #0
 8004676:	e7cd      	b.n	8004614 <UART_SetConfig+0x210>
    switch (clocksource)
 8004678:	2d08      	cmp	r5, #8
 800467a:	d85c      	bhi.n	8004736 <UART_SetConfig+0x332>
 800467c:	e8df f005 	tbb	[pc, r5]
 8004680:	5b3c3118 	.word	0x5b3c3118
 8004684:	5b5b5b47 	.word	0x5b5b5b47
 8004688:	52          	.byte	0x52
 8004689:	00          	.byte	0x00
 800468a:	bf00      	nop
 800468c:	efff69f3 	.word	0xefff69f3
 8004690:	40008000 	.word	0x40008000
 8004694:	40013800 	.word	0x40013800
 8004698:	40004400 	.word	0x40004400
 800469c:	40004800 	.word	0x40004800
 80046a0:	40004c00 	.word	0x40004c00
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	000ffcff 	.word	0x000ffcff
 80046ac:	f4240000 	.word	0xf4240000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80046b0:	f7fe f890 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 80046b4:	6862      	ldr	r2, [r4, #4]
 80046b6:	0853      	lsrs	r3, r2, #1
 80046b8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80046bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80046c0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80046c2:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c4:	f1a3 0110 	sub.w	r1, r3, #16
 80046c8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80046cc:	4291      	cmp	r1, r2
 80046ce:	d87d      	bhi.n	80047cc <UART_SetConfig+0x3c8>
      brrtemp = usartdiv & 0xFFF0U;
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046d6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80046da:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80046dc:	6822      	ldr	r2, [r4, #0]
 80046de:	60d3      	str	r3, [r2, #12]
 80046e0:	e03d      	b.n	800475e <UART_SetConfig+0x35a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046e2:	f7fe f887 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 80046e6:	6862      	ldr	r2, [r4, #4]
 80046e8:	0853      	lsrs	r3, r2, #1
 80046ea:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80046ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80046f2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f4:	2600      	movs	r6, #0
        break;
 80046f6:	e7e5      	b.n	80046c4 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80046f8:	6862      	ldr	r2, [r4, #4]
 80046fa:	0853      	lsrs	r3, r2, #1
 80046fc:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004700:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004704:	fbb3 f3f2 	udiv	r3, r3, r2
 8004708:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800470a:	2600      	movs	r6, #0
        break;
 800470c:	e7da      	b.n	80046c4 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800470e:	f7fd fc47 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8004712:	6862      	ldr	r2, [r4, #4]
 8004714:	0853      	lsrs	r3, r2, #1
 8004716:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800471a:	fbb3 f3f2 	udiv	r3, r3, r2
 800471e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004720:	2600      	movs	r6, #0
        break;
 8004722:	e7cf      	b.n	80046c4 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004724:	6862      	ldr	r2, [r4, #4]
 8004726:	0853      	lsrs	r3, r2, #1
 8004728:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800472c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004730:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004732:	2600      	movs	r6, #0
        break;
 8004734:	e7c6      	b.n	80046c4 <UART_SetConfig+0x2c0>
        ret = HAL_ERROR;
 8004736:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8004738:	2300      	movs	r3, #0
 800473a:	e7c3      	b.n	80046c4 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800473c:	f7fe f84a 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004746:	fbb0 f0f3 	udiv	r0, r0, r3
 800474a:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800474c:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800474e:	f1a0 0210 	sub.w	r2, r0, #16
 8004752:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004756:	429a      	cmp	r2, r3
 8004758:	d83a      	bhi.n	80047d0 <UART_SetConfig+0x3cc>
      huart->Instance->BRR = usartdiv;
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8004762:	6663      	str	r3, [r4, #100]	; 0x64
}
 8004764:	4630      	mov	r0, r6
 8004766:	e8bd 8b78 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800476a:	f7fe f843 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 800476e:	6863      	ldr	r3, [r4, #4]
 8004770:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004774:	fbb0 f0f3 	udiv	r0, r0, r3
 8004778:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800477a:	2600      	movs	r6, #0
        break;
 800477c:	e7e7      	b.n	800474e <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800477e:	6863      	ldr	r3, [r4, #4]
 8004780:	0858      	lsrs	r0, r3, #1
 8004782:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8004786:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 800478a:	fbb0 f0f3 	udiv	r0, r0, r3
 800478e:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8004790:	2600      	movs	r6, #0
        break;
 8004792:	e7dc      	b.n	800474e <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004794:	f7fd fc04 	bl	8001fa0 <HAL_RCC_GetSysClockFreq>
 8004798:	6863      	ldr	r3, [r4, #4]
 800479a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800479e:	fbb0 f0f3 	udiv	r0, r0, r3
 80047a2:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80047a4:	2600      	movs	r6, #0
        break;
 80047a6:	e7d2      	b.n	800474e <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80047a8:	6863      	ldr	r3, [r4, #4]
 80047aa:	0858      	lsrs	r0, r3, #1
 80047ac:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80047b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80047b4:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b6:	2600      	movs	r6, #0
        break;
 80047b8:	e7c9      	b.n	800474e <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 80047ba:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 80047bc:	2000      	movs	r0, #0
 80047be:	e7c6      	b.n	800474e <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 80047c0:	2601      	movs	r6, #1
 80047c2:	e7cc      	b.n	800475e <UART_SetConfig+0x35a>
 80047c4:	2601      	movs	r6, #1
 80047c6:	e7ca      	b.n	800475e <UART_SetConfig+0x35a>
          ret = HAL_ERROR;
 80047c8:	2601      	movs	r6, #1
 80047ca:	e7c8      	b.n	800475e <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 80047cc:	2601      	movs	r6, #1
 80047ce:	e7c6      	b.n	800475e <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 80047d0:	2601      	movs	r6, #1
 80047d2:	e7c4      	b.n	800475e <UART_SetConfig+0x35a>

080047d4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047d6:	f013 0f01 	tst.w	r3, #1
 80047da:	d006      	beq.n	80047ea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047dc:	6802      	ldr	r2, [r0, #0]
 80047de:	6853      	ldr	r3, [r2, #4]
 80047e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047e4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80047e6:	430b      	orrs	r3, r1
 80047e8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047ec:	f013 0f02 	tst.w	r3, #2
 80047f0:	d006      	beq.n	8004800 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047f2:	6802      	ldr	r2, [r0, #0]
 80047f4:	6853      	ldr	r3, [r2, #4]
 80047f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80047fc:	430b      	orrs	r3, r1
 80047fe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004800:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004802:	f013 0f04 	tst.w	r3, #4
 8004806:	d006      	beq.n	8004816 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004808:	6802      	ldr	r2, [r0, #0]
 800480a:	6853      	ldr	r3, [r2, #4]
 800480c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004810:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004812:	430b      	orrs	r3, r1
 8004814:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004816:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004818:	f013 0f08 	tst.w	r3, #8
 800481c:	d006      	beq.n	800482c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481e:	6802      	ldr	r2, [r0, #0]
 8004820:	6853      	ldr	r3, [r2, #4]
 8004822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004826:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004828:	430b      	orrs	r3, r1
 800482a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800482c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800482e:	f013 0f10 	tst.w	r3, #16
 8004832:	d006      	beq.n	8004842 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004834:	6802      	ldr	r2, [r0, #0]
 8004836:	6893      	ldr	r3, [r2, #8]
 8004838:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800483c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800483e:	430b      	orrs	r3, r1
 8004840:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004842:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004844:	f013 0f20 	tst.w	r3, #32
 8004848:	d006      	beq.n	8004858 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800484a:	6802      	ldr	r2, [r0, #0]
 800484c:	6893      	ldr	r3, [r2, #8]
 800484e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004852:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004854:	430b      	orrs	r3, r1
 8004856:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004858:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800485a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800485e:	d00a      	beq.n	8004876 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004860:	6802      	ldr	r2, [r0, #0]
 8004862:	6853      	ldr	r3, [r2, #4]
 8004864:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004868:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800486a:	430b      	orrs	r3, r1
 800486c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800486e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004874:	d00b      	beq.n	800488e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004876:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004878:	f013 0f80 	tst.w	r3, #128	; 0x80
 800487c:	d006      	beq.n	800488c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800487e:	6802      	ldr	r2, [r0, #0]
 8004880:	6853      	ldr	r3, [r2, #4]
 8004882:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004886:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004888:	430b      	orrs	r3, r1
 800488a:	6053      	str	r3, [r2, #4]
 800488c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800488e:	6802      	ldr	r2, [r0, #0]
 8004890:	6853      	ldr	r3, [r2, #4]
 8004892:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004896:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004898:	430b      	orrs	r3, r1
 800489a:	6053      	str	r3, [r2, #4]
 800489c:	e7eb      	b.n	8004876 <UART_AdvFeatureConfig+0xa2>

0800489e <UART_WaitOnFlagUntilTimeout>:
{
 800489e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a2:	4605      	mov	r5, r0
 80048a4:	460f      	mov	r7, r1
 80048a6:	4616      	mov	r6, r2
 80048a8:	4698      	mov	r8, r3
 80048aa:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	ea37 0303 	bics.w	r3, r7, r3
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	42b3      	cmp	r3, r6
 80048bc:	d11e      	bne.n	80048fc <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80048be:	f1b4 3fff 	cmp.w	r4, #4294967295
 80048c2:	d0f3      	beq.n	80048ac <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80048c4:	b12c      	cbz	r4, 80048d2 <UART_WaitOnFlagUntilTimeout+0x34>
 80048c6:	f7fd f865 	bl	8001994 <HAL_GetTick>
 80048ca:	eba0 0008 	sub.w	r0, r0, r8
 80048ce:	4284      	cmp	r4, r0
 80048d0:	d2ec      	bcs.n	80048ac <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048d2:	682a      	ldr	r2, [r5, #0]
 80048d4:	6813      	ldr	r3, [r2, #0]
 80048d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048da:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	682a      	ldr	r2, [r5, #0]
 80048de:	6893      	ldr	r3, [r2, #8]
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80048e6:	2320      	movs	r3, #32
 80048e8:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80048ec:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80048f0:	2300      	movs	r3, #0
 80048f2:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 80048f6:	2003      	movs	r0, #3
 80048f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80048fc:	2000      	movs	r0, #0
}
 80048fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004902 <UART_CheckIdleState>:
{
 8004902:	b530      	push	{r4, r5, lr}
 8004904:	b083      	sub	sp, #12
 8004906:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004908:	2300      	movs	r3, #0
 800490a:	6743      	str	r3, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800490c:	f7fd f842 	bl	8001994 <HAL_GetTick>
 8004910:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f013 0f08 	tst.w	r3, #8
 800491a:	d10e      	bne.n	800493a <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800491c:	6823      	ldr	r3, [r4, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f013 0f04 	tst.w	r3, #4
 8004924:	d117      	bne.n	8004956 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8004926:	2320      	movs	r3, #32
 8004928:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 800492c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 8004930:	2000      	movs	r0, #0
 8004932:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8004936:	b003      	add	sp, #12
 8004938:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800493a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	4603      	mov	r3, r0
 8004942:	2200      	movs	r2, #0
 8004944:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004948:	4620      	mov	r0, r4
 800494a:	f7ff ffa8 	bl	800489e <UART_WaitOnFlagUntilTimeout>
 800494e:	2800      	cmp	r0, #0
 8004950:	d0e4      	beq.n	800491c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004952:	2003      	movs	r0, #3
 8004954:	e7ef      	b.n	8004936 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004956:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	462b      	mov	r3, r5
 800495e:	2200      	movs	r2, #0
 8004960:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff ff9a 	bl	800489e <UART_WaitOnFlagUntilTimeout>
 800496a:	2800      	cmp	r0, #0
 800496c:	d0db      	beq.n	8004926 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800496e:	2003      	movs	r0, #3
 8004970:	e7e1      	b.n	8004936 <UART_CheckIdleState+0x34>

08004972 <HAL_UART_Init>:
  if (huart == NULL)
 8004972:	b378      	cbz	r0, 80049d4 <HAL_UART_Init+0x62>
{
 8004974:	b510      	push	{r4, lr}
 8004976:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004978:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800497c:	b30b      	cbz	r3, 80049c2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800497e:	2324      	movs	r3, #36	; 0x24
 8004980:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8004984:	6822      	ldr	r2, [r4, #0]
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	f023 0301 	bic.w	r3, r3, #1
 800498c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800498e:	4620      	mov	r0, r4
 8004990:	f7ff fd38 	bl	8004404 <UART_SetConfig>
 8004994:	2801      	cmp	r0, #1
 8004996:	d01f      	beq.n	80049d8 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800499a:	b9bb      	cbnz	r3, 80049cc <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800499c:	6822      	ldr	r2, [r4, #0]
 800499e:	6853      	ldr	r3, [r2, #4]
 80049a0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80049a4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049a6:	6822      	ldr	r2, [r4, #0]
 80049a8:	6893      	ldr	r3, [r2, #8]
 80049aa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80049ae:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80049b0:	6822      	ldr	r2, [r4, #0]
 80049b2:	6813      	ldr	r3, [r2, #0]
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff ffa1 	bl	8004902 <UART_CheckIdleState>
 80049c0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80049c2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80049c6:	f7fc fe45 	bl	8001654 <HAL_UART_MspInit>
 80049ca:	e7d8      	b.n	800497e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7ff ff01 	bl	80047d4 <UART_AdvFeatureConfig>
 80049d2:	e7e3      	b.n	800499c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80049d4:	2001      	movs	r0, #1
 80049d6:	4770      	bx	lr
}
 80049d8:	bd10      	pop	{r4, pc}

080049da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049da:	4770      	bx	lr

080049dc <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <SDMMC_GetCmdError+0x30>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0b      	ldr	r2, [pc, #44]	; (8004a10 <SDMMC_GetCmdError+0x34>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	0a5a      	lsrs	r2, r3, #9
 80049e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80049ec:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80049f0:	1e5a      	subs	r2, r3, #1
 80049f2:	b143      	cbz	r3, 8004a06 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80049f4:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80049f6:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80049f8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80049fc:	d0f8      	beq.n	80049f0 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80049fe:	23c5      	movs	r3, #197	; 0xc5
 8004a00:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004a02:	2000      	movs	r0, #0
 8004a04:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004a06:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004a0a:	4770      	bx	lr
 8004a0c:	20000044 	.word	0x20000044
 8004a10:	10624dd3 	.word	0x10624dd3

08004a14 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a14:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <SDMMC_GetCmdResp2+0x50>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <SDMMC_GetCmdResp2+0x54>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	0a5a      	lsrs	r2, r3, #9
 8004a20:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a24:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004a28:	1e5a      	subs	r2, r3, #1
 8004a2a:	b1c3      	cbz	r3, 8004a5e <SDMMC_GetCmdResp2+0x4a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004a2c:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004a2e:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004a30:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004a34:	d0f8      	beq.n	8004a28 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004a36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a38:	f013 0f04 	tst.w	r3, #4
 8004a3c:	d003      	beq.n	8004a46 <SDMMC_GetCmdResp2+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004a3e:	2304      	movs	r3, #4
 8004a40:	6383      	str	r3, [r0, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a42:	4618      	mov	r0, r3
 8004a44:	4770      	bx	lr
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004a46:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a48:	f013 0f01 	tst.w	r3, #1
 8004a4c:	d103      	bne.n	8004a56 <SDMMC_GetCmdResp2+0x42>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004a4e:	23c5      	movs	r3, #197	; 0xc5
 8004a50:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004a52:	2000      	movs	r0, #0
 8004a54:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004a56:	2301      	movs	r3, #1
 8004a58:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004a5e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004a62:	4770      	bx	lr
 8004a64:	20000044 	.word	0x20000044
 8004a68:	10624dd3 	.word	0x10624dd3

08004a6c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <SDMMC_GetCmdResp3+0x40>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a0f      	ldr	r2, [pc, #60]	; (8004ab0 <SDMMC_GetCmdResp3+0x44>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0a5a      	lsrs	r2, r3, #9
 8004a78:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a7c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004a80:	1e5a      	subs	r2, r3, #1
 8004a82:	b183      	cbz	r3, 8004aa6 <SDMMC_GetCmdResp3+0x3a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004a84:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004a86:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004a88:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004a8c:	d0f8      	beq.n	8004a80 <SDMMC_GetCmdResp3+0x14>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004a8e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a90:	f013 0f04 	tst.w	r3, #4
 8004a94:	d003      	beq.n	8004a9e <SDMMC_GetCmdResp3+0x32>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004a96:	2304      	movs	r3, #4
 8004a98:	6383      	str	r3, [r0, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	4770      	bx	lr
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004a9e:	23c5      	movs	r3, #197	; 0xc5
 8004aa0:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004aa6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004aaa:	4770      	bx	lr
 8004aac:	20000044 	.word	0x20000044
 8004ab0:	10624dd3 	.word	0x10624dd3

08004ab4 <SDMMC_GetCmdResp7>:
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ab4:	4b16      	ldr	r3, [pc, #88]	; (8004b10 <SDMMC_GetCmdResp7+0x5c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <SDMMC_GetCmdResp7+0x60>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0a5a      	lsrs	r2, r3, #9
 8004ac0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ac4:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	b1e3      	cbz	r3, 8004b06 <SDMMC_GetCmdResp7+0x52>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004acc:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004ace:	4613      	mov	r3, r2
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004ad0:	f011 0f45 	tst.w	r1, #69	; 0x45
 8004ad4:	d0f8      	beq.n	8004ac8 <SDMMC_GetCmdResp7+0x14>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004ad6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ad8:	f013 0f04 	tst.w	r3, #4
 8004adc:	d003      	beq.n	8004ae6 <SDMMC_GetCmdResp7+0x32>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004ade:	2304      	movs	r3, #4
 8004ae0:	6383      	str	r3, [r0, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	4770      	bx	lr
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004ae6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ae8:	f013 0f01 	tst.w	r3, #1
 8004aec:	d107      	bne.n	8004afe <SDMMC_GetCmdResp7+0x4a>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004aee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004af0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004af4:	d00a      	beq.n	8004b0c <SDMMC_GetCmdResp7+0x58>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004af6:	2340      	movs	r3, #64	; 0x40
 8004af8:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004afa:	2000      	movs	r0, #0
 8004afc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004afe:	2301      	movs	r3, #1
 8004b00:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b02:	4618      	mov	r0, r3
 8004b04:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004b06:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004b0a:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8004b0c:	2000      	movs	r0, #0
  
}
 8004b0e:	4770      	bx	lr
 8004b10:	20000044 	.word	0x20000044
 8004b14:	10624dd3 	.word	0x10624dd3

08004b18 <SDMMC_Init>:
{
 8004b18:	b084      	sub	sp, #16
 8004b1a:	b410      	push	{r4}
 8004b1c:	ac02      	add	r4, sp, #8
 8004b1e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8004b22:	6842      	ldr	r2, [r0, #4]
 8004b24:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8004b28:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004b2c:	9903      	ldr	r1, [sp, #12]
 8004b2e:	9b02      	ldr	r3, [sp, #8]
 8004b30:	430b      	orrs	r3, r1
 8004b32:	9904      	ldr	r1, [sp, #16]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	9905      	ldr	r1, [sp, #20]
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	9906      	ldr	r1, [sp, #24]
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	9907      	ldr	r1, [sp, #28]
 8004b40:	430b      	orrs	r3, r1
 8004b42:	4313      	orrs	r3, r2
 8004b44:	6043      	str	r3, [r0, #4]
}
 8004b46:	2000      	movs	r0, #0
 8004b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b4c:	b004      	add	sp, #16
 8004b4e:	4770      	bx	lr

08004b50 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 8004b50:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8004b54:	4770      	bx	lr

08004b56 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004b56:	2303      	movs	r3, #3
 8004b58:	6003      	str	r3, [r0, #0]
}
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	4770      	bx	lr

08004b5e <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004b5e:	6800      	ldr	r0, [r0, #0]
}
 8004b60:	f000 0003 	and.w	r0, r0, #3
 8004b64:	4770      	bx	lr

08004b66 <SDMMC_SendCommand>:
{
 8004b66:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8004b68:	680b      	ldr	r3, [r1, #0]
 8004b6a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8004b6c:	68c3      	ldr	r3, [r0, #12]
 8004b6e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004b72:	f023 030f 	bic.w	r3, r3, #15
 8004b76:	684a      	ldr	r2, [r1, #4]
 8004b78:	688c      	ldr	r4, [r1, #8]
 8004b7a:	4322      	orrs	r2, r4
 8004b7c:	68cc      	ldr	r4, [r1, #12]
 8004b7e:	4322      	orrs	r2, r4
 8004b80:	6909      	ldr	r1, [r1, #16]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60c3      	str	r3, [r0, #12]
}
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 8004b90:	6900      	ldr	r0, [r0, #16]
}
 8004b92:	b2c0      	uxtb	r0, r0
 8004b94:	4770      	bx	lr

08004b96 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004b96:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8004b98:	5840      	ldr	r0, [r0, r1]
}  
 8004b9a:	4770      	bx	lr

08004b9c <SDMMC_GetCmdResp1>:
{
 8004b9c:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004b9e:	4b51      	ldr	r3, [pc, #324]	; (8004ce4 <SDMMC_GetCmdResp1+0x148>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4c51      	ldr	r4, [pc, #324]	; (8004ce8 <SDMMC_GetCmdResp1+0x14c>)
 8004ba4:	fba4 4303 	umull	r4, r3, r4, r3
 8004ba8:	0a5b      	lsrs	r3, r3, #9
 8004baa:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8004bae:	1e53      	subs	r3, r2, #1
 8004bb0:	2a00      	cmp	r2, #0
 8004bb2:	d062      	beq.n	8004c7a <SDMMC_GetCmdResp1+0xde>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8004bb4:	6b44      	ldr	r4, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004bb6:	461a      	mov	r2, r3
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8004bb8:	f014 0f45 	tst.w	r4, #69	; 0x45
 8004bbc:	d0f7      	beq.n	8004bae <SDMMC_GetCmdResp1+0x12>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004bbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bc0:	f013 0f04 	tst.w	r3, #4
 8004bc4:	d003      	beq.n	8004bce <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004bca:	4618      	mov	r0, r3
 8004bcc:	bd38      	pop	{r3, r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004bce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bd0:	f013 0f01 	tst.w	r3, #1
 8004bd4:	d003      	beq.n	8004bde <SDMMC_GetCmdResp1+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bda:	4618      	mov	r0, r3
 8004bdc:	bd38      	pop	{r3, r4, r5, pc}
 8004bde:	460d      	mov	r5, r1
 8004be0:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004be2:	f7ff ffd5 	bl	8004b90 <SDMMC_GetCommandResponse>
 8004be6:	42a8      	cmp	r0, r5
 8004be8:	d001      	beq.n	8004bee <SDMMC_GetCmdResp1+0x52>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bea:	2001      	movs	r0, #1
 8004bec:	bd38      	pop	{r3, r4, r5, pc}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004bee:	23c5      	movs	r3, #197	; 0xc5
 8004bf0:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7ff ffce 	bl	8004b96 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004bfa:	4b3c      	ldr	r3, [pc, #240]	; (8004cec <SDMMC_GetCmdResp1+0x150>)
 8004bfc:	4003      	ands	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d03e      	beq.n	8004c80 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004c02:	2800      	cmp	r0, #0
 8004c04:	db3e      	blt.n	8004c84 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004c06:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004c0a:	d001      	beq.n	8004c10 <SDMMC_GetCmdResp1+0x74>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004c0c:	2040      	movs	r0, #64	; 0x40
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004c10:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8004c14:	d001      	beq.n	8004c1a <SDMMC_GetCmdResp1+0x7e>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004c16:	2080      	movs	r0, #128	; 0x80
 8004c18:	bd38      	pop	{r3, r4, r5, pc}
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004c1a:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8004c1e:	d134      	bne.n	8004c8a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004c20:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8004c24:	d134      	bne.n	8004c90 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004c26:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8004c2a:	d134      	bne.n	8004c96 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004c2c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8004c30:	d134      	bne.n	8004c9c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004c32:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8004c36:	d134      	bne.n	8004ca2 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004c38:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8004c3c:	d134      	bne.n	8004ca8 <SDMMC_GetCmdResp1+0x10c>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004c3e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8004c42:	d134      	bne.n	8004cae <SDMMC_GetCmdResp1+0x112>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004c44:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8004c48:	d134      	bne.n	8004cb4 <SDMMC_GetCmdResp1+0x118>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004c4a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8004c4e:	d134      	bne.n	8004cba <SDMMC_GetCmdResp1+0x11e>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004c50:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8004c54:	d134      	bne.n	8004cc0 <SDMMC_GetCmdResp1+0x124>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004c56:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8004c5a:	d134      	bne.n	8004cc6 <SDMMC_GetCmdResp1+0x12a>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004c5c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004c60:	d134      	bne.n	8004ccc <SDMMC_GetCmdResp1+0x130>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004c62:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8004c66:	d134      	bne.n	8004cd2 <SDMMC_GetCmdResp1+0x136>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004c68:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8004c6c:	d134      	bne.n	8004cd8 <SDMMC_GetCmdResp1+0x13c>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004c6e:	f010 0f08 	tst.w	r0, #8
 8004c72:	d034      	beq.n	8004cde <SDMMC_GetCmdResp1+0x142>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004c74:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004c78:	bd38      	pop	{r3, r4, r5, pc}
      return SDMMC_ERROR_TIMEOUT;
 8004c7a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8004c80:	2000      	movs	r0, #0
 8004c82:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004c84:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004c88:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004c8a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004c90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c94:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004c96:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004c9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ca0:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004ca2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ca8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004cac:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004cae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CC_ERR;
 8004cb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004cb8:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004cba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004cbe:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004cc0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004cc4:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004cc6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004ccc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004cd0:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004cd2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_ERASE_RESET;
 8004cd8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004cde:	f44f 3080 	mov.w	r0, #65536	; 0x10000
}
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000044 	.word	0x20000044
 8004ce8:	10624dd3 	.word	0x10624dd3
 8004cec:	fdffe008 	.word	0xfdffe008

08004cf0 <SDMMC_GetCmdResp6>:
{
 8004cf0:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cf2:	4b25      	ldr	r3, [pc, #148]	; (8004d88 <SDMMC_GetCmdResp6+0x98>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4c25      	ldr	r4, [pc, #148]	; (8004d8c <SDMMC_GetCmdResp6+0x9c>)
 8004cf8:	fba4 4303 	umull	r4, r3, r4, r3
 8004cfc:	0a5c      	lsrs	r4, r3, #9
 8004cfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d02:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8004d06:	1e5c      	subs	r4, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d036      	beq.n	8004d7a <SDMMC_GetCmdResp6+0x8a>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004d0c:	6b45      	ldr	r5, [r0, #52]	; 0x34
    if (count-- == 0U)
 8004d0e:	4623      	mov	r3, r4
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004d10:	f015 0f45 	tst.w	r5, #69	; 0x45
 8004d14:	d0f7      	beq.n	8004d06 <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d18:	f013 0f04 	tst.w	r3, #4
 8004d1c:	d003      	beq.n	8004d26 <SDMMC_GetCmdResp6+0x36>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004d1e:	2304      	movs	r3, #4
 8004d20:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d22:	4618      	mov	r0, r3
 8004d24:	bd70      	pop	{r4, r5, r6, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004d26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d28:	f013 0f01 	tst.w	r3, #1
 8004d2c:	d003      	beq.n	8004d36 <SDMMC_GetCmdResp6+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004d2e:	2301      	movs	r3, #1
 8004d30:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d32:	4618      	mov	r0, r3
 8004d34:	bd70      	pop	{r4, r5, r6, pc}
 8004d36:	4616      	mov	r6, r2
 8004d38:	460d      	mov	r5, r1
 8004d3a:	4604      	mov	r4, r0
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004d3c:	f7ff ff28 	bl	8004b90 <SDMMC_GetCommandResponse>
 8004d40:	42a8      	cmp	r0, r5
 8004d42:	d001      	beq.n	8004d48 <SDMMC_GetCmdResp6+0x58>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d44:	2001      	movs	r0, #1
 8004d46:	bd70      	pop	{r4, r5, r6, pc}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004d48:	23c5      	movs	r3, #197	; 0xc5
 8004d4a:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f7ff ff21 	bl	8004b96 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004d54:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8004d58:	d005      	beq.n	8004d66 <SDMMC_GetCmdResp6+0x76>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004d5a:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8004d5e:	d006      	beq.n	8004d6e <SDMMC_GetCmdResp6+0x7e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004d60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004d64:	bd70      	pop	{r4, r5, r6, pc}
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004d66:	0c00      	lsrs	r0, r0, #16
 8004d68:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	bd70      	pop	{r4, r5, r6, pc}
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004d6e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004d72:	d005      	beq.n	8004d80 <SDMMC_GetCmdResp6+0x90>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004d74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d78:	bd70      	pop	{r4, r5, r6, pc}
      return SDMMC_ERROR_TIMEOUT;
 8004d7a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004d80:	f44f 3080 	mov.w	r0, #65536	; 0x10000
}
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
 8004d86:	bf00      	nop
 8004d88:	20000044 	.word	0x20000044
 8004d8c:	10624dd3 	.word	0x10624dd3

08004d90 <SDMMC_ConfigData>:
{
 8004d90:	b410      	push	{r4}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004d92:	680b      	ldr	r3, [r1, #0]
 8004d94:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8004d96:	684b      	ldr	r3, [r1, #4]
 8004d98:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8004d9a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004d9c:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8004da0:	688b      	ldr	r3, [r1, #8]
 8004da2:	68cc      	ldr	r4, [r1, #12]
 8004da4:	4323      	orrs	r3, r4
 8004da6:	690c      	ldr	r4, [r1, #16]
 8004da8:	4323      	orrs	r3, r4
 8004daa:	6949      	ldr	r1, [r1, #20]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	4313      	orrs	r3, r2
 8004db0:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004db2:	2000      	movs	r0, #0
 8004db4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <SDMMC_CmdBlockLength>:
{
 8004dba:	b530      	push	{r4, r5, lr}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004dc0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004dc2:	2410      	movs	r4, #16
 8004dc4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004dc6:	2340      	movs	r3, #64	; 0x40
 8004dc8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004dce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004dd4:	a901      	add	r1, sp, #4
 8004dd6:	f7ff fec6 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dde:	4621      	mov	r1, r4
 8004de0:	4628      	mov	r0, r5
 8004de2:	f7ff fedb 	bl	8004b9c <SDMMC_GetCmdResp1>
}
 8004de6:	b007      	add	sp, #28
 8004de8:	bd30      	pop	{r4, r5, pc}

08004dea <SDMMC_CmdSelDesel>:
{
 8004dea:	b530      	push	{r4, r5, lr}
 8004dec:	b087      	sub	sp, #28
 8004dee:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004df0:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004df2:	2407      	movs	r4, #7
 8004df4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004df6:	2340      	movs	r3, #64	; 0x40
 8004df8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e02:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e04:	a901      	add	r1, sp, #4
 8004e06:	f7ff feae 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4628      	mov	r0, r5
 8004e12:	f7ff fec3 	bl	8004b9c <SDMMC_GetCmdResp1>
}
 8004e16:	b007      	add	sp, #28
 8004e18:	bd30      	pop	{r4, r5, pc}

08004e1a <SDMMC_CmdGoIdleState>:
{
 8004e1a:	b510      	push	{r4, lr}
 8004e1c:	b086      	sub	sp, #24
 8004e1e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004e24:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004e26:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e28:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e2e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e30:	a901      	add	r1, sp, #4
 8004e32:	f7ff fe98 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff fdd0 	bl	80049dc <SDMMC_GetCmdError>
}
 8004e3c:	b006      	add	sp, #24
 8004e3e:	bd10      	pop	{r4, pc}

08004e40 <SDMMC_CmdOperCond>:
{
 8004e40:	b510      	push	{r4, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004e46:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004e4a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e50:	2340      	movs	r3, #64	; 0x40
 8004e52:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e54:	2300      	movs	r3, #0
 8004e56:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e5c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e5e:	a901      	add	r1, sp, #4
 8004e60:	f7ff fe81 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004e64:	4620      	mov	r0, r4
 8004e66:	f7ff fe25 	bl	8004ab4 <SDMMC_GetCmdResp7>
}
 8004e6a:	b006      	add	sp, #24
 8004e6c:	bd10      	pop	{r4, pc}

08004e6e <SDMMC_CmdAppCommand>:
{
 8004e6e:	b530      	push	{r4, r5, lr}
 8004e70:	b087      	sub	sp, #28
 8004e72:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004e74:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004e76:	2437      	movs	r4, #55	; 0x37
 8004e78:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e86:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e88:	a901      	add	r1, sp, #4
 8004e8a:	f7ff fe6c 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4621      	mov	r1, r4
 8004e94:	4628      	mov	r0, r5
 8004e96:	f7ff fe81 	bl	8004b9c <SDMMC_GetCmdResp1>
}
 8004e9a:	b007      	add	sp, #28
 8004e9c:	bd30      	pop	{r4, r5, pc}

08004e9e <SDMMC_CmdAppOperCommand>:
{
 8004e9e:	b510      	push	{r4, lr}
 8004ea0:	b086      	sub	sp, #24
 8004ea2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004ea4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004ea8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004eac:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004eae:	2329      	movs	r3, #41	; 0x29
 8004eb0:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004eb2:	2340      	movs	r3, #64	; 0x40
 8004eb4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ebe:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ec0:	a901      	add	r1, sp, #4
 8004ec2:	f7ff fe50 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f7ff fdd0 	bl	8004a6c <SDMMC_GetCmdResp3>
}
 8004ecc:	b006      	add	sp, #24
 8004ece:	bd10      	pop	{r4, pc}

08004ed0 <SDMMC_CmdBusWidth>:
{
 8004ed0:	b530      	push	{r4, r5, lr}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004ed6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004ed8:	2406      	movs	r4, #6
 8004eda:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004edc:	2340      	movs	r3, #64	; 0x40
 8004ede:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ee8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004eea:	a901      	add	r1, sp, #4
 8004eec:	f7ff fe3b 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f7ff fe50 	bl	8004b9c <SDMMC_GetCmdResp1>
}
 8004efc:	b007      	add	sp, #28
 8004efe:	bd30      	pop	{r4, r5, pc}

08004f00 <SDMMC_CmdSendSCR>:
{
 8004f00:	b530      	push	{r4, r5, lr}
 8004f02:	b087      	sub	sp, #28
 8004f04:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004f0a:	2433      	movs	r4, #51	; 0x33
 8004f0c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f0e:	2240      	movs	r2, #64	; 0x40
 8004f10:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f12:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f18:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f1a:	a901      	add	r1, sp, #4
 8004f1c:	f7ff fe23 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4621      	mov	r1, r4
 8004f26:	4628      	mov	r0, r5
 8004f28:	f7ff fe38 	bl	8004b9c <SDMMC_GetCmdResp1>
}
 8004f2c:	b007      	add	sp, #28
 8004f2e:	bd30      	pop	{r4, r5, pc}

08004f30 <SDMMC_CmdSendCID>:
{
 8004f30:	b510      	push	{r4, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004f3e:	22c0      	movs	r2, #192	; 0xc0
 8004f40:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f42:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f48:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f4a:	a901      	add	r1, sp, #4
 8004f4c:	f7ff fe0b 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004f50:	4620      	mov	r0, r4
 8004f52:	f7ff fd5f 	bl	8004a14 <SDMMC_GetCmdResp2>
}
 8004f56:	b006      	add	sp, #24
 8004f58:	bd10      	pop	{r4, pc}

08004f5a <SDMMC_CmdSendCSD>:
{
 8004f5a:	b510      	push	{r4, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004f60:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f62:	2309      	movs	r3, #9
 8004f64:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004f66:	23c0      	movs	r3, #192	; 0xc0
 8004f68:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f72:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f74:	a901      	add	r1, sp, #4
 8004f76:	f7ff fdf6 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f7ff fd4a 	bl	8004a14 <SDMMC_GetCmdResp2>
}
 8004f80:	b006      	add	sp, #24
 8004f82:	bd10      	pop	{r4, pc}

08004f84 <SDMMC_CmdSetRelAdd>:
{
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	4605      	mov	r5, r0
 8004f8a:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004f90:	2403      	movs	r4, #3
 8004f92:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004f94:	2240      	movs	r2, #64	; 0x40
 8004f96:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f98:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f9e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004fa0:	a901      	add	r1, sp, #4
 8004fa2:	f7ff fde0 	bl	8004b66 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	4621      	mov	r1, r4
 8004faa:	4628      	mov	r0, r5
 8004fac:	f7ff fea0 	bl	8004cf0 <SDMMC_GetCmdResp6>
}
 8004fb0:	b006      	add	sp, #24
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}

08004fb4 <__libc_init_array>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4e0d      	ldr	r6, [pc, #52]	; (8004fec <__libc_init_array+0x38>)
 8004fb8:	4c0d      	ldr	r4, [pc, #52]	; (8004ff0 <__libc_init_array+0x3c>)
 8004fba:	1ba4      	subs	r4, r4, r6
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	2500      	movs	r5, #0
 8004fc0:	42a5      	cmp	r5, r4
 8004fc2:	d109      	bne.n	8004fd8 <__libc_init_array+0x24>
 8004fc4:	4e0b      	ldr	r6, [pc, #44]	; (8004ff4 <__libc_init_array+0x40>)
 8004fc6:	4c0c      	ldr	r4, [pc, #48]	; (8004ff8 <__libc_init_array+0x44>)
 8004fc8:	f000 f818 	bl	8004ffc <_init>
 8004fcc:	1ba4      	subs	r4, r4, r6
 8004fce:	10a4      	asrs	r4, r4, #2
 8004fd0:	2500      	movs	r5, #0
 8004fd2:	42a5      	cmp	r5, r4
 8004fd4:	d105      	bne.n	8004fe2 <__libc_init_array+0x2e>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fdc:	4798      	blx	r3
 8004fde:	3501      	adds	r5, #1
 8004fe0:	e7ee      	b.n	8004fc0 <__libc_init_array+0xc>
 8004fe2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fe6:	4798      	blx	r3
 8004fe8:	3501      	adds	r5, #1
 8004fea:	e7f2      	b.n	8004fd2 <__libc_init_array+0x1e>
 8004fec:	08005328 	.word	0x08005328
 8004ff0:	08005328 	.word	0x08005328
 8004ff4:	08005328 	.word	0x08005328
 8004ff8:	0800532c 	.word	0x0800532c

08004ffc <_init>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr

08005008 <_fini>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr
