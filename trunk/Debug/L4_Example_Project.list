
L4_Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dcc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08003f60  08003f60  00013f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080041e4  080041e4  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080041f0  080041f0  000141f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000040  20000000  080041f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  00020040  2**0
                  CONTENTS
  8 .bss          000005e4  20000040  20000040  00020040  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000624  20000624  00020040  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 11 .debug_info   00028c36  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000053ab  00000000  00000000  00048ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000012d0  00000000  00000000  0004e058  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001180  00000000  00000000  0004f328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c125  00000000  00000000  000504a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000670c  00000000  00000000  0005c5cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00062cd9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002dc0  00000000  00000000  00062d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000b021  00000000  00000000  00065b18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003f48 	.word	0x08003f48

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	08003f48 	.word	0x08003f48

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
 *
 * @details Initializes applications.
 * @details Call system application to execute active applications.
 ****************************************************************************/
int  main()
{
 80004e4:	b508      	push	{r3, lr}
	/* Call to initial specific platform configuration */
    systemPreConfiguration();
 80004e6:	f000 fe3f 	bl	8001168 <systemPreConfiguration>

    /* HAL TEST */
    GPIOInit();
 80004ea:	f000 fc37 	bl	8000d5c <GPIOInit>
    stm32L4Init();
 80004ee:	f000 fe25 	bl	800113c <stm32L4Init>

    interruptsInit();
 80004f2:	f000 fc5d 	bl	8000db0 <interruptsInit>
    interruptsStart();
 80004f6:	f000 fc73 	bl	8000de0 <interruptsStart>

    spiInit();
 80004fa:	f000 ff17 	bl	800132c <spiInit>
    spiStart();
 80004fe:	f000 ff5d 	bl	80013bc <spiStart>

    uartInit();
 8000502:	f001 f861 	bl	80015c8 <uartInit>
    uartStart();
 8000506:	f001 f899 	bl	800163c <uartStart>

    FlashInit();
 800050a:	f000 fb2b 	bl	8000b64 <FlashInit>
    SwTimerInit();
 800050e:	f000 fa91 	bl	8000a34 <SwTimerInit>
    /*\ HAL TEST */

	/* Applications Initialization */
    SchedulerInit();
 8000512:	f000 f939 	bl	8000788 <SchedulerInit>

    while (TRUE)
    {
        SchedulerNextSystemProcess();
 8000516:	f000 f9e5 	bl	80008e4 <SchedulerNextSystemProcess>
 800051a:	e7fc      	b.n	8000516 <main+0x32>

0800051c <initSystemApp>:
 *
 * @details Initializes HREG and SREG layers.
 * @details Initializes all applications
 ****************************************************************************/
void initSystemApp( void )
{
 800051c:	b508      	push	{r3, lr}
    requestPowerState = POWER_STATE_NO_REQUEST;
 800051e:	2200      	movs	r2, #0
 8000520:	4b02      	ldr	r3, [pc, #8]	; (800052c <initSystemApp+0x10>)
 8000522:	701a      	strb	r2, [r3, #0]

    initSregAll();    /* Initialise the SREG layer */
 8000524:	f000 f8bc 	bl	80006a0 <initSregAll>
 8000528:	bd08      	pop	{r3, pc}
 800052a:	bf00      	nop
 800052c:	20000074 	.word	0x20000074

08000530 <callSystemApp>:
 *
 * @details depending on current state, executes active applications.
 * @details calls system middleware task
 ****************************************************************************/
void callSystemApp( void )
{
 8000530:	b508      	push	{r3, lr}
    uint8_t systemState;

    /* HAL TEST */
    // GPIO
    GPIOWritePort(GPIO_LED_1, GPIO_TOGGLE);
 8000532:	2102      	movs	r1, #2
 8000534:	2000      	movs	r0, #0
 8000536:	f000 fb6d 	bl	8000c14 <GPIOWritePort>
    /* END HAL TEST */

    /* System state machine */
    systemState = READ_SREG(SREG_SYSTEM_STATE);
 800053a:	2004      	movs	r0, #4
 800053c:	f000 f8cf 	bl	80006de <readSreg>
 8000540:	b2c1      	uxtb	r1, r0
    //systemState = SYSTEM_APP_INIT_SHELL;
    switch ( systemState )
 8000542:	2904      	cmp	r1, #4
 8000544:	d82e      	bhi.n	80005a4 <callSystemApp+0x74>
 8000546:	e8df f001 	tbb	[pc, r1]
 800054a:	032c      	.short	0x032c
 800054c:	2d0e      	.short	0x2d0e
 800054e:	05          	.byte	0x05
 800054f:	00          	.byte	0x00
			break;
        
		case SYSTEM_APP_INIT:
			/* Application init dispather */
			
			systemState = SYSTEM_APP_ON;
 8000550:	2102      	movs	r1, #2
            break;
 8000552:	e027      	b.n	80005a4 <callSystemApp+0x74>

        case SYSTEM_APP_SLEPT:
			/* Application sleep dispather */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_WAKE_UP ) 
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <callSystemApp+0x7c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b02      	cmp	r3, #2
 800055a:	d123      	bne.n	80005a4 <callSystemApp+0x74>
            {
				/* Wake up */
                systemState = SYSTEM_APP_ON;
                requestPowerState = POWER_STATE_NO_REQUEST;
 800055c:	2100      	movs	r1, #0
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <callSystemApp+0x7c>)
 8000560:	7011      	strb	r1, [r2, #0]
                systemState = SYSTEM_APP_ON;
 8000562:	4619      	mov	r1, r3
 8000564:	e01e      	b.n	80005a4 <callSystemApp+0x74>

        case SYSTEM_APP_ON:
			/* Application dispatcher */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_START_SHUTDOWN )
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <callSystemApp+0x7c>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d007      	beq.n	800057e <callSystemApp+0x4e>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
                
                /* Power off */
                systemState = SYSTEM_APP_POWER_OFF;
            }
            else if ( requestPowerState == POWER_STATE_GO_TO_SLEEP )
 800056e:	2b03      	cmp	r3, #3
 8000570:	d00b      	beq.n	800058a <callSystemApp+0x5a>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
                
                /* Slept */
                systemState = SYSTEM_APP_SLEPT;
            }
            else if ( requestPowerState == POWER_STATE_REBOOT )
 8000572:	2b04      	cmp	r3, #4
 8000574:	d00f      	beq.n	8000596 <callSystemApp+0x66>
                systemState = SYSTEM_APP_REBOOT;
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
            }
            
            /* Reset power state request */
            requestPowerState = POWER_STATE_NO_REQUEST;
 8000576:	2200      	movs	r2, #0
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <callSystemApp+0x7c>)
 800057a:	701a      	strb	r2, [r3, #0]
            break;
 800057c:	e012      	b.n	80005a4 <callSystemApp+0x74>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
 800057e:	210a      	movs	r1, #10
 8000580:	2005      	movs	r0, #5
 8000582:	f000 f8c7 	bl	8000714 <writeSreg>
                systemState = SYSTEM_APP_POWER_OFF;
 8000586:	2103      	movs	r1, #3
 8000588:	e7f5      	b.n	8000576 <callSystemApp+0x46>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
 800058a:	2101      	movs	r1, #1
 800058c:	2005      	movs	r0, #5
 800058e:	f000 f8c1 	bl	8000714 <writeSreg>
                systemState = SYSTEM_APP_SLEPT;
 8000592:	2104      	movs	r1, #4
 8000594:	e7ef      	b.n	8000576 <callSystemApp+0x46>
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
 8000596:	2103      	movs	r1, #3
 8000598:	2005      	movs	r0, #5
 800059a:	f000 f8bb 	bl	8000714 <writeSreg>
                systemState = SYSTEM_APP_REBOOT;
 800059e:	2105      	movs	r1, #5
 80005a0:	e7e9      	b.n	8000576 <callSystemApp+0x46>
			systemState = SYSTEM_APP_INIT;
 80005a2:	2101      	movs	r1, #1
			break;
        
    }
    
    /* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
 80005a4:	2004      	movs	r0, #4
 80005a6:	f000 f8b5 	bl	8000714 <writeSreg>
 80005aa:	bd08      	pop	{r3, pc}
 80005ac:	20000074 	.word	0x20000074

080005b0 <sregWrite>:
eError sregWrite(SREG sreg, uint32_t value)
{
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 80005b0:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <sregWrite+0x38>)
 80005b2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80005b6:	7852      	ldrb	r2, [r2, #1]
	switch(SREGInstanceMap[sreg].type)
 80005b8:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d008      	beq.n	80005d2 <sregWrite+0x22>
 80005c0:	b11b      	cbz	r3, 80005ca <sregWrite+0x1a>
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d00a      	beq.n	80005dc <sregWrite+0x2c>
			break;
		case SREG_UINT32:
			SREG32Context[index] = (uint32_t)value;
			break;
		default:
			success = RET_INVALID_PARAMETER;
 80005c6:	2005      	movs	r0, #5
			break;
	}

	return success;
}
 80005c8:	4770      	bx	lr
			SREG8Context[index] = (uint8_t)value;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <sregWrite+0x3c>)
 80005cc:	5499      	strb	r1, [r3, r2]
	eError success = RET_OK;
 80005ce:	2000      	movs	r0, #0
			break;
 80005d0:	4770      	bx	lr
			SREG16Context[index] = (uint16_t)value;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <sregWrite+0x40>)
 80005d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	eError success = RET_OK;
 80005d8:	2000      	movs	r0, #0
			break;
 80005da:	4770      	bx	lr
			SREG32Context[index] = (uint32_t)value;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <sregWrite+0x44>)
 80005de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eError success = RET_OK;
 80005e2:	2000      	movs	r0, #0
			break;
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	08003f90 	.word	0x08003f90
 80005ec:	20000078 	.word	0x20000078
 80005f0:	20000088 	.word	0x20000088
 80005f4:	20000080 	.word	0x20000080

080005f8 <sregReadParam>:
 * @param	sreg
 * @param	sregParam struct
 * @return  RET_OK or RET_FAIL
 ****************************************************************************/
eError sregReadParam(SREG sreg, tSREGParam *sregParam)
{
 80005f8:	b430      	push	{r4, r5}
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 80005fa:	4a22      	ldr	r2, [pc, #136]	; (8000684 <sregReadParam+0x8c>)
 80005fc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8000600:	785b      	ldrb	r3, [r3, #1]
	switch(SREGInstanceMap[sreg].type)
 8000602:	f812 2020 	ldrb.w	r2, [r2, r0, lsl #2]
 8000606:	2a01      	cmp	r2, #1
 8000608:	d014      	beq.n	8000634 <sregReadParam+0x3c>
 800060a:	b11a      	cbz	r2, 8000614 <sregReadParam+0x1c>
 800060c:	2a02      	cmp	r2, #2
 800060e:	d025      	beq.n	800065c <sregReadParam+0x64>
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
			break;
		default:
			success = RET_INVALID_PARAMETER;
 8000610:	2005      	movs	r0, #5
 8000612:	e00d      	b.n	8000630 <sregReadParam+0x38>
			sregParam->Data = (uint32_t)SREG8Context[index];
 8000614:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <sregReadParam+0x90>)
 8000616:	5cd2      	ldrb	r2, [r2, r3]
 8000618:	600a      	str	r2, [r1, #0]
			sregParam->Init = (uint32_t)(SREG8InstanceMap[index].Init);
 800061a:	481c      	ldr	r0, [pc, #112]	; (800068c <sregReadParam+0x94>)
 800061c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000620:	18c2      	adds	r2, r0, r3
 8000622:	7894      	ldrb	r4, [r2, #2]
 8000624:	60cc      	str	r4, [r1, #12]
			sregParam->Max  = (uint32_t)(SREG8InstanceMap[index].Max);
 8000626:	5cc3      	ldrb	r3, [r0, r3]
 8000628:	604b      	str	r3, [r1, #4]
			sregParam->Min  = (uint32_t)(SREG8InstanceMap[index].Min);
 800062a:	7853      	ldrb	r3, [r2, #1]
 800062c:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 800062e:	2000      	movs	r0, #0
			break;
	}

	return success;
}
 8000630:	bc30      	pop	{r4, r5}
 8000632:	4770      	bx	lr
			sregParam->Data  = (uint32_t)SREG16Context[index];
 8000634:	4a16      	ldr	r2, [pc, #88]	; (8000690 <sregReadParam+0x98>)
 8000636:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800063a:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG16InstanceMap[index].Init);
 800063c:	4a15      	ldr	r2, [pc, #84]	; (8000694 <sregReadParam+0x9c>)
 800063e:	0058      	lsls	r0, r3, #1
 8000640:	18c5      	adds	r5, r0, r3
 8000642:	006c      	lsls	r4, r5, #1
 8000644:	1915      	adds	r5, r2, r4
 8000646:	88ad      	ldrh	r5, [r5, #4]
 8000648:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG16InstanceMap[index].Max);
 800064a:	5b14      	ldrh	r4, [r2, r4]
 800064c:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG16InstanceMap[index].Min);
 800064e:	4403      	add	r3, r0
 8000650:	0058      	lsls	r0, r3, #1
 8000652:	4402      	add	r2, r0
 8000654:	8853      	ldrh	r3, [r2, #2]
 8000656:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000658:	2000      	movs	r0, #0
			break;
 800065a:	e7e9      	b.n	8000630 <sregReadParam+0x38>
			sregParam->Data  = (uint32_t)SREG32Context[index];
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <sregReadParam+0xa0>)
 800065e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000662:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <sregReadParam+0xa4>)
 8000666:	0058      	lsls	r0, r3, #1
 8000668:	18c5      	adds	r5, r0, r3
 800066a:	00ac      	lsls	r4, r5, #2
 800066c:	1915      	adds	r5, r2, r4
 800066e:	68ad      	ldr	r5, [r5, #8]
 8000670:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
 8000672:	5914      	ldr	r4, [r2, r4]
 8000674:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
 8000676:	4403      	add	r3, r0
 8000678:	0098      	lsls	r0, r3, #2
 800067a:	4402      	add	r2, r0
 800067c:	6853      	ldr	r3, [r2, #4]
 800067e:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000680:	2000      	movs	r0, #0
			break;
 8000682:	e7d5      	b.n	8000630 <sregReadParam+0x38>
 8000684:	08003f90 	.word	0x08003f90
 8000688:	20000078 	.word	0x20000078
 800068c:	08003f78 	.word	0x08003f78
 8000690:	20000088 	.word	0x20000088
 8000694:	08003f60 	.word	0x08003f60
 8000698:	20000080 	.word	0x20000080
 800069c:	08003f60 	.word	0x08003f60

080006a0 <initSregAll>:
{
 80006a0:	b510      	push	{r4, lr}
 80006a2:	b084      	sub	sp, #16
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 80006a4:	2400      	movs	r4, #0
 80006a6:	e009      	b.n	80006bc <initSregAll+0x1c>
		sregReadParam(sreg, &sregParam);
 80006a8:	4669      	mov	r1, sp
 80006aa:	4620      	mov	r0, r4
 80006ac:	f7ff ffa4 	bl	80005f8 <sregReadParam>
		sregWrite(sreg, sregParam.Init);
 80006b0:	9903      	ldr	r1, [sp, #12]
 80006b2:	4620      	mov	r0, r4
 80006b4:	f7ff ff7c 	bl	80005b0 <sregWrite>
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 80006b8:	3401      	adds	r4, #1
 80006ba:	b2e4      	uxtb	r4, r4
 80006bc:	2c08      	cmp	r4, #8
 80006be:	d9f3      	bls.n	80006a8 <initSregAll+0x8>
}
 80006c0:	b004      	add	sp, #16
 80006c2:	bd10      	pop	{r4, pc}

080006c4 <readSregTableStd>:
{
 80006c4:	b500      	push	{lr}
 80006c6:	b085      	sub	sp, #20
	success = sregReadParam(sreg, &sregParam);
 80006c8:	4669      	mov	r1, sp
 80006ca:	f7ff ff95 	bl	80005f8 <sregReadParam>
	if ( success == RET_OK )
 80006ce:	b120      	cbz	r0, 80006da <readSregTableStd+0x16>
    uint32_t ret_data = 0xffffffff;
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80006d4:	b005      	add	sp, #20
 80006d6:	f85d fb04 	ldr.w	pc, [sp], #4
		ret_data = sregParam.Data;
 80006da:	9800      	ldr	r0, [sp, #0]
 80006dc:	e7fa      	b.n	80006d4 <readSregTableStd+0x10>

080006de <readSreg>:
{
 80006de:	b508      	push	{r3, lr}
	return readSregTableStd(sreg);
 80006e0:	f7ff fff0 	bl	80006c4 <readSregTableStd>
}
 80006e4:	bd08      	pop	{r3, pc}

080006e6 <writeSregTableStd>:
{
 80006e6:	b570      	push	{r4, r5, r6, lr}
 80006e8:	b084      	sub	sp, #16
 80006ea:	4606      	mov	r6, r0
 80006ec:	460d      	mov	r5, r1
	result = sregReadParam(sreg, &sregParam);
 80006ee:	4669      	mov	r1, sp
 80006f0:	f7ff ff82 	bl	80005f8 <sregReadParam>
 80006f4:	4604      	mov	r4, r0
	if ( value > sregParam.Max )
 80006f6:	9901      	ldr	r1, [sp, #4]
 80006f8:	42a9      	cmp	r1, r5
 80006fa:	d303      	bcc.n	8000704 <writeSregTableStd+0x1e>
	else if ( value < sregParam.Min )
 80006fc:	9902      	ldr	r1, [sp, #8]
 80006fe:	428d      	cmp	r5, r1
 8000700:	d300      	bcc.n	8000704 <writeSregTableStd+0x1e>
 8000702:	4629      	mov	r1, r5
	if ( result == RET_OK )
 8000704:	b114      	cbz	r4, 800070c <writeSregTableStd+0x26>
}
 8000706:	4620      	mov	r0, r4
 8000708:	b004      	add	sp, #16
 800070a:	bd70      	pop	{r4, r5, r6, pc}
		sregWrite(sreg, value);
 800070c:	4630      	mov	r0, r6
 800070e:	f7ff ff4f 	bl	80005b0 <sregWrite>
 8000712:	e7f8      	b.n	8000706 <writeSregTableStd+0x20>

08000714 <writeSreg>:
{
 8000714:	b508      	push	{r3, lr}
	return writeSregTableStd( sreg, value );
 8000716:	f7ff ffe6 	bl	80006e6 <writeSregTableStd>
}
 800071a:	bd08      	pop	{r3, pc}

0800071c <SchedulerResetProcessTable>:
 ****************************************************************************/
void SchedulerResetProcessTable(void)
{
	uint8_t i;

	ptrTask	= 0;
 800071c:	2300      	movs	r3, #0
 800071e:	4a16      	ldr	r2, [pc, #88]	; (8000778 <SchedulerResetProcessTable+0x5c>)
 8000720:	7013      	strb	r3, [r2, #0]

 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000722:	2b01      	cmp	r3, #1
 8000724:	d826      	bhi.n	8000774 <SchedulerResetProcessTable+0x58>
{
 8000726:	b430      	push	{r4, r5}
 	{
		schedulerProcess[i].uiTimeProcessCounter	= 0;
 8000728:	4914      	ldr	r1, [pc, #80]	; (800077c <SchedulerResetProcessTable+0x60>)
 800072a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800072e:	f36f 020d 	bfc	r2, #0, #14
 8000732:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		schedulerProcess[i].bEnabledSystemTask	= SchedulerInstanceMap[i].initState;
 8000736:	005a      	lsls	r2, r3, #1
 8000738:	18d0      	adds	r0, r2, r3
 800073a:	0084      	lsls	r4, r0, #2
 800073c:	4810      	ldr	r0, [pc, #64]	; (8000780 <SchedulerResetProcessTable+0x64>)
 800073e:	4420      	add	r0, r4
 8000740:	7a84      	ldrb	r4, [r0, #10]
 8000742:	4411      	add	r1, r2
 8000744:	7848      	ldrb	r0, [r1, #1]
 8000746:	f364 1086 	bfi	r0, r4, #6, #1
		schedulerProcess[i].bEnabledUrgentSystemTask = FALSE;
 800074a:	f36f 10c7 	bfc	r0, #7, #1
 800074e:	7048      	strb	r0, [r1, #1]

		schedulerContext[i].maxDelayProcessCtn = 0;
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <SchedulerResetProcessTable+0x68>)
 8000752:	18d0      	adds	r0, r2, r3
 8000754:	00c5      	lsls	r5, r0, #3
 8000756:	194c      	adds	r4, r1, r5
 8000758:	2000      	movs	r0, #0
 800075a:	81a0      	strh	r0, [r4, #12]
		schedulerContext[i].maximumTaskTime_us = 0;
 800075c:	60a0      	str	r0, [r4, #8]
		schedulerContext[i].averageTaskTime_us = 0;
 800075e:	5148      	str	r0, [r1, r5]
		schedulerContext[i].currentTaskTime_us = 0;
 8000760:	6060      	str	r0, [r4, #4]
		schedulerContext[i].cntTaskTime = 0;
 8000762:	6120      	str	r0, [r4, #16]
		schedulerContext[i].userEnabled = TRUE;
 8000764:	2201      	movs	r2, #1
 8000766:	7562      	strb	r2, [r4, #21]
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000768:	4413      	add	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b01      	cmp	r3, #1
 800076e:	d9db      	bls.n	8000728 <SchedulerResetProcessTable+0xc>
 	}
}
 8000770:	bc30      	pop	{r4, r5}
 8000772:	4770      	bx	lr
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	200000bc 	.word	0x200000bc
 800077c:	200000c0 	.word	0x200000c0
 8000780:	08003fb4 	.word	0x08003fb4
 8000784:	2000008c 	.word	0x2000008c

08000788 <SchedulerInit>:
{
 8000788:	b510      	push	{r4, lr}
	SchedulerResetProcessTable();
 800078a:	f7ff ffc7 	bl	800071c <SchedulerResetProcessTable>
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 800078e:	2400      	movs	r4, #0
 8000790:	e001      	b.n	8000796 <SchedulerInit+0xe>
 8000792:	3401      	adds	r4, #1
 8000794:	b2e4      	uxtb	r4, r4
 8000796:	2c01      	cmp	r4, #1
 8000798:	d808      	bhi.n	80007ac <SchedulerInit+0x24>
		if(SchedulerInstanceMap[i].InitProcess != NULL)
 800079a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800079e:	0093      	lsls	r3, r2, #2
 80007a0:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <SchedulerInit+0x3c>)
 80007a2:	58d3      	ldr	r3, [r2, r3]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0f4      	beq.n	8000792 <SchedulerInit+0xa>
			(*(SchedulerInstanceMap[i].InitProcess))();
 80007a8:	4798      	blx	r3
 80007aa:	e7f2      	b.n	8000792 <SchedulerInit+0xa>
    systemGetCLkFreq(&ticks_per_us);
 80007ac:	4c06      	ldr	r4, [pc, #24]	; (80007c8 <SchedulerInit+0x40>)
 80007ae:	4620      	mov	r0, r4
 80007b0:	f000 fcd3 	bl	800115a <systemGetCLkFreq>
    ticks_per_us /= 1000000;
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <SchedulerInit+0x44>)
 80007b8:	fba2 2303 	umull	r2, r3, r2, r3
 80007bc:	0c9b      	lsrs	r3, r3, #18
 80007be:	6023      	str	r3, [r4, #0]
 80007c0:	bd10      	pop	{r4, pc}
 80007c2:	bf00      	nop
 80007c4:	08003fb4 	.word	0x08003fb4
 80007c8:	20000088 	.word	0x20000088
 80007cc:	431bde83 	.word	0x431bde83

080007d0 <SchedulerProcessesAutoEnable>:
 ****************************************************************************/
void SchedulerProcessesAutoEnable(void)
{
	uint8_t i;

	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d825      	bhi.n	8000822 <SchedulerProcessesAutoEnable+0x52>
{
 80007d6:	b430      	push	{r4, r5}
 80007d8:	e003      	b.n	80007e2 <SchedulerProcessesAutoEnable+0x12>
	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80007da:	3301      	adds	r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d81d      	bhi.n	800081e <SchedulerProcessesAutoEnable+0x4e>
	{
		schedulerProcess[i].uiTimeProcessCounter++;
 80007e2:	4810      	ldr	r0, [pc, #64]	; (8000824 <SchedulerProcessesAutoEnable+0x54>)
 80007e4:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80007e8:	f3c2 010d 	ubfx	r1, r2, #0, #14
 80007ec:	3101      	adds	r1, #1
 80007ee:	f361 020d 	bfi	r2, r1, #0, #14
 80007f2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

		// If currentTaskTime it's enable, update 1000uS=1mS
		if (schedulerContext[i].taskActive == TRUE && schedulerContext[i].userEnabled == TRUE )
 80007f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80007fa:	00d1      	lsls	r1, r2, #3
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <SchedulerProcessesAutoEnable+0x58>)
 80007fe:	440a      	add	r2, r1
 8000800:	7d12      	ldrb	r2, [r2, #20]
 8000802:	2a00      	cmp	r2, #0
 8000804:	d0e9      	beq.n	80007da <SchedulerProcessesAutoEnable+0xa>
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <SchedulerProcessesAutoEnable+0x58>)
 8000808:	440a      	add	r2, r1
 800080a:	7d52      	ldrb	r2, [r2, #21]
 800080c:	2a00      	cmp	r2, #0
 800080e:	d0e4      	beq.n	80007da <SchedulerProcessesAutoEnable+0xa>
		{
			schedulerContext[i].currentTaskTime_us += 1000;
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <SchedulerProcessesAutoEnable+0x58>)
 8000812:	4401      	add	r1, r0
 8000814:	684a      	ldr	r2, [r1, #4]
 8000816:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 800081a:	604a      	str	r2, [r1, #4]
 800081c:	e7dd      	b.n	80007da <SchedulerProcessesAutoEnable+0xa>
		}
	}
}
 800081e:	bc30      	pop	{r4, r5}
 8000820:	4770      	bx	lr
 8000822:	4770      	bx	lr
 8000824:	200000c0 	.word	0x200000c0
 8000828:	2000008c 	.word	0x2000008c

0800082c <SchedulerUpdateTaskTime>:
 * @brief  	Update average task time, maximum task time
 * @param   process, initTime, finalTime
 * @return  none
 ****************************************************************************/
void SchedulerUpdateTaskTime(int32_t initTimeTaskScheduler, int32_t finalTimeTaskScheduler)
{
 800082c:	b4f0      	push	{r4, r5, r6, r7}
	uint64_t averageTaskTemp;
	schedulerContext[ptrTask].currentTaskTime_us += ((initTimeTaskScheduler - finalTimeTaskScheduler)/(int32_t)(ticks_per_us));
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <SchedulerUpdateTaskTime+0x48>)
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	1a41      	subs	r1, r0, r1
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <SchedulerUpdateTaskTime+0x4c>)
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	fb91 f1f0 	sdiv	r1, r1, r0
 800083c:	4e0f      	ldr	r6, [pc, #60]	; (800087c <SchedulerUpdateTaskTime+0x50>)
 800083e:	0053      	lsls	r3, r2, #1
 8000840:	4413      	add	r3, r2
 8000842:	00dd      	lsls	r5, r3, #3
 8000844:	1974      	adds	r4, r6, r5
 8000846:	6863      	ldr	r3, [r4, #4]
 8000848:	4419      	add	r1, r3
 800084a:	6061      	str	r1, [r4, #4]
	schedulerContext[ptrTask].cntTaskTime %= MAX_TASK_TIME_CNT;
 800084c:	6923      	ldr	r3, [r4, #16]
 800084e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000852:	bf28      	it	cs
 8000854:	3301      	addcs	r3, #1
	schedulerContext[ptrTask].cntTaskTime++;
 8000856:	1c58      	adds	r0, r3, #1
 8000858:	6120      	str	r0, [r4, #16]

	/* Calculate the average task time */
	averageTaskTemp = (uint64_t)(schedulerContext[ptrTask].averageTaskTime_us*(schedulerContext[ptrTask].cntTaskTime-1));
 800085a:	5977      	ldr	r7, [r6, r5]
	schedulerContext[ptrTask].averageTaskTime_us = (uint32_t)(averageTaskTemp + schedulerContext[ptrTask].currentTaskTime_us) / schedulerContext[ptrTask].cntTaskTime;
 800085c:	fb07 1303 	mla	r3, r7, r3, r1
 8000860:	fbb3 f3f0 	udiv	r3, r3, r0
 8000864:	5173      	str	r3, [r6, r5]

    /* If current Task Time is higher than maximum, update maximum task time */
    if ( schedulerContext[ptrTask].currentTaskTime_us > schedulerContext[ptrTask].maximumTaskTime_us )
 8000866:	68a3      	ldr	r3, [r4, #8]
 8000868:	4299      	cmp	r1, r3
 800086a:	d900      	bls.n	800086e <SchedulerUpdateTaskTime+0x42>
    {
    	schedulerContext[ptrTask].maximumTaskTime_us = schedulerContext[ptrTask].currentTaskTime_us;
 800086c:	60a1      	str	r1, [r4, #8]
    }

}
 800086e:	bcf0      	pop	{r4, r5, r6, r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	200000bc 	.word	0x200000bc
 8000878:	20000088 	.word	0x20000088
 800087c:	2000008c 	.word	0x2000008c

08000880 <SchedulerExecuteSystemProcess>:
{
 8000880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	schedulerContext[ptrTask].currentTaskTime_us = 0;
 8000884:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80008e0 <SchedulerExecuteSystemProcess+0x60>
 8000888:	f898 1000 	ldrb.w	r1, [r8]
 800088c:	4c11      	ldr	r4, [pc, #68]	; (80008d4 <SchedulerExecuteSystemProcess+0x54>)
 800088e:	004b      	lsls	r3, r1, #1
 8000890:	1858      	adds	r0, r3, r1
 8000892:	00c2      	lsls	r2, r0, #3
 8000894:	4422      	add	r2, r4
 8000896:	2700      	movs	r7, #0
 8000898:	6057      	str	r7, [r2, #4]
	initTimeTaskScheduler =  SYSTEM_TICK;
 800089a:	4e0f      	ldr	r6, [pc, #60]	; (80008d8 <SchedulerExecuteSystemProcess+0x58>)
 800089c:	68b5      	ldr	r5, [r6, #8]
	schedulerContext[ptrTask].taskActive = TRUE;
 800089e:	2001      	movs	r0, #1
 80008a0:	7510      	strb	r0, [r2, #20]
    (*(SchedulerInstanceMap[ptrTask].CallProcess))();
 80008a2:	440b      	add	r3, r1
 80008a4:	009a      	lsls	r2, r3, #2
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <SchedulerExecuteSystemProcess+0x5c>)
 80008a8:	4413      	add	r3, r2
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	4798      	blx	r3
	schedulerContext[ptrTask].taskActive = FALSE;
 80008ae:	f898 0000 	ldrb.w	r0, [r8]
 80008b2:	0043      	lsls	r3, r0, #1
 80008b4:	1819      	adds	r1, r3, r0
 80008b6:	00ca      	lsls	r2, r1, #3
 80008b8:	4422      	add	r2, r4
 80008ba:	7517      	strb	r7, [r2, #20]
    finalTimeTaskScheduler = SYSTEM_TICK;
 80008bc:	68b1      	ldr	r1, [r6, #8]
    if ( schedulerContext[ptrTask].userEnabled == TRUE )
 80008be:	4403      	add	r3, r0
 80008c0:	00da      	lsls	r2, r3, #3
 80008c2:	4414      	add	r4, r2
 80008c4:	7d63      	ldrb	r3, [r4, #21]
 80008c6:	b90b      	cbnz	r3, 80008cc <SchedulerExecuteSystemProcess+0x4c>
 80008c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	SchedulerUpdateTaskTime(initTimeTaskScheduler, finalTimeTaskScheduler);
 80008cc:	4628      	mov	r0, r5
 80008ce:	f7ff ffad 	bl	800082c <SchedulerUpdateTaskTime>
}
 80008d2:	e7f9      	b.n	80008c8 <SchedulerExecuteSystemProcess+0x48>
 80008d4:	2000008c 	.word	0x2000008c
 80008d8:	e000e010 	.word	0xe000e010
 80008dc:	08003fb4 	.word	0x08003fb4
 80008e0:	200000bc 	.word	0x200000bc

080008e4 <SchedulerNextSystemProcess>:
{
 80008e4:	b570      	push	{r4, r5, r6, lr}
    uint8_t i			= 0;
 80008e6:	2400      	movs	r4, #0
    bool taskExecuted	= FALSE;
 80008e8:	4620      	mov	r0, r4
 80008ea:	e027      	b.n	800093c <SchedulerNextSystemProcess+0x58>
			if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE )
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d148      	bne.n	8000982 <SchedulerNextSystemProcess+0x9e>
				schedulerProcess[ptrTask].uiTimeProcessCounter = 0;
 80008f0:	4a28      	ldr	r2, [pc, #160]	; (8000994 <SchedulerNextSystemProcess+0xb0>)
 80008f2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80008f6:	f36f 010d 	bfc	r1, #0, #14
 80008fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (schedulerContext[ptrTask].maxDelayProcessCtn < (schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess))
 80008fe:	005a      	lsls	r2, r3, #1
 8000900:	18d1      	adds	r1, r2, r3
 8000902:	00c8      	lsls	r0, r1, #3
 8000904:	4924      	ldr	r1, [pc, #144]	; (8000998 <SchedulerNextSystemProcess+0xb4>)
 8000906:	4401      	add	r1, r0
 8000908:	898d      	ldrh	r5, [r1, #12]
 800090a:	4922      	ldr	r1, [pc, #136]	; (8000994 <SchedulerNextSystemProcess+0xb0>)
 800090c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000910:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000914:	441a      	add	r2, r3
 8000916:	0090      	lsls	r0, r2, #2
 8000918:	4a20      	ldr	r2, [pc, #128]	; (800099c <SchedulerNextSystemProcess+0xb8>)
 800091a:	4402      	add	r2, r0
 800091c:	8912      	ldrh	r2, [r2, #8]
 800091e:	1a88      	subs	r0, r1, r2
 8000920:	4285      	cmp	r5, r0
 8000922:	da05      	bge.n	8000930 <SchedulerNextSystemProcess+0x4c>
				schedulerContext[ptrTask].maxDelayProcessCtn = schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess;
 8000924:	005a      	lsls	r2, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	00da      	lsls	r2, r3, #3
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <SchedulerNextSystemProcess+0xb4>)
 800092c:	4413      	add	r3, r2
 800092e:	8198      	strh	r0, [r3, #12]
			SchedulerExecuteSystemProcess();
 8000930:	f7ff ffa6 	bl	8000880 <SchedulerExecuteSystemProcess>
			taskExecuted = TRUE;
 8000934:	2001      	movs	r0, #1
	while ( ( taskExecuted == FALSE ) && ( i <= NUM_OF_SCHED_TASKS ) );
 8000936:	bb60      	cbnz	r0, 8000992 <SchedulerNextSystemProcess+0xae>
 8000938:	2c02      	cmp	r4, #2
 800093a:	d82a      	bhi.n	8000992 <SchedulerNextSystemProcess+0xae>
        i++;
 800093c:	3401      	adds	r4, #1
 800093e:	b2e4      	uxtb	r4, r4
        ptrTask++;
 8000940:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <SchedulerNextSystemProcess+0xbc>)
 8000942:	7813      	ldrb	r3, [r2, #0]
 8000944:	3301      	adds	r3, #1
		ptrTask %= NUM_OF_SCHED_TASKS;
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	7013      	strb	r3, [r2, #0]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 800094c:	4a11      	ldr	r2, [pc, #68]	; (8000994 <SchedulerNextSystemProcess+0xb0>)
 800094e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000952:	7852      	ldrb	r2, [r2, #1]
 8000954:	09d2      	lsrs	r2, r2, #7
 8000956:	d1c9      	bne.n	80008ec <SchedulerNextSystemProcess+0x8>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000958:	490e      	ldr	r1, [pc, #56]	; (8000994 <SchedulerNextSystemProcess+0xb0>)
 800095a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800095e:	7849      	ldrb	r1, [r1, #1]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000960:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000964:	d0e7      	beq.n	8000936 <SchedulerNextSystemProcess+0x52>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000966:	490b      	ldr	r1, [pc, #44]	; (8000994 <SchedulerNextSystemProcess+0xb0>)
 8000968:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 800096c:	f3c5 050d 	ubfx	r5, r5, #0, #14
 8000970:	0059      	lsls	r1, r3, #1
 8000972:	4419      	add	r1, r3
 8000974:	008e      	lsls	r6, r1, #2
 8000976:	4909      	ldr	r1, [pc, #36]	; (800099c <SchedulerNextSystemProcess+0xb8>)
 8000978:	4431      	add	r1, r6
 800097a:	8909      	ldrh	r1, [r1, #8]
 800097c:	428d      	cmp	r5, r1
 800097e:	dbda      	blt.n	8000936 <SchedulerNextSystemProcess+0x52>
 8000980:	e7b4      	b.n	80008ec <SchedulerNextSystemProcess+0x8>
				schedulerProcess[ptrTask].bEnabledUrgentSystemTask = FALSE;
 8000982:	4a04      	ldr	r2, [pc, #16]	; (8000994 <SchedulerNextSystemProcess+0xb0>)
 8000984:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000988:	7851      	ldrb	r1, [r2, #1]
 800098a:	f36f 11c7 	bfc	r1, #7, #1
 800098e:	7051      	strb	r1, [r2, #1]
 8000990:	e7b5      	b.n	80008fe <SchedulerNextSystemProcess+0x1a>
}
 8000992:	bd70      	pop	{r4, r5, r6, pc}
 8000994:	200000c0 	.word	0x200000c0
 8000998:	2000008c 	.word	0x2000008c
 800099c:	08003fb4 	.word	0x08003fb4
 80009a0:	200000bc 	.word	0x200000bc

080009a4 <CreateQueue>:
 * @return  None.
 *
 ****************************************************************************/
void CreateQueue(tCircularBuffer* buffer, uint8_t* bufferPtr, uint16_t size)
{
	buffer->bufferPtr = bufferPtr;
 80009a4:	6081      	str	r1, [r0, #8]
	buffer->bufferLen = size;
 80009a6:	80c2      	strh	r2, [r0, #6]
	buffer->readPtr = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	8043      	strh	r3, [r0, #2]
	buffer->writePtr = 0;
 80009ac:	8083      	strh	r3, [r0, #4]
    buffer->numOfBytes = 0;
 80009ae:	8003      	strh	r3, [r0, #0]
 80009b0:	4770      	bx	lr

080009b2 <AddQueueByte>:
 *
 * @return  None.
 *
 ****************************************************************************/
void AddQueueByte(tCircularBuffer* buffer, uint8_t data)
{
 80009b2:	b538      	push	{r3, r4, r5, lr}
 80009b4:	4604      	mov	r4, r0
 80009b6:	460d      	mov	r5, r1
	interruptsDisable();
 80009b8:	f000 fa40 	bl	8000e3c <interruptsDisable>
    buffer->bufferPtr[buffer->writePtr]= data;
 80009bc:	68a2      	ldr	r2, [r4, #8]
 80009be:	88a3      	ldrh	r3, [r4, #4]
 80009c0:	54d5      	strb	r5, [r2, r3]
    buffer->numOfBytes++;
 80009c2:	8823      	ldrh	r3, [r4, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	8023      	strh	r3, [r4, #0]
    buffer->writePtr++;
 80009c8:	88a3      	ldrh	r3, [r4, #4]
 80009ca:	3301      	adds	r3, #1
 80009cc:	b29b      	uxth	r3, r3
    buffer->writePtr %= buffer->bufferLen;
 80009ce:	88e1      	ldrh	r1, [r4, #6]
 80009d0:	fbb3 f2f1 	udiv	r2, r3, r1
 80009d4:	fb01 3312 	mls	r3, r1, r2, r3
 80009d8:	80a3      	strh	r3, [r4, #4]
	interruptsEnable();
 80009da:	f000 fa1b 	bl	8000e14 <interruptsEnable>
 80009de:	bd38      	pop	{r3, r4, r5, pc}

080009e0 <GetQueueByte>:
 *
 * @return  Next byte into queue
 *
 ****************************************************************************/
uint8_t GetQueueByte(tCircularBuffer* buffer)
{
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4604      	mov	r4, r0
    uint8_t result;
	interruptsDisable();
 80009e4:	f000 fa2a 	bl	8000e3c <interruptsDisable>
    result = buffer->bufferPtr[buffer->readPtr];
 80009e8:	68a2      	ldr	r2, [r4, #8]
 80009ea:	8863      	ldrh	r3, [r4, #2]
 80009ec:	5cd5      	ldrb	r5, [r2, r3]
    buffer->numOfBytes--;
 80009ee:	8822      	ldrh	r2, [r4, #0]
 80009f0:	3a01      	subs	r2, #1
 80009f2:	8022      	strh	r2, [r4, #0]
    buffer->readPtr++;
 80009f4:	3301      	adds	r3, #1
 80009f6:	b29b      	uxth	r3, r3
    buffer->readPtr %= buffer->bufferLen;
 80009f8:	88e1      	ldrh	r1, [r4, #6]
 80009fa:	fbb3 f2f1 	udiv	r2, r3, r1
 80009fe:	fb01 3312 	mls	r3, r1, r2, r3
 8000a02:	8063      	strh	r3, [r4, #2]
    interruptsEnable();
 8000a04:	f000 fa06 	bl	8000e14 <interruptsEnable>
    return result;
}
 8000a08:	4628      	mov	r0, r5
 8000a0a:	bd38      	pop	{r3, r4, r5, pc}

08000a0c <GetQueuePendingBytes>:
 *
 ****************************************************************************/
uint16_t GetQueuePendingBytes(tCircularBuffer* buffer)
{
    return buffer->numOfBytes;
}
 8000a0c:	8800      	ldrh	r0, [r0, #0]
 8000a0e:	4770      	bx	lr

08000a10 <GetQueueFreeBytes>:
 * @return  Free spaces in queue
 *
 ****************************************************************************/
uint16_t GetQueueFreeBytes(tCircularBuffer* buffer)
{
    return (buffer->bufferLen-buffer->numOfBytes);
 8000a10:	88c3      	ldrh	r3, [r0, #6]
 8000a12:	8800      	ldrh	r0, [r0, #0]
 8000a14:	1a18      	subs	r0, r3, r0
}
 8000a16:	b280      	uxth	r0, r0
 8000a18:	4770      	bx	lr

08000a1a <diffTime>:
 **********************************************************************/
static uint32_t diffTime( uint32_t timeA, uint32_t timeB )
{
    uint32_t retVal = 0;

    if( timeA >= timeB )
 8000a1a:	4288      	cmp	r0, r1
 8000a1c:	d202      	bcs.n	8000a24 <diffTime+0xa>
    {
            retVal = timeA - timeB;
    }
    else
    {
            retVal = UINT32_MAX - (timeB - timeA);
 8000a1e:	1a09      	subs	r1, r1, r0
 8000a20:	43c8      	mvns	r0, r1
    }

    return retVal;
}
 8000a22:	4770      	bx	lr
            retVal = timeA - timeB;
 8000a24:	1a40      	subs	r0, r0, r1
 8000a26:	4770      	bx	lr

08000a28 <getTime>:
    uint32_t retVal = 0;

    retVal = timeMs;

    return retVal;
}
 8000a28:	4b01      	ldr	r3, [pc, #4]	; (8000a30 <getTime+0x8>)
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	2000006c 	.word	0x2000006c

08000a34 <SwTimerInit>:
eError SwTimerInit( void )
{
    eError result = RET_OK;
    uint8_t i;

    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8000a34:	2300      	movs	r3, #0
 8000a36:	b10b      	cbz	r3, 8000a3c <SwTimerInit+0x8>
    {
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
    }

    return result;
}
 8000a38:	2000      	movs	r0, #0
 8000a3a:	4770      	bx	lr
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
 8000a3c:	4a03      	ldr	r2, [pc, #12]	; (8000a4c <SwTimerInit+0x18>)
 8000a3e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000a42:	2100      	movs	r1, #0
 8000a44:	7211      	strb	r1, [r2, #8]
    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8000a46:	3301      	adds	r3, #1
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	e7f4      	b.n	8000a36 <SwTimerInit+0x2>
 8000a4c:	2000005c 	.word	0x2000005c

08000a50 <SwTimerResetTimer>:
/**********************************************************************
 * @brief  Reset and start the timer
 * @param  pTimer:	Pointer to timer to be restart.
 **********************************************************************/
eError SwTimerResetTimer( tSwTimerIndex SwTimerIndex )
{
 8000a50:	b510      	push	{r4, lr}
 8000a52:	4604      	mov	r4, r0
    eError result = RET_OK;

    // Reset the timer.
    SwTimersArray[SwTimerIndex].startMs = getTime();
 8000a54:	f7ff ffe8 	bl	8000a28 <getTime>
 8000a58:	0124      	lsls	r4, r4, #4
 8000a5a:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <SwTimerResetTimer+0x14>)
 8000a5c:	5118      	str	r0, [r3, r4]

    return result;
}
 8000a5e:	2000      	movs	r0, #0
 8000a60:	bd10      	pop	{r4, pc}
 8000a62:	bf00      	nop
 8000a64:	2000005c 	.word	0x2000005c

08000a68 <SwTimerStartTimer>:
{
 8000a68:	b510      	push	{r4, lr}
 8000a6a:	4604      	mov	r4, r0
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_CANCELLED ||
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <SwTimerStartTimer+0x28>)
 8000a6e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000a72:	7a1b      	ldrb	r3, [r3, #8]
 8000a74:	3b02      	subs	r3, #2
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d906      	bls.n	8000a8a <SwTimerStartTimer+0x22>
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_STARTED;
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <SwTimerStartTimer+0x28>)
 8000a7e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8000a82:	2301      	movs	r3, #1
 8000a84:	7203      	strb	r3, [r0, #8]
}
 8000a86:	2000      	movs	r0, #0
 8000a88:	bd10      	pop	{r4, pc}
        SwTimerResetTimer( SwTimerIndex );
 8000a8a:	f7ff ffe1 	bl	8000a50 <SwTimerResetTimer>
 8000a8e:	e7f5      	b.n	8000a7c <SwTimerStartTimer+0x14>
 8000a90:	2000005c 	.word	0x2000005c

08000a94 <SwTimerUpdateTimer>:
 * @brief  Updates all timers every millisecond
 * @param
 * @retval
 **********************************************************************/
eError SwTimerUpdateTimer( tSwTimerIndex SwTimerIndex )
{
 8000a94:	b538      	push	{r3, r4, r5, lr}
 8000a96:	4604      	mov	r4, r0
    eError result = RET_OK;
    tBool restartTimer = FALSE;

    // If timer is started, check timeout.
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STARTED )
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <SwTimerUpdateTimer+0x60>)
 8000a9a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000a9e:	7a1b      	ldrb	r3, [r3, #8]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d00a      	beq.n	8000aba <SwTimerUpdateTimer+0x26>
            }
        }
    }
    // If the timer is stopped, simply shifts the start time,
    // this keeps the elapsed time.
    else if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STOPPED )
 8000aa4:	b9fb      	cbnz	r3, 8000ae6 <SwTimerUpdateTimer+0x52>
    {
        SwTimersArray[SwTimerIndex].startMs++;
 8000aa6:	4913      	ldr	r1, [pc, #76]	; (8000af4 <SwTimerUpdateTimer+0x60>)
 8000aa8:	0102      	lsls	r2, r0, #4
 8000aaa:	588b      	ldr	r3, [r1, r2]
 8000aac:	3301      	adds	r3, #1
 8000aae:	508b      	str	r3, [r1, r2]
    tBool restartTimer = FALSE;
 8000ab0:	2000      	movs	r0, #0
    }

    if ( restartTimer == TRUE )
 8000ab2:	2801      	cmp	r0, #1
 8000ab4:	d019      	beq.n	8000aea <SwTimerUpdateTimer+0x56>
    {
        SwTimerStartTimer(SwTimerIndex);
    }

    return result;
}
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	bd38      	pop	{r3, r4, r5, pc}
        if( diffTime( timeMs, SwTimersArray[SwTimerIndex].startMs ) >= SwTimersArray[SwTimerIndex].timeoutMs )
 8000aba:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <SwTimerUpdateTimer+0x60>)
 8000abc:	0103      	lsls	r3, r0, #4
 8000abe:	18d5      	adds	r5, r2, r3
 8000ac0:	58d1      	ldr	r1, [r2, r3]
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <SwTimerUpdateTimer+0x64>)
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	f7ff ffa8 	bl	8000a1a <diffTime>
 8000aca:	686b      	ldr	r3, [r5, #4]
 8000acc:	4298      	cmp	r0, r3
 8000ace:	d306      	bcc.n	8000ade <SwTimerUpdateTimer+0x4a>
            SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_EXPIRED;
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	722a      	strb	r2, [r5, #8]
            if( NULL != SwTimersArray[SwTimerIndex].pFuncCB )
 8000ad4:	68eb      	ldr	r3, [r5, #12]
 8000ad6:	b123      	cbz	r3, 8000ae2 <SwTimerUpdateTimer+0x4e>
                    restartTimer = SwTimersArray[SwTimerIndex].pFuncCB(SwTimerIndex);
 8000ad8:	4620      	mov	r0, r4
 8000ada:	4798      	blx	r3
 8000adc:	e7e9      	b.n	8000ab2 <SwTimerUpdateTimer+0x1e>
    tBool restartTimer = FALSE;
 8000ade:	2000      	movs	r0, #0
 8000ae0:	e7e7      	b.n	8000ab2 <SwTimerUpdateTimer+0x1e>
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	e7e5      	b.n	8000ab2 <SwTimerUpdateTimer+0x1e>
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	e7e3      	b.n	8000ab2 <SwTimerUpdateTimer+0x1e>
        SwTimerStartTimer(SwTimerIndex);
 8000aea:	4620      	mov	r0, r4
 8000aec:	f7ff ffbc 	bl	8000a68 <SwTimerStartTimer>
 8000af0:	e7e1      	b.n	8000ab6 <SwTimerUpdateTimer+0x22>
 8000af2:	bf00      	nop
 8000af4:	2000005c 	.word	0x2000005c
 8000af8:	2000006c 	.word	0x2000006c

08000afc <SwTimerIrq>:
 * @brief  Interrupt request rutine for periodic tick
 * @param  None.
 * @retval None.
 **********************************************************************/
void SwTimerIrq( void )
{
 8000afc:	b510      	push	{r4, lr}
    uint8_t SwTimerIndex = 0;

    // Increment time global variable.
    timeMs = timeMs + TIMER_PERIOD; //timeMs++;
 8000afe:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <SwTimerIrq+0x1c>)
 8000b00:	6813      	ldr	r3, [r2, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	6013      	str	r3, [r2, #0]

    // Update timers
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8000b06:	2400      	movs	r4, #0
 8000b08:	b104      	cbz	r4, 8000b0c <SwTimerIrq+0x10>
    {
        SwTimerUpdateTimer( SwTimerIndex );
    }
}
 8000b0a:	bd10      	pop	{r4, pc}
        SwTimerUpdateTimer( SwTimerIndex );
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	f7ff ffc1 	bl	8000a94 <SwTimerUpdateTimer>
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8000b12:	3401      	adds	r4, #1
 8000b14:	b2e4      	uxtb	r4, r4
 8000b16:	e7f7      	b.n	8000b08 <SwTimerIrq+0xc>
 8000b18:	2000006c 	.word	0x2000006c

08000b1c <pipeDeviceByteReceived>:
 * @param	data to be saved.
 * @return  None.
 ****************************************************************************/
eError pipeDeviceByteReceived(ePipes id, uint8_t data)
{
    pipes[id].buffer[pipes[id].bufferRxPtr] = data;
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <pipeDeviceByteReceived+0x30>)
 8000b1e:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8000b22:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000b26:	7943      	ldrb	r3, [r0, #5]
 8000b28:	54d1      	strb	r1, [r2, r3]
    pipes[id].bufferRxPtr = (pipes[id].bufferRxPtr + 1) % (pipes[id].bufferLength);
 8000b2a:	7943      	ldrb	r3, [r0, #5]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	7981      	ldrb	r1, [r0, #6]
 8000b30:	fb92 f3f1 	sdiv	r3, r2, r1
 8000b34:	fb01 2313 	mls	r3, r1, r3, r2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	7143      	strb	r3, [r0, #5]
    if ( pipes[id].bufferRxPtr == pipes[id].bufferStartingPosition )
 8000b3c:	7902      	ldrb	r2, [r0, #4]
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d001      	beq.n	8000b46 <pipeDeviceByteReceived+0x2a>
    {
        return RET_BUFFER_FULL;
    }

    return RET_OK;
 8000b42:	2000      	movs	r0, #0
}
 8000b44:	4770      	bx	lr
        return RET_BUFFER_FULL;
 8000b46:	2008      	movs	r0, #8
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	200000c4 	.word	0x200000c4

08000b50 <pipeDevice1ByteReceived>:


/**Helper functions to access each pipe */
#ifdef IS_PIPE1
inline eError pipeDevice1ByteReceived(uint8_t data)
{
 8000b50:	b508      	push	{r3, lr}
	return pipeDeviceByteReceived(PIPE_1, data);
 8000b52:	4601      	mov	r1, r0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f7ff ffe1 	bl	8000b1c <pipeDeviceByteReceived>
}
 8000b5a:	bd08      	pop	{r3, pc}

08000b5c <FlashCalcOffset>:
 ****************************************************************************/
uint32_t FlashCalcOffset ( uint32_t initSector, uint32_t finalSector )
{
	uint32_t offset = 0;

	offset = (finalSector - initSector) * (FLASH_SECTOR_SIZE);
 8000b5c:	1a08      	subs	r0, r1, r0

	return offset;
}
 8000b5e:	00c0      	lsls	r0, r0, #3
 8000b60:	4770      	bx	lr
	...

08000b64 <FlashInit>:
{
 8000b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FlashContext[i].initAddress = FLASH_BASE;
 8000b68:	4c26      	ldr	r4, [pc, #152]	; (8000c04 <FlashInit+0xa0>)
 8000b6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b6e:	6063      	str	r3, [r4, #4]
	FlashContext[i].initSector = 0;
 8000b70:	2600      	movs	r6, #0
 8000b72:	6026      	str	r6, [r4, #0]
	FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, FlashInstanceMap[0].sectors);
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <FlashInit+0xa4>)
 8000b76:	681f      	ldr	r7, [r3, #0]
 8000b78:	4639      	mov	r1, r7
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	f7ff ffee 	bl	8000b5c <FlashCalcOffset>
 8000b80:	60a0      	str	r0, [r4, #8]
	for (i = 1; i < NUM_OF_FLASH; i++)
 8000b82:	2401      	movs	r4, #1
 8000b84:	e005      	b.n	8000b92 <FlashInit+0x2e>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8000b86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8a:	e00f      	b.n	8000bac <FlashInit+0x48>
			success = RET_FAIL;
 8000b8c:	2601      	movs	r6, #1
	for (i = 1; i < NUM_OF_FLASH; i++)
 8000b8e:	3401      	adds	r4, #1
 8000b90:	b2e4      	uxtb	r4, r4
 8000b92:	2c03      	cmp	r4, #3
 8000b94:	d833      	bhi.n	8000bfe <FlashInit+0x9a>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <FlashInit+0xa8>)
 8000b98:	881a      	ldrh	r2, [r3, #0]
 8000b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d0f1      	beq.n	8000b86 <FlashInit+0x22>
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <FlashInit+0xac>)
 8000ba4:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8000ba8:	0adb      	lsrs	r3, r3, #11
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	429f      	cmp	r7, r3
 8000bae:	d2ed      	bcs.n	8000b8c <FlashInit+0x28>
			FlashContext[i].initSector = sectorUsed;
 8000bb0:	4d14      	ldr	r5, [pc, #80]	; (8000c04 <FlashInit+0xa0>)
 8000bb2:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8000bb6:	eb08 0204 	add.w	r2, r8, r4
 8000bba:	0093      	lsls	r3, r2, #2
 8000bbc:	18e8      	adds	r0, r5, r3
 8000bbe:	50ef      	str	r7, [r5, r3]
			FlashContext[i].initAddress = FlashContext[i-1].initAddress + FlashContext[i-1].maxOffset;
 8000bc0:	f104 3eff 	add.w	lr, r4, #4294967295
 8000bc4:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8000bc8:	eb03 010e 	add.w	r1, r3, lr
 8000bcc:	008a      	lsls	r2, r1, #2
 8000bce:	442a      	add	r2, r5
 8000bd0:	6851      	ldr	r1, [r2, #4]
 8000bd2:	4473      	add	r3, lr
 8000bd4:	009a      	lsls	r2, r3, #2
 8000bd6:	442a      	add	r2, r5
 8000bd8:	6893      	ldr	r3, [r2, #8]
 8000bda:	440b      	add	r3, r1
 8000bdc:	6043      	str	r3, [r0, #4]
			FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, (sectorUsed + FlashInstanceMap[i].sectors));
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <FlashInit+0xa4>)
 8000be0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000be4:	eb07 0903 	add.w	r9, r7, r3
 8000be8:	4649      	mov	r1, r9
 8000bea:	4638      	mov	r0, r7
 8000bec:	f7ff ffb6 	bl	8000b5c <FlashCalcOffset>
 8000bf0:	44a0      	add	r8, r4
 8000bf2:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8000bf6:	441d      	add	r5, r3
 8000bf8:	60a8      	str	r0, [r5, #8]
			sectorUsed +=  FlashInstanceMap[i].sectors;
 8000bfa:	464f      	mov	r7, r9
 8000bfc:	e7c7      	b.n	8000b8e <FlashInit+0x2a>
}
 8000bfe:	4630      	mov	r0, r6
 8000c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c04:	200000cc 	.word	0x200000cc
 8000c08:	08003fcc 	.word	0x08003fcc
 8000c0c:	1fff75e0 	.word	0x1fff75e0
 8000c10:	003ffc00 	.word	0x003ffc00

08000c14 <GPIOWritePort>:
 ****************************************************************************/
eError GPIOWritePort(tGPIO port, tGPIOValue value)
{
	eError 	success = RET_OK;

	if ( value == GPIO_DEFAULT )
 8000c14:	2903      	cmp	r1, #3
 8000c16:	d015      	beq.n	8000c44 <GPIOWritePort+0x30>
{
 8000c18:	b508      	push	{r3, lr}
 8000c1a:	460a      	mov	r2, r1
		success = RET_INVALID_PARAMETER;
		return success;
	}


	if ( value != GPIO_TOGGLE )
 8000c1c:	2902      	cmp	r1, #2
 8000c1e:	d008      	beq.n	8000c32 <GPIOWritePort+0x1e>
	{
		HAL_GPIO_WritePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin, value);
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <GPIOWritePort+0x34>)
 8000c22:	0100      	lsls	r0, r0, #4
 8000c24:	1819      	adds	r1, r3, r0
 8000c26:	8889      	ldrh	r1, [r1, #4]
 8000c28:	5818      	ldr	r0, [r3, r0]
 8000c2a:	f000 fefb 	bl	8001a24 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
	}

	return success;
 8000c2e:	2000      	movs	r0, #0
 8000c30:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <GPIOWritePort+0x34>)
 8000c34:	0100      	lsls	r0, r0, #4
 8000c36:	181a      	adds	r2, r3, r0
 8000c38:	8891      	ldrh	r1, [r2, #4]
 8000c3a:	5818      	ldr	r0, [r3, r0]
 8000c3c:	f000 fef7 	bl	8001a2e <HAL_GPIO_TogglePin>
	return success;
 8000c40:	2000      	movs	r0, #0
 8000c42:	bd08      	pop	{r3, pc}
		return success;
 8000c44:	2005      	movs	r0, #5
 8000c46:	4770      	bx	lr
 8000c48:	08003fdc 	.word	0x08003fdc

08000c4c <InitGPIOClock>:
 * @brief  Enable GPIO clock.
 * @param	port to enable clock.
 * @return  None.
 ****************************************************************************/
void InitGPIOClock(tGPIO port)
{
 8000c4c:	b086      	sub	sp, #24
	/* Enable the GPIO Clock */
#ifdef GPIOA
	if ( GPIOInstanceMap[port].port == GPIOA ){
 8000c4e:	0103      	lsls	r3, r0, #4
 8000c50:	4a3c      	ldr	r2, [pc, #240]	; (8000d44 <InitGPIOClock+0xf8>)
 8000c52:	58d3      	ldr	r3, [r2, r3]
 8000c54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c58:	d01f      	beq.n	8000c9a <InitGPIOClock+0x4e>
		__GPIOA_CLK_ENABLE();
	}
#endif //GPIOA

#ifdef GPIOB
	if( GPIOInstanceMap[port].port == GPIOB ){
 8000c5a:	0103      	lsls	r3, r0, #4
 8000c5c:	4a39      	ldr	r2, [pc, #228]	; (8000d44 <InitGPIOClock+0xf8>)
 8000c5e:	58d2      	ldr	r2, [r2, r3]
 8000c60:	4b39      	ldr	r3, [pc, #228]	; (8000d48 <InitGPIOClock+0xfc>)
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d027      	beq.n	8000cb6 <InitGPIOClock+0x6a>
		__GPIOB_CLK_ENABLE();
	}
#endif //GPIOB

#ifdef GPIOC
	if( GPIOInstanceMap[port].port == GPIOC ){
 8000c66:	0103      	lsls	r3, r0, #4
 8000c68:	4a36      	ldr	r2, [pc, #216]	; (8000d44 <InitGPIOClock+0xf8>)
 8000c6a:	58d2      	ldr	r2, [r2, r3]
 8000c6c:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <InitGPIOClock+0x100>)
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d02f      	beq.n	8000cd2 <InitGPIOClock+0x86>
		__GPIOC_CLK_ENABLE();
	}
#endif //GPIOC

#ifdef GPIOD
	if( GPIOInstanceMap[port].port == GPIOD ){
 8000c72:	0103      	lsls	r3, r0, #4
 8000c74:	4a33      	ldr	r2, [pc, #204]	; (8000d44 <InitGPIOClock+0xf8>)
 8000c76:	58d2      	ldr	r2, [r2, r3]
 8000c78:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <InitGPIOClock+0x104>)
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d037      	beq.n	8000cee <InitGPIOClock+0xa2>
		__GPIOD_CLK_ENABLE();
	}
#endif //GPIOD

#ifdef GPIOE
	if( GPIOInstanceMap[port].port == GPIOE ){
 8000c7e:	0103      	lsls	r3, r0, #4
 8000c80:	4a30      	ldr	r2, [pc, #192]	; (8000d44 <InitGPIOClock+0xf8>)
 8000c82:	58d2      	ldr	r2, [r2, r3]
 8000c84:	4b33      	ldr	r3, [pc, #204]	; (8000d54 <InitGPIOClock+0x108>)
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d03f      	beq.n	8000d0a <InitGPIOClock+0xbe>
		__GPIOG_CLK_ENABLE();
	}
#endif //GPIOG

#ifdef GPIOH
	if( GPIOInstanceMap[port].port == GPIOH ){
 8000c8a:	0100      	lsls	r0, r0, #4
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <InitGPIOClock+0xf8>)
 8000c8e:	581a      	ldr	r2, [r3, r0]
 8000c90:	4b31      	ldr	r3, [pc, #196]	; (8000d58 <InitGPIOClock+0x10c>)
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d047      	beq.n	8000d26 <InitGPIOClock+0xda>
		__GPIOI_CLK_ENABLE();
	}
#endif //GPIOI


}
 8000c96:	b006      	add	sp, #24
 8000c98:	4770      	bx	lr
		__GPIOA_CLK_ENABLE();
 8000c9a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000c9e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ca4:	f042 0201 	orr.w	r2, r2, #1
 8000ca8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	9b00      	ldr	r3, [sp, #0]
 8000cb4:	e7d1      	b.n	8000c5a <InitGPIOClock+0xe>
		__GPIOB_CLK_ENABLE();
 8000cb6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000cba:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8000cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc0:	f042 0202 	orr.w	r2, r2, #2
 8000cc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	9b01      	ldr	r3, [sp, #4]
 8000cd0:	e7c9      	b.n	8000c66 <InitGPIOClock+0x1a>
		__GPIOC_CLK_ENABLE();
 8000cd2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000cd6:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cdc:	f042 0204 	orr.w	r2, r2, #4
 8000ce0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	9b02      	ldr	r3, [sp, #8]
 8000cec:	e7c1      	b.n	8000c72 <InitGPIOClock+0x26>
		__GPIOD_CLK_ENABLE();
 8000cee:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000cf2:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cf8:	f042 0208 	orr.w	r2, r2, #8
 8000cfc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	f003 0308 	and.w	r3, r3, #8
 8000d04:	9303      	str	r3, [sp, #12]
 8000d06:	9b03      	ldr	r3, [sp, #12]
 8000d08:	e7b9      	b.n	8000c7e <InitGPIOClock+0x32>
		__GPIOE_CLK_ENABLE();
 8000d0a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000d0e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d14:	f042 0210 	orr.w	r2, r2, #16
 8000d18:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	9304      	str	r3, [sp, #16]
 8000d22:	9b04      	ldr	r3, [sp, #16]
 8000d24:	e7b1      	b.n	8000c8a <InitGPIOClock+0x3e>
		__GPIOH_CLK_ENABLE();
 8000d26:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000d2a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d34:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3c:	9305      	str	r3, [sp, #20]
 8000d3e:	9b05      	ldr	r3, [sp, #20]
}
 8000d40:	e7a9      	b.n	8000c96 <InitGPIOClock+0x4a>
 8000d42:	bf00      	nop
 8000d44:	08003fdc 	.word	0x08003fdc
 8000d48:	48000400 	.word	0x48000400
 8000d4c:	48000800 	.word	0x48000800
 8000d50:	48000c00 	.word	0x48000c00
 8000d54:	48001000 	.word	0x48001000
 8000d58:	48001c00 	.word	0x48001c00

08000d5c <GPIOInit>:
{
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	b086      	sub	sp, #24
	for (port = 0; port < NUM_OF_GPIO; port++)
 8000d60:	2400      	movs	r4, #0
	eError 				success = RET_OK;
 8000d62:	4626      	mov	r6, r4
	for (port = 0; port < NUM_OF_GPIO; port++)
 8000d64:	e001      	b.n	8000d6a <GPIOInit+0xe>
 8000d66:	3401      	adds	r4, #1
 8000d68:	b2e4      	uxtb	r4, r4
 8000d6a:	2c09      	cmp	r4, #9
 8000d6c:	d81b      	bhi.n	8000da6 <GPIOInit+0x4a>
		InitGPIOClock(port);
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f7ff ff6c 	bl	8000c4c <InitGPIOClock>
        GPIO_InitStructure.Pin =  	(uint32_t)GPIOInstanceMap[port].pin;
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <GPIOInit+0x50>)
 8000d76:	0123      	lsls	r3, r4, #4
 8000d78:	18d5      	adds	r5, r2, r3
 8000d7a:	88a9      	ldrh	r1, [r5, #4]
 8000d7c:	9101      	str	r1, [sp, #4]
		GPIO_InitStructure.Mode = 	(uint32_t)GPIOInstanceMap[port].mode;
 8000d7e:	68a9      	ldr	r1, [r5, #8]
 8000d80:	9102      	str	r1, [sp, #8]
		GPIO_InitStructure.Speed = 	(uint32_t)GPIOInstanceMap[port].speed;
 8000d82:	7b29      	ldrb	r1, [r5, #12]
 8000d84:	9104      	str	r1, [sp, #16]
		GPIO_InitStructure.Pull = 	(uint32_t)GPIOInstanceMap[port].pupd;
 8000d86:	7b69      	ldrb	r1, [r5, #13]
 8000d88:	9103      	str	r1, [sp, #12]
		GPIO_InitStructure.Alternate = (uint32_t)GPIOInstanceMap[port].alternate;
 8000d8a:	7ba9      	ldrb	r1, [r5, #14]
 8000d8c:	9105      	str	r1, [sp, #20]
		HAL_GPIO_Init(GPIOInstanceMap[port].port, &GPIO_InitStructure);
 8000d8e:	a901      	add	r1, sp, #4
 8000d90:	58d0      	ldr	r0, [r2, r3]
 8000d92:	f000 fd77 	bl	8001884 <HAL_GPIO_Init>
		if ( GPIOInstanceMap[port].initialValue != GPIO_DEFAULT )
 8000d96:	7be9      	ldrb	r1, [r5, #15]
 8000d98:	2903      	cmp	r1, #3
 8000d9a:	d0e4      	beq.n	8000d66 <GPIOInit+0xa>
			success = GPIOWritePort(port, GPIOInstanceMap[port].initialValue);
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	f7ff ff39 	bl	8000c14 <GPIOWritePort>
 8000da2:	4606      	mov	r6, r0
 8000da4:	e7df      	b.n	8000d66 <GPIOInit+0xa>
}
 8000da6:	4630      	mov	r0, r6
 8000da8:	b006      	add	sp, #24
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	08003fdc 	.word	0x08003fdc

08000db0 <interruptsInit>:
 * @brief  Init interrupts driver
 * 		   Configure all IRQ Channels declared on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsInit( void )
{
 8000db0:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 8000db2:	2400      	movs	r4, #0
 8000db4:	e001      	b.n	8000dba <interruptsInit+0xa>
 8000db6:	3401      	adds	r4, #1
 8000db8:	b2e4      	uxtb	r4, r4
 8000dba:	2c0e      	cmp	r4, #14
 8000dbc:	d80c      	bhi.n	8000dd8 <interruptsInit+0x28>
	{
		if (IS_SETTABLE_PRIORITY_IRQ(interruptsInstanceMap[i].IRQn))
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <interruptsInit+0x2c>)
 8000dc0:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8000dc4:	f110 0f05 	cmn.w	r0, #5
 8000dc8:	dbf5      	blt.n	8000db6 <interruptsInit+0x6>
		{
			HAL_NVIC_SetPriority(interruptsInstanceMap[i].IRQn, (uint32_t)interruptsInstanceMap[i].PreemptPriority, (uint32_t)interruptsInstanceMap[i].SubPriority);
 8000dca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000dce:	789a      	ldrb	r2, [r3, #2]
 8000dd0:	7859      	ldrb	r1, [r3, #1]
 8000dd2:	f000 fcc7 	bl	8001764 <HAL_NVIC_SetPriority>
 8000dd6:	e7ee      	b.n	8000db6 <interruptsInit+0x6>
		}
	}
	return result;
}
 8000dd8:	2000      	movs	r0, #0
 8000dda:	bd10      	pop	{r4, pc}
 8000ddc:	20000000 	.word	0x20000000

08000de0 <interruptsStart>:
 * @brief  Start interrupts driver
 * 		   Enable all IRQ Channels configured as ENABLE on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsStart( void )
{
 8000de0:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 8000de2:	2400      	movs	r4, #0
 8000de4:	e001      	b.n	8000dea <interruptsStart+0xa>
 8000de6:	3401      	adds	r4, #1
 8000de8:	b2e4      	uxtb	r4, r4
 8000dea:	2c0e      	cmp	r4, #14
 8000dec:	d80d      	bhi.n	8000e0a <interruptsStart+0x2a>
	{
		if (interruptsInstanceMap[i].State == IRQ_ENABLE)
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <interruptsStart+0x30>)
 8000df0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000df4:	78db      	ldrb	r3, [r3, #3]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d1f5      	bne.n	8000de6 <interruptsStart+0x6>
		{
			if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[i].IRQn))
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <interruptsStart+0x30>)
 8000dfc:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8000e00:	2800      	cmp	r0, #0
 8000e02:	dbf0      	blt.n	8000de6 <interruptsStart+0x6>
			{
				HAL_NVIC_EnableIRQ(interruptsInstanceMap[i].IRQn);
 8000e04:	f000 fce0 	bl	80017c8 <HAL_NVIC_EnableIRQ>
 8000e08:	e7ed      	b.n	8000de6 <interruptsStart+0x6>

		}
	}

	return result;
}
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	bd10      	pop	{r4, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000000 	.word	0x20000000

08000e14 <interruptsEnable>:
 * @param	None.
 * @return  None.
 ****************************************************************************/
void interruptsEnable( void )
{
	if (countIrqAllDisable<=1)
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <interruptsEnable+0x24>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d906      	bls.n	8000e2c <interruptsEnable+0x18>
		countIrqAllDisable=0;
		__enable_irq();
	}
	else
	{
		countIrqAllDisable--;
 8000e1e:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <interruptsEnable+0x24>)
 8000e20:	8813      	ldrh	r3, [r2, #0]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	3b01      	subs	r3, #1
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	8013      	strh	r3, [r2, #0]
 8000e2a:	4770      	bx	lr
		countIrqAllDisable=0;
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4b02      	ldr	r3, [pc, #8]	; (8000e38 <interruptsEnable+0x24>)
 8000e30:	801a      	strh	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000e32:	b662      	cpsie	i
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000070 	.word	0x20000070

08000e3c <interruptsDisable>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
 * @return  None.
 ****************************************************************************/
void interruptsDisable( void )
{
	__disable_irq();
	countIrqAllDisable++;
 8000e3e:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <interruptsDisable+0x10>)
 8000e40:	8813      	ldrh	r3, [r2, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3301      	adds	r3, #1
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	8013      	strh	r3, [r2, #0]
 8000e4a:	4770      	bx	lr
 8000e4c:	20000070 	.word	0x20000070

08000e50 <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 8000e50:	4770      	bx	lr

08000e52 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler>

08000e54 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler>

08000e56 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler>

08000e58 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler>

08000e5a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e5a:	4770      	bx	lr

08000e5c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 8000e5e:	b508      	push	{r3, lr}

	HAL_SYSTICK_IRQHandler();
 8000e60:	f000 fce4 	bl	800182c <HAL_SYSTICK_IRQHandler>
 8000e64:	bd08      	pop	{r3, pc}

08000e66 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 8000e66:	4770      	bx	lr

08000e68 <EXTI0_IRQHandler>:
 * @brief  This function handles external line 0 and 1 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
 8000e68:	4770      	bx	lr

08000e6a <EXTI1_IRQHandler>:
 * @brief  This function handles external line 0 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void)
{
 8000e6a:	4770      	bx	lr

08000e6c <EXTI9_5_IRQHandler>:
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
}

void EXTI9_5_IRQHandler(void)
{
 8000e6c:	b508      	push	{r3, lr}
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000e6e:	2020      	movs	r0, #32
 8000e70:	f000 fde2 	bl	8001a38 <HAL_GPIO_EXTI_IRQHandler>
 8000e74:	bd08      	pop	{r3, pc}

08000e76 <USART1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USART1_IRQHandler(void)
{
 8000e76:	b508      	push	{r3, lr}
	HAL_UART1_Callback();
 8000e78:	f000 f824 	bl	8000ec4 <HAL_UART1_Callback>
 8000e7c:	bd08      	pop	{r3, pc}

08000e7e <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */

void USART2_IRQHandler(void)
{
 8000e7e:	b508      	push	{r3, lr}
	HAL_UART2_Callback();
 8000e80:	f000 f821 	bl	8000ec6 <HAL_UART2_Callback>
 8000e84:	bd08      	pop	{r3, pc}

08000e86 <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C1_EV_IRQHandler(void)
{
 8000e86:	b508      	push	{r3, lr}
	HAL_I2C1_Callback();
 8000e88:	f000 f822 	bl	8000ed0 <HAL_I2C1_Callback>
 8000e8c:	bd08      	pop	{r3, pc}

08000e8e <I2C2_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C2_EV_IRQHandler(void)
{
 8000e8e:	b508      	push	{r3, lr}
	HAL_I2C2_Callback();
 8000e90:	f000 f81f 	bl	8000ed2 <HAL_I2C2_Callback>
 8000e94:	bd08      	pop	{r3, pc}

08000e96 <SPI1_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_IRQHandler(void)
{
 8000e96:	b508      	push	{r3, lr}
    HAL_SPI1_Callback();
 8000e98:	f000 f81c 	bl	8000ed4 <HAL_SPI1_Callback>
 8000e9c:	bd08      	pop	{r3, pc}

08000e9e <SPI2_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI2_IRQHandler(void)
{
 8000e9e:	b508      	push	{r3, lr}
    HAL_SPI2_Callback();
 8000ea0:	f000 f81d 	bl	8000ede <HAL_SPI2_Callback>
 8000ea4:	bd08      	pop	{r3, pc}

08000ea6 <SPI3_IRQHandler>:
}

void SPI3_IRQHandler(void)
{
 8000ea6:	b508      	push	{r3, lr}
    HAL_SPI3_Callback();
 8000ea8:	f000 f81a 	bl	8000ee0 <HAL_SPI3_Callback>
 8000eac:	bd08      	pop	{r3, pc}

08000eae <TIM2_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8000eae:	4770      	bx	lr

08000eb0 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8000eb2:	b508      	push	{r3, lr}
	HAL_IncTick();
 8000eb4:	f000 fc48 	bl	8001748 <HAL_IncTick>

	SchedulerProcessesAutoEnable();
 8000eb8:	f7ff fc8a 	bl	80007d0 <SchedulerProcessesAutoEnable>
#ifdef SW_TIMER_AVAILABLE
	SwTimerIrq();
 8000ebc:	f7ff fe1e 	bl	8000afc <SwTimerIrq>
 8000ec0:	bd08      	pop	{r3, pc}

08000ec2 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_UART1_Callback>:
  * @brief UART1 callback
  * @param None
  * @retval None
  */
void HAL_UART1_Callback(void)
{
 8000ec4:	4770      	bx	lr

08000ec6 <HAL_UART2_Callback>:
  * @brief UART2 callback
  * @param None
  * @retval None
  */
void HAL_UART2_Callback(void)
{
 8000ec6:	b508      	push	{r3, lr}
#ifdef IS_UART2
	uartDriverMainIRQHandler(UART_2);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 fb6b 	bl	80015a4 <uartDriverMainIRQHandler>
 8000ece:	bd08      	pop	{r3, pc}

08000ed0 <HAL_I2C1_Callback>:
#endif
}


void HAL_I2C1_Callback(void)
{
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_I2C2_Callback>:
	i2cDriverMainIRQHandler(I2C_1);
#endif
}

void HAL_I2C2_Callback(void)
{
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_SPI1_Callback>:
	i2cDriverMainIRQHandler(I2C_2);
#endif
}

void HAL_SPI1_Callback(void)
{
 8000ed4:	b508      	push	{r3, lr}
#ifdef IS_SPI1
    spiDriverMainIRQHandler(SPI_1);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f9b6 	bl	8001248 <spiDriverMainIRQHandler>
 8000edc:	bd08      	pop	{r3, pc}

08000ede <HAL_SPI2_Callback>:
#endif
}

void HAL_SPI2_Callback(void)
{
 8000ede:	4770      	bx	lr

08000ee0 <HAL_SPI3_Callback>:
    spiDriverMainIRQHandler(SPI_2);
#endif
}

void HAL_SPI3_Callback(void)
{
 8000ee0:	b508      	push	{r3, lr}
#ifdef IS_SPI3
    spiDriverMainIRQHandler(SPI_3);
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f000 f9b0 	bl	8001248 <spiDriverMainIRQHandler>
 8000ee8:	bd08      	pop	{r3, pc}
	...

08000eec <storePowerUpReason>:
 *
 ****************************************************************************/
static void storePowerUpReason( void )
{
	/* Check if the StandBy flag is set */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <storePowerUpReason+0xa8>)
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ef4:	d126      	bne.n	8000f44 <storePowerUpReason+0x58>

		powerUpReason = SYSTEM_RESET_POWER_UP;
	}
	else
	{
		if ( __HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET )
 8000ef6:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <storePowerUpReason+0xac>)
 8000ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000efc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8000f00:	d12f      	bne.n	8000f62 <storePowerUpReason+0x76>
		{
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
		}
		else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <storePowerUpReason+0xac>)
 8000f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f08:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000f0c:	d12d      	bne.n	8000f6a <storePowerUpReason+0x7e>
		{
			powerUpReason = SYSTEM_RESET_WATCHDOG;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET )
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <storePowerUpReason+0xac>)
 8000f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f14:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000f18:	d12b      	bne.n	8000f72 <storePowerUpReason+0x86>
		{
			powerUpReason = SYSTEM_RESET_SOFTWARE;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET )
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <storePowerUpReason+0xac>)
 8000f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f20:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000f24:	d129      	bne.n	8000f7a <storePowerUpReason+0x8e>
		{
			powerUpReason = SYSTEM_RESET_POWER_UP;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET )
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <storePowerUpReason+0xac>)
 8000f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f2c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8000f30:	d127      	bne.n	8000f82 <storePowerUpReason+0x96>
		{
			powerUpReason = SYSTEM_BOR_RESET;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET )
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <storePowerUpReason+0xac>)
 8000f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db26      	blt.n	8000f8a <storePowerUpReason+0x9e>
		{
			powerUpReason = SYSTEM_LOW_POWER_RESET;
		}
		else
		{
			powerUpReason = SYSTEM_FIRST_POWER_UP;
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <storePowerUpReason+0xb0>)
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e006      	b.n	8000f52 <storePowerUpReason+0x66>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <storePowerUpReason+0xa8>)
 8000f4a:	619a      	str	r2, [r3, #24]
		powerUpReason = SYSTEM_RESET_POWER_UP;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <storePowerUpReason+0xb0>)
 8000f50:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000f52:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <storePowerUpReason+0xac>)
 8000f54:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8000f58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000f60:	4770      	bx	lr
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
 8000f62:	2207      	movs	r2, #7
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <storePowerUpReason+0xb0>)
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	e7f3      	b.n	8000f52 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_WATCHDOG;
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <storePowerUpReason+0xb0>)
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	e7ef      	b.n	8000f52 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_SOFTWARE;
 8000f72:	2203      	movs	r2, #3
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <storePowerUpReason+0xb0>)
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e7eb      	b.n	8000f52 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_POWER_UP;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <storePowerUpReason+0xb0>)
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e7e7      	b.n	8000f52 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_BOR_RESET;
 8000f82:	2204      	movs	r2, #4
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <storePowerUpReason+0xb0>)
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e7e3      	b.n	8000f52 <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_LOW_POWER_RESET;
 8000f8a:	2206      	movs	r2, #6
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <storePowerUpReason+0xb0>)
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e7df      	b.n	8000f52 <storePowerUpReason+0x66>
 8000f92:	bf00      	nop
 8000f94:	40007000 	.word	0x40007000
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	20000072 	.word	0x20000072

08000fa0 <watchdogInit>:
	{
		result = WWDGInit();
	}
#endif
	return result;
}
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <SystemClock_Config>:
 *
 * @return  None.
 *
 ****************************************************************************/
static eError SystemClock_Config(void)
{
 8000fa4:	b500      	push	{lr}
 8000fa6:	b0b3      	sub	sp, #204	; 0xcc
	RCC_PeriphCLKInitTypeDef PeriphClkInit;
#endif

	do
	{
		RCC_OscInitStruct.OscillatorType = SystemMap.OscillatorType;
 8000fa8:	4b30      	ldr	r3, [pc, #192]	; (800106c <SystemClock_Config+0xc8>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	9221      	str	r2, [sp, #132]	; 0x84
		RCC_OscInitStruct.HSEState	= SystemMap.HSEState;
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	9222      	str	r2, [sp, #136]	; 0x88
		RCC_OscInitStruct.HSICalibrationValue = SystemMap.HSICalibrationValue;
 8000fb2:	691a      	ldr	r2, [r3, #16]
 8000fb4:	9225      	str	r2, [sp, #148]	; 0x94
		RCC_OscInitStruct.HSIState 	= SystemMap.HSIState;
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	9224      	str	r2, [sp, #144]	; 0x90
		RCC_OscInitStruct.LSEState = SystemMap.LSEState;
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	9223      	str	r2, [sp, #140]	; 0x8c
		RCC_OscInitStruct.LSIState = SystemMap.LSIState;
 8000fbe:	695a      	ldr	r2, [r3, #20]
 8000fc0:	9226      	str	r2, [sp, #152]	; 0x98
		RCC_OscInitStruct.MSIState = SystemMap.MSIState;
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	9227      	str	r2, [sp, #156]	; 0x9c
		RCC_OscInitStruct.MSICalibrationValue = SystemMap.MSICalibrationValue;
 8000fc6:	69da      	ldr	r2, [r3, #28]
 8000fc8:	9228      	str	r2, [sp, #160]	; 0xa0
		RCC_OscInitStruct.MSIClockRange= SystemMap.MSIClockRange;
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	9229      	str	r2, [sp, #164]	; 0xa4

		RCC_OscInitStruct.PLL.PLLState 	= SystemMap.PLLState;
 8000fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd0:	922b      	str	r2, [sp, #172]	; 0xac
		RCC_OscInitStruct.PLL.PLLSource = SystemMap.PLLSource;
 8000fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fd4:	922c      	str	r2, [sp, #176]	; 0xb0
		RCC_OscInitStruct.PLL.PLLM 		= SystemMap.PLLM;
 8000fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd8:	922d      	str	r2, [sp, #180]	; 0xb4
		RCC_OscInitStruct.PLL.PLLN		= SystemMap.PLLN;
 8000fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fdc:	922e      	str	r2, [sp, #184]	; 0xb8
		RCC_OscInitStruct.PLL.PLLP		= SystemMap.PLLP;
 8000fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe0:	922f      	str	r2, [sp, #188]	; 0xbc
		RCC_OscInitStruct.PLL.PLLQ		= SystemMap.PLLQ;
 8000fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fe4:	9230      	str	r2, [sp, #192]	; 0xc0
		RCC_OscInitStruct.PLL.PLLR		= SystemMap.PLLR;
 8000fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe8:	9331      	str	r3, [sp, #196]	; 0xc4
	#if (INDEPENDENT_WATCHDOG == 1)//Assure that LSI is configured ON (needed by IWDG)
		RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_LSI;
		RCC_OscInitStruct.LSIState |= RCC_LSI_ON;
	#endif

		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fea:	a821      	add	r0, sp, #132	; 0x84
 8000fec:	f000 fe4a 	bl	8001c84 <HAL_RCC_OscConfig>
 8000ff0:	b118      	cbz	r0, 8000ffa <SystemClock_Config+0x56>
		{
			result = RET_FAIL;
 8000ff2:	2001      	movs	r0, #1
		__HAL_RCC_SYSCFG_CLK_ENABLE();
	} while (0);

	return result;

}
 8000ff4:	b033      	add	sp, #204	; 0xcc
 8000ff6:	f85d fb04 	ldr.w	pc, [sp], #4
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	931c      	str	r3, [sp, #112]	; 0x70
		RCC_ClkInitStruct.SYSCLKSource 	 = SystemMap.SYSCLKSource;
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	; (800106c <SystemClock_Config+0xc8>)
 8001000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001002:	921d      	str	r2, [sp, #116]	; 0x74
		RCC_ClkInitStruct.AHBCLKDivider  = SystemMap.AHBCLKDivider;
 8001004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001006:	921e      	str	r2, [sp, #120]	; 0x78
		RCC_ClkInitStruct.APB1CLKDivider = SystemMap.APB1CLKDivider;
 8001008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800100a:	921f      	str	r2, [sp, #124]	; 0x7c
		RCC_ClkInitStruct.APB2CLKDivider = SystemMap.APB2CLKDivider;
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	9320      	str	r3, [sp, #128]	; 0x80
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001010:	2104      	movs	r1, #4
 8001012:	a81c      	add	r0, sp, #112	; 0x70
 8001014:	f001 f922 	bl	800225c <HAL_RCC_ClockConfig>
 8001018:	b108      	cbz	r0, 800101e <SystemClock_Config+0x7a>
			result = RET_FAIL;
 800101a:	2001      	movs	r0, #1
 800101c:	e7ea      	b.n	8000ff4 <SystemClock_Config+0x50>
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800101e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001022:	f000 fd1f 	bl	8001a64 <HAL_PWREx_ControlVoltageScaling>
 8001026:	b108      	cbz	r0, 800102c <SystemClock_Config+0x88>
			result = RET_FAIL;
 8001028:	2001      	movs	r0, #1
 800102a:	e7e3      	b.n	8000ff4 <SystemClock_Config+0x50>
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800102c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001030:	9302      	str	r3, [sp, #8]
		PeriphClkInit.RTCClockSelection = SystemMap.RTCClockSelection;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <SystemClock_Config+0xc8>)
 8001034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001036:	931b      	str	r3, [sp, #108]	; 0x6c
		HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8001038:	a802      	add	r0, sp, #8
 800103a:	f001 fa9b 	bl	8002574 <HAL_RCCEx_PeriphCLKConfig>
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800103e:	f001 f9b5 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <SystemClock_Config+0xcc>)
 8001044:	fba3 3000 	umull	r3, r0, r3, r0
 8001048:	0980      	lsrs	r0, r0, #6
 800104a:	f000 fbc9 	bl	80017e0 <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800104e:	2004      	movs	r0, #4
 8001050:	f000 fbdc 	bl	800180c <HAL_SYSTICK_CLKSourceConfig>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <SystemClock_Config+0xd0>)
 8001056:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001058:	f042 0201 	orr.w	r2, r2, #1
 800105c:	661a      	str	r2, [r3, #96]	; 0x60
 800105e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	9b01      	ldr	r3, [sp, #4]
	eError result = RET_OK;
 8001068:	2000      	movs	r0, #0
 800106a:	e7c3      	b.n	8000ff4 <SystemClock_Config+0x50>
 800106c:	0800407c 	.word	0x0800407c
 8001070:	10624dd3 	.word	0x10624dd3
 8001074:	40021000 	.word	0x40021000

08001078 <RTCSetInitDateTime>:
{
 8001078:	b510      	push	{r4, lr}
 800107a:	b086      	sub	sp, #24
	sTime.Hours = 0x0;
 800107c:	2300      	movs	r3, #0
 800107e:	f88d 3004 	strb.w	r3, [sp, #4]
	sTime.Minutes = 0x0;
 8001082:	f88d 3005 	strb.w	r3, [sp, #5]
	sTime.Seconds = 0x0;
 8001086:	f88d 3006 	strb.w	r3, [sp, #6]
	sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	f88d 2007 	strb.w	r2, [sp, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001090:	9304      	str	r3, [sp, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001092:	9305      	str	r3, [sp, #20]
	if (RTCHandler.Instance != NULL) //RTC initialized
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <RTCSetInitDateTime+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	b1f3      	cbz	r3, 80010d8 <RTCSetInitDateTime+0x60>
		if (HAL_RTC_SetTime(&RTCHandler, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800109a:	2201      	movs	r2, #1
 800109c:	a901      	add	r1, sp, #4
 800109e:	480f      	ldr	r0, [pc, #60]	; (80010dc <RTCSetInitDateTime+0x64>)
 80010a0:	f001 fce1 	bl	8002a66 <HAL_RTC_SetTime>
 80010a4:	b920      	cbnz	r0, 80010b0 <RTCSetInitDateTime+0x38>
	eError result = RET_OK;
 80010a6:	2400      	movs	r4, #0
		if (result == RET_OK)
 80010a8:	b124      	cbz	r4, 80010b4 <RTCSetInitDateTime+0x3c>
}
 80010aa:	4620      	mov	r0, r4
 80010ac:	b006      	add	sp, #24
 80010ae:	bd10      	pop	{r4, pc}
			result = RET_FAIL;
 80010b0:	2401      	movs	r4, #1
 80010b2:	e7f9      	b.n	80010a8 <RTCSetInitDateTime+0x30>
			sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010b4:	2201      	movs	r2, #1
 80010b6:	f88d 2000 	strb.w	r2, [sp]
			sDate.Month = RTC_MONTH_JANUARY;
 80010ba:	f88d 2001 	strb.w	r2, [sp, #1]
			sDate.Date = 0x1;
 80010be:	f88d 2002 	strb.w	r2, [sp, #2]
			sDate.Year = 0x0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f88d 3003 	strb.w	r3, [sp, #3]
			if (HAL_RTC_SetDate(&RTCHandler, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010c8:	4669      	mov	r1, sp
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <RTCSetInitDateTime+0x64>)
 80010cc:	f001 fd53 	bl	8002b76 <HAL_RTC_SetDate>
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d0ea      	beq.n	80010aa <RTCSetInitDateTime+0x32>
				result = RET_FAIL;
 80010d4:	2401      	movs	r4, #1
 80010d6:	e7e8      	b.n	80010aa <RTCSetInitDateTime+0x32>
	eError result = RET_OK;
 80010d8:	2400      	movs	r4, #0
 80010da:	e7e6      	b.n	80010aa <RTCSetInitDateTime+0x32>
 80010dc:	200000fc 	.word	0x200000fc

080010e0 <RTCInit>:
{
 80010e0:	b500      	push	{lr}
 80010e2:	b083      	sub	sp, #12
	__HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <RTCInit+0x50>)
 80010e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010ec:	659a      	str	r2, [r3, #88]	; 0x58
 80010ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010f0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80010f4:	9201      	str	r2, [sp, #4]
 80010f6:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_RTC_ENABLE();
 80010f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80010fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	__HAL_RTC_RESET_HANDLE_STATE(&RTCHandler);
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <RTCInit+0x54>)
 8001106:	2300      	movs	r3, #0
 8001108:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	RTCHandler.Instance = RTC;
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <RTCInit+0x58>)
 800110e:	6002      	str	r2, [r0, #0]
	RTCHandler.Init.HourFormat = RTC_HOURFORMAT_24;
 8001110:	6043      	str	r3, [r0, #4]
	RTCHandler.Init.AsynchPrediv = 127;
 8001112:	227f      	movs	r2, #127	; 0x7f
 8001114:	6082      	str	r2, [r0, #8]
	RTCHandler.Init.SynchPrediv = 0xF9;//aux;
 8001116:	22f9      	movs	r2, #249	; 0xf9
 8001118:	60c2      	str	r2, [r0, #12]
	RTCHandler.Init.OutPut = RTC_OUTPUT_DISABLE;
 800111a:	6103      	str	r3, [r0, #16]
	RTCHandler.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800111c:	6183      	str	r3, [r0, #24]
	RTCHandler.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800111e:	61c3      	str	r3, [r0, #28]
	HAL_RTC_Init(&RTCHandler);
 8001120:	f001 fc2c 	bl	800297c <HAL_RTC_Init>
	RTCSetInitDateTime();
 8001124:	f7ff ffa8 	bl	8001078 <RTCSetInitDateTime>
}
 8001128:	b003      	add	sp, #12
 800112a:	f85d fb04 	ldr.w	pc, [sp], #4
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	200000fc 	.word	0x200000fc
 8001138:	40002800 	.word	0x40002800

0800113c <stm32L4Init>:
{
 800113c:	b508      	push	{r3, lr}
	storePowerUpReason();
 800113e:	f7ff fed5 	bl	8000eec <storePowerUpReason>
	result = SystemClock_Config();
 8001142:	f7ff ff2f 	bl	8000fa4 <SystemClock_Config>
	if (result == RET_OK)
 8001146:	4603      	mov	r3, r0
 8001148:	b108      	cbz	r0, 800114e <stm32L4Init+0x12>
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd08      	pop	{r3, pc}
			RTCInit();
 800114e:	f7ff ffc7 	bl	80010e0 <RTCInit>
			result = watchdogInit();
 8001152:	f7ff ff25 	bl	8000fa0 <watchdogInit>
 8001156:	4603      	mov	r3, r0
 8001158:	e7f7      	b.n	800114a <stm32L4Init+0xe>

0800115a <systemGetCLkFreq>:
 * @brief   Get the System CLK Frequency
 * @param   ClockFrequency.
 * @return  eError.
 ****************************************************************************/
eError systemGetCLkFreq(uint32_t *ClockFrequency)
{
 800115a:	b510      	push	{r4, lr}
 800115c:	4604      	mov	r4, r0
    eError result = RET_OK;

    *ClockFrequency = HAL_RCC_GetHCLKFreq();
 800115e:	f001 f925 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 8001162:	6020      	str	r0, [r4, #0]

    return result;
}
 8001164:	2000      	movs	r0, #0
 8001166:	bd10      	pop	{r4, pc}

08001168 <systemPreConfiguration>:
 *    then it will jump to execute the interrupt handler located in the Flash
 * @param	None.
 * @return  None.
 ****************************************************************************/
void systemPreConfiguration( void )
{
 8001168:	4770      	bx	lr
	...

0800116c <spiRestartSlaveMode>:
/****************************************************************************
 *    PUBLIC FUNCTIONS
 ****************************************************************************/

static void spiRestartSlaveMode(SPI_HandleTypeDef *hspi)
{
 800116c:	b508      	push	{r3, lr}
    uint8_t i;
#ifdef IS_SPI1
    if (hspi->Instance == SPI1){
 800116e:	6802      	ldr	r2, [r0, #0]
    if (hspi->Instance == SPI2){
        i = SPI_2;
    }
#endif
#ifdef IS_SPI3
    if (hspi->Instance == SPI3){
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <spiRestartSlaveMode+0x30>)
 8001172:	429a      	cmp	r2, r3
 8001174:	d003      	beq.n	800117e <spiRestartSlaveMode+0x12>
 8001176:	2100      	movs	r1, #0
        i = SPI_3;
    }
#endif

    if(hspi->Init.Mode == SPI_MODE_SLAVE) {
 8001178:	6843      	ldr	r3, [r0, #4]
 800117a:	b113      	cbz	r3, 8001182 <spiRestartSlaveMode+0x16>
 800117c:	bd08      	pop	{r3, pc}
        i = SPI_3;
 800117e:	2101      	movs	r1, #1
 8001180:	e7fa      	b.n	8001178 <spiRestartSlaveMode+0xc>
        HAL_SPI_Receive_IT(hspi, halRxSlaveBuffer[i], SPIInstanceMap[i].rxBufferSize);
 8001182:	008b      	lsls	r3, r1, #2
 8001184:	440b      	add	r3, r1
 8001186:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <spiRestartSlaveMode+0x34>)
 8001188:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800118c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001190:	4904      	ldr	r1, [pc, #16]	; (80011a4 <spiRestartSlaveMode+0x38>)
 8001192:	4419      	add	r1, r3
 8001194:	f001 ff62 	bl	800305c <HAL_SPI_Receive_IT>
    }
}
 8001198:	e7f0      	b.n	800117c <spiRestartSlaveMode+0x10>
 800119a:	bf00      	nop
 800119c:	40003c00 	.word	0x40003c00
 80011a0:	080040d0 	.word	0x080040d0
 80011a4:	20000218 	.word	0x20000218

080011a8 <HAL_SPI_ErrorCallback>:
}

/**
 * When an error ocurred. If it's SLAVE mode. Start Listening again
 **/
void  HAL_SPI_ErrorCallback (SPI_HandleTypeDef *hspi){
 80011a8:	b508      	push	{r3, lr}
    spiRestartSlaveMode(hspi);
 80011aa:	f7ff ffdf 	bl	800116c <spiRestartSlaveMode>
 80011ae:	bd08      	pop	{r3, pc}

080011b0 <HAL_SPI_MspInit>:
  *           - NVIC configuration for SPI interrupt request enable (SHOULD NOT BE DONE HERE)
  * @param hspi: SPI handle pointer
  * @retval None
 ****************************************************************************/
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80011b0:	b082      	sub	sp, #8
#if defined(IS_SPI1)
    if (hspi->Instance == SPI1){
 80011b2:	6802      	ldr	r2, [r0, #0]
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_SPI_MspInit+0x48>)
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d005      	beq.n	80011c6 <HAL_SPI_MspInit+0x16>
        __HAL_RCC_SPI2_CLK_ENABLE();
    }
#endif

#if defined(IS_SPI3)
    if (hspi->Instance == SPI3){
 80011ba:	6802      	ldr	r2, [r0, #0]
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_SPI_MspInit+0x4c>)
 80011be:	429a      	cmp	r2, r3
 80011c0:	d00d      	beq.n	80011de <HAL_SPI_MspInit+0x2e>
        /* Enable SPI clock */
        __HAL_RCC_SPI3_CLK_ENABLE();
    }
#endif
}
 80011c2:	b002      	add	sp, #8
 80011c4:	4770      	bx	lr
        __HAL_RCC_SPI1_CLK_ENABLE();
 80011c6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80011ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011d0:	661a      	str	r2, [r3, #96]	; 0x60
 80011d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	9b00      	ldr	r3, [sp, #0]
 80011dc:	e7ed      	b.n	80011ba <HAL_SPI_MspInit+0xa>
        __HAL_RCC_SPI3_CLK_ENABLE();
 80011de:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80011e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011e8:	659a      	str	r2, [r3, #88]	; 0x58
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	9b01      	ldr	r3, [sp, #4]
}
 80011f4:	e7e5      	b.n	80011c2 <HAL_SPI_MspInit+0x12>
 80011f6:	bf00      	nop
 80011f8:	40013000 	.word	0x40013000
 80011fc:	40003c00 	.word	0x40003c00

08001200 <HAL_SPI_MspDeInit>:
 * @param hspi ST Handler
 ****************************************************************************/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
#if defined(IS_SPI1)
    if(hspi->Instance == SPI1){
 8001200:	6802      	ldr	r2, [r0, #0]
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_SPI_MspDeInit+0x40>)
 8001204:	429a      	cmp	r2, r3
 8001206:	d004      	beq.n	8001212 <HAL_SPI_MspDeInit+0x12>
        __HAL_RCC_SPI2_RELEASE_RESET();
    }
#endif

#if defined(IS_SPI3)
    if(hspi->Instance == SPI3){
 8001208:	6802      	ldr	r2, [r0, #0]
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_SPI_MspDeInit+0x44>)
 800120c:	429a      	cmp	r2, r3
 800120e:	d00b      	beq.n	8001228 <HAL_SPI_MspDeInit+0x28>
 8001210:	4770      	bx	lr
        __HAL_RCC_SPI1_FORCE_RESET();
 8001212:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001218:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_RCC_SPI1_RELEASE_RESET();
 800121e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001220:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001224:	641a      	str	r2, [r3, #64]	; 0x40
 8001226:	e7ef      	b.n	8001208 <HAL_SPI_MspDeInit+0x8>
        __HAL_RCC_SPI3_FORCE_RESET();
 8001228:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800122c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800122e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001232:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_SPI3_RELEASE_RESET();
 8001234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001236:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800123a:	639a      	str	r2, [r3, #56]	; 0x38
    }
#endif
}
 800123c:	e7e8      	b.n	8001210 <HAL_SPI_MspDeInit+0x10>
 800123e:	bf00      	nop
 8001240:	40013000 	.word	0x40013000
 8001244:	40003c00 	.word	0x40003c00

08001248 <spiDriverMainIRQHandler>:
 * 3) Prepare For Slave mode lecture in case the spiPort is a slave
 *
 * @param  spiPort Which port caused the interrupt
 ****************************************************************************/
void spiDriverMainIRQHandler(tSpiPort spiPort)
{
 8001248:	b570      	push	{r4, r5, r6, lr}
 800124a:	4604      	mov	r4, r0
    SPI_HandleTypeDef* hspi; //ST HAL SPI
    const tSpiInstanceMap* mspi;
    uint16_t interrupt;
    uint8_t byte;

    hspi        = &ST_SpiHandlers[spiPort];
 800124c:	2364      	movs	r3, #100	; 0x64
 800124e:	fb03 f300 	mul.w	r3, r3, r0
 8001252:	4a32      	ldr	r2, [pc, #200]	; (800131c <spiDriverMainIRQHandler+0xd4>)
 8001254:	1898      	adds	r0, r3, r2
    uint32_t itsource = hspi->Instance->CR2;
 8001256:	589b      	ldr	r3, [r3, r2]
 8001258:	6859      	ldr	r1, [r3, #4]
    uint32_t itflag   = hspi->Instance->SR;
 800125a:	689b      	ldr	r3, [r3, #8]
    if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800125c:	f003 0241 	and.w	r2, r3, #65	; 0x41
 8001260:	2a01      	cmp	r2, #1
 8001262:	d007      	beq.n	8001274 <spiDriverMainIRQHandler+0x2c>
    else if(((itflag & SPI_FLAG_TXE) != RESET) &&
 8001264:	f013 0f02 	tst.w	r3, #2
 8001268:	d009      	beq.n	800127e <spiDriverMainIRQHandler+0x36>
 800126a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800126e:	d10c      	bne.n	800128a <spiDriverMainIRQHandler+0x42>
    return SPI_IT_ERR;
 8001270:	2520      	movs	r5, #32
 8001272:	e005      	b.n	8001280 <spiDriverMainIRQHandler+0x38>
            ((itflag & SPI_FLAG_RXNE) != RESET) &&
 8001274:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001278:	d0f4      	beq.n	8001264 <spiDriverMainIRQHandler+0x1c>
        return SPI_IT_RXNE;
 800127a:	2540      	movs	r5, #64	; 0x40
 800127c:	e000      	b.n	8001280 <spiDriverMainIRQHandler+0x38>
    return SPI_IT_ERR;
 800127e:	2520      	movs	r5, #32
    mspi        = &SPIInstanceMap[spiPort];
    interrupt   = interruptType(hspi);

    HAL_SPI_IRQHandler(hspi);
 8001280:	f002 f87e 	bl	8003380 <HAL_SPI_IRQHandler>

    //If it was a read. Check what we read and put it in our buffer
    //+call any defined callback
    if(interrupt == SPI_IT_RXNE){
 8001284:	2d40      	cmp	r5, #64	; 0x40
 8001286:	d002      	beq.n	800128e <spiDriverMainIRQHandler+0x46>
 8001288:	bd70      	pop	{r4, r5, r6, pc}
        return SPI_IT_TXE;
 800128a:	2580      	movs	r5, #128	; 0x80
 800128c:	e7f8      	b.n	8001280 <spiDriverMainIRQHandler+0x38>
        //We'll retrieve whatever is already writtern in the buffer
        byte = *(hspi->pRxBuffPtr-1);
 800128e:	2364      	movs	r3, #100	; 0x64
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <spiDriverMainIRQHandler+0xd4>)
 8001292:	fb03 2304 	mla	r3, r3, r4, r2
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f813 5c01 	ldrb.w	r5, [r3, #-1]

        //Process the BYTE
        if(mspi->rxCallback!= NULL){
 800129c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80012a0:	011a      	lsls	r2, r3, #4
 80012a2:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <spiDriverMainIRQHandler+0xd8>)
 80012a4:	4413      	add	r3, r2
 80012a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a8:	b34b      	cbz	r3, 80012fe <spiDriverMainIRQHandler+0xb6>
            mspi->rxCallback(byte);
 80012aa:	4628      	mov	r0, r5
 80012ac:	4798      	blx	r3
        }

        /* In Slave mode will re-enable
        * interrupts and reset the ST handler as appropiate to continue
        * listening*/
        if(hspi->Init.Mode == SPI_MODE_SLAVE){
 80012ae:	2364      	movs	r3, #100	; 0x64
 80012b0:	4a1a      	ldr	r2, [pc, #104]	; (800131c <spiDriverMainIRQHandler+0xd4>)
 80012b2:	fb03 2304 	mla	r3, r3, r4, r2
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1e5      	bne.n	8001288 <spiDriverMainIRQHandler+0x40>
            hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80012bc:	2364      	movs	r3, #100	; 0x64
 80012be:	fb03 2304 	mla	r3, r3, r4, r2
 80012c2:	2204      	movs	r2, #4
 80012c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
            hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80012c8:	2200      	movs	r2, #0
 80012ca:	661a      	str	r2, [r3, #96]	; 0x60
            hspi->pRxBuffPtr  = halRxSlaveBuffer[spiPort];
 80012cc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80012d0:	4914      	ldr	r1, [pc, #80]	; (8001324 <spiDriverMainIRQHandler+0xdc>)
 80012d2:	440a      	add	r2, r1
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
            hspi->RxXferSize  = RX_HAL_BUFFER_SIZE;
 80012d6:	2205      	movs	r2, #5
 80012d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
            hspi->RxXferCount = RX_HAL_BUFFER_SIZE;
 80012dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

            if(hspi->RxXferCount == 0){
 80012e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ce      	bne.n	8001288 <spiDriverMainIRQHandler+0x40>
                __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80012ea:	2364      	movs	r3, #100	; 0x64
 80012ec:	fb03 f404 	mul.w	r4, r3, r4
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <spiDriverMainIRQHandler+0xd4>)
 80012f2:	591a      	ldr	r2, [r3, r4]
 80012f4:	6853      	ldr	r3, [r2, #4]
 80012f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012fa:	6053      	str	r3, [r2, #4]
            }
        }
    }
}
 80012fc:	e7c4      	b.n	8001288 <spiDriverMainIRQHandler+0x40>
            if(GetQueueFreeBytes(&spiCBuffers[spiPort].rxBuffer) > 0){
 80012fe:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001302:	00d3      	lsls	r3, r2, #3
 8001304:	4e08      	ldr	r6, [pc, #32]	; (8001328 <spiDriverMainIRQHandler+0xe0>)
 8001306:	441e      	add	r6, r3
 8001308:	4630      	mov	r0, r6
 800130a:	f7ff fb81 	bl	8000a10 <GetQueueFreeBytes>
 800130e:	2800      	cmp	r0, #0
 8001310:	d0cd      	beq.n	80012ae <spiDriverMainIRQHandler+0x66>
                AddQueueByte(&spiCBuffers[spiPort].rxBuffer, byte);
 8001312:	4629      	mov	r1, r5
 8001314:	4630      	mov	r0, r6
 8001316:	f7ff fb4c 	bl	80009b2 <AddQueueByte>
 800131a:	e7c8      	b.n	80012ae <spiDriverMainIRQHandler+0x66>
 800131c:	20000120 	.word	0x20000120
 8001320:	080040d0 	.word	0x080040d0
 8001324:	20000218 	.word	0x20000218
 8001328:	200001e8 	.word	0x200001e8

0800132c <spiInit>:
 *         any microcontroller register
 *
 * @return RET_OK or RET_FAIL
 ****************************************************************************/
eError spiInit(void)
{
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eError result = RET_OK;
    SPI_HandleTypeDef* hspi;
    const tSpiInstanceMap* mspi;
    uint8_t i;

    for(i=0; i<NUM_OF_SPI; i++) {
 800132e:	2500      	movs	r5, #0
 8001330:	e03a      	b.n	80013a8 <spiInit+0x7c>
        hspi                         = &ST_SpiHandlers[i];
        mspi                         = &SPIInstanceMap[i];
        hspi->Instance               = mspi->port;
 8001332:	491f      	ldr	r1, [pc, #124]	; (80013b0 <spiInit+0x84>)
 8001334:	00ab      	lsls	r3, r5, #2
 8001336:	442b      	add	r3, r5
 8001338:	011a      	lsls	r2, r3, #4
 800133a:	188c      	adds	r4, r1, r2
 800133c:	5888      	ldr	r0, [r1, r2]
 800133e:	491d      	ldr	r1, [pc, #116]	; (80013b4 <spiInit+0x88>)
 8001340:	2264      	movs	r2, #100	; 0x64
 8001342:	fb02 f205 	mul.w	r2, r2, r5
 8001346:	188b      	adds	r3, r1, r2
 8001348:	5088      	str	r0, [r1, r2]
        hspi->Init.BaudRatePrescaler = mspi->bratePreescale;
 800134a:	68a2      	ldr	r2, [r4, #8]
 800134c:	61da      	str	r2, [r3, #28]
        hspi->Init.Direction         = mspi->direction;
 800134e:	68e2      	ldr	r2, [r4, #12]
 8001350:	609a      	str	r2, [r3, #8]
        hspi->Init.CLKPhase          = mspi->clkPhase;
 8001352:	6922      	ldr	r2, [r4, #16]
 8001354:	615a      	str	r2, [r3, #20]
        hspi->Init.CLKPolarity       = mspi->clkPol;
 8001356:	6962      	ldr	r2, [r4, #20]
 8001358:	611a      	str	r2, [r3, #16]
        hspi->Init.CRCCalculation    = mspi->crcCal;
 800135a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
        hspi->Init.CRCPolynomial     = mspi->crcPol;
 800135e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
        hspi->Init.CRCLength		 = mspi->crcLength;
 8001362:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001364:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->Init.DataSize          = mspi->dataSize;
 8001366:	69a2      	ldr	r2, [r4, #24]
 8001368:	60da      	str	r2, [r3, #12]
        hspi->Init.FirstBit          = mspi->firstBit;
 800136a:	69e2      	ldr	r2, [r4, #28]
 800136c:	621a      	str	r2, [r3, #32]
        hspi->Init.NSS               = mspi->NSS;
 800136e:	6a22      	ldr	r2, [r4, #32]
 8001370:	619a      	str	r2, [r3, #24]
        hspi->Init.NSSPMode			 = mspi->NSSPMode;
 8001372:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
        hspi->Init.TIMode            = mspi->TIMMode;
 8001376:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
        hspi->Init.Mode              = mspi->mode;
 800137a:	6862      	ldr	r2, [r4, #4]
 800137c:	605a      	str	r2, [r3, #4]



#if defined(MON_SPI_TX_IT) || defined(MON_SPI_RX_IT)
		CreateQueue(&spiCBuffers[i].rxBuffer,
 800137e:	006e      	lsls	r6, r5, #1
 8001380:	1973      	adds	r3, r6, r5
 8001382:	00d8      	lsls	r0, r3, #3
 8001384:	4f0c      	ldr	r7, [pc, #48]	; (80013b8 <spiInit+0x8c>)
 8001386:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800138a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800138c:	4438      	add	r0, r7
 800138e:	f7ff fb09 	bl	80009a4 <CreateQueue>
                SPIInstanceMap[i].rxBufferPtr,
                SPIInstanceMap[i].rxBufferSize);

		CreateQueue(&spiCBuffers[i].txBuffer,
 8001392:	442e      	add	r6, r5
 8001394:	00f0      	lsls	r0, r6, #3
 8001396:	3008      	adds	r0, #8
 8001398:	4438      	add	r0, r7
 800139a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800139c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800139e:	3004      	adds	r0, #4
 80013a0:	f7ff fb00 	bl	80009a4 <CreateQueue>
    for(i=0; i<NUM_OF_SPI; i++) {
 80013a4:	3501      	adds	r5, #1
 80013a6:	b2ed      	uxtb	r5, r5
 80013a8:	2d01      	cmp	r5, #1
 80013aa:	d9c2      	bls.n	8001332 <spiInit+0x6>
                SPIInstanceMap[i].txBufferSize);
#endif
    }

    return result;
}
 80013ac:	2000      	movs	r0, #0
 80013ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013b0:	080040d0 	.word	0x080040d0
 80013b4:	20000120 	.word	0x20000120
 80013b8:	200001e8 	.word	0x200001e8

080013bc <spiStart>:
 * @brief  Star the SPI handler. Called after init, sets up the microcontroller
 *         to work with SPI
 * @return RET_OK or RET_FAIL
 ****************************************************************************/
eError spiStart(void)
{
 80013bc:	b538      	push	{r3, r4, r5, lr}
    uint8_t i;
    SPI_HandleTypeDef*  hspi;  //HAL spi

    for(i=0; i<NUM_OF_SPI; i++) {
 80013be:	2400      	movs	r4, #0
 80013c0:	e001      	b.n	80013c6 <spiStart+0xa>
 80013c2:	3401      	adds	r4, #1
 80013c4:	b2e4      	uxtb	r4, r4
 80013c6:	2c01      	cmp	r4, #1
 80013c8:	d81e      	bhi.n	8001408 <spiStart+0x4c>
        hspi = &ST_SpiHandlers[i];
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <spiStart+0x50>)
 80013cc:	2564      	movs	r5, #100	; 0x64
 80013ce:	fb05 3504 	mla	r5, r5, r4, r3
        HAL_SPI_DeInit(hspi);
 80013d2:	4628      	mov	r0, r5
 80013d4:	f001 fdaf 	bl	8002f36 <HAL_SPI_DeInit>
        HAL_SPI_Init(hspi);
 80013d8:	4628      	mov	r0, r5
 80013da:	f001 fd54 	bl	8002e86 <HAL_SPI_Init>
        /* Configure Generic communication so we can use the HAL
        * IRQ functions to retrieve the data, but not use the HAL_RECEIVE_IT
        * functions since we'll set the RXNE interrupt. We are using here a
        * halRxSlaveBuffer to configure the ST HAL, but we'll be using our own buffers
        * */
        if(SPIInstanceMap[i].mode == SPI_MODE_SLAVE){
 80013de:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80013e2:	011a      	lsls	r2, r3, #4
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <spiStart+0x54>)
 80013e6:	4413      	add	r3, r2
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1e9      	bne.n	80013c2 <spiStart+0x6>
            HAL_SPI_Receive_IT(hspi, halRxSlaveBuffer[i], SPIInstanceMap[i].rxBufferSize);
 80013ee:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <spiStart+0x54>)
 80013f4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80013f8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <spiStart+0x58>)
 80013fe:	4419      	add	r1, r3
 8001400:	4628      	mov	r0, r5
 8001402:	f001 fe2b 	bl	800305c <HAL_SPI_Receive_IT>
 8001406:	e7dc      	b.n	80013c2 <spiStart+0x6>
        }
    }

    return RET_OK;
}
 8001408:	2000      	movs	r0, #0
 800140a:	bd38      	pop	{r3, r4, r5, pc}
 800140c:	20000120 	.word	0x20000120
 8001410:	080040d0 	.word	0x080040d0
 8001414:	20000218 	.word	0x20000218

08001418 <HAL_UART_MspInit>:
 * @brief HAL callback for UART initialization. Starts the clocks
 * @todo Also starts interrupts, but it's not supposed to do so
 * @param huart ST Huart handler
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001418:	b082      	sub	sp, #8
    if(huart->Instance == USART1){
 800141a:	6803      	ldr	r3, [r0, #0]
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_UART_MspInit+0x4c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d004      	beq.n	800142c <HAL_UART_MspInit+0x14>
        __HAL_RCC_USART1_CLK_ENABLE();
    }
    else if (huart->Instance == USART2){
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <HAL_UART_MspInit+0x50>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d00c      	beq.n	8001442 <HAL_UART_MspInit+0x2a>

#if defined(MON_UART_RX_IT)
    /* Enable the UART Data Register not empty Interrupt. ALWAYS ENABLED */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
#endif
}
 8001428:	b002      	add	sp, #8
 800142a:	4770      	bx	lr
        __HAL_RCC_USART1_CLK_ENABLE();
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_UART_MspInit+0x54>)
 800142e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001434:	661a      	str	r2, [r3, #96]	; 0x60
 8001436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	9b00      	ldr	r3, [sp, #0]
 8001440:	e009      	b.n	8001456 <HAL_UART_MspInit+0x3e>
        __HAL_RCC_USART2_CLK_ENABLE();
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_UART_MspInit+0x54>)
 8001444:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001446:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800144a:	659a      	str	r2, [r3, #88]	; 0x58
 800144c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9b01      	ldr	r3, [sp, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001456:	6802      	ldr	r2, [r0, #0]
 8001458:	6813      	ldr	r3, [r2, #0]
 800145a:	f043 0320 	orr.w	r3, r3, #32
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e7e2      	b.n	8001428 <HAL_UART_MspInit+0x10>
 8001462:	bf00      	nop
 8001464:	40013800 	.word	0x40013800
 8001468:	40004400 	.word	0x40004400
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_UART_MspDeInit>:
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
    if(huart->Instance == USART1){
 8001470:	6803      	ldr	r3, [r0, #0]
 8001472:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <HAL_UART_MspDeInit+0x38>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d003      	beq.n	8001480 <HAL_UART_MspDeInit+0x10>
        __HAL_RCC_USART1_FORCE_RESET();
        __HAL_RCC_USART1_RELEASE_RESET();
    }
    else if (huart->Instance == USART2){
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <HAL_UART_MspDeInit+0x3c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00a      	beq.n	8001494 <HAL_UART_MspDeInit+0x24>
 800147e:	4770      	bx	lr
        __HAL_RCC_USART1_FORCE_RESET();
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_UART_MspDeInit+0x40>)
 8001482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_RCC_USART1_RELEASE_RESET();
 800148a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800148c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
 8001492:	4770      	bx	lr
        __HAL_RCC_USART2_FORCE_RESET();
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_UART_MspDeInit+0x40>)
 8001496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001498:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800149c:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_USART2_RELEASE_RESET();
 800149e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014a0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80014a4:	639a      	str	r2, [r3, #56]	; 0x38
    else if (huart->Instance == USART6){
        __HAL_RCC_USART6_FORCE_RESET();
        __HAL_RCC_USART6_RELEASE_RESET();
    }
#endif
}
 80014a6:	e7ea      	b.n	800147e <HAL_UART_MspDeInit+0xe>
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40004400 	.word	0x40004400
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_UART_TxCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
****************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	b082      	sub	sp, #8
	uint8_t byte;
	if ( GetQueuePendingBytes(&uartCBuffers[uartPortIrq].txBuffer) != 0)
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <HAL_UART_TxCpltCallback+0x70>)
 80014ba:	f993 3000 	ldrsb.w	r3, [r3]
 80014be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014c2:	00d8      	lsls	r0, r3, #3
 80014c4:	3008      	adds	r0, #8
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_UART_TxCpltCallback+0x74>)
 80014c8:	4418      	add	r0, r3
 80014ca:	3004      	adds	r0, #4
 80014cc:	f7ff fa9e 	bl	8000a0c <GetQueuePendingBytes>
 80014d0:	b968      	cbnz	r0, 80014ee <HAL_UART_TxCpltCallback+0x3a>
		 byte = (uint8_t)(GetQueueByte(&uartCBuffers[uartPortIrq].txBuffer) & (uint8_t)0xFF);
		 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPortIrq], &byte, 1);
	}
	else
	{
		 __HAL_UART_DISABLE_IT(&ST_UartHandlers[uartPortIrq], UART_IT_TXE);
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_UART_TxCpltCallback+0x70>)
 80014d4:	f993 3000 	ldrsb.w	r3, [r3]
 80014d8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80014dc:	00da      	lsls	r2, r3, #3
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <HAL_UART_TxCpltCallback+0x78>)
 80014e0:	589a      	ldr	r2, [r3, r2]
 80014e2:	6813      	ldr	r3, [r2, #0]
 80014e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014e8:	6013      	str	r3, [r2, #0]
	}
}
 80014ea:	b002      	add	sp, #8
 80014ec:	bd10      	pop	{r4, pc}
		 byte = (uint8_t)(GetQueueByte(&uartCBuffers[uartPortIrq].txBuffer) & (uint8_t)0xFF);
 80014ee:	4c0d      	ldr	r4, [pc, #52]	; (8001524 <HAL_UART_TxCpltCallback+0x70>)
 80014f0:	f994 3000 	ldrsb.w	r3, [r4]
 80014f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014f8:	00d8      	lsls	r0, r3, #3
 80014fa:	3008      	adds	r0, #8
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_UART_TxCpltCallback+0x74>)
 80014fe:	4418      	add	r0, r3
 8001500:	3004      	adds	r0, #4
 8001502:	f7ff fa6d 	bl	80009e0 <GetQueueByte>
 8001506:	a902      	add	r1, sp, #8
 8001508:	f801 0d01 	strb.w	r0, [r1, #-1]!
		 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPortIrq], &byte, 1);
 800150c:	f994 3000 	ldrsb.w	r3, [r4]
 8001510:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001514:	00d8      	lsls	r0, r3, #3
 8001516:	2201      	movs	r2, #1
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_UART_TxCpltCallback+0x78>)
 800151a:	4418      	add	r0, r3
 800151c:	f002 f834 	bl	8003588 <HAL_UART_Transmit_IT>
 8001520:	e7e3      	b.n	80014ea <HAL_UART_TxCpltCallback+0x36>
 8001522:	bf00      	nop
 8001524:	20000073 	.word	0x20000073
 8001528:	20000420 	.word	0x20000420
 800152c:	20000440 	.word	0x20000440

08001530 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callback.
 * @param  huart: pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 ****************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001530:	b510      	push	{r4, lr}
 8001532:	4604      	mov	r4, r0
	const tUartInstanceMap* muart; //Montseny handler

	muart = &UARTInstanceMap[uartPortIrq];
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_UART_RxCpltCallback+0x60>)
 8001536:	f993 2000 	ldrsb.w	r2, [r3]

	//IF callback defined use it. Otherwise, default behaviour
	if(muart->rxCallback != NULL){
 800153a:	232c      	movs	r3, #44	; 0x2c
 800153c:	4915      	ldr	r1, [pc, #84]	; (8001594 <HAL_UART_RxCpltCallback+0x64>)
 800153e:	fb03 1302 	mla	r3, r3, r2, r1
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	b143      	cbz	r3, 8001558 <HAL_UART_RxCpltCallback+0x28>
		muart->rxCallback(byteRxBuffer);
 8001546:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_UART_RxCpltCallback+0x68>)
 8001548:	7810      	ldrb	r0, [r2, #0]
 800154a:	4798      	blx	r3
		else{
			uartStatus[uartPortIrq] = RET_BUFFER_FULL;
		}
	}

	 HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 800154c:	2201      	movs	r2, #1
 800154e:	4912      	ldr	r1, [pc, #72]	; (8001598 <HAL_UART_RxCpltCallback+0x68>)
 8001550:	4620      	mov	r0, r4
 8001552:	f002 f855 	bl	8003600 <HAL_UART_Receive_IT>
 8001556:	bd10      	pop	{r4, pc}
		if(GetQueueFreeBytes(&uartCBuffers[uartPortIrq].rxBuffer) > 0){
 8001558:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800155c:	00d3      	lsls	r3, r2, #3
 800155e:	480f      	ldr	r0, [pc, #60]	; (800159c <HAL_UART_RxCpltCallback+0x6c>)
 8001560:	4418      	add	r0, r3
 8001562:	f7ff fa55 	bl	8000a10 <GetQueueFreeBytes>
 8001566:	b930      	cbnz	r0, 8001576 <HAL_UART_RxCpltCallback+0x46>
			uartStatus[uartPortIrq] = RET_BUFFER_FULL;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_UART_RxCpltCallback+0x60>)
 800156a:	f993 3000 	ldrsb.w	r3, [r3]
 800156e:	2108      	movs	r1, #8
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <HAL_UART_RxCpltCallback+0x70>)
 8001572:	54d1      	strb	r1, [r2, r3]
 8001574:	e7ea      	b.n	800154c <HAL_UART_RxCpltCallback+0x1c>
			AddQueueByte(&uartCBuffers[uartPortIrq].rxBuffer, byteRxBuffer);
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_UART_RxCpltCallback+0x60>)
 8001578:	f993 3000 	ldrsb.w	r3, [r3]
 800157c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001580:	00da      	lsls	r2, r3, #3
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_UART_RxCpltCallback+0x68>)
 8001584:	7819      	ldrb	r1, [r3, #0]
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <HAL_UART_RxCpltCallback+0x6c>)
 8001588:	4410      	add	r0, r2
 800158a:	f7ff fa12 	bl	80009b2 <AddQueueByte>
 800158e:	e7dd      	b.n	800154c <HAL_UART_RxCpltCallback+0x1c>
 8001590:	20000073 	.word	0x20000073
 8001594:	08004170 	.word	0x08004170
 8001598:	200004b8 	.word	0x200004b8
 800159c:	20000420 	.word	0x20000420
 80015a0:	20000438 	.word	0x20000438

080015a4 <uartDriverMainIRQHandler>:
/*************************************************************************//**
 * @brief  Callback Handler for the UART interrupt.
 * @param  uartPort Which port caused the interrupt
 ****************************************************************************/
void uartDriverMainIRQHandler(tUart uartPort)
{
 80015a4:	b508      	push	{r3, lr}
    UART_HandleTypeDef* huart; //HAL Uart

    huart = &ST_UartHandlers[uartPort];
 80015a6:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 80015aa:	00d3      	lsls	r3, r2, #3
    uartPortIrq = uartPort;
 80015ac:	4a03      	ldr	r2, [pc, #12]	; (80015bc <uartDriverMainIRQHandler+0x18>)
 80015ae:	7010      	strb	r0, [r2, #0]
    HAL_UART_IRQHandler(huart);
 80015b0:	4803      	ldr	r0, [pc, #12]	; (80015c0 <uartDriverMainIRQHandler+0x1c>)
 80015b2:	4418      	add	r0, r3
 80015b4:	f002 f900 	bl	80037b8 <HAL_UART_IRQHandler>
 80015b8:	bd08      	pop	{r3, pc}
 80015ba:	bf00      	nop
 80015bc:	20000073 	.word	0x20000073
 80015c0:	20000440 	.word	0x20000440

080015c4 <HAL_UART_ErrorCallback>:
/*************************************************************************//**
 * @brief  Callback Handler for Errors in UART.
 * @param  huart Which port caused the interrupt
 ****************************************************************************/
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80015c4:	4770      	bx	lr
	...

080015c8 <uartInit>:
 * 		   Initializes all UART declared on UART_map list
 *
 * @return  None.
 ****************************************************************************/
eError uartInit(void)
{
 80015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eError result = RET_OK;
    UART_HandleTypeDef* huart;  //ST handler
    const tUartInstanceMap* muart;  //Montseny handler
    uint8_t i;

    for(i=0; i<NUM_OF_UART; i++) {
 80015ca:	2400      	movs	r4, #0
 80015cc:	b10c      	cbz	r4, 80015d2 <uartInit+0xa>




    return result;
}
 80015ce:	2000      	movs	r0, #0
 80015d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance        = muart->port;
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <uartInit+0x68>)
 80015d4:	232c      	movs	r3, #44	; 0x2c
 80015d6:	fb03 f304 	mul.w	r3, r3, r4
 80015da:	18d5      	adds	r5, r2, r3
 80015dc:	58d0      	ldr	r0, [r2, r3]
 80015de:	4915      	ldr	r1, [pc, #84]	; (8001634 <uartInit+0x6c>)
 80015e0:	0123      	lsls	r3, r4, #4
 80015e2:	1b1b      	subs	r3, r3, r4
 80015e4:	00da      	lsls	r2, r3, #3
 80015e6:	188b      	adds	r3, r1, r2
 80015e8:	5088      	str	r0, [r1, r2]
        huart->Init.BaudRate   = muart->baudRate;
 80015ea:	686a      	ldr	r2, [r5, #4]
 80015ec:	605a      	str	r2, [r3, #4]
        huart->Init.WordLength = muart->dataSize;
 80015ee:	7a2a      	ldrb	r2, [r5, #8]
 80015f0:	609a      	str	r2, [r3, #8]
        huart->Init.StopBits   = muart->stopBits;
 80015f2:	7aaa      	ldrb	r2, [r5, #10]
 80015f4:	60da      	str	r2, [r3, #12]
        huart->Init.Parity     = muart->parity;
 80015f6:	7a6a      	ldrb	r2, [r5, #9]
 80015f8:	611a      	str	r2, [r3, #16]
        huart->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
        huart->Init.Mode       = UART_MODE_TX_RX;
 80015fe:	210c      	movs	r1, #12
 8001600:	6159      	str	r1, [r3, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001602:	61da      	str	r2, [r3, #28]
		CreateQueue(&uartCBuffers[i].rxBuffer,
 8001604:	0066      	lsls	r6, r4, #1
 8001606:	1933      	adds	r3, r6, r4
 8001608:	00d8      	lsls	r0, r3, #3
 800160a:	4f0b      	ldr	r7, [pc, #44]	; (8001638 <uartInit+0x70>)
 800160c:	8aaa      	ldrh	r2, [r5, #20]
 800160e:	69a9      	ldr	r1, [r5, #24]
 8001610:	4438      	add	r0, r7
 8001612:	f7ff f9c7 	bl	80009a4 <CreateQueue>
		CreateQueue(&uartCBuffers[i].txBuffer,
 8001616:	4426      	add	r6, r4
 8001618:	00f0      	lsls	r0, r6, #3
 800161a:	3008      	adds	r0, #8
 800161c:	4438      	add	r0, r7
 800161e:	89aa      	ldrh	r2, [r5, #12]
 8001620:	6929      	ldr	r1, [r5, #16]
 8001622:	3004      	adds	r0, #4
 8001624:	f7ff f9be 	bl	80009a4 <CreateQueue>
    for(i=0; i<NUM_OF_UART; i++) {
 8001628:	3401      	adds	r4, #1
 800162a:	b2e4      	uxtb	r4, r4
 800162c:	e7ce      	b.n	80015cc <uartInit+0x4>
 800162e:	bf00      	nop
 8001630:	08004170 	.word	0x08004170
 8001634:	20000440 	.word	0x20000440
 8001638:	20000420 	.word	0x20000420

0800163c <uartStart>:
/*************************************************************************//**
 * @brief  Starts UART driver.
 * @return  None.
 ****************************************************************************/
eError uartStart(void)
{
 800163c:	b538      	push	{r3, r4, r5, lr}
    eError result = RET_OK;
    uint8_t i;
    UART_HandleTypeDef* huart;

    for(i=0; i<NUM_OF_UART; i++){
 800163e:	2400      	movs	r4, #0
 8001640:	b10c      	cbz	r4, 8001646 <uartStart+0xa>
#if defined(MON_UART_RX_IT) || defined(MON_UART_RX_DMA)
        HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
#endif
    }

    return result;
 8001642:	2000      	movs	r0, #0
 8001644:	bd38      	pop	{r3, r4, r5, pc}
        huart = &ST_UartHandlers[i];
 8001646:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800164a:	00dd      	lsls	r5, r3, #3
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <uartStart+0x3c>)
 800164e:	441d      	add	r5, r3
        if(HAL_UART_DeInit(huart) != HAL_OK)
 8001650:	4628      	mov	r0, r5
 8001652:	f001 ff79 	bl	8003548 <HAL_UART_DeInit>
 8001656:	b958      	cbnz	r0, 8001670 <uartStart+0x34>
        if(HAL_UART_Init(huart) != HAL_OK)
 8001658:	4628      	mov	r0, r5
 800165a:	f002 fc1c 	bl	8003e96 <HAL_UART_Init>
 800165e:	b948      	cbnz	r0, 8001674 <uartStart+0x38>
        HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8001660:	2201      	movs	r2, #1
 8001662:	4906      	ldr	r1, [pc, #24]	; (800167c <uartStart+0x40>)
 8001664:	4628      	mov	r0, r5
 8001666:	f001 ffcb 	bl	8003600 <HAL_UART_Receive_IT>
    for(i=0; i<NUM_OF_UART; i++){
 800166a:	3401      	adds	r4, #1
 800166c:	b2e4      	uxtb	r4, r4
 800166e:	e7e7      	b.n	8001640 <uartStart+0x4>
            return RET_FAIL;
 8001670:	2001      	movs	r0, #1
 8001672:	bd38      	pop	{r3, r4, r5, pc}
            return RET_FAIL;
 8001674:	2001      	movs	r0, #1
}
 8001676:	bd38      	pop	{r3, r4, r5, pc}
 8001678:	20000440 	.word	0x20000440
 800167c:	200004b8 	.word	0x200004b8

08001680 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001684:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001686:	e003      	b.n	8001690 <LoopCopyDataInit>

08001688 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800168a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800168c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800168e:	3104      	adds	r1, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001694:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001696:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001698:	d3f6      	bcc.n	8001688 <CopyDataInit>
	ldr	r2, =_sbss
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800169c:	e002      	b.n	80016a4 <LoopFillZerobss>

0800169e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800169e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016a0:	f842 3b04 	str.w	r3, [r2], #4

080016a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <LoopForever+0x16>)
	cmp	r2, r3
 80016a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016a8:	d3f9      	bcc.n	800169e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016aa:	f000 f813 	bl	80016d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ae:	f002 fc27 	bl	8003f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016b2:	f7fe ff17 	bl	80004e4 <main>

080016b6 <LoopForever>:

LoopForever:
    b LoopForever
 80016b6:	e7fe      	b.n	80016b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016b8:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 80016bc:	080041f4 	.word	0x080041f4
	ldr	r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016c4:	20000040 	.word	0x20000040
	ldr	r2, =_sbss
 80016c8:	20000040 	.word	0x20000040
	ldr	r3, = _ebss
 80016cc:	20000624 	.word	0x20000624

080016d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d0:	e7fe      	b.n	80016d0 <ADC1_IRQHandler>
	...

080016d4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d4:	490f      	ldr	r1, [pc, #60]	; (8001714 <SystemInit+0x40>)
 80016d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80016da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <SystemInit+0x44>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80016ec:	2000      	movs	r0, #0
 80016ee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80016f6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80016fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80016fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001700:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001708:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800170a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800170c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001710:	608b      	str	r3, [r1, #8]
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b510      	push	{r4, lr}
 800171e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_InitTick+0x24>)
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_InitTick+0x28>)
 8001726:	fba3 3000 	umull	r3, r0, r3, r0
 800172a:	0980      	lsrs	r0, r0, #6
 800172c:	f000 f858 	bl	80017e0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001730:	2200      	movs	r2, #0
 8001732:	4621      	mov	r1, r4
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f000 f814 	bl	8001764 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800173c:	2000      	movs	r0, #0
 800173e:	bd10      	pop	{r4, pc}
 8001740:	2000003c 	.word	0x2000003c
 8001744:	10624dd3 	.word	0x10624dd3

08001748 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001748:	4a02      	ldr	r2, [pc, #8]	; (8001754 <HAL_IncTick+0xc>)
 800174a:	6813      	ldr	r3, [r2, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000620 	.word	0x20000620

08001758 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001758:	4b01      	ldr	r3, [pc, #4]	; (8001760 <HAL_GetTick+0x8>)
 800175a:	6818      	ldr	r0, [r3, #0]
}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000620 	.word	0x20000620

08001764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_NVIC_SetPriority+0x5c>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800176e:	f1c3 0407 	rsb	r4, r3, #7
 8001772:	2c04      	cmp	r4, #4
 8001774:	bf28      	it	cs
 8001776:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001778:	1d1d      	adds	r5, r3, #4
 800177a:	2d06      	cmp	r5, #6
 800177c:	d917      	bls.n	80017ae <HAL_NVIC_SetPriority+0x4a>
 800177e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	2501      	movs	r5, #1
 8001782:	fa05 f404 	lsl.w	r4, r5, r4
 8001786:	3c01      	subs	r4, #1
 8001788:	4021      	ands	r1, r4
 800178a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	fa05 f303 	lsl.w	r3, r5, r3
 8001790:	3b01      	subs	r3, #1
 8001792:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001796:	2800      	cmp	r0, #0
 8001798:	db0b      	blt.n	80017b2 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	0109      	lsls	r1, r1, #4
 800179c:	b2c9      	uxtb	r1, r1
 800179e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017a2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017a6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017aa:	bc30      	pop	{r4, r5}
 80017ac:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ae:	2300      	movs	r3, #0
 80017b0:	e7e6      	b.n	8001780 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	f000 000f 	and.w	r0, r0, #15
 80017b6:	0109      	lsls	r1, r1, #4
 80017b8:	b2c9      	uxtb	r1, r1
 80017ba:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <HAL_NVIC_SetPriority+0x60>)
 80017bc:	5419      	strb	r1, [r3, r0]
 80017be:	e7f4      	b.n	80017aa <HAL_NVIC_SetPriority+0x46>
 80017c0:	e000ed00 	.word	0xe000ed00
 80017c4:	e000ed14 	.word	0xe000ed14

080017c8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017c8:	0942      	lsrs	r2, r0, #5
 80017ca:	f000 001f 	and.w	r0, r0, #31
 80017ce:	2301      	movs	r3, #1
 80017d0:	fa03 f000 	lsl.w	r0, r3, r0
 80017d4:	4b01      	ldr	r3, [pc, #4]	; (80017dc <HAL_NVIC_EnableIRQ+0x14>)
 80017d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	3801      	subs	r0, #1
 80017e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80017e6:	d20a      	bcs.n	80017fe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_SYSTICK_Config+0x24>)
 80017ea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ec:	21f0      	movs	r1, #240	; 0xf0
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_SYSTICK_Config+0x28>)
 80017f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f4:	2000      	movs	r0, #0
 80017f6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800180c:	2804      	cmp	r0, #4
 800180e:	d005      	beq.n	800181c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8001812:	6813      	ldr	r3, [r2, #0]
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800181c:	4a02      	ldr	r2, [pc, #8]	; (8001828 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800181e:	6813      	ldr	r3, [r2, #0]
 8001820:	f043 0304 	orr.w	r3, r3, #4
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4770      	bx	lr
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800182c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800182e:	f7ff fb40 	bl	8000eb2 <HAL_SYSTICK_Callback>
 8001832:	bd08      	pop	{r3, pc}

08001834 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001834:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001836:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d003      	beq.n	8001848 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001840:	2304      	movs	r3, #4
 8001842:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001844:	2001      	movs	r0, #1
 8001846:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001848:	6802      	ldr	r2, [r0, #0]
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	f023 030e 	bic.w	r3, r3, #14
 8001850:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001852:	6802      	ldr	r2, [r0, #0]
 8001854:	6813      	ldr	r3, [r2, #0]
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800185c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800185e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001860:	f003 031c 	and.w	r3, r3, #28
 8001864:	2201      	movs	r2, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	604b      	str	r3, [r1, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001870:	2300      	movs	r3, #0
 8001872:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001876:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001878:	b113      	cbz	r3, 8001880 <HAL_DMA_Abort_IT+0x4c>
    {
      hdma->XferAbortCallback(hdma);
 800187a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800187c:	2000      	movs	r0, #0
 800187e:	bd08      	pop	{r3, pc}
 8001880:	2000      	movs	r0, #0
    }
  }
  return status;
}
 8001882:	bd08      	pop	{r3, pc}

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001886:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 8001888:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800188a:	e08c      	b.n	80019a6 <HAL_GPIO_Init+0x122>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800188c:	08de      	lsrs	r6, r3, #3
 800188e:	3608      	adds	r6, #8
 8001890:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001894:	f003 0e07 	and.w	lr, r3, #7
 8001898:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800189c:	270f      	movs	r7, #15
 800189e:	fa07 f70e 	lsl.w	r7, r7, lr
 80018a2:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018a6:	690f      	ldr	r7, [r1, #16]
 80018a8:	fa07 f70e 	lsl.w	r7, r7, lr
 80018ac:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 80018ae:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 80018b2:	e087      	b.n	80019c4 <HAL_GPIO_Init+0x140>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018b4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80018b6:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80018b8:	68cf      	ldr	r7, [r1, #12]
 80018ba:	fa07 f70e 	lsl.w	r7, r7, lr
 80018be:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80018c0:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018c4:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018c8:	684e      	ldr	r6, [r1, #4]
 80018ca:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80018ce:	409e      	lsls	r6, r3
 80018d0:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80018d2:	6045      	str	r5, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018d4:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80018d6:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80018d8:	688d      	ldr	r5, [r1, #8]
 80018da:	fa05 f50e 	lsl.w	r5, r5, lr
 80018de:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80018e0:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e2:	684c      	ldr	r4, [r1, #4]
 80018e4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80018e8:	d05c      	beq.n	80019a4 <HAL_GPIO_Init+0x120>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4c4a      	ldr	r4, [pc, #296]	; (8001a14 <HAL_GPIO_Init+0x190>)
 80018ec:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80018ee:	f045 0501 	orr.w	r5, r5, #1
 80018f2:	6625      	str	r5, [r4, #96]	; 0x60
 80018f4:	6e24      	ldr	r4, [r4, #96]	; 0x60
 80018f6:	f004 0401 	and.w	r4, r4, #1
 80018fa:	9401      	str	r4, [sp, #4]
 80018fc:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 80018fe:	089d      	lsrs	r5, r3, #2
 8001900:	1cae      	adds	r6, r5, #2
 8001902:	4c45      	ldr	r4, [pc, #276]	; (8001a18 <HAL_GPIO_Init+0x194>)
 8001904:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001908:	f003 0603 	and.w	r6, r3, #3
 800190c:	00b6      	lsls	r6, r6, #2
 800190e:	270f      	movs	r7, #15
 8001910:	40b7      	lsls	r7, r6
 8001912:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001916:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800191a:	d070      	beq.n	80019fe <HAL_GPIO_Init+0x17a>
 800191c:	4f3f      	ldr	r7, [pc, #252]	; (8001a1c <HAL_GPIO_Init+0x198>)
 800191e:	42b8      	cmp	r0, r7
 8001920:	d06f      	beq.n	8001a02 <HAL_GPIO_Init+0x17e>
 8001922:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001926:	42b8      	cmp	r0, r7
 8001928:	d06d      	beq.n	8001a06 <HAL_GPIO_Init+0x182>
 800192a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800192e:	42b8      	cmp	r0, r7
 8001930:	d06b      	beq.n	8001a0a <HAL_GPIO_Init+0x186>
 8001932:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001936:	42b8      	cmp	r0, r7
 8001938:	d05f      	beq.n	80019fa <HAL_GPIO_Init+0x176>
 800193a:	2707      	movs	r7, #7
 800193c:	fa07 f606 	lsl.w	r6, r7, r6
 8001940:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8001942:	3502      	adds	r5, #2
 8001944:	4e34      	ldr	r6, [pc, #208]	; (8001a18 <HAL_GPIO_Init+0x194>)
 8001946:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800194a:	4c35      	ldr	r4, [pc, #212]	; (8001a20 <HAL_GPIO_Init+0x19c>)
 800194c:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800194e:	43d4      	mvns	r4, r2
 8001950:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001954:	684f      	ldr	r7, [r1, #4]
 8001956:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800195a:	d001      	beq.n	8001960 <HAL_GPIO_Init+0xdc>
        {
          temp |= iocurrent;
 800195c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8001960:	4d2f      	ldr	r5, [pc, #188]	; (8001a20 <HAL_GPIO_Init+0x19c>)
 8001962:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8001964:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8001966:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800196a:	684f      	ldr	r7, [r1, #4]
 800196c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001970:	d001      	beq.n	8001976 <HAL_GPIO_Init+0xf2>
        {
          temp |= iocurrent;
 8001972:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8001976:	4d2a      	ldr	r5, [pc, #168]	; (8001a20 <HAL_GPIO_Init+0x19c>)
 8001978:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800197a:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 800197c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001980:	684f      	ldr	r7, [r1, #4]
 8001982:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001986:	d001      	beq.n	800198c <HAL_GPIO_Init+0x108>
        {
          temp |= iocurrent;
 8001988:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800198c:	4d24      	ldr	r5, [pc, #144]	; (8001a20 <HAL_GPIO_Init+0x19c>)
 800198e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8001990:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8001992:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001994:	684e      	ldr	r6, [r1, #4]
 8001996:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800199a:	d001      	beq.n	80019a0 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 800199c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80019a0:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <HAL_GPIO_Init+0x19c>)
 80019a2:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80019a4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019a6:	680a      	ldr	r2, [r1, #0]
 80019a8:	fa32 f403 	lsrs.w	r4, r2, r3
 80019ac:	d02f      	beq.n	8001a0e <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019ae:	2501      	movs	r5, #1
 80019b0:	409d      	lsls	r5, r3
    if(iocurrent)
 80019b2:	402a      	ands	r2, r5
 80019b4:	d0f6      	beq.n	80019a4 <HAL_GPIO_Init+0x120>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b6:	684c      	ldr	r4, [r1, #4]
 80019b8:	2c02      	cmp	r4, #2
 80019ba:	f43f af67 	beq.w	800188c <HAL_GPIO_Init+0x8>
 80019be:	2c12      	cmp	r4, #18
 80019c0:	f43f af64 	beq.w	800188c <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 80019c4:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80019c6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80019ca:	2403      	movs	r4, #3
 80019cc:	fa04 f40e 	lsl.w	r4, r4, lr
 80019d0:	43e4      	mvns	r4, r4
 80019d2:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019d4:	684f      	ldr	r7, [r1, #4]
 80019d6:	f007 0703 	and.w	r7, r7, #3
 80019da:	fa07 f70e 	lsl.w	r7, r7, lr
 80019de:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80019e0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e2:	684e      	ldr	r6, [r1, #4]
 80019e4:	1e77      	subs	r7, r6, #1
 80019e6:	2f01      	cmp	r7, #1
 80019e8:	f67f af64 	bls.w	80018b4 <HAL_GPIO_Init+0x30>
 80019ec:	2e11      	cmp	r6, #17
 80019ee:	f43f af61 	beq.w	80018b4 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f2:	2e12      	cmp	r6, #18
 80019f4:	f47f af6e 	bne.w	80018d4 <HAL_GPIO_Init+0x50>
 80019f8:	e75c      	b.n	80018b4 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80019fa:	2704      	movs	r7, #4
 80019fc:	e79e      	b.n	800193c <HAL_GPIO_Init+0xb8>
 80019fe:	2700      	movs	r7, #0
 8001a00:	e79c      	b.n	800193c <HAL_GPIO_Init+0xb8>
 8001a02:	2701      	movs	r7, #1
 8001a04:	e79a      	b.n	800193c <HAL_GPIO_Init+0xb8>
 8001a06:	2702      	movs	r7, #2
 8001a08:	e798      	b.n	800193c <HAL_GPIO_Init+0xb8>
 8001a0a:	2703      	movs	r7, #3
 8001a0c:	e796      	b.n	800193c <HAL_GPIO_Init+0xb8>
  }
}
 8001a0e:	b003      	add	sp, #12
 8001a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	40010400 	.word	0x40010400

08001a24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a24:	b90a      	cbnz	r2, 8001a2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a26:	6281      	str	r1, [r0, #40]	; 0x28
 8001a28:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a2a:	6181      	str	r1, [r0, #24]
 8001a2c:	4770      	bx	lr

08001a2e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001a2e:	6943      	ldr	r3, [r0, #20]
 8001a30:	4059      	eors	r1, r3
 8001a32:	6141      	str	r1, [r0, #20]
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a38:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4203      	tst	r3, r0
 8001a40:	d100      	bne.n	8001a44 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8001a42:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001a46:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a48:	f7ff fa3b 	bl	8000ec2 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a4c:	e7f9      	b.n	8001a42 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001a4e:	bf00      	nop
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <HAL_PWREx_GetVoltageRange+0xc>)
 8001a56:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001a58:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40007000 	.word	0x40007000

08001a64 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a64:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001a68:	d00f      	beq.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a76:	d037      	beq.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0x84>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a78:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001a7a:	6813      	ldr	r3, [r2, #0]
 8001a7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a84:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001a86:	2000      	movs	r0, #0
 8001a88:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a96:	d023      	beq.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x7c>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001a9a:	6813      	ldr	r3, [r2, #0]
 8001a9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa4:	6013      	str	r3, [r2, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001aae:	f502 325b 	add.w	r2, r2, #224256	; 0x36c00
 8001ab2:	f202 2283 	addw	r2, r2, #643	; 0x283
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9a      	lsrs	r2, r3, #18
 8001abc:	2332      	movs	r3, #50	; 0x32
 8001abe:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001ac2:	e000      	b.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x62>
        wait_loop_index--;
 8001ac4:	3b01      	subs	r3, #1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001ac6:	b123      	cbz	r3, 8001ad2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ac8:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001aca:	6952      	ldr	r2, [r2, #20]
 8001acc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001ad0:	d1f8      	bne.n	8001ac4 <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001ada:	d003      	beq.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x80>
        return HAL_TIMEOUT;
 8001adc:	2003      	movs	r0, #3
 8001ade:	4770      	bx	lr
  return HAL_OK;
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	4770      	bx	lr
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	4770      	bx	lr
 8001ae8:	2000      	movs	r0, #0
}  
 8001aea:	4770      	bx	lr
 8001aec:	40007000 	.word	0x40007000
 8001af0:	2000003c 	.word	0x2000003c

08001af4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001af4:	b530      	push	{r4, r5, lr}
 8001af6:	b083      	sub	sp, #12
 8001af8:	4605      	mov	r5, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001b02:	d00b      	beq.n	8001b1c <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b04:	f7ff ffa6 	bl	8001a54 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b08:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001b0c:	d017      	beq.n	8001b3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b0e:	2d80      	cmp	r5, #128	; 0x80
 8001b10:	d81f      	bhi.n	8001b52 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b12:	d02d      	beq.n	8001b70 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b14:	2d70      	cmp	r5, #112	; 0x70
 8001b16:	d02d      	beq.n	8001b74 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b18:	2100      	movs	r1, #0
 8001b1a:	e01b      	b.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	4c17      	ldr	r4, [pc, #92]	; (8001b7c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001b1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001b30:	f7ff ff90 	bl	8001a54 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b3c:	e7e4      	b.n	8001b08 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8001b3e:	2d80      	cmp	r5, #128	; 0x80
 8001b40:	d903      	bls.n	8001b4a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8001b42:	2da0      	cmp	r5, #160	; 0xa0
 8001b44:	d903      	bls.n	8001b4e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b46:	2102      	movs	r1, #2
 8001b48:	e004      	b.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	e002      	b.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b4e:	2101      	movs	r1, #1
 8001b50:	e000      	b.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b52:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001b56:	6813      	ldr	r3, [r2, #0]
 8001b58:	f023 0307 	bic.w	r3, r3, #7
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b60:	6813      	ldr	r3, [r2, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	4299      	cmp	r1, r3
 8001b68:	d006      	beq.n	8001b78 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8001b6a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8001b6c:	b003      	add	sp, #12
 8001b6e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b70:	2102      	movs	r1, #2
 8001b72:	e7ef      	b.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b74:	2101      	movs	r1, #1
 8001b76:	e7ed      	b.n	8001b54 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8001b78:	2000      	movs	r0, #0
 8001b7a:	e7f7      	b.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x78>
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40022000 	.word	0x40022000

08001b84 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001b84:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f013 0f0c 	tst.w	r3, #12
 8001b8c:	d01a      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x40>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d00e      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x34>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b9a:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d02f      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x82>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ba6:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d02c      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001bb2:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	e018      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x66>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001bb8:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d1ea      	bne.n	8001b9a <HAL_RCC_GetSysClockFreq+0x16>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f013 0f08 	tst.w	r3, #8
 8001bcc:	d114      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x74>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd4:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 8001bd8:	4a27      	ldr	r2, [pc, #156]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bda:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f013 0f0c 	tst.w	r3, #12
 8001be6:	d00c      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x7e>
  uint32_t sysclockfreq = 0U;
 8001be8:	2000      	movs	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bea:	4a22      	ldr	r2, [pc, #136]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bec:	6893      	ldr	r3, [r2, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d00d      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0x8e>
}
 8001bf6:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c00:	e7ea      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = msirange;
 8001c02:	4608      	mov	r0, r1
 8001c04:	e7f1      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSI_VALUE;
 8001c06:	481d      	ldr	r0, [pc, #116]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xf8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001c08:	2100      	movs	r1, #0
 8001c0a:	e7ee      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSE_VALUE;
 8001c0c:	481c      	ldr	r0, [pc, #112]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xfc>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001c0e:	2100      	movs	r1, #0
 8001c10:	e7eb      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c12:	4613      	mov	r3, r2
 8001c14:	68d2      	ldr	r2, [r2, #12]
 8001c16:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001c20:	3301      	adds	r3, #1
    switch (pllsource)
 8001c22:	2a02      	cmp	r2, #2
 8001c24:	d00a      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0xb8>
 8001c26:	2a03      	cmp	r2, #3
 8001c28:	d01a      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0xdc>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c2e:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c30:	68d0      	ldr	r0, [r2, #12]
 8001c32:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001c36:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0xca>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c3c:	480f      	ldr	r0, [pc, #60]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c42:	4a0c      	ldr	r2, [pc, #48]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c44:	68d0      	ldr	r0, [r2, #12]
 8001c46:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001c4a:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001c56:	3301      	adds	r3, #1
 8001c58:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001c5a:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8001c5e:	e7ca      	b.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x72>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c60:	4807      	ldr	r0, [pc, #28]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c66:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c68:	68d0      	ldr	r0, [r2, #12]
 8001c6a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001c6e:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8001c72:	e7ec      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0xca>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	080041b4 	.word	0x080041b4
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001c84:	2800      	cmp	r0, #0
 8001c86:	f000 82d7 	beq.w	8002238 <HAL_RCC_OscConfig+0x5b4>
{
 8001c8a:	b570      	push	{r4, r5, r6, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c90:	6803      	ldr	r3, [r0, #0]
 8001c92:	f013 0f10 	tst.w	r3, #16
 8001c96:	d03f      	beq.n	8001d18 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001c98:	4b97      	ldr	r3, [pc, #604]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f013 0f0c 	tst.w	r3, #12
 8001ca0:	f040 8092 	bne.w	8001dc8 <HAL_RCC_OscConfig+0x144>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ca4:	4b94      	ldr	r3, [pc, #592]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f013 0f02 	tst.w	r3, #2
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x32>
 8001cae:	6983      	ldr	r3, [r0, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 82c3 	beq.w	800223c <HAL_RCC_OscConfig+0x5b8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cb6:	6a20      	ldr	r0, [r4, #32]
 8001cb8:	4b8f      	ldr	r3, [pc, #572]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f013 0f08 	tst.w	r3, #8
 8001cc0:	d062      	beq.n	8001d88 <HAL_RCC_OscConfig+0x104>
 8001cc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cca:	4283      	cmp	r3, r0
 8001ccc:	d263      	bcs.n	8001d96 <HAL_RCC_OscConfig+0x112>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cce:	f7ff ff11 	bl	8001af4 <RCC_SetFlashLatencyFromMSIRange>
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	f040 82b4 	bne.w	8002240 <HAL_RCC_OscConfig+0x5bc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd8:	4b87      	ldr	r3, [pc, #540]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f042 0208 	orr.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ce8:	6a21      	ldr	r1, [r4, #32]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001cf4:	69e1      	ldr	r1, [r4, #28]
 8001cf6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001cfa:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cfc:	f7ff ff42 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001d00:	4b7d      	ldr	r3, [pc, #500]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d08:	4a7c      	ldr	r2, [pc, #496]	; (8001efc <HAL_RCC_OscConfig+0x278>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	40d8      	lsrs	r0, r3
 8001d0e:	4b7c      	ldr	r3, [pc, #496]	; (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d10:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7ff fd02 	bl	800171c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	f013 0f01 	tst.w	r3, #1
 8001d1e:	f000 80a1 	beq.w	8001e64 <HAL_RCC_OscConfig+0x1e0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001d22:	4b75      	ldr	r3, [pc, #468]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	f000 8091 	beq.w	8001e52 <HAL_RCC_OscConfig+0x1ce>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d30:	4b71      	ldr	r3, [pc, #452]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	f000 8083 	beq.w	8001e44 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	6863      	ldr	r3, [r4, #4]
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	f000 80b5 	beq.w	8001eb2 <HAL_RCC_OscConfig+0x22e>
 8001d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4c:	f000 80b7 	beq.w	8001ebe <HAL_RCC_OscConfig+0x23a>
 8001d50:	4b69      	ldr	r3, [pc, #420]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d60:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d62:	6863      	ldr	r3, [r4, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80b7 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x254>
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fcf5 	bl	8001758 <HAL_GetTick>
 8001d6e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001d70:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d78:	d174      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7a:	f7ff fced 	bl	8001758 <HAL_GetTick>
 8001d7e:	1b40      	subs	r0, r0, r5
 8001d80:	2864      	cmp	r0, #100	; 0x64
 8001d82:	d9f5      	bls.n	8001d70 <HAL_RCC_OscConfig+0xec>
            return HAL_TIMEOUT;
 8001d84:	2003      	movs	r0, #3
 8001d86:	e262      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d88:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d94:	e799      	b.n	8001cca <HAL_RCC_OscConfig+0x46>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d96:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	f042 0208 	orr.w	r2, r2, #8
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001da6:	6a21      	ldr	r1, [r4, #32]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001db2:	69e1      	ldr	r1, [r4, #28]
 8001db4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001db8:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dba:	6a20      	ldr	r0, [r4, #32]
 8001dbc:	f7ff fe9a 	bl	8001af4 <RCC_SetFlashLatencyFromMSIRange>
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	d09b      	beq.n	8001cfc <HAL_RCC_OscConfig+0x78>
            return HAL_ERROR;
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	e242      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dc8:	6983      	ldr	r3, [r0, #24]
 8001dca:	b333      	cbz	r3, 8001e1a <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_MSI_ENABLE();
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001dce:	6813      	ldr	r3, [r2, #0]
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001dd6:	f7ff fcbf 	bl	8001758 <HAL_GetTick>
 8001dda:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001ddc:	4b46      	ldr	r3, [pc, #280]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f013 0f02 	tst.w	r3, #2
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de6:	f7ff fcb7 	bl	8001758 <HAL_GetTick>
 8001dea:	1b40      	subs	r0, r0, r5
 8001dec:	2802      	cmp	r0, #2
 8001dee:	d9f5      	bls.n	8001ddc <HAL_RCC_OscConfig+0x158>
            return HAL_TIMEOUT;
 8001df0:	2003      	movs	r0, #3
 8001df2:	e22c      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df4:	4b40      	ldr	r3, [pc, #256]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	f042 0208 	orr.w	r2, r2, #8
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e04:	6a21      	ldr	r1, [r4, #32]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001e10:	69e1      	ldr	r1, [r4, #28]
 8001e12:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	e77e      	b.n	8001d18 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_MSI_DISABLE();
 8001e1a:	4a37      	ldr	r2, [pc, #220]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e24:	f7ff fc98 	bl	8001758 <HAL_GetTick>
 8001e28:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001e2a:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f013 0f02 	tst.w	r3, #2
 8001e32:	f43f af71 	beq.w	8001d18 <HAL_RCC_OscConfig+0x94>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e36:	f7ff fc8f 	bl	8001758 <HAL_GetTick>
 8001e3a:	1b40      	subs	r0, r0, r5
 8001e3c:	2802      	cmp	r0, #2
 8001e3e:	d9f4      	bls.n	8001e2a <HAL_RCC_OscConfig+0x1a6>
            return HAL_TIMEOUT;
 8001e40:	2003      	movs	r0, #3
 8001e42:	e204      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	f47f af76 	bne.w	8001d3e <HAL_RCC_OscConfig+0xba>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e5a:	d003      	beq.n	8001e64 <HAL_RCC_OscConfig+0x1e0>
 8001e5c:	6863      	ldr	r3, [r4, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 81f0 	beq.w	8002244 <HAL_RCC_OscConfig+0x5c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	f013 0f02 	tst.w	r3, #2
 8001e6a:	d062      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2ae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d04b      	beq.n	8001f10 <HAL_RCC_OscConfig+0x28c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001e80:	2b0c      	cmp	r3, #12
 8001e82:	d03f      	beq.n	8001f04 <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e84:	68e3      	ldr	r3, [r4, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d079      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_HSI_ENABLE();
 8001e8a:	4a1b      	ldr	r2, [pc, #108]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e8c:	6813      	ldr	r3, [r2, #0]
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e92:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e94:	f7ff fc60 	bl	8001758 <HAL_GetTick>
 8001e98:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001ea2:	d163      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2e8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fc58 	bl	8001758 <HAL_GetTick>
 8001ea8:	1b40      	subs	r0, r0, r5
 8001eaa:	2802      	cmp	r0, #2
 8001eac:	d9f5      	bls.n	8001e9a <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8001eae:	2003      	movs	r0, #3
 8001eb0:	e1cd      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001eb4:	6813      	ldr	r3, [r2, #0]
 8001eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	e751      	b.n	8001d62 <HAL_RCC_OscConfig+0xde>
 8001ebe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ec2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e744      	b.n	8001d62 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fc3e 	bl	8001758 <HAL_GetTick>
 8001edc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ee6:	d0bd      	beq.n	8001e64 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fc36 	bl	8001758 <HAL_GetTick>
 8001eec:	1b40      	subs	r0, r0, r5
 8001eee:	2864      	cmp	r0, #100	; 0x64
 8001ef0:	d9f5      	bls.n	8001ede <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	e1ab      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	0800419c 	.word	0x0800419c
 8001f00:	2000003c 	.word	0x2000003c
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f04:	4bb1      	ldr	r3, [pc, #708]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d1b9      	bne.n	8001e84 <HAL_RCC_OscConfig+0x200>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f10:	4bae      	ldr	r3, [pc, #696]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_OscConfig+0x29e>
 8001f1a:	68e3      	ldr	r3, [r4, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8193 	beq.w	8002248 <HAL_RCC_OscConfig+0x5c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f22:	4aaa      	ldr	r2, [pc, #680]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001f24:	6853      	ldr	r3, [r2, #4]
 8001f26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001f2a:	6921      	ldr	r1, [r4, #16]
 8001f2c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001f30:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	f013 0f08 	tst.w	r3, #8
 8001f38:	d04c      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x350>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3a:	6963      	ldr	r3, [r4, #20]
 8001f3c:	b39b      	cbz	r3, 8001fa6 <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4aa3      	ldr	r2, [pc, #652]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001f40:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fc04 	bl	8001758 <HAL_GetTick>
 8001f50:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001f52:	4b9e      	ldr	r3, [pc, #632]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f58:	f013 0f02 	tst.w	r3, #2
 8001f5c:	d13a      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5e:	f7ff fbfb 	bl	8001758 <HAL_GetTick>
 8001f62:	1b40      	subs	r0, r0, r5
 8001f64:	2802      	cmp	r0, #2
 8001f66:	d9f4      	bls.n	8001f52 <HAL_RCC_OscConfig+0x2ce>
          return HAL_TIMEOUT;
 8001f68:	2003      	movs	r0, #3
 8001f6a:	e170      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6c:	4a97      	ldr	r2, [pc, #604]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001f6e:	6853      	ldr	r3, [r2, #4]
 8001f70:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001f74:	6921      	ldr	r1, [r4, #16]
 8001f76:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001f7a:	6053      	str	r3, [r2, #4]
 8001f7c:	e7d9      	b.n	8001f32 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_HSI_DISABLE();
 8001f7e:	4a93      	ldr	r2, [pc, #588]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001f80:	6813      	ldr	r3, [r2, #0]
 8001f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f86:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f88:	f7ff fbe6 	bl	8001758 <HAL_GetTick>
 8001f8c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001f8e:	4b8f      	ldr	r3, [pc, #572]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001f96:	d0cc      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2ae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f98:	f7ff fbde 	bl	8001758 <HAL_GetTick>
 8001f9c:	1b40      	subs	r0, r0, r5
 8001f9e:	2802      	cmp	r0, #2
 8001fa0:	d9f5      	bls.n	8001f8e <HAL_RCC_OscConfig+0x30a>
            return HAL_TIMEOUT;
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	e153      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_LSI_DISABLE();
 8001fa6:	4a89      	ldr	r2, [pc, #548]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001fa8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001fb4:	f7ff fbd0 	bl	8001758 <HAL_GetTick>
 8001fb8:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001fba:	4b84      	ldr	r3, [pc, #528]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc0:	f013 0f02 	tst.w	r3, #2
 8001fc4:	d006      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc6:	f7ff fbc7 	bl	8001758 <HAL_GetTick>
 8001fca:	1b40      	subs	r0, r0, r5
 8001fcc:	2802      	cmp	r0, #2
 8001fce:	d9f4      	bls.n	8001fba <HAL_RCC_OscConfig+0x336>
          return HAL_TIMEOUT;
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	e13c      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	f013 0f04 	tst.w	r3, #4
 8001fda:	d07a      	beq.n	80020d2 <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fdc:	4b7b      	ldr	r3, [pc, #492]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001fe4:	d136      	bne.n	8002054 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b79      	ldr	r3, [pc, #484]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8001fe8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fee:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ffa:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffc:	4b74      	ldr	r3, [pc, #464]	; (80021d0 <HAL_RCC_OscConfig+0x54c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002004:	d028      	beq.n	8002058 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002006:	68a3      	ldr	r3, [r4, #8]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d039      	beq.n	8002080 <HAL_RCC_OscConfig+0x3fc>
 800200c:	2b05      	cmp	r3, #5
 800200e:	d03f      	beq.n	8002090 <HAL_RCC_OscConfig+0x40c>
 8002010:	4b6e      	ldr	r3, [pc, #440]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8002012:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800201e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002022:	f022 0204 	bic.w	r2, r2, #4
 8002026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800202a:	68a3      	ldr	r3, [r4, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d03d      	beq.n	80020ac <HAL_RCC_OscConfig+0x428>
      tickstart = HAL_GetTick();
 8002030:	f7ff fb92 	bl	8001758 <HAL_GetTick>
 8002034:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002036:	4b65      	ldr	r3, [pc, #404]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f013 0f02 	tst.w	r3, #2
 8002040:	d146      	bne.n	80020d0 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7ff fb89 	bl	8001758 <HAL_GetTick>
 8002046:	1b80      	subs	r0, r0, r6
 8002048:	f241 3388 	movw	r3, #5000	; 0x1388
 800204c:	4298      	cmp	r0, r3
 800204e:	d9f2      	bls.n	8002036 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8002050:	2003      	movs	r0, #3
 8002052:	e0fc      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
    FlagStatus       pwrclkchanged = RESET;
 8002054:	2500      	movs	r5, #0
 8002056:	e7d1      	b.n	8001ffc <HAL_RCC_OscConfig+0x378>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4a5d      	ldr	r2, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x54c>)
 800205a:	6813      	ldr	r3, [r2, #0]
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002062:	f7ff fb79 	bl	8001758 <HAL_GetTick>
 8002066:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_OscConfig+0x54c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002070:	d1c9      	bne.n	8002006 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7ff fb71 	bl	8001758 <HAL_GetTick>
 8002076:	1b80      	subs	r0, r0, r6
 8002078:	2802      	cmp	r0, #2
 800207a:	d9f5      	bls.n	8002068 <HAL_RCC_OscConfig+0x3e4>
          return HAL_TIMEOUT;
 800207c:	2003      	movs	r0, #3
 800207e:	e0e6      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8002082:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800208e:	e7cc      	b.n	800202a <HAL_RCC_OscConfig+0x3a6>
 8002090:	4b4e      	ldr	r3, [pc, #312]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8002092:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002096:	f042 0204 	orr.w	r2, r2, #4
 800209a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800209e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80020a2:	f042 0201 	orr.w	r2, r2, #1
 80020a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80020aa:	e7be      	b.n	800202a <HAL_RCC_OscConfig+0x3a6>
      tickstart = HAL_GetTick();
 80020ac:	f7ff fb54 	bl	8001758 <HAL_GetTick>
 80020b0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f013 0f02 	tst.w	r3, #2
 80020bc:	d008      	beq.n	80020d0 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff fb4b 	bl	8001758 <HAL_GetTick>
 80020c2:	1b80      	subs	r0, r0, r6
 80020c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80020c8:	4298      	cmp	r0, r3
 80020ca:	d9f2      	bls.n	80020b2 <HAL_RCC_OscConfig+0x42e>
          return HAL_TIMEOUT;
 80020cc:	2003      	movs	r0, #3
 80020ce:	e0be      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
    if(pwrclkchanged == SET)
 80020d0:	b9e5      	cbnz	r5, 800210c <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020d2:	6823      	ldr	r3, [r4, #0]
 80020d4:	f013 0f20 	tst.w	r3, #32
 80020d8:	d035      	beq.n	8002146 <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020dc:	b1e3      	cbz	r3, 8002118 <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 80020de:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 80020e0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 80020ec:	f7ff fb34 	bl	8001758 <HAL_GetTick>
 80020f0:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 80020f2:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 80020f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f8:	f013 0f02 	tst.w	r3, #2
 80020fc:	d123      	bne.n	8002146 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020fe:	f7ff fb2b 	bl	8001758 <HAL_GetTick>
 8002102:	1b40      	subs	r0, r0, r5
 8002104:	2802      	cmp	r0, #2
 8002106:	d9f4      	bls.n	80020f2 <HAL_RCC_OscConfig+0x46e>
          return HAL_TIMEOUT;
 8002108:	2003      	movs	r0, #3
 800210a:	e0a0      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 800210e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
 8002116:	e7dc      	b.n	80020d2 <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 8002118:	4a2c      	ldr	r2, [pc, #176]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 800211a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002126:	f7ff fb17 	bl	8001758 <HAL_GetTick>
 800212a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800212c:	4b27      	ldr	r3, [pc, #156]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 800212e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002132:	f013 0f02 	tst.w	r3, #2
 8002136:	d006      	beq.n	8002146 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002138:	f7ff fb0e 	bl	8001758 <HAL_GetTick>
 800213c:	1b40      	subs	r0, r0, r5
 800213e:	2802      	cmp	r0, #2
 8002140:	d9f4      	bls.n	800212c <HAL_RCC_OscConfig+0x4a8>
          return HAL_TIMEOUT;
 8002142:	2003      	movs	r0, #3
 8002144:	e083      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002148:	2b00      	cmp	r3, #0
 800214a:	d07f      	beq.n	800224c <HAL_RCC_OscConfig+0x5c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800214c:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 800214e:	6892      	ldr	r2, [r2, #8]
 8002150:	f002 020c 	and.w	r2, r2, #12
 8002154:	2a0c      	cmp	r2, #12
 8002156:	d07c      	beq.n	8002252 <HAL_RCC_OscConfig+0x5ce>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002158:	2b02      	cmp	r3, #2
 800215a:	d023      	beq.n	80021a4 <HAL_RCC_OscConfig+0x520>
        __HAL_RCC_PLL_DISABLE();
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002164:	601a      	str	r2, [r3, #0]
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800216c:	d104      	bne.n	8002178 <HAL_RCC_OscConfig+0x4f4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800216e:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 8002170:	68d3      	ldr	r3, [r2, #12]
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 800217a:	68d3      	ldr	r3, [r2, #12]
 800217c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002186:	f7ff fae7 	bl	8001758 <HAL_GetTick>
 800218a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800218c:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002194:	d04e      	beq.n	8002234 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7ff fadf 	bl	8001758 <HAL_GetTick>
 800219a:	1b00      	subs	r0, r0, r4
 800219c:	2802      	cmp	r0, #2
 800219e:	d9f5      	bls.n	800218c <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80021a0:	2003      	movs	r0, #3
 80021a2:	e054      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_PLL_DISABLE();
 80021a4:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 80021a6:	6813      	ldr	r3, [r2, #0]
 80021a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80021ae:	f7ff fad3 	bl	8001758 <HAL_GetTick>
 80021b2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_OscConfig+0x548>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCC_OscConfig+0x550>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7ff facb 	bl	8001758 <HAL_GetTick>
 80021c2:	1b40      	subs	r0, r0, r5
 80021c4:	2802      	cmp	r0, #2
 80021c6:	d9f5      	bls.n	80021b4 <HAL_RCC_OscConfig+0x530>
            return HAL_TIMEOUT;
 80021c8:	2003      	movs	r0, #3
 80021ca:	e040      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40007000 	.word	0x40007000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021d6:	1e5a      	subs	r2, r3, #1
 80021d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80021e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80021e2:	4313      	orrs	r3, r2
 80021e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80021e6:	0852      	lsrs	r2, r2, #1
 80021e8:	3a01      	subs	r2, #1
 80021ea:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80021ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021f0:	0852      	lsrs	r2, r2, #1
 80021f2:	3a01      	subs	r2, #1
 80021f4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80021f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80021fa:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80021fe:	4a16      	ldr	r2, [pc, #88]	; (8002258 <HAL_RCC_OscConfig+0x5d4>)
 8002200:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002208:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800220a:	68d3      	ldr	r3, [r2, #12]
 800220c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002210:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002212:	f7ff faa1 	bl	8001758 <HAL_GetTick>
 8002216:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <HAL_RCC_OscConfig+0x5d4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x5ac>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff fa99 	bl	8001758 <HAL_GetTick>
 8002226:	1b00      	subs	r0, r0, r4
 8002228:	2802      	cmp	r0, #2
 800222a:	d9f5      	bls.n	8002218 <HAL_RCC_OscConfig+0x594>
            return HAL_TIMEOUT;
 800222c:	2003      	movs	r0, #3
 800222e:	e00e      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 8002230:	2000      	movs	r0, #0
 8002232:	e00c      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
 8002234:	2000      	movs	r0, #0
 8002236:	e00a      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
    return HAL_ERROR;
 8002238:	2001      	movs	r0, #1
 800223a:	4770      	bx	lr
        return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
 800223e:	e006      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
            return HAL_ERROR;
 8002240:	2001      	movs	r0, #1
 8002242:	e004      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8002244:	2001      	movs	r0, #1
 8002246:	e002      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8002248:	2001      	movs	r0, #1
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 800224c:	2000      	movs	r0, #0
}
 800224e:	b002      	add	sp, #8
 8002250:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002252:	2001      	movs	r0, #1
 8002254:	e7fb      	b.n	800224e <HAL_RCC_OscConfig+0x5ca>
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800225c:	2800      	cmp	r0, #0
 800225e:	f000 8099 	beq.w	8002394 <HAL_RCC_ClockConfig+0x138>
{
 8002262:	b570      	push	{r4, r5, r6, lr}
 8002264:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002266:	4b4d      	ldr	r3, [pc, #308]	; (800239c <HAL_RCC_ClockConfig+0x140>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	428b      	cmp	r3, r1
 8002270:	d20c      	bcs.n	800228c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4a4a      	ldr	r2, [pc, #296]	; (800239c <HAL_RCC_ClockConfig+0x140>)
 8002274:	6813      	ldr	r3, [r2, #0]
 8002276:	f023 0307 	bic.w	r3, r3, #7
 800227a:	430b      	orrs	r3, r1
 800227c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	6813      	ldr	r3, [r2, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4299      	cmp	r1, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
 800228a:	bd70      	pop	{r4, r5, r6, pc}
 800228c:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	f013 0f01 	tst.w	r3, #1
 8002294:	d039      	beq.n	800230a <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002296:	6863      	ldr	r3, [r4, #4]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d009      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229c:	2b02      	cmp	r3, #2
 800229e:	d026      	beq.n	80022ee <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022a0:	bb63      	cbnz	r3, 80022fc <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80022a2:	4a3f      	ldr	r2, [pc, #252]	; (80023a0 <HAL_RCC_ClockConfig+0x144>)
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	f012 0f02 	tst.w	r2, #2
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 80022ac:	2001      	movs	r0, #1
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80022b0:	4a3b      	ldr	r2, [pc, #236]	; (80023a0 <HAL_RCC_ClockConfig+0x144>)
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80022b8:	d06e      	beq.n	8002398 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ba:	4939      	ldr	r1, [pc, #228]	; (80023a0 <HAL_RCC_ClockConfig+0x144>)
 80022bc:	688a      	ldr	r2, [r1, #8]
 80022be:	f022 0203 	bic.w	r2, r2, #3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80022c6:	f7ff fa47 	bl	8001758 <HAL_GetTick>
 80022ca:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022cc:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <HAL_RCC_ClockConfig+0x144>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
 80022d4:	6862      	ldr	r2, [r4, #4]
 80022d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022da:	d016      	beq.n	800230a <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7ff fa3c 	bl	8001758 <HAL_GetTick>
 80022e0:	1b80      	subs	r0, r0, r6
 80022e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80022e6:	4298      	cmp	r0, r3
 80022e8:	d9f0      	bls.n	80022cc <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 80022ea:	2003      	movs	r0, #3
 80022ec:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 80022ee:	4a2c      	ldr	r2, [pc, #176]	; (80023a0 <HAL_RCC_ClockConfig+0x144>)
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80022f6:	d1e0      	bne.n	80022ba <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
 80022fa:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80022fc:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <HAL_RCC_ClockConfig+0x144>)
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002304:	d1d9      	bne.n	80022ba <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002306:	2001      	movs	r0, #1
 8002308:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	f013 0f02 	tst.w	r3, #2
 8002310:	d006      	beq.n	8002320 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002312:	4a23      	ldr	r2, [pc, #140]	; (80023a0 <HAL_RCC_ClockConfig+0x144>)
 8002314:	6893      	ldr	r3, [r2, #8]
 8002316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800231a:	68a1      	ldr	r1, [r4, #8]
 800231c:	430b      	orrs	r3, r1
 800231e:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_RCC_ClockConfig+0x140>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	429d      	cmp	r5, r3
 800232a:	d20c      	bcs.n	8002346 <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232c:	4a1b      	ldr	r2, [pc, #108]	; (800239c <HAL_RCC_ClockConfig+0x140>)
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	f023 0307 	bic.w	r3, r3, #7
 8002334:	432b      	orrs	r3, r5
 8002336:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	429d      	cmp	r5, r3
 8002340:	d001      	beq.n	8002346 <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 8002342:	2001      	movs	r0, #1
}
 8002344:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	f013 0f04 	tst.w	r3, #4
 800234c:	d006      	beq.n	800235c <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234e:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <HAL_RCC_ClockConfig+0x144>)
 8002350:	6893      	ldr	r3, [r2, #8]
 8002352:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002356:	68e1      	ldr	r1, [r4, #12]
 8002358:	430b      	orrs	r3, r1
 800235a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	f013 0f08 	tst.w	r3, #8
 8002362:	d007      	beq.n	8002374 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002364:	4a0e      	ldr	r2, [pc, #56]	; (80023a0 <HAL_RCC_ClockConfig+0x144>)
 8002366:	6893      	ldr	r3, [r2, #8]
 8002368:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800236c:	6921      	ldr	r1, [r4, #16]
 800236e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002372:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002374:	f7ff fc06 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8002378:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_ClockConfig+0x144>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002380:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <HAL_RCC_ClockConfig+0x148>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	40d8      	lsrs	r0, r3
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCC_ClockConfig+0x14c>)
 8002388:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff f9c6 	bl	800171c <HAL_InitTick>
  return HAL_OK;
 8002390:	2000      	movs	r0, #0
 8002392:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
 8002396:	4770      	bx	lr
        return HAL_ERROR;
 8002398:	2001      	movs	r0, #1
 800239a:	bd70      	pop	{r4, r5, r6, pc}
 800239c:	40022000 	.word	0x40022000
 80023a0:	40021000 	.word	0x40021000
 80023a4:	0800419c 	.word	0x0800419c
 80023a8:	2000003c 	.word	0x2000003c

080023ac <HAL_RCC_GetHCLKFreq>:
}
 80023ac:	4b01      	ldr	r3, [pc, #4]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x8>)
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	2000003c 	.word	0x2000003c

080023b8 <HAL_RCC_GetPCLK1Freq>:
{
 80023b8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023ba:	f7ff fff7 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80023c6:	4a03      	ldr	r2, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80023c8:	5cd3      	ldrb	r3, [r2, r3]
}
 80023ca:	40d8      	lsrs	r0, r3
 80023cc:	bd08      	pop	{r3, pc}
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	080041ac 	.word	0x080041ac

080023d8 <HAL_RCC_GetPCLK2Freq>:
{
 80023d8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023da:	f7ff ffe7 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023de:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80023e6:	4a03      	ldr	r2, [pc, #12]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023e8:	5cd3      	ldrb	r3, [r2, r3]
}
 80023ea:	40d8      	lsrs	r0, r3
 80023ec:	bd08      	pop	{r3, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	080041ac 	.word	0x080041ac

080023f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f013 0f03 	tst.w	r3, #3
 8002402:	d019      	beq.n	8002438 <RCCEx_PLLSAI1_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002404:	4b5a      	ldr	r3, [pc, #360]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	6802      	ldr	r2, [r0, #0]
 800240e:	4293      	cmp	r3, r2
 8002410:	d004      	beq.n	800241c <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002412:	2401      	movs	r4, #1
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002414:	2c00      	cmp	r4, #0
 8002416:	d048      	beq.n	80024aa <RCCEx_PLLSAI1_Config+0xb2>
      }
    }
  }

  return status;
}
 8002418:	4620      	mov	r0, r4
 800241a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800241c:	2a00      	cmp	r2, #0
 800241e:	d042      	beq.n	80024a6 <RCCEx_PLLSAI1_Config+0xae>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002428:	3301      	adds	r3, #1
 800242a:	6842      	ldr	r2, [r0, #4]
       ||
 800242c:	4293      	cmp	r3, r2
 800242e:	d001      	beq.n	8002434 <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 8002430:	2401      	movs	r4, #1
 8002432:	e7ef      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8002434:	2400      	movs	r4, #0
 8002436:	e7ed      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 8002438:	6803      	ldr	r3, [r0, #0]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d018      	beq.n	8002470 <RCCEx_PLLSAI1_Config+0x78>
 800243e:	2b03      	cmp	r3, #3
 8002440:	d01d      	beq.n	800247e <RCCEx_PLLSAI1_Config+0x86>
 8002442:	2b01      	cmp	r3, #1
 8002444:	d00d      	beq.n	8002462 <RCCEx_PLLSAI1_Config+0x6a>
      status = HAL_ERROR;
 8002446:	2401      	movs	r4, #1
    if(status == HAL_OK)
 8002448:	2c00      	cmp	r4, #0
 800244a:	d1e3      	bne.n	8002414 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800244c:	4e48      	ldr	r6, [pc, #288]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 800244e:	68f2      	ldr	r2, [r6, #12]
 8002450:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002454:	6845      	ldr	r5, [r0, #4]
 8002456:	3d01      	subs	r5, #1
 8002458:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800245c:	4313      	orrs	r3, r2
 800245e:	60f3      	str	r3, [r6, #12]
 8002460:	e7d8      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002462:	4a43      	ldr	r2, [pc, #268]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	f012 0f02 	tst.w	r2, #2
 800246a:	d014      	beq.n	8002496 <RCCEx_PLLSAI1_Config+0x9e>
  HAL_StatusTypeDef status = HAL_OK;
 800246c:	2400      	movs	r4, #0
 800246e:	e7eb      	b.n	8002448 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002470:	4a3f      	ldr	r2, [pc, #252]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002478:	d00f      	beq.n	800249a <RCCEx_PLLSAI1_Config+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2400      	movs	r4, #0
 800247c:	e7e4      	b.n	8002448 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800247e:	4a3c      	ldr	r2, [pc, #240]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002486:	d10a      	bne.n	800249e <RCCEx_PLLSAI1_Config+0xa6>
 8002488:	4a39      	ldr	r2, [pc, #228]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 800248a:	6812      	ldr	r2, [r2, #0]
 800248c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002490:	d007      	beq.n	80024a2 <RCCEx_PLLSAI1_Config+0xaa>
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2400      	movs	r4, #0
 8002494:	e7d8      	b.n	8002448 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 8002496:	2401      	movs	r4, #1
 8002498:	e7d6      	b.n	8002448 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 800249a:	2401      	movs	r4, #1
 800249c:	e7d4      	b.n	8002448 <RCCEx_PLLSAI1_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800249e:	2400      	movs	r4, #0
 80024a0:	e7d2      	b.n	8002448 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80024a2:	2401      	movs	r4, #1
 80024a4:	e7d0      	b.n	8002448 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 80024a6:	2401      	movs	r4, #1
 80024a8:	e7b4      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x1c>
 80024aa:	460f      	mov	r7, r1
 80024ac:	4605      	mov	r5, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 80024ae:	4a30      	ldr	r2, [pc, #192]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 80024b0:	6813      	ldr	r3, [r2, #0]
 80024b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024b6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80024b8:	f7ff f94e 	bl	8001758 <HAL_GetTick>
 80024bc:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80024c6:	d005      	beq.n	80024d4 <RCCEx_PLLSAI1_Config+0xdc>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024c8:	f7ff f946 	bl	8001758 <HAL_GetTick>
 80024cc:	1b80      	subs	r0, r0, r6
 80024ce:	2802      	cmp	r0, #2
 80024d0:	d9f5      	bls.n	80024be <RCCEx_PLLSAI1_Config+0xc6>
        status = HAL_TIMEOUT;
 80024d2:	2403      	movs	r4, #3
    if(status == HAL_OK)
 80024d4:	2c00      	cmp	r4, #0
 80024d6:	d19f      	bne.n	8002418 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 80024d8:	bb47      	cbnz	r7, 800252c <RCCEx_PLLSAI1_Config+0x134>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024da:	4925      	ldr	r1, [pc, #148]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 80024dc:	690b      	ldr	r3, [r1, #16]
 80024de:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80024e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024e6:	68a8      	ldr	r0, [r5, #8]
 80024e8:	68ea      	ldr	r2, [r5, #12]
 80024ea:	06d2      	lsls	r2, r2, #27
 80024ec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80024f0:	4313      	orrs	r3, r2
 80024f2:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80024f4:	4a1e      	ldr	r2, [pc, #120]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 80024f6:	6813      	ldr	r3, [r2, #0]
 80024f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024fc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80024fe:	f7ff f92b 	bl	8001758 <HAL_GetTick>
 8002502:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800250c:	d105      	bne.n	800251a <RCCEx_PLLSAI1_Config+0x122>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800250e:	f7ff f923 	bl	8001758 <HAL_GetTick>
 8002512:	1b80      	subs	r0, r0, r6
 8002514:	2802      	cmp	r0, #2
 8002516:	d9f5      	bls.n	8002504 <RCCEx_PLLSAI1_Config+0x10c>
          status = HAL_TIMEOUT;
 8002518:	2403      	movs	r4, #3
      if(status == HAL_OK)
 800251a:	2c00      	cmp	r4, #0
 800251c:	f47f af7c 	bne.w	8002418 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002520:	4a13      	ldr	r2, [pc, #76]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 8002522:	6913      	ldr	r3, [r2, #16]
 8002524:	69a9      	ldr	r1, [r5, #24]
 8002526:	430b      	orrs	r3, r1
 8002528:	6113      	str	r3, [r2, #16]
 800252a:	e775      	b.n	8002418 <RCCEx_PLLSAI1_Config+0x20>
      else if(Divider == DIVIDER_Q_UPDATE)
 800252c:	2f01      	cmp	r7, #1
 800252e:	d00f      	beq.n	8002550 <RCCEx_PLLSAI1_Config+0x158>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002530:	480f      	ldr	r0, [pc, #60]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 8002532:	6902      	ldr	r2, [r0, #16]
 8002534:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002538:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800253c:	68a9      	ldr	r1, [r5, #8]
 800253e:	696b      	ldr	r3, [r5, #20]
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	3b01      	subs	r3, #1
 8002544:	065b      	lsls	r3, r3, #25
 8002546:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800254a:	4313      	orrs	r3, r2
 800254c:	6103      	str	r3, [r0, #16]
 800254e:	e7d1      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002550:	4807      	ldr	r0, [pc, #28]	; (8002570 <RCCEx_PLLSAI1_Config+0x178>)
 8002552:	6902      	ldr	r2, [r0, #16]
 8002554:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002558:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 800255c:	68a9      	ldr	r1, [r5, #8]
 800255e:	692b      	ldr	r3, [r5, #16]
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	3b01      	subs	r3, #1
 8002564:	055b      	lsls	r3, r3, #21
 8002566:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800256a:	4313      	orrs	r3, r2
 800256c:	6103      	str	r3, [r0, #16]
 800256e:	e7c1      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xfc>
 8002570:	40021000 	.word	0x40021000

08002574 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800257c:	6803      	ldr	r3, [r0, #0]
 800257e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002582:	d024      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002584:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002586:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800258a:	d013      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800258c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002590:	d002      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002592:	b1b3      	cbz	r3, 80025c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      ret = HAL_ERROR;
 8002594:	2701      	movs	r7, #1
 8002596:	e000      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002598:	2700      	movs	r7, #0
    if(ret == HAL_OK)
 800259a:	2f00      	cmp	r7, #0
 800259c:	d16f      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800259e:	4abd      	ldr	r2, [pc, #756]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025a4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80025aa:	430b      	orrs	r3, r1
 80025ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025b0:	463e      	mov	r6, r7
 80025b2:	e00e      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025b4:	4ab7      	ldr	r2, [pc, #732]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025b6:	68d3      	ldr	r3, [r2, #12]
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025be:	2700      	movs	r7, #0
      break;
 80025c0:	e7eb      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x26>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025c2:	2100      	movs	r1, #0
 80025c4:	3004      	adds	r0, #4
 80025c6:	f7ff ff17 	bl	80023f8 <RCCEx_PLLSAI1_Config>
 80025ca:	4607      	mov	r7, r0
      break;
 80025cc:	e7e5      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ce:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025d0:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025d8:	d06d      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025da:	4bae      	ldr	r3, [pc, #696]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80025e2:	d14e      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e4:	4bab      	ldr	r3, [pc, #684]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025ec:	659a      	str	r2, [r3, #88]	; 0x58
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80025f8:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025fc:	4aa6      	ldr	r2, [pc, #664]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80025fe:	6813      	ldr	r3, [r2, #0]
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002606:	f7ff f8a7 	bl	8001758 <HAL_GetTick>
 800260a:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 800260c:	4ba2      	ldr	r3, [pc, #648]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002614:	d105      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xae>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002616:	f7ff f89f 	bl	8001758 <HAL_GetTick>
 800261a:	1b40      	subs	r0, r0, r5
 800261c:	2802      	cmp	r0, #2
 800261e:	d9f5      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x98>
        ret = HAL_TIMEOUT;
 8002620:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 8002622:	2f00      	cmp	r7, #0
 8002624:	d142      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002626:	4b9b      	ldr	r3, [pc, #620]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800262c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002630:	d015      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002632:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002634:	4293      	cmp	r3, r2
 8002636:	d012      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002638:	4a96      	ldr	r2, [pc, #600]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800263a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800263e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8002642:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002646:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800264a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800264e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002652:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002656:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800265a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800265e:	f013 0f01 	tst.w	r3, #1
 8002662:	d111      	bne.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 8002664:	2f00      	cmp	r7, #0
 8002666:	f040 8113 	bne.w	8002890 <HAL_RCCEx_PeriphCLKConfig+0x31c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800266a:	4a8a      	ldr	r2, [pc, #552]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800266c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002674:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002676:	430b      	orrs	r3, r1
 8002678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800267c:	e017      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
      status = ret;
 800267e:	463e      	mov	r6, r7
 8002680:	e7a7      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;
 8002682:	f04f 0800 	mov.w	r8, #0
 8002686:	e7b9      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x88>
        tickstart = HAL_GetTick();
 8002688:	f7ff f866 	bl	8001758 <HAL_GetTick>
 800268c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800268e:	4b81      	ldr	r3, [pc, #516]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f013 0f02 	tst.w	r3, #2
 8002698:	d1e4      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269a:	f7ff f85d 	bl	8001758 <HAL_GetTick>
 800269e:	1b40      	subs	r0, r0, r5
 80026a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80026a4:	4298      	cmp	r0, r3
 80026a6:	d9f2      	bls.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 80026a8:	2703      	movs	r7, #3
 80026aa:	e7db      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      status = ret;
 80026ac:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 80026ae:	f1b8 0f00 	cmp.w	r8, #0
 80026b2:	f040 80f3 	bne.w	800289c <HAL_RCCEx_PeriphCLKConfig+0x328>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	f013 0f01 	tst.w	r3, #1
 80026bc:	d008      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026be:	4a75      	ldr	r2, [pc, #468]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026c4:	f023 0303 	bic.w	r3, r3, #3
 80026c8:	6a21      	ldr	r1, [r4, #32]
 80026ca:	430b      	orrs	r3, r1
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	f013 0f02 	tst.w	r3, #2
 80026d6:	d008      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d8:	4a6e      	ldr	r2, [pc, #440]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026de:	f023 030c 	bic.w	r3, r3, #12
 80026e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026e4:	430b      	orrs	r3, r1
 80026e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	f013 0f04 	tst.w	r3, #4
 80026f0:	d008      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026f2:	4a68      	ldr	r2, [pc, #416]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026f8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80026fe:	430b      	orrs	r3, r1
 8002700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	f013 0f08 	tst.w	r3, #8
 800270a:	d008      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800270c:	4a61      	ldr	r2, [pc, #388]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800270e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002712:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002716:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002718:	430b      	orrs	r3, r1
 800271a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	f013 0f20 	tst.w	r3, #32
 8002724:	d008      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002726:	4a5b      	ldr	r2, [pc, #364]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002728:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800272c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002730:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002732:	430b      	orrs	r3, r1
 8002734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800273e:	d008      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002740:	4a54      	ldr	r2, [pc, #336]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002742:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002746:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800274a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800274c:	430b      	orrs	r3, r1
 800274e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002758:	d008      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800275a:	4a4e      	ldr	r2, [pc, #312]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800275c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002760:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002764:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002766:	430b      	orrs	r3, r1
 8002768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002772:	d008      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002774:	4a47      	ldr	r2, [pc, #284]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002776:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800277a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800277e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002780:	430b      	orrs	r3, r1
 8002782:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	f013 0f80 	tst.w	r3, #128	; 0x80
 800278c:	d008      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800278e:	4a41      	ldr	r2, [pc, #260]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002790:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002794:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002798:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800279a:	430b      	orrs	r3, r1
 800279c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027a6:	d008      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027a8:	4a3a      	ldr	r2, [pc, #232]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027aa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027b2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027b4:	430b      	orrs	r3, r1
 80027b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80027c0:	d008      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027c2:	4a34      	ldr	r2, [pc, #208]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027c4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80027c8:	f023 0303 	bic.w	r3, r3, #3
 80027cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80027ce:	430b      	orrs	r3, r1
 80027d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80027da:	d00f      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027dc:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027e2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80027e6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80027e8:	430b      	orrs	r3, r1
 80027ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80027f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f4:	d058      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027fa:	d05a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002802:	d00f      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002804:	4a23      	ldr	r2, [pc, #140]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002806:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800280a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800280e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002810:	430b      	orrs	r3, r1
 8002812:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002816:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281c:	d051      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800281e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002822:	d053      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x358>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800282a:	d00f      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800282e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002832:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002836:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002838:	430b      	orrs	r3, r1
 800283a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800283e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002844:	d04a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002846:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800284a:	d04c      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x372>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002852:	d00c      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002854:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002856:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800285a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800285e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002860:	430b      	orrs	r3, r1
 8002862:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002866:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800286c:	d043      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002874:	d008      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002878:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800287c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002880:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002882:	430b      	orrs	r3, r1
 8002884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002888:	4630      	mov	r0, r6
 800288a:	b002      	add	sp, #8
 800288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8002890:	463e      	mov	r6, r7
 8002892:	e70c      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8002894:	40021000 	.word	0x40021000
 8002898:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_DISABLE();
 800289c:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800289e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80028a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6593      	str	r3, [r2, #88]	; 0x58
 80028a6:	e706      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a8:	68d3      	ldr	r3, [r2, #12]
 80028aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ae:	60d3      	str	r3, [r2, #12]
 80028b0:	e7a4      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b2:	2101      	movs	r1, #1
 80028b4:	1d20      	adds	r0, r4, #4
 80028b6:	f7ff fd9f 	bl	80023f8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d09e      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x288>
          status = ret;
 80028be:	4606      	mov	r6, r0
 80028c0:	e79c      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c2:	68d3      	ldr	r3, [r2, #12]
 80028c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028c8:	60d3      	str	r3, [r2, #12]
 80028ca:	e7ab      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028cc:	2101      	movs	r1, #1
 80028ce:	1d20      	adds	r0, r4, #4
 80028d0:	f7ff fd92 	bl	80023f8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80028d4:	2800      	cmp	r0, #0
 80028d6:	d0a5      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        status = ret;
 80028d8:	4606      	mov	r6, r0
 80028da:	e7a3      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028dc:	68d3      	ldr	r3, [r2, #12]
 80028de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e2:	60d3      	str	r3, [r2, #12]
 80028e4:	e7b2      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e6:	2101      	movs	r1, #1
 80028e8:	1d20      	adds	r0, r4, #4
 80028ea:	f7ff fd85 	bl	80023f8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d0ac      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
        status = ret;
 80028f2:	4606      	mov	r6, r0
 80028f4:	e7aa      	b.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028f6:	2102      	movs	r1, #2
 80028f8:	1d20      	adds	r0, r4, #4
 80028fa:	f7ff fd7d 	bl	80023f8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80028fe:	2800      	cmp	r0, #0
 8002900:	d0b5      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        status = ret;
 8002902:	4606      	mov	r6, r0
 8002904:	e7b3      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000

0800290c <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc: RTC handle  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800290c:	4770      	bx	lr

0800290e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800290e:	b538      	push	{r3, r4, r5, lr}
 8002910:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002912:	6802      	ldr	r2, [r0, #0]
 8002914:	68d3      	ldr	r3, [r2, #12]
 8002916:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800291a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800291c:	f7fe ff1c 	bl	8001758 <HAL_GetTick>
 8002920:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002922:	6823      	ldr	r3, [r4, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f013 0f20 	tst.w	r3, #32
 800292a:	d107      	bne.n	800293c <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800292c:	f7fe ff14 	bl	8001758 <HAL_GetTick>
 8002930:	1b40      	subs	r0, r0, r5
 8002932:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002936:	d9f4      	bls.n	8002922 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002938:	2003      	movs	r0, #3
    }
  }

  return HAL_OK;
}
 800293a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800293c:	2000      	movs	r0, #0
 800293e:	bd38      	pop	{r3, r4, r5, pc}

08002940 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002940:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002942:	6803      	ldr	r3, [r0, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	f012 0f40 	tst.w	r2, #64	; 0x40
 800294a:	d001      	beq.n	8002950 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800294c:	2000      	movs	r0, #0
 800294e:	bd38      	pop	{r3, r4, r5, pc}
 8002950:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002952:	f04f 32ff 	mov.w	r2, #4294967295
 8002956:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002958:	f7fe fefe 	bl	8001758 <HAL_GetTick>
 800295c:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002966:	d107      	bne.n	8002978 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002968:	f7fe fef6 	bl	8001758 <HAL_GetTick>
 800296c:	1b40      	subs	r0, r0, r5
 800296e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002972:	d9f4      	bls.n	800295e <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8002974:	2003      	movs	r0, #3
}
 8002976:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002978:	2000      	movs	r0, #0
 800297a:	bd38      	pop	{r3, r4, r5, pc}

0800297c <HAL_RTC_Init>:
{
 800297c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800297e:	2800      	cmp	r0, #0
 8002980:	d064      	beq.n	8002a4c <HAL_RTC_Init+0xd0>
 8002982:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002984:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002988:	2b00      	cmp	r3, #0
 800298a:	d045      	beq.n	8002a18 <HAL_RTC_Init+0x9c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800298c:	2302      	movs	r3, #2
 800298e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	22ca      	movs	r2, #202	; 0xca
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	2253      	movs	r2, #83	; 0x53
 800299c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800299e:	4620      	mov	r0, r4
 80029a0:	f7ff ffce 	bl	8002940 <RTC_EnterInitMode>
 80029a4:	4605      	mov	r5, r0
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d13b      	bne.n	8002a22 <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029aa:	6822      	ldr	r2, [r4, #0]
 80029ac:	6893      	ldr	r3, [r2, #8]
 80029ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80029b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029b8:	6821      	ldr	r1, [r4, #0]
 80029ba:	688a      	ldr	r2, [r1, #8]
 80029bc:	6863      	ldr	r3, [r4, #4]
 80029be:	6920      	ldr	r0, [r4, #16]
 80029c0:	4303      	orrs	r3, r0
 80029c2:	69a0      	ldr	r0, [r4, #24]
 80029c4:	4303      	orrs	r3, r0
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	68e2      	ldr	r2, [r4, #12]
 80029ce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80029d0:	6822      	ldr	r2, [r4, #0]
 80029d2:	6913      	ldr	r3, [r2, #16]
 80029d4:	68a1      	ldr	r1, [r4, #8]
 80029d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80029da:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80029dc:	6822      	ldr	r2, [r4, #0]
 80029de:	68d3      	ldr	r3, [r2, #12]
 80029e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f013 0f20 	tst.w	r3, #32
 80029ee:	d020      	beq.n	8002a32 <HAL_RTC_Init+0xb6>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80029f0:	6822      	ldr	r2, [r4, #0]
 80029f2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80029f4:	f023 0303 	bic.w	r3, r3, #3
 80029f8:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80029fa:	6821      	ldr	r1, [r4, #0]
 80029fc:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80029fe:	69e2      	ldr	r2, [r4, #28]
 8002a00:	6960      	ldr	r0, [r4, #20]
 8002a02:	4302      	orrs	r2, r0
 8002a04:	4313      	orrs	r3, r2
 8002a06:	64cb      	str	r3, [r1, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	22ff      	movs	r2, #255	; 0xff
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8002a14:	4628      	mov	r0, r5
 8002a16:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002a18:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8002a1c:	f7ff ff76 	bl	800290c <HAL_RTC_MspInit>
 8002a20:	e7b4      	b.n	800298c <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	22ff      	movs	r2, #255	; 0xff
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a28:	2304      	movs	r3, #4
 8002a2a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 8002a2e:	2501      	movs	r5, #1
 8002a30:	e7f0      	b.n	8002a14 <HAL_RTC_Init+0x98>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7ff ff6b 	bl	800290e <HAL_RTC_WaitForSynchro>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d0d9      	beq.n	80029f0 <HAL_RTC_Init+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	22ff      	movs	r2, #255	; 0xff
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a42:	2304      	movs	r3, #4
 8002a44:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return HAL_ERROR;
 8002a48:	2501      	movs	r5, #1
 8002a4a:	e7e3      	b.n	8002a14 <HAL_RTC_Init+0x98>
     return HAL_ERROR;
 8002a4c:	2501      	movs	r5, #1
 8002a4e:	e7e1      	b.n	8002a14 <HAL_RTC_Init+0x98>

08002a50 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002a50:	2300      	movs	r3, #0

  while(Value >= 10)
 8002a52:	e002      	b.n	8002a5a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002a54:	3301      	adds	r3, #1
    Value -= 10;
 8002a56:	380a      	subs	r0, #10
 8002a58:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8002a5a:	2809      	cmp	r0, #9
 8002a5c:	d8fa      	bhi.n	8002a54 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	b2db      	uxtb	r3, r3
}
 8002a62:	4318      	orrs	r0, r3
 8002a64:	4770      	bx	lr

08002a66 <HAL_RTC_SetTime>:
{
 8002a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002a68:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d07f      	beq.n	8002b70 <HAL_RTC_SetTime+0x10a>
 8002a70:	460e      	mov	r6, r1
 8002a72:	4604      	mov	r4, r0
 8002a74:	2301      	movs	r3, #1
 8002a76:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 8002a80:	2a00      	cmp	r2, #0
 8002a82:	d148      	bne.n	8002b16 <HAL_RTC_SetTime+0xb0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002a84:	6803      	ldr	r3, [r0, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a8c:	d101      	bne.n	8002a92 <HAL_RTC_SetTime+0x2c>
      sTime->TimeFormat = 0x00;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002a92:	7830      	ldrb	r0, [r6, #0]
 8002a94:	f7ff ffdc 	bl	8002a50 <RTC_ByteToBcd2>
 8002a98:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002a9a:	7870      	ldrb	r0, [r6, #1]
 8002a9c:	f7ff ffd8 	bl	8002a50 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002aa0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002aa4:	78b0      	ldrb	r0, [r6, #2]
 8002aa6:	f7ff ffd3 	bl	8002a50 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002aaa:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16));
 8002aac:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002aae:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	22ca      	movs	r2, #202	; 0xca
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ab8:	6823      	ldr	r3, [r4, #0]
 8002aba:	2253      	movs	r2, #83	; 0x53
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f7ff ff3e 	bl	8002940 <RTC_EnterInitMode>
 8002ac4:	4607      	mov	r7, r0
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d137      	bne.n	8002b3a <HAL_RTC_SetTime+0xd4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002ad0:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002ad4:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002ad6:	6822      	ldr	r2, [r4, #0]
 8002ad8:	6893      	ldr	r3, [r2, #8]
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ae0:	6821      	ldr	r1, [r4, #0]
 8002ae2:	688b      	ldr	r3, [r1, #8]
 8002ae4:	68f2      	ldr	r2, [r6, #12]
 8002ae6:	6930      	ldr	r0, [r6, #16]
 8002ae8:	4302      	orrs	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002aee:	6822      	ldr	r2, [r4, #0]
 8002af0:	68d3      	ldr	r3, [r2, #12]
 8002af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002af6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f013 0f20 	tst.w	r3, #32
 8002b00:	d026      	beq.n	8002b50 <HAL_RTC_SetTime+0xea>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	22ff      	movs	r2, #255	; 0xff
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f884 3020 	strb.w	r3, [r4, #32]
   return HAL_OK;
 8002b14:	e02d      	b.n	8002b72 <HAL_RTC_SetTime+0x10c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b16:	6803      	ldr	r3, [r0, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b1e:	d101      	bne.n	8002b24 <HAL_RTC_SetTime+0xbe>
      sTime->TimeFormat = 0x00;
 8002b20:	2300      	movs	r3, #0
 8002b22:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002b24:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002b26:	7870      	ldrb	r0, [r6, #1]
 8002b28:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002b2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002b2e:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002b30:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16));
 8002b32:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002b34:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002b38:	e7bb      	b.n	8002ab2 <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	22ff      	movs	r2, #255	; 0xff
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b40:	2304      	movs	r3, #4
 8002b42:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002b46:	2300      	movs	r3, #0
 8002b48:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002b4c:	2701      	movs	r7, #1
 8002b4e:	e010      	b.n	8002b72 <HAL_RTC_SetTime+0x10c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7ff fedc 	bl	800290e <HAL_RTC_WaitForSynchro>
 8002b56:	2800      	cmp	r0, #0
 8002b58:	d0d3      	beq.n	8002b02 <HAL_RTC_SetTime+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	22ff      	movs	r2, #255	; 0xff
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b60:	2304      	movs	r3, #4
 8002b62:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002b66:	2300      	movs	r3, #0
 8002b68:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002b6c:	2701      	movs	r7, #1
 8002b6e:	e000      	b.n	8002b72 <HAL_RTC_SetTime+0x10c>
  __HAL_LOCK(hrtc);
 8002b70:	2702      	movs	r7, #2
}
 8002b72:	4638      	mov	r0, r7
 8002b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b76 <HAL_RTC_SetDate>:
{
 8002b76:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002b78:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d06d      	beq.n	8002c5c <HAL_RTC_SetDate+0xe6>
 8002b80:	2301      	movs	r3, #1
 8002b82:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002b8c:	b93a      	cbnz	r2, 8002b9e <HAL_RTC_SetDate+0x28>
 8002b8e:	784b      	ldrb	r3, [r1, #1]
 8002b90:	f013 0f10 	tst.w	r3, #16
 8002b94:	d003      	beq.n	8002b9e <HAL_RTC_SetDate+0x28>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002b96:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002b9a:	330a      	adds	r3, #10
 8002b9c:	704b      	strb	r3, [r1, #1]
 8002b9e:	460e      	mov	r6, r1
 8002ba0:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002ba2:	2a00      	cmp	r2, #0
 8002ba4:	d134      	bne.n	8002c10 <HAL_RTC_SetDate+0x9a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002ba6:	78c8      	ldrb	r0, [r1, #3]
 8002ba8:	f7ff ff52 	bl	8002a50 <RTC_ByteToBcd2>
 8002bac:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002bae:	7870      	ldrb	r0, [r6, #1]
 8002bb0:	f7ff ff4e 	bl	8002a50 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002bb4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002bb8:	78b0      	ldrb	r0, [r6, #2]
 8002bba:	f7ff ff49 	bl	8002a50 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002bbe:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13));
 8002bc0:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002bc2:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	22ca      	movs	r2, #202	; 0xca
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	2253      	movs	r2, #83	; 0x53
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f7ff feb4 	bl	8002940 <RTC_EnterInitMode>
 8002bd8:	4606      	mov	r6, r0
 8002bda:	bb20      	cbnz	r0, 8002c26 <HAL_RTC_SetDate+0xb0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002be2:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002be6:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002be8:	6822      	ldr	r2, [r4, #0]
 8002bea:	68d3      	ldr	r3, [r2, #12]
 8002bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f013 0f20 	tst.w	r3, #32
 8002bfa:	d01f      	beq.n	8002c3c <HAL_RTC_SetDate+0xc6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	22ff      	movs	r2, #255	; 0xff
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002c02:	2301      	movs	r3, #1
 8002c04:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 8002c0e:	e026      	b.n	8002c5e <HAL_RTC_SetDate+0xe8>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8002c10:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002c12:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002c14:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8002c16:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002c18:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002c1c:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13));
 8002c1e:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002c20:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8002c24:	e7cf      	b.n	8002bc6 <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	22ff      	movs	r2, #255	; 0xff
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002c32:	2300      	movs	r3, #0
 8002c34:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002c38:	2601      	movs	r6, #1
 8002c3a:	e010      	b.n	8002c5e <HAL_RTC_SetDate+0xe8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7ff fe66 	bl	800290e <HAL_RTC_WaitForSynchro>
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d0da      	beq.n	8002bfc <HAL_RTC_SetDate+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	22ff      	movs	r2, #255	; 0xff
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002c52:	2300      	movs	r3, #0
 8002c54:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002c58:	2601      	movs	r6, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_RTC_SetDate+0xe8>
 __HAL_LOCK(hrtc);
 8002c5c:	2602      	movs	r6, #2
}
 8002c5e:	4630      	mov	r0, r6
 8002c60:	bd70      	pop	{r4, r5, r6, pc}

08002c62 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c64:	4605      	mov	r5, r0
 8002c66:	460f      	mov	r7, r1
 8002c68:	4616      	mov	r6, r2
 8002c6a:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c6c:	e039      	b.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0x80>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002c6e:	b12c      	cbz	r4, 8002c7c <SPI_WaitFlagStateUntilTimeout+0x1a>
 8002c70:	f7fe fd72 	bl	8001758 <HAL_GetTick>
 8002c74:	9b06      	ldr	r3, [sp, #24]
 8002c76:	1ac0      	subs	r0, r0, r3
 8002c78:	4284      	cmp	r4, r0
 8002c7a:	d832      	bhi.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0x80>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c7c:	682a      	ldr	r2, [r5, #0]
 8002c7e:	6853      	ldr	r3, [r2, #4]
 8002c80:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002c84:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c86:	686b      	ldr	r3, [r5, #4]
 8002c88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c8c:	d00b      	beq.n	8002ca6 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c94:	d014      	beq.n	8002cc0 <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ca2:	2003      	movs	r0, #3
 8002ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca6:	68ab      	ldr	r3, [r5, #8]
 8002ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cac:	d002      	beq.n	8002cb4 <SPI_WaitFlagStateUntilTimeout+0x52>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb2:	d1ec      	bne.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8002cb4:	682a      	ldr	r2, [r5, #0]
 8002cb6:	6813      	ldr	r3, [r2, #0]
 8002cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e7e6      	b.n	8002c8e <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 8002cc0:	682a      	ldr	r2, [r5, #0]
 8002cc2:	6813      	ldr	r3, [r2, #0]
 8002cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	682a      	ldr	r2, [r5, #0]
 8002ccc:	6813      	ldr	r3, [r2, #0]
 8002cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	e7df      	b.n	8002c96 <SPI_WaitFlagStateUntilTimeout+0x34>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	42b3      	cmp	r3, r6
 8002cda:	d009      	beq.n	8002cf0 <SPI_WaitFlagStateUntilTimeout+0x8e>
    if (Timeout != HAL_MAX_DELAY)
 8002cdc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002ce0:	d1c5      	bne.n	8002c6e <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ce2:	682b      	ldr	r3, [r5, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	ea37 0303 	bics.w	r3, r7, r3
 8002cea:	d0f4      	beq.n	8002cd6 <SPI_WaitFlagStateUntilTimeout+0x74>
 8002cec:	2300      	movs	r3, #0
 8002cee:	e7f3      	b.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x76>
      }
    }
  }

  return HAL_OK;
 8002cf0:	2000      	movs	r0, #0
}
 8002cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002cf4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	4607      	mov	r7, r0
 8002cfa:	460c      	mov	r4, r1
 8002cfc:	4615      	mov	r5, r2
 8002cfe:	461e      	mov	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002d00:	e002      	b.n	8002d08 <SPI_WaitFifoStateUntilTimeout+0x14>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d02:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002d06:	d110      	bne.n	8002d2a <SPI_WaitFifoStateUntilTimeout+0x36>
  while ((hspi->Instance->SR & Fifo) != State)
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	6893      	ldr	r3, [r2, #8]
 8002d0c:	4023      	ands	r3, r4
 8002d0e:	42ab      	cmp	r3, r5
 8002d10:	d03f      	beq.n	8002d92 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d12:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002d16:	d1f4      	bne.n	8002d02 <SPI_WaitFifoStateUntilTimeout+0xe>
 8002d18:	2d00      	cmp	r5, #0
 8002d1a:	d1f2      	bne.n	8002d02 <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002d1c:	7b13      	ldrb	r3, [r2, #12]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 8002d24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002d28:	e7eb      	b.n	8002d02 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002d2a:	b12e      	cbz	r6, 8002d38 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002d2c:	f7fe fd14 	bl	8001758 <HAL_GetTick>
 8002d30:	9b08      	ldr	r3, [sp, #32]
 8002d32:	1ac0      	subs	r0, r0, r3
 8002d34:	4286      	cmp	r6, r0
 8002d36:	d8e7      	bhi.n	8002d08 <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	6853      	ldr	r3, [r2, #4]
 8002d3c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002d40:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d48:	d00b      	beq.n	8002d62 <SPI_WaitFifoStateUntilTimeout+0x6e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d50:	d014      	beq.n	8002d7c <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d52:	2301      	movs	r3, #1
 8002d54:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d5e:	2003      	movs	r0, #3
 8002d60:	e018      	b.n	8002d94 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d68:	d002      	beq.n	8002d70 <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6e:	d1ec      	bne.n	8002d4a <SPI_WaitFifoStateUntilTimeout+0x56>
          __HAL_SPI_DISABLE(hspi);
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	6813      	ldr	r3, [r2, #0]
 8002d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e7e6      	b.n	8002d4a <SPI_WaitFifoStateUntilTimeout+0x56>
          SPI_RESET_CRC(hspi);
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	6813      	ldr	r3, [r2, #0]
 8002d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	6813      	ldr	r3, [r2, #0]
 8002d8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	e7df      	b.n	8002d52 <SPI_WaitFifoStateUntilTimeout+0x5e>
      }
    }
  }

  return HAL_OK;
 8002d92:	2000      	movs	r0, #0
}
 8002d94:	b003      	add	sp, #12
 8002d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	460d      	mov	r5, r1
 8002da0:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002da2:	9200      	str	r2, [sp, #0]
 8002da4:	460b      	mov	r3, r1
 8002da6:	2200      	movs	r2, #0
 8002da8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002dac:	f7ff ffa2 	bl	8002cf4 <SPI_WaitFifoStateUntilTimeout>
 8002db0:	b138      	cbz	r0, 8002dc2 <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002db2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002db4:	f043 0320 	orr.w	r3, r3, #32
 8002db8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dc2:	9600      	str	r6, [sp, #0]
 8002dc4:	462b      	mov	r3, r5
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2180      	movs	r1, #128	; 0x80
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f7ff ff49 	bl	8002c62 <SPI_WaitFlagStateUntilTimeout>
 8002dd0:	b128      	cbz	r0, 8002dde <SPI_EndRxTxTransaction+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dd2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002dd4:	f043 0320 	orr.w	r3, r3, #32
 8002dd8:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e7ee      	b.n	8002dbc <SPI_EndRxTxTransaction+0x24>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dde:	9600      	str	r6, [sp, #0]
 8002de0:	462b      	mov	r3, r5
 8002de2:	2200      	movs	r2, #0
 8002de4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7ff ff83 	bl	8002cf4 <SPI_WaitFifoStateUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d0e3      	beq.n	8002dbc <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002df6:	f043 0320 	orr.w	r3, r3, #32
 8002dfa:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e7dd      	b.n	8002dbc <SPI_EndRxTxTransaction+0x24>

08002e00 <SPI_EndRxTransaction>:
{
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	4604      	mov	r4, r0
 8002e06:	460d      	mov	r5, r1
 8002e08:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e0a:	6843      	ldr	r3, [r0, #4]
 8002e0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e10:	d010      	beq.n	8002e34 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e12:	9600      	str	r6, [sp, #0]
 8002e14:	462b      	mov	r3, r5
 8002e16:	2200      	movs	r2, #0
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f7ff ff21 	bl	8002c62 <SPI_WaitFlagStateUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	b1a0      	cbz	r0, 8002e4e <SPI_EndRxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e24:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e26:	f043 0320 	orr.w	r3, r3, #32
 8002e2a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	b002      	add	sp, #8
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e34:	6883      	ldr	r3, [r0, #8]
 8002e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3a:	d002      	beq.n	8002e42 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e40:	d1e7      	bne.n	8002e12 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8002e42:	6822      	ldr	r2, [r4, #0]
 8002e44:	6813      	ldr	r3, [r2, #0]
 8002e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	e7e1      	b.n	8002e12 <SPI_EndRxTransaction+0x12>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e4e:	6862      	ldr	r2, [r4, #4]
 8002e50:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002e54:	d1eb      	bne.n	8002e2e <SPI_EndRxTransaction+0x2e>
 8002e56:	68a2      	ldr	r2, [r4, #8]
 8002e58:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002e5c:	d002      	beq.n	8002e64 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e5e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002e62:	d1e4      	bne.n	8002e2e <SPI_EndRxTransaction+0x2e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e64:	9600      	str	r6, [sp, #0]
 8002e66:	462b      	mov	r3, r5
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f7ff ff40 	bl	8002cf4 <SPI_WaitFifoStateUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d0d9      	beq.n	8002e2e <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e7a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002e7c:	f043 0320 	orr.w	r3, r3, #32
 8002e80:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e7d3      	b.n	8002e2e <SPI_EndRxTransaction+0x2e>

08002e86 <HAL_SPI_Init>:
  if (hspi == NULL)
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d053      	beq.n	8002f32 <HAL_SPI_Init+0xac>
{
 8002e8a:	b510      	push	{r4, lr}
 8002e8c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e92:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d040      	beq.n	8002f1c <HAL_SPI_Init+0x96>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002ea0:	6822      	ldr	r2, [r4, #0]
 8002ea2:	6813      	ldr	r3, [r2, #0]
 8002ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eaa:	68e3      	ldr	r3, [r4, #12]
 8002eac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eb0:	d939      	bls.n	8002f26 <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002eb2:	2100      	movs	r1, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002eb4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002eb8:	d004      	beq.n	8002ec4 <HAL_SPI_Init+0x3e>
 8002eba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ebe:	d001      	beq.n	8002ec4 <HAL_SPI_Init+0x3e>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002ec4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ec6:	b922      	cbnz	r2, 8002ed2 <HAL_SPI_Init+0x4c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ec8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ecc:	d92e      	bls.n	8002f2c <HAL_SPI_Init+0xa6>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	68a0      	ldr	r0, [r4, #8]
 8002ed8:	4303      	orrs	r3, r0
 8002eda:	6920      	ldr	r0, [r4, #16]
 8002edc:	4303      	orrs	r3, r0
 8002ede:	6960      	ldr	r0, [r4, #20]
 8002ee0:	4303      	orrs	r3, r0
 8002ee2:	69a0      	ldr	r0, [r4, #24]
 8002ee4:	f400 7000 	and.w	r0, r0, #512	; 0x200
 8002ee8:	4303      	orrs	r3, r0
 8002eea:	69e0      	ldr	r0, [r4, #28]
 8002eec:	4303      	orrs	r3, r0
 8002eee:	6a20      	ldr	r0, [r4, #32]
 8002ef0:	4303      	orrs	r3, r0
 8002ef2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002ef4:	4303      	orrs	r3, r0
 8002ef6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002ef8:	6822      	ldr	r2, [r4, #0]
 8002efa:	8b63      	ldrh	r3, [r4, #26]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f02:	4303      	orrs	r3, r0
 8002f04:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002f06:	4303      	orrs	r3, r0
 8002f08:	68e0      	ldr	r0, [r4, #12]
 8002f0a:	4303      	orrs	r3, r0
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f10:	2000      	movs	r0, #0
 8002f12:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8002f1a:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002f1c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002f20:	f7fe f946 	bl	80011b0 <HAL_SPI_MspInit>
 8002f24:	e7b9      	b.n	8002e9a <HAL_SPI_Init+0x14>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f2a:	e7c3      	b.n	8002eb4 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f30:	e7cf      	b.n	8002ed2 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8002f32:	2001      	movs	r0, #1
 8002f34:	4770      	bx	lr

08002f36 <HAL_SPI_DeInit>:
  if (hspi == NULL)
 8002f36:	b190      	cbz	r0, 8002f5e <HAL_SPI_DeInit+0x28>
{
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	4604      	mov	r4, r0
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002f42:	6802      	ldr	r2, [r0, #0]
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f4a:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002f4c:	f7fe f958 	bl	8001200 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f50:	2000      	movs	r0, #0
 8002f52:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8002f54:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f58:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  return HAL_OK;
 8002f5c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f5e:	2001      	movs	r0, #1
 8002f60:	4770      	bx	lr
	...

08002f64 <HAL_SPI_TransmitReceive_IT>:
{
 8002f64:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 8002f66:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8002f6a:	2c01      	cmp	r4, #1
 8002f6c:	d06c      	beq.n	8003048 <HAL_SPI_TransmitReceive_IT+0xe4>
 8002f6e:	2401      	movs	r4, #1
 8002f70:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp  = hspi->State;
 8002f74:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8002f78:	b2e4      	uxtb	r4, r4
  tmp1 = hspi->Init.Mode;
 8002f7a:	6845      	ldr	r5, [r0, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002f7c:	2c01      	cmp	r4, #1
 8002f7e:	d010      	beq.n	8002fa2 <HAL_SPI_TransmitReceive_IT+0x3e>
 8002f80:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8002f84:	d006      	beq.n	8002f94 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	bc30      	pop	{r4, r5}
 8002f92:	4770      	bx	lr
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002f94:	6885      	ldr	r5, [r0, #8]
 8002f96:	2d00      	cmp	r5, #0
 8002f98:	d14c      	bne.n	8003034 <HAL_SPI_TransmitReceive_IT+0xd0>
 8002f9a:	2c04      	cmp	r4, #4
 8002f9c:	d001      	beq.n	8002fa2 <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e7f2      	b.n	8002f88 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fa2:	2900      	cmp	r1, #0
 8002fa4:	d048      	beq.n	8003038 <HAL_SPI_TransmitReceive_IT+0xd4>
 8002fa6:	2a00      	cmp	r2, #0
 8002fa8:	d048      	beq.n	800303c <HAL_SPI_TransmitReceive_IT+0xd8>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d048      	beq.n	8003040 <HAL_SPI_TransmitReceive_IT+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fae:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8002fb2:	b2e4      	uxtb	r4, r4
 8002fb4:	2c04      	cmp	r4, #4
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_TransmitReceive_IT+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fb8:	2405      	movs	r4, #5
 8002fba:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fbe:	2400      	movs	r4, #0
 8002fc0:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fc2:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002fc4:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002fc6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fc8:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002fca:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002fce:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fd2:	68c3      	ldr	r3, [r0, #12]
 8002fd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fd8:	d921      	bls.n	800301e <HAL_SPI_TransmitReceive_IT+0xba>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002fda:	4b1c      	ldr	r3, [pc, #112]	; (800304c <HAL_SPI_TransmitReceive_IT+0xe8>)
 8002fdc:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002fde:	4b1c      	ldr	r3, [pc, #112]	; (8003050 <HAL_SPI_TransmitReceive_IT+0xec>)
 8002fe0:	6503      	str	r3, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 8002fe2:	68c3      	ldr	r3, [r0, #12]
 8002fe4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fe8:	d804      	bhi.n	8002ff4 <HAL_SPI_TransmitReceive_IT+0x90>
 8002fea:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d919      	bls.n	8003028 <HAL_SPI_TransmitReceive_IT+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ff4:	6802      	ldr	r2, [r0, #0]
 8002ff6:	6853      	ldr	r3, [r2, #4]
 8002ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ffc:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ffe:	6802      	ldr	r2, [r0, #0]
 8003000:	6853      	ldr	r3, [r2, #4]
 8003002:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003006:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003008:	6803      	ldr	r3, [r0, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003010:	d118      	bne.n	8003044 <HAL_SPI_TransmitReceive_IT+0xe0>
    __HAL_SPI_ENABLE(hspi);
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003018:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e7b4      	b.n	8002f88 <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800301e:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_SPI_TransmitReceive_IT+0xf0>)
 8003020:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_SPI_TransmitReceive_IT+0xf4>)
 8003024:	6503      	str	r3, [r0, #80]	; 0x50
 8003026:	e7dc      	b.n	8002fe2 <HAL_SPI_TransmitReceive_IT+0x7e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003028:	6802      	ldr	r2, [r0, #0]
 800302a:	6853      	ldr	r3, [r2, #4]
 800302c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003030:	6053      	str	r3, [r2, #4]
 8003032:	e7e4      	b.n	8002ffe <HAL_SPI_TransmitReceive_IT+0x9a>
    errorcode = HAL_BUSY;
 8003034:	2302      	movs	r3, #2
 8003036:	e7a7      	b.n	8002f88 <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e7a5      	b.n	8002f88 <HAL_SPI_TransmitReceive_IT+0x24>
 800303c:	2301      	movs	r3, #1
 800303e:	e7a3      	b.n	8002f88 <HAL_SPI_TransmitReceive_IT+0x24>
 8003040:	2301      	movs	r3, #1
 8003042:	e7a1      	b.n	8002f88 <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e79f      	b.n	8002f88 <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 8003048:	2302      	movs	r3, #2
 800304a:	e7a0      	b.n	8002f8e <HAL_SPI_TransmitReceive_IT+0x2a>
 800304c:	08003343 	.word	0x08003343
 8003050:	08003309 	.word	0x08003309
 8003054:	0800328f 	.word	0x0800328f
 8003058:	08003235 	.word	0x08003235

0800305c <HAL_SPI_Receive_IT>:
{
 800305c:	b510      	push	{r4, lr}
 800305e:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003060:	6880      	ldr	r0, [r0, #8]
 8003062:	b918      	cbnz	r0, 800306c <HAL_SPI_Receive_IT+0x10>
 8003064:	6863      	ldr	r3, [r4, #4]
 8003066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800306a:	d010      	beq.n	800308e <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 800306c:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8003070:	2801      	cmp	r0, #1
 8003072:	d05a      	beq.n	800312a <HAL_SPI_Receive_IT+0xce>
 8003074:	2301      	movs	r3, #1
 8003076:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800307a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800307e:	b2c0      	uxtb	r0, r0
 8003080:	4298      	cmp	r0, r3
 8003082:	d00d      	beq.n	80030a0 <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 8003084:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8003086:	2300      	movs	r3, #0
 8003088:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800308c:	bd10      	pop	{r4, pc}
 800308e:	4613      	mov	r3, r2
 8003090:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003092:	2204      	movs	r2, #4
 8003094:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003098:	460a      	mov	r2, r1
 800309a:	f7ff ff63 	bl	8002f64 <HAL_SPI_TransmitReceive_IT>
 800309e:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 80030a0:	2900      	cmp	r1, #0
 80030a2:	d03c      	beq.n	800311e <HAL_SPI_Receive_IT+0xc2>
 80030a4:	2a00      	cmp	r2, #0
 80030a6:	d03c      	beq.n	8003122 <HAL_SPI_Receive_IT+0xc6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030a8:	2304      	movs	r3, #4
 80030aa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030b2:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80030b4:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80030b8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030bc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80030be:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80030c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030c2:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030c4:	68e3      	ldr	r3, [r4, #12]
 80030c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030ca:	d91a      	bls.n	8003102 <HAL_SPI_Receive_IT+0xa6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	6853      	ldr	r3, [r2, #4]
 80030d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030d4:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_SPI_Receive_IT+0xd4>)
 80030d8:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030da:	68a3      	ldr	r3, [r4, #8]
 80030dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e0:	d017      	beq.n	8003112 <HAL_SPI_Receive_IT+0xb6>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	6853      	ldr	r3, [r2, #4]
 80030e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030ea:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80030f4:	d117      	bne.n	8003126 <HAL_SPI_Receive_IT+0xca>
    __HAL_SPI_ENABLE(hspi);
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030fc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030fe:	2000      	movs	r0, #0
 8003100:	e7c1      	b.n	8003086 <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003102:	6822      	ldr	r2, [r4, #0]
 8003104:	6853      	ldr	r3, [r2, #4]
 8003106:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800310a:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_SPI_Receive_IT+0xd8>)
 800310e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003110:	e7e3      	b.n	80030da <HAL_SPI_Receive_IT+0x7e>
    SPI_1LINE_RX(hspi);
 8003112:	6822      	ldr	r2, [r4, #0]
 8003114:	6813      	ldr	r3, [r2, #0]
 8003116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	e7e1      	b.n	80030e2 <HAL_SPI_Receive_IT+0x86>
    errorcode = HAL_ERROR;
 800311e:	2001      	movs	r0, #1
 8003120:	e7b1      	b.n	8003086 <HAL_SPI_Receive_IT+0x2a>
 8003122:	2001      	movs	r0, #1
 8003124:	e7af      	b.n	8003086 <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003126:	2000      	movs	r0, #0
 8003128:	e7ad      	b.n	8003086 <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 800312a:	2002      	movs	r0, #2
}
 800312c:	bd10      	pop	{r4, pc}
 800312e:	bf00      	nop
 8003130:	080031a9 	.word	0x080031a9
 8003134:	0800317d 	.word	0x0800317d

08003138 <HAL_SPI_RxCpltCallback>:
{
 8003138:	4770      	bx	lr

0800313a <HAL_SPI_TxRxCpltCallback>:
{
 800313a:	4770      	bx	lr

0800313c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800313c:	b510      	push	{r4, lr}
 800313e:	4604      	mov	r4, r0
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003140:	6802      	ldr	r2, [r0, #0]
 8003142:	6853      	ldr	r3, [r2, #4]
 8003144:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003148:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800314a:	f7fe fb05 	bl	8001758 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	2164      	movs	r1, #100	; 0x64
 8003152:	4620      	mov	r0, r4
 8003154:	f7ff fe54 	bl	8002e00 <SPI_EndRxTransaction>
 8003158:	b118      	cbz	r0, 8003162 <SPI_CloseRx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800315a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800315c:	f043 0320 	orr.w	r3, r3, #32
 8003160:	6623      	str	r3, [r4, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003162:	2301      	movs	r3, #1
 8003164:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003168:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800316a:	b11b      	cbz	r3, 8003174 <SPI_CloseRx_ISR+0x38>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800316c:	4620      	mov	r0, r4
 800316e:	f7fe f81b 	bl	80011a8 <HAL_SPI_ErrorCallback>
 8003172:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8003174:	4620      	mov	r0, r4
 8003176:	f7ff ffdf 	bl	8003138 <HAL_SPI_RxCpltCallback>
 800317a:	bd10      	pop	{r4, pc}

0800317c <SPI_RxISR_8BIT>:
{
 800317c:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 800317e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	6402      	str	r2, [r0, #64]	; 0x40
 8003184:	6802      	ldr	r2, [r0, #0]
 8003186:	7b12      	ldrb	r2, [r2, #12]
 8003188:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800318a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29b      	uxth	r3, r3
 8003194:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8003198:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800319c:	b29b      	uxth	r3, r3
 800319e:	b103      	cbz	r3, 80031a2 <SPI_RxISR_8BIT+0x26>
 80031a0:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 80031a2:	f7ff ffcb 	bl	800313c <SPI_CloseRx_ISR>
}
 80031a6:	e7fb      	b.n	80031a0 <SPI_RxISR_8BIT+0x24>

080031a8 <SPI_RxISR_16BIT>:
{
 80031a8:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031ac:	6802      	ldr	r2, [r0, #0]
 80031ae:	68d2      	ldr	r2, [r2, #12]
 80031b0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80031b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031b4:	3302      	adds	r3, #2
 80031b6:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 80031b8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80031c6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	b103      	cbz	r3, 80031d0 <SPI_RxISR_16BIT+0x28>
 80031ce:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 80031d0:	f7ff ffb4 	bl	800313c <SPI_CloseRx_ISR>
}
 80031d4:	e7fb      	b.n	80031ce <SPI_RxISR_16BIT+0x26>

080031d6 <SPI_CloseRxTx_ISR>:
{
 80031d6:	b510      	push	{r4, lr}
 80031d8:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80031da:	f7fe fabd 	bl	8001758 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	6853      	ldr	r3, [r2, #4]
 80031e2:	f023 0320 	bic.w	r3, r3, #32
 80031e6:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80031e8:	4602      	mov	r2, r0
 80031ea:	2164      	movs	r1, #100	; 0x64
 80031ec:	4620      	mov	r0, r4
 80031ee:	f7ff fdd3 	bl	8002d98 <SPI_EndRxTxTransaction>
 80031f2:	b118      	cbz	r0, 80031fc <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80031f6:	f043 0320 	orr.w	r3, r3, #32
 80031fa:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80031fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80031fe:	b993      	cbnz	r3, 8003226 <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003200:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b04      	cmp	r3, #4
 8003208:	d006      	beq.n	8003218 <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 800320a:	2301      	movs	r3, #1
 800320c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8003210:	4620      	mov	r0, r4
 8003212:	f7ff ff92 	bl	800313a <HAL_SPI_TxRxCpltCallback>
 8003216:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8003218:	2301      	movs	r3, #1
 800321a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 800321e:	4620      	mov	r0, r4
 8003220:	f7ff ff8a 	bl	8003138 <HAL_SPI_RxCpltCallback>
 8003224:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 8003226:	2301      	movs	r3, #1
 8003228:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800322c:	4620      	mov	r0, r4
 800322e:	f7fd ffbb 	bl	80011a8 <HAL_SPI_ErrorCallback>
 8003232:	bd10      	pop	{r4, pc}

08003234 <SPI_2linesTxISR_8BIT>:
{
 8003234:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 8003236:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003238:	b29b      	uxth	r3, r3
 800323a:	2b01      	cmp	r3, #1
 800323c:	d918      	bls.n	8003270 <SPI_2linesTxISR_8BIT+0x3c>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800323e:	6803      	ldr	r3, [r0, #0]
 8003240:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003242:	8812      	ldrh	r2, [r2, #0]
 8003244:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003246:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003248:	3302      	adds	r3, #2
 800324a:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800324c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b02      	subs	r3, #2
 8003252:	b29b      	uxth	r3, r3
 8003254:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003256:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003258:	b29b      	uxth	r3, r3
 800325a:	b943      	cbnz	r3, 800326e <SPI_2linesTxISR_8BIT+0x3a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800325c:	6802      	ldr	r2, [r0, #0]
 800325e:	6853      	ldr	r3, [r2, #4]
 8003260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003264:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003266:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800326a:	b29b      	uxth	r3, r3
 800326c:	b163      	cbz	r3, 8003288 <SPI_2linesTxISR_8BIT+0x54>
 800326e:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8003270:	6802      	ldr	r2, [r0, #0]
 8003272:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003274:	1c59      	adds	r1, r3, #1
 8003276:	6381      	str	r1, [r0, #56]	; 0x38
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	7313      	strb	r3, [r2, #12]
    hspi->TxXferCount--;
 800327c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29b      	uxth	r3, r3
 8003284:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8003286:	e7e6      	b.n	8003256 <SPI_2linesTxISR_8BIT+0x22>
      SPI_CloseRxTx_ISR(hspi);
 8003288:	f7ff ffa5 	bl	80031d6 <SPI_CloseRxTx_ISR>
}
 800328c:	e7ef      	b.n	800326e <SPI_2linesTxISR_8BIT+0x3a>

0800328e <SPI_2linesRxISR_8BIT>:
{
 800328e:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 8003290:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d925      	bls.n	80032e6 <SPI_2linesRxISR_8BIT+0x58>
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800329a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800329c:	6802      	ldr	r2, [r0, #0]
 800329e:	68d2      	ldr	r2, [r2, #12]
 80032a0:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80032a4:	3302      	adds	r3, #2
 80032a6:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80032a8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b02      	subs	r3, #2
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80032b6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d00c      	beq.n	80032da <SPI_2linesRxISR_8BIT+0x4c>
  if (hspi->RxXferCount == 0U)
 80032c0:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	b93b      	cbnz	r3, 80032d8 <SPI_2linesRxISR_8BIT+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80032c8:	6802      	ldr	r2, [r0, #0]
 80032ca:	6853      	ldr	r3, [r2, #4]
 80032cc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80032d0:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 80032d2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	b1a3      	cbz	r3, 8003302 <SPI_2linesRxISR_8BIT+0x74>
 80032d8:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032da:	6802      	ldr	r2, [r0, #0]
 80032dc:	6853      	ldr	r3, [r2, #4]
 80032de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032e2:	6053      	str	r3, [r2, #4]
 80032e4:	e7ec      	b.n	80032c0 <SPI_2linesRxISR_8BIT+0x32>
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 80032e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	6402      	str	r2, [r0, #64]	; 0x40
 80032ec:	6802      	ldr	r2, [r0, #0]
 80032ee:	7b12      	ldrb	r2, [r2, #12]
 80032f0:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 80032f2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8003300:	e7de      	b.n	80032c0 <SPI_2linesRxISR_8BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 8003302:	f7ff ff68 	bl	80031d6 <SPI_CloseRxTx_ISR>
}
 8003306:	e7e7      	b.n	80032d8 <SPI_2linesRxISR_8BIT+0x4a>

08003308 <SPI_2linesTxISR_16BIT>:
{
 8003308:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800330a:	6803      	ldr	r3, [r0, #0]
 800330c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800330e:	8812      	ldrh	r2, [r2, #0]
 8003310:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003312:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003314:	3302      	adds	r3, #2
 8003316:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8003318:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29b      	uxth	r3, r3
 8003320:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003322:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003324:	b29b      	uxth	r3, r3
 8003326:	b943      	cbnz	r3, 800333a <SPI_2linesTxISR_16BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003328:	6802      	ldr	r2, [r0, #0]
 800332a:	6853      	ldr	r3, [r2, #4]
 800332c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003330:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003332:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003336:	b29b      	uxth	r3, r3
 8003338:	b103      	cbz	r3, 800333c <SPI_2linesTxISR_16BIT+0x34>
 800333a:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800333c:	f7ff ff4b 	bl	80031d6 <SPI_CloseRxTx_ISR>
}
 8003340:	e7fb      	b.n	800333a <SPI_2linesTxISR_16BIT+0x32>

08003342 <SPI_2linesRxISR_16BIT>:
{
 8003342:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003344:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003346:	6802      	ldr	r2, [r0, #0]
 8003348:	68d2      	ldr	r2, [r2, #12]
 800334a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800334c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800334e:	3302      	adds	r3, #2
 8003350:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003352:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29b      	uxth	r3, r3
 800335c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8003360:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003364:	b29b      	uxth	r3, r3
 8003366:	b93b      	cbnz	r3, 8003378 <SPI_2linesRxISR_16BIT+0x36>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003368:	6802      	ldr	r2, [r0, #0]
 800336a:	6853      	ldr	r3, [r2, #4]
 800336c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003370:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8003372:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003374:	b29b      	uxth	r3, r3
 8003376:	b103      	cbz	r3, 800337a <SPI_2linesRxISR_16BIT+0x38>
 8003378:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800337a:	f7ff ff2c 	bl	80031d6 <SPI_CloseRxTx_ISR>
}
 800337e:	e7fb      	b.n	8003378 <SPI_2linesRxISR_16BIT+0x36>

08003380 <HAL_SPI_IRQHandler>:
{
 8003380:	b510      	push	{r4, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003386:	6802      	ldr	r2, [r0, #0]
 8003388:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800338a:	6893      	ldr	r3, [r2, #8]
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800338c:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8003390:	2801      	cmp	r0, #1
 8003392:	d05c      	beq.n	800344e <HAL_SPI_IRQHandler+0xce>
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8003394:	f013 0f02 	tst.w	r3, #2
 8003398:	d002      	beq.n	80033a0 <HAL_SPI_IRQHandler+0x20>
 800339a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800339e:	d15d      	bne.n	800345c <HAL_SPI_IRQHandler+0xdc>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 80033a0:	f413 7fb0 	tst.w	r3, #352	; 0x160
 80033a4:	d05d      	beq.n	8003462 <HAL_SPI_IRQHandler+0xe2>
 80033a6:	f011 0f20 	tst.w	r1, #32
 80033aa:	d05a      	beq.n	8003462 <HAL_SPI_IRQHandler+0xe2>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 80033ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80033b0:	d00f      	beq.n	80033d2 <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80033b2:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80033b6:	b2c0      	uxtb	r0, r0
 80033b8:	2803      	cmp	r0, #3
 80033ba:	d054      	beq.n	8003466 <HAL_SPI_IRQHandler+0xe6>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80033bc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80033be:	f040 0004 	orr.w	r0, r0, #4
 80033c2:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033c4:	2000      	movs	r0, #0
 80033c6:	9000      	str	r0, [sp, #0]
 80033c8:	68d0      	ldr	r0, [r2, #12]
 80033ca:	9000      	str	r0, [sp, #0]
 80033cc:	6890      	ldr	r0, [r2, #8]
 80033ce:	9000      	str	r0, [sp, #0]
 80033d0:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 80033d2:	f013 0f20 	tst.w	r3, #32
 80033d6:	d00c      	beq.n	80033f2 <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033d8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80033da:	f040 0001 	orr.w	r0, r0, #1
 80033de:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033e0:	2000      	movs	r0, #0
 80033e2:	9002      	str	r0, [sp, #8]
 80033e4:	6890      	ldr	r0, [r2, #8]
 80033e6:	9002      	str	r0, [sp, #8]
 80033e8:	6810      	ldr	r0, [r2, #0]
 80033ea:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80033ee:	6010      	str	r0, [r2, #0]
 80033f0:	9a02      	ldr	r2, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 80033f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033f6:	d009      	beq.n	800340c <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80033f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033fa:	f043 0308 	orr.w	r3, r3, #8
 80033fe:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003400:	2300      	movs	r3, #0
 8003402:	9303      	str	r3, [sp, #12]
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	9303      	str	r3, [sp, #12]
 800340a:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800340c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800340e:	b343      	cbz	r3, 8003462 <HAL_SPI_IRQHandler+0xe2>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003410:	6822      	ldr	r2, [r4, #0]
 8003412:	6853      	ldr	r3, [r2, #4]
 8003414:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003418:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800341a:	2301      	movs	r3, #1
 800341c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003420:	f011 0f03 	tst.w	r1, #3
 8003424:	d027      	beq.n	8003476 <HAL_SPI_IRQHandler+0xf6>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003426:	6822      	ldr	r2, [r4, #0]
 8003428:	6853      	ldr	r3, [r2, #4]
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003430:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003432:	b123      	cbz	r3, 800343e <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003434:	4a12      	ldr	r2, [pc, #72]	; (8003480 <HAL_SPI_IRQHandler+0x100>)
 8003436:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8003438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800343a:	f7fe f9fb 	bl	8001834 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 800343e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003440:	b17b      	cbz	r3, 8003462 <HAL_SPI_IRQHandler+0xe2>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003442:	4a0f      	ldr	r2, [pc, #60]	; (8003480 <HAL_SPI_IRQHandler+0x100>)
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8003446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003448:	f7fe f9f4 	bl	8001834 <HAL_DMA_Abort_IT>
 800344c:	e009      	b.n	8003462 <HAL_SPI_IRQHandler+0xe2>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800344e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003452:	d09f      	beq.n	8003394 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8003454:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003456:	4620      	mov	r0, r4
 8003458:	4798      	blx	r3
    return;
 800345a:	e002      	b.n	8003462 <HAL_SPI_IRQHandler+0xe2>
    hspi->TxISR(hspi);
 800345c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800345e:	4620      	mov	r0, r4
 8003460:	4798      	blx	r3
}
 8003462:	b004      	add	sp, #16
 8003464:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003466:	2300      	movs	r3, #0
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	68d3      	ldr	r3, [r2, #12]
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	6893      	ldr	r3, [r2, #8]
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	9b01      	ldr	r3, [sp, #4]
        return;
 8003474:	e7f5      	b.n	8003462 <HAL_SPI_IRQHandler+0xe2>
        HAL_SPI_ErrorCallback(hspi);
 8003476:	4620      	mov	r0, r4
 8003478:	f7fd fe96 	bl	80011a8 <HAL_SPI_ErrorCallback>
 800347c:	e7f1      	b.n	8003462 <HAL_SPI_IRQHandler+0xe2>
 800347e:	bf00      	nop
 8003480:	08003485 	.word	0x08003485

08003484 <SPI_DMAAbortOnError>:
{
 8003484:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003486:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800348e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8003490:	f7fd fe8a 	bl	80011a8 <HAL_SPI_ErrorCallback>
 8003494:	bd08      	pop	{r3, pc}

08003496 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003496:	6802      	ldr	r2, [r0, #0]
 8003498:	6813      	ldr	r3, [r2, #0]
 800349a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800349e:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a0:	6802      	ldr	r2, [r0, #0]
 80034a2:	6893      	ldr	r3, [r2, #8]
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	6093      	str	r3, [r2, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034aa:	2320      	movs	r3, #32
 80034ac:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	6603      	str	r3, [r0, #96]	; 0x60
 80034b4:	4770      	bx	lr

080034b6 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034b6:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b21      	cmp	r3, #33	; 0x21
 80034be:	d000      	beq.n	80034c2 <UART_TxISR_8BIT+0xc>
 80034c0:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 80034c2:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	b16b      	cbz	r3, 80034e6 <UART_TxISR_8BIT+0x30>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80034ca:	6802      	ldr	r2, [r0, #0]
 80034cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80034ce:	1c59      	adds	r1, r3, #1
 80034d0:	64c1      	str	r1, [r0, #76]	; 0x4c
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80034d6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 80034e4:	e7ec      	b.n	80034c0 <UART_TxISR_8BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034e6:	6802      	ldr	r2, [r0, #0]
 80034e8:	6813      	ldr	r3, [r2, #0]
 80034ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ee:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034f0:	6802      	ldr	r2, [r0, #0]
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4770      	bx	lr

080034fc <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034fc:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b21      	cmp	r3, #33	; 0x21
 8003504:	d000      	beq.n	8003508 <UART_TxISR_16BIT+0xc>
 8003506:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 8003508:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800350c:	b29b      	uxth	r3, r3
 800350e:	b183      	cbz	r3, 8003532 <UART_TxISR_16BIT+0x36>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003510:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8003512:	6802      	ldr	r2, [r0, #0]
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2;
 800351c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800351e:	3302      	adds	r3, #2
 8003520:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8003522:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29b      	uxth	r3, r3
 800352c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8003530:	e7e9      	b.n	8003506 <UART_TxISR_16BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003532:	6802      	ldr	r2, [r0, #0]
 8003534:	6813      	ldr	r3, [r2, #0]
 8003536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800353a:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800353c:	6802      	ldr	r2, [r0, #0]
 800353e:	6813      	ldr	r3, [r2, #0]
 8003540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4770      	bx	lr

08003548 <HAL_UART_DeInit>:
  if (huart == NULL)
 8003548:	b1d8      	cbz	r0, 8003582 <HAL_UART_DeInit+0x3a>
{
 800354a:	b538      	push	{r3, r4, r5, lr}
 800354c:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800354e:	2324      	movs	r3, #36	; 0x24
 8003550:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003554:	6802      	ldr	r2, [r0, #0]
 8003556:	6813      	ldr	r3, [r2, #0]
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800355e:	6803      	ldr	r3, [r0, #0]
 8003560:	2500      	movs	r5, #0
 8003562:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003564:	6803      	ldr	r3, [r0, #0]
 8003566:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003568:	6803      	ldr	r3, [r0, #0]
 800356a:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800356c:	f7fd ff80 	bl	8001470 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003570:	6765      	str	r5, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 8003572:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 8003576:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 800357a:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  return HAL_OK;
 800357e:	4628      	mov	r0, r5
 8003580:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003582:	2001      	movs	r0, #1
 8003584:	4770      	bx	lr
	...

08003588 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003588:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b20      	cmp	r3, #32
 8003590:	d001      	beq.n	8003596 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8003592:	2002      	movs	r0, #2
 8003594:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8003596:	b341      	cbz	r1, 80035ea <HAL_UART_Transmit_IT+0x62>
 8003598:	b34a      	cbz	r2, 80035ee <HAL_UART_Transmit_IT+0x66>
    __HAL_LOCK(huart);
 800359a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d027      	beq.n	80035f2 <HAL_UART_Transmit_IT+0x6a>
 80035a2:	2301      	movs	r3, #1
 80035a4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 80035a8:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80035aa:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80035ae:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b6:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035b8:	2321      	movs	r3, #33	; 0x21
 80035ba:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035be:	6883      	ldr	r3, [r0, #8]
 80035c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c4:	d00b      	beq.n	80035de <HAL_UART_Transmit_IT+0x56>
        huart->TxISR = UART_TxISR_8BIT;
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_UART_Transmit_IT+0x70>)
 80035c8:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_UNLOCK(huart);
 80035ca:	2300      	movs	r3, #0
 80035cc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80035d0:	6801      	ldr	r1, [r0, #0]
 80035d2:	680a      	ldr	r2, [r1, #0]
 80035d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035d8:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80035da:	4618      	mov	r0, r3
 80035dc:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035de:	6903      	ldr	r3, [r0, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f0      	bne.n	80035c6 <HAL_UART_Transmit_IT+0x3e>
        huart->TxISR = UART_TxISR_16BIT;
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_UART_Transmit_IT+0x74>)
 80035e6:	6643      	str	r3, [r0, #100]	; 0x64
 80035e8:	e7ef      	b.n	80035ca <HAL_UART_Transmit_IT+0x42>
      return HAL_ERROR;
 80035ea:	2001      	movs	r0, #1
 80035ec:	4770      	bx	lr
 80035ee:	2001      	movs	r0, #1
 80035f0:	4770      	bx	lr
    __HAL_LOCK(huart);
 80035f2:	2002      	movs	r0, #2
}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	080034b7 	.word	0x080034b7
 80035fc:	080034fd 	.word	0x080034fd

08003600 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003600:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b20      	cmp	r3, #32
 8003608:	d001      	beq.n	800360e <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 800360a:	2002      	movs	r0, #2
 800360c:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 800360e:	2900      	cmp	r1, #0
 8003610:	d056      	beq.n	80036c0 <HAL_UART_Receive_IT+0xc0>
 8003612:	2a00      	cmp	r2, #0
 8003614:	d056      	beq.n	80036c4 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 8003616:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800361a:	2b01      	cmp	r3, #1
 800361c:	d054      	beq.n	80036c8 <HAL_UART_Receive_IT+0xc8>
 800361e:	2301      	movs	r3, #1
 8003620:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 8003624:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003626:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800362a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8003632:	6883      	ldr	r3, [r0, #8]
 8003634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003638:	d006      	beq.n	8003648 <HAL_UART_Receive_IT+0x48>
 800363a:	b9a3      	cbnz	r3, 8003666 <HAL_UART_Receive_IT+0x66>
 800363c:	6903      	ldr	r3, [r0, #16]
 800363e:	b973      	cbnz	r3, 800365e <HAL_UART_Receive_IT+0x5e>
 8003640:	23ff      	movs	r3, #255	; 0xff
 8003642:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003646:	e011      	b.n	800366c <HAL_UART_Receive_IT+0x6c>
 8003648:	6903      	ldr	r3, [r0, #16]
 800364a:	b923      	cbnz	r3, 8003656 <HAL_UART_Receive_IT+0x56>
 800364c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8003650:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003654:	e00a      	b.n	800366c <HAL_UART_Receive_IT+0x6c>
 8003656:	23ff      	movs	r3, #255	; 0xff
 8003658:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800365c:	e006      	b.n	800366c <HAL_UART_Receive_IT+0x6c>
 800365e:	237f      	movs	r3, #127	; 0x7f
 8003660:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8003664:	e002      	b.n	800366c <HAL_UART_Receive_IT+0x6c>
 8003666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800366a:	d019      	beq.n	80036a0 <HAL_UART_Receive_IT+0xa0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	2300      	movs	r3, #0
 800366e:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003670:	2322      	movs	r3, #34	; 0x22
 8003672:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003676:	6802      	ldr	r2, [r0, #0]
 8003678:	6893      	ldr	r3, [r2, #8]
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6093      	str	r3, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	6883      	ldr	r3, [r0, #8]
 8003682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003686:	d015      	beq.n	80036b4 <HAL_UART_Receive_IT+0xb4>
        huart->RxISR = UART_RxISR_8BIT;
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_UART_Receive_IT+0xcc>)
 800368a:	6603      	str	r3, [r0, #96]	; 0x60
      __HAL_UNLOCK(huart);
 800368c:	2300      	movs	r3, #0
 800368e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003692:	6801      	ldr	r1, [r0, #0]
 8003694:	680a      	ldr	r2, [r1, #0]
 8003696:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800369a:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800369c:	4618      	mov	r0, r3
 800369e:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80036a0:	6903      	ldr	r3, [r0, #16]
 80036a2:	b91b      	cbnz	r3, 80036ac <HAL_UART_Receive_IT+0xac>
 80036a4:	237f      	movs	r3, #127	; 0x7f
 80036a6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80036aa:	e7df      	b.n	800366c <HAL_UART_Receive_IT+0x6c>
 80036ac:	233f      	movs	r3, #63	; 0x3f
 80036ae:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80036b2:	e7db      	b.n	800366c <HAL_UART_Receive_IT+0x6c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	6903      	ldr	r3, [r0, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e6      	bne.n	8003688 <HAL_UART_Receive_IT+0x88>
        huart->RxISR = UART_RxISR_16BIT;
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_UART_Receive_IT+0xd0>)
 80036bc:	6603      	str	r3, [r0, #96]	; 0x60
 80036be:	e7e5      	b.n	800368c <HAL_UART_Receive_IT+0x8c>
      return HAL_ERROR;
 80036c0:	2001      	movs	r0, #1
 80036c2:	4770      	bx	lr
 80036c4:	2001      	movs	r0, #1
 80036c6:	4770      	bx	lr
    __HAL_LOCK(huart);
 80036c8:	2002      	movs	r0, #2
}
 80036ca:	4770      	bx	lr
 80036cc:	080036f1 	.word	0x080036f1
 80036d0:	08003755 	.word	0x08003755

080036d4 <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036d4:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036d6:	6801      	ldr	r1, [r0, #0]
 80036d8:	680a      	ldr	r2, [r1, #0]
 80036da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036de:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036e0:	2220      	movs	r2, #32
 80036e2:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036e6:	2200      	movs	r2, #0
 80036e8:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ea:	f7fd fee3 	bl	80014b4 <HAL_UART_TxCpltCallback>
 80036ee:	bd08      	pop	{r3, pc}

080036f0 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 80036f0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036f4:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b22      	cmp	r3, #34	; 0x22
 80036fc:	d006      	beq.n	800370c <UART_RxISR_8BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036fe:	6802      	ldr	r2, [r0, #0]
 8003700:	8b13      	ldrh	r3, [r2, #24]
 8003702:	b29b      	uxth	r3, r3
 8003704:	f043 0308 	orr.w	r3, r3, #8
 8003708:	8313      	strh	r3, [r2, #24]
  }
}
 800370a:	4770      	bx	lr
{
 800370c:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800370e:	6803      	ldr	r3, [r0, #0]
 8003710:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003712:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003714:	1c5c      	adds	r4, r3, #1
 8003716:	6544      	str	r4, [r0, #84]	; 0x54
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	400a      	ands	r2, r1
 800371c:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0)
 800371e:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29b      	uxth	r3, r3
 8003728:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 800372c:	b103      	cbz	r3, 8003730 <UART_RxISR_8BIT+0x40>
 800372e:	bd10      	pop	{r4, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003730:	6802      	ldr	r2, [r0, #0]
 8003732:	6813      	ldr	r3, [r2, #0]
 8003734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003738:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373a:	6802      	ldr	r2, [r0, #0]
 800373c:	6893      	ldr	r3, [r2, #8]
 800373e:	f023 0301 	bic.w	r3, r3, #1
 8003742:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003744:	2320      	movs	r3, #32
 8003746:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800374e:	f7fd feef 	bl	8001530 <HAL_UART_RxCpltCallback>
 8003752:	bd10      	pop	{r4, pc}

08003754 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003754:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003756:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800375a:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b22      	cmp	r3, #34	; 0x22
 8003762:	d006      	beq.n	8003772 <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003764:	6802      	ldr	r2, [r0, #0]
 8003766:	8b13      	ldrh	r3, [r2, #24]
 8003768:	b29b      	uxth	r3, r3
 800376a:	f043 0308 	orr.w	r3, r3, #8
 800376e:	8313      	strh	r3, [r2, #24]
 8003770:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003772:	6803      	ldr	r3, [r0, #0]
 8003774:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003776:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8003778:	400a      	ands	r2, r1
 800377a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2;
 800377c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800377e:	3302      	adds	r3, #2
 8003780:	6543      	str	r3, [r0, #84]	; 0x54
    if (--huart->RxXferCount == 0)
 8003782:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1ed      	bne.n	8003770 <UART_RxISR_16BIT+0x1c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003794:	6802      	ldr	r2, [r0, #0]
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800379c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379e:	6802      	ldr	r2, [r0, #0]
 80037a0:	6893      	ldr	r3, [r2, #8]
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80037a8:	2320      	movs	r3, #32
 80037aa:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 80037b2:	f7fd febd 	bl	8001530 <HAL_UART_RxCpltCallback>
 80037b6:	bd08      	pop	{r3, pc}

080037b8 <HAL_UART_IRQHandler>:
{
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037bc:	6802      	ldr	r2, [r0, #0]
 80037be:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037c0:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037c2:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 80037c4:	f013 050f 	ands.w	r5, r3, #15
 80037c8:	d10c      	bne.n	80037e4 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 80037ca:	f013 0f20 	tst.w	r3, #32
 80037ce:	d009      	beq.n	80037e4 <HAL_UART_IRQHandler+0x2c>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037d0:	f011 0f20 	tst.w	r1, #32
 80037d4:	d006      	beq.n	80037e4 <HAL_UART_IRQHandler+0x2c>
      if (huart->RxISR != NULL)
 80037d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8093 	beq.w	8003904 <HAL_UART_IRQHandler+0x14c>
        huart->RxISR(huart);
 80037de:	4620      	mov	r0, r4
 80037e0:	4798      	blx	r3
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
  if ((errorflags != RESET)
 80037e4:	2d00      	cmp	r5, #0
 80037e6:	d06f      	beq.n	80038c8 <HAL_UART_IRQHandler+0x110>
      && (((cr3its & USART_CR3_EIE) != RESET)
 80037e8:	f010 0501 	ands.w	r5, r0, #1
 80037ec:	d102      	bne.n	80037f4 <HAL_UART_IRQHandler+0x3c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037ee:	f411 7f90 	tst.w	r1, #288	; 0x120
 80037f2:	d069      	beq.n	80038c8 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037f4:	f013 0f01 	tst.w	r3, #1
 80037f8:	d007      	beq.n	800380a <HAL_UART_IRQHandler+0x52>
 80037fa:	f411 7f80 	tst.w	r1, #256	; 0x100
 80037fe:	d004      	beq.n	800380a <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003800:	2001      	movs	r0, #1
 8003802:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003804:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003806:	4302      	orrs	r2, r0
 8003808:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800380a:	f013 0f02 	tst.w	r3, #2
 800380e:	d007      	beq.n	8003820 <HAL_UART_IRQHandler+0x68>
 8003810:	b135      	cbz	r5, 8003820 <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003812:	6822      	ldr	r2, [r4, #0]
 8003814:	2002      	movs	r0, #2
 8003816:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003818:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800381a:	f042 0204 	orr.w	r2, r2, #4
 800381e:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003820:	f013 0f04 	tst.w	r3, #4
 8003824:	d007      	beq.n	8003836 <HAL_UART_IRQHandler+0x7e>
 8003826:	b135      	cbz	r5, 8003836 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003828:	6822      	ldr	r2, [r4, #0]
 800382a:	2004      	movs	r0, #4
 800382c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800382e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003830:	f042 0202 	orr.w	r2, r2, #2
 8003834:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 8003836:	f013 0f08 	tst.w	r3, #8
 800383a:	d009      	beq.n	8003850 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 800383c:	f011 0f20 	tst.w	r1, #32
 8003840:	d100      	bne.n	8003844 <HAL_UART_IRQHandler+0x8c>
 8003842:	b12d      	cbz	r5, 8003850 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003844:	6822      	ldr	r2, [r4, #0]
 8003846:	2008      	movs	r0, #8
 8003848:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800384a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800384c:	4302      	orrs	r2, r0
 800384e:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003850:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003852:	2a00      	cmp	r2, #0
 8003854:	d056      	beq.n	8003904 <HAL_UART_IRQHandler+0x14c>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8003856:	f013 0f20 	tst.w	r3, #32
 800385a:	d006      	beq.n	800386a <HAL_UART_IRQHandler+0xb2>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800385c:	f011 0f20 	tst.w	r1, #32
 8003860:	d003      	beq.n	800386a <HAL_UART_IRQHandler+0xb2>
        if (huart->RxISR != NULL)
 8003862:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003864:	b10b      	cbz	r3, 800386a <HAL_UART_IRQHandler+0xb2>
          huart->RxISR(huart);
 8003866:	4620      	mov	r0, r4
 8003868:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800386a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800386c:	f013 0f08 	tst.w	r3, #8
 8003870:	d104      	bne.n	800387c <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003876:	f013 0f40 	tst.w	r3, #64	; 0x40
 800387a:	d01f      	beq.n	80038bc <HAL_UART_IRQHandler+0x104>
        UART_EndRxTransfer(huart);
 800387c:	4620      	mov	r0, r4
 800387e:	f7ff fe0a 	bl	8003496 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	f012 0f40 	tst.w	r2, #64	; 0x40
 800388a:	d013      	beq.n	80038b4 <HAL_UART_IRQHandler+0xfc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003892:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003894:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003896:	b14b      	cbz	r3, 80038ac <HAL_UART_IRQHandler+0xf4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003898:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <HAL_UART_IRQHandler+0x158>)
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800389c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800389e:	f7fd ffc9 	bl	8001834 <HAL_DMA_Abort_IT>
 80038a2:	b378      	cbz	r0, 8003904 <HAL_UART_IRQHandler+0x14c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038a4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80038a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80038a8:	4798      	blx	r3
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
            HAL_UART_ErrorCallback(huart);
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7fd fe89 	bl	80015c4 <HAL_UART_ErrorCallback>
 80038b2:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 80038b4:	4620      	mov	r0, r4
 80038b6:	f7fd fe85 	bl	80015c4 <HAL_UART_ErrorCallback>
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80038bc:	4620      	mov	r0, r4
 80038be:	f7fd fe81 	bl	80015c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	6763      	str	r3, [r4, #116]	; 0x74
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80038c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80038cc:	d002      	beq.n	80038d4 <HAL_UART_IRQHandler+0x11c>
 80038ce:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80038d2:	d10a      	bne.n	80038ea <HAL_UART_IRQHandler+0x132>
  if (((isrflags & USART_ISR_TXE) != RESET)
 80038d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80038d8:	d00e      	beq.n	80038f8 <HAL_UART_IRQHandler+0x140>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038da:	f011 0f80 	tst.w	r1, #128	; 0x80
 80038de:	d00b      	beq.n	80038f8 <HAL_UART_IRQHandler+0x140>
    if (huart->TxISR != NULL)
 80038e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038e2:	b17b      	cbz	r3, 8003904 <HAL_UART_IRQHandler+0x14c>
      huart->TxISR(huart);
 80038e4:	4620      	mov	r0, r4
 80038e6:	4798      	blx	r3
 80038e8:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80038ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80038ee:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80038f0:	4620      	mov	r0, r4
 80038f2:	f000 fb04 	bl	8003efe <HAL_UARTEx_WakeupCallback>
    return;
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038fc:	d002      	beq.n	8003904 <HAL_UART_IRQHandler+0x14c>
 80038fe:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003902:	d100      	bne.n	8003906 <HAL_UART_IRQHandler+0x14e>
 8003904:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8003906:	4620      	mov	r0, r4
 8003908:	f7ff fee4 	bl	80036d4 <UART_EndTransmit_IT>
    return;
 800390c:	e7fa      	b.n	8003904 <HAL_UART_IRQHandler+0x14c>
 800390e:	bf00      	nop
 8003910:	08003915 	.word	0x08003915

08003914 <UART_DMAAbortOnError>:
{
 8003914:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003916:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800391e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8003922:	f7fd fe4f 	bl	80015c4 <HAL_UART_ErrorCallback>
 8003926:	bd08      	pop	{r3, pc}

08003928 <UART_SetConfig>:
{
 8003928:	e92d 4b78 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, fp, lr}
 800392c:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800392e:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003930:	6883      	ldr	r3, [r0, #8]
 8003932:	6902      	ldr	r2, [r0, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	6942      	ldr	r2, [r0, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	69c2      	ldr	r2, [r0, #28]
 800393c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800393e:	6808      	ldr	r0, [r1, #0]
 8003940:	4a9b      	ldr	r2, [pc, #620]	; (8003bb0 <UART_SetConfig+0x288>)
 8003942:	4002      	ands	r2, r0
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003948:	6822      	ldr	r2, [r4, #0]
 800394a:	6853      	ldr	r3, [r2, #4]
 800394c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003950:	68e1      	ldr	r1, [r4, #12]
 8003952:	430b      	orrs	r3, r1
 8003954:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003956:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003958:	6822      	ldr	r2, [r4, #0]
 800395a:	4996      	ldr	r1, [pc, #600]	; (8003bb4 <UART_SetConfig+0x28c>)
 800395c:	428a      	cmp	r2, r1
 800395e:	d001      	beq.n	8003964 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8003960:	6a21      	ldr	r1, [r4, #32]
 8003962:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003964:	6891      	ldr	r1, [r2, #8]
 8003966:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800396a:	430b      	orrs	r3, r1
 800396c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	4a91      	ldr	r2, [pc, #580]	; (8003bb8 <UART_SetConfig+0x290>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d023      	beq.n	80039be <UART_SetConfig+0x96>
 8003976:	4a91      	ldr	r2, [pc, #580]	; (8003bbc <UART_SetConfig+0x294>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d034      	beq.n	80039e6 <UART_SetConfig+0xbe>
 800397c:	4a90      	ldr	r2, [pc, #576]	; (8003bc0 <UART_SetConfig+0x298>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d04a      	beq.n	8003a18 <UART_SetConfig+0xf0>
 8003982:	4a90      	ldr	r2, [pc, #576]	; (8003bc4 <UART_SetConfig+0x29c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d05d      	beq.n	8003a44 <UART_SetConfig+0x11c>
 8003988:	4a8a      	ldr	r2, [pc, #552]	; (8003bb4 <UART_SetConfig+0x28c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d070      	beq.n	8003a70 <UART_SetConfig+0x148>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800398e:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8003990:	4a88      	ldr	r2, [pc, #544]	; (8003bb4 <UART_SetConfig+0x28c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	f000 808f 	beq.w	8003ab6 <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003998:	69e3      	ldr	r3, [r4, #28]
 800399a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399e:	f000 80fd 	beq.w	8003b9c <UART_SetConfig+0x274>
    switch (clocksource)
 80039a2:	2d08      	cmp	r5, #8
 80039a4:	f200 819b 	bhi.w	8003cde <UART_SetConfig+0x3b6>
 80039a8:	e8df f015 	tbh	[pc, r5, lsl #1]
 80039ac:	0171015a 	.word	0x0171015a
 80039b0:	0199017b 	.word	0x0199017b
 80039b4:	01990186 	.word	0x01990186
 80039b8:	01990199 	.word	0x01990199
 80039bc:	0190      	.short	0x0190
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039be:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80039c2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80039c6:	f002 0203 	and.w	r2, r2, #3
 80039ca:	2a03      	cmp	r2, #3
 80039cc:	d809      	bhi.n	80039e2 <UART_SetConfig+0xba>
 80039ce:	e8df f002 	tbb	[pc, r2]
 80039d2:	0402      	.short	0x0402
 80039d4:	0668      	.short	0x0668
 80039d6:	2501      	movs	r5, #1
 80039d8:	e7da      	b.n	8003990 <UART_SetConfig+0x68>
 80039da:	2504      	movs	r5, #4
 80039dc:	e7d8      	b.n	8003990 <UART_SetConfig+0x68>
 80039de:	2508      	movs	r5, #8
 80039e0:	e7d6      	b.n	8003990 <UART_SetConfig+0x68>
 80039e2:	2510      	movs	r5, #16
 80039e4:	e7d4      	b.n	8003990 <UART_SetConfig+0x68>
 80039e6:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80039ea:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80039ee:	f002 020c 	and.w	r2, r2, #12
 80039f2:	2a0c      	cmp	r2, #12
 80039f4:	d80e      	bhi.n	8003a14 <UART_SetConfig+0xec>
 80039f6:	e8df f002 	tbb	[pc, r2]
 80039fa:	0d07      	.short	0x0d07
 80039fc:	0d090d0d 	.word	0x0d090d0d
 8003a00:	0d560d0d 	.word	0x0d560d0d
 8003a04:	0d0d      	.short	0x0d0d
 8003a06:	0b          	.byte	0x0b
 8003a07:	00          	.byte	0x00
 8003a08:	2500      	movs	r5, #0
 8003a0a:	e7c1      	b.n	8003990 <UART_SetConfig+0x68>
 8003a0c:	2504      	movs	r5, #4
 8003a0e:	e7bf      	b.n	8003990 <UART_SetConfig+0x68>
 8003a10:	2508      	movs	r5, #8
 8003a12:	e7bd      	b.n	8003990 <UART_SetConfig+0x68>
 8003a14:	2510      	movs	r5, #16
 8003a16:	e7bb      	b.n	8003990 <UART_SetConfig+0x68>
 8003a18:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8003a1c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003a20:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003a24:	2a10      	cmp	r2, #16
 8003a26:	d009      	beq.n	8003a3c <UART_SetConfig+0x114>
 8003a28:	d905      	bls.n	8003a36 <UART_SetConfig+0x10e>
 8003a2a:	2a20      	cmp	r2, #32
 8003a2c:	d03d      	beq.n	8003aaa <UART_SetConfig+0x182>
 8003a2e:	2a30      	cmp	r2, #48	; 0x30
 8003a30:	d106      	bne.n	8003a40 <UART_SetConfig+0x118>
 8003a32:	2508      	movs	r5, #8
 8003a34:	e7ac      	b.n	8003990 <UART_SetConfig+0x68>
 8003a36:	b91a      	cbnz	r2, 8003a40 <UART_SetConfig+0x118>
 8003a38:	2500      	movs	r5, #0
 8003a3a:	e7a9      	b.n	8003990 <UART_SetConfig+0x68>
 8003a3c:	2504      	movs	r5, #4
 8003a3e:	e7a7      	b.n	8003990 <UART_SetConfig+0x68>
 8003a40:	2510      	movs	r5, #16
 8003a42:	e7a5      	b.n	8003990 <UART_SetConfig+0x68>
 8003a44:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8003a48:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003a4c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003a50:	2a40      	cmp	r2, #64	; 0x40
 8003a52:	d009      	beq.n	8003a68 <UART_SetConfig+0x140>
 8003a54:	d905      	bls.n	8003a62 <UART_SetConfig+0x13a>
 8003a56:	2a80      	cmp	r2, #128	; 0x80
 8003a58:	d029      	beq.n	8003aae <UART_SetConfig+0x186>
 8003a5a:	2ac0      	cmp	r2, #192	; 0xc0
 8003a5c:	d106      	bne.n	8003a6c <UART_SetConfig+0x144>
 8003a5e:	2508      	movs	r5, #8
 8003a60:	e796      	b.n	8003990 <UART_SetConfig+0x68>
 8003a62:	b91a      	cbnz	r2, 8003a6c <UART_SetConfig+0x144>
 8003a64:	2500      	movs	r5, #0
 8003a66:	e793      	b.n	8003990 <UART_SetConfig+0x68>
 8003a68:	2504      	movs	r5, #4
 8003a6a:	e791      	b.n	8003990 <UART_SetConfig+0x68>
 8003a6c:	2510      	movs	r5, #16
 8003a6e:	e78f      	b.n	8003990 <UART_SetConfig+0x68>
 8003a70:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8003a74:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003a78:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003a7c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003a80:	d00b      	beq.n	8003a9a <UART_SetConfig+0x172>
 8003a82:	d907      	bls.n	8003a94 <UART_SetConfig+0x16c>
 8003a84:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003a88:	d013      	beq.n	8003ab2 <UART_SetConfig+0x18a>
 8003a8a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8003a8e:	d106      	bne.n	8003a9e <UART_SetConfig+0x176>
 8003a90:	2508      	movs	r5, #8
 8003a92:	e77d      	b.n	8003990 <UART_SetConfig+0x68>
 8003a94:	b91a      	cbnz	r2, 8003a9e <UART_SetConfig+0x176>
 8003a96:	2500      	movs	r5, #0
 8003a98:	e77a      	b.n	8003990 <UART_SetConfig+0x68>
 8003a9a:	2504      	movs	r5, #4
 8003a9c:	e778      	b.n	8003990 <UART_SetConfig+0x68>
 8003a9e:	2510      	movs	r5, #16
 8003aa0:	e776      	b.n	8003990 <UART_SetConfig+0x68>
 8003aa2:	2502      	movs	r5, #2
 8003aa4:	e774      	b.n	8003990 <UART_SetConfig+0x68>
 8003aa6:	2502      	movs	r5, #2
 8003aa8:	e772      	b.n	8003990 <UART_SetConfig+0x68>
 8003aaa:	2502      	movs	r5, #2
 8003aac:	e770      	b.n	8003990 <UART_SetConfig+0x68>
 8003aae:	2502      	movs	r5, #2
 8003ab0:	e76e      	b.n	8003990 <UART_SetConfig+0x68>
 8003ab2:	2502      	movs	r5, #2
 8003ab4:	e76c      	b.n	8003990 <UART_SetConfig+0x68>
    switch (clocksource)
 8003ab6:	2d08      	cmp	r5, #8
 8003ab8:	d811      	bhi.n	8003ade <UART_SetConfig+0x1b6>
 8003aba:	e8df f005 	tbb	[pc, r5]
 8003abe:	1008      	.short	0x1008
 8003ac0:	100c1005 	.word	0x100c1005
 8003ac4:	1010      	.short	0x1010
 8003ac6:	13          	.byte	0x13
 8003ac7:	00          	.byte	0x00
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003ac8:	483f      	ldr	r0, [pc, #252]	; (8003bc8 <UART_SetConfig+0x2a0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aca:	2600      	movs	r6, #0
 8003acc:	e00d      	b.n	8003aea <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7fe fc73 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad2:	2600      	movs	r6, #0
        break;
 8003ad4:	e009      	b.n	8003aea <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003ad6:	f7fe f855 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ada:	2600      	movs	r6, #0
        break;
 8003adc:	e005      	b.n	8003aea <UART_SetConfig+0x1c2>
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003ade:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8003ae0:	2601      	movs	r6, #1
        break;
 8003ae2:	e002      	b.n	8003aea <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003ae4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ae8:	2600      	movs	r6, #0
    if (lpuart_ker_ck_pres != 0U)
 8003aea:	2800      	cmp	r0, #0
 8003aec:	f000 80c9 	beq.w	8003c82 <UART_SetConfig+0x35a>
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8003af0:	6862      	ldr	r2, [r4, #4]
 8003af2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003af6:	4298      	cmp	r0, r3
 8003af8:	f0c0 80f4 	bcc.w	8003ce4 <UART_SetConfig+0x3bc>
 8003afc:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003b00:	f200 80f2 	bhi.w	8003ce8 <UART_SetConfig+0x3c0>
        switch (clocksource)
 8003b04:	2d08      	cmp	r5, #8
 8003b06:	d846      	bhi.n	8003b96 <UART_SetConfig+0x26e>
 8003b08:	e8df f005 	tbb	[pc, r5]
 8003b0c:	451f4505 	.word	0x451f4505
 8003b10:	45454529 	.word	0x45454529
 8003b14:	3b          	.byte	0x3b
 8003b15:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003b16:	f7fe fc4f 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8003b20:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003b24:	6862      	ldr	r2, [r4, #4]
 8003b26:	0850      	lsrs	r0, r2, #1
 8003b28:	eb18 0b00 	adds.w	fp, r8, r0
 8003b2c:	f149 0c00 	adc.w	ip, r9, #0
 8003b30:	4658      	mov	r0, fp
 8003b32:	4661      	mov	r1, ip
 8003b34:	f7fc fb4e 	bl	80001d4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b38:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8003b3c:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <UART_SetConfig+0x2a4>)
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	f200 80d4 	bhi.w	8003cec <UART_SetConfig+0x3c4>
          huart->Instance->BRR = usartdiv;
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	60d8      	str	r0, [r3, #12]
 8003b48:	e09b      	b.n	8003c82 <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003b4a:	0855      	lsrs	r5, r2, #1
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	4820      	ldr	r0, [pc, #128]	; (8003bd0 <UART_SetConfig+0x2a8>)
 8003b50:	2100      	movs	r1, #0
 8003b52:	1940      	adds	r0, r0, r5
 8003b54:	f141 0100 	adc.w	r1, r1, #0
 8003b58:	f7fc fb3c 	bl	80001d4 <__aeabi_uldivmod>
            break;
 8003b5c:	e7ec      	b.n	8003b38 <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003b5e:	f7fe f811 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8003b62:	2300      	movs	r3, #0
 8003b64:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8003b68:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003b6c:	6862      	ldr	r2, [r4, #4]
 8003b6e:	0850      	lsrs	r0, r2, #1
 8003b70:	eb18 0b00 	adds.w	fp, r8, r0
 8003b74:	f149 0c00 	adc.w	ip, r9, #0
 8003b78:	4658      	mov	r0, fp
 8003b7a:	4661      	mov	r1, ip
 8003b7c:	f7fc fb2a 	bl	80001d4 <__aeabi_uldivmod>
            break;
 8003b80:	e7da      	b.n	8003b38 <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003b82:	0850      	lsrs	r0, r2, #1
 8003b84:	2100      	movs	r1, #0
 8003b86:	2300      	movs	r3, #0
 8003b88:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8003b8c:	f141 0100 	adc.w	r1, r1, #0
 8003b90:	f7fc fb20 	bl	80001d4 <__aeabi_uldivmod>
            break;
 8003b94:	e7d0      	b.n	8003b38 <UART_SetConfig+0x210>
            ret = HAL_ERROR;
 8003b96:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003b98:	2000      	movs	r0, #0
 8003b9a:	e7cd      	b.n	8003b38 <UART_SetConfig+0x210>
    switch (clocksource)
 8003b9c:	2d08      	cmp	r5, #8
 8003b9e:	d85c      	bhi.n	8003c5a <UART_SetConfig+0x332>
 8003ba0:	e8df f005 	tbb	[pc, r5]
 8003ba4:	5b3c3118 	.word	0x5b3c3118
 8003ba8:	5b5b5b47 	.word	0x5b5b5b47
 8003bac:	52          	.byte	0x52
 8003bad:	00          	.byte	0x00
 8003bae:	bf00      	nop
 8003bb0:	efff69f3 	.word	0xefff69f3
 8003bb4:	40008000 	.word	0x40008000
 8003bb8:	40013800 	.word	0x40013800
 8003bbc:	40004400 	.word	0x40004400
 8003bc0:	40004800 	.word	0x40004800
 8003bc4:	40004c00 	.word	0x40004c00
 8003bc8:	00f42400 	.word	0x00f42400
 8003bcc:	000ffcff 	.word	0x000ffcff
 8003bd0:	f4240000 	.word	0xf4240000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003bd4:	f7fe fbf0 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003bd8:	6862      	ldr	r2, [r4, #4]
 8003bda:	0853      	lsrs	r3, r2, #1
 8003bdc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003be0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003be4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003be6:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003be8:	f1a3 0110 	sub.w	r1, r3, #16
 8003bec:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003bf0:	4291      	cmp	r1, r2
 8003bf2:	d87d      	bhi.n	8003cf0 <UART_SetConfig+0x3c8>
      brrtemp = usartdiv & 0xFFF0U;
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bfa:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8003bfe:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	60d3      	str	r3, [r2, #12]
 8003c04:	e03d      	b.n	8003c82 <UART_SetConfig+0x35a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003c06:	f7fe fbe7 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8003c0a:	6862      	ldr	r2, [r4, #4]
 8003c0c:	0853      	lsrs	r3, r2, #1
 8003c0e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003c12:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c16:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c18:	2600      	movs	r6, #0
        break;
 8003c1a:	e7e5      	b.n	8003be8 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c1c:	6862      	ldr	r2, [r4, #4]
 8003c1e:	0853      	lsrs	r3, r2, #1
 8003c20:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003c24:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c2c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c2e:	2600      	movs	r6, #0
        break;
 8003c30:	e7da      	b.n	8003be8 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c32:	f7fd ffa7 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8003c36:	6862      	ldr	r2, [r4, #4]
 8003c38:	0853      	lsrs	r3, r2, #1
 8003c3a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c42:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c44:	2600      	movs	r6, #0
        break;
 8003c46:	e7cf      	b.n	8003be8 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c48:	6862      	ldr	r2, [r4, #4]
 8003c4a:	0853      	lsrs	r3, r2, #1
 8003c4c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c54:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c56:	2600      	movs	r6, #0
        break;
 8003c58:	e7c6      	b.n	8003be8 <UART_SetConfig+0x2c0>
        ret = HAL_ERROR;
 8003c5a:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e7c3      	b.n	8003be8 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003c60:	f7fe fbaa 	bl	80023b8 <HAL_RCC_GetPCLK1Freq>
 8003c64:	6863      	ldr	r3, [r4, #4]
 8003c66:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003c6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c6e:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c70:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c72:	f1a0 0210 	sub.w	r2, r0, #16
 8003c76:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d83a      	bhi.n	8003cf4 <UART_SetConfig+0x3cc>
      huart->Instance->BRR = usartdiv;
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003c86:	6663      	str	r3, [r4, #100]	; 0x64
}
 8003c88:	4630      	mov	r0, r6
 8003c8a:	e8bd 8b78 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003c8e:	f7fe fba3 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8003c92:	6863      	ldr	r3, [r4, #4]
 8003c94:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003c98:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c9c:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c9e:	2600      	movs	r6, #0
        break;
 8003ca0:	e7e7      	b.n	8003c72 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003ca2:	6863      	ldr	r3, [r4, #4]
 8003ca4:	0858      	lsrs	r0, r3, #1
 8003ca6:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8003caa:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 8003cae:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cb2:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cb4:	2600      	movs	r6, #0
        break;
 8003cb6:	e7dc      	b.n	8003c72 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003cb8:	f7fd ff64 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8003cbc:	6863      	ldr	r3, [r4, #4]
 8003cbe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003cc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cc6:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cc8:	2600      	movs	r6, #0
        break;
 8003cca:	e7d2      	b.n	8003c72 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	0858      	lsrs	r0, r3, #1
 8003cd0:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8003cd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8003cd8:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cda:	2600      	movs	r6, #0
        break;
 8003cdc:	e7c9      	b.n	8003c72 <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 8003cde:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	e7c6      	b.n	8003c72 <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 8003ce4:	2601      	movs	r6, #1
 8003ce6:	e7cc      	b.n	8003c82 <UART_SetConfig+0x35a>
 8003ce8:	2601      	movs	r6, #1
 8003cea:	e7ca      	b.n	8003c82 <UART_SetConfig+0x35a>
          ret = HAL_ERROR;
 8003cec:	2601      	movs	r6, #1
 8003cee:	e7c8      	b.n	8003c82 <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 8003cf0:	2601      	movs	r6, #1
 8003cf2:	e7c6      	b.n	8003c82 <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 8003cf4:	2601      	movs	r6, #1
 8003cf6:	e7c4      	b.n	8003c82 <UART_SetConfig+0x35a>

08003cf8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003cfa:	f013 0f01 	tst.w	r3, #1
 8003cfe:	d006      	beq.n	8003d0e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d00:	6802      	ldr	r2, [r0, #0]
 8003d02:	6853      	ldr	r3, [r2, #4]
 8003d04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d08:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d10:	f013 0f02 	tst.w	r3, #2
 8003d14:	d006      	beq.n	8003d24 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d16:	6802      	ldr	r2, [r0, #0]
 8003d18:	6853      	ldr	r3, [r2, #4]
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d26:	f013 0f04 	tst.w	r3, #4
 8003d2a:	d006      	beq.n	8003d3a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d2c:	6802      	ldr	r2, [r0, #0]
 8003d2e:	6853      	ldr	r3, [r2, #4]
 8003d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d34:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003d36:	430b      	orrs	r3, r1
 8003d38:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d3c:	f013 0f08 	tst.w	r3, #8
 8003d40:	d006      	beq.n	8003d50 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d42:	6802      	ldr	r2, [r0, #0]
 8003d44:	6853      	ldr	r3, [r2, #4]
 8003d46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d4a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d52:	f013 0f10 	tst.w	r3, #16
 8003d56:	d006      	beq.n	8003d66 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d58:	6802      	ldr	r2, [r0, #0]
 8003d5a:	6893      	ldr	r3, [r2, #8]
 8003d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d60:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003d62:	430b      	orrs	r3, r1
 8003d64:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d66:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d68:	f013 0f20 	tst.w	r3, #32
 8003d6c:	d006      	beq.n	8003d7c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d6e:	6802      	ldr	r2, [r0, #0]
 8003d70:	6893      	ldr	r3, [r2, #8]
 8003d72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d76:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d82:	d00a      	beq.n	8003d9a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d84:	6802      	ldr	r2, [r0, #0]
 8003d86:	6853      	ldr	r3, [r2, #4]
 8003d88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003d8c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003d94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d98:	d00b      	beq.n	8003db2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d9a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003da0:	d006      	beq.n	8003db0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003da2:	6802      	ldr	r2, [r0, #0]
 8003da4:	6853      	ldr	r3, [r2, #4]
 8003da6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003daa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6053      	str	r3, [r2, #4]
 8003db0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003db2:	6802      	ldr	r2, [r0, #0]
 8003db4:	6853      	ldr	r3, [r2, #4]
 8003db6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003dba:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6053      	str	r3, [r2, #4]
 8003dc0:	e7eb      	b.n	8003d9a <UART_AdvFeatureConfig+0xa2>

08003dc2 <UART_WaitOnFlagUntilTimeout>:
{
 8003dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	460f      	mov	r7, r1
 8003dca:	4616      	mov	r6, r2
 8003dcc:	4698      	mov	r8, r3
 8003dce:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	ea37 0303 	bics.w	r3, r7, r3
 8003dd8:	bf0c      	ite	eq
 8003dda:	2301      	moveq	r3, #1
 8003ddc:	2300      	movne	r3, #0
 8003dde:	42b3      	cmp	r3, r6
 8003de0:	d11e      	bne.n	8003e20 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8003de2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003de6:	d0f3      	beq.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003de8:	b12c      	cbz	r4, 8003df6 <UART_WaitOnFlagUntilTimeout+0x34>
 8003dea:	f7fd fcb5 	bl	8001758 <HAL_GetTick>
 8003dee:	eba0 0008 	sub.w	r0, r0, r8
 8003df2:	4284      	cmp	r4, r0
 8003df4:	d2ec      	bcs.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df6:	682a      	ldr	r2, [r5, #0]
 8003df8:	6813      	ldr	r3, [r2, #0]
 8003dfa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dfe:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e00:	682a      	ldr	r2, [r5, #0]
 8003e02:	6893      	ldr	r3, [r2, #8]
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003e0a:	2320      	movs	r3, #32
 8003e0c:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8003e10:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8003e14:	2300      	movs	r3, #0
 8003e16:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8003e1a:	2003      	movs	r0, #3
 8003e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8003e20:	2000      	movs	r0, #0
}
 8003e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e26 <UART_CheckIdleState>:
{
 8003e26:	b530      	push	{r4, r5, lr}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6743      	str	r3, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8003e30:	f7fd fc92 	bl	8001758 <HAL_GetTick>
 8003e34:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f013 0f08 	tst.w	r3, #8
 8003e3e:	d10e      	bne.n	8003e5e <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f013 0f04 	tst.w	r3, #4
 8003e48:	d117      	bne.n	8003e7a <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8003e50:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 8003e54:	2000      	movs	r0, #0
 8003e56:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8003e5a:	b003      	add	sp, #12
 8003e5c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	4603      	mov	r3, r0
 8003e66:	2200      	movs	r2, #0
 8003e68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f7ff ffa8 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d0e4      	beq.n	8003e40 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003e76:	2003      	movs	r0, #3
 8003e78:	e7ef      	b.n	8003e5a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	462b      	mov	r3, r5
 8003e82:	2200      	movs	r2, #0
 8003e84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f7ff ff9a 	bl	8003dc2 <UART_WaitOnFlagUntilTimeout>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d0db      	beq.n	8003e4a <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003e92:	2003      	movs	r0, #3
 8003e94:	e7e1      	b.n	8003e5a <UART_CheckIdleState+0x34>

08003e96 <HAL_UART_Init>:
  if (huart == NULL)
 8003e96:	b378      	cbz	r0, 8003ef8 <HAL_UART_Init+0x62>
{
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003ea0:	b30b      	cbz	r3, 8003ee6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003ea2:	2324      	movs	r3, #36	; 0x24
 8003ea4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003ea8:	6822      	ldr	r2, [r4, #0]
 8003eaa:	6813      	ldr	r3, [r2, #0]
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f7ff fd38 	bl	8003928 <UART_SetConfig>
 8003eb8:	2801      	cmp	r0, #1
 8003eba:	d01f      	beq.n	8003efc <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ebe:	b9bb      	cbnz	r3, 8003ef0 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	6853      	ldr	r3, [r2, #4]
 8003ec4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003ec8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	6893      	ldr	r3, [r2, #8]
 8003ece:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003ed2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003ed4:	6822      	ldr	r2, [r4, #0]
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f7ff ffa1 	bl	8003e26 <UART_CheckIdleState>
 8003ee4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003ee6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003eea:	f7fd fa95 	bl	8001418 <HAL_UART_MspInit>
 8003eee:	e7d8      	b.n	8003ea2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f7ff ff01 	bl	8003cf8 <UART_AdvFeatureConfig>
 8003ef6:	e7e3      	b.n	8003ec0 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
 8003efa:	4770      	bx	lr
}
 8003efc:	bd10      	pop	{r4, pc}

08003efe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003efe:	4770      	bx	lr

08003f00 <__libc_init_array>:
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	4e0d      	ldr	r6, [pc, #52]	; (8003f38 <__libc_init_array+0x38>)
 8003f04:	4c0d      	ldr	r4, [pc, #52]	; (8003f3c <__libc_init_array+0x3c>)
 8003f06:	1ba4      	subs	r4, r4, r6
 8003f08:	10a4      	asrs	r4, r4, #2
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	42a5      	cmp	r5, r4
 8003f0e:	d109      	bne.n	8003f24 <__libc_init_array+0x24>
 8003f10:	4e0b      	ldr	r6, [pc, #44]	; (8003f40 <__libc_init_array+0x40>)
 8003f12:	4c0c      	ldr	r4, [pc, #48]	; (8003f44 <__libc_init_array+0x44>)
 8003f14:	f000 f818 	bl	8003f48 <_init>
 8003f18:	1ba4      	subs	r4, r4, r6
 8003f1a:	10a4      	asrs	r4, r4, #2
 8003f1c:	2500      	movs	r5, #0
 8003f1e:	42a5      	cmp	r5, r4
 8003f20:	d105      	bne.n	8003f2e <__libc_init_array+0x2e>
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f28:	4798      	blx	r3
 8003f2a:	3501      	adds	r5, #1
 8003f2c:	e7ee      	b.n	8003f0c <__libc_init_array+0xc>
 8003f2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f32:	4798      	blx	r3
 8003f34:	3501      	adds	r5, #1
 8003f36:	e7f2      	b.n	8003f1e <__libc_init_array+0x1e>
 8003f38:	080041ec 	.word	0x080041ec
 8003f3c:	080041ec 	.word	0x080041ec
 8003f40:	080041ec 	.word	0x080041ec
 8003f44:	080041f0 	.word	0x080041f0

08003f48 <_init>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr

08003f54 <_fini>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr
