
L4_Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000150  08000194  08000194  00008194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080002e4  080002e4  000082e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080002e8  080002e8  000082e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000001c  20000000  20000000  00010000  2**2
                  ALLOC
  5 ._user_heap_stack 00000400  2000001c  2000001c  00010000  2**0
                  ALLOC
  6 .ARM.attributes 00000030  00000000  00000000  000082ec  2**0
                  CONTENTS, READONLY
  7 .debug_info   000006fa  00000000  00000000  0000831c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001b1  00000000  00000000  00008a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000070  00000000  00000000  00008bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00008c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000456  00000000  00000000  00008c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000410  00000000  00000000  000090d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000082  00000000  00000000  000094e6  2**0
                  CONTENTS, READONLY
 14 .debug_frame  0000007c  00000000  00000000  00009568  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000015f  00000000  00000000  000095e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002cc 	.word	0x080002cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080002cc 	.word	0x080002cc
 80001d0:	20000004 	.word	0x20000004

080001d4 <main>:
 *
 * @details Initializes applications.
 * @details Call system application to execute active applications.
 ****************************************************************************/
int  main()
{
 80001d4:	e7fe      	b.n	80001d4 <main>
 80001d6:	bf00      	nop

080001d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001d8:	f8df d040 	ldr.w	sp, [pc, #64]	; 800021c <LoopForever+0x6>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001de:	f000 b804 	b.w	80001ea <LoopCopyDataInit>

080001e2 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001e2:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <LoopForever+0xa>)
	ldr	r3, [r3, r1]
 80001e4:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001e6:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001e8:	3104      	adds	r1, #4

080001ea <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001ea:	480e      	ldr	r0, [pc, #56]	; (8000224 <LoopForever+0xe>)
	ldr	r3, =_edata
 80001ec:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <LoopForever+0x12>)
	adds	r2, r0, r1
 80001ee:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001f0:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001f2:	f4ff aff6 	bcc.w	80001e2 <CopyDataInit>
	ldr	r2, =_sbss
 80001f6:	4a0d      	ldr	r2, [pc, #52]	; (800022c <LoopForever+0x16>)
	b	LoopFillZerobss
 80001f8:	f000 b803 	b.w	8000202 <LoopFillZerobss>

080001fc <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001fc:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001fe:	f842 3b04 	str.w	r3, [r2], #4

08000202 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <LoopForever+0x1a>)
	cmp	r2, r3
 8000204:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000206:	f4ff aff9 	bcc.w	80001fc <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800020a:	f000 f815 	bl	8000238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800020e:	f000 f837 	bl	8000280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000212:	f7ff ffdf 	bl	80001d4 <main>

08000216 <LoopForever>:

LoopForever:
    b LoopForever
 8000216:	f7ff bffe 	b.w	8000216 <LoopForever>
 800021a:	0000      	.short	0x0000

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800021c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000220:	080002ec 	.word	0x080002ec
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000224:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000228:	20000000 	.word	0x20000000
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 800022c:	20000000 	.word	0x20000000
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000230:	2000001c 	.word	0x2000001c

08000234 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000234:	f7ff bffe 	b.w	8000234 <ADC1_IRQHandler>

08000238 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000238:	4a0f      	ldr	r2, [pc, #60]	; (8000278 <SystemInit+0x40>)
 800023a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800023e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000242:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000246:	4b0d      	ldr	r3, [pc, #52]	; (800027c <SystemInit+0x44>)
 8000248:	6819      	ldr	r1, [r3, #0]
 800024a:	f041 0101 	orr.w	r1, r1, #1
 800024e:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000250:	2000      	movs	r0, #0
 8000252:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000254:	6819      	ldr	r1, [r3, #0]
 8000256:	f021 51a8 	bic.w	r1, r1, #352321536	; 0x15000000
 800025a:	f421 2110 	bic.w	r1, r1, #589824	; 0x90000
 800025e:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000264:	60d9      	str	r1, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000266:	6819      	ldr	r1, [r3, #0]
 8000268:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800026c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800026e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000274:	6093      	str	r3, [r2, #8]
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00
 800027c:	40021000 	.word	0x40021000

08000280 <__libc_init_array>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <__libc_init_array+0x3c>)
 8000284:	4d0e      	ldr	r5, [pc, #56]	; (80002c0 <__libc_init_array+0x40>)
 8000286:	1aed      	subs	r5, r5, r3
 8000288:	10ad      	asrs	r5, r5, #2
 800028a:	2400      	movs	r4, #0
 800028c:	461e      	mov	r6, r3
 800028e:	42ac      	cmp	r4, r5
 8000290:	d004      	beq.n	800029c <__libc_init_array+0x1c>
 8000292:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000296:	4790      	blx	r2
 8000298:	3401      	adds	r4, #1
 800029a:	e7f8      	b.n	800028e <__libc_init_array+0xe>
 800029c:	f000 f816 	bl	80002cc <_init>
 80002a0:	4d08      	ldr	r5, [pc, #32]	; (80002c4 <__libc_init_array+0x44>)
 80002a2:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <__libc_init_array+0x48>)
 80002a4:	1aed      	subs	r5, r5, r3
 80002a6:	10ad      	asrs	r5, r5, #2
 80002a8:	2400      	movs	r4, #0
 80002aa:	461e      	mov	r6, r3
 80002ac:	42ac      	cmp	r4, r5
 80002ae:	d004      	beq.n	80002ba <__libc_init_array+0x3a>
 80002b0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80002b4:	4790      	blx	r2
 80002b6:	3401      	adds	r4, #1
 80002b8:	e7f8      	b.n	80002ac <__libc_init_array+0x2c>
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	080002e4 	.word	0x080002e4
 80002c0:	080002e4 	.word	0x080002e4
 80002c4:	080002e8 	.word	0x080002e8
 80002c8:	080002e4 	.word	0x080002e4

080002cc <_init>:
 80002cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ce:	bf00      	nop
 80002d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d2:	bc08      	pop	{r3}
 80002d4:	469e      	mov	lr, r3
 80002d6:	4770      	bx	lr

080002d8 <_fini>:
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002da:	bf00      	nop
 80002dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002de:	bc08      	pop	{r3}
 80002e0:	469e      	mov	lr, r3
 80002e2:	4770      	bx	lr
