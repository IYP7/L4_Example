
L4_Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000367c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080039e4  080039e4  000139e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000003c  20000000  080039f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  8 .bss          000002e4  2000003c  2000003c  0002003c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000320  20000320  0002003c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022b58  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004b92  00000000  00000000  00042bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001020  00000000  00000000  00047758  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ef0  00000000  00000000  00048778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000aa5f  00000000  00000000  00049668  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005d2d  00000000  00000000  000540c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00059df4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002614  00000000  00000000  00059e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00008d44  00000000  00000000  0005c484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080037f8 	.word	0x080037f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	080037f8 	.word	0x080037f8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b97a 	b.w	80004e0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	468c      	mov	ip, r1
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	9e08      	ldr	r6, [sp, #32]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d151      	bne.n	80002b8 <__udivmoddi4+0xb4>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d96d      	bls.n	80002f6 <__udivmoddi4+0xf2>
 800021a:	fab2 fe82 	clz	lr, r2
 800021e:	f1be 0f00 	cmp.w	lr, #0
 8000222:	d00b      	beq.n	800023c <__udivmoddi4+0x38>
 8000224:	f1ce 0c20 	rsb	ip, lr, #32
 8000228:	fa01 f50e 	lsl.w	r5, r1, lr
 800022c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000230:	fa02 f70e 	lsl.w	r7, r2, lr
 8000234:	ea4c 0c05 	orr.w	ip, ip, r5
 8000238:	fa00 f40e 	lsl.w	r4, r0, lr
 800023c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000240:	0c25      	lsrs	r5, r4, #16
 8000242:	fbbc f8fa 	udiv	r8, ip, sl
 8000246:	fa1f f987 	uxth.w	r9, r7
 800024a:	fb0a cc18 	mls	ip, sl, r8, ip
 800024e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000252:	fb08 f309 	mul.w	r3, r8, r9
 8000256:	42ab      	cmp	r3, r5
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x6c>
 800025a:	19ed      	adds	r5, r5, r7
 800025c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000260:	f080 8123 	bcs.w	80004aa <__udivmoddi4+0x2a6>
 8000264:	42ab      	cmp	r3, r5
 8000266:	f240 8120 	bls.w	80004aa <__udivmoddi4+0x2a6>
 800026a:	f1a8 0802 	sub.w	r8, r8, #2
 800026e:	443d      	add	r5, r7
 8000270:	1aed      	subs	r5, r5, r3
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb5 f0fa 	udiv	r0, r5, sl
 8000278:	fb0a 5510 	mls	r5, sl, r0, r5
 800027c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000280:	fb00 f909 	mul.w	r9, r0, r9
 8000284:	45a1      	cmp	r9, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x98>
 8000288:	19e4      	adds	r4, r4, r7
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 810a 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 8000292:	45a1      	cmp	r9, r4
 8000294:	f240 8107 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 8000298:	3802      	subs	r0, #2
 800029a:	443c      	add	r4, r7
 800029c:	eba4 0409 	sub.w	r4, r4, r9
 80002a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a4:	2100      	movs	r1, #0
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	d061      	beq.n	800036e <__udivmoddi4+0x16a>
 80002aa:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ae:	2300      	movs	r3, #0
 80002b0:	6034      	str	r4, [r6, #0]
 80002b2:	6073      	str	r3, [r6, #4]
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d907      	bls.n	80002cc <__udivmoddi4+0xc8>
 80002bc:	2e00      	cmp	r6, #0
 80002be:	d054      	beq.n	800036a <__udivmoddi4+0x166>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	f040 808e 	bne.w	80003f2 <__udivmoddi4+0x1ee>
 80002d6:	42ab      	cmp	r3, r5
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xdc>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2d0>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb65 0503 	sbc.w	r5, r5, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	46ac      	mov	ip, r5
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d03f      	beq.n	800036e <__udivmoddi4+0x16a>
 80002ee:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b912      	cbnz	r2, 80002fe <__udivmoddi4+0xfa>
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fe:	fab7 fe87 	clz	lr, r7
 8000302:	f1be 0f00 	cmp.w	lr, #0
 8000306:	d134      	bne.n	8000372 <__udivmoddi4+0x16e>
 8000308:	1beb      	subs	r3, r5, r7
 800030a:	0c3a      	lsrs	r2, r7, #16
 800030c:	fa1f fc87 	uxth.w	ip, r7
 8000310:	2101      	movs	r1, #1
 8000312:	fbb3 f8f2 	udiv	r8, r3, r2
 8000316:	0c25      	lsrs	r5, r4, #16
 8000318:	fb02 3318 	mls	r3, r2, r8, r3
 800031c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000320:	fb0c f308 	mul.w	r3, ip, r8
 8000324:	42ab      	cmp	r3, r5
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x134>
 8000328:	19ed      	adds	r5, r5, r7
 800032a:	f108 30ff 	add.w	r0, r8, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x132>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f200 80d1 	bhi.w	80004d8 <__udivmoddi4+0x2d4>
 8000336:	4680      	mov	r8, r0
 8000338:	1aed      	subs	r5, r5, r3
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000340:	fb02 5510 	mls	r5, r2, r0, r5
 8000344:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000348:	fb0c fc00 	mul.w	ip, ip, r0
 800034c:	45a4      	cmp	ip, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x15c>
 8000350:	19e4      	adds	r4, r4, r7
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x15a>
 8000358:	45a4      	cmp	ip, r4
 800035a:	f200 80b8 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000368:	e79d      	b.n	80002a6 <__udivmoddi4+0xa2>
 800036a:	4631      	mov	r1, r6
 800036c:	4630      	mov	r0, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	f1ce 0420 	rsb	r4, lr, #32
 8000376:	fa05 f30e 	lsl.w	r3, r5, lr
 800037a:	fa07 f70e 	lsl.w	r7, r7, lr
 800037e:	fa20 f804 	lsr.w	r8, r0, r4
 8000382:	0c3a      	lsrs	r2, r7, #16
 8000384:	fa25 f404 	lsr.w	r4, r5, r4
 8000388:	ea48 0803 	orr.w	r8, r8, r3
 800038c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000390:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000394:	fb02 4411 	mls	r4, r2, r1, r4
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a0:	fb01 f30c 	mul.w	r3, r1, ip
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1bc>
 80003ac:	19ed      	adds	r5, r5, r7
 80003ae:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b2:	f080 808a 	bcs.w	80004ca <__udivmoddi4+0x2c6>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	f240 8087 	bls.w	80004ca <__udivmoddi4+0x2c6>
 80003bc:	3902      	subs	r1, #2
 80003be:	443d      	add	r5, r7
 80003c0:	1aeb      	subs	r3, r5, r3
 80003c2:	fa1f f588 	uxth.w	r5, r8
 80003c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ca:	fb02 3310 	mls	r3, r2, r0, r3
 80003ce:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d2:	fb00 f30c 	mul.w	r3, r0, ip
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1e6>
 80003da:	19ed      	adds	r5, r5, r7
 80003dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e0:	d26f      	bcs.n	80004c2 <__udivmoddi4+0x2be>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d96d      	bls.n	80004c2 <__udivmoddi4+0x2be>
 80003e6:	3802      	subs	r0, #2
 80003e8:	443d      	add	r5, r7
 80003ea:	1aeb      	subs	r3, r5, r3
 80003ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f0:	e78f      	b.n	8000312 <__udivmoddi4+0x10e>
 80003f2:	f1c1 0720 	rsb	r7, r1, #32
 80003f6:	fa22 f807 	lsr.w	r8, r2, r7
 80003fa:	408b      	lsls	r3, r1
 80003fc:	fa05 f401 	lsl.w	r4, r5, r1
 8000400:	ea48 0303 	orr.w	r3, r8, r3
 8000404:	fa20 fe07 	lsr.w	lr, r0, r7
 8000408:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800040c:	40fd      	lsrs	r5, r7
 800040e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000412:	fbb5 f9fc 	udiv	r9, r5, ip
 8000416:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041a:	fb0c 5519 	mls	r5, ip, r9, r5
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000426:	fb09 f408 	mul.w	r4, r9, r8
 800042a:	42ac      	cmp	r4, r5
 800042c:	fa02 f201 	lsl.w	r2, r2, r1
 8000430:	fa00 fa01 	lsl.w	sl, r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x244>
 8000436:	18ed      	adds	r5, r5, r3
 8000438:	f109 30ff 	add.w	r0, r9, #4294967295
 800043c:	d243      	bcs.n	80004c6 <__udivmoddi4+0x2c2>
 800043e:	42ac      	cmp	r4, r5
 8000440:	d941      	bls.n	80004c6 <__udivmoddi4+0x2c2>
 8000442:	f1a9 0902 	sub.w	r9, r9, #2
 8000446:	441d      	add	r5, r3
 8000448:	1b2d      	subs	r5, r5, r4
 800044a:	fa1f fe8e 	uxth.w	lr, lr
 800044e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000452:	fb0c 5510 	mls	r5, ip, r0, r5
 8000456:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045a:	fb00 f808 	mul.w	r8, r0, r8
 800045e:	45a0      	cmp	r8, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x26e>
 8000462:	18e4      	adds	r4, r4, r3
 8000464:	f100 35ff 	add.w	r5, r0, #4294967295
 8000468:	d229      	bcs.n	80004be <__udivmoddi4+0x2ba>
 800046a:	45a0      	cmp	r8, r4
 800046c:	d927      	bls.n	80004be <__udivmoddi4+0x2ba>
 800046e:	3802      	subs	r0, #2
 8000470:	441c      	add	r4, r3
 8000472:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000476:	eba4 0408 	sub.w	r4, r4, r8
 800047a:	fba0 8902 	umull	r8, r9, r0, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	46c6      	mov	lr, r8
 8000482:	464d      	mov	r5, r9
 8000484:	d315      	bcc.n	80004b2 <__udivmoddi4+0x2ae>
 8000486:	d012      	beq.n	80004ae <__udivmoddi4+0x2aa>
 8000488:	b156      	cbz	r6, 80004a0 <__udivmoddi4+0x29c>
 800048a:	ebba 030e 	subs.w	r3, sl, lr
 800048e:	eb64 0405 	sbc.w	r4, r4, r5
 8000492:	fa04 f707 	lsl.w	r7, r4, r7
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431f      	orrs	r7, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	6037      	str	r7, [r6, #0]
 800049e:	6074      	str	r4, [r6, #4]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a6:	4618      	mov	r0, r3
 80004a8:	e6f8      	b.n	800029c <__udivmoddi4+0x98>
 80004aa:	4690      	mov	r8, r2
 80004ac:	e6e0      	b.n	8000270 <__udivmoddi4+0x6c>
 80004ae:	45c2      	cmp	sl, r8
 80004b0:	d2ea      	bcs.n	8000488 <__udivmoddi4+0x284>
 80004b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ba:	3801      	subs	r0, #1
 80004bc:	e7e4      	b.n	8000488 <__udivmoddi4+0x284>
 80004be:	4628      	mov	r0, r5
 80004c0:	e7d7      	b.n	8000472 <__udivmoddi4+0x26e>
 80004c2:	4640      	mov	r0, r8
 80004c4:	e791      	b.n	80003ea <__udivmoddi4+0x1e6>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e7be      	b.n	8000448 <__udivmoddi4+0x244>
 80004ca:	4601      	mov	r1, r0
 80004cc:	e778      	b.n	80003c0 <__udivmoddi4+0x1bc>
 80004ce:	3802      	subs	r0, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	e745      	b.n	8000360 <__udivmoddi4+0x15c>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xe6>
 80004d8:	f1a8 0802 	sub.w	r8, r8, #2
 80004dc:	443d      	add	r5, r7
 80004de:	e72b      	b.n	8000338 <__udivmoddi4+0x134>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
 *
 * @details Initializes applications.
 * @details Call system application to execute active applications.
 ****************************************************************************/
int  main()
{
 80004e4:	b508      	push	{r3, lr}
	/* Call to initial specific platform configuration */
    systemPreConfiguration();
 80004e6:	f000 ff66 	bl	80013b6 <systemPreConfiguration>

    /* HAL TEST */
    GPIOInit();
 80004ea:	f000 fd13 	bl	8000f14 <GPIOInit>

    stm32L4Init();
 80004ee:	f000 fef7 	bl	80012e0 <stm32L4Init>

    uartInit();
 80004f2:	f001 f873 	bl	80015dc <uartInit>
    uartStart();
 80004f6:	f001 f8ab 	bl	8001650 <uartStart>

    FlashInit();
 80004fa:	f000 fc0f 	bl	8000d1c <FlashInit>

    SwTimerInit();
 80004fe:	f000 fb75 	bl	8000bec <SwTimerInit>

    interruptsInit();
 8000502:	f000 fd31 	bl	8000f68 <interruptsInit>
    interruptsStart();
 8000506:	f000 fd47 	bl	8000f98 <interruptsStart>
    /*\ HAL TEST */

	/* Applications Initialization */
    SchedulerInit();
 800050a:	f000 fa19 	bl	8000940 <SchedulerInit>

    while (TRUE)
    {
        SchedulerNextSystemProcess();
 800050e:	f000 fac5 	bl	8000a9c <SchedulerNextSystemProcess>
 8000512:	e7fc      	b.n	800050e <main+0x2a>

08000514 <initSystemApp>:
 *
 * @details Initializes HREG and SREG layers.
 * @details Initializes all applications
 ****************************************************************************/
void initSystemApp( void )
{
 8000514:	b508      	push	{r3, lr}
    requestPowerState = POWER_STATE_NO_REQUEST;
 8000516:	2200      	movs	r2, #0
 8000518:	4b02      	ldr	r3, [pc, #8]	; (8000524 <initSystemApp+0x10>)
 800051a:	701a      	strb	r2, [r3, #0]

    initSregAll();    /* Initialise the SREG layer */
 800051c:	f000 f99c 	bl	8000858 <initSregAll>
 8000520:	bd08      	pop	{r3, pc}
 8000522:	bf00      	nop
 8000524:	20000070 	.word	0x20000070

08000528 <callSystemApp>:
 *
 * @details depending on current state, executes active applications.
 * @details calls system middleware task
 ****************************************************************************/
void callSystemApp( void )
{
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	b085      	sub	sp, #20
    uint8_t systemState;

    /* HAL TEST */
    // GPIO
    GPIOWritePort(GPIO_LED_1, GPIO_TOGGLE);
 800052c:	2102      	movs	r1, #2
 800052e:	2006      	movs	r0, #6
 8000530:	f000 fc4c 	bl	8000dcc <GPIOWritePort>

    uint32_t time, date;
	uint8_t hours, min, sec, year, month, day;

	RTCGetTime(&time);
 8000534:	a803      	add	r0, sp, #12
 8000536:	f000 fee3 	bl	8001300 <RTCGetTime>
	RTCGetDate(&date);
 800053a:	a802      	add	r0, sp, #8
 800053c:	f000 ff0e 	bl	800135c <RTCGetDate>
	uint8_t tmp = ':';
 8000540:	233a      	movs	r3, #58	; 0x3a
 8000542:	f88d 3001 	strb.w	r3, [sp, #1]

	hours = (time >> 24) & 0xFF;
 8000546:	9b03      	ldr	r3, [sp, #12]
 8000548:	0e1a      	lsrs	r2, r3, #24
 800054a:	f88d 2007 	strb.w	r2, [sp, #7]
	min = (time >> 16) & 0xFF;
 800054e:	0c1a      	lsrs	r2, r3, #16
 8000550:	f88d 2006 	strb.w	r2, [sp, #6]
	sec = (time >> 8) & 0xFF;
 8000554:	0a1b      	lsrs	r3, r3, #8
 8000556:	f88d 3005 	strb.w	r3, [sp, #5]
	year = (date >> 24) & 0xFF;
 800055a:	9b02      	ldr	r3, [sp, #8]
 800055c:	0e1a      	lsrs	r2, r3, #24
	year += '0';
 800055e:	3230      	adds	r2, #48	; 0x30
 8000560:	f88d 2004 	strb.w	r2, [sp, #4]
	month = (date >> 16) & 0xFF;
 8000564:	f3c3 4207 	ubfx	r2, r3, #16, #8
	month += '0';
 8000568:	3230      	adds	r2, #48	; 0x30
 800056a:	f88d 2003 	strb.w	r2, [sp, #3]
	day = (date >> 8) & 0xFF;
 800056e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	day += '0';
 8000572:	3330      	adds	r3, #48	; 0x30
 8000574:	f88d 3002 	strb.w	r3, [sp, #2]

	uartDriverSetBufferSize(UART_2, 1);
 8000578:	2101      	movs	r1, #1
 800057a:	2000      	movs	r0, #0
 800057c:	f001 f88a 	bl	8001694 <uartDriverSetBufferSize>
	if(hours<10)
 8000580:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000584:	2b09      	cmp	r3, #9
 8000586:	d861      	bhi.n	800064c <callSystemApp+0x124>
	{
		hours+= '0';
 8000588:	3330      	adds	r3, #48	; 0x30
 800058a:	a904      	add	r1, sp, #16
 800058c:	f801 3d09 	strb.w	r3, [r1, #-9]!
		uartDriverWrite(UART_2, &hours);
 8000590:	2000      	movs	r0, #0
 8000592:	f001 f887 	bl	80016a4 <uartDriverWrite>
		uartDriverWrite(UART_2, &tmp);
		tmp = hours%10;
		tmp += '0';
		uartDriverWrite(UART_2, &tmp);
	}
	tmp = ':';
 8000596:	a904      	add	r1, sp, #16
 8000598:	233a      	movs	r3, #58	; 0x3a
 800059a:	f801 3d0f 	strb.w	r3, [r1, #-15]!
	uartDriverWrite(UART_2, &tmp);
 800059e:	2000      	movs	r0, #0
 80005a0:	f001 f880 	bl	80016a4 <uartDriverWrite>

	if(min<10)
 80005a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80005a8:	2b09      	cmp	r3, #9
 80005aa:	d86d      	bhi.n	8000688 <callSystemApp+0x160>
	{
		min+= '0';
 80005ac:	3330      	adds	r3, #48	; 0x30
 80005ae:	a904      	add	r1, sp, #16
 80005b0:	f801 3d0a 	strb.w	r3, [r1, #-10]!
		uartDriverWrite(UART_2, &min);
 80005b4:	2000      	movs	r0, #0
 80005b6:	f001 f875 	bl	80016a4 <uartDriverWrite>
		uartDriverWrite(UART_2, &tmp);
		tmp = min%10;
		tmp += '0';
		uartDriverWrite(UART_2, &tmp);
	}
	tmp = ':';
 80005ba:	a904      	add	r1, sp, #16
 80005bc:	233a      	movs	r3, #58	; 0x3a
 80005be:	f801 3d0f 	strb.w	r3, [r1, #-15]!
	uartDriverWrite(UART_2, &tmp);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f001 f86e 	bl	80016a4 <uartDriverWrite>

	if(sec<10)
 80005c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80005cc:	2b09      	cmp	r3, #9
 80005ce:	d879      	bhi.n	80006c4 <callSystemApp+0x19c>
	{
		sec+= '0';
 80005d0:	3330      	adds	r3, #48	; 0x30
 80005d2:	a904      	add	r1, sp, #16
 80005d4:	f801 3d0b 	strb.w	r3, [r1, #-11]!
		uartDriverWrite(UART_2, &sec);
 80005d8:	2000      	movs	r0, #0
 80005da:	f001 f863 	bl	80016a4 <uartDriverWrite>
		uartDriverWrite(UART_2, &tmp);
		tmp = sec%10;
		tmp += '0';
		uartDriverWrite(UART_2, &tmp);
	}
	tmp = '\n';
 80005de:	250a      	movs	r5, #10
 80005e0:	ac04      	add	r4, sp, #16
 80005e2:	f804 5d0f 	strb.w	r5, [r4, #-15]!
	uartDriverWrite(UART_2, &tmp);
 80005e6:	4621      	mov	r1, r4
 80005e8:	2000      	movs	r0, #0
 80005ea:	f001 f85b 	bl	80016a4 <uartDriverWrite>
	uartDriverWrite(UART_2, &day);
 80005ee:	f10d 0102 	add.w	r1, sp, #2
 80005f2:	2000      	movs	r0, #0
 80005f4:	f001 f856 	bl	80016a4 <uartDriverWrite>
	tmp = '/';
 80005f8:	232f      	movs	r3, #47	; 0x2f
 80005fa:	f88d 3001 	strb.w	r3, [sp, #1]
	uartDriverWrite(UART_2, &tmp);
 80005fe:	4621      	mov	r1, r4
 8000600:	2000      	movs	r0, #0
 8000602:	f001 f84f 	bl	80016a4 <uartDriverWrite>
	uartDriverWrite(UART_2, &month);
 8000606:	f10d 0103 	add.w	r1, sp, #3
 800060a:	2000      	movs	r0, #0
 800060c:	f001 f84a 	bl	80016a4 <uartDriverWrite>
	uartDriverWrite(UART_2, &tmp);
 8000610:	4621      	mov	r1, r4
 8000612:	2000      	movs	r0, #0
 8000614:	f001 f846 	bl	80016a4 <uartDriverWrite>
	uartDriverWrite(UART_2, &year);
 8000618:	a901      	add	r1, sp, #4
 800061a:	2000      	movs	r0, #0
 800061c:	f001 f842 	bl	80016a4 <uartDriverWrite>
	tmp = '\n';
 8000620:	f88d 5001 	strb.w	r5, [sp, #1]
	uartDriverWrite(UART_2, &tmp);
 8000624:	4621      	mov	r1, r4
 8000626:	2000      	movs	r0, #0
 8000628:	f001 f83c 	bl	80016a4 <uartDriverWrite>
	uartDriverWrite(UART_2, &tmp);
 800062c:	4621      	mov	r1, r4
 800062e:	2000      	movs	r0, #0
 8000630:	f001 f838 	bl	80016a4 <uartDriverWrite>

    /* END HAL TEST */

    /* System state machine */
    systemState = READ_SREG(SREG_SYSTEM_STATE);
 8000634:	2004      	movs	r0, #4
 8000636:	f000 f92e 	bl	8000896 <readSreg>
 800063a:	b2c1      	uxtb	r1, r0
    //systemState = SYSTEM_APP_INIT_SHELL;
    switch ( systemState )
 800063c:	2904      	cmp	r1, #4
 800063e:	f200 8089 	bhi.w	8000754 <callSystemApp+0x22c>
 8000642:	e8df f001 	tbb	[pc, r1]
 8000646:	5d86      	.short	0x5d86
 8000648:	8768      	.short	0x8768
 800064a:	5f          	.byte	0x5f
 800064b:	00          	.byte	0x00
		tmp = hours/10;
 800064c:	4c44      	ldr	r4, [pc, #272]	; (8000760 <callSystemApp+0x238>)
 800064e:	fba4 2303 	umull	r2, r3, r4, r3
 8000652:	08db      	lsrs	r3, r3, #3
		tmp += '0';
 8000654:	3330      	adds	r3, #48	; 0x30
 8000656:	ad04      	add	r5, sp, #16
 8000658:	f805 3d0f 	strb.w	r3, [r5, #-15]!
		uartDriverWrite(UART_2, &tmp);
 800065c:	4629      	mov	r1, r5
 800065e:	2000      	movs	r0, #0
 8000660:	f001 f820 	bl	80016a4 <uartDriverWrite>
		tmp = hours%10;
 8000664:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000668:	fba4 2403 	umull	r2, r4, r4, r3
 800066c:	08e4      	lsrs	r4, r4, #3
 800066e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000672:	0062      	lsls	r2, r4, #1
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	b2db      	uxtb	r3, r3
		tmp += '0';
 8000678:	3330      	adds	r3, #48	; 0x30
 800067a:	f88d 3001 	strb.w	r3, [sp, #1]
		uartDriverWrite(UART_2, &tmp);
 800067e:	4629      	mov	r1, r5
 8000680:	2000      	movs	r0, #0
 8000682:	f001 f80f 	bl	80016a4 <uartDriverWrite>
 8000686:	e786      	b.n	8000596 <callSystemApp+0x6e>
		tmp = min/10;
 8000688:	4c35      	ldr	r4, [pc, #212]	; (8000760 <callSystemApp+0x238>)
 800068a:	fba4 2303 	umull	r2, r3, r4, r3
 800068e:	08db      	lsrs	r3, r3, #3
		tmp += '0';
 8000690:	3330      	adds	r3, #48	; 0x30
 8000692:	ad04      	add	r5, sp, #16
 8000694:	f805 3d0f 	strb.w	r3, [r5, #-15]!
		uartDriverWrite(UART_2, &tmp);
 8000698:	4629      	mov	r1, r5
 800069a:	2000      	movs	r0, #0
 800069c:	f001 f802 	bl	80016a4 <uartDriverWrite>
		tmp = min%10;
 80006a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80006a4:	fba4 2403 	umull	r2, r4, r4, r3
 80006a8:	08e4      	lsrs	r4, r4, #3
 80006aa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80006ae:	0062      	lsls	r2, r4, #1
 80006b0:	1a9b      	subs	r3, r3, r2
 80006b2:	b2db      	uxtb	r3, r3
		tmp += '0';
 80006b4:	3330      	adds	r3, #48	; 0x30
 80006b6:	f88d 3001 	strb.w	r3, [sp, #1]
		uartDriverWrite(UART_2, &tmp);
 80006ba:	4629      	mov	r1, r5
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 fff1 	bl	80016a4 <uartDriverWrite>
 80006c2:	e77a      	b.n	80005ba <callSystemApp+0x92>
		tmp = sec/10;
 80006c4:	4c26      	ldr	r4, [pc, #152]	; (8000760 <callSystemApp+0x238>)
 80006c6:	fba4 2303 	umull	r2, r3, r4, r3
 80006ca:	08db      	lsrs	r3, r3, #3
		tmp += '0';
 80006cc:	3330      	adds	r3, #48	; 0x30
 80006ce:	ad04      	add	r5, sp, #16
 80006d0:	f805 3d0f 	strb.w	r3, [r5, #-15]!
		uartDriverWrite(UART_2, &tmp);
 80006d4:	4629      	mov	r1, r5
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 ffe4 	bl	80016a4 <uartDriverWrite>
		tmp = sec%10;
 80006dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80006e0:	fba4 2403 	umull	r2, r4, r4, r3
 80006e4:	08e4      	lsrs	r4, r4, #3
 80006e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80006ea:	0062      	lsls	r2, r4, #1
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	b2db      	uxtb	r3, r3
		tmp += '0';
 80006f0:	3330      	adds	r3, #48	; 0x30
 80006f2:	f88d 3001 	strb.w	r3, [sp, #1]
		uartDriverWrite(UART_2, &tmp);
 80006f6:	4629      	mov	r1, r5
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 ffd3 	bl	80016a4 <uartDriverWrite>
 80006fe:	e76e      	b.n	80005de <callSystemApp+0xb6>
			break;
        
		case SYSTEM_APP_INIT:
			/* Application init dispather */
			
			systemState = SYSTEM_APP_ON;
 8000700:	2102      	movs	r1, #2
            break;
 8000702:	e027      	b.n	8000754 <callSystemApp+0x22c>

        case SYSTEM_APP_SLEPT:
			/* Application sleep dispather */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_WAKE_UP ) 
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <callSystemApp+0x23c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b02      	cmp	r3, #2
 800070a:	d123      	bne.n	8000754 <callSystemApp+0x22c>
            {
				/* Wake up */
                systemState = SYSTEM_APP_ON;
                requestPowerState = POWER_STATE_NO_REQUEST;
 800070c:	2100      	movs	r1, #0
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <callSystemApp+0x23c>)
 8000710:	7011      	strb	r1, [r2, #0]
                systemState = SYSTEM_APP_ON;
 8000712:	4619      	mov	r1, r3
 8000714:	e01e      	b.n	8000754 <callSystemApp+0x22c>

        case SYSTEM_APP_ON:
			/* Application dispatcher */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_START_SHUTDOWN )
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <callSystemApp+0x23c>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d007      	beq.n	800072e <callSystemApp+0x206>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
                
                /* Power off */
                systemState = SYSTEM_APP_POWER_OFF;
            }
            else if ( requestPowerState == POWER_STATE_GO_TO_SLEEP )
 800071e:	2b03      	cmp	r3, #3
 8000720:	d00b      	beq.n	800073a <callSystemApp+0x212>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
                
                /* Slept */
                systemState = SYSTEM_APP_SLEPT;
            }
            else if ( requestPowerState == POWER_STATE_REBOOT )
 8000722:	2b04      	cmp	r3, #4
 8000724:	d00f      	beq.n	8000746 <callSystemApp+0x21e>
                systemState = SYSTEM_APP_REBOOT;
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
            }
            
            /* Reset power state request */
            requestPowerState = POWER_STATE_NO_REQUEST;
 8000726:	2200      	movs	r2, #0
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <callSystemApp+0x23c>)
 800072a:	701a      	strb	r2, [r3, #0]
            break;
 800072c:	e012      	b.n	8000754 <callSystemApp+0x22c>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
 800072e:	210a      	movs	r1, #10
 8000730:	2005      	movs	r0, #5
 8000732:	f000 f8cb 	bl	80008cc <writeSreg>
                systemState = SYSTEM_APP_POWER_OFF;
 8000736:	2103      	movs	r1, #3
 8000738:	e7f5      	b.n	8000726 <callSystemApp+0x1fe>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
 800073a:	2101      	movs	r1, #1
 800073c:	2005      	movs	r0, #5
 800073e:	f000 f8c5 	bl	80008cc <writeSreg>
                systemState = SYSTEM_APP_SLEPT;
 8000742:	2104      	movs	r1, #4
 8000744:	e7ef      	b.n	8000726 <callSystemApp+0x1fe>
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
 8000746:	2103      	movs	r1, #3
 8000748:	2005      	movs	r0, #5
 800074a:	f000 f8bf 	bl	80008cc <writeSreg>
                systemState = SYSTEM_APP_REBOOT;
 800074e:	2105      	movs	r1, #5
 8000750:	e7e9      	b.n	8000726 <callSystemApp+0x1fe>
			systemState = SYSTEM_APP_INIT;
 8000752:	2101      	movs	r1, #1
			break;
        
    }
    
    /* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
 8000754:	2004      	movs	r0, #4
 8000756:	f000 f8b9 	bl	80008cc <writeSreg>
}
 800075a:	b005      	add	sp, #20
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	bf00      	nop
 8000760:	cccccccd 	.word	0xcccccccd
 8000764:	20000070 	.word	0x20000070

08000768 <sregWrite>:
eError sregWrite(SREG sreg, uint32_t value)
{
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <sregWrite+0x38>)
 800076a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800076e:	7852      	ldrb	r2, [r2, #1]
	switch(SREGInstanceMap[sreg].type)
 8000770:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d008      	beq.n	800078a <sregWrite+0x22>
 8000778:	b11b      	cbz	r3, 8000782 <sregWrite+0x1a>
 800077a:	2b02      	cmp	r3, #2
 800077c:	d00a      	beq.n	8000794 <sregWrite+0x2c>
			break;
		case SREG_UINT32:
			SREG32Context[index] = (uint32_t)value;
			break;
		default:
			success = RET_INVALID_PARAMETER;
 800077e:	2005      	movs	r0, #5
			break;
	}

	return success;
}
 8000780:	4770      	bx	lr
			SREG8Context[index] = (uint8_t)value;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <sregWrite+0x3c>)
 8000784:	5499      	strb	r1, [r3, r2]
	eError success = RET_OK;
 8000786:	2000      	movs	r0, #0
			break;
 8000788:	4770      	bx	lr
			SREG16Context[index] = (uint16_t)value;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <sregWrite+0x40>)
 800078c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	eError success = RET_OK;
 8000790:	2000      	movs	r0, #0
			break;
 8000792:	4770      	bx	lr
			SREG32Context[index] = (uint32_t)value;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <sregWrite+0x44>)
 8000796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eError success = RET_OK;
 800079a:	2000      	movs	r0, #0
			break;
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	08003840 	.word	0x08003840
 80007a4:	20000074 	.word	0x20000074
 80007a8:	20000084 	.word	0x20000084
 80007ac:	2000007c 	.word	0x2000007c

080007b0 <sregReadParam>:
 * @param	sreg
 * @param	sregParam struct
 * @return  RET_OK or RET_FAIL
 ****************************************************************************/
eError sregReadParam(SREG sreg, tSREGParam *sregParam)
{
 80007b0:	b430      	push	{r4, r5}
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <sregReadParam+0x8c>)
 80007b4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 80007b8:	785b      	ldrb	r3, [r3, #1]
	switch(SREGInstanceMap[sreg].type)
 80007ba:	f812 2020 	ldrb.w	r2, [r2, r0, lsl #2]
 80007be:	2a01      	cmp	r2, #1
 80007c0:	d014      	beq.n	80007ec <sregReadParam+0x3c>
 80007c2:	b11a      	cbz	r2, 80007cc <sregReadParam+0x1c>
 80007c4:	2a02      	cmp	r2, #2
 80007c6:	d025      	beq.n	8000814 <sregReadParam+0x64>
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
			break;
		default:
			success = RET_INVALID_PARAMETER;
 80007c8:	2005      	movs	r0, #5
 80007ca:	e00d      	b.n	80007e8 <sregReadParam+0x38>
			sregParam->Data = (uint32_t)SREG8Context[index];
 80007cc:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <sregReadParam+0x90>)
 80007ce:	5cd2      	ldrb	r2, [r2, r3]
 80007d0:	600a      	str	r2, [r1, #0]
			sregParam->Init = (uint32_t)(SREG8InstanceMap[index].Init);
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <sregReadParam+0x94>)
 80007d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007d8:	18c2      	adds	r2, r0, r3
 80007da:	7894      	ldrb	r4, [r2, #2]
 80007dc:	60cc      	str	r4, [r1, #12]
			sregParam->Max  = (uint32_t)(SREG8InstanceMap[index].Max);
 80007de:	5cc3      	ldrb	r3, [r0, r3]
 80007e0:	604b      	str	r3, [r1, #4]
			sregParam->Min  = (uint32_t)(SREG8InstanceMap[index].Min);
 80007e2:	7853      	ldrb	r3, [r2, #1]
 80007e4:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 80007e6:	2000      	movs	r0, #0
			break;
	}

	return success;
}
 80007e8:	bc30      	pop	{r4, r5}
 80007ea:	4770      	bx	lr
			sregParam->Data  = (uint32_t)SREG16Context[index];
 80007ec:	4a16      	ldr	r2, [pc, #88]	; (8000848 <sregReadParam+0x98>)
 80007ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80007f2:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG16InstanceMap[index].Init);
 80007f4:	4a15      	ldr	r2, [pc, #84]	; (800084c <sregReadParam+0x9c>)
 80007f6:	0058      	lsls	r0, r3, #1
 80007f8:	18c5      	adds	r5, r0, r3
 80007fa:	006c      	lsls	r4, r5, #1
 80007fc:	1915      	adds	r5, r2, r4
 80007fe:	88ad      	ldrh	r5, [r5, #4]
 8000800:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG16InstanceMap[index].Max);
 8000802:	5b14      	ldrh	r4, [r2, r4]
 8000804:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG16InstanceMap[index].Min);
 8000806:	4403      	add	r3, r0
 8000808:	0058      	lsls	r0, r3, #1
 800080a:	4402      	add	r2, r0
 800080c:	8853      	ldrh	r3, [r2, #2]
 800080e:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000810:	2000      	movs	r0, #0
			break;
 8000812:	e7e9      	b.n	80007e8 <sregReadParam+0x38>
			sregParam->Data  = (uint32_t)SREG32Context[index];
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <sregReadParam+0xa0>)
 8000816:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800081a:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <sregReadParam+0xa4>)
 800081e:	0058      	lsls	r0, r3, #1
 8000820:	18c5      	adds	r5, r0, r3
 8000822:	00ac      	lsls	r4, r5, #2
 8000824:	1915      	adds	r5, r2, r4
 8000826:	68ad      	ldr	r5, [r5, #8]
 8000828:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
 800082a:	5914      	ldr	r4, [r2, r4]
 800082c:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
 800082e:	4403      	add	r3, r0
 8000830:	0098      	lsls	r0, r3, #2
 8000832:	4402      	add	r2, r0
 8000834:	6853      	ldr	r3, [r2, #4]
 8000836:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000838:	2000      	movs	r0, #0
			break;
 800083a:	e7d5      	b.n	80007e8 <sregReadParam+0x38>
 800083c:	08003840 	.word	0x08003840
 8000840:	20000074 	.word	0x20000074
 8000844:	08003828 	.word	0x08003828
 8000848:	20000084 	.word	0x20000084
 800084c:	08003810 	.word	0x08003810
 8000850:	2000007c 	.word	0x2000007c
 8000854:	08003810 	.word	0x08003810

08000858 <initSregAll>:
{
 8000858:	b510      	push	{r4, lr}
 800085a:	b084      	sub	sp, #16
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 800085c:	2400      	movs	r4, #0
 800085e:	e009      	b.n	8000874 <initSregAll+0x1c>
		sregReadParam(sreg, &sregParam);
 8000860:	4669      	mov	r1, sp
 8000862:	4620      	mov	r0, r4
 8000864:	f7ff ffa4 	bl	80007b0 <sregReadParam>
		sregWrite(sreg, sregParam.Init);
 8000868:	9903      	ldr	r1, [sp, #12]
 800086a:	4620      	mov	r0, r4
 800086c:	f7ff ff7c 	bl	8000768 <sregWrite>
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 8000870:	3401      	adds	r4, #1
 8000872:	b2e4      	uxtb	r4, r4
 8000874:	2c08      	cmp	r4, #8
 8000876:	d9f3      	bls.n	8000860 <initSregAll+0x8>
}
 8000878:	b004      	add	sp, #16
 800087a:	bd10      	pop	{r4, pc}

0800087c <readSregTableStd>:
{
 800087c:	b500      	push	{lr}
 800087e:	b085      	sub	sp, #20
	success = sregReadParam(sreg, &sregParam);
 8000880:	4669      	mov	r1, sp
 8000882:	f7ff ff95 	bl	80007b0 <sregReadParam>
	if ( success == RET_OK )
 8000886:	b120      	cbz	r0, 8000892 <readSregTableStd+0x16>
    uint32_t ret_data = 0xffffffff;
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
}
 800088c:	b005      	add	sp, #20
 800088e:	f85d fb04 	ldr.w	pc, [sp], #4
		ret_data = sregParam.Data;
 8000892:	9800      	ldr	r0, [sp, #0]
 8000894:	e7fa      	b.n	800088c <readSregTableStd+0x10>

08000896 <readSreg>:
{
 8000896:	b508      	push	{r3, lr}
	return readSregTableStd(sreg);
 8000898:	f7ff fff0 	bl	800087c <readSregTableStd>
}
 800089c:	bd08      	pop	{r3, pc}

0800089e <writeSregTableStd>:
{
 800089e:	b570      	push	{r4, r5, r6, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	4606      	mov	r6, r0
 80008a4:	460d      	mov	r5, r1
	result = sregReadParam(sreg, &sregParam);
 80008a6:	4669      	mov	r1, sp
 80008a8:	f7ff ff82 	bl	80007b0 <sregReadParam>
 80008ac:	4604      	mov	r4, r0
	if ( value > sregParam.Max )
 80008ae:	9901      	ldr	r1, [sp, #4]
 80008b0:	42a9      	cmp	r1, r5
 80008b2:	d303      	bcc.n	80008bc <writeSregTableStd+0x1e>
	else if ( value < sregParam.Min )
 80008b4:	9902      	ldr	r1, [sp, #8]
 80008b6:	428d      	cmp	r5, r1
 80008b8:	d300      	bcc.n	80008bc <writeSregTableStd+0x1e>
 80008ba:	4629      	mov	r1, r5
	if ( result == RET_OK )
 80008bc:	b114      	cbz	r4, 80008c4 <writeSregTableStd+0x26>
}
 80008be:	4620      	mov	r0, r4
 80008c0:	b004      	add	sp, #16
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
		sregWrite(sreg, value);
 80008c4:	4630      	mov	r0, r6
 80008c6:	f7ff ff4f 	bl	8000768 <sregWrite>
 80008ca:	e7f8      	b.n	80008be <writeSregTableStd+0x20>

080008cc <writeSreg>:
{
 80008cc:	b508      	push	{r3, lr}
	return writeSregTableStd( sreg, value );
 80008ce:	f7ff ffe6 	bl	800089e <writeSregTableStd>
}
 80008d2:	bd08      	pop	{r3, pc}

080008d4 <SchedulerResetProcessTable>:
 ****************************************************************************/
void SchedulerResetProcessTable(void)
{
	uint8_t i;

	ptrTask	= 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <SchedulerResetProcessTable+0x5c>)
 80008d8:	7013      	strb	r3, [r2, #0]

 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d826      	bhi.n	800092c <SchedulerResetProcessTable+0x58>
{
 80008de:	b430      	push	{r4, r5}
 	{
		schedulerProcess[i].uiTimeProcessCounter	= 0;
 80008e0:	4914      	ldr	r1, [pc, #80]	; (8000934 <SchedulerResetProcessTable+0x60>)
 80008e2:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80008e6:	f36f 020d 	bfc	r2, #0, #14
 80008ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		schedulerProcess[i].bEnabledSystemTask	= SchedulerInstanceMap[i].initState;
 80008ee:	005a      	lsls	r2, r3, #1
 80008f0:	18d0      	adds	r0, r2, r3
 80008f2:	0084      	lsls	r4, r0, #2
 80008f4:	4810      	ldr	r0, [pc, #64]	; (8000938 <SchedulerResetProcessTable+0x64>)
 80008f6:	4420      	add	r0, r4
 80008f8:	7a84      	ldrb	r4, [r0, #10]
 80008fa:	4411      	add	r1, r2
 80008fc:	7848      	ldrb	r0, [r1, #1]
 80008fe:	f364 1086 	bfi	r0, r4, #6, #1
		schedulerProcess[i].bEnabledUrgentSystemTask = FALSE;
 8000902:	f36f 10c7 	bfc	r0, #7, #1
 8000906:	7048      	strb	r0, [r1, #1]

		schedulerContext[i].maxDelayProcessCtn = 0;
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <SchedulerResetProcessTable+0x68>)
 800090a:	18d0      	adds	r0, r2, r3
 800090c:	00c5      	lsls	r5, r0, #3
 800090e:	194c      	adds	r4, r1, r5
 8000910:	2000      	movs	r0, #0
 8000912:	81a0      	strh	r0, [r4, #12]
		schedulerContext[i].maximumTaskTime_us = 0;
 8000914:	60a0      	str	r0, [r4, #8]
		schedulerContext[i].averageTaskTime_us = 0;
 8000916:	5148      	str	r0, [r1, r5]
		schedulerContext[i].currentTaskTime_us = 0;
 8000918:	6060      	str	r0, [r4, #4]
		schedulerContext[i].cntTaskTime = 0;
 800091a:	6120      	str	r0, [r4, #16]
		schedulerContext[i].userEnabled = TRUE;
 800091c:	2201      	movs	r2, #1
 800091e:	7562      	strb	r2, [r4, #21]
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000920:	4413      	add	r3, r2
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b01      	cmp	r3, #1
 8000926:	d9db      	bls.n	80008e0 <SchedulerResetProcessTable+0xc>
 	}
}
 8000928:	bc30      	pop	{r4, r5}
 800092a:	4770      	bx	lr
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200000b8 	.word	0x200000b8
 8000934:	200000bc 	.word	0x200000bc
 8000938:	08003864 	.word	0x08003864
 800093c:	20000088 	.word	0x20000088

08000940 <SchedulerInit>:
{
 8000940:	b510      	push	{r4, lr}
	SchedulerResetProcessTable();
 8000942:	f7ff ffc7 	bl	80008d4 <SchedulerResetProcessTable>
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000946:	2400      	movs	r4, #0
 8000948:	e001      	b.n	800094e <SchedulerInit+0xe>
 800094a:	3401      	adds	r4, #1
 800094c:	b2e4      	uxtb	r4, r4
 800094e:	2c01      	cmp	r4, #1
 8000950:	d808      	bhi.n	8000964 <SchedulerInit+0x24>
		if(SchedulerInstanceMap[i].InitProcess != NULL)
 8000952:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000956:	0093      	lsls	r3, r2, #2
 8000958:	4a08      	ldr	r2, [pc, #32]	; (800097c <SchedulerInit+0x3c>)
 800095a:	58d3      	ldr	r3, [r2, r3]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f4      	beq.n	800094a <SchedulerInit+0xa>
			(*(SchedulerInstanceMap[i].InitProcess))();
 8000960:	4798      	blx	r3
 8000962:	e7f2      	b.n	800094a <SchedulerInit+0xa>
    systemGetCLkFreq(&ticks_per_us);
 8000964:	4c06      	ldr	r4, [pc, #24]	; (8000980 <SchedulerInit+0x40>)
 8000966:	4620      	mov	r0, r4
 8000968:	f000 fd1e 	bl	80013a8 <systemGetCLkFreq>
    ticks_per_us /= 1000000;
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SchedulerInit+0x44>)
 8000970:	fba2 2303 	umull	r2, r3, r2, r3
 8000974:	0c9b      	lsrs	r3, r3, #18
 8000976:	6023      	str	r3, [r4, #0]
 8000978:	bd10      	pop	{r4, pc}
 800097a:	bf00      	nop
 800097c:	08003864 	.word	0x08003864
 8000980:	20000084 	.word	0x20000084
 8000984:	431bde83 	.word	0x431bde83

08000988 <SchedulerProcessesAutoEnable>:
 ****************************************************************************/
void SchedulerProcessesAutoEnable(void)
{
	uint8_t i;

	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000988:	2300      	movs	r3, #0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d825      	bhi.n	80009da <SchedulerProcessesAutoEnable+0x52>
{
 800098e:	b430      	push	{r4, r5}
 8000990:	e003      	b.n	800099a <SchedulerProcessesAutoEnable+0x12>
	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000992:	3301      	adds	r3, #1
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b01      	cmp	r3, #1
 8000998:	d81d      	bhi.n	80009d6 <SchedulerProcessesAutoEnable+0x4e>
	{
		schedulerProcess[i].uiTimeProcessCounter++;
 800099a:	4810      	ldr	r0, [pc, #64]	; (80009dc <SchedulerProcessesAutoEnable+0x54>)
 800099c:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80009a0:	f3c2 010d 	ubfx	r1, r2, #0, #14
 80009a4:	3101      	adds	r1, #1
 80009a6:	f361 020d 	bfi	r2, r1, #0, #14
 80009aa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

		// If currentTaskTime it's enable, update 1000uS=1mS
		if (schedulerContext[i].taskActive == TRUE && schedulerContext[i].userEnabled == TRUE )
 80009ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80009b2:	00d1      	lsls	r1, r2, #3
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <SchedulerProcessesAutoEnable+0x58>)
 80009b6:	440a      	add	r2, r1
 80009b8:	7d12      	ldrb	r2, [r2, #20]
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d0e9      	beq.n	8000992 <SchedulerProcessesAutoEnable+0xa>
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <SchedulerProcessesAutoEnable+0x58>)
 80009c0:	440a      	add	r2, r1
 80009c2:	7d52      	ldrb	r2, [r2, #21]
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d0e4      	beq.n	8000992 <SchedulerProcessesAutoEnable+0xa>
		{
			schedulerContext[i].currentTaskTime_us += 1000;
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <SchedulerProcessesAutoEnable+0x58>)
 80009ca:	4401      	add	r1, r0
 80009cc:	684a      	ldr	r2, [r1, #4]
 80009ce:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80009d2:	604a      	str	r2, [r1, #4]
 80009d4:	e7dd      	b.n	8000992 <SchedulerProcessesAutoEnable+0xa>
		}
	}
}
 80009d6:	bc30      	pop	{r4, r5}
 80009d8:	4770      	bx	lr
 80009da:	4770      	bx	lr
 80009dc:	200000bc 	.word	0x200000bc
 80009e0:	20000088 	.word	0x20000088

080009e4 <SchedulerUpdateTaskTime>:
 * @brief  	Update average task time, maximum task time
 * @param   process, initTime, finalTime
 * @return  none
 ****************************************************************************/
void SchedulerUpdateTaskTime(int32_t initTimeTaskScheduler, int32_t finalTimeTaskScheduler)
{
 80009e4:	b4f0      	push	{r4, r5, r6, r7}
	uint64_t averageTaskTemp;
	schedulerContext[ptrTask].currentTaskTime_us += ((initTimeTaskScheduler - finalTimeTaskScheduler)/(int32_t)(ticks_per_us));
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <SchedulerUpdateTaskTime+0x48>)
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	1a41      	subs	r1, r0, r1
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <SchedulerUpdateTaskTime+0x4c>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	fb91 f1f0 	sdiv	r1, r1, r0
 80009f4:	4e0f      	ldr	r6, [pc, #60]	; (8000a34 <SchedulerUpdateTaskTime+0x50>)
 80009f6:	0053      	lsls	r3, r2, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	00dd      	lsls	r5, r3, #3
 80009fc:	1974      	adds	r4, r6, r5
 80009fe:	6863      	ldr	r3, [r4, #4]
 8000a00:	4419      	add	r1, r3
 8000a02:	6061      	str	r1, [r4, #4]
	schedulerContext[ptrTask].cntTaskTime %= MAX_TASK_TIME_CNT;
 8000a04:	6923      	ldr	r3, [r4, #16]
 8000a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a0a:	bf28      	it	cs
 8000a0c:	3301      	addcs	r3, #1
	schedulerContext[ptrTask].cntTaskTime++;
 8000a0e:	1c58      	adds	r0, r3, #1
 8000a10:	6120      	str	r0, [r4, #16]

	/* Calculate the average task time */
	averageTaskTemp = (uint64_t)(schedulerContext[ptrTask].averageTaskTime_us*(schedulerContext[ptrTask].cntTaskTime-1));
 8000a12:	5977      	ldr	r7, [r6, r5]
	schedulerContext[ptrTask].averageTaskTime_us = (uint32_t)(averageTaskTemp + schedulerContext[ptrTask].currentTaskTime_us) / schedulerContext[ptrTask].cntTaskTime;
 8000a14:	fb07 1303 	mla	r3, r7, r3, r1
 8000a18:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a1c:	5173      	str	r3, [r6, r5]

    /* If current Task Time is higher than maximum, update maximum task time */
    if ( schedulerContext[ptrTask].currentTaskTime_us > schedulerContext[ptrTask].maximumTaskTime_us )
 8000a1e:	68a3      	ldr	r3, [r4, #8]
 8000a20:	4299      	cmp	r1, r3
 8000a22:	d900      	bls.n	8000a26 <SchedulerUpdateTaskTime+0x42>
    {
    	schedulerContext[ptrTask].maximumTaskTime_us = schedulerContext[ptrTask].currentTaskTime_us;
 8000a24:	60a1      	str	r1, [r4, #8]
    }

}
 8000a26:	bcf0      	pop	{r4, r5, r6, r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000b8 	.word	0x200000b8
 8000a30:	20000084 	.word	0x20000084
 8000a34:	20000088 	.word	0x20000088

08000a38 <SchedulerExecuteSystemProcess>:
{
 8000a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	schedulerContext[ptrTask].currentTaskTime_us = 0;
 8000a3c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000a98 <SchedulerExecuteSystemProcess+0x60>
 8000a40:	f898 1000 	ldrb.w	r1, [r8]
 8000a44:	4c11      	ldr	r4, [pc, #68]	; (8000a8c <SchedulerExecuteSystemProcess+0x54>)
 8000a46:	004b      	lsls	r3, r1, #1
 8000a48:	1858      	adds	r0, r3, r1
 8000a4a:	00c2      	lsls	r2, r0, #3
 8000a4c:	4422      	add	r2, r4
 8000a4e:	2700      	movs	r7, #0
 8000a50:	6057      	str	r7, [r2, #4]
	initTimeTaskScheduler =  SYSTEM_TICK;
 8000a52:	4e0f      	ldr	r6, [pc, #60]	; (8000a90 <SchedulerExecuteSystemProcess+0x58>)
 8000a54:	68b5      	ldr	r5, [r6, #8]
	schedulerContext[ptrTask].taskActive = TRUE;
 8000a56:	2001      	movs	r0, #1
 8000a58:	7510      	strb	r0, [r2, #20]
    (*(SchedulerInstanceMap[ptrTask].CallProcess))();
 8000a5a:	440b      	add	r3, r1
 8000a5c:	009a      	lsls	r2, r3, #2
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <SchedulerExecuteSystemProcess+0x5c>)
 8000a60:	4413      	add	r3, r2
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4798      	blx	r3
	schedulerContext[ptrTask].taskActive = FALSE;
 8000a66:	f898 0000 	ldrb.w	r0, [r8]
 8000a6a:	0043      	lsls	r3, r0, #1
 8000a6c:	1819      	adds	r1, r3, r0
 8000a6e:	00ca      	lsls	r2, r1, #3
 8000a70:	4422      	add	r2, r4
 8000a72:	7517      	strb	r7, [r2, #20]
    finalTimeTaskScheduler = SYSTEM_TICK;
 8000a74:	68b1      	ldr	r1, [r6, #8]
    if ( schedulerContext[ptrTask].userEnabled == TRUE )
 8000a76:	4403      	add	r3, r0
 8000a78:	00da      	lsls	r2, r3, #3
 8000a7a:	4414      	add	r4, r2
 8000a7c:	7d63      	ldrb	r3, [r4, #21]
 8000a7e:	b90b      	cbnz	r3, 8000a84 <SchedulerExecuteSystemProcess+0x4c>
 8000a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	SchedulerUpdateTaskTime(initTimeTaskScheduler, finalTimeTaskScheduler);
 8000a84:	4628      	mov	r0, r5
 8000a86:	f7ff ffad 	bl	80009e4 <SchedulerUpdateTaskTime>
}
 8000a8a:	e7f9      	b.n	8000a80 <SchedulerExecuteSystemProcess+0x48>
 8000a8c:	20000088 	.word	0x20000088
 8000a90:	e000e010 	.word	0xe000e010
 8000a94:	08003864 	.word	0x08003864
 8000a98:	200000b8 	.word	0x200000b8

08000a9c <SchedulerNextSystemProcess>:
{
 8000a9c:	b570      	push	{r4, r5, r6, lr}
    uint8_t i			= 0;
 8000a9e:	2400      	movs	r4, #0
    bool taskExecuted	= FALSE;
 8000aa0:	4620      	mov	r0, r4
 8000aa2:	e027      	b.n	8000af4 <SchedulerNextSystemProcess+0x58>
			if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE )
 8000aa4:	2a00      	cmp	r2, #0
 8000aa6:	d148      	bne.n	8000b3a <SchedulerNextSystemProcess+0x9e>
				schedulerProcess[ptrTask].uiTimeProcessCounter = 0;
 8000aa8:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <SchedulerNextSystemProcess+0xb0>)
 8000aaa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000aae:	f36f 010d 	bfc	r1, #0, #14
 8000ab2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (schedulerContext[ptrTask].maxDelayProcessCtn < (schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess))
 8000ab6:	005a      	lsls	r2, r3, #1
 8000ab8:	18d1      	adds	r1, r2, r3
 8000aba:	00c8      	lsls	r0, r1, #3
 8000abc:	4924      	ldr	r1, [pc, #144]	; (8000b50 <SchedulerNextSystemProcess+0xb4>)
 8000abe:	4401      	add	r1, r0
 8000ac0:	898d      	ldrh	r5, [r1, #12]
 8000ac2:	4922      	ldr	r1, [pc, #136]	; (8000b4c <SchedulerNextSystemProcess+0xb0>)
 8000ac4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000ac8:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000acc:	441a      	add	r2, r3
 8000ace:	0090      	lsls	r0, r2, #2
 8000ad0:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <SchedulerNextSystemProcess+0xb8>)
 8000ad2:	4402      	add	r2, r0
 8000ad4:	8912      	ldrh	r2, [r2, #8]
 8000ad6:	1a88      	subs	r0, r1, r2
 8000ad8:	4285      	cmp	r5, r0
 8000ada:	da05      	bge.n	8000ae8 <SchedulerNextSystemProcess+0x4c>
				schedulerContext[ptrTask].maxDelayProcessCtn = schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess;
 8000adc:	005a      	lsls	r2, r3, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	00da      	lsls	r2, r3, #3
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <SchedulerNextSystemProcess+0xb4>)
 8000ae4:	4413      	add	r3, r2
 8000ae6:	8198      	strh	r0, [r3, #12]
			SchedulerExecuteSystemProcess();
 8000ae8:	f7ff ffa6 	bl	8000a38 <SchedulerExecuteSystemProcess>
			taskExecuted = TRUE;
 8000aec:	2001      	movs	r0, #1
	while ( ( taskExecuted == FALSE ) && ( i <= NUM_OF_SCHED_TASKS ) );
 8000aee:	bb60      	cbnz	r0, 8000b4a <SchedulerNextSystemProcess+0xae>
 8000af0:	2c02      	cmp	r4, #2
 8000af2:	d82a      	bhi.n	8000b4a <SchedulerNextSystemProcess+0xae>
        i++;
 8000af4:	3401      	adds	r4, #1
 8000af6:	b2e4      	uxtb	r4, r4
        ptrTask++;
 8000af8:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <SchedulerNextSystemProcess+0xbc>)
 8000afa:	7813      	ldrb	r3, [r2, #0]
 8000afc:	3301      	adds	r3, #1
		ptrTask %= NUM_OF_SCHED_TASKS;
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	7013      	strb	r3, [r2, #0]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <SchedulerNextSystemProcess+0xb0>)
 8000b06:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000b0a:	7852      	ldrb	r2, [r2, #1]
 8000b0c:	09d2      	lsrs	r2, r2, #7
 8000b0e:	d1c9      	bne.n	8000aa4 <SchedulerNextSystemProcess+0x8>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000b10:	490e      	ldr	r1, [pc, #56]	; (8000b4c <SchedulerNextSystemProcess+0xb0>)
 8000b12:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8000b16:	7849      	ldrb	r1, [r1, #1]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000b18:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000b1c:	d0e7      	beq.n	8000aee <SchedulerNextSystemProcess+0x52>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000b1e:	490b      	ldr	r1, [pc, #44]	; (8000b4c <SchedulerNextSystemProcess+0xb0>)
 8000b20:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 8000b24:	f3c5 050d 	ubfx	r5, r5, #0, #14
 8000b28:	0059      	lsls	r1, r3, #1
 8000b2a:	4419      	add	r1, r3
 8000b2c:	008e      	lsls	r6, r1, #2
 8000b2e:	4909      	ldr	r1, [pc, #36]	; (8000b54 <SchedulerNextSystemProcess+0xb8>)
 8000b30:	4431      	add	r1, r6
 8000b32:	8909      	ldrh	r1, [r1, #8]
 8000b34:	428d      	cmp	r5, r1
 8000b36:	dbda      	blt.n	8000aee <SchedulerNextSystemProcess+0x52>
 8000b38:	e7b4      	b.n	8000aa4 <SchedulerNextSystemProcess+0x8>
				schedulerProcess[ptrTask].bEnabledUrgentSystemTask = FALSE;
 8000b3a:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <SchedulerNextSystemProcess+0xb0>)
 8000b3c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000b40:	7851      	ldrb	r1, [r2, #1]
 8000b42:	f36f 11c7 	bfc	r1, #7, #1
 8000b46:	7051      	strb	r1, [r2, #1]
 8000b48:	e7b5      	b.n	8000ab6 <SchedulerNextSystemProcess+0x1a>
}
 8000b4a:	bd70      	pop	{r4, r5, r6, pc}
 8000b4c:	200000bc 	.word	0x200000bc
 8000b50:	20000088 	.word	0x20000088
 8000b54:	08003864 	.word	0x08003864
 8000b58:	200000b8 	.word	0x200000b8

08000b5c <CreateQueue>:
 * @return  None.
 *
 ****************************************************************************/
void CreateQueue(tCircularBuffer* buffer, uint8_t* bufferPtr, uint16_t size)
{
	buffer->bufferPtr = bufferPtr;
 8000b5c:	6081      	str	r1, [r0, #8]
	buffer->bufferLen = size;
 8000b5e:	80c2      	strh	r2, [r0, #6]
	buffer->readPtr = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	8043      	strh	r3, [r0, #2]
	buffer->writePtr = 0;
 8000b64:	8083      	strh	r3, [r0, #4]
    buffer->numOfBytes = 0;
 8000b66:	8003      	strh	r3, [r0, #0]
 8000b68:	4770      	bx	lr

08000b6a <AddQueueByte>:
 *
 * @return  None.
 *
 ****************************************************************************/
void AddQueueByte(tCircularBuffer* buffer, uint8_t data)
{
 8000b6a:	b538      	push	{r3, r4, r5, lr}
 8000b6c:	4604      	mov	r4, r0
 8000b6e:	460d      	mov	r5, r1
	interruptsDisable();
 8000b70:	f000 fa40 	bl	8000ff4 <interruptsDisable>
    buffer->bufferPtr[buffer->writePtr]= data;
 8000b74:	68a2      	ldr	r2, [r4, #8]
 8000b76:	88a3      	ldrh	r3, [r4, #4]
 8000b78:	54d5      	strb	r5, [r2, r3]
    buffer->numOfBytes++;
 8000b7a:	8823      	ldrh	r3, [r4, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	8023      	strh	r3, [r4, #0]
    buffer->writePtr++;
 8000b80:	88a3      	ldrh	r3, [r4, #4]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b29b      	uxth	r3, r3
    buffer->writePtr %= buffer->bufferLen;
 8000b86:	88e1      	ldrh	r1, [r4, #6]
 8000b88:	fbb3 f2f1 	udiv	r2, r3, r1
 8000b8c:	fb01 3312 	mls	r3, r1, r2, r3
 8000b90:	80a3      	strh	r3, [r4, #4]
	interruptsEnable();
 8000b92:	f000 fa1b 	bl	8000fcc <interruptsEnable>
 8000b96:	bd38      	pop	{r3, r4, r5, pc}

08000b98 <GetQueueByte>:
 *
 * @return  Next byte into queue
 *
 ****************************************************************************/
uint8_t GetQueueByte(tCircularBuffer* buffer)
{
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	4604      	mov	r4, r0
    uint8_t result;
	interruptsDisable();
 8000b9c:	f000 fa2a 	bl	8000ff4 <interruptsDisable>
    result = buffer->bufferPtr[buffer->readPtr];
 8000ba0:	68a2      	ldr	r2, [r4, #8]
 8000ba2:	8863      	ldrh	r3, [r4, #2]
 8000ba4:	5cd5      	ldrb	r5, [r2, r3]
    buffer->numOfBytes--;
 8000ba6:	8822      	ldrh	r2, [r4, #0]
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	8022      	strh	r2, [r4, #0]
    buffer->readPtr++;
 8000bac:	3301      	adds	r3, #1
 8000bae:	b29b      	uxth	r3, r3
    buffer->readPtr %= buffer->bufferLen;
 8000bb0:	88e1      	ldrh	r1, [r4, #6]
 8000bb2:	fbb3 f2f1 	udiv	r2, r3, r1
 8000bb6:	fb01 3312 	mls	r3, r1, r2, r3
 8000bba:	8063      	strh	r3, [r4, #2]
    interruptsEnable();
 8000bbc:	f000 fa06 	bl	8000fcc <interruptsEnable>
    return result;
}
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	bd38      	pop	{r3, r4, r5, pc}

08000bc4 <GetQueuePendingBytes>:
 *
 ****************************************************************************/
uint16_t GetQueuePendingBytes(tCircularBuffer* buffer)
{
    return buffer->numOfBytes;
}
 8000bc4:	8800      	ldrh	r0, [r0, #0]
 8000bc6:	4770      	bx	lr

08000bc8 <GetQueueFreeBytes>:
 * @return  Free spaces in queue
 *
 ****************************************************************************/
uint16_t GetQueueFreeBytes(tCircularBuffer* buffer)
{
    return (buffer->bufferLen-buffer->numOfBytes);
 8000bc8:	88c3      	ldrh	r3, [r0, #6]
 8000bca:	8800      	ldrh	r0, [r0, #0]
 8000bcc:	1a18      	subs	r0, r3, r0
}
 8000bce:	b280      	uxth	r0, r0
 8000bd0:	4770      	bx	lr

08000bd2 <diffTime>:
 **********************************************************************/
static uint32_t diffTime( uint32_t timeA, uint32_t timeB )
{
    uint32_t retVal = 0;

    if( timeA >= timeB )
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d202      	bcs.n	8000bdc <diffTime+0xa>
    {
            retVal = timeA - timeB;
    }
    else
    {
            retVal = UINT32_MAX - (timeB - timeA);
 8000bd6:	1a09      	subs	r1, r1, r0
 8000bd8:	43c8      	mvns	r0, r1
    }

    return retVal;
}
 8000bda:	4770      	bx	lr
            retVal = timeA - timeB;
 8000bdc:	1a40      	subs	r0, r0, r1
 8000bde:	4770      	bx	lr

08000be0 <getTime>:
    uint32_t retVal = 0;

    retVal = timeMs;

    return retVal;
}
 8000be0:	4b01      	ldr	r3, [pc, #4]	; (8000be8 <getTime+0x8>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000068 	.word	0x20000068

08000bec <SwTimerInit>:
eError SwTimerInit( void )
{
    eError result = RET_OK;
    uint8_t i;

    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8000bec:	2300      	movs	r3, #0
 8000bee:	b10b      	cbz	r3, 8000bf4 <SwTimerInit+0x8>
    {
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
    }

    return result;
}
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	4770      	bx	lr
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
 8000bf4:	4a03      	ldr	r2, [pc, #12]	; (8000c04 <SwTimerInit+0x18>)
 8000bf6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	7211      	strb	r1, [r2, #8]
    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	e7f4      	b.n	8000bee <SwTimerInit+0x2>
 8000c04:	20000058 	.word	0x20000058

08000c08 <SwTimerResetTimer>:
/**********************************************************************
 * @brief  Reset and start the timer
 * @param  pTimer:	Pointer to timer to be restart.
 **********************************************************************/
eError SwTimerResetTimer( tSwTimerIndex SwTimerIndex )
{
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	4604      	mov	r4, r0
    eError result = RET_OK;

    // Reset the timer.
    SwTimersArray[SwTimerIndex].startMs = getTime();
 8000c0c:	f7ff ffe8 	bl	8000be0 <getTime>
 8000c10:	0124      	lsls	r4, r4, #4
 8000c12:	4b02      	ldr	r3, [pc, #8]	; (8000c1c <SwTimerResetTimer+0x14>)
 8000c14:	5118      	str	r0, [r3, r4]

    return result;
}
 8000c16:	2000      	movs	r0, #0
 8000c18:	bd10      	pop	{r4, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000058 	.word	0x20000058

08000c20 <SwTimerStartTimer>:
{
 8000c20:	b510      	push	{r4, lr}
 8000c22:	4604      	mov	r4, r0
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_CANCELLED ||
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <SwTimerStartTimer+0x28>)
 8000c26:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000c2a:	7a1b      	ldrb	r3, [r3, #8]
 8000c2c:	3b02      	subs	r3, #2
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d906      	bls.n	8000c42 <SwTimerStartTimer+0x22>
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_STARTED;
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <SwTimerStartTimer+0x28>)
 8000c36:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	7203      	strb	r3, [r0, #8]
}
 8000c3e:	2000      	movs	r0, #0
 8000c40:	bd10      	pop	{r4, pc}
        SwTimerResetTimer( SwTimerIndex );
 8000c42:	f7ff ffe1 	bl	8000c08 <SwTimerResetTimer>
 8000c46:	e7f5      	b.n	8000c34 <SwTimerStartTimer+0x14>
 8000c48:	20000058 	.word	0x20000058

08000c4c <SwTimerUpdateTimer>:
 * @brief  Updates all timers every millisecond
 * @param
 * @retval
 **********************************************************************/
eError SwTimerUpdateTimer( tSwTimerIndex SwTimerIndex )
{
 8000c4c:	b538      	push	{r3, r4, r5, lr}
 8000c4e:	4604      	mov	r4, r0
    eError result = RET_OK;
    tBool restartTimer = FALSE;

    // If timer is started, check timeout.
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STARTED )
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <SwTimerUpdateTimer+0x60>)
 8000c52:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8000c56:	7a1b      	ldrb	r3, [r3, #8]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d00a      	beq.n	8000c72 <SwTimerUpdateTimer+0x26>
            }
        }
    }
    // If the timer is stopped, simply shifts the start time,
    // this keeps the elapsed time.
    else if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STOPPED )
 8000c5c:	b9fb      	cbnz	r3, 8000c9e <SwTimerUpdateTimer+0x52>
    {
        SwTimersArray[SwTimerIndex].startMs++;
 8000c5e:	4913      	ldr	r1, [pc, #76]	; (8000cac <SwTimerUpdateTimer+0x60>)
 8000c60:	0102      	lsls	r2, r0, #4
 8000c62:	588b      	ldr	r3, [r1, r2]
 8000c64:	3301      	adds	r3, #1
 8000c66:	508b      	str	r3, [r1, r2]
    tBool restartTimer = FALSE;
 8000c68:	2000      	movs	r0, #0
    }

    if ( restartTimer == TRUE )
 8000c6a:	2801      	cmp	r0, #1
 8000c6c:	d019      	beq.n	8000ca2 <SwTimerUpdateTimer+0x56>
    {
        SwTimerStartTimer(SwTimerIndex);
    }

    return result;
}
 8000c6e:	2000      	movs	r0, #0
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
        if( diffTime( timeMs, SwTimersArray[SwTimerIndex].startMs ) >= SwTimersArray[SwTimerIndex].timeoutMs )
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <SwTimerUpdateTimer+0x60>)
 8000c74:	0103      	lsls	r3, r0, #4
 8000c76:	18d5      	adds	r5, r2, r3
 8000c78:	58d1      	ldr	r1, [r2, r3]
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <SwTimerUpdateTimer+0x64>)
 8000c7c:	6818      	ldr	r0, [r3, #0]
 8000c7e:	f7ff ffa8 	bl	8000bd2 <diffTime>
 8000c82:	686b      	ldr	r3, [r5, #4]
 8000c84:	4298      	cmp	r0, r3
 8000c86:	d306      	bcc.n	8000c96 <SwTimerUpdateTimer+0x4a>
            SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_EXPIRED;
 8000c88:	2203      	movs	r2, #3
 8000c8a:	722a      	strb	r2, [r5, #8]
            if( NULL != SwTimersArray[SwTimerIndex].pFuncCB )
 8000c8c:	68eb      	ldr	r3, [r5, #12]
 8000c8e:	b123      	cbz	r3, 8000c9a <SwTimerUpdateTimer+0x4e>
                    restartTimer = SwTimersArray[SwTimerIndex].pFuncCB(SwTimerIndex);
 8000c90:	4620      	mov	r0, r4
 8000c92:	4798      	blx	r3
 8000c94:	e7e9      	b.n	8000c6a <SwTimerUpdateTimer+0x1e>
    tBool restartTimer = FALSE;
 8000c96:	2000      	movs	r0, #0
 8000c98:	e7e7      	b.n	8000c6a <SwTimerUpdateTimer+0x1e>
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	e7e5      	b.n	8000c6a <SwTimerUpdateTimer+0x1e>
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	e7e3      	b.n	8000c6a <SwTimerUpdateTimer+0x1e>
        SwTimerStartTimer(SwTimerIndex);
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f7ff ffbc 	bl	8000c20 <SwTimerStartTimer>
 8000ca8:	e7e1      	b.n	8000c6e <SwTimerUpdateTimer+0x22>
 8000caa:	bf00      	nop
 8000cac:	20000058 	.word	0x20000058
 8000cb0:	20000068 	.word	0x20000068

08000cb4 <SwTimerIrq>:
 * @brief  Interrupt request rutine for periodic tick
 * @param  None.
 * @retval None.
 **********************************************************************/
void SwTimerIrq( void )
{
 8000cb4:	b510      	push	{r4, lr}
    uint8_t SwTimerIndex = 0;

    // Increment time global variable.
    timeMs = timeMs + TIMER_PERIOD; //timeMs++;
 8000cb6:	4a06      	ldr	r2, [pc, #24]	; (8000cd0 <SwTimerIrq+0x1c>)
 8000cb8:	6813      	ldr	r3, [r2, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	6013      	str	r3, [r2, #0]

    // Update timers
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	b104      	cbz	r4, 8000cc4 <SwTimerIrq+0x10>
    {
        SwTimerUpdateTimer( SwTimerIndex );
    }
}
 8000cc2:	bd10      	pop	{r4, pc}
        SwTimerUpdateTimer( SwTimerIndex );
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f7ff ffc1 	bl	8000c4c <SwTimerUpdateTimer>
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8000cca:	3401      	adds	r4, #1
 8000ccc:	b2e4      	uxtb	r4, r4
 8000cce:	e7f7      	b.n	8000cc0 <SwTimerIrq+0xc>
 8000cd0:	20000068 	.word	0x20000068

08000cd4 <pipeDeviceByteReceived>:
 * @param	data to be saved.
 * @return  None.
 ****************************************************************************/
eError pipeDeviceByteReceived(ePipes id, uint8_t data)
{
    pipes[id].buffer[pipes[id].bufferRxPtr] = data;
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <pipeDeviceByteReceived+0x30>)
 8000cd6:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8000cda:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000cde:	7943      	ldrb	r3, [r0, #5]
 8000ce0:	54d1      	strb	r1, [r2, r3]
    pipes[id].bufferRxPtr = (pipes[id].bufferRxPtr + 1) % (pipes[id].bufferLength);
 8000ce2:	7943      	ldrb	r3, [r0, #5]
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	7981      	ldrb	r1, [r0, #6]
 8000ce8:	fb92 f3f1 	sdiv	r3, r2, r1
 8000cec:	fb01 2313 	mls	r3, r1, r3, r2
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	7143      	strb	r3, [r0, #5]
    if ( pipes[id].bufferRxPtr == pipes[id].bufferStartingPosition )
 8000cf4:	7902      	ldrb	r2, [r0, #4]
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d001      	beq.n	8000cfe <pipeDeviceByteReceived+0x2a>
    {
        return RET_BUFFER_FULL;
    }

    return RET_OK;
 8000cfa:	2000      	movs	r0, #0
}
 8000cfc:	4770      	bx	lr
        return RET_BUFFER_FULL;
 8000cfe:	2008      	movs	r0, #8
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	200000c0 	.word	0x200000c0

08000d08 <pipeDevice1ByteReceived>:


/**Helper functions to access each pipe */
#ifdef IS_PIPE1
inline eError pipeDevice1ByteReceived(uint8_t data)
{
 8000d08:	b508      	push	{r3, lr}
	return pipeDeviceByteReceived(PIPE_1, data);
 8000d0a:	4601      	mov	r1, r0
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff ffe1 	bl	8000cd4 <pipeDeviceByteReceived>
}
 8000d12:	bd08      	pop	{r3, pc}

08000d14 <FlashCalcOffset>:
 ****************************************************************************/
uint32_t FlashCalcOffset ( uint32_t initSector, uint32_t finalSector )
{
	uint32_t offset = 0;

	offset = (finalSector - initSector) * (FLASH_SECTOR_SIZE);
 8000d14:	1a08      	subs	r0, r1, r0

	return offset;
}
 8000d16:	00c0      	lsls	r0, r0, #3
 8000d18:	4770      	bx	lr
	...

08000d1c <FlashInit>:
{
 8000d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FlashContext[i].initAddress = FLASH_BASE;
 8000d20:	4c26      	ldr	r4, [pc, #152]	; (8000dbc <FlashInit+0xa0>)
 8000d22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d26:	6063      	str	r3, [r4, #4]
	FlashContext[i].initSector = 0;
 8000d28:	2600      	movs	r6, #0
 8000d2a:	6026      	str	r6, [r4, #0]
	FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, FlashInstanceMap[0].sectors);
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <FlashInit+0xa4>)
 8000d2e:	681f      	ldr	r7, [r3, #0]
 8000d30:	4639      	mov	r1, r7
 8000d32:	4630      	mov	r0, r6
 8000d34:	f7ff ffee 	bl	8000d14 <FlashCalcOffset>
 8000d38:	60a0      	str	r0, [r4, #8]
	for (i = 1; i < NUM_OF_FLASH; i++)
 8000d3a:	2401      	movs	r4, #1
 8000d3c:	e005      	b.n	8000d4a <FlashInit+0x2e>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8000d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d42:	e00f      	b.n	8000d64 <FlashInit+0x48>
			success = RET_FAIL;
 8000d44:	2601      	movs	r6, #1
	for (i = 1; i < NUM_OF_FLASH; i++)
 8000d46:	3401      	adds	r4, #1
 8000d48:	b2e4      	uxtb	r4, r4
 8000d4a:	2c03      	cmp	r4, #3
 8000d4c:	d833      	bhi.n	8000db6 <FlashInit+0x9a>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <FlashInit+0xa8>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d0f1      	beq.n	8000d3e <FlashInit+0x22>
 8000d5a:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <FlashInit+0xac>)
 8000d5c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8000d60:	0adb      	lsrs	r3, r3, #11
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	429f      	cmp	r7, r3
 8000d66:	d2ed      	bcs.n	8000d44 <FlashInit+0x28>
			FlashContext[i].initSector = sectorUsed;
 8000d68:	4d14      	ldr	r5, [pc, #80]	; (8000dbc <FlashInit+0xa0>)
 8000d6a:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8000d6e:	eb08 0204 	add.w	r2, r8, r4
 8000d72:	0093      	lsls	r3, r2, #2
 8000d74:	18e8      	adds	r0, r5, r3
 8000d76:	50ef      	str	r7, [r5, r3]
			FlashContext[i].initAddress = FlashContext[i-1].initAddress + FlashContext[i-1].maxOffset;
 8000d78:	f104 3eff 	add.w	lr, r4, #4294967295
 8000d7c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8000d80:	eb03 010e 	add.w	r1, r3, lr
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	442a      	add	r2, r5
 8000d88:	6851      	ldr	r1, [r2, #4]
 8000d8a:	4473      	add	r3, lr
 8000d8c:	009a      	lsls	r2, r3, #2
 8000d8e:	442a      	add	r2, r5
 8000d90:	6893      	ldr	r3, [r2, #8]
 8000d92:	440b      	add	r3, r1
 8000d94:	6043      	str	r3, [r0, #4]
			FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, (sectorUsed + FlashInstanceMap[i].sectors));
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <FlashInit+0xa4>)
 8000d98:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000d9c:	eb07 0903 	add.w	r9, r7, r3
 8000da0:	4649      	mov	r1, r9
 8000da2:	4638      	mov	r0, r7
 8000da4:	f7ff ffb6 	bl	8000d14 <FlashCalcOffset>
 8000da8:	44a0      	add	r8, r4
 8000daa:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8000dae:	441d      	add	r5, r3
 8000db0:	60a8      	str	r0, [r5, #8]
			sectorUsed +=  FlashInstanceMap[i].sectors;
 8000db2:	464f      	mov	r7, r9
 8000db4:	e7c7      	b.n	8000d46 <FlashInit+0x2a>
}
 8000db6:	4630      	mov	r0, r6
 8000db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dbc:	200000c8 	.word	0x200000c8
 8000dc0:	0800387c 	.word	0x0800387c
 8000dc4:	1fff75e0 	.word	0x1fff75e0
 8000dc8:	003ffc00 	.word	0x003ffc00

08000dcc <GPIOWritePort>:
 ****************************************************************************/
eError GPIOWritePort(tGPIO port, tGPIOValue value)
{
	eError 	success = RET_OK;

	if ( value == GPIO_DEFAULT )
 8000dcc:	2903      	cmp	r1, #3
 8000dce:	d015      	beq.n	8000dfc <GPIOWritePort+0x30>
{
 8000dd0:	b508      	push	{r3, lr}
 8000dd2:	460a      	mov	r2, r1
		success = RET_INVALID_PARAMETER;
		return success;
	}


	if ( value != GPIO_TOGGLE )
 8000dd4:	2902      	cmp	r1, #2
 8000dd6:	d008      	beq.n	8000dea <GPIOWritePort+0x1e>
	{
		HAL_GPIO_WritePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin, value);
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <GPIOWritePort+0x34>)
 8000dda:	0100      	lsls	r0, r0, #4
 8000ddc:	1819      	adds	r1, r3, r0
 8000dde:	8889      	ldrh	r1, [r1, #4]
 8000de0:	5818      	ldr	r0, [r3, r0]
 8000de2:	f000 fe3d 	bl	8001a60 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
	}

	return success;
 8000de6:	2000      	movs	r0, #0
 8000de8:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <GPIOWritePort+0x34>)
 8000dec:	0100      	lsls	r0, r0, #4
 8000dee:	181a      	adds	r2, r3, r0
 8000df0:	8891      	ldrh	r1, [r2, #4]
 8000df2:	5818      	ldr	r0, [r3, r0]
 8000df4:	f000 fe39 	bl	8001a6a <HAL_GPIO_TogglePin>
	return success;
 8000df8:	2000      	movs	r0, #0
 8000dfa:	bd08      	pop	{r3, pc}
		return success;
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	4770      	bx	lr
 8000e00:	0800388c 	.word	0x0800388c

08000e04 <InitGPIOClock>:
 * @brief  Enable GPIO clock.
 * @param	port to enable clock.
 * @return  None.
 ****************************************************************************/
void InitGPIOClock(tGPIO port)
{
 8000e04:	b086      	sub	sp, #24
	/* Enable the GPIO Clock */
#ifdef GPIOA
	if ( GPIOInstanceMap[port].port == GPIOA ){
 8000e06:	0103      	lsls	r3, r0, #4
 8000e08:	4a3c      	ldr	r2, [pc, #240]	; (8000efc <InitGPIOClock+0xf8>)
 8000e0a:	58d3      	ldr	r3, [r2, r3]
 8000e0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e10:	d01f      	beq.n	8000e52 <InitGPIOClock+0x4e>
		__GPIOA_CLK_ENABLE();
	}
#endif //GPIOA

#ifdef GPIOB
	if( GPIOInstanceMap[port].port == GPIOB ){
 8000e12:	0103      	lsls	r3, r0, #4
 8000e14:	4a39      	ldr	r2, [pc, #228]	; (8000efc <InitGPIOClock+0xf8>)
 8000e16:	58d2      	ldr	r2, [r2, r3]
 8000e18:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <InitGPIOClock+0xfc>)
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d027      	beq.n	8000e6e <InitGPIOClock+0x6a>
		__GPIOB_CLK_ENABLE();
	}
#endif //GPIOB

#ifdef GPIOC
	if( GPIOInstanceMap[port].port == GPIOC ){
 8000e1e:	0103      	lsls	r3, r0, #4
 8000e20:	4a36      	ldr	r2, [pc, #216]	; (8000efc <InitGPIOClock+0xf8>)
 8000e22:	58d2      	ldr	r2, [r2, r3]
 8000e24:	4b37      	ldr	r3, [pc, #220]	; (8000f04 <InitGPIOClock+0x100>)
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d02f      	beq.n	8000e8a <InitGPIOClock+0x86>
		__GPIOC_CLK_ENABLE();
	}
#endif //GPIOC

#ifdef GPIOD
	if( GPIOInstanceMap[port].port == GPIOD ){
 8000e2a:	0103      	lsls	r3, r0, #4
 8000e2c:	4a33      	ldr	r2, [pc, #204]	; (8000efc <InitGPIOClock+0xf8>)
 8000e2e:	58d2      	ldr	r2, [r2, r3]
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <InitGPIOClock+0x104>)
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d037      	beq.n	8000ea6 <InitGPIOClock+0xa2>
		__GPIOD_CLK_ENABLE();
	}
#endif //GPIOD

#ifdef GPIOE
	if( GPIOInstanceMap[port].port == GPIOE ){
 8000e36:	0103      	lsls	r3, r0, #4
 8000e38:	4a30      	ldr	r2, [pc, #192]	; (8000efc <InitGPIOClock+0xf8>)
 8000e3a:	58d2      	ldr	r2, [r2, r3]
 8000e3c:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <InitGPIOClock+0x108>)
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d03f      	beq.n	8000ec2 <InitGPIOClock+0xbe>
		__GPIOG_CLK_ENABLE();
	}
#endif //GPIOG

#ifdef GPIOH
	if( GPIOInstanceMap[port].port == GPIOH ){
 8000e42:	0100      	lsls	r0, r0, #4
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <InitGPIOClock+0xf8>)
 8000e46:	581a      	ldr	r2, [r3, r0]
 8000e48:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <InitGPIOClock+0x10c>)
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d047      	beq.n	8000ede <InitGPIOClock+0xda>
		__GPIOI_CLK_ENABLE();
	}
#endif //GPIOI


}
 8000e4e:	b006      	add	sp, #24
 8000e50:	4770      	bx	lr
		__GPIOA_CLK_ENABLE();
 8000e52:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000e56:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e5c:	f042 0201 	orr.w	r2, r2, #1
 8000e60:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	9b00      	ldr	r3, [sp, #0]
 8000e6c:	e7d1      	b.n	8000e12 <InitGPIOClock+0xe>
		__GPIOB_CLK_ENABLE();
 8000e6e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000e72:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8000e76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e78:	f042 0202 	orr.w	r2, r2, #2
 8000e7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	9301      	str	r3, [sp, #4]
 8000e86:	9b01      	ldr	r3, [sp, #4]
 8000e88:	e7c9      	b.n	8000e1e <InitGPIOClock+0x1a>
		__GPIOC_CLK_ENABLE();
 8000e8a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000e8e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000e92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e94:	f042 0204 	orr.w	r2, r2, #4
 8000e98:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	9b02      	ldr	r3, [sp, #8]
 8000ea4:	e7c1      	b.n	8000e2a <InitGPIOClock+0x26>
		__GPIOD_CLK_ENABLE();
 8000ea6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000eaa:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8000eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb0:	f042 0208 	orr.w	r2, r2, #8
 8000eb4:	64da      	str	r2, [r3, #76]	; 0x4c
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	9303      	str	r3, [sp, #12]
 8000ebe:	9b03      	ldr	r3, [sp, #12]
 8000ec0:	e7b9      	b.n	8000e36 <InitGPIOClock+0x32>
		__GPIOE_CLK_ENABLE();
 8000ec2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000ec6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ecc:	f042 0210 	orr.w	r2, r2, #16
 8000ed0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	9304      	str	r3, [sp, #16]
 8000eda:	9b04      	ldr	r3, [sp, #16]
 8000edc:	e7b1      	b.n	8000e42 <InitGPIOClock+0x3e>
		__GPIOH_CLK_ENABLE();
 8000ede:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000ee2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ee8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000eec:	64da      	str	r2, [r3, #76]	; 0x4c
 8000eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef4:	9305      	str	r3, [sp, #20]
 8000ef6:	9b05      	ldr	r3, [sp, #20]
}
 8000ef8:	e7a9      	b.n	8000e4e <InitGPIOClock+0x4a>
 8000efa:	bf00      	nop
 8000efc:	0800388c 	.word	0x0800388c
 8000f00:	48000400 	.word	0x48000400
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48000c00 	.word	0x48000c00
 8000f0c:	48001000 	.word	0x48001000
 8000f10:	48001c00 	.word	0x48001c00

08000f14 <GPIOInit>:
{
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	b086      	sub	sp, #24
	for (port = 0; port < NUM_OF_GPIO; port++)
 8000f18:	2400      	movs	r4, #0
	eError 				success = RET_OK;
 8000f1a:	4626      	mov	r6, r4
	for (port = 0; port < NUM_OF_GPIO; port++)
 8000f1c:	e001      	b.n	8000f22 <GPIOInit+0xe>
 8000f1e:	3401      	adds	r4, #1
 8000f20:	b2e4      	uxtb	r4, r4
 8000f22:	2c08      	cmp	r4, #8
 8000f24:	d81b      	bhi.n	8000f5e <GPIOInit+0x4a>
		InitGPIOClock(port);
 8000f26:	4620      	mov	r0, r4
 8000f28:	f7ff ff6c 	bl	8000e04 <InitGPIOClock>
        GPIO_InitStructure.Pin =  	(uint32_t)GPIOInstanceMap[port].pin;
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <GPIOInit+0x50>)
 8000f2e:	0123      	lsls	r3, r4, #4
 8000f30:	18d5      	adds	r5, r2, r3
 8000f32:	88a9      	ldrh	r1, [r5, #4]
 8000f34:	9101      	str	r1, [sp, #4]
		GPIO_InitStructure.Mode = 	(uint32_t)GPIOInstanceMap[port].mode;
 8000f36:	68a9      	ldr	r1, [r5, #8]
 8000f38:	9102      	str	r1, [sp, #8]
		GPIO_InitStructure.Speed = 	(uint32_t)GPIOInstanceMap[port].speed;
 8000f3a:	7b29      	ldrb	r1, [r5, #12]
 8000f3c:	9104      	str	r1, [sp, #16]
		GPIO_InitStructure.Pull = 	(uint32_t)GPIOInstanceMap[port].pupd;
 8000f3e:	7b69      	ldrb	r1, [r5, #13]
 8000f40:	9103      	str	r1, [sp, #12]
		GPIO_InitStructure.Alternate = (uint32_t)GPIOInstanceMap[port].alternate;
 8000f42:	7ba9      	ldrb	r1, [r5, #14]
 8000f44:	9105      	str	r1, [sp, #20]
		HAL_GPIO_Init(GPIOInstanceMap[port].port, &GPIO_InitStructure);
 8000f46:	a901      	add	r1, sp, #4
 8000f48:	58d0      	ldr	r0, [r2, r3]
 8000f4a:	f000 fcb9 	bl	80018c0 <HAL_GPIO_Init>
		if ( GPIOInstanceMap[port].initialValue != GPIO_DEFAULT )
 8000f4e:	7be9      	ldrb	r1, [r5, #15]
 8000f50:	2903      	cmp	r1, #3
 8000f52:	d0e4      	beq.n	8000f1e <GPIOInit+0xa>
			success = GPIOWritePort(port, GPIOInstanceMap[port].initialValue);
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff ff39 	bl	8000dcc <GPIOWritePort>
 8000f5a:	4606      	mov	r6, r0
 8000f5c:	e7df      	b.n	8000f1e <GPIOInit+0xa>
}
 8000f5e:	4630      	mov	r0, r6
 8000f60:	b006      	add	sp, #24
 8000f62:	bd70      	pop	{r4, r5, r6, pc}
 8000f64:	0800388c 	.word	0x0800388c

08000f68 <interruptsInit>:
 * @brief  Init interrupts driver
 * 		   Configure all IRQ Channels declared on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsInit( void )
{
 8000f68:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 8000f6a:	2400      	movs	r4, #0
 8000f6c:	e001      	b.n	8000f72 <interruptsInit+0xa>
 8000f6e:	3401      	adds	r4, #1
 8000f70:	b2e4      	uxtb	r4, r4
 8000f72:	2c0d      	cmp	r4, #13
 8000f74:	d80c      	bhi.n	8000f90 <interruptsInit+0x28>
	{
		if (IS_SETTABLE_PRIORITY_IRQ(interruptsInstanceMap[i].IRQn))
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <interruptsInit+0x2c>)
 8000f78:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8000f7c:	f110 0f05 	cmn.w	r0, #5
 8000f80:	dbf5      	blt.n	8000f6e <interruptsInit+0x6>
		{
			HAL_NVIC_SetPriority(interruptsInstanceMap[i].IRQn, (uint32_t)interruptsInstanceMap[i].PreemptPriority, (uint32_t)interruptsInstanceMap[i].SubPriority);
 8000f82:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000f86:	789a      	ldrb	r2, [r3, #2]
 8000f88:	7859      	ldrb	r1, [r3, #1]
 8000f8a:	f000 fc09 	bl	80017a0 <HAL_NVIC_SetPriority>
 8000f8e:	e7ee      	b.n	8000f6e <interruptsInit+0x6>
		}
	}
	return result;
}
 8000f90:	2000      	movs	r0, #0
 8000f92:	bd10      	pop	{r4, pc}
 8000f94:	20000000 	.word	0x20000000

08000f98 <interruptsStart>:
 * @brief  Start interrupts driver
 * 		   Enable all IRQ Channels configured as ENABLE on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsStart( void )
{
 8000f98:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 8000f9a:	2400      	movs	r4, #0
 8000f9c:	e001      	b.n	8000fa2 <interruptsStart+0xa>
 8000f9e:	3401      	adds	r4, #1
 8000fa0:	b2e4      	uxtb	r4, r4
 8000fa2:	2c0d      	cmp	r4, #13
 8000fa4:	d80d      	bhi.n	8000fc2 <interruptsStart+0x2a>
	{
		if (interruptsInstanceMap[i].State == IRQ_ENABLE)
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <interruptsStart+0x30>)
 8000fa8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000fac:	78db      	ldrb	r3, [r3, #3]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d1f5      	bne.n	8000f9e <interruptsStart+0x6>
		{
			if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[i].IRQn))
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <interruptsStart+0x30>)
 8000fb4:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	dbf0      	blt.n	8000f9e <interruptsStart+0x6>
			{
				HAL_NVIC_EnableIRQ(interruptsInstanceMap[i].IRQn);
 8000fbc:	f000 fc22 	bl	8001804 <HAL_NVIC_EnableIRQ>
 8000fc0:	e7ed      	b.n	8000f9e <interruptsStart+0x6>

		}
	}

	return result;
}
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	bd10      	pop	{r4, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000000 	.word	0x20000000

08000fcc <interruptsEnable>:
 * @param	None.
 * @return  None.
 ****************************************************************************/
void interruptsEnable( void )
{
	if (countIrqAllDisable<=1)
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <interruptsEnable+0x24>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d906      	bls.n	8000fe4 <interruptsEnable+0x18>
		countIrqAllDisable=0;
		__enable_irq();
	}
	else
	{
		countIrqAllDisable--;
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <interruptsEnable+0x24>)
 8000fd8:	8813      	ldrh	r3, [r2, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	8013      	strh	r3, [r2, #0]
 8000fe2:	4770      	bx	lr
		countIrqAllDisable=0;
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	4b02      	ldr	r3, [pc, #8]	; (8000ff0 <interruptsEnable+0x24>)
 8000fe8:	801a      	strh	r2, [r3, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000fea:	b662      	cpsie	i
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2000006c 	.word	0x2000006c

08000ff4 <interruptsDisable>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
 * @return  None.
 ****************************************************************************/
void interruptsDisable( void )
{
	__disable_irq();
	countIrqAllDisable++;
 8000ff6:	4a03      	ldr	r2, [pc, #12]	; (8001004 <interruptsDisable+0x10>)
 8000ff8:	8813      	ldrh	r3, [r2, #0]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	8013      	strh	r3, [r2, #0]
 8001002:	4770      	bx	lr
 8001004:	2000006c 	.word	0x2000006c

08001008 <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 8001008:	4770      	bx	lr

0800100a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800100a:	e7fe      	b.n	800100a <HardFault_Handler>

0800100c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800100c:	e7fe      	b.n	800100c <MemManage_Handler>

0800100e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800100e:	e7fe      	b.n	800100e <BusFault_Handler>

08001010 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler>

08001012 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001012:	4770      	bx	lr

08001014 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001014:	4770      	bx	lr

08001016 <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 8001016:	b508      	push	{r3, lr}

	HAL_SYSTICK_IRQHandler();
 8001018:	f000 fc26 	bl	8001868 <HAL_SYSTICK_IRQHandler>
 800101c:	bd08      	pop	{r3, pc}

0800101e <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 800101e:	4770      	bx	lr

08001020 <EXTI0_IRQHandler>:
 * @brief  This function handles external line 0 and 1 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
 8001020:	4770      	bx	lr

08001022 <EXTI1_IRQHandler>:
 * @brief  This function handles external line 0 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void)
{
 8001022:	4770      	bx	lr

08001024 <EXTI9_5_IRQHandler>:
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
}

void EXTI9_5_IRQHandler(void)
{
 8001024:	b508      	push	{r3, lr}
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001026:	2020      	movs	r0, #32
 8001028:	f000 fd24 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
 800102c:	bd08      	pop	{r3, pc}

0800102e <USART1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USART1_IRQHandler(void)
{
 800102e:	b508      	push	{r3, lr}
	HAL_UART1_Callback();
 8001030:	f000 f820 	bl	8001074 <HAL_UART1_Callback>
 8001034:	bd08      	pop	{r3, pc}

08001036 <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */

void USART2_IRQHandler(void)
{
 8001036:	b508      	push	{r3, lr}
	HAL_UART2_Callback();
 8001038:	f000 f81d 	bl	8001076 <HAL_UART2_Callback>
 800103c:	bd08      	pop	{r3, pc}

0800103e <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C1_EV_IRQHandler(void)
{
 800103e:	b508      	push	{r3, lr}
	HAL_I2C1_Callback();
 8001040:	f000 f81e 	bl	8001080 <HAL_I2C1_Callback>
 8001044:	bd08      	pop	{r3, pc}

08001046 <I2C2_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C2_EV_IRQHandler(void)
{
 8001046:	b508      	push	{r3, lr}
	HAL_I2C2_Callback();
 8001048:	f000 f81b 	bl	8001082 <HAL_I2C2_Callback>
 800104c:	bd08      	pop	{r3, pc}

0800104e <SPI1_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_IRQHandler(void)
{
 800104e:	b508      	push	{r3, lr}
    HAL_SPI1_Callback();
 8001050:	f000 f818 	bl	8001084 <HAL_SPI1_Callback>
 8001054:	bd08      	pop	{r3, pc}

08001056 <SPI2_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI2_IRQHandler(void)
{
 8001056:	b508      	push	{r3, lr}
    HAL_SPI2_Callback();
 8001058:	f000 f815 	bl	8001086 <HAL_SPI2_Callback>
 800105c:	bd08      	pop	{r3, pc}

0800105e <TIM2_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 800105e:	4770      	bx	lr

08001060 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8001060:	4770      	bx	lr

08001062 <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8001062:	b508      	push	{r3, lr}
	HAL_IncTick();
 8001064:	f000 fb8e 	bl	8001784 <HAL_IncTick>

	SchedulerProcessesAutoEnable();
 8001068:	f7ff fc8e 	bl	8000988 <SchedulerProcessesAutoEnable>
#ifdef SW_TIMER_AVAILABLE
	SwTimerIrq();
 800106c:	f7ff fe22 	bl	8000cb4 <SwTimerIrq>
 8001070:	bd08      	pop	{r3, pc}

08001072 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001072:	4770      	bx	lr

08001074 <HAL_UART1_Callback>:
  * @brief UART1 callback
  * @param None
  * @retval None
  */
void HAL_UART1_Callback(void)
{
 8001074:	4770      	bx	lr

08001076 <HAL_UART2_Callback>:
  * @brief UART2 callback
  * @param None
  * @retval None
  */
void HAL_UART2_Callback(void)
{
 8001076:	b508      	push	{r3, lr}
#ifdef IS_UART2
	uartDriverMainIRQHandler(UART_2);
 8001078:	2000      	movs	r0, #0
 800107a:	f000 fa9d 	bl	80015b8 <uartDriverMainIRQHandler>
 800107e:	bd08      	pop	{r3, pc}

08001080 <HAL_I2C1_Callback>:
#endif
}


void HAL_I2C1_Callback(void)
{
 8001080:	4770      	bx	lr

08001082 <HAL_I2C2_Callback>:
	i2cDriverMainIRQHandler(I2C_1);
#endif
}

void HAL_I2C2_Callback(void)
{
 8001082:	4770      	bx	lr

08001084 <HAL_SPI1_Callback>:
	i2cDriverMainIRQHandler(I2C_2);
#endif
}

void HAL_SPI1_Callback(void)
{
 8001084:	4770      	bx	lr

08001086 <HAL_SPI2_Callback>:
    spiDriverMainIRQHandler(SPI_1);
#endif
}

void HAL_SPI2_Callback(void)
{
 8001086:	4770      	bx	lr

08001088 <storePowerUpReason>:
 *
 ****************************************************************************/
static void storePowerUpReason( void )
{
	/* Check if the StandBy flag is set */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <storePowerUpReason+0xa8>)
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001090:	d126      	bne.n	80010e0 <storePowerUpReason+0x58>

		powerUpReason = SYSTEM_RESET_POWER_UP;
	}
	else
	{
		if ( __HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET )
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <storePowerUpReason+0xac>)
 8001094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001098:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800109c:	d12f      	bne.n	80010fe <storePowerUpReason+0x76>
		{
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
		}
		else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <storePowerUpReason+0xac>)
 80010a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80010a8:	d12d      	bne.n	8001106 <storePowerUpReason+0x7e>
		{
			powerUpReason = SYSTEM_RESET_WATCHDOG;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET )
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <storePowerUpReason+0xac>)
 80010ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010b4:	d12b      	bne.n	800110e <storePowerUpReason+0x86>
		{
			powerUpReason = SYSTEM_RESET_SOFTWARE;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET )
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <storePowerUpReason+0xac>)
 80010b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010bc:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80010c0:	d129      	bne.n	8001116 <storePowerUpReason+0x8e>
		{
			powerUpReason = SYSTEM_RESET_POWER_UP;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET )
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <storePowerUpReason+0xac>)
 80010c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80010cc:	d127      	bne.n	800111e <storePowerUpReason+0x96>
		{
			powerUpReason = SYSTEM_BOR_RESET;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET )
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <storePowerUpReason+0xac>)
 80010d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db26      	blt.n	8001126 <storePowerUpReason+0x9e>
		{
			powerUpReason = SYSTEM_LOW_POWER_RESET;
		}
		else
		{
			powerUpReason = SYSTEM_FIRST_POWER_UP;
 80010d8:	2200      	movs	r2, #0
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <storePowerUpReason+0xb0>)
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e006      	b.n	80010ee <storePowerUpReason+0x66>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80010e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <storePowerUpReason+0xa8>)
 80010e6:	619a      	str	r2, [r3, #24]
		powerUpReason = SYSTEM_RESET_POWER_UP;
 80010e8:	2201      	movs	r2, #1
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <storePowerUpReason+0xb0>)
 80010ec:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <storePowerUpReason+0xac>)
 80010f0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80010f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80010fc:	4770      	bx	lr
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
 80010fe:	2207      	movs	r2, #7
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <storePowerUpReason+0xb0>)
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e7f3      	b.n	80010ee <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_WATCHDOG;
 8001106:	2202      	movs	r2, #2
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <storePowerUpReason+0xb0>)
 800110a:	701a      	strb	r2, [r3, #0]
 800110c:	e7ef      	b.n	80010ee <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_SOFTWARE;
 800110e:	2203      	movs	r2, #3
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <storePowerUpReason+0xb0>)
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e7eb      	b.n	80010ee <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_POWER_UP;
 8001116:	2201      	movs	r2, #1
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <storePowerUpReason+0xb0>)
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	e7e7      	b.n	80010ee <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_BOR_RESET;
 800111e:	2204      	movs	r2, #4
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <storePowerUpReason+0xb0>)
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e7e3      	b.n	80010ee <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_LOW_POWER_RESET;
 8001126:	2206      	movs	r2, #6
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <storePowerUpReason+0xb0>)
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e7df      	b.n	80010ee <storePowerUpReason+0x66>
 800112e:	bf00      	nop
 8001130:	40007000 	.word	0x40007000
 8001134:	40021000 	.word	0x40021000
 8001138:	2000006e 	.word	0x2000006e

0800113c <watchdogInit>:
	{
		result = WWDGInit();
	}
#endif
	return result;
}
 800113c:	2000      	movs	r0, #0
 800113e:	4770      	bx	lr

08001140 <SystemClock_Config>:
 *
 * @return  None.
 *
 ****************************************************************************/
static eError SystemClock_Config(void)
{
 8001140:	b500      	push	{lr}
 8001142:	b0b3      	sub	sp, #204	; 0xcc
	RCC_PeriphCLKInitTypeDef PeriphClkInit;
#endif

	do
	{
		RCC_OscInitStruct.OscillatorType = SystemMap.OscillatorType;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <SystemClock_Config+0xc8>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	9221      	str	r2, [sp, #132]	; 0x84
		RCC_OscInitStruct.HSEState	= SystemMap.HSEState;
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	9222      	str	r2, [sp, #136]	; 0x88
		RCC_OscInitStruct.HSICalibrationValue = SystemMap.HSICalibrationValue;
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	9225      	str	r2, [sp, #148]	; 0x94
		RCC_OscInitStruct.HSIState 	= SystemMap.HSIState;
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	9224      	str	r2, [sp, #144]	; 0x90
		RCC_OscInitStruct.LSEState = SystemMap.LSEState;
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	9223      	str	r2, [sp, #140]	; 0x8c
		RCC_OscInitStruct.LSIState = SystemMap.LSIState;
 800115a:	695a      	ldr	r2, [r3, #20]
 800115c:	9226      	str	r2, [sp, #152]	; 0x98
		RCC_OscInitStruct.MSIState = SystemMap.MSIState;
 800115e:	699a      	ldr	r2, [r3, #24]
 8001160:	9227      	str	r2, [sp, #156]	; 0x9c
		RCC_OscInitStruct.MSICalibrationValue = SystemMap.MSICalibrationValue;
 8001162:	69da      	ldr	r2, [r3, #28]
 8001164:	9228      	str	r2, [sp, #160]	; 0xa0
		RCC_OscInitStruct.MSIClockRange= SystemMap.MSIClockRange;
 8001166:	6a1a      	ldr	r2, [r3, #32]
 8001168:	9229      	str	r2, [sp, #164]	; 0xa4

		RCC_OscInitStruct.PLL.PLLState 	= SystemMap.PLLState;
 800116a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116c:	922b      	str	r2, [sp, #172]	; 0xac
		RCC_OscInitStruct.PLL.PLLSource = SystemMap.PLLSource;
 800116e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001170:	922c      	str	r2, [sp, #176]	; 0xb0
		RCC_OscInitStruct.PLL.PLLM 		= SystemMap.PLLM;
 8001172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001174:	922d      	str	r2, [sp, #180]	; 0xb4
		RCC_OscInitStruct.PLL.PLLN		= SystemMap.PLLN;
 8001176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001178:	922e      	str	r2, [sp, #184]	; 0xb8
		RCC_OscInitStruct.PLL.PLLP		= SystemMap.PLLP;
 800117a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800117c:	922f      	str	r2, [sp, #188]	; 0xbc
		RCC_OscInitStruct.PLL.PLLQ		= SystemMap.PLLQ;
 800117e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001180:	9230      	str	r2, [sp, #192]	; 0xc0
		RCC_OscInitStruct.PLL.PLLR		= SystemMap.PLLR;
 8001182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001184:	9331      	str	r3, [sp, #196]	; 0xc4
	#if (INDEPENDENT_WATCHDOG == 1)//Assure that LSI is configured ON (needed by IWDG)
		RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_LSI;
		RCC_OscInitStruct.LSIState |= RCC_LSI_ON;
	#endif

		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001186:	a821      	add	r0, sp, #132	; 0x84
 8001188:	f000 fd9a 	bl	8001cc0 <HAL_RCC_OscConfig>
 800118c:	b118      	cbz	r0, 8001196 <SystemClock_Config+0x56>
		{
			result = RET_FAIL;
 800118e:	2001      	movs	r0, #1
		__HAL_RCC_SYSCFG_CLK_ENABLE();
	} while (0);

	return result;

}
 8001190:	b033      	add	sp, #204	; 0xcc
 8001192:	f85d fb04 	ldr.w	pc, [sp], #4
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001196:	230f      	movs	r3, #15
 8001198:	931c      	str	r3, [sp, #112]	; 0x70
		RCC_ClkInitStruct.SYSCLKSource 	 = SystemMap.SYSCLKSource;
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <SystemClock_Config+0xc8>)
 800119c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800119e:	921d      	str	r2, [sp, #116]	; 0x74
		RCC_ClkInitStruct.AHBCLKDivider  = SystemMap.AHBCLKDivider;
 80011a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011a2:	921e      	str	r2, [sp, #120]	; 0x78
		RCC_ClkInitStruct.APB1CLKDivider = SystemMap.APB1CLKDivider;
 80011a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011a6:	921f      	str	r2, [sp, #124]	; 0x7c
		RCC_ClkInitStruct.APB2CLKDivider = SystemMap.APB2CLKDivider;
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	9320      	str	r3, [sp, #128]	; 0x80
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ac:	2104      	movs	r1, #4
 80011ae:	a81c      	add	r0, sp, #112	; 0x70
 80011b0:	f001 f872 	bl	8002298 <HAL_RCC_ClockConfig>
 80011b4:	b108      	cbz	r0, 80011ba <SystemClock_Config+0x7a>
			result = RET_FAIL;
 80011b6:	2001      	movs	r0, #1
 80011b8:	e7ea      	b.n	8001190 <SystemClock_Config+0x50>
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011be:	f000 fc6f 	bl	8001aa0 <HAL_PWREx_ControlVoltageScaling>
 80011c2:	b108      	cbz	r0, 80011c8 <SystemClock_Config+0x88>
			result = RET_FAIL;
 80011c4:	2001      	movs	r0, #1
 80011c6:	e7e3      	b.n	8001190 <SystemClock_Config+0x50>
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011cc:	9302      	str	r3, [sp, #8]
		PeriphClkInit.RTCClockSelection = SystemMap.RTCClockSelection;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <SystemClock_Config+0xc8>)
 80011d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011d2:	931b      	str	r3, [sp, #108]	; 0x6c
		HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80011d4:	a802      	add	r0, sp, #8
 80011d6:	f001 f9eb 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80011da:	f001 f905 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <SystemClock_Config+0xcc>)
 80011e0:	fba3 3000 	umull	r3, r0, r3, r0
 80011e4:	0980      	lsrs	r0, r0, #6
 80011e6:	f000 fb19 	bl	800181c <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80011ea:	2004      	movs	r0, #4
 80011ec:	f000 fb2c 	bl	8001848 <HAL_SYSTICK_CLKSourceConfig>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <SystemClock_Config+0xd0>)
 80011f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	661a      	str	r2, [r3, #96]	; 0x60
 80011fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	9b01      	ldr	r3, [sp, #4]
	eError result = RET_OK;
 8001204:	2000      	movs	r0, #0
 8001206:	e7c3      	b.n	8001190 <SystemClock_Config+0x50>
 8001208:	0800391c 	.word	0x0800391c
 800120c:	10624dd3 	.word	0x10624dd3
 8001210:	40021000 	.word	0x40021000

08001214 <RTCSetInitDateTime>:
{
 8001214:	b510      	push	{r4, lr}
 8001216:	b086      	sub	sp, #24
	sTime.Hours = 0x23;
 8001218:	2323      	movs	r3, #35	; 0x23
 800121a:	f88d 3004 	strb.w	r3, [sp, #4]
	sTime.Minutes = 0x59;
 800121e:	2359      	movs	r3, #89	; 0x59
 8001220:	f88d 3005 	strb.w	r3, [sp, #5]
	sTime.Seconds = 0x55;
 8001224:	2355      	movs	r3, #85	; 0x55
 8001226:	f88d 3006 	strb.w	r3, [sp, #6]
	sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	f88d 3007 	strb.w	r3, [sp, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001230:	2300      	movs	r3, #0
 8001232:	9304      	str	r3, [sp, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001234:	9305      	str	r3, [sp, #20]
	if (RTCHandler.Instance != NULL) //RTC initialized
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <RTCSetInitDateTime+0x6c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	b1f3      	cbz	r3, 800127a <RTCSetInitDateTime+0x66>
		if (HAL_RTC_SetTime(&RTCHandler, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800123c:	2201      	movs	r2, #1
 800123e:	a901      	add	r1, sp, #4
 8001240:	480f      	ldr	r0, [pc, #60]	; (8001280 <RTCSetInitDateTime+0x6c>)
 8001242:	f001 fc2e 	bl	8002aa2 <HAL_RTC_SetTime>
 8001246:	b920      	cbnz	r0, 8001252 <RTCSetInitDateTime+0x3e>
	eError result = RET_OK;
 8001248:	2400      	movs	r4, #0
		if (result == RET_OK)
 800124a:	b124      	cbz	r4, 8001256 <RTCSetInitDateTime+0x42>
}
 800124c:	4620      	mov	r0, r4
 800124e:	b006      	add	sp, #24
 8001250:	bd10      	pop	{r4, pc}
			result = RET_FAIL;
 8001252:	2401      	movs	r4, #1
 8001254:	e7f9      	b.n	800124a <RTCSetInitDateTime+0x36>
			sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001256:	2201      	movs	r2, #1
 8001258:	f88d 2000 	strb.w	r2, [sp]
			sDate.Month = RTC_MONTH_JANUARY;
 800125c:	f88d 2001 	strb.w	r2, [sp, #1]
			sDate.Date = 0x1;
 8001260:	f88d 2002 	strb.w	r2, [sp, #2]
			sDate.Year = 0x0;
 8001264:	2300      	movs	r3, #0
 8001266:	f88d 3003 	strb.w	r3, [sp, #3]
			if (HAL_RTC_SetDate(&RTCHandler, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800126a:	4669      	mov	r1, sp
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <RTCSetInitDateTime+0x6c>)
 800126e:	f001 fca0 	bl	8002bb2 <HAL_RTC_SetDate>
 8001272:	2800      	cmp	r0, #0
 8001274:	d0ea      	beq.n	800124c <RTCSetInitDateTime+0x38>
				result = RET_FAIL;
 8001276:	2401      	movs	r4, #1
 8001278:	e7e8      	b.n	800124c <RTCSetInitDateTime+0x38>
	eError result = RET_OK;
 800127a:	2400      	movs	r4, #0
 800127c:	e7e6      	b.n	800124c <RTCSetInitDateTime+0x38>
 800127e:	bf00      	nop
 8001280:	200000f8 	.word	0x200000f8

08001284 <RTCInit>:
{
 8001284:	b500      	push	{lr}
 8001286:	b083      	sub	sp, #12
	__HAL_RCC_PWR_CLK_ENABLE();
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <RTCInit+0x50>)
 800128a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800128c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001290:	659a      	str	r2, [r3, #88]	; 0x58
 8001292:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001294:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001298:	9201      	str	r2, [sp, #4]
 800129a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_RTC_ENABLE();
 800129c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80012a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	__HAL_RTC_RESET_HANDLE_STATE(&RTCHandler);
 80012a8:	480b      	ldr	r0, [pc, #44]	; (80012d8 <RTCInit+0x54>)
 80012aa:	2300      	movs	r3, #0
 80012ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	RTCHandler.Instance = RTC;
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <RTCInit+0x58>)
 80012b2:	6002      	str	r2, [r0, #0]
	RTCHandler.Init.HourFormat = RTC_HOURFORMAT_24;
 80012b4:	6043      	str	r3, [r0, #4]
	RTCHandler.Init.AsynchPrediv = 127;
 80012b6:	227f      	movs	r2, #127	; 0x7f
 80012b8:	6082      	str	r2, [r0, #8]
	RTCHandler.Init.SynchPrediv = 0xF9;//aux;
 80012ba:	22f9      	movs	r2, #249	; 0xf9
 80012bc:	60c2      	str	r2, [r0, #12]
	RTCHandler.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012be:	6103      	str	r3, [r0, #16]
	RTCHandler.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012c0:	6183      	str	r3, [r0, #24]
	RTCHandler.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012c2:	61c3      	str	r3, [r0, #28]
	HAL_RTC_Init(&RTCHandler);
 80012c4:	f001 fb78 	bl	80029b8 <HAL_RTC_Init>
	RTCSetInitDateTime();
 80012c8:	f7ff ffa4 	bl	8001214 <RTCSetInitDateTime>
}
 80012cc:	b003      	add	sp, #12
 80012ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	200000f8 	.word	0x200000f8
 80012dc:	40002800 	.word	0x40002800

080012e0 <stm32L4Init>:
{
 80012e0:	b508      	push	{r3, lr}
	storePowerUpReason();
 80012e2:	f7ff fed1 	bl	8001088 <storePowerUpReason>
	result = SystemClock_Config();
 80012e6:	f7ff ff2b 	bl	8001140 <SystemClock_Config>
	if (result == RET_OK)
 80012ea:	4603      	mov	r3, r0
 80012ec:	b108      	cbz	r0, 80012f2 <stm32L4Init+0x12>
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd08      	pop	{r3, pc}
			RTCInit();
 80012f2:	f7ff ffc7 	bl	8001284 <RTCInit>
			result = watchdogInit();
 80012f6:	f7ff ff21 	bl	800113c <watchdogInit>
 80012fa:	4603      	mov	r3, r0
 80012fc:	e7f7      	b.n	80012ee <stm32L4Init+0xe>
	...

08001300 <RTCGetTime>:
	if ((RTCHandler.Instance != NULL) && (time != NULL))
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <RTCGetTime+0x58>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b313      	cbz	r3, 800134c <RTCGetTime+0x4c>
 8001306:	b318      	cbz	r0, 8001350 <RTCGetTime+0x50>
{
 8001308:	b510      	push	{r4, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	4604      	mov	r4, r0
		if (HAL_RTC_GetTime(&RTCHandler, &sTime, RTC_FORMAT_BIN) == HAL_OK)
 800130e:	2200      	movs	r2, #0
 8001310:	a901      	add	r1, sp, #4
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <RTCGetTime+0x58>)
 8001314:	f001 fccc 	bl	8002cb0 <HAL_RTC_GetTime>
 8001318:	b110      	cbz	r0, 8001320 <RTCGetTime+0x20>
	eError result = RET_FAIL;
 800131a:	2001      	movs	r0, #1
}
 800131c:	b006      	add	sp, #24
 800131e:	bd10      	pop	{r4, pc}
			if (HAL_RTC_GetDate(&RTCHandler, &sDate, RTC_FORMAT_BIN) == HAL_OK)
 8001320:	2200      	movs	r2, #0
 8001322:	4669      	mov	r1, sp
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <RTCGetTime+0x58>)
 8001326:	f001 fcee 	bl	8002d06 <HAL_RTC_GetDate>
 800132a:	b998      	cbnz	r0, 8001354 <RTCGetTime+0x54>
				*time = MON_MAKELONG_Byte(sTime.Hours, sTime.Minutes, sTime.Seconds, (uint8_t)sTime.SubSeconds);
 800132c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001330:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001334:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8001338:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800133c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001340:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001348:	6023      	str	r3, [r4, #0]
 800134a:	e7e7      	b.n	800131c <RTCGetTime+0x1c>
	eError result = RET_FAIL;
 800134c:	2001      	movs	r0, #1
 800134e:	4770      	bx	lr
 8001350:	2001      	movs	r0, #1
 8001352:	4770      	bx	lr
 8001354:	2001      	movs	r0, #1
 8001356:	e7e1      	b.n	800131c <RTCGetTime+0x1c>
 8001358:	200000f8 	.word	0x200000f8

0800135c <RTCGetDate>:
	if ((RTCHandler.Instance != NULL) && (date != NULL))
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <RTCGetDate+0x48>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b1d3      	cbz	r3, 8001398 <RTCGetDate+0x3c>
 8001362:	b1d8      	cbz	r0, 800139c <RTCGetDate+0x40>
{
 8001364:	b510      	push	{r4, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	4604      	mov	r4, r0
		if (HAL_RTC_GetDate(&RTCHandler, &sDate, RTC_FORMAT_BIN) == HAL_OK)
 800136a:	2200      	movs	r2, #0
 800136c:	a901      	add	r1, sp, #4
 800136e:	480d      	ldr	r0, [pc, #52]	; (80013a4 <RTCGetDate+0x48>)
 8001370:	f001 fcc9 	bl	8002d06 <HAL_RTC_GetDate>
 8001374:	b9a0      	cbnz	r0, 80013a0 <RTCGetDate+0x44>
			*date = MON_MAKELONG_Byte(sDate.Year, sDate.Month, sDate.Date, sDate.WeekDay);
 8001376:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800137a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800137e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8001382:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8001386:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800138a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800138e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001392:	6023      	str	r3, [r4, #0]
}
 8001394:	b002      	add	sp, #8
 8001396:	bd10      	pop	{r4, pc}
		result = RET_FAIL;
 8001398:	2001      	movs	r0, #1
 800139a:	4770      	bx	lr
 800139c:	2001      	movs	r0, #1
 800139e:	4770      	bx	lr
			result = RET_FAIL;
 80013a0:	2001      	movs	r0, #1
 80013a2:	e7f7      	b.n	8001394 <RTCGetDate+0x38>
 80013a4:	200000f8 	.word	0x200000f8

080013a8 <systemGetCLkFreq>:
 * @brief   Get the System CLK Frequency
 * @param   ClockFrequency.
 * @return  eError.
 ****************************************************************************/
eError systemGetCLkFreq(uint32_t *ClockFrequency)
{
 80013a8:	b510      	push	{r4, lr}
 80013aa:	4604      	mov	r4, r0
    eError result = RET_OK;

    *ClockFrequency = HAL_RCC_GetHCLKFreq();
 80013ac:	f001 f81c 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 80013b0:	6020      	str	r0, [r4, #0]

    return result;
}
 80013b2:	2000      	movs	r0, #0
 80013b4:	bd10      	pop	{r4, pc}

080013b6 <systemPreConfiguration>:
 *    then it will jump to execute the interrupt handler located in the Flash
 * @param	None.
 * @return  None.
 ****************************************************************************/
void systemPreConfiguration( void )
{
 80013b6:	4770      	bx	lr

080013b8 <uartDriverWriteIT>:
 * @param	buffer to copy from
 * @param   Amount of bytes to copy
 * @return  error state.
 ****************************************************************************/
static eError uartDriverWriteIT(tUart uartPort, uint8_t* buffer, uint32_t size)
{
 80013b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	4680      	mov	r8, r0
 80013c0:	460f      	mov	r7, r1
 80013c2:	4616      	mov	r6, r2
    eError result = RET_OK;
    uint32_t i;
    uint8_t byte = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f88d 3007 	strb.w	r3, [sp, #7]

    if(GetQueueFreeBytes(&uartCBuffers[uartPort].txBuffer) < size){
 80013ca:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80013ce:	00dd      	lsls	r5, r3, #3
 80013d0:	3508      	adds	r5, #8
 80013d2:	4b14      	ldr	r3, [pc, #80]	; (8001424 <uartDriverWriteIT+0x6c>)
 80013d4:	441d      	add	r5, r3
 80013d6:	3504      	adds	r5, #4
 80013d8:	4628      	mov	r0, r5
 80013da:	f7ff fbf5 	bl	8000bc8 <GetQueueFreeBytes>
 80013de:	42b0      	cmp	r0, r6
 80013e0:	d203      	bcs.n	80013ea <uartDriverWriteIT+0x32>
        return RET_BUFFER_FULL;
 80013e2:	2008      	movs	r0, #8
    	 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPort], &byte, 1);
    }


    return result;
}
 80013e4:	b002      	add	sp, #8
 80013e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013ea:	2400      	movs	r4, #0
 80013ec:	e004      	b.n	80013f8 <uartDriverWriteIT+0x40>
        AddQueueByte(&uartCBuffers[uartPort].txBuffer, buffer[i]);
 80013ee:	5d39      	ldrb	r1, [r7, r4]
 80013f0:	4628      	mov	r0, r5
 80013f2:	f7ff fbba 	bl	8000b6a <AddQueueByte>
    for(i = 0; i < size; i++){
 80013f6:	3401      	adds	r4, #1
 80013f8:	42b4      	cmp	r4, r6
 80013fa:	d3f8      	bcc.n	80013ee <uartDriverWriteIT+0x36>
    if ( GetQueuePendingBytes(&uartCBuffers[uartPort].txBuffer) > 0)
 80013fc:	4628      	mov	r0, r5
 80013fe:	f7ff fbe1 	bl	8000bc4 <GetQueuePendingBytes>
 8001402:	b908      	cbnz	r0, 8001408 <uartDriverWriteIT+0x50>
    return result;
 8001404:	2000      	movs	r0, #0
 8001406:	e7ed      	b.n	80013e4 <uartDriverWriteIT+0x2c>
    	 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPort], &byte, 1);
 8001408:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
 800140c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001410:	2201      	movs	r2, #1
 8001412:	f10d 0107 	add.w	r1, sp, #7
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <uartDriverWriteIT+0x70>)
 8001418:	4418      	add	r0, r3
 800141a:	f001 fd0d 	bl	8002e38 <HAL_UART_Transmit_IT>
    return result;
 800141e:	2000      	movs	r0, #0
 8001420:	e7e0      	b.n	80013e4 <uartDriverWriteIT+0x2c>
 8001422:	bf00      	nop
 8001424:	2000011c 	.word	0x2000011c
 8001428:	2000013c 	.word	0x2000013c

0800142c <HAL_UART_MspInit>:
{
 800142c:	b082      	sub	sp, #8
    if(huart->Instance == USART1){
 800142e:	6803      	ldr	r3, [r0, #0]
 8001430:	4a11      	ldr	r2, [pc, #68]	; (8001478 <HAL_UART_MspInit+0x4c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d004      	beq.n	8001440 <HAL_UART_MspInit+0x14>
    else if (huart->Instance == USART2){
 8001436:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_UART_MspInit+0x50>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d00c      	beq.n	8001456 <HAL_UART_MspInit+0x2a>
}
 800143c:	b002      	add	sp, #8
 800143e:	4770      	bx	lr
        __HAL_RCC_USART1_CLK_ENABLE();
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_UART_MspInit+0x54>)
 8001442:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001448:	661a      	str	r2, [r3, #96]	; 0x60
 800144a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	9b00      	ldr	r3, [sp, #0]
 8001454:	e009      	b.n	800146a <HAL_UART_MspInit+0x3e>
        __HAL_RCC_USART2_CLK_ENABLE();
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_UART_MspInit+0x54>)
 8001458:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800145a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800145e:	659a      	str	r2, [r3, #88]	; 0x58
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	9b01      	ldr	r3, [sp, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800146a:	6802      	ldr	r2, [r0, #0]
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	f043 0320 	orr.w	r3, r3, #32
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e7e2      	b.n	800143c <HAL_UART_MspInit+0x10>
 8001476:	bf00      	nop
 8001478:	40013800 	.word	0x40013800
 800147c:	40004400 	.word	0x40004400
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_UART_MspDeInit>:
    if(huart->Instance == USART1){
 8001484:	6803      	ldr	r3, [r0, #0]
 8001486:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <HAL_UART_MspDeInit+0x38>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d003      	beq.n	8001494 <HAL_UART_MspDeInit+0x10>
    else if (huart->Instance == USART2){
 800148c:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <HAL_UART_MspDeInit+0x3c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00a      	beq.n	80014a8 <HAL_UART_MspDeInit+0x24>
 8001492:	4770      	bx	lr
        __HAL_RCC_USART1_FORCE_RESET();
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_UART_MspDeInit+0x40>)
 8001496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001498:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_RCC_USART1_RELEASE_RESET();
 800149e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
 80014a6:	4770      	bx	lr
        __HAL_RCC_USART2_FORCE_RESET();
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_UART_MspDeInit+0x40>)
 80014aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_USART2_RELEASE_RESET();
 80014b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80014b8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014ba:	e7ea      	b.n	8001492 <HAL_UART_MspDeInit+0xe>
 80014bc:	40013800 	.word	0x40013800
 80014c0:	40004400 	.word	0x40004400
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_UART_TxCpltCallback>:
{
 80014c8:	b510      	push	{r4, lr}
 80014ca:	b082      	sub	sp, #8
	if ( GetQueuePendingBytes(&uartCBuffers[uartPortIrq].txBuffer) != 0)
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_UART_TxCpltCallback+0x70>)
 80014ce:	f993 3000 	ldrsb.w	r3, [r3]
 80014d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014d6:	00d8      	lsls	r0, r3, #3
 80014d8:	3008      	adds	r0, #8
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_UART_TxCpltCallback+0x74>)
 80014dc:	4418      	add	r0, r3
 80014de:	3004      	adds	r0, #4
 80014e0:	f7ff fb70 	bl	8000bc4 <GetQueuePendingBytes>
 80014e4:	b968      	cbnz	r0, 8001502 <HAL_UART_TxCpltCallback+0x3a>
		 __HAL_UART_DISABLE_IT(&ST_UartHandlers[uartPortIrq], UART_IT_TXE);
 80014e6:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_UART_TxCpltCallback+0x70>)
 80014e8:	f993 3000 	ldrsb.w	r3, [r3]
 80014ec:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80014f0:	00da      	lsls	r2, r3, #3
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_UART_TxCpltCallback+0x78>)
 80014f4:	589a      	ldr	r2, [r3, r2]
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014fc:	6013      	str	r3, [r2, #0]
}
 80014fe:	b002      	add	sp, #8
 8001500:	bd10      	pop	{r4, pc}
		 byte = (uint8_t)(GetQueueByte(&uartCBuffers[uartPortIrq].txBuffer) & (uint8_t)0xFF);
 8001502:	4c0d      	ldr	r4, [pc, #52]	; (8001538 <HAL_UART_TxCpltCallback+0x70>)
 8001504:	f994 3000 	ldrsb.w	r3, [r4]
 8001508:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800150c:	00d8      	lsls	r0, r3, #3
 800150e:	3008      	adds	r0, #8
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_UART_TxCpltCallback+0x74>)
 8001512:	4418      	add	r0, r3
 8001514:	3004      	adds	r0, #4
 8001516:	f7ff fb3f 	bl	8000b98 <GetQueueByte>
 800151a:	a902      	add	r1, sp, #8
 800151c:	f801 0d01 	strb.w	r0, [r1, #-1]!
		 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPortIrq], &byte, 1);
 8001520:	f994 3000 	ldrsb.w	r3, [r4]
 8001524:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001528:	00d8      	lsls	r0, r3, #3
 800152a:	2201      	movs	r2, #1
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <HAL_UART_TxCpltCallback+0x78>)
 800152e:	4418      	add	r0, r3
 8001530:	f001 fc82 	bl	8002e38 <HAL_UART_Transmit_IT>
 8001534:	e7e3      	b.n	80014fe <HAL_UART_TxCpltCallback+0x36>
 8001536:	bf00      	nop
 8001538:	2000006f 	.word	0x2000006f
 800153c:	2000011c 	.word	0x2000011c
 8001540:	2000013c 	.word	0x2000013c

08001544 <HAL_UART_RxCpltCallback>:
{
 8001544:	b510      	push	{r4, lr}
 8001546:	4604      	mov	r4, r0
	muart = &UARTInstanceMap[uartPortIrq];
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_UART_RxCpltCallback+0x60>)
 800154a:	f993 2000 	ldrsb.w	r2, [r3]
	if(muart->rxCallback != NULL){
 800154e:	232c      	movs	r3, #44	; 0x2c
 8001550:	4915      	ldr	r1, [pc, #84]	; (80015a8 <HAL_UART_RxCpltCallback+0x64>)
 8001552:	fb03 1302 	mla	r3, r3, r2, r1
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	b143      	cbz	r3, 800156c <HAL_UART_RxCpltCallback+0x28>
		muart->rxCallback(byteRxBuffer);
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_UART_RxCpltCallback+0x68>)
 800155c:	7810      	ldrb	r0, [r2, #0]
 800155e:	4798      	blx	r3
	 HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8001560:	2201      	movs	r2, #1
 8001562:	4912      	ldr	r1, [pc, #72]	; (80015ac <HAL_UART_RxCpltCallback+0x68>)
 8001564:	4620      	mov	r0, r4
 8001566:	f001 fca3 	bl	8002eb0 <HAL_UART_Receive_IT>
 800156a:	bd10      	pop	{r4, pc}
		if(GetQueueFreeBytes(&uartCBuffers[uartPortIrq].rxBuffer) > 0){
 800156c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001570:	00d3      	lsls	r3, r2, #3
 8001572:	480f      	ldr	r0, [pc, #60]	; (80015b0 <HAL_UART_RxCpltCallback+0x6c>)
 8001574:	4418      	add	r0, r3
 8001576:	f7ff fb27 	bl	8000bc8 <GetQueueFreeBytes>
 800157a:	b930      	cbnz	r0, 800158a <HAL_UART_RxCpltCallback+0x46>
			uartStatus[uartPortIrq] = RET_BUFFER_FULL;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_UART_RxCpltCallback+0x60>)
 800157e:	f993 3000 	ldrsb.w	r3, [r3]
 8001582:	2108      	movs	r1, #8
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_UART_RxCpltCallback+0x70>)
 8001586:	54d1      	strb	r1, [r2, r3]
 8001588:	e7ea      	b.n	8001560 <HAL_UART_RxCpltCallback+0x1c>
			AddQueueByte(&uartCBuffers[uartPortIrq].rxBuffer, byteRxBuffer);
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_UART_RxCpltCallback+0x60>)
 800158c:	f993 3000 	ldrsb.w	r3, [r3]
 8001590:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001594:	00da      	lsls	r2, r3, #3
 8001596:	4b05      	ldr	r3, [pc, #20]	; (80015ac <HAL_UART_RxCpltCallback+0x68>)
 8001598:	7819      	ldrb	r1, [r3, #0]
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_UART_RxCpltCallback+0x6c>)
 800159c:	4410      	add	r0, r2
 800159e:	f7ff fae4 	bl	8000b6a <AddQueueByte>
 80015a2:	e7dd      	b.n	8001560 <HAL_UART_RxCpltCallback+0x1c>
 80015a4:	2000006f 	.word	0x2000006f
 80015a8:	08003970 	.word	0x08003970
 80015ac:	200001b4 	.word	0x200001b4
 80015b0:	2000011c 	.word	0x2000011c
 80015b4:	20000134 	.word	0x20000134

080015b8 <uartDriverMainIRQHandler>:
{
 80015b8:	b508      	push	{r3, lr}
    huart = &ST_UartHandlers[uartPort];
 80015ba:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 80015be:	00d3      	lsls	r3, r2, #3
    uartPortIrq = uartPort;
 80015c0:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <uartDriverMainIRQHandler+0x18>)
 80015c2:	7010      	strb	r0, [r2, #0]
    HAL_UART_IRQHandler(huart);
 80015c4:	4803      	ldr	r0, [pc, #12]	; (80015d4 <uartDriverMainIRQHandler+0x1c>)
 80015c6:	4418      	add	r0, r3
 80015c8:	f001 fd4e 	bl	8003068 <HAL_UART_IRQHandler>
 80015cc:	bd08      	pop	{r3, pc}
 80015ce:	bf00      	nop
 80015d0:	2000006f 	.word	0x2000006f
 80015d4:	2000013c 	.word	0x2000013c

080015d8 <HAL_UART_ErrorCallback>:
{
 80015d8:	4770      	bx	lr
	...

080015dc <uartInit>:
{
 80015dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i=0; i<NUM_OF_UART; i++) {
 80015de:	2400      	movs	r4, #0
 80015e0:	b10c      	cbz	r4, 80015e6 <uartInit+0xa>
}
 80015e2:	2000      	movs	r0, #0
 80015e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->Instance        = muart->port;
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <uartInit+0x68>)
 80015e8:	232c      	movs	r3, #44	; 0x2c
 80015ea:	fb03 f304 	mul.w	r3, r3, r4
 80015ee:	18d5      	adds	r5, r2, r3
 80015f0:	58d0      	ldr	r0, [r2, r3]
 80015f2:	4915      	ldr	r1, [pc, #84]	; (8001648 <uartInit+0x6c>)
 80015f4:	0123      	lsls	r3, r4, #4
 80015f6:	1b1b      	subs	r3, r3, r4
 80015f8:	00da      	lsls	r2, r3, #3
 80015fa:	188b      	adds	r3, r1, r2
 80015fc:	5088      	str	r0, [r1, r2]
        huart->Init.BaudRate   = muart->baudRate;
 80015fe:	686a      	ldr	r2, [r5, #4]
 8001600:	605a      	str	r2, [r3, #4]
        huart->Init.WordLength = muart->dataSize;
 8001602:	7a2a      	ldrb	r2, [r5, #8]
 8001604:	609a      	str	r2, [r3, #8]
        huart->Init.StopBits   = muart->stopBits;
 8001606:	7aaa      	ldrb	r2, [r5, #10]
 8001608:	60da      	str	r2, [r3, #12]
        huart->Init.Parity     = muart->parity;
 800160a:	7a6a      	ldrb	r2, [r5, #9]
 800160c:	611a      	str	r2, [r3, #16]
        huart->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
        huart->Init.Mode       = UART_MODE_TX_RX;
 8001612:	210c      	movs	r1, #12
 8001614:	6159      	str	r1, [r3, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001616:	61da      	str	r2, [r3, #28]
		CreateQueue(&uartCBuffers[i].rxBuffer,
 8001618:	0066      	lsls	r6, r4, #1
 800161a:	1933      	adds	r3, r6, r4
 800161c:	00d8      	lsls	r0, r3, #3
 800161e:	4f0b      	ldr	r7, [pc, #44]	; (800164c <uartInit+0x70>)
 8001620:	8aaa      	ldrh	r2, [r5, #20]
 8001622:	69a9      	ldr	r1, [r5, #24]
 8001624:	4438      	add	r0, r7
 8001626:	f7ff fa99 	bl	8000b5c <CreateQueue>
		CreateQueue(&uartCBuffers[i].txBuffer,
 800162a:	4426      	add	r6, r4
 800162c:	00f0      	lsls	r0, r6, #3
 800162e:	3008      	adds	r0, #8
 8001630:	4438      	add	r0, r7
 8001632:	89aa      	ldrh	r2, [r5, #12]
 8001634:	6929      	ldr	r1, [r5, #16]
 8001636:	3004      	adds	r0, #4
 8001638:	f7ff fa90 	bl	8000b5c <CreateQueue>
    for(i=0; i<NUM_OF_UART; i++) {
 800163c:	3401      	adds	r4, #1
 800163e:	b2e4      	uxtb	r4, r4
 8001640:	e7ce      	b.n	80015e0 <uartInit+0x4>
 8001642:	bf00      	nop
 8001644:	08003970 	.word	0x08003970
 8001648:	2000013c 	.word	0x2000013c
 800164c:	2000011c 	.word	0x2000011c

08001650 <uartStart>:
{
 8001650:	b538      	push	{r3, r4, r5, lr}
    for(i=0; i<NUM_OF_UART; i++){
 8001652:	2400      	movs	r4, #0
 8001654:	b10c      	cbz	r4, 800165a <uartStart+0xa>
    return result;
 8001656:	2000      	movs	r0, #0
 8001658:	bd38      	pop	{r3, r4, r5, pc}
        huart = &ST_UartHandlers[i];
 800165a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 800165e:	00dd      	lsls	r5, r3, #3
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <uartStart+0x3c>)
 8001662:	441d      	add	r5, r3
        if(HAL_UART_DeInit(huart) != HAL_OK)
 8001664:	4628      	mov	r0, r5
 8001666:	f001 fbc8 	bl	8002dfa <HAL_UART_DeInit>
 800166a:	b958      	cbnz	r0, 8001684 <uartStart+0x34>
        if(HAL_UART_Init(huart) != HAL_OK)
 800166c:	4628      	mov	r0, r5
 800166e:	f002 f86a 	bl	8003746 <HAL_UART_Init>
 8001672:	b948      	cbnz	r0, 8001688 <uartStart+0x38>
        HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8001674:	2201      	movs	r2, #1
 8001676:	4906      	ldr	r1, [pc, #24]	; (8001690 <uartStart+0x40>)
 8001678:	4628      	mov	r0, r5
 800167a:	f001 fc19 	bl	8002eb0 <HAL_UART_Receive_IT>
    for(i=0; i<NUM_OF_UART; i++){
 800167e:	3401      	adds	r4, #1
 8001680:	b2e4      	uxtb	r4, r4
 8001682:	e7e7      	b.n	8001654 <uartStart+0x4>
            return RET_FAIL;
 8001684:	2001      	movs	r0, #1
 8001686:	bd38      	pop	{r3, r4, r5, pc}
            return RET_FAIL;
 8001688:	2001      	movs	r0, #1
}
 800168a:	bd38      	pop	{r3, r4, r5, pc}
 800168c:	2000013c 	.word	0x2000013c
 8001690:	200001b4 	.word	0x200001b4

08001694 <uartDriverSetBufferSize>:
    uartBufferSize[uartPort] = bufferSize;
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <uartDriverSetBufferSize+0xc>)
 8001696:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 800169a:	2000      	movs	r0, #0
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000138 	.word	0x20000138

080016a4 <uartDriverWrite>:
 * @param	uartPort Uart port to use.
 * @param	buffer Buffer with data to send
 * @return  error state.
 ****************************************************************************/
eError uartDriverWrite(tUart uartPort, uint8_t* buffer)
{
 80016a4:	b508      	push	{r3, lr}
    eError result = RET_OK;
    uint32_t bufferSize;

    bufferSize = uartBufferSize[uartPort];
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <uartDriverWrite+0x14>)
 80016a8:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

    if(bufferSize == 0){
 80016ac:	b90a      	cbnz	r2, 80016b2 <uartDriverWrite+0xe>
        return RET_INVALID_PARAMETER;
 80016ae:	2005      	movs	r0, #5
#elif defined(MON_UART_TX_POLL)
    result = uartDriverWritePolling(uartPort, buffer, bufferSize);
#endif

    return result;
}
 80016b0:	bd08      	pop	{r3, pc}
    result = uartDriverWriteIT(uartPort, buffer, bufferSize);
 80016b2:	f7ff fe81 	bl	80013b8 <uartDriverWriteIT>
    return result;
 80016b6:	bd08      	pop	{r3, pc}
 80016b8:	20000138 	.word	0x20000138

080016bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016c2:	e003      	b.n	80016cc <LoopCopyDataInit>

080016c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016ca:	3104      	adds	r1, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016cc:	480b      	ldr	r0, [pc, #44]	; (80016fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016d4:	d3f6      	bcc.n	80016c4 <CopyDataInit>
	ldr	r2, =_sbss
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016d8:	e002      	b.n	80016e0 <LoopFillZerobss>

080016da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016dc:	f842 3b04 	str.w	r3, [r2], #4

080016e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <LoopForever+0x16>)
	cmp	r2, r3
 80016e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016e4:	d3f9      	bcc.n	80016da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016e6:	f000 f813 	bl	8001710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ea:	f002 f861 	bl	80037b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ee:	f7fe fef9 	bl	80004e4 <main>

080016f2 <LoopForever>:

LoopForever:
    b LoopForever
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016f4:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 80016f8:	080039f4 	.word	0x080039f4
	ldr	r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001700:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8001704:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8001708:	20000320 	.word	0x20000320

0800170c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_IRQHandler>
	...

08001710 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001710:	490f      	ldr	r1, [pc, #60]	; (8001750 <SystemInit+0x40>)
 8001712:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001716:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800171a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <SystemInit+0x44>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	f042 0201 	orr.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001728:	2000      	movs	r0, #0
 800172a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001732:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001736:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800173c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001744:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001746:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001748:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800174c:	608b      	str	r3, [r1, #8]
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00
 8001754:	40021000 	.word	0x40021000

08001758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b510      	push	{r4, lr}
 800175a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <HAL_InitTick+0x24>)
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <HAL_InitTick+0x28>)
 8001762:	fba3 3000 	umull	r3, r0, r3, r0
 8001766:	0980      	lsrs	r0, r0, #6
 8001768:	f000 f858 	bl	800181c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800176c:	2200      	movs	r2, #0
 800176e:	4621      	mov	r1, r4
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f000 f814 	bl	80017a0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001778:	2000      	movs	r0, #0
 800177a:	bd10      	pop	{r4, pc}
 800177c:	20000038 	.word	0x20000038
 8001780:	10624dd3 	.word	0x10624dd3

08001784 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001784:	4a02      	ldr	r2, [pc, #8]	; (8001790 <HAL_IncTick+0xc>)
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	2000031c 	.word	0x2000031c

08001794 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001794:	4b01      	ldr	r3, [pc, #4]	; (800179c <HAL_GetTick+0x8>)
 8001796:	6818      	ldr	r0, [r3, #0]
}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000031c 	.word	0x2000031c

080017a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <HAL_NVIC_SetPriority+0x5c>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017aa:	f1c3 0407 	rsb	r4, r3, #7
 80017ae:	2c04      	cmp	r4, #4
 80017b0:	bf28      	it	cs
 80017b2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b4:	1d1d      	adds	r5, r3, #4
 80017b6:	2d06      	cmp	r5, #6
 80017b8:	d917      	bls.n	80017ea <HAL_NVIC_SetPriority+0x4a>
 80017ba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	2501      	movs	r5, #1
 80017be:	fa05 f404 	lsl.w	r4, r5, r4
 80017c2:	3c01      	subs	r4, #1
 80017c4:	4021      	ands	r1, r4
 80017c6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	fa05 f303 	lsl.w	r3, r5, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80017d2:	2800      	cmp	r0, #0
 80017d4:	db0b      	blt.n	80017ee <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	0109      	lsls	r1, r1, #4
 80017d8:	b2c9      	uxtb	r1, r1
 80017da:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80017de:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80017e2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80017e6:	bc30      	pop	{r4, r5}
 80017e8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	2300      	movs	r3, #0
 80017ec:	e7e6      	b.n	80017bc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ee:	f000 000f 	and.w	r0, r0, #15
 80017f2:	0109      	lsls	r1, r1, #4
 80017f4:	b2c9      	uxtb	r1, r1
 80017f6:	4b02      	ldr	r3, [pc, #8]	; (8001800 <HAL_NVIC_SetPriority+0x60>)
 80017f8:	5419      	strb	r1, [r3, r0]
 80017fa:	e7f4      	b.n	80017e6 <HAL_NVIC_SetPriority+0x46>
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	e000ed14 	.word	0xe000ed14

08001804 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001804:	0942      	lsrs	r2, r0, #5
 8001806:	f000 001f 	and.w	r0, r0, #31
 800180a:	2301      	movs	r3, #1
 800180c:	fa03 f000 	lsl.w	r0, r3, r0
 8001810:	4b01      	ldr	r3, [pc, #4]	; (8001818 <HAL_NVIC_EnableIRQ+0x14>)
 8001812:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100

0800181c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	3801      	subs	r0, #1
 800181e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001822:	d20a      	bcs.n	800183a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_SYSTICK_Config+0x24>)
 8001826:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	21f0      	movs	r1, #240	; 0xf0
 800182a:	4a06      	ldr	r2, [pc, #24]	; (8001844 <HAL_SYSTICK_Config+0x28>)
 800182c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	2000      	movs	r0, #0
 8001832:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001848:	2804      	cmp	r0, #4
 800184a:	d005      	beq.n	8001858 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800184c:	4a05      	ldr	r2, [pc, #20]	; (8001864 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800184e:	6813      	ldr	r3, [r2, #0]
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001858:	4a02      	ldr	r2, [pc, #8]	; (8001864 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 800185a:	6813      	ldr	r3, [r2, #0]
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4770      	bx	lr
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001868:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800186a:	f7ff fbfa 	bl	8001062 <HAL_SYSTICK_Callback>
 800186e:	bd08      	pop	{r3, pc}

08001870 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001870:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001872:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d003      	beq.n	8001884 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800187c:	2304      	movs	r3, #4
 800187e:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001880:	2001      	movs	r0, #1
 8001882:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001884:	6802      	ldr	r2, [r0, #0]
 8001886:	6813      	ldr	r3, [r2, #0]
 8001888:	f023 030e 	bic.w	r3, r3, #14
 800188c:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800188e:	6802      	ldr	r2, [r0, #0]
 8001890:	6813      	ldr	r3, [r2, #0]
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001898:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800189a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800189c:	f003 031c 	and.w	r3, r3, #28
 80018a0:	2201      	movs	r2, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	604b      	str	r3, [r1, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ac:	2300      	movs	r3, #0
 80018ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018b4:	b113      	cbz	r3, 80018bc <HAL_DMA_Abort_IT+0x4c>
    {
      hdma->XferAbortCallback(hdma);
 80018b6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80018b8:	2000      	movs	r0, #0
 80018ba:	bd08      	pop	{r3, pc}
 80018bc:	2000      	movs	r0, #0
    }
  }
  return status;
}
 80018be:	bd08      	pop	{r3, pc}

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 80018c4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80018c6:	e08c      	b.n	80019e2 <HAL_GPIO_Init+0x122>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80018c8:	08de      	lsrs	r6, r3, #3
 80018ca:	3608      	adds	r6, #8
 80018cc:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80018d0:	f003 0e07 	and.w	lr, r3, #7
 80018d4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80018d8:	270f      	movs	r7, #15
 80018da:	fa07 f70e 	lsl.w	r7, r7, lr
 80018de:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80018e2:	690f      	ldr	r7, [r1, #16]
 80018e4:	fa07 f70e 	lsl.w	r7, r7, lr
 80018e8:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 80018ea:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 80018ee:	e087      	b.n	8001a00 <HAL_GPIO_Init+0x140>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80018f2:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80018f4:	68cf      	ldr	r7, [r1, #12]
 80018f6:	fa07 f70e 	lsl.w	r7, r7, lr
 80018fa:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80018fc:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fe:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001900:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001904:	684e      	ldr	r6, [r1, #4]
 8001906:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800190a:	409e      	lsls	r6, r3
 800190c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800190e:	6045      	str	r5, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001910:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001912:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001914:	688d      	ldr	r5, [r1, #8]
 8001916:	fa05 f50e 	lsl.w	r5, r5, lr
 800191a:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800191c:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191e:	684c      	ldr	r4, [r1, #4]
 8001920:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001924:	d05c      	beq.n	80019e0 <HAL_GPIO_Init+0x120>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4c4a      	ldr	r4, [pc, #296]	; (8001a50 <HAL_GPIO_Init+0x190>)
 8001928:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800192a:	f045 0501 	orr.w	r5, r5, #1
 800192e:	6625      	str	r5, [r4, #96]	; 0x60
 8001930:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8001932:	f004 0401 	and.w	r4, r4, #1
 8001936:	9401      	str	r4, [sp, #4]
 8001938:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 800193a:	089d      	lsrs	r5, r3, #2
 800193c:	1cae      	adds	r6, r5, #2
 800193e:	4c45      	ldr	r4, [pc, #276]	; (8001a54 <HAL_GPIO_Init+0x194>)
 8001940:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001944:	f003 0603 	and.w	r6, r3, #3
 8001948:	00b6      	lsls	r6, r6, #2
 800194a:	270f      	movs	r7, #15
 800194c:	40b7      	lsls	r7, r6
 800194e:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001952:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001956:	d070      	beq.n	8001a3a <HAL_GPIO_Init+0x17a>
 8001958:	4f3f      	ldr	r7, [pc, #252]	; (8001a58 <HAL_GPIO_Init+0x198>)
 800195a:	42b8      	cmp	r0, r7
 800195c:	d06f      	beq.n	8001a3e <HAL_GPIO_Init+0x17e>
 800195e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001962:	42b8      	cmp	r0, r7
 8001964:	d06d      	beq.n	8001a42 <HAL_GPIO_Init+0x182>
 8001966:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800196a:	42b8      	cmp	r0, r7
 800196c:	d06b      	beq.n	8001a46 <HAL_GPIO_Init+0x186>
 800196e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001972:	42b8      	cmp	r0, r7
 8001974:	d05f      	beq.n	8001a36 <HAL_GPIO_Init+0x176>
 8001976:	2707      	movs	r7, #7
 8001978:	fa07 f606 	lsl.w	r6, r7, r6
 800197c:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 800197e:	3502      	adds	r5, #2
 8001980:	4e34      	ldr	r6, [pc, #208]	; (8001a54 <HAL_GPIO_Init+0x194>)
 8001982:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001986:	4c35      	ldr	r4, [pc, #212]	; (8001a5c <HAL_GPIO_Init+0x19c>)
 8001988:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800198a:	43d4      	mvns	r4, r2
 800198c:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001990:	684f      	ldr	r7, [r1, #4]
 8001992:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001996:	d001      	beq.n	800199c <HAL_GPIO_Init+0xdc>
        {
          temp |= iocurrent;
 8001998:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 800199c:	4d2f      	ldr	r5, [pc, #188]	; (8001a5c <HAL_GPIO_Init+0x19c>)
 800199e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 80019a0:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 80019a2:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a6:	684f      	ldr	r7, [r1, #4]
 80019a8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80019ac:	d001      	beq.n	80019b2 <HAL_GPIO_Init+0xf2>
        {
          temp |= iocurrent;
 80019ae:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 80019b2:	4d2a      	ldr	r5, [pc, #168]	; (8001a5c <HAL_GPIO_Init+0x19c>)
 80019b4:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b6:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019bc:	684f      	ldr	r7, [r1, #4]
 80019be:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80019c2:	d001      	beq.n	80019c8 <HAL_GPIO_Init+0x108>
        {
          temp |= iocurrent;
 80019c4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80019c8:	4d24      	ldr	r5, [pc, #144]	; (8001a5c <HAL_GPIO_Init+0x19c>)
 80019ca:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 80019cc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d0:	684e      	ldr	r6, [r1, #4]
 80019d2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80019d6:	d001      	beq.n	80019dc <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 80019d8:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 80019dc:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_GPIO_Init+0x19c>)
 80019de:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80019e0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80019e2:	680a      	ldr	r2, [r1, #0]
 80019e4:	fa32 f403 	lsrs.w	r4, r2, r3
 80019e8:	d02f      	beq.n	8001a4a <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019ea:	2501      	movs	r5, #1
 80019ec:	409d      	lsls	r5, r3
    if(iocurrent)
 80019ee:	402a      	ands	r2, r5
 80019f0:	d0f6      	beq.n	80019e0 <HAL_GPIO_Init+0x120>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f2:	684c      	ldr	r4, [r1, #4]
 80019f4:	2c02      	cmp	r4, #2
 80019f6:	f43f af67 	beq.w	80018c8 <HAL_GPIO_Init+0x8>
 80019fa:	2c12      	cmp	r4, #18
 80019fc:	f43f af64 	beq.w	80018c8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8001a00:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8001a02:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001a06:	2403      	movs	r4, #3
 8001a08:	fa04 f40e 	lsl.w	r4, r4, lr
 8001a0c:	43e4      	mvns	r4, r4
 8001a0e:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a10:	684f      	ldr	r7, [r1, #4]
 8001a12:	f007 0703 	and.w	r7, r7, #3
 8001a16:	fa07 f70e 	lsl.w	r7, r7, lr
 8001a1a:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8001a1c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a1e:	684e      	ldr	r6, [r1, #4]
 8001a20:	1e77      	subs	r7, r6, #1
 8001a22:	2f01      	cmp	r7, #1
 8001a24:	f67f af64 	bls.w	80018f0 <HAL_GPIO_Init+0x30>
 8001a28:	2e11      	cmp	r6, #17
 8001a2a:	f43f af61 	beq.w	80018f0 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a2e:	2e12      	cmp	r6, #18
 8001a30:	f47f af6e 	bne.w	8001910 <HAL_GPIO_Init+0x50>
 8001a34:	e75c      	b.n	80018f0 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001a36:	2704      	movs	r7, #4
 8001a38:	e79e      	b.n	8001978 <HAL_GPIO_Init+0xb8>
 8001a3a:	2700      	movs	r7, #0
 8001a3c:	e79c      	b.n	8001978 <HAL_GPIO_Init+0xb8>
 8001a3e:	2701      	movs	r7, #1
 8001a40:	e79a      	b.n	8001978 <HAL_GPIO_Init+0xb8>
 8001a42:	2702      	movs	r7, #2
 8001a44:	e798      	b.n	8001978 <HAL_GPIO_Init+0xb8>
 8001a46:	2703      	movs	r7, #3
 8001a48:	e796      	b.n	8001978 <HAL_GPIO_Init+0xb8>
  }
}
 8001a4a:	b003      	add	sp, #12
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000
 8001a58:	48000400 	.word	0x48000400
 8001a5c:	40010400 	.word	0x40010400

08001a60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a60:	b90a      	cbnz	r2, 8001a66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a62:	6281      	str	r1, [r0, #40]	; 0x28
 8001a64:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a66:	6181      	str	r1, [r0, #24]
 8001a68:	4770      	bx	lr

08001a6a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001a6a:	6943      	ldr	r3, [r0, #20]
 8001a6c:	4059      	eors	r1, r3
 8001a6e:	6141      	str	r1, [r0, #20]
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a74:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	4203      	tst	r3, r0
 8001a7c:	d100      	bne.n	8001a80 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8001a7e:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001a82:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a84:	f7ff faf5 	bl	8001072 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a88:	e7f9      	b.n	8001a7e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001a8a:	bf00      	nop
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a90:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <HAL_PWREx_GetVoltageRange+0xc>)
 8001a92:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001a94:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40007000 	.word	0x40007000

08001aa0 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001aa4:	d00f      	beq.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab2:	d037      	beq.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x84>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ab4:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad2:	d023      	beq.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x7c>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad4:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001ad6:	6813      	ldr	r3, [r2, #0]
 8001ad8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae0:	6013      	str	r3, [r2, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8001aea:	f502 325b 	add.w	r2, r2, #224256	; 0x36c00
 8001aee:	f202 2283 	addw	r2, r2, #643	; 0x283
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9a      	lsrs	r2, r3, #18
 8001af8:	2332      	movs	r3, #50	; 0x32
 8001afa:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001afe:	e000      	b.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x62>
        wait_loop_index--;
 8001b00:	3b01      	subs	r3, #1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001b02:	b123      	cbz	r3, 8001b0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b04:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001b06:	6952      	ldr	r2, [r2, #20]
 8001b08:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001b0c:	d1f8      	bne.n	8001b00 <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001b16:	d003      	beq.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0x80>
        return HAL_TIMEOUT;
 8001b18:	2003      	movs	r0, #3
 8001b1a:	4770      	bx	lr
  return HAL_OK;
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	4770      	bx	lr
 8001b20:	2000      	movs	r0, #0
 8001b22:	4770      	bx	lr
 8001b24:	2000      	movs	r0, #0
}  
 8001b26:	4770      	bx	lr
 8001b28:	40007000 	.word	0x40007000
 8001b2c:	20000038 	.word	0x20000038

08001b30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b30:	b530      	push	{r4, r5, lr}
 8001b32:	b083      	sub	sp, #12
 8001b34:	4605      	mov	r5, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001b3e:	d00b      	beq.n	8001b58 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b40:	f7ff ffa6 	bl	8001a90 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b44:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001b48:	d017      	beq.n	8001b7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b4a:	2d80      	cmp	r5, #128	; 0x80
 8001b4c:	d81f      	bhi.n	8001b8e <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b4e:	d02d      	beq.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b50:	2d70      	cmp	r5, #112	; 0x70
 8001b52:	d02d      	beq.n	8001bb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b54:	2100      	movs	r1, #0
 8001b56:	e01b      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	4c17      	ldr	r4, [pc, #92]	; (8001bb8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8001b5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b60:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001b6c:	f7ff ff90 	bl	8001a90 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b76:	65a3      	str	r3, [r4, #88]	; 0x58
 8001b78:	e7e4      	b.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8001b7a:	2d80      	cmp	r5, #128	; 0x80
 8001b7c:	d903      	bls.n	8001b86 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8001b7e:	2da0      	cmp	r5, #160	; 0xa0
 8001b80:	d903      	bls.n	8001b8a <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b82:	2102      	movs	r1, #2
 8001b84:	e004      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b86:	2100      	movs	r1, #0
 8001b88:	e002      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	e000      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b8e:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b90:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8001b92:	6813      	ldr	r3, [r2, #0]
 8001b94:	f023 0307 	bic.w	r3, r3, #7
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	4299      	cmp	r1, r3
 8001ba4:	d006      	beq.n	8001bb4 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8001ba6:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8001ba8:	b003      	add	sp, #12
 8001baa:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bac:	2102      	movs	r1, #2
 8001bae:	e7ef      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	e7ed      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	e7f7      	b.n	8001ba8 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40022000 	.word	0x40022000

08001bc0 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f013 0f0c 	tst.w	r3, #12
 8001bc8:	d01a      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x40>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001bca:	4b39      	ldr	r3, [pc, #228]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d00e      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x34>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bd6:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d02f      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0x82>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001be2:	4b33      	ldr	r3, [pc, #204]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d02c      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001bee:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001bf0:	4601      	mov	r1, r0
 8001bf2:	e018      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x66>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001bf4:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d1ea      	bne.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x16>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f013 0f08 	tst.w	r3, #8
 8001c08:	d114      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0x74>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c10:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 8001c14:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001c1a:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f013 0f0c 	tst.w	r3, #12
 8001c22:	d00c      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x7e>
  uint32_t sysclockfreq = 0U;
 8001c24:	2000      	movs	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c26:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c28:	6893      	ldr	r3, [r2, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d00d      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x8e>
}
 8001c32:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c3c:	e7ea      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = msirange;
 8001c3e:	4608      	mov	r0, r1
 8001c40:	e7f1      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSI_VALUE;
 8001c42:	481d      	ldr	r0, [pc, #116]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001c44:	2100      	movs	r1, #0
 8001c46:	e7ee      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSE_VALUE;
 8001c48:	481c      	ldr	r0, [pc, #112]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xfc>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	e7eb      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c4e:	4613      	mov	r3, r2
 8001c50:	68d2      	ldr	r2, [r2, #12]
 8001c52:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001c5c:	3301      	adds	r3, #1
    switch (pllsource)
 8001c5e:	2a02      	cmp	r2, #2
 8001c60:	d00a      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0xb8>
 8001c62:	2a03      	cmp	r2, #3
 8001c64:	d01a      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0xdc>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6a:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c6c:	68d0      	ldr	r0, [r2, #12]
 8001c6e:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001c72:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0xca>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c78:	480f      	ldr	r0, [pc, #60]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c80:	68d0      	ldr	r0, [r2, #12]
 8001c82:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001c86:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001c92:	3301      	adds	r3, #1
 8001c94:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001c96:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8001c9a:	e7ca      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x72>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c9c:	4807      	ldr	r0, [pc, #28]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca2:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ca4:	68d0      	ldr	r0, [r2, #12]
 8001ca6:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001caa:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8001cae:	e7ec      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0xca>
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	080039b4 	.word	0x080039b4
 8001cb8:	00f42400 	.word	0x00f42400
 8001cbc:	007a1200 	.word	0x007a1200

08001cc0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	f000 82d7 	beq.w	8002274 <HAL_RCC_OscConfig+0x5b4>
{
 8001cc6:	b570      	push	{r4, r5, r6, lr}
 8001cc8:	b082      	sub	sp, #8
 8001cca:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ccc:	6803      	ldr	r3, [r0, #0]
 8001cce:	f013 0f10 	tst.w	r3, #16
 8001cd2:	d03f      	beq.n	8001d54 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001cd4:	4b97      	ldr	r3, [pc, #604]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f013 0f0c 	tst.w	r3, #12
 8001cdc:	f040 8092 	bne.w	8001e04 <HAL_RCC_OscConfig+0x144>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ce0:	4b94      	ldr	r3, [pc, #592]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f013 0f02 	tst.w	r3, #2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x32>
 8001cea:	6983      	ldr	r3, [r0, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 82c3 	beq.w	8002278 <HAL_RCC_OscConfig+0x5b8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cf2:	6a20      	ldr	r0, [r4, #32]
 8001cf4:	4b8f      	ldr	r3, [pc, #572]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f013 0f08 	tst.w	r3, #8
 8001cfc:	d062      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x104>
 8001cfe:	4b8d      	ldr	r3, [pc, #564]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d06:	4283      	cmp	r3, r0
 8001d08:	d263      	bcs.n	8001dd2 <HAL_RCC_OscConfig+0x112>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d0a:	f7ff ff11 	bl	8001b30 <RCC_SetFlashLatencyFromMSIRange>
 8001d0e:	2800      	cmp	r0, #0
 8001d10:	f040 82b4 	bne.w	800227c <HAL_RCC_OscConfig+0x5bc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d14:	4b87      	ldr	r3, [pc, #540]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	f042 0208 	orr.w	r2, r2, #8
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d24:	6a21      	ldr	r1, [r4, #32]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001d30:	69e1      	ldr	r1, [r4, #28]
 8001d32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d36:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d38:	f7ff ff42 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001d3c:	4b7d      	ldr	r3, [pc, #500]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d44:	4a7c      	ldr	r2, [pc, #496]	; (8001f38 <HAL_RCC_OscConfig+0x278>)
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	40d8      	lsrs	r0, r3
 8001d4a:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff fd02 	bl	8001758 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	f013 0f01 	tst.w	r3, #1
 8001d5a:	f000 80a1 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x1e0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001d5e:	4b75      	ldr	r3, [pc, #468]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	f000 8091 	beq.w	8001e8e <HAL_RCC_OscConfig+0x1ce>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d6c:	4b71      	ldr	r3, [pc, #452]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	f000 8083 	beq.w	8001e80 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7a:	6863      	ldr	r3, [r4, #4]
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	f000 80b5 	beq.w	8001eee <HAL_RCC_OscConfig+0x22e>
 8001d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d88:	f000 80b7 	beq.w	8001efa <HAL_RCC_OscConfig+0x23a>
 8001d8c:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d9c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9e:	6863      	ldr	r3, [r4, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80b7 	beq.w	8001f14 <HAL_RCC_OscConfig+0x254>
        tickstart = HAL_GetTick();
 8001da6:	f7ff fcf5 	bl	8001794 <HAL_GetTick>
 8001daa:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001dac:	4b61      	ldr	r3, [pc, #388]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001db4:	d174      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db6:	f7ff fced 	bl	8001794 <HAL_GetTick>
 8001dba:	1b40      	subs	r0, r0, r5
 8001dbc:	2864      	cmp	r0, #100	; 0x64
 8001dbe:	d9f5      	bls.n	8001dac <HAL_RCC_OscConfig+0xec>
            return HAL_TIMEOUT;
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	e262      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dc4:	4b5b      	ldr	r3, [pc, #364]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd0:	e799      	b.n	8001d06 <HAL_RCC_OscConfig+0x46>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd2:	4b58      	ldr	r3, [pc, #352]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	f042 0208 	orr.w	r2, r2, #8
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001de2:	6a21      	ldr	r1, [r4, #32]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001dee:	69e1      	ldr	r1, [r4, #28]
 8001df0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001df4:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001df6:	6a20      	ldr	r0, [r4, #32]
 8001df8:	f7ff fe9a 	bl	8001b30 <RCC_SetFlashLatencyFromMSIRange>
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	d09b      	beq.n	8001d38 <HAL_RCC_OscConfig+0x78>
            return HAL_ERROR;
 8001e00:	2001      	movs	r0, #1
 8001e02:	e242      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e04:	6983      	ldr	r3, [r0, #24]
 8001e06:	b333      	cbz	r3, 8001e56 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_MSI_ENABLE();
 8001e08:	4a4a      	ldr	r2, [pc, #296]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001e0a:	6813      	ldr	r3, [r2, #0]
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e12:	f7ff fcbf 	bl	8001794 <HAL_GetTick>
 8001e16:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001e18:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f013 0f02 	tst.w	r3, #2
 8001e20:	d106      	bne.n	8001e30 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e22:	f7ff fcb7 	bl	8001794 <HAL_GetTick>
 8001e26:	1b40      	subs	r0, r0, r5
 8001e28:	2802      	cmp	r0, #2
 8001e2a:	d9f5      	bls.n	8001e18 <HAL_RCC_OscConfig+0x158>
            return HAL_TIMEOUT;
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	e22c      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e30:	4b40      	ldr	r3, [pc, #256]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	f042 0208 	orr.w	r2, r2, #8
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e40:	6a21      	ldr	r1, [r4, #32]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001e4c:	69e1      	ldr	r1, [r4, #28]
 8001e4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	e77e      	b.n	8001d54 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_MSI_DISABLE();
 8001e56:	4a37      	ldr	r2, [pc, #220]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001e58:	6813      	ldr	r3, [r2, #0]
 8001e5a:	f023 0301 	bic.w	r3, r3, #1
 8001e5e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e60:	f7ff fc98 	bl	8001794 <HAL_GetTick>
 8001e64:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001e66:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f013 0f02 	tst.w	r3, #2
 8001e6e:	f43f af71 	beq.w	8001d54 <HAL_RCC_OscConfig+0x94>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e72:	f7ff fc8f 	bl	8001794 <HAL_GetTick>
 8001e76:	1b40      	subs	r0, r0, r5
 8001e78:	2802      	cmp	r0, #2
 8001e7a:	d9f4      	bls.n	8001e66 <HAL_RCC_OscConfig+0x1a6>
            return HAL_TIMEOUT;
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	e204      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e80:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	f47f af76 	bne.w	8001d7a <HAL_RCC_OscConfig+0xba>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e96:	d003      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x1e0>
 8001e98:	6863      	ldr	r3, [r4, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 81f0 	beq.w	8002280 <HAL_RCC_OscConfig+0x5c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	f013 0f02 	tst.w	r3, #2
 8001ea6:	d062      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2ae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d04b      	beq.n	8001f4c <HAL_RCC_OscConfig+0x28c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d03f      	beq.n	8001f40 <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec0:	68e3      	ldr	r3, [r4, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d079      	beq.n	8001fba <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_HSI_ENABLE();
 8001ec6:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	6813      	ldr	r3, [r2, #0]
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fc60 	bl	8001794 <HAL_GetTick>
 8001ed4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001ede:	d163      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x2e8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fc58 	bl	8001794 <HAL_GetTick>
 8001ee4:	1b40      	subs	r0, r0, r5
 8001ee6:	2802      	cmp	r0, #2
 8001ee8:	d9f5      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8001eea:	2003      	movs	r0, #3
 8001eec:	e1cd      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eee:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e751      	b.n	8001d9e <HAL_RCC_OscConfig+0xde>
 8001efa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001efe:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e744      	b.n	8001d9e <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 8001f14:	f7ff fc3e 	bl	8001794 <HAL_GetTick>
 8001f18:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f22:	d0bd      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fc36 	bl	8001794 <HAL_GetTick>
 8001f28:	1b40      	subs	r0, r0, r5
 8001f2a:	2864      	cmp	r0, #100	; 0x64
 8001f2c:	d9f5      	bls.n	8001f1a <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8001f2e:	2003      	movs	r0, #3
 8001f30:	e1ab      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	0800399c 	.word	0x0800399c
 8001f3c:	20000038 	.word	0x20000038
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f40:	4bb1      	ldr	r3, [pc, #708]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d1b9      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x200>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f4c:	4bae      	ldr	r3, [pc, #696]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_OscConfig+0x29e>
 8001f56:	68e3      	ldr	r3, [r4, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8193 	beq.w	8002284 <HAL_RCC_OscConfig+0x5c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4aaa      	ldr	r2, [pc, #680]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8001f60:	6853      	ldr	r3, [r2, #4]
 8001f62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001f66:	6921      	ldr	r1, [r4, #16]
 8001f68:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001f6c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	f013 0f08 	tst.w	r3, #8
 8001f74:	d04c      	beq.n	8002010 <HAL_RCC_OscConfig+0x350>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f76:	6963      	ldr	r3, [r4, #20]
 8001f78:	b39b      	cbz	r3, 8001fe2 <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_LSI_ENABLE();
 8001f7a:	4aa3      	ldr	r2, [pc, #652]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8001f7c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f88:	f7ff fc04 	bl	8001794 <HAL_GetTick>
 8001f8c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001f8e:	4b9e      	ldr	r3, [pc, #632]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8001f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f94:	f013 0f02 	tst.w	r3, #2
 8001f98:	d13a      	bne.n	8002010 <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fbfb 	bl	8001794 <HAL_GetTick>
 8001f9e:	1b40      	subs	r0, r0, r5
 8001fa0:	2802      	cmp	r0, #2
 8001fa2:	d9f4      	bls.n	8001f8e <HAL_RCC_OscConfig+0x2ce>
          return HAL_TIMEOUT;
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	e170      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4a97      	ldr	r2, [pc, #604]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8001faa:	6853      	ldr	r3, [r2, #4]
 8001fac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001fb0:	6921      	ldr	r1, [r4, #16]
 8001fb2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001fb6:	6053      	str	r3, [r2, #4]
 8001fb8:	e7d9      	b.n	8001f6e <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_HSI_DISABLE();
 8001fba:	4a93      	ldr	r2, [pc, #588]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8001fbc:	6813      	ldr	r3, [r2, #0]
 8001fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fbe6 	bl	8001794 <HAL_GetTick>
 8001fc8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001fca:	4b8f      	ldr	r3, [pc, #572]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001fd2:	d0cc      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2ae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fbde 	bl	8001794 <HAL_GetTick>
 8001fd8:	1b40      	subs	r0, r0, r5
 8001fda:	2802      	cmp	r0, #2
 8001fdc:	d9f5      	bls.n	8001fca <HAL_RCC_OscConfig+0x30a>
            return HAL_TIMEOUT;
 8001fde:	2003      	movs	r0, #3
 8001fe0:	e153      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_LSI_DISABLE();
 8001fe2:	4a89      	ldr	r2, [pc, #548]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8001fe4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fbd0 	bl	8001794 <HAL_GetTick>
 8001ff4:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001ff6:	4b84      	ldr	r3, [pc, #528]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8001ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffc:	f013 0f02 	tst.w	r3, #2
 8002000:	d006      	beq.n	8002010 <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002002:	f7ff fbc7 	bl	8001794 <HAL_GetTick>
 8002006:	1b40      	subs	r0, r0, r5
 8002008:	2802      	cmp	r0, #2
 800200a:	d9f4      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x336>
          return HAL_TIMEOUT;
 800200c:	2003      	movs	r0, #3
 800200e:	e13c      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	f013 0f04 	tst.w	r3, #4
 8002016:	d07a      	beq.n	800210e <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002018:	4b7b      	ldr	r3, [pc, #492]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002020:	d136      	bne.n	8002090 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	4b79      	ldr	r3, [pc, #484]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8002024:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002026:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800202a:	659a      	str	r2, [r3, #88]	; 0x58
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002036:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002038:	4b74      	ldr	r3, [pc, #464]	; (800220c <HAL_RCC_OscConfig+0x54c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002040:	d028      	beq.n	8002094 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002042:	68a3      	ldr	r3, [r4, #8]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d039      	beq.n	80020bc <HAL_RCC_OscConfig+0x3fc>
 8002048:	2b05      	cmp	r3, #5
 800204a:	d03f      	beq.n	80020cc <HAL_RCC_OscConfig+0x40c>
 800204c:	4b6e      	ldr	r3, [pc, #440]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 800204e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800205a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800205e:	f022 0204 	bic.w	r2, r2, #4
 8002062:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002066:	68a3      	ldr	r3, [r4, #8]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d03d      	beq.n	80020e8 <HAL_RCC_OscConfig+0x428>
      tickstart = HAL_GetTick();
 800206c:	f7ff fb92 	bl	8001794 <HAL_GetTick>
 8002070:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002072:	4b65      	ldr	r3, [pc, #404]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f013 0f02 	tst.w	r3, #2
 800207c:	d146      	bne.n	800210c <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7ff fb89 	bl	8001794 <HAL_GetTick>
 8002082:	1b80      	subs	r0, r0, r6
 8002084:	f241 3388 	movw	r3, #5000	; 0x1388
 8002088:	4298      	cmp	r0, r3
 800208a:	d9f2      	bls.n	8002072 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 800208c:	2003      	movs	r0, #3
 800208e:	e0fc      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
    FlagStatus       pwrclkchanged = RESET;
 8002090:	2500      	movs	r5, #0
 8002092:	e7d1      	b.n	8002038 <HAL_RCC_OscConfig+0x378>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002094:	4a5d      	ldr	r2, [pc, #372]	; (800220c <HAL_RCC_OscConfig+0x54c>)
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800209e:	f7ff fb79 	bl	8001794 <HAL_GetTick>
 80020a2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a4:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_RCC_OscConfig+0x54c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80020ac:	d1c9      	bne.n	8002042 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ae:	f7ff fb71 	bl	8001794 <HAL_GetTick>
 80020b2:	1b80      	subs	r0, r0, r6
 80020b4:	2802      	cmp	r0, #2
 80020b6:	d9f5      	bls.n	80020a4 <HAL_RCC_OscConfig+0x3e4>
          return HAL_TIMEOUT;
 80020b8:	2003      	movs	r0, #3
 80020ba:	e0e6      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020bc:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 80020be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ca:	e7cc      	b.n	8002066 <HAL_RCC_OscConfig+0x3a6>
 80020cc:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 80020ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80020d2:	f042 0204 	orr.w	r2, r2, #4
 80020d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80020da:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80020e6:	e7be      	b.n	8002066 <HAL_RCC_OscConfig+0x3a6>
      tickstart = HAL_GetTick();
 80020e8:	f7ff fb54 	bl	8001794 <HAL_GetTick>
 80020ec:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80020ee:	4b46      	ldr	r3, [pc, #280]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f013 0f02 	tst.w	r3, #2
 80020f8:	d008      	beq.n	800210c <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff fb4b 	bl	8001794 <HAL_GetTick>
 80020fe:	1b80      	subs	r0, r0, r6
 8002100:	f241 3388 	movw	r3, #5000	; 0x1388
 8002104:	4298      	cmp	r0, r3
 8002106:	d9f2      	bls.n	80020ee <HAL_RCC_OscConfig+0x42e>
          return HAL_TIMEOUT;
 8002108:	2003      	movs	r0, #3
 800210a:	e0be      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
    if(pwrclkchanged == SET)
 800210c:	b9e5      	cbnz	r5, 8002148 <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	f013 0f20 	tst.w	r3, #32
 8002114:	d035      	beq.n	8002182 <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002118:	b1e3      	cbz	r3, 8002154 <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 800211a:	4a3b      	ldr	r2, [pc, #236]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 800211c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002128:	f7ff fb34 	bl	8001794 <HAL_GetTick>
 800212c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8002130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002134:	f013 0f02 	tst.w	r3, #2
 8002138:	d123      	bne.n	8002182 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800213a:	f7ff fb2b 	bl	8001794 <HAL_GetTick>
 800213e:	1b40      	subs	r0, r0, r5
 8002140:	2802      	cmp	r0, #2
 8002142:	d9f4      	bls.n	800212e <HAL_RCC_OscConfig+0x46e>
          return HAL_TIMEOUT;
 8002144:	2003      	movs	r0, #3
 8002146:	e0a0      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002148:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 800214a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800214c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002150:	6593      	str	r3, [r2, #88]	; 0x58
 8002152:	e7dc      	b.n	800210e <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 8002154:	4a2c      	ldr	r2, [pc, #176]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 8002156:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002162:	f7ff fb17 	bl	8001794 <HAL_GetTick>
 8002166:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 800216a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800216e:	f013 0f02 	tst.w	r3, #2
 8002172:	d006      	beq.n	8002182 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002174:	f7ff fb0e 	bl	8001794 <HAL_GetTick>
 8002178:	1b40      	subs	r0, r0, r5
 800217a:	2802      	cmp	r0, #2
 800217c:	d9f4      	bls.n	8002168 <HAL_RCC_OscConfig+0x4a8>
          return HAL_TIMEOUT;
 800217e:	2003      	movs	r0, #3
 8002180:	e083      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002182:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	d07f      	beq.n	8002288 <HAL_RCC_OscConfig+0x5c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002188:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 800218a:	6892      	ldr	r2, [r2, #8]
 800218c:	f002 020c 	and.w	r2, r2, #12
 8002190:	2a0c      	cmp	r2, #12
 8002192:	d07c      	beq.n	800228e <HAL_RCC_OscConfig+0x5ce>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002194:	2b02      	cmp	r3, #2
 8002196:	d023      	beq.n	80021e0 <HAL_RCC_OscConfig+0x520>
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80021a0:	601a      	str	r2, [r3, #0]
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80021a8:	d104      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4f4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 80021ac:	68d3      	ldr	r3, [r2, #12]
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80021b4:	4a14      	ldr	r2, [pc, #80]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 80021b6:	68d3      	ldr	r3, [r2, #12]
 80021b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80021c2:	f7ff fae7 	bl	8001794 <HAL_GetTick>
 80021c6:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021d0:	d04e      	beq.n	8002270 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7ff fadf 	bl	8001794 <HAL_GetTick>
 80021d6:	1b00      	subs	r0, r0, r4
 80021d8:	2802      	cmp	r0, #2
 80021da:	d9f5      	bls.n	80021c8 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80021dc:	2003      	movs	r0, #3
 80021de:	e054      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_PLL_DISABLE();
 80021e0:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 80021e2:	6813      	ldr	r3, [r2, #0]
 80021e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80021ea:	f7ff fad3 	bl	8001794 <HAL_GetTick>
 80021ee:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_OscConfig+0x548>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80021f8:	d00a      	beq.n	8002210 <HAL_RCC_OscConfig+0x550>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fa:	f7ff facb 	bl	8001794 <HAL_GetTick>
 80021fe:	1b40      	subs	r0, r0, r5
 8002200:	2802      	cmp	r0, #2
 8002202:	d9f5      	bls.n	80021f0 <HAL_RCC_OscConfig+0x530>
            return HAL_TIMEOUT;
 8002204:	2003      	movs	r0, #3
 8002206:	e040      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
 8002208:	40021000 	.word	0x40021000
 800220c:	40007000 	.word	0x40007000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002210:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002212:	1e5a      	subs	r2, r3, #1
 8002214:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800221c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800221e:	4313      	orrs	r3, r2
 8002220:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002222:	0852      	lsrs	r2, r2, #1
 8002224:	3a01      	subs	r2, #1
 8002226:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800222a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800222c:	0852      	lsrs	r2, r2, #1
 800222e:	3a01      	subs	r2, #1
 8002230:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002234:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002236:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800223a:	4a16      	ldr	r2, [pc, #88]	; (8002294 <HAL_RCC_OscConfig+0x5d4>)
 800223c:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800223e:	6813      	ldr	r3, [r2, #0]
 8002240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002244:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002246:	68d3      	ldr	r3, [r2, #12]
 8002248:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224c:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800224e:	f7ff faa1 	bl	8001794 <HAL_GetTick>
 8002252:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <HAL_RCC_OscConfig+0x5d4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800225c:	d106      	bne.n	800226c <HAL_RCC_OscConfig+0x5ac>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225e:	f7ff fa99 	bl	8001794 <HAL_GetTick>
 8002262:	1b00      	subs	r0, r0, r4
 8002264:	2802      	cmp	r0, #2
 8002266:	d9f5      	bls.n	8002254 <HAL_RCC_OscConfig+0x594>
            return HAL_TIMEOUT;
 8002268:	2003      	movs	r0, #3
 800226a:	e00e      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 800226c:	2000      	movs	r0, #0
 800226e:	e00c      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
 8002270:	2000      	movs	r0, #0
 8002272:	e00a      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
    return HAL_ERROR;
 8002274:	2001      	movs	r0, #1
 8002276:	4770      	bx	lr
        return HAL_ERROR;
 8002278:	2001      	movs	r0, #1
 800227a:	e006      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
            return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
 800227e:	e004      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8002280:	2001      	movs	r0, #1
 8002282:	e002      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8002284:	2001      	movs	r0, #1
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 8002288:	2000      	movs	r0, #0
}
 800228a:	b002      	add	sp, #8
 800228c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800228e:	2001      	movs	r0, #1
 8002290:	e7fb      	b.n	800228a <HAL_RCC_OscConfig+0x5ca>
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002298:	2800      	cmp	r0, #0
 800229a:	f000 8099 	beq.w	80023d0 <HAL_RCC_ClockConfig+0x138>
{
 800229e:	b570      	push	{r4, r5, r6, lr}
 80022a0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a2:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <HAL_RCC_ClockConfig+0x140>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	428b      	cmp	r3, r1
 80022ac:	d20c      	bcs.n	80022c8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ae:	4a4a      	ldr	r2, [pc, #296]	; (80023d8 <HAL_RCC_ClockConfig+0x140>)
 80022b0:	6813      	ldr	r3, [r2, #0]
 80022b2:	f023 0307 	bic.w	r3, r3, #7
 80022b6:	430b      	orrs	r3, r1
 80022b8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4299      	cmp	r1, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80022c4:	2001      	movs	r0, #1
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
 80022c8:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	f013 0f01 	tst.w	r3, #1
 80022d0:	d039      	beq.n	8002346 <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d2:	6863      	ldr	r3, [r4, #4]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d009      	beq.n	80022ec <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d026      	beq.n	800232a <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022dc:	bb63      	cbnz	r3, 8002338 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80022de:	4a3f      	ldr	r2, [pc, #252]	; (80023dc <HAL_RCC_ClockConfig+0x144>)
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	f012 0f02 	tst.w	r2, #2
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 80022e8:	2001      	movs	r0, #1
 80022ea:	bd70      	pop	{r4, r5, r6, pc}
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80022ec:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <HAL_RCC_ClockConfig+0x144>)
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80022f4:	d06e      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4939      	ldr	r1, [pc, #228]	; (80023dc <HAL_RCC_ClockConfig+0x144>)
 80022f8:	688a      	ldr	r2, [r1, #8]
 80022fa:	f022 0203 	bic.w	r2, r2, #3
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002302:	f7ff fa47 	bl	8001794 <HAL_GetTick>
 8002306:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002308:	4b34      	ldr	r3, [pc, #208]	; (80023dc <HAL_RCC_ClockConfig+0x144>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	6862      	ldr	r2, [r4, #4]
 8002312:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002316:	d016      	beq.n	8002346 <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7ff fa3c 	bl	8001794 <HAL_GetTick>
 800231c:	1b80      	subs	r0, r0, r6
 800231e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002322:	4298      	cmp	r0, r3
 8002324:	d9f0      	bls.n	8002308 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 8002326:	2003      	movs	r0, #3
 8002328:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800232a:	4a2c      	ldr	r2, [pc, #176]	; (80023dc <HAL_RCC_ClockConfig+0x144>)
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002332:	d1e0      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002334:	2001      	movs	r0, #1
 8002336:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002338:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_RCC_ClockConfig+0x144>)
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002340:	d1d9      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8002342:	2001      	movs	r0, #1
 8002344:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	f013 0f02 	tst.w	r3, #2
 800234c:	d006      	beq.n	800235c <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234e:	4a23      	ldr	r2, [pc, #140]	; (80023dc <HAL_RCC_ClockConfig+0x144>)
 8002350:	6893      	ldr	r3, [r2, #8]
 8002352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002356:	68a1      	ldr	r1, [r4, #8]
 8002358:	430b      	orrs	r3, r1
 800235a:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <HAL_RCC_ClockConfig+0x140>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	429d      	cmp	r5, r3
 8002366:	d20c      	bcs.n	8002382 <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_RCC_ClockConfig+0x140>)
 800236a:	6813      	ldr	r3, [r2, #0]
 800236c:	f023 0307 	bic.w	r3, r3, #7
 8002370:	432b      	orrs	r3, r5
 8002372:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002374:	6813      	ldr	r3, [r2, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	429d      	cmp	r5, r3
 800237c:	d001      	beq.n	8002382 <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 800237e:	2001      	movs	r0, #1
}
 8002380:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	f013 0f04 	tst.w	r3, #4
 8002388:	d006      	beq.n	8002398 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238a:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_RCC_ClockConfig+0x144>)
 800238c:	6893      	ldr	r3, [r2, #8]
 800238e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002392:	68e1      	ldr	r1, [r4, #12]
 8002394:	430b      	orrs	r3, r1
 8002396:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	f013 0f08 	tst.w	r3, #8
 800239e:	d007      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a0:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_RCC_ClockConfig+0x144>)
 80023a2:	6893      	ldr	r3, [r2, #8]
 80023a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80023a8:	6921      	ldr	r1, [r4, #16]
 80023aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80023ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b0:	f7ff fc06 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x144>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80023bc:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <HAL_RCC_ClockConfig+0x148>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	40d8      	lsrs	r0, r3
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_RCC_ClockConfig+0x14c>)
 80023c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80023c6:	2000      	movs	r0, #0
 80023c8:	f7ff f9c6 	bl	8001758 <HAL_InitTick>
  return HAL_OK;
 80023cc:	2000      	movs	r0, #0
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80023d0:	2001      	movs	r0, #1
 80023d2:	4770      	bx	lr
        return HAL_ERROR;
 80023d4:	2001      	movs	r0, #1
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	0800399c 	.word	0x0800399c
 80023e4:	20000038 	.word	0x20000038

080023e8 <HAL_RCC_GetHCLKFreq>:
}
 80023e8:	4b01      	ldr	r3, [pc, #4]	; (80023f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000038 	.word	0x20000038

080023f4 <HAL_RCC_GetPCLK1Freq>:
{
 80023f4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023f6:	f7ff fff7 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <HAL_RCC_GetPCLK1Freq+0x18>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002402:	4a03      	ldr	r2, [pc, #12]	; (8002410 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
}
 8002406:	40d8      	lsrs	r0, r3
 8002408:	bd08      	pop	{r3, pc}
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	080039ac 	.word	0x080039ac

08002414 <HAL_RCC_GetPCLK2Freq>:
{
 8002414:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002416:	f7ff ffe7 	bl	80023e8 <HAL_RCC_GetHCLKFreq>
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_RCC_GetPCLK2Freq+0x18>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002422:	4a03      	ldr	r2, [pc, #12]	; (8002430 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002424:	5cd3      	ldrb	r3, [r2, r3]
}
 8002426:	40d8      	lsrs	r0, r3
 8002428:	bd08      	pop	{r3, pc}
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	080039ac 	.word	0x080039ac

08002434 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002436:	4b5d      	ldr	r3, [pc, #372]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f013 0f03 	tst.w	r3, #3
 800243e:	d019      	beq.n	8002474 <RCCEx_PLLSAI1_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002440:	4b5a      	ldr	r3, [pc, #360]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	6802      	ldr	r2, [r0, #0]
 800244a:	4293      	cmp	r3, r2
 800244c:	d004      	beq.n	8002458 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800244e:	2401      	movs	r4, #1
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002450:	2c00      	cmp	r4, #0
 8002452:	d048      	beq.n	80024e6 <RCCEx_PLLSAI1_Config+0xb2>
      }
    }
  }

  return status;
}
 8002454:	4620      	mov	r0, r4
 8002456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002458:	2a00      	cmp	r2, #0
 800245a:	d042      	beq.n	80024e2 <RCCEx_PLLSAI1_Config+0xae>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800245c:	4b53      	ldr	r3, [pc, #332]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002464:	3301      	adds	r3, #1
 8002466:	6842      	ldr	r2, [r0, #4]
       ||
 8002468:	4293      	cmp	r3, r2
 800246a:	d001      	beq.n	8002470 <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 800246c:	2401      	movs	r4, #1
 800246e:	e7ef      	b.n	8002450 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8002470:	2400      	movs	r4, #0
 8002472:	e7ed      	b.n	8002450 <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 8002474:	6803      	ldr	r3, [r0, #0]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d018      	beq.n	80024ac <RCCEx_PLLSAI1_Config+0x78>
 800247a:	2b03      	cmp	r3, #3
 800247c:	d01d      	beq.n	80024ba <RCCEx_PLLSAI1_Config+0x86>
 800247e:	2b01      	cmp	r3, #1
 8002480:	d00d      	beq.n	800249e <RCCEx_PLLSAI1_Config+0x6a>
      status = HAL_ERROR;
 8002482:	2401      	movs	r4, #1
    if(status == HAL_OK)
 8002484:	2c00      	cmp	r4, #0
 8002486:	d1e3      	bne.n	8002450 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002488:	4e48      	ldr	r6, [pc, #288]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 800248a:	68f2      	ldr	r2, [r6, #12]
 800248c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002490:	6845      	ldr	r5, [r0, #4]
 8002492:	3d01      	subs	r5, #1
 8002494:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002498:	4313      	orrs	r3, r2
 800249a:	60f3      	str	r3, [r6, #12]
 800249c:	e7d8      	b.n	8002450 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800249e:	4a43      	ldr	r2, [pc, #268]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	f012 0f02 	tst.w	r2, #2
 80024a6:	d014      	beq.n	80024d2 <RCCEx_PLLSAI1_Config+0x9e>
  HAL_StatusTypeDef status = HAL_OK;
 80024a8:	2400      	movs	r4, #0
 80024aa:	e7eb      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024ac:	4a3f      	ldr	r2, [pc, #252]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80024b4:	d00f      	beq.n	80024d6 <RCCEx_PLLSAI1_Config+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2400      	movs	r4, #0
 80024b8:	e7e4      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ba:	4a3c      	ldr	r2, [pc, #240]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80024c2:	d10a      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xa6>
 80024c4:	4a39      	ldr	r2, [pc, #228]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80024cc:	d007      	beq.n	80024de <RCCEx_PLLSAI1_Config+0xaa>
  HAL_StatusTypeDef status = HAL_OK;
 80024ce:	2400      	movs	r4, #0
 80024d0:	e7d8      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80024d2:	2401      	movs	r4, #1
 80024d4:	e7d6      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80024d6:	2401      	movs	r4, #1
 80024d8:	e7d4      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2400      	movs	r4, #0
 80024dc:	e7d2      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80024de:	2401      	movs	r4, #1
 80024e0:	e7d0      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 80024e2:	2401      	movs	r4, #1
 80024e4:	e7b4      	b.n	8002450 <RCCEx_PLLSAI1_Config+0x1c>
 80024e6:	460f      	mov	r7, r1
 80024e8:	4605      	mov	r5, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 80024ea:	4a30      	ldr	r2, [pc, #192]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 80024ec:	6813      	ldr	r3, [r2, #0]
 80024ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024f2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80024f4:	f7ff f94e 	bl	8001794 <HAL_GetTick>
 80024f8:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002502:	d005      	beq.n	8002510 <RCCEx_PLLSAI1_Config+0xdc>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002504:	f7ff f946 	bl	8001794 <HAL_GetTick>
 8002508:	1b80      	subs	r0, r0, r6
 800250a:	2802      	cmp	r0, #2
 800250c:	d9f5      	bls.n	80024fa <RCCEx_PLLSAI1_Config+0xc6>
        status = HAL_TIMEOUT;
 800250e:	2403      	movs	r4, #3
    if(status == HAL_OK)
 8002510:	2c00      	cmp	r4, #0
 8002512:	d19f      	bne.n	8002454 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 8002514:	bb47      	cbnz	r7, 8002568 <RCCEx_PLLSAI1_Config+0x134>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002516:	4925      	ldr	r1, [pc, #148]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 8002518:	690b      	ldr	r3, [r1, #16]
 800251a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800251e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002522:	68a8      	ldr	r0, [r5, #8]
 8002524:	68ea      	ldr	r2, [r5, #12]
 8002526:	06d2      	lsls	r2, r2, #27
 8002528:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800252c:	4313      	orrs	r3, r2
 800252e:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002530:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 8002532:	6813      	ldr	r3, [r2, #0]
 8002534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002538:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800253a:	f7ff f92b 	bl	8001794 <HAL_GetTick>
 800253e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002548:	d105      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0x122>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800254a:	f7ff f923 	bl	8001794 <HAL_GetTick>
 800254e:	1b80      	subs	r0, r0, r6
 8002550:	2802      	cmp	r0, #2
 8002552:	d9f5      	bls.n	8002540 <RCCEx_PLLSAI1_Config+0x10c>
          status = HAL_TIMEOUT;
 8002554:	2403      	movs	r4, #3
      if(status == HAL_OK)
 8002556:	2c00      	cmp	r4, #0
 8002558:	f47f af7c 	bne.w	8002454 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800255c:	4a13      	ldr	r2, [pc, #76]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 800255e:	6913      	ldr	r3, [r2, #16]
 8002560:	69a9      	ldr	r1, [r5, #24]
 8002562:	430b      	orrs	r3, r1
 8002564:	6113      	str	r3, [r2, #16]
 8002566:	e775      	b.n	8002454 <RCCEx_PLLSAI1_Config+0x20>
      else if(Divider == DIVIDER_Q_UPDATE)
 8002568:	2f01      	cmp	r7, #1
 800256a:	d00f      	beq.n	800258c <RCCEx_PLLSAI1_Config+0x158>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256c:	480f      	ldr	r0, [pc, #60]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 800256e:	6902      	ldr	r2, [r0, #16]
 8002570:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8002574:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002578:	68a9      	ldr	r1, [r5, #8]
 800257a:	696b      	ldr	r3, [r5, #20]
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	3b01      	subs	r3, #1
 8002580:	065b      	lsls	r3, r3, #25
 8002582:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002586:	4313      	orrs	r3, r2
 8002588:	6103      	str	r3, [r0, #16]
 800258a:	e7d1      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800258c:	4807      	ldr	r0, [pc, #28]	; (80025ac <RCCEx_PLLSAI1_Config+0x178>)
 800258e:	6902      	ldr	r2, [r0, #16]
 8002590:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002594:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002598:	68a9      	ldr	r1, [r5, #8]
 800259a:	692b      	ldr	r3, [r5, #16]
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	3b01      	subs	r3, #1
 80025a0:	055b      	lsls	r3, r3, #21
 80025a2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025a6:	4313      	orrs	r3, r2
 80025a8:	6103      	str	r3, [r0, #16]
 80025aa:	e7c1      	b.n	8002530 <RCCEx_PLLSAI1_Config+0xfc>
 80025ac:	40021000 	.word	0x40021000

080025b0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80025b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025b8:	6803      	ldr	r3, [r0, #0]
 80025ba:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80025be:	d024      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch(PeriphClkInit->Sai1ClockSelection)
 80025c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80025c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025c6:	d013      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80025c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025cc:	d002      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80025ce:	b1b3      	cbz	r3, 80025fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
      ret = HAL_ERROR;
 80025d0:	2701      	movs	r7, #1
 80025d2:	e000      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025d4:	2700      	movs	r7, #0
    if(ret == HAL_OK)
 80025d6:	2f00      	cmp	r7, #0
 80025d8:	d16f      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025da:	4abd      	ldr	r2, [pc, #756]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025dc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025e4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80025e6:	430b      	orrs	r3, r1
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ec:	463e      	mov	r6, r7
 80025ee:	e00e      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025f0:	4ab7      	ldr	r2, [pc, #732]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025f2:	68d3      	ldr	r3, [r2, #12]
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025fa:	2700      	movs	r7, #0
      break;
 80025fc:	e7eb      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025fe:	2100      	movs	r1, #0
 8002600:	3004      	adds	r0, #4
 8002602:	f7ff ff17 	bl	8002434 <RCCEx_PLLSAI1_Config>
 8002606:	4607      	mov	r7, r0
      break;
 8002608:	e7e5      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800260a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800260c:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002614:	d06d      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002616:	4bae      	ldr	r3, [pc, #696]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800261e:	d14e      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002620:	4bab      	ldr	r3, [pc, #684]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002622:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002624:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002628:	659a      	str	r2, [r3, #88]	; 0x58
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002634:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002638:	4aa6      	ldr	r2, [pc, #664]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800263a:	6813      	ldr	r3, [r2, #0]
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002642:	f7ff f8a7 	bl	8001794 <HAL_GetTick>
 8002646:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002648:	4ba2      	ldr	r3, [pc, #648]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002650:	d105      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xae>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002652:	f7ff f89f 	bl	8001794 <HAL_GetTick>
 8002656:	1b40      	subs	r0, r0, r5
 8002658:	2802      	cmp	r0, #2
 800265a:	d9f5      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x98>
        ret = HAL_TIMEOUT;
 800265c:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 800265e:	2f00      	cmp	r7, #0
 8002660:	d142      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002662:	4b9b      	ldr	r3, [pc, #620]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002668:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800266c:	d015      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xea>
 800266e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002670:	4293      	cmp	r3, r2
 8002672:	d012      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002674:	4a96      	ldr	r2, [pc, #600]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002676:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800267a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800267e:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 8002682:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002686:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800268a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800268e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002692:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800269a:	f013 0f01 	tst.w	r3, #1
 800269e:	d111      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 80026a0:	2f00      	cmp	r7, #0
 80026a2:	f040 8113 	bne.w	80028cc <HAL_RCCEx_PeriphCLKConfig+0x31c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a6:	4a8a      	ldr	r2, [pc, #552]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80026ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80026b2:	430b      	orrs	r3, r1
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026b8:	e017      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
      status = ret;
 80026ba:	463e      	mov	r6, r7
 80026bc:	e7a7      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;
 80026be:	f04f 0800 	mov.w	r8, #0
 80026c2:	e7b9      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x88>
        tickstart = HAL_GetTick();
 80026c4:	f7ff f866 	bl	8001794 <HAL_GetTick>
 80026c8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80026ca:	4b81      	ldr	r3, [pc, #516]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f013 0f02 	tst.w	r3, #2
 80026d4:	d1e4      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d6:	f7ff f85d 	bl	8001794 <HAL_GetTick>
 80026da:	1b40      	subs	r0, r0, r5
 80026dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80026e0:	4298      	cmp	r0, r3
 80026e2:	d9f2      	bls.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 80026e4:	2703      	movs	r7, #3
 80026e6:	e7db      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      status = ret;
 80026e8:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 80026ea:	f1b8 0f00 	cmp.w	r8, #0
 80026ee:	f040 80f3 	bne.w	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	f013 0f01 	tst.w	r3, #1
 80026f8:	d008      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026fa:	4a75      	ldr	r2, [pc, #468]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002700:	f023 0303 	bic.w	r3, r3, #3
 8002704:	6a21      	ldr	r1, [r4, #32]
 8002706:	430b      	orrs	r3, r1
 8002708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	f013 0f02 	tst.w	r3, #2
 8002712:	d008      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002714:	4a6e      	ldr	r2, [pc, #440]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002716:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800271a:	f023 030c 	bic.w	r3, r3, #12
 800271e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002720:	430b      	orrs	r3, r1
 8002722:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	f013 0f04 	tst.w	r3, #4
 800272c:	d008      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800272e:	4a68      	ldr	r2, [pc, #416]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002730:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002734:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002738:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800273a:	430b      	orrs	r3, r1
 800273c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	f013 0f08 	tst.w	r3, #8
 8002746:	d008      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002748:	4a61      	ldr	r2, [pc, #388]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800274a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800274e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002752:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002754:	430b      	orrs	r3, r1
 8002756:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	f013 0f20 	tst.w	r3, #32
 8002760:	d008      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002762:	4a5b      	ldr	r2, [pc, #364]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002764:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002768:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800276c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800276e:	430b      	orrs	r3, r1
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	f413 7f00 	tst.w	r3, #512	; 0x200
 800277a:	d008      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800277c:	4a54      	ldr	r2, [pc, #336]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800277e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002782:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002786:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002788:	430b      	orrs	r3, r1
 800278a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002794:	d008      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002796:	4a4e      	ldr	r2, [pc, #312]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002798:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800279c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80027a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80027a2:	430b      	orrs	r3, r1
 80027a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027ae:	d008      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027b0:	4a47      	ldr	r2, [pc, #284]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027bc:	430b      	orrs	r3, r1
 80027be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027c8:	d008      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027ca:	4a41      	ldr	r2, [pc, #260]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80027d6:	430b      	orrs	r3, r1
 80027d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027e2:	d008      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027e4:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80027e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80027ee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027f0:	430b      	orrs	r3, r1
 80027f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80027fc:	d008      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x260>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027fe:	4a34      	ldr	r2, [pc, #208]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002800:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8002804:	f023 0303 	bic.w	r3, r3, #3
 8002808:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800280a:	430b      	orrs	r3, r1
 800280c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002816:	d00f      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002818:	4a2d      	ldr	r2, [pc, #180]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800281a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800281e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002822:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002824:	430b      	orrs	r3, r1
 8002826:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800282a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800282c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002830:	d058      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002832:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002836:	d05a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x33e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800283e:	d00f      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002840:	4a23      	ldr	r2, [pc, #140]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002842:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002846:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800284a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800284c:	430b      	orrs	r3, r1
 800284e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002852:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002858:	d051      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800285a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800285e:	d053      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x358>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002866:	d00f      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002868:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800286a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800286e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002872:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002874:	430b      	orrs	r3, r1
 8002876:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800287a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800287c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002880:	d04a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x368>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002886:	d04c      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x372>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800288e:	d00c      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002890:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002892:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002896:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800289a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800289c:	430b      	orrs	r3, r1
 800289e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80028a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028a8:	d043      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x382>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80028b0:	d008      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80028b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028bc:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80028be:	430b      	orrs	r3, r1
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80028c4:	4630      	mov	r0, r6
 80028c6:	b002      	add	sp, #8
 80028c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80028cc:	463e      	mov	r6, r7
 80028ce:	e70c      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80028da:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80028dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6593      	str	r3, [r2, #88]	; 0x58
 80028e2:	e706      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e4:	68d3      	ldr	r3, [r2, #12]
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]
 80028ec:	e7a4      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ee:	2101      	movs	r1, #1
 80028f0:	1d20      	adds	r0, r4, #4
 80028f2:	f7ff fd9f 	bl	8002434 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d09e      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x288>
          status = ret;
 80028fa:	4606      	mov	r6, r0
 80028fc:	e79c      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028fe:	68d3      	ldr	r3, [r2, #12]
 8002900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002904:	60d3      	str	r3, [r2, #12]
 8002906:	e7ab      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002908:	2101      	movs	r1, #1
 800290a:	1d20      	adds	r0, r4, #4
 800290c:	f7ff fd92 	bl	8002434 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002910:	2800      	cmp	r0, #0
 8002912:	d0a5      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        status = ret;
 8002914:	4606      	mov	r6, r0
 8002916:	e7a3      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002918:	68d3      	ldr	r3, [r2, #12]
 800291a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800291e:	60d3      	str	r3, [r2, #12]
 8002920:	e7b2      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002922:	2101      	movs	r1, #1
 8002924:	1d20      	adds	r0, r4, #4
 8002926:	f7ff fd85 	bl	8002434 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800292a:	2800      	cmp	r0, #0
 800292c:	d0ac      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
        status = ret;
 800292e:	4606      	mov	r6, r0
 8002930:	e7aa      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002932:	2102      	movs	r1, #2
 8002934:	1d20      	adds	r0, r4, #4
 8002936:	f7ff fd7d 	bl	8002434 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800293a:	2800      	cmp	r0, #0
 800293c:	d0b5      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        status = ret;
 800293e:	4606      	mov	r6, r0
 8002940:	e7b3      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc: RTC handle  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002948:	4770      	bx	lr

0800294a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800294a:	b538      	push	{r3, r4, r5, lr}
 800294c:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800294e:	6802      	ldr	r2, [r0, #0]
 8002950:	68d3      	ldr	r3, [r2, #12]
 8002952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002956:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002958:	f7fe ff1c 	bl	8001794 <HAL_GetTick>
 800295c:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f013 0f20 	tst.w	r3, #32
 8002966:	d107      	bne.n	8002978 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002968:	f7fe ff14 	bl	8001794 <HAL_GetTick>
 800296c:	1b40      	subs	r0, r0, r5
 800296e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002972:	d9f4      	bls.n	800295e <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002974:	2003      	movs	r0, #3
    }
  }

  return HAL_OK;
}
 8002976:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002978:	2000      	movs	r0, #0
 800297a:	bd38      	pop	{r3, r4, r5, pc}

0800297c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800297c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800297e:	6803      	ldr	r3, [r0, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002986:	d001      	beq.n	800298c <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002988:	2000      	movs	r0, #0
 800298a:	bd38      	pop	{r3, r4, r5, pc}
 800298c:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800298e:	f04f 32ff 	mov.w	r2, #4294967295
 8002992:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002994:	f7fe fefe 	bl	8001794 <HAL_GetTick>
 8002998:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029a2:	d107      	bne.n	80029b4 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80029a4:	f7fe fef6 	bl	8001794 <HAL_GetTick>
 80029a8:	1b40      	subs	r0, r0, r5
 80029aa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80029ae:	d9f4      	bls.n	800299a <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 80029b0:	2003      	movs	r0, #3
}
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80029b4:	2000      	movs	r0, #0
 80029b6:	bd38      	pop	{r3, r4, r5, pc}

080029b8 <HAL_RTC_Init>:
{
 80029b8:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d064      	beq.n	8002a88 <HAL_RTC_Init+0xd0>
 80029be:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80029c0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d045      	beq.n	8002a54 <HAL_RTC_Init+0x9c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029c8:	2302      	movs	r3, #2
 80029ca:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	22ca      	movs	r2, #202	; 0xca
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	2253      	movs	r2, #83	; 0x53
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff ffce 	bl	800297c <RTC_EnterInitMode>
 80029e0:	4605      	mov	r5, r0
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d13b      	bne.n	8002a5e <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	6893      	ldr	r3, [r2, #8]
 80029ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80029ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029f4:	6821      	ldr	r1, [r4, #0]
 80029f6:	688a      	ldr	r2, [r1, #8]
 80029f8:	6863      	ldr	r3, [r4, #4]
 80029fa:	6920      	ldr	r0, [r4, #16]
 80029fc:	4303      	orrs	r3, r0
 80029fe:	69a0      	ldr	r0, [r4, #24]
 8002a00:	4303      	orrs	r3, r0
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	68e2      	ldr	r2, [r4, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	6913      	ldr	r3, [r2, #16]
 8002a10:	68a1      	ldr	r1, [r4, #8]
 8002a12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002a16:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a18:	6822      	ldr	r2, [r4, #0]
 8002a1a:	68d3      	ldr	r3, [r2, #12]
 8002a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a20:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f013 0f20 	tst.w	r3, #32
 8002a2a:	d020      	beq.n	8002a6e <HAL_RTC_Init+0xb6>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002a2c:	6822      	ldr	r2, [r4, #0]
 8002a2e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002a30:	f023 0303 	bic.w	r3, r3, #3
 8002a34:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a36:	6821      	ldr	r1, [r4, #0]
 8002a38:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002a3a:	69e2      	ldr	r2, [r4, #28]
 8002a3c:	6960      	ldr	r0, [r4, #20]
 8002a3e:	4302      	orrs	r2, r0
 8002a40:	4313      	orrs	r3, r2
 8002a42:	64cb      	str	r3, [r1, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8002a50:	4628      	mov	r0, r5
 8002a52:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002a54:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8002a58:	f7ff ff76 	bl	8002948 <HAL_RTC_MspInit>
 8002a5c:	e7b4      	b.n	80029c8 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	22ff      	movs	r2, #255	; 0xff
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a64:	2304      	movs	r3, #4
 8002a66:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 8002a6a:	2501      	movs	r5, #1
 8002a6c:	e7f0      	b.n	8002a50 <HAL_RTC_Init+0x98>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f7ff ff6b 	bl	800294a <HAL_RTC_WaitForSynchro>
 8002a74:	2800      	cmp	r0, #0
 8002a76:	d0d9      	beq.n	8002a2c <HAL_RTC_Init+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	22ff      	movs	r2, #255	; 0xff
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return HAL_ERROR;
 8002a84:	2501      	movs	r5, #1
 8002a86:	e7e3      	b.n	8002a50 <HAL_RTC_Init+0x98>
     return HAL_ERROR;
 8002a88:	2501      	movs	r5, #1
 8002a8a:	e7e1      	b.n	8002a50 <HAL_RTC_Init+0x98>

08002a8c <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002a8c:	2300      	movs	r3, #0

  while(Value >= 10)
 8002a8e:	e002      	b.n	8002a96 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8002a90:	3301      	adds	r3, #1
    Value -= 10;
 8002a92:	380a      	subs	r0, #10
 8002a94:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8002a96:	2809      	cmp	r0, #9
 8002a98:	d8fa      	bhi.n	8002a90 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	b2db      	uxtb	r3, r3
}
 8002a9e:	4318      	orrs	r0, r3
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_RTC_SetTime>:
{
 8002aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002aa4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d07f      	beq.n	8002bac <HAL_RTC_SetTime+0x10a>
 8002aac:	460e      	mov	r6, r1
 8002aae:	4604      	mov	r4, r0
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	d148      	bne.n	8002b52 <HAL_RTC_SetTime+0xb0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002ac0:	6803      	ldr	r3, [r0, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ac8:	d101      	bne.n	8002ace <HAL_RTC_SetTime+0x2c>
      sTime->TimeFormat = 0x00;
 8002aca:	2300      	movs	r3, #0
 8002acc:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002ace:	7830      	ldrb	r0, [r6, #0]
 8002ad0:	f7ff ffdc 	bl	8002a8c <RTC_ByteToBcd2>
 8002ad4:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002ad6:	7870      	ldrb	r0, [r6, #1]
 8002ad8:	f7ff ffd8 	bl	8002a8c <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002adc:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002ae0:	78b0      	ldrb	r0, [r6, #2]
 8002ae2:	f7ff ffd3 	bl	8002a8c <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002ae6:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16));
 8002ae8:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002aea:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	22ca      	movs	r2, #202	; 0xca
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	2253      	movs	r2, #83	; 0x53
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7ff ff3e 	bl	800297c <RTC_EnterInitMode>
 8002b00:	4607      	mov	r7, r0
 8002b02:	2800      	cmp	r0, #0
 8002b04:	d137      	bne.n	8002b76 <HAL_RTC_SetTime+0xd4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8002b0c:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8002b10:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8002b12:	6822      	ldr	r2, [r4, #0]
 8002b14:	6893      	ldr	r3, [r2, #8]
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b1a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b1c:	6821      	ldr	r1, [r4, #0]
 8002b1e:	688b      	ldr	r3, [r1, #8]
 8002b20:	68f2      	ldr	r2, [r6, #12]
 8002b22:	6930      	ldr	r0, [r6, #16]
 8002b24:	4302      	orrs	r2, r0
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002b2a:	6822      	ldr	r2, [r4, #0]
 8002b2c:	68d3      	ldr	r3, [r2, #12]
 8002b2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b32:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f013 0f20 	tst.w	r3, #32
 8002b3c:	d026      	beq.n	8002b8c <HAL_RTC_SetTime+0xea>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b3e:	6823      	ldr	r3, [r4, #0]
 8002b40:	22ff      	movs	r2, #255	; 0xff
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f884 3020 	strb.w	r3, [r4, #32]
   return HAL_OK;
 8002b50:	e02d      	b.n	8002bae <HAL_RTC_SetTime+0x10c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b52:	6803      	ldr	r3, [r0, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002b5a:	d101      	bne.n	8002b60 <HAL_RTC_SetTime+0xbe>
      sTime->TimeFormat = 0x00;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002b60:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002b62:	7870      	ldrb	r0, [r6, #1]
 8002b64:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002b66:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8002b6a:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002b6c:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16));
 8002b6e:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002b70:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8002b74:	e7bb      	b.n	8002aee <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	22ff      	movs	r2, #255	; 0xff
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002b82:	2300      	movs	r3, #0
 8002b84:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002b88:	2701      	movs	r7, #1
 8002b8a:	e010      	b.n	8002bae <HAL_RTC_SetTime+0x10c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff fedc 	bl	800294a <HAL_RTC_WaitForSynchro>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	d0d3      	beq.n	8002b3e <HAL_RTC_SetTime+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	22ff      	movs	r2, #255	; 0xff
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002ba8:	2701      	movs	r7, #1
 8002baa:	e000      	b.n	8002bae <HAL_RTC_SetTime+0x10c>
  __HAL_LOCK(hrtc);
 8002bac:	2702      	movs	r7, #2
}
 8002bae:	4638      	mov	r0, r7
 8002bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002bb2 <HAL_RTC_SetDate>:
{
 8002bb2:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8002bb4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d06d      	beq.n	8002c98 <HAL_RTC_SetDate+0xe6>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002bc8:	b93a      	cbnz	r2, 8002bda <HAL_RTC_SetDate+0x28>
 8002bca:	784b      	ldrb	r3, [r1, #1]
 8002bcc:	f013 0f10 	tst.w	r3, #16
 8002bd0:	d003      	beq.n	8002bda <HAL_RTC_SetDate+0x28>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002bd2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8002bd6:	330a      	adds	r3, #10
 8002bd8:	704b      	strb	r3, [r1, #1]
 8002bda:	460e      	mov	r6, r1
 8002bdc:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8002bde:	2a00      	cmp	r2, #0
 8002be0:	d134      	bne.n	8002c4c <HAL_RTC_SetDate+0x9a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002be2:	78c8      	ldrb	r0, [r1, #3]
 8002be4:	f7ff ff52 	bl	8002a8c <RTC_ByteToBcd2>
 8002be8:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002bea:	7870      	ldrb	r0, [r6, #1]
 8002bec:	f7ff ff4e 	bl	8002a8c <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002bf0:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002bf4:	78b0      	ldrb	r0, [r6, #2]
 8002bf6:	f7ff ff49 	bl	8002a8c <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002bfa:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13));
 8002bfc:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002bfe:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	22ca      	movs	r2, #202	; 0xca
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	2253      	movs	r2, #83	; 0x53
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f7ff feb4 	bl	800297c <RTC_EnterInitMode>
 8002c14:	4606      	mov	r6, r0
 8002c16:	bb20      	cbnz	r0, 8002c62 <HAL_RTC_SetDate+0xb0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8002c1e:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8002c22:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002c24:	6822      	ldr	r2, [r4, #0]
 8002c26:	68d3      	ldr	r3, [r2, #12]
 8002c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c2c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f013 0f20 	tst.w	r3, #32
 8002c36:	d01f      	beq.n	8002c78 <HAL_RTC_SetDate+0xc6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	22ff      	movs	r2, #255	; 0xff
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002c44:	2300      	movs	r3, #0
 8002c46:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 8002c4a:	e026      	b.n	8002c9a <HAL_RTC_SetDate+0xe8>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8002c4c:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8002c4e:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002c50:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8002c52:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002c54:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002c58:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13));
 8002c5a:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002c5c:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8002c60:	e7cf      	b.n	8002c02 <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	22ff      	movs	r2, #255	; 0xff
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c68:	2304      	movs	r3, #4
 8002c6a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002c74:	2601      	movs	r6, #1
 8002c76:	e010      	b.n	8002c9a <HAL_RTC_SetDate+0xe8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fe66 	bl	800294a <HAL_RTC_WaitForSynchro>
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d0da      	beq.n	8002c38 <HAL_RTC_SetDate+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c88:	2304      	movs	r3, #4
 8002c8a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002c94:	2601      	movs	r6, #1
 8002c96:	e000      	b.n	8002c9a <HAL_RTC_SetDate+0xe8>
 __HAL_LOCK(hrtc);
 8002c98:	2602      	movs	r6, #2
}
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}

08002c9e <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002c9e:	0903      	lsrs	r3, r0, #4
 8002ca0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002ca4:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8002ca6:	f000 000f 	and.w	r0, r0, #15
 8002caa:	4410      	add	r0, r2
}
 8002cac:	b2c0      	uxtb	r0, r0
 8002cae:	4770      	bx	lr

08002cb0 <HAL_RTC_GetTime>:
{
 8002cb0:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002cb2:	6803      	ldr	r3, [r0, #0]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002cb8:	6803      	ldr	r3, [r0, #0]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002cc0:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002cc2:	6803      	ldr	r3, [r0, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002cca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002cce:	0c1d      	lsrs	r5, r3, #16
 8002cd0:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8002cd4:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002cd6:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8002cda:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002cdc:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8002ce0:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8002ce2:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8002ce6:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8002ce8:	b95a      	cbnz	r2, 8002d02 <HAL_RTC_GetTime+0x52>
 8002cea:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002cec:	f7ff ffd7 	bl	8002c9e <RTC_Bcd2ToByte>
 8002cf0:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	f7ff ffd3 	bl	8002c9e <RTC_Bcd2ToByte>
 8002cf8:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f7ff ffcf 	bl	8002c9e <RTC_Bcd2ToByte>
 8002d00:	70a8      	strb	r0, [r5, #2]
}
 8002d02:	2000      	movs	r0, #0
 8002d04:	bd70      	pop	{r4, r5, r6, pc}

08002d06 <HAL_RTC_GetDate>:
{
 8002d06:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002d08:	6803      	ldr	r3, [r0, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8002d14:	0c18      	lsrs	r0, r3, #16
 8002d16:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8002d18:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8002d1c:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002d1e:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8002d22:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8002d24:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002d28:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8002d2a:	b95a      	cbnz	r2, 8002d44 <HAL_RTC_GetDate+0x3e>
 8002d2c:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002d2e:	f7ff ffb6 	bl	8002c9e <RTC_Bcd2ToByte>
 8002d32:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002d34:	4630      	mov	r0, r6
 8002d36:	f7ff ffb2 	bl	8002c9e <RTC_Bcd2ToByte>
 8002d3a:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	f7ff ffae 	bl	8002c9e <RTC_Bcd2ToByte>
 8002d42:	70a0      	strb	r0, [r4, #2]
}
 8002d44:	2000      	movs	r0, #0
 8002d46:	bd70      	pop	{r4, r5, r6, pc}

08002d48 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d48:	6802      	ldr	r2, [r0, #0]
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d50:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d52:	6802      	ldr	r2, [r0, #0]
 8002d54:	6893      	ldr	r3, [r2, #8]
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	6093      	str	r3, [r2, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	6603      	str	r3, [r0, #96]	; 0x60
 8002d66:	4770      	bx	lr

08002d68 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d68:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b21      	cmp	r3, #33	; 0x21
 8002d70:	d000      	beq.n	8002d74 <UART_TxISR_8BIT+0xc>
 8002d72:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 8002d74:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	b16b      	cbz	r3, 8002d98 <UART_TxISR_8BIT+0x30>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8002d7c:	6802      	ldr	r2, [r0, #0]
 8002d7e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002d80:	1c59      	adds	r1, r3, #1
 8002d82:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002d88:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8002d96:	e7ec      	b.n	8002d72 <UART_TxISR_8BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002d98:	6802      	ldr	r2, [r0, #0]
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da0:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002da2:	6802      	ldr	r2, [r0, #0]
 8002da4:	6813      	ldr	r3, [r2, #0]
 8002da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4770      	bx	lr

08002dae <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002dae:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b21      	cmp	r3, #33	; 0x21
 8002db6:	d000      	beq.n	8002dba <UART_TxISR_16BIT+0xc>
 8002db8:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 8002dba:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	b183      	cbz	r3, 8002de4 <UART_TxISR_16BIT+0x36>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002dc2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8002dc4:	6802      	ldr	r2, [r0, #0]
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dcc:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2;
 8002dce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002dd4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8002de2:	e7e9      	b.n	8002db8 <UART_TxISR_16BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002de4:	6802      	ldr	r2, [r0, #0]
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dec:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002dee:	6802      	ldr	r2, [r0, #0]
 8002df0:	6813      	ldr	r3, [r2, #0]
 8002df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4770      	bx	lr

08002dfa <HAL_UART_DeInit>:
  if (huart == NULL)
 8002dfa:	b1d8      	cbz	r0, 8002e34 <HAL_UART_DeInit+0x3a>
{
 8002dfc:	b538      	push	{r3, r4, r5, lr}
 8002dfe:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8002e00:	2324      	movs	r3, #36	; 0x24
 8002e02:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002e06:	6802      	ldr	r2, [r0, #0]
 8002e08:	6813      	ldr	r3, [r2, #0]
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8002e10:	6803      	ldr	r3, [r0, #0]
 8002e12:	2500      	movs	r5, #0
 8002e14:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002e16:	6803      	ldr	r3, [r0, #0]
 8002e18:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002e1a:	6803      	ldr	r3, [r0, #0]
 8002e1c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8002e1e:	f7fe fb31 	bl	8001484 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e22:	6765      	str	r5, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 8002e24:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 8002e28:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 8002e2c:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  return HAL_OK;
 8002e30:	4628      	mov	r0, r5
 8002e32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002e34:	2001      	movs	r0, #1
 8002e36:	4770      	bx	lr

08002e38 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002e38:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d001      	beq.n	8002e46 <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8002e42:	2002      	movs	r0, #2
 8002e44:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8002e46:	b341      	cbz	r1, 8002e9a <HAL_UART_Transmit_IT+0x62>
 8002e48:	b34a      	cbz	r2, 8002e9e <HAL_UART_Transmit_IT+0x66>
    __HAL_LOCK(huart);
 8002e4a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d027      	beq.n	8002ea2 <HAL_UART_Transmit_IT+0x6a>
 8002e52:	2301      	movs	r3, #1
 8002e54:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8002e58:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002e5a:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e5e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e66:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e68:	2321      	movs	r3, #33	; 0x21
 8002e6a:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6e:	6883      	ldr	r3, [r0, #8]
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d00b      	beq.n	8002e8e <HAL_UART_Transmit_IT+0x56>
        huart->TxISR = UART_TxISR_8BIT;
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <HAL_UART_Transmit_IT+0x70>)
 8002e78:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002e80:	6801      	ldr	r1, [r0, #0]
 8002e82:	680a      	ldr	r2, [r1, #0]
 8002e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e88:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8e:	6903      	ldr	r3, [r0, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_UART_Transmit_IT+0x3e>
        huart->TxISR = UART_TxISR_16BIT;
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_UART_Transmit_IT+0x74>)
 8002e96:	6643      	str	r3, [r0, #100]	; 0x64
 8002e98:	e7ef      	b.n	8002e7a <HAL_UART_Transmit_IT+0x42>
      return HAL_ERROR;
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	4770      	bx	lr
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002ea2:	2002      	movs	r0, #2
}
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	08002d69 	.word	0x08002d69
 8002eac:	08002daf 	.word	0x08002daf

08002eb0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eb0:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d001      	beq.n	8002ebe <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8002eba:	2002      	movs	r0, #2
 8002ebc:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8002ebe:	2900      	cmp	r1, #0
 8002ec0:	d056      	beq.n	8002f70 <HAL_UART_Receive_IT+0xc0>
 8002ec2:	2a00      	cmp	r2, #0
 8002ec4:	d056      	beq.n	8002f74 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 8002ec6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d054      	beq.n	8002f78 <HAL_UART_Receive_IT+0xc8>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 8002ed4:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002ed6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002eda:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8002ee2:	6883      	ldr	r3, [r0, #8]
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d006      	beq.n	8002ef8 <HAL_UART_Receive_IT+0x48>
 8002eea:	b9a3      	cbnz	r3, 8002f16 <HAL_UART_Receive_IT+0x66>
 8002eec:	6903      	ldr	r3, [r0, #16]
 8002eee:	b973      	cbnz	r3, 8002f0e <HAL_UART_Receive_IT+0x5e>
 8002ef0:	23ff      	movs	r3, #255	; 0xff
 8002ef2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002ef6:	e011      	b.n	8002f1c <HAL_UART_Receive_IT+0x6c>
 8002ef8:	6903      	ldr	r3, [r0, #16]
 8002efa:	b923      	cbnz	r3, 8002f06 <HAL_UART_Receive_IT+0x56>
 8002efc:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002f00:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002f04:	e00a      	b.n	8002f1c <HAL_UART_Receive_IT+0x6c>
 8002f06:	23ff      	movs	r3, #255	; 0xff
 8002f08:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002f0c:	e006      	b.n	8002f1c <HAL_UART_Receive_IT+0x6c>
 8002f0e:	237f      	movs	r3, #127	; 0x7f
 8002f10:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002f14:	e002      	b.n	8002f1c <HAL_UART_Receive_IT+0x6c>
 8002f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f1a:	d019      	beq.n	8002f50 <HAL_UART_Receive_IT+0xa0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f20:	2322      	movs	r3, #34	; 0x22
 8002f22:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f26:	6802      	ldr	r2, [r0, #0]
 8002f28:	6893      	ldr	r3, [r2, #8]
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6093      	str	r3, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f30:	6883      	ldr	r3, [r0, #8]
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	d015      	beq.n	8002f64 <HAL_UART_Receive_IT+0xb4>
        huart->RxISR = UART_RxISR_8BIT;
 8002f38:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_UART_Receive_IT+0xcc>)
 8002f3a:	6603      	str	r3, [r0, #96]	; 0x60
      __HAL_UNLOCK(huart);
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002f42:	6801      	ldr	r1, [r0, #0]
 8002f44:	680a      	ldr	r2, [r1, #0]
 8002f46:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002f4a:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002f50:	6903      	ldr	r3, [r0, #16]
 8002f52:	b91b      	cbnz	r3, 8002f5c <HAL_UART_Receive_IT+0xac>
 8002f54:	237f      	movs	r3, #127	; 0x7f
 8002f56:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002f5a:	e7df      	b.n	8002f1c <HAL_UART_Receive_IT+0x6c>
 8002f5c:	233f      	movs	r3, #63	; 0x3f
 8002f5e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002f62:	e7db      	b.n	8002f1c <HAL_UART_Receive_IT+0x6c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f64:	6903      	ldr	r3, [r0, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e6      	bne.n	8002f38 <HAL_UART_Receive_IT+0x88>
        huart->RxISR = UART_RxISR_16BIT;
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <HAL_UART_Receive_IT+0xd0>)
 8002f6c:	6603      	str	r3, [r0, #96]	; 0x60
 8002f6e:	e7e5      	b.n	8002f3c <HAL_UART_Receive_IT+0x8c>
      return HAL_ERROR;
 8002f70:	2001      	movs	r0, #1
 8002f72:	4770      	bx	lr
 8002f74:	2001      	movs	r0, #1
 8002f76:	4770      	bx	lr
    __HAL_LOCK(huart);
 8002f78:	2002      	movs	r0, #2
}
 8002f7a:	4770      	bx	lr
 8002f7c:	08002fa1 	.word	0x08002fa1
 8002f80:	08003005 	.word	0x08003005

08002f84 <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f84:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f86:	6801      	ldr	r1, [r0, #0]
 8002f88:	680a      	ldr	r2, [r1, #0]
 8002f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8e:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f90:	2220      	movs	r2, #32
 8002f92:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002f96:	2200      	movs	r2, #0
 8002f98:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f9a:	f7fe fa95 	bl	80014c8 <HAL_UART_TxCpltCallback>
 8002f9e:	bd08      	pop	{r3, pc}

08002fa0 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 8002fa0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fa4:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b22      	cmp	r3, #34	; 0x22
 8002fac:	d006      	beq.n	8002fbc <UART_RxISR_8BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002fae:	6802      	ldr	r2, [r0, #0]
 8002fb0:	8b13      	ldrh	r3, [r2, #24]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	8313      	strh	r3, [r2, #24]
  }
}
 8002fba:	4770      	bx	lr
{
 8002fbc:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002fbe:	6803      	ldr	r3, [r0, #0]
 8002fc0:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002fc2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002fc4:	1c5c      	adds	r4, r3, #1
 8002fc6:	6544      	str	r4, [r0, #84]	; 0x54
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	400a      	ands	r2, r1
 8002fcc:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0)
 8002fce:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8002fdc:	b103      	cbz	r3, 8002fe0 <UART_RxISR_8BIT+0x40>
 8002fde:	bd10      	pop	{r4, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fe0:	6802      	ldr	r2, [r0, #0]
 8002fe2:	6813      	ldr	r3, [r2, #0]
 8002fe4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fe8:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fea:	6802      	ldr	r2, [r0, #0]
 8002fec:	6893      	ldr	r3, [r2, #8]
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8002ffe:	f7fe faa1 	bl	8001544 <HAL_UART_RxCpltCallback>
 8003002:	bd10      	pop	{r4, pc}

08003004 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003004:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003006:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800300a:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b22      	cmp	r3, #34	; 0x22
 8003012:	d006      	beq.n	8003022 <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003014:	6802      	ldr	r2, [r0, #0]
 8003016:	8b13      	ldrh	r3, [r2, #24]
 8003018:	b29b      	uxth	r3, r3
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	8313      	strh	r3, [r2, #24]
 8003020:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003022:	6803      	ldr	r3, [r0, #0]
 8003024:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003026:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8003028:	400a      	ands	r2, r1
 800302a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2;
 800302c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800302e:	3302      	adds	r3, #2
 8003030:	6543      	str	r3, [r0, #84]	; 0x54
    if (--huart->RxXferCount == 0)
 8003032:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29b      	uxth	r3, r3
 800303c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1ed      	bne.n	8003020 <UART_RxISR_16BIT+0x1c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003044:	6802      	ldr	r2, [r0, #0]
 8003046:	6813      	ldr	r3, [r2, #0]
 8003048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800304c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304e:	6802      	ldr	r2, [r0, #0]
 8003050:	6893      	ldr	r3, [r2, #8]
 8003052:	f023 0301 	bic.w	r3, r3, #1
 8003056:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003058:	2320      	movs	r3, #32
 800305a:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8003062:	f7fe fa6f 	bl	8001544 <HAL_UART_RxCpltCallback>
 8003066:	bd08      	pop	{r3, pc}

08003068 <HAL_UART_IRQHandler>:
{
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800306c:	6802      	ldr	r2, [r0, #0]
 800306e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003070:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003072:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 8003074:	f013 050f 	ands.w	r5, r3, #15
 8003078:	d10c      	bne.n	8003094 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 800307a:	f013 0f20 	tst.w	r3, #32
 800307e:	d009      	beq.n	8003094 <HAL_UART_IRQHandler+0x2c>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003080:	f011 0f20 	tst.w	r1, #32
 8003084:	d006      	beq.n	8003094 <HAL_UART_IRQHandler+0x2c>
      if (huart->RxISR != NULL)
 8003086:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8093 	beq.w	80031b4 <HAL_UART_IRQHandler+0x14c>
        huart->RxISR(huart);
 800308e:	4620      	mov	r0, r4
 8003090:	4798      	blx	r3
 8003092:	bd38      	pop	{r3, r4, r5, pc}
  if ((errorflags != RESET)
 8003094:	2d00      	cmp	r5, #0
 8003096:	d06f      	beq.n	8003178 <HAL_UART_IRQHandler+0x110>
      && (((cr3its & USART_CR3_EIE) != RESET)
 8003098:	f010 0501 	ands.w	r5, r0, #1
 800309c:	d102      	bne.n	80030a4 <HAL_UART_IRQHandler+0x3c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800309e:	f411 7f90 	tst.w	r1, #288	; 0x120
 80030a2:	d069      	beq.n	8003178 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030a4:	f013 0f01 	tst.w	r3, #1
 80030a8:	d007      	beq.n	80030ba <HAL_UART_IRQHandler+0x52>
 80030aa:	f411 7f80 	tst.w	r1, #256	; 0x100
 80030ae:	d004      	beq.n	80030ba <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030b0:	2001      	movs	r0, #1
 80030b2:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030b4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80030b6:	4302      	orrs	r2, r0
 80030b8:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ba:	f013 0f02 	tst.w	r3, #2
 80030be:	d007      	beq.n	80030d0 <HAL_UART_IRQHandler+0x68>
 80030c0:	b135      	cbz	r5, 80030d0 <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030c2:	6822      	ldr	r2, [r4, #0]
 80030c4:	2002      	movs	r0, #2
 80030c6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030c8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80030ca:	f042 0204 	orr.w	r2, r2, #4
 80030ce:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030d0:	f013 0f04 	tst.w	r3, #4
 80030d4:	d007      	beq.n	80030e6 <HAL_UART_IRQHandler+0x7e>
 80030d6:	b135      	cbz	r5, 80030e6 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030d8:	6822      	ldr	r2, [r4, #0]
 80030da:	2004      	movs	r0, #4
 80030dc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030de:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80030e0:	f042 0202 	orr.w	r2, r2, #2
 80030e4:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 80030e6:	f013 0f08 	tst.w	r3, #8
 80030ea:	d009      	beq.n	8003100 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 80030ec:	f011 0f20 	tst.w	r1, #32
 80030f0:	d100      	bne.n	80030f4 <HAL_UART_IRQHandler+0x8c>
 80030f2:	b12d      	cbz	r5, 8003100 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030f4:	6822      	ldr	r2, [r4, #0]
 80030f6:	2008      	movs	r0, #8
 80030f8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030fa:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80030fc:	4302      	orrs	r2, r0
 80030fe:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003100:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003102:	2a00      	cmp	r2, #0
 8003104:	d056      	beq.n	80031b4 <HAL_UART_IRQHandler+0x14c>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8003106:	f013 0f20 	tst.w	r3, #32
 800310a:	d006      	beq.n	800311a <HAL_UART_IRQHandler+0xb2>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800310c:	f011 0f20 	tst.w	r1, #32
 8003110:	d003      	beq.n	800311a <HAL_UART_IRQHandler+0xb2>
        if (huart->RxISR != NULL)
 8003112:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003114:	b10b      	cbz	r3, 800311a <HAL_UART_IRQHandler+0xb2>
          huart->RxISR(huart);
 8003116:	4620      	mov	r0, r4
 8003118:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800311a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800311c:	f013 0f08 	tst.w	r3, #8
 8003120:	d104      	bne.n	800312c <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003126:	f013 0f40 	tst.w	r3, #64	; 0x40
 800312a:	d01f      	beq.n	800316c <HAL_UART_IRQHandler+0x104>
        UART_EndRxTransfer(huart);
 800312c:	4620      	mov	r0, r4
 800312e:	f7ff fe0b 	bl	8002d48 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	f012 0f40 	tst.w	r2, #64	; 0x40
 800313a:	d013      	beq.n	8003164 <HAL_UART_IRQHandler+0xfc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003142:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003144:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003146:	b14b      	cbz	r3, 800315c <HAL_UART_IRQHandler+0xf4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <HAL_UART_IRQHandler+0x158>)
 800314a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800314c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800314e:	f7fe fb8f 	bl	8001870 <HAL_DMA_Abort_IT>
 8003152:	b378      	cbz	r0, 80031b4 <HAL_UART_IRQHandler+0x14c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003154:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003156:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003158:	4798      	blx	r3
 800315a:	bd38      	pop	{r3, r4, r5, pc}
            HAL_UART_ErrorCallback(huart);
 800315c:	4620      	mov	r0, r4
 800315e:	f7fe fa3b 	bl	80015d8 <HAL_UART_ErrorCallback>
 8003162:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8003164:	4620      	mov	r0, r4
 8003166:	f7fe fa37 	bl	80015d8 <HAL_UART_ErrorCallback>
 800316a:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800316c:	4620      	mov	r0, r4
 800316e:	f7fe fa33 	bl	80015d8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003172:	2300      	movs	r3, #0
 8003174:	6763      	str	r3, [r4, #116]	; 0x74
 8003176:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003178:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800317c:	d002      	beq.n	8003184 <HAL_UART_IRQHandler+0x11c>
 800317e:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8003182:	d10a      	bne.n	800319a <HAL_UART_IRQHandler+0x132>
  if (((isrflags & USART_ISR_TXE) != RESET)
 8003184:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003188:	d00e      	beq.n	80031a8 <HAL_UART_IRQHandler+0x140>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 800318a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800318e:	d00b      	beq.n	80031a8 <HAL_UART_IRQHandler+0x140>
    if (huart->TxISR != NULL)
 8003190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003192:	b17b      	cbz	r3, 80031b4 <HAL_UART_IRQHandler+0x14c>
      huart->TxISR(huart);
 8003194:	4620      	mov	r0, r4
 8003196:	4798      	blx	r3
 8003198:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800319a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800319e:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80031a0:	4620      	mov	r0, r4
 80031a2:	f000 fb04 	bl	80037ae <HAL_UARTEx_WakeupCallback>
    return;
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80031ac:	d002      	beq.n	80031b4 <HAL_UART_IRQHandler+0x14c>
 80031ae:	f011 0f40 	tst.w	r1, #64	; 0x40
 80031b2:	d100      	bne.n	80031b6 <HAL_UART_IRQHandler+0x14e>
 80031b4:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7ff fee4 	bl	8002f84 <UART_EndTransmit_IT>
    return;
 80031bc:	e7fa      	b.n	80031b4 <HAL_UART_IRQHandler+0x14c>
 80031be:	bf00      	nop
 80031c0:	080031c5 	.word	0x080031c5

080031c4 <UART_DMAAbortOnError>:
{
 80031c4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80031ce:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80031d2:	f7fe fa01 	bl	80015d8 <HAL_UART_ErrorCallback>
 80031d6:	bd08      	pop	{r3, pc}

080031d8 <UART_SetConfig>:
{
 80031d8:	e92d 4b78 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, fp, lr}
 80031dc:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80031de:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031e0:	6883      	ldr	r3, [r0, #8]
 80031e2:	6902      	ldr	r2, [r0, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	6942      	ldr	r2, [r0, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	69c2      	ldr	r2, [r0, #28]
 80031ec:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031ee:	6808      	ldr	r0, [r1, #0]
 80031f0:	4a9b      	ldr	r2, [pc, #620]	; (8003460 <UART_SetConfig+0x288>)
 80031f2:	4002      	ands	r2, r0
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f8:	6822      	ldr	r2, [r4, #0]
 80031fa:	6853      	ldr	r3, [r2, #4]
 80031fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003200:	68e1      	ldr	r1, [r4, #12]
 8003202:	430b      	orrs	r3, r1
 8003204:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003206:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	4996      	ldr	r1, [pc, #600]	; (8003464 <UART_SetConfig+0x28c>)
 800320c:	428a      	cmp	r2, r1
 800320e:	d001      	beq.n	8003214 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8003210:	6a21      	ldr	r1, [r4, #32]
 8003212:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003214:	6891      	ldr	r1, [r2, #8]
 8003216:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800321a:	430b      	orrs	r3, r1
 800321c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	4a91      	ldr	r2, [pc, #580]	; (8003468 <UART_SetConfig+0x290>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d023      	beq.n	800326e <UART_SetConfig+0x96>
 8003226:	4a91      	ldr	r2, [pc, #580]	; (800346c <UART_SetConfig+0x294>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d034      	beq.n	8003296 <UART_SetConfig+0xbe>
 800322c:	4a90      	ldr	r2, [pc, #576]	; (8003470 <UART_SetConfig+0x298>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d04a      	beq.n	80032c8 <UART_SetConfig+0xf0>
 8003232:	4a90      	ldr	r2, [pc, #576]	; (8003474 <UART_SetConfig+0x29c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d05d      	beq.n	80032f4 <UART_SetConfig+0x11c>
 8003238:	4a8a      	ldr	r2, [pc, #552]	; (8003464 <UART_SetConfig+0x28c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d070      	beq.n	8003320 <UART_SetConfig+0x148>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800323e:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8003240:	4a88      	ldr	r2, [pc, #544]	; (8003464 <UART_SetConfig+0x28c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	f000 808f 	beq.w	8003366 <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003248:	69e3      	ldr	r3, [r4, #28]
 800324a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324e:	f000 80fd 	beq.w	800344c <UART_SetConfig+0x274>
    switch (clocksource)
 8003252:	2d08      	cmp	r5, #8
 8003254:	f200 819b 	bhi.w	800358e <UART_SetConfig+0x3b6>
 8003258:	e8df f015 	tbh	[pc, r5, lsl #1]
 800325c:	0171015a 	.word	0x0171015a
 8003260:	0199017b 	.word	0x0199017b
 8003264:	01990186 	.word	0x01990186
 8003268:	01990199 	.word	0x01990199
 800326c:	0190      	.short	0x0190
  UART_GETCLOCKSOURCE(huart, clocksource);
 800326e:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8003272:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003276:	f002 0203 	and.w	r2, r2, #3
 800327a:	2a03      	cmp	r2, #3
 800327c:	d809      	bhi.n	8003292 <UART_SetConfig+0xba>
 800327e:	e8df f002 	tbb	[pc, r2]
 8003282:	0402      	.short	0x0402
 8003284:	0668      	.short	0x0668
 8003286:	2501      	movs	r5, #1
 8003288:	e7da      	b.n	8003240 <UART_SetConfig+0x68>
 800328a:	2504      	movs	r5, #4
 800328c:	e7d8      	b.n	8003240 <UART_SetConfig+0x68>
 800328e:	2508      	movs	r5, #8
 8003290:	e7d6      	b.n	8003240 <UART_SetConfig+0x68>
 8003292:	2510      	movs	r5, #16
 8003294:	e7d4      	b.n	8003240 <UART_SetConfig+0x68>
 8003296:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800329a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800329e:	f002 020c 	and.w	r2, r2, #12
 80032a2:	2a0c      	cmp	r2, #12
 80032a4:	d80e      	bhi.n	80032c4 <UART_SetConfig+0xec>
 80032a6:	e8df f002 	tbb	[pc, r2]
 80032aa:	0d07      	.short	0x0d07
 80032ac:	0d090d0d 	.word	0x0d090d0d
 80032b0:	0d560d0d 	.word	0x0d560d0d
 80032b4:	0d0d      	.short	0x0d0d
 80032b6:	0b          	.byte	0x0b
 80032b7:	00          	.byte	0x00
 80032b8:	2500      	movs	r5, #0
 80032ba:	e7c1      	b.n	8003240 <UART_SetConfig+0x68>
 80032bc:	2504      	movs	r5, #4
 80032be:	e7bf      	b.n	8003240 <UART_SetConfig+0x68>
 80032c0:	2508      	movs	r5, #8
 80032c2:	e7bd      	b.n	8003240 <UART_SetConfig+0x68>
 80032c4:	2510      	movs	r5, #16
 80032c6:	e7bb      	b.n	8003240 <UART_SetConfig+0x68>
 80032c8:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80032cc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80032d0:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80032d4:	2a10      	cmp	r2, #16
 80032d6:	d009      	beq.n	80032ec <UART_SetConfig+0x114>
 80032d8:	d905      	bls.n	80032e6 <UART_SetConfig+0x10e>
 80032da:	2a20      	cmp	r2, #32
 80032dc:	d03d      	beq.n	800335a <UART_SetConfig+0x182>
 80032de:	2a30      	cmp	r2, #48	; 0x30
 80032e0:	d106      	bne.n	80032f0 <UART_SetConfig+0x118>
 80032e2:	2508      	movs	r5, #8
 80032e4:	e7ac      	b.n	8003240 <UART_SetConfig+0x68>
 80032e6:	b91a      	cbnz	r2, 80032f0 <UART_SetConfig+0x118>
 80032e8:	2500      	movs	r5, #0
 80032ea:	e7a9      	b.n	8003240 <UART_SetConfig+0x68>
 80032ec:	2504      	movs	r5, #4
 80032ee:	e7a7      	b.n	8003240 <UART_SetConfig+0x68>
 80032f0:	2510      	movs	r5, #16
 80032f2:	e7a5      	b.n	8003240 <UART_SetConfig+0x68>
 80032f4:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80032f8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80032fc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003300:	2a40      	cmp	r2, #64	; 0x40
 8003302:	d009      	beq.n	8003318 <UART_SetConfig+0x140>
 8003304:	d905      	bls.n	8003312 <UART_SetConfig+0x13a>
 8003306:	2a80      	cmp	r2, #128	; 0x80
 8003308:	d029      	beq.n	800335e <UART_SetConfig+0x186>
 800330a:	2ac0      	cmp	r2, #192	; 0xc0
 800330c:	d106      	bne.n	800331c <UART_SetConfig+0x144>
 800330e:	2508      	movs	r5, #8
 8003310:	e796      	b.n	8003240 <UART_SetConfig+0x68>
 8003312:	b91a      	cbnz	r2, 800331c <UART_SetConfig+0x144>
 8003314:	2500      	movs	r5, #0
 8003316:	e793      	b.n	8003240 <UART_SetConfig+0x68>
 8003318:	2504      	movs	r5, #4
 800331a:	e791      	b.n	8003240 <UART_SetConfig+0x68>
 800331c:	2510      	movs	r5, #16
 800331e:	e78f      	b.n	8003240 <UART_SetConfig+0x68>
 8003320:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8003324:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003328:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800332c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003330:	d00b      	beq.n	800334a <UART_SetConfig+0x172>
 8003332:	d907      	bls.n	8003344 <UART_SetConfig+0x16c>
 8003334:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003338:	d013      	beq.n	8003362 <UART_SetConfig+0x18a>
 800333a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800333e:	d106      	bne.n	800334e <UART_SetConfig+0x176>
 8003340:	2508      	movs	r5, #8
 8003342:	e77d      	b.n	8003240 <UART_SetConfig+0x68>
 8003344:	b91a      	cbnz	r2, 800334e <UART_SetConfig+0x176>
 8003346:	2500      	movs	r5, #0
 8003348:	e77a      	b.n	8003240 <UART_SetConfig+0x68>
 800334a:	2504      	movs	r5, #4
 800334c:	e778      	b.n	8003240 <UART_SetConfig+0x68>
 800334e:	2510      	movs	r5, #16
 8003350:	e776      	b.n	8003240 <UART_SetConfig+0x68>
 8003352:	2502      	movs	r5, #2
 8003354:	e774      	b.n	8003240 <UART_SetConfig+0x68>
 8003356:	2502      	movs	r5, #2
 8003358:	e772      	b.n	8003240 <UART_SetConfig+0x68>
 800335a:	2502      	movs	r5, #2
 800335c:	e770      	b.n	8003240 <UART_SetConfig+0x68>
 800335e:	2502      	movs	r5, #2
 8003360:	e76e      	b.n	8003240 <UART_SetConfig+0x68>
 8003362:	2502      	movs	r5, #2
 8003364:	e76c      	b.n	8003240 <UART_SetConfig+0x68>
    switch (clocksource)
 8003366:	2d08      	cmp	r5, #8
 8003368:	d811      	bhi.n	800338e <UART_SetConfig+0x1b6>
 800336a:	e8df f005 	tbb	[pc, r5]
 800336e:	1008      	.short	0x1008
 8003370:	100c1005 	.word	0x100c1005
 8003374:	1010      	.short	0x1010
 8003376:	13          	.byte	0x13
 8003377:	00          	.byte	0x00
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003378:	483f      	ldr	r0, [pc, #252]	; (8003478 <UART_SetConfig+0x2a0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 800337a:	2600      	movs	r6, #0
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800337e:	f7ff f839 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003382:	2600      	movs	r6, #0
        break;
 8003384:	e009      	b.n	800339a <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003386:	f7fe fc1b 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
  HAL_StatusTypeDef ret               = HAL_OK;
 800338a:	2600      	movs	r6, #0
        break;
 800338c:	e005      	b.n	800339a <UART_SetConfig+0x1c2>
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800338e:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8003390:	2601      	movs	r6, #1
        break;
 8003392:	e002      	b.n	800339a <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003394:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 8003398:	2600      	movs	r6, #0
    if (lpuart_ker_ck_pres != 0U)
 800339a:	2800      	cmp	r0, #0
 800339c:	f000 80c9 	beq.w	8003532 <UART_SetConfig+0x35a>
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 80033a0:	6862      	ldr	r2, [r4, #4]
 80033a2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80033a6:	4298      	cmp	r0, r3
 80033a8:	f0c0 80f4 	bcc.w	8003594 <UART_SetConfig+0x3bc>
 80033ac:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80033b0:	f200 80f2 	bhi.w	8003598 <UART_SetConfig+0x3c0>
        switch (clocksource)
 80033b4:	2d08      	cmp	r5, #8
 80033b6:	d846      	bhi.n	8003446 <UART_SetConfig+0x26e>
 80033b8:	e8df f005 	tbb	[pc, r5]
 80033bc:	451f4505 	.word	0x451f4505
 80033c0:	45454529 	.word	0x45454529
 80033c4:	3b          	.byte	0x3b
 80033c5:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80033c6:	f7ff f815 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 80033ca:	2300      	movs	r3, #0
 80033cc:	ea4f 6910 	mov.w	r9, r0, lsr #24
 80033d0:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80033d4:	6862      	ldr	r2, [r4, #4]
 80033d6:	0850      	lsrs	r0, r2, #1
 80033d8:	eb18 0b00 	adds.w	fp, r8, r0
 80033dc:	f149 0c00 	adc.w	ip, r9, #0
 80033e0:	4658      	mov	r0, fp
 80033e2:	4661      	mov	r1, ip
 80033e4:	f7fc fef6 	bl	80001d4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033e8:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80033ec:	4b23      	ldr	r3, [pc, #140]	; (800347c <UART_SetConfig+0x2a4>)
 80033ee:	429a      	cmp	r2, r3
 80033f0:	f200 80d4 	bhi.w	800359c <UART_SetConfig+0x3c4>
          huart->Instance->BRR = usartdiv;
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	60d8      	str	r0, [r3, #12]
 80033f8:	e09b      	b.n	8003532 <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80033fa:	0855      	lsrs	r5, r2, #1
 80033fc:	2300      	movs	r3, #0
 80033fe:	4820      	ldr	r0, [pc, #128]	; (8003480 <UART_SetConfig+0x2a8>)
 8003400:	2100      	movs	r1, #0
 8003402:	1940      	adds	r0, r0, r5
 8003404:	f141 0100 	adc.w	r1, r1, #0
 8003408:	f7fc fee4 	bl	80001d4 <__aeabi_uldivmod>
            break;
 800340c:	e7ec      	b.n	80033e8 <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800340e:	f7fe fbd7 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8003412:	2300      	movs	r3, #0
 8003414:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8003418:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800341c:	6862      	ldr	r2, [r4, #4]
 800341e:	0850      	lsrs	r0, r2, #1
 8003420:	eb18 0b00 	adds.w	fp, r8, r0
 8003424:	f149 0c00 	adc.w	ip, r9, #0
 8003428:	4658      	mov	r0, fp
 800342a:	4661      	mov	r1, ip
 800342c:	f7fc fed2 	bl	80001d4 <__aeabi_uldivmod>
            break;
 8003430:	e7da      	b.n	80033e8 <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003432:	0850      	lsrs	r0, r2, #1
 8003434:	2100      	movs	r1, #0
 8003436:	2300      	movs	r3, #0
 8003438:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800343c:	f141 0100 	adc.w	r1, r1, #0
 8003440:	f7fc fec8 	bl	80001d4 <__aeabi_uldivmod>
            break;
 8003444:	e7d0      	b.n	80033e8 <UART_SetConfig+0x210>
            ret = HAL_ERROR;
 8003446:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003448:	2000      	movs	r0, #0
 800344a:	e7cd      	b.n	80033e8 <UART_SetConfig+0x210>
    switch (clocksource)
 800344c:	2d08      	cmp	r5, #8
 800344e:	d85c      	bhi.n	800350a <UART_SetConfig+0x332>
 8003450:	e8df f005 	tbb	[pc, r5]
 8003454:	5b3c3118 	.word	0x5b3c3118
 8003458:	5b5b5b47 	.word	0x5b5b5b47
 800345c:	52          	.byte	0x52
 800345d:	00          	.byte	0x00
 800345e:	bf00      	nop
 8003460:	efff69f3 	.word	0xefff69f3
 8003464:	40008000 	.word	0x40008000
 8003468:	40013800 	.word	0x40013800
 800346c:	40004400 	.word	0x40004400
 8003470:	40004800 	.word	0x40004800
 8003474:	40004c00 	.word	0x40004c00
 8003478:	00f42400 	.word	0x00f42400
 800347c:	000ffcff 	.word	0x000ffcff
 8003480:	f4240000 	.word	0xf4240000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003484:	f7fe ffb6 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 8003488:	6862      	ldr	r2, [r4, #4]
 800348a:	0853      	lsrs	r3, r2, #1
 800348c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003490:	fbb3 f3f2 	udiv	r3, r3, r2
 8003494:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003496:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003498:	f1a3 0110 	sub.w	r1, r3, #16
 800349c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80034a0:	4291      	cmp	r1, r2
 80034a2:	d87d      	bhi.n	80035a0 <UART_SetConfig+0x3c8>
      brrtemp = usartdiv & 0xFFF0U;
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034aa:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80034ae:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	60d3      	str	r3, [r2, #12]
 80034b4:	e03d      	b.n	8003532 <UART_SetConfig+0x35a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80034b6:	f7fe ffad 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 80034ba:	6862      	ldr	r2, [r4, #4]
 80034bc:	0853      	lsrs	r3, r2, #1
 80034be:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80034c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80034c6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034c8:	2600      	movs	r6, #0
        break;
 80034ca:	e7e5      	b.n	8003498 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80034cc:	6862      	ldr	r2, [r4, #4]
 80034ce:	0853      	lsrs	r3, r2, #1
 80034d0:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80034d4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80034d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80034dc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034de:	2600      	movs	r6, #0
        break;
 80034e0:	e7da      	b.n	8003498 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034e2:	f7fe fb6d 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 80034e6:	6862      	ldr	r2, [r4, #4]
 80034e8:	0853      	lsrs	r3, r2, #1
 80034ea:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80034ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80034f2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034f4:	2600      	movs	r6, #0
        break;
 80034f6:	e7cf      	b.n	8003498 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034f8:	6862      	ldr	r2, [r4, #4]
 80034fa:	0853      	lsrs	r3, r2, #1
 80034fc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003500:	fbb3 f3f2 	udiv	r3, r3, r2
 8003504:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003506:	2600      	movs	r6, #0
        break;
 8003508:	e7c6      	b.n	8003498 <UART_SetConfig+0x2c0>
        ret = HAL_ERROR;
 800350a:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 800350c:	2300      	movs	r3, #0
 800350e:	e7c3      	b.n	8003498 <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003510:	f7fe ff70 	bl	80023f4 <HAL_RCC_GetPCLK1Freq>
 8003514:	6863      	ldr	r3, [r4, #4]
 8003516:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800351a:	fbb0 f0f3 	udiv	r0, r0, r3
 800351e:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003520:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003522:	f1a0 0210 	sub.w	r2, r0, #16
 8003526:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800352a:	429a      	cmp	r2, r3
 800352c:	d83a      	bhi.n	80035a4 <UART_SetConfig+0x3cc>
      huart->Instance->BRR = usartdiv;
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003536:	6663      	str	r3, [r4, #100]	; 0x64
}
 8003538:	4630      	mov	r0, r6
 800353a:	e8bd 8b78 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800353e:	f7fe ff69 	bl	8002414 <HAL_RCC_GetPCLK2Freq>
 8003542:	6863      	ldr	r3, [r4, #4]
 8003544:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003548:	fbb0 f0f3 	udiv	r0, r0, r3
 800354c:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800354e:	2600      	movs	r6, #0
        break;
 8003550:	e7e7      	b.n	8003522 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003552:	6863      	ldr	r3, [r4, #4]
 8003554:	0858      	lsrs	r0, r3, #1
 8003556:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 800355a:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 800355e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003562:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003564:	2600      	movs	r6, #0
        break;
 8003566:	e7dc      	b.n	8003522 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003568:	f7fe fb2a 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 800356c:	6863      	ldr	r3, [r4, #4]
 800356e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003572:	fbb0 f0f3 	udiv	r0, r0, r3
 8003576:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8003578:	2600      	movs	r6, #0
        break;
 800357a:	e7d2      	b.n	8003522 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800357c:	6863      	ldr	r3, [r4, #4]
 800357e:	0858      	lsrs	r0, r3, #1
 8003580:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8003584:	fbb0 f0f3 	udiv	r0, r0, r3
 8003588:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800358a:	2600      	movs	r6, #0
        break;
 800358c:	e7c9      	b.n	8003522 <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 800358e:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003590:	2000      	movs	r0, #0
 8003592:	e7c6      	b.n	8003522 <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 8003594:	2601      	movs	r6, #1
 8003596:	e7cc      	b.n	8003532 <UART_SetConfig+0x35a>
 8003598:	2601      	movs	r6, #1
 800359a:	e7ca      	b.n	8003532 <UART_SetConfig+0x35a>
          ret = HAL_ERROR;
 800359c:	2601      	movs	r6, #1
 800359e:	e7c8      	b.n	8003532 <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 80035a0:	2601      	movs	r6, #1
 80035a2:	e7c6      	b.n	8003532 <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 80035a4:	2601      	movs	r6, #1
 80035a6:	e7c4      	b.n	8003532 <UART_SetConfig+0x35a>

080035a8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035aa:	f013 0f01 	tst.w	r3, #1
 80035ae:	d006      	beq.n	80035be <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035b0:	6802      	ldr	r2, [r0, #0]
 80035b2:	6853      	ldr	r3, [r2, #4]
 80035b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80035b8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80035ba:	430b      	orrs	r3, r1
 80035bc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035c0:	f013 0f02 	tst.w	r3, #2
 80035c4:	d006      	beq.n	80035d4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035c6:	6802      	ldr	r2, [r0, #0]
 80035c8:	6853      	ldr	r3, [r2, #4]
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ce:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035d6:	f013 0f04 	tst.w	r3, #4
 80035da:	d006      	beq.n	80035ea <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035dc:	6802      	ldr	r2, [r0, #0]
 80035de:	6853      	ldr	r3, [r2, #4]
 80035e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035ec:	f013 0f08 	tst.w	r3, #8
 80035f0:	d006      	beq.n	8003600 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035f2:	6802      	ldr	r2, [r0, #0]
 80035f4:	6853      	ldr	r3, [r2, #4]
 80035f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035fa:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003600:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003602:	f013 0f10 	tst.w	r3, #16
 8003606:	d006      	beq.n	8003616 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003608:	6802      	ldr	r2, [r0, #0]
 800360a:	6893      	ldr	r3, [r2, #8]
 800360c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003610:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003612:	430b      	orrs	r3, r1
 8003614:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003616:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003618:	f013 0f20 	tst.w	r3, #32
 800361c:	d006      	beq.n	800362c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800361e:	6802      	ldr	r2, [r0, #0]
 8003620:	6893      	ldr	r3, [r2, #8]
 8003622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003626:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003628:	430b      	orrs	r3, r1
 800362a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800362c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800362e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003634:	6802      	ldr	r2, [r0, #0]
 8003636:	6853      	ldr	r3, [r2, #4]
 8003638:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800363c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800363e:	430b      	orrs	r3, r1
 8003640:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003642:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003648:	d00b      	beq.n	8003662 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800364a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800364c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003650:	d006      	beq.n	8003660 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003652:	6802      	ldr	r2, [r0, #0]
 8003654:	6853      	ldr	r3, [r2, #4]
 8003656:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800365a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800365c:	430b      	orrs	r3, r1
 800365e:	6053      	str	r3, [r2, #4]
 8003660:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003662:	6802      	ldr	r2, [r0, #0]
 8003664:	6853      	ldr	r3, [r2, #4]
 8003666:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800366a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800366c:	430b      	orrs	r3, r1
 800366e:	6053      	str	r3, [r2, #4]
 8003670:	e7eb      	b.n	800364a <UART_AdvFeatureConfig+0xa2>

08003672 <UART_WaitOnFlagUntilTimeout>:
{
 8003672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003676:	4605      	mov	r5, r0
 8003678:	460f      	mov	r7, r1
 800367a:	4616      	mov	r6, r2
 800367c:	4698      	mov	r8, r3
 800367e:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003680:	682b      	ldr	r3, [r5, #0]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	ea37 0303 	bics.w	r3, r7, r3
 8003688:	bf0c      	ite	eq
 800368a:	2301      	moveq	r3, #1
 800368c:	2300      	movne	r3, #0
 800368e:	42b3      	cmp	r3, r6
 8003690:	d11e      	bne.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8003692:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003696:	d0f3      	beq.n	8003680 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003698:	b12c      	cbz	r4, 80036a6 <UART_WaitOnFlagUntilTimeout+0x34>
 800369a:	f7fe f87b 	bl	8001794 <HAL_GetTick>
 800369e:	eba0 0008 	sub.w	r0, r0, r8
 80036a2:	4284      	cmp	r4, r0
 80036a4:	d2ec      	bcs.n	8003680 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a6:	682a      	ldr	r2, [r5, #0]
 80036a8:	6813      	ldr	r3, [r2, #0]
 80036aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036ae:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b0:	682a      	ldr	r2, [r5, #0]
 80036b2:	6893      	ldr	r3, [r2, #8]
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80036ba:	2320      	movs	r3, #32
 80036bc:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80036c0:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80036c4:	2300      	movs	r3, #0
 80036c6:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 80036ca:	2003      	movs	r0, #3
 80036cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80036d0:	2000      	movs	r0, #0
}
 80036d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080036d6 <UART_CheckIdleState>:
{
 80036d6:	b530      	push	{r4, r5, lr}
 80036d8:	b083      	sub	sp, #12
 80036da:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	2300      	movs	r3, #0
 80036de:	6743      	str	r3, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80036e0:	f7fe f858 	bl	8001794 <HAL_GetTick>
 80036e4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f013 0f08 	tst.w	r3, #8
 80036ee:	d10e      	bne.n	800370e <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f013 0f04 	tst.w	r3, #4
 80036f8:	d117      	bne.n	800372a <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 80036fa:	2320      	movs	r3, #32
 80036fc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 8003700:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 8003704:	2000      	movs	r0, #0
 8003706:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800370a:	b003      	add	sp, #12
 800370c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800370e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	4603      	mov	r3, r0
 8003716:	2200      	movs	r2, #0
 8003718:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff ffa8 	bl	8003672 <UART_WaitOnFlagUntilTimeout>
 8003722:	2800      	cmp	r0, #0
 8003724:	d0e4      	beq.n	80036f0 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003726:	2003      	movs	r0, #3
 8003728:	e7ef      	b.n	800370a <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	462b      	mov	r3, r5
 8003732:	2200      	movs	r2, #0
 8003734:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003738:	4620      	mov	r0, r4
 800373a:	f7ff ff9a 	bl	8003672 <UART_WaitOnFlagUntilTimeout>
 800373e:	2800      	cmp	r0, #0
 8003740:	d0db      	beq.n	80036fa <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003742:	2003      	movs	r0, #3
 8003744:	e7e1      	b.n	800370a <UART_CheckIdleState+0x34>

08003746 <HAL_UART_Init>:
  if (huart == NULL)
 8003746:	b378      	cbz	r0, 80037a8 <HAL_UART_Init+0x62>
{
 8003748:	b510      	push	{r4, lr}
 800374a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800374c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003750:	b30b      	cbz	r3, 8003796 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003752:	2324      	movs	r3, #36	; 0x24
 8003754:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	6813      	ldr	r3, [r2, #0]
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff fd38 	bl	80031d8 <UART_SetConfig>
 8003768:	2801      	cmp	r0, #1
 800376a:	d01f      	beq.n	80037ac <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800376c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800376e:	b9bb      	cbnz	r3, 80037a0 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003770:	6822      	ldr	r2, [r4, #0]
 8003772:	6853      	ldr	r3, [r2, #4]
 8003774:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003778:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377a:	6822      	ldr	r2, [r4, #0]
 800377c:	6893      	ldr	r3, [r2, #8]
 800377e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003782:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800378e:	4620      	mov	r0, r4
 8003790:	f7ff ffa1 	bl	80036d6 <UART_CheckIdleState>
 8003794:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003796:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800379a:	f7fd fe47 	bl	800142c <HAL_UART_MspInit>
 800379e:	e7d8      	b.n	8003752 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff ff01 	bl	80035a8 <UART_AdvFeatureConfig>
 80037a6:	e7e3      	b.n	8003770 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80037a8:	2001      	movs	r0, #1
 80037aa:	4770      	bx	lr
}
 80037ac:	bd10      	pop	{r4, pc}

080037ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80037ae:	4770      	bx	lr

080037b0 <__libc_init_array>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	4e0d      	ldr	r6, [pc, #52]	; (80037e8 <__libc_init_array+0x38>)
 80037b4:	4c0d      	ldr	r4, [pc, #52]	; (80037ec <__libc_init_array+0x3c>)
 80037b6:	1ba4      	subs	r4, r4, r6
 80037b8:	10a4      	asrs	r4, r4, #2
 80037ba:	2500      	movs	r5, #0
 80037bc:	42a5      	cmp	r5, r4
 80037be:	d109      	bne.n	80037d4 <__libc_init_array+0x24>
 80037c0:	4e0b      	ldr	r6, [pc, #44]	; (80037f0 <__libc_init_array+0x40>)
 80037c2:	4c0c      	ldr	r4, [pc, #48]	; (80037f4 <__libc_init_array+0x44>)
 80037c4:	f000 f818 	bl	80037f8 <_init>
 80037c8:	1ba4      	subs	r4, r4, r6
 80037ca:	10a4      	asrs	r4, r4, #2
 80037cc:	2500      	movs	r5, #0
 80037ce:	42a5      	cmp	r5, r4
 80037d0:	d105      	bne.n	80037de <__libc_init_array+0x2e>
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037d8:	4798      	blx	r3
 80037da:	3501      	adds	r5, #1
 80037dc:	e7ee      	b.n	80037bc <__libc_init_array+0xc>
 80037de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037e2:	4798      	blx	r3
 80037e4:	3501      	adds	r5, #1
 80037e6:	e7f2      	b.n	80037ce <__libc_init_array+0x1e>
 80037e8:	080039ec 	.word	0x080039ec
 80037ec:	080039ec 	.word	0x080039ec
 80037f0:	080039ec 	.word	0x080039ec
 80037f4:	080039f0 	.word	0x080039f0

080037f8 <_init>:
 80037f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fa:	bf00      	nop
 80037fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fe:	bc08      	pop	{r3}
 8003800:	469e      	mov	lr, r3
 8003802:	4770      	bx	lr

08003804 <_fini>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	bf00      	nop
 8003808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380a:	bc08      	pop	{r3}
 800380c:	469e      	mov	lr, r3
 800380e:	4770      	bx	lr
