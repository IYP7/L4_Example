
L4_Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d0  20000000  080074bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram2         00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
  8 .bss          00000cf4  200001d0  200001d0  000201d0  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000ec4  20000ec4  000201d0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00045ee1  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008f42  00000000  00000000  000660e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001cb8  00000000  00000000  0006f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019b8  00000000  00000000  00070ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00015428  00000000  00000000  00072698  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00009a02  00000000  00000000  00087ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000914c2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004918  00000000  00000000  00091540  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000101bc  00000000  00000000  00095e58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a54 	.word	0x08006a54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	08006a54 	.word	0x08006a54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
 *
 * @details Initializes applications.
 * @details Call system application to execute active applications.
 ****************************************************************************/
int  main()
{
 80005a0:	b508      	push	{r3, lr}
	/* Call to initial specific platform configuration */
    systemPreConfiguration();
 80005a2:	f002 fc74 	bl	8002e8e <systemPreConfiguration>

	/* Applications Initialization */
    SchedulerInit();
 80005a6:	f000 fb2d 	bl	8000c04 <SchedulerInit>

    while (TRUE)
    {
        SchedulerNextSystemProcess();
 80005aa:	f000 fbd9 	bl	8000d60 <SchedulerNextSystemProcess>
 80005ae:	e7fc      	b.n	80005aa <main+0xa>

080005b0 <initSystemApp>:
 *
 * @details Initializes HREG and SREG layers.
 * @details Initializes all applications
 ****************************************************************************/
void initSystemApp( void )
{
 80005b0:	b508      	push	{r3, lr}
    requestPowerState = POWER_STATE_NO_REQUEST;
 80005b2:	2200      	movs	r2, #0
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <initSystemApp+0x10>)
 80005b6:	701a      	strb	r2, [r3, #0]

    initSregAll();    /* Initialise the SREG layer */
 80005b8:	f000 faa6 	bl	8000b08 <initSregAll>
 80005bc:	bd08      	pop	{r3, pc}
 80005be:	bf00      	nop
 80005c0:	2000049c 	.word	0x2000049c

080005c4 <callSystemApp>:
 *
 * @details depending on current state, executes active applications.
 * @details calls system middleware task
 ****************************************************************************/
void callSystemApp( void )
{
 80005c4:	b508      	push	{r3, lr}
    uint8_t systemState;

    /* HAL TEST */
    // GPIO
    GPIOWritePort(GPIO_LED_1, GPIO_TOGGLE);
 80005c6:	2102      	movs	r1, #2
 80005c8:	2000      	movs	r0, #0
 80005ca:	f002 f8b7 	bl	800273c <GPIOWritePort>
	req.timeoutRetries = 0;
	req.command = (uint8_t *)"AT+CGCLASS=1,0,0,\"movistar.com\"";
    /* END HAL TEST */

    /* System state machine */
    systemState = READ_SREG(SREG_SYSTEM_STATE);
 80005ce:	2004      	movs	r0, #4
 80005d0:	f000 fab9 	bl	8000b46 <readSreg>
 80005d4:	b2c1      	uxtb	r1, r0
    //systemState = SYSTEM_APP_INIT_SHELL;
    switch ( systemState )
 80005d6:	2904      	cmp	r1, #4
 80005d8:	d830      	bhi.n	800063c <callSystemApp+0x78>
 80005da:	e8df f001 	tbb	[pc, r1]
 80005de:	032e      	.short	0x032e
 80005e0:	2f10      	.short	0x2f10
 80005e2:	07          	.byte	0x07
 80005e3:	00          	.byte	0x00
			systemState = SYSTEM_APP_INIT;
			break;
        
		case SYSTEM_APP_INIT:
			/* Application init dispather */
			AtCommandStart();
 80005e4:	f001 fc7c 	bl	8001ee0 <AtCommandStart>
			systemState = SYSTEM_APP_ON;
 80005e8:	2102      	movs	r1, #2
            break;
 80005ea:	e027      	b.n	800063c <callSystemApp+0x78>

        case SYSTEM_APP_SLEPT:
			/* Application sleep dispather */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_WAKE_UP ) 
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <callSystemApp+0x80>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d123      	bne.n	800063c <callSystemApp+0x78>
            {
				/* Wake up */
                systemState = SYSTEM_APP_ON;
                requestPowerState = POWER_STATE_NO_REQUEST;
 80005f4:	2100      	movs	r1, #0
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <callSystemApp+0x80>)
 80005f8:	7011      	strb	r1, [r2, #0]
                systemState = SYSTEM_APP_ON;
 80005fa:	4619      	mov	r1, r3
 80005fc:	e01e      	b.n	800063c <callSystemApp+0x78>
//        		{
//        			x=1;
//        		}
//        	}
			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_START_SHUTDOWN )
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <callSystemApp+0x80>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d007      	beq.n	8000616 <callSystemApp+0x52>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
                
                /* Power off */
                systemState = SYSTEM_APP_POWER_OFF;
            }
            else if ( requestPowerState == POWER_STATE_GO_TO_SLEEP )
 8000606:	2b03      	cmp	r3, #3
 8000608:	d00b      	beq.n	8000622 <callSystemApp+0x5e>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
                
                /* Slept */
                systemState = SYSTEM_APP_SLEPT;
            }
            else if ( requestPowerState == POWER_STATE_REBOOT )
 800060a:	2b04      	cmp	r3, #4
 800060c:	d00f      	beq.n	800062e <callSystemApp+0x6a>
                systemState = SYSTEM_APP_REBOOT;
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
            }
            
            /* Reset power state request */
            requestPowerState = POWER_STATE_NO_REQUEST;
 800060e:	2200      	movs	r2, #0
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <callSystemApp+0x80>)
 8000612:	701a      	strb	r2, [r3, #0]
            break;
 8000614:	e012      	b.n	800063c <callSystemApp+0x78>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
 8000616:	210a      	movs	r1, #10
 8000618:	2005      	movs	r0, #5
 800061a:	f000 fab4 	bl	8000b86 <writeSreg>
                systemState = SYSTEM_APP_POWER_OFF;
 800061e:	2103      	movs	r1, #3
 8000620:	e7f5      	b.n	800060e <callSystemApp+0x4a>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
 8000622:	2101      	movs	r1, #1
 8000624:	2005      	movs	r0, #5
 8000626:	f000 faae 	bl	8000b86 <writeSreg>
                systemState = SYSTEM_APP_SLEPT;
 800062a:	2104      	movs	r1, #4
 800062c:	e7ef      	b.n	800060e <callSystemApp+0x4a>
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
 800062e:	2103      	movs	r1, #3
 8000630:	2005      	movs	r0, #5
 8000632:	f000 faa8 	bl	8000b86 <writeSreg>
                systemState = SYSTEM_APP_REBOOT;
 8000636:	2105      	movs	r1, #5
 8000638:	e7e9      	b.n	800060e <callSystemApp+0x4a>
			systemState = SYSTEM_APP_INIT;
 800063a:	2101      	movs	r1, #1
			break;
        
    }
    
    /* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
 800063c:	2004      	movs	r0, #4
 800063e:	f000 faa2 	bl	8000b86 <writeSreg>
 8000642:	bd08      	pop	{r3, pc}
 8000644:	2000049c 	.word	0x2000049c

08000648 <requestSystemAppPowerState>:
 * 
 * @return  None  
 ****************************************************************************/
void requestSystemAppPowerState( uint8_t powerState )
{
    requestPowerState = powerState;
 8000648:	4b01      	ldr	r3, [pc, #4]	; (8000650 <requestSystemAppPowerState+0x8>)
 800064a:	7018      	strb	r0, [r3, #0]
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	2000049c 	.word	0x2000049c

08000654 <ATLTECallback>:
	/* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
}

void ATLTECallback(tAtResponseID eventID, uint8_t *buffer, uint16_t length)
{
 8000654:	4770      	bx	lr

08000656 <ATGPSCallback>:
//	uartDriverSetBufferSize((tUart)UART_2, length);
//	uartDriverWrite((tUart)UART_2, (uint8_t*)buffer);
}

void ATGPSCallback(tAtResponseID eventID, uint8_t *buffer, uint16_t length)
{
 8000656:	4770      	bx	lr

08000658 <initHregAll>:
 *
 * @return  None.
 *
 ****************************************************************************/
void initHregAll( void )
{
 8000658:	b538      	push	{r3, r4, r5, lr}
	uint16_t i = 0;
 800065a:	2400      	movs	r4, #0

    /* Init function call */
    while ( i < HREG_GROUP_INDEX_MAX )
 800065c:	e004      	b.n	8000668 <initHregAll+0x10>
    {
    	if ( apiFuncHregGroup[i].Init != HREG_NULL )
    	{
    		apiFuncHregGroup[i].Init();
    	}
        hregGroupsState[i].hregGroupEnabled = HREG_GROUP_INIT;
 800065e:	2200      	movs	r2, #0
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <initHregAll+0x2c>)
 8000662:	555a      	strb	r2, [r3, r5]
        i++;
 8000664:	3401      	adds	r4, #1
 8000666:	b2a4      	uxth	r4, r4
    while ( i < HREG_GROUP_INDEX_MAX )
 8000668:	2c07      	cmp	r4, #7
 800066a:	d809      	bhi.n	8000680 <initHregAll+0x28>
    	if ( apiFuncHregGroup[i].Init != HREG_NULL )
 800066c:	4625      	mov	r5, r4
 800066e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000672:	0093      	lsls	r3, r2, #2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <initHregAll+0x30>)
 8000676:	58d3      	ldr	r3, [r2, r3]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d0f0      	beq.n	800065e <initHregAll+0x6>
    		apiFuncHregGroup[i].Init();
 800067c:	4798      	blx	r3
 800067e:	e7ee      	b.n	800065e <initHregAll+0x6>
    }
}
 8000680:	bd38      	pop	{r3, r4, r5, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000
 8000688:	08006abc 	.word	0x08006abc

0800068c <stopHregGroupAll>:
 *
 * @return  None.
 *
 ****************************************************************************/
void stopHregGroupAll( void )
{
 800068c:	b538      	push	{r3, r4, r5, lr}
    int16_t i = 0;

    /* Stop function call from bottom to top */
    for ( i = HREG_GROUP_INDEX_MAX - 1; i >= 0; i--)
 800068e:	2407      	movs	r4, #7
 8000690:	e004      	b.n	800069c <stopHregGroupAll+0x10>
    {
    	if ( apiFuncHregGroup[i].Stop != HREG_NULL )
    	{
    		apiFuncHregGroup[i].Stop();
    	}
        hregGroupsState[i].hregGroupEnabled = HREG_GROUP_STOPPED;
 8000692:	2201      	movs	r2, #1
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <stopHregGroupAll+0x2c>)
 8000696:	555a      	strb	r2, [r3, r5]
    for ( i = HREG_GROUP_INDEX_MAX - 1; i >= 0; i--)
 8000698:	3c01      	subs	r4, #1
 800069a:	b224      	sxth	r4, r4
 800069c:	2c00      	cmp	r4, #0
 800069e:	db0a      	blt.n	80006b6 <stopHregGroupAll+0x2a>
    	if ( apiFuncHregGroup[i].Stop != HREG_NULL )
 80006a0:	4625      	mov	r5, r4
 80006a2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80006a6:	009a      	lsls	r2, r3, #2
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <stopHregGroupAll+0x30>)
 80006aa:	4413      	add	r3, r2
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0ef      	beq.n	8000692 <stopHregGroupAll+0x6>
    		apiFuncHregGroup[i].Stop();
 80006b2:	4798      	blx	r3
 80006b4:	e7ed      	b.n	8000692 <stopHregGroupAll+0x6>
    }
}
 80006b6:	bd38      	pop	{r3, r4, r5, pc}
 80006b8:	20000000 	.word	0x20000000
 80006bc:	08006abc 	.word	0x08006abc

080006c0 <startHregGroupAll>:
 *
 * @return  None.
 *
 ****************************************************************************/
void startHregGroupAll( void )
{
 80006c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifdef EEPROM_HREG_SUPPORT
    uint8_t  updateNVM = FALSE;
#endif //EEPROM_HREG_SUPPORT

    /* Initialize HREG value */
	numOfHregs = 0;
 80006c4:	f04f 0800 	mov.w	r8, #0
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <startHregGroupAll+0x98>)
 80006ca:	f883 8000 	strb.w	r8, [r3]

	for ( groupType = 0; groupType < NUM_OF_HREG_GROUP_TYPES; groupType++)
 80006ce:	e03b      	b.n	8000748 <startHregGroupAll+0x88>
						}
#else //EEPROM_HREG_SUPPORT
						value = hregPtr->Init;
#endif //EEPROM_HREG_SUPPORT
						//writeHreg(instance, hregPtr, value);
						hregFunc.Write( instance, hregPtr, value );
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <startHregGroupAll+0x9c>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	68ea      	ldr	r2, [r5, #12]
 80006d6:	4629      	mov	r1, r5
 80006d8:	4620      	mov	r0, r4
 80006da:	4798      	blx	r3
					for(instance = 0; instance < hregTableList[i].NumInstances; instance++)
 80006dc:	3401      	adds	r4, #1
 80006de:	b2e4      	uxtb	r4, r4
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <startHregGroupAll+0xa0>)
 80006e2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80006e6:	795b      	ldrb	r3, [r3, #5]
 80006e8:	429c      	cmp	r4, r3
 80006ea:	d3f1      	bcc.n	80006d0 <startHregGroupAll+0x10>
				for ( hregPtr = hregTableList[i].TableHreg; hregPtr < hregTableList[i].TableHreg + hregTableList[i].TableSize; hregPtr++ )
 80006ec:	3514      	adds	r5, #20
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <startHregGroupAll+0xa0>)
 80006f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80006fa:	009a      	lsls	r2, r3, #2
 80006fc:	443a      	add	r2, r7
 80006fe:	4295      	cmp	r5, r2
 8000700:	d205      	bcs.n	800070e <startHregGroupAll+0x4e>
					numOfHregs++;
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <startHregGroupAll+0x98>)
 8000704:	7813      	ldrb	r3, [r2, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	7013      	strb	r3, [r2, #0]
					for(instance = 0; instance < hregTableList[i].NumInstances; instance++)
 800070a:	2400      	movs	r4, #0
 800070c:	e7e8      	b.n	80006e0 <startHregGroupAll+0x20>
					}
				}
				if ( apiFuncHregGroup[i].Start != HREG_NULL )
 800070e:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000712:	009a      	lsls	r2, r3, #2
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <startHregGroupAll+0xa4>)
 8000716:	4413      	add	r3, r2
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	b103      	cbz	r3, 800071e <startHregGroupAll+0x5e>
				{
					apiFuncHregGroup[i].Start();
 800071c:	4798      	blx	r3
				}
				hregGroupsState[i].hregGroupEnabled = HREG_GROUP_STARTED;
 800071e:	2202      	movs	r2, #2
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <startHregGroupAll+0xa8>)
 8000722:	559a      	strb	r2, [r3, r6]
			}
			i++;
 8000724:	3601      	adds	r6, #1
		while (  i < HREG_GROUP_INDEX_MAX )
 8000726:	2e07      	cmp	r6, #7
 8000728:	d80a      	bhi.n	8000740 <startHregGroupAll+0x80>
			if ( hregTableList[i].GroupType == groupType )
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <startHregGroupAll+0xa0>)
 800072c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8000730:	799b      	ldrb	r3, [r3, #6]
 8000732:	4598      	cmp	r8, r3
 8000734:	d1f6      	bne.n	8000724 <startHregGroupAll+0x64>
				for ( hregPtr = hregTableList[i].TableHreg; hregPtr < hregTableList[i].TableHreg + hregTableList[i].TableSize; hregPtr++ )
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <startHregGroupAll+0xa0>)
 8000738:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 800073c:	463d      	mov	r5, r7
 800073e:	e7d6      	b.n	80006ee <startHregGroupAll+0x2e>
	for ( groupType = 0; groupType < NUM_OF_HREG_GROUP_TYPES; groupType++)
 8000740:	f108 0801 	add.w	r8, r8, #1
 8000744:	fa5f f888 	uxtb.w	r8, r8
 8000748:	f1b8 0f02 	cmp.w	r8, #2
 800074c:	d801      	bhi.n	8000752 <startHregGroupAll+0x92>
 800074e:	2600      	movs	r6, #0
 8000750:	e7e9      	b.n	8000726 <startHregGroupAll+0x66>
    if ( updateNVM == TRUE )
    {
    	VirtualEEPROMWriteRegister(EEPROM_HREG, EEPROM_HREG_MAP, UNIQUE_INSTANCE, NVM_HREG_MAP_VERSION);
    }
#endif //EEPROM_HREG_SUPPORT
}
 8000752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000756:	bf00      	nop
 8000758:	200001ec 	.word	0x200001ec
 800075c:	08006b5c 	.word	0x08006b5c
 8000760:	08006b64 	.word	0x08006b64
 8000764:	08006abc 	.word	0x08006abc
 8000768:	20000000 	.word	0x20000000

0800076c <sleepHregGroupAll>:
 *
 * @return  None.
 *
 ****************************************************************************/
void sleepHregGroupAll( void )
{
 800076c:	b510      	push	{r4, lr}
    int16_t i = 0;

    /* Stop function call from bottom to top */
    for ( i = HREG_GROUP_INDEX_MAX - 1; i >= 0; i--)
 800076e:	2407      	movs	r4, #7
 8000770:	e00b      	b.n	800078a <sleepHregGroupAll+0x1e>
    {
        apiFuncHregGroup[i].Sleep();
 8000772:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000776:	009a      	lsls	r2, r3, #2
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <sleepHregGroupAll+0x24>)
 800077a:	4413      	add	r3, r2
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	4798      	blx	r3
        hregGroupsState[i].hregGroupEnabled = HREG_GROUP_SLEPT;
 8000780:	2203      	movs	r2, #3
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <sleepHregGroupAll+0x28>)
 8000784:	551a      	strb	r2, [r3, r4]
    for ( i = HREG_GROUP_INDEX_MAX - 1; i >= 0; i--)
 8000786:	3c01      	subs	r4, #1
 8000788:	b224      	sxth	r4, r4
 800078a:	2c00      	cmp	r4, #0
 800078c:	daf1      	bge.n	8000772 <sleepHregGroupAll+0x6>
    }
}
 800078e:	bd10      	pop	{r4, pc}
 8000790:	08006abc 	.word	0x08006abc
 8000794:	20000000 	.word	0x20000000

08000798 <wakeHregGroupAll>:
 *
 * @return  None.
 *
 ****************************************************************************/
void wakeHregGroupAll( void )
{
 8000798:	b510      	push	{r4, lr}
    uint16_t i = 0;
 800079a:	2400      	movs	r4, #0

    /* Stop function call */
    while ( apiFuncHregGroup[i].Wake != HREG_NULL )
 800079c:	e005      	b.n	80007aa <wakeHregGroupAll+0x12>
    {
        apiFuncHregGroup[i].Wake();
 800079e:	4798      	blx	r3
        hregGroupsState[i].hregGroupEnabled = HREG_GROUP_STARTED;
 80007a0:	2202      	movs	r2, #2
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <wakeHregGroupAll+0x24>)
 80007a4:	551a      	strb	r2, [r3, r4]
        i++;
 80007a6:	3401      	adds	r4, #1
 80007a8:	b2a4      	uxth	r4, r4
    while ( apiFuncHregGroup[i].Wake != HREG_NULL )
 80007aa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80007ae:	009a      	lsls	r2, r3, #2
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <wakeHregGroupAll+0x28>)
 80007b2:	4413      	add	r3, r2
 80007b4:	691b      	ldr	r3, [r3, #16]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f1      	bne.n	800079e <wakeHregGroupAll+0x6>
    }
}
 80007ba:	bd10      	pop	{r4, pc}
 80007bc:	20000000 	.word	0x20000000
 80007c0:	08006abc 	.word	0x08006abc

080007c4 <writeHreg>:
 *
 * @return  success or not.
 *
 ****************************************************************************/
eError writeHreg( uint8_t instance, const HREG *hregP , uint32_t value )
{
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	4607      	mov	r7, r0
 80007c8:	460c      	mov	r4, r1
    eError  result = RET_OK;
#ifdef MON_SHELL_COMMAND_VERBOSE_REGS
	uint16_t index = 0;
#endif // MON_SHELL_COMMAND_VERBOSE_REGS

    if ( value > hregP->Max )
 80007ca:	684e      	ldr	r6, [r1, #4]
 80007cc:	4296      	cmp	r6, r2
 80007ce:	d30f      	bcc.n	80007f0 <writeHreg+0x2c>
 80007d0:	4615      	mov	r5, r2
    {
        value = hregP->Max;
        printShellString((int8_t *)"HREG value adjusted to maximum\n", VERBOSE_WARNING);
    }
    else if ( value < hregP->Min )
 80007d2:	688e      	ldr	r6, [r1, #8]
 80007d4:	42b2      	cmp	r2, r6
 80007d6:	d311      	bcc.n	80007fc <writeHreg+0x38>
        value = hregP->Min;
        printShellString((int8_t *)"HREG value adjusted to minimum\n", VERBOSE_WARNING);
    }

    /* Check for OnWrite function */
    if ( ( hregP->OnWrite != HREG_NOP ) &&
 80007d8:	7c63      	ldrb	r3, [r4, #17]
 80007da:	2bff      	cmp	r3, #255	; 0xff
 80007dc:	d022      	beq.n	8000824 <writeHreg+0x60>
         ( hregGroupsState[hregP->GroupId].hregGroupEnabled == HREG_GROUP_STARTED ) &&
 80007de:	7ca3      	ldrb	r3, [r4, #18]
 80007e0:	4a15      	ldr	r2, [pc, #84]	; (8000838 <writeHreg+0x74>)
 80007e2:	5cd3      	ldrb	r3, [r2, r3]
    if ( ( hregP->OnWrite != HREG_NOP ) &&
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d00f      	beq.n	8000808 <writeHreg+0x44>
    eError  result = RET_OK;
 80007e8:	2000      	movs	r0, #0
         ( shellGetDebugState() == FALSE) )
    {
        result = onWriteHregFunc[hregP->OnWrite].Write(instance, hregP, value);
    }

    if ( result == RET_OK )
 80007ea:	b1e8      	cbz	r0, 8000828 <writeHreg+0x64>
#endif // MON_SHELL_COMMAND_VERBOSE_REGS

    }
    else
    {
    	result = RET_FAIL;
 80007ec:	2001      	movs	r0, #1
    }

    return result;
}
 80007ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        printShellString((int8_t *)"HREG value adjusted to maximum\n", VERBOSE_WARNING);
 80007f0:	2103      	movs	r1, #3
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <writeHreg+0x78>)
 80007f4:	f000 fc00 	bl	8000ff8 <printShellString>
        value = hregP->Max;
 80007f8:	4635      	mov	r5, r6
 80007fa:	e7ed      	b.n	80007d8 <writeHreg+0x14>
        printShellString((int8_t *)"HREG value adjusted to minimum\n", VERBOSE_WARNING);
 80007fc:	2103      	movs	r1, #3
 80007fe:	4810      	ldr	r0, [pc, #64]	; (8000840 <writeHreg+0x7c>)
 8000800:	f000 fbfa 	bl	8000ff8 <printShellString>
        value = hregP->Min;
 8000804:	4635      	mov	r5, r6
 8000806:	e7e7      	b.n	80007d8 <writeHreg+0x14>
         ( shellGetDebugState() == FALSE) )
 8000808:	f000 fd26 	bl	8001258 <shellGetDebugState>
         ( hregGroupsState[hregP->GroupId].hregGroupEnabled == HREG_GROUP_STARTED ) &&
 800080c:	b108      	cbz	r0, 8000812 <writeHreg+0x4e>
    eError  result = RET_OK;
 800080e:	2000      	movs	r0, #0
 8000810:	e7eb      	b.n	80007ea <writeHreg+0x26>
        result = onWriteHregFunc[hregP->OnWrite].Write(instance, hregP, value);
 8000812:	7c62      	ldrb	r2, [r4, #17]
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <writeHreg+0x80>)
 8000816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800081a:	462a      	mov	r2, r5
 800081c:	4621      	mov	r1, r4
 800081e:	4638      	mov	r0, r7
 8000820:	4798      	blx	r3
 8000822:	e7e2      	b.n	80007ea <writeHreg+0x26>
    eError  result = RET_OK;
 8000824:	2000      	movs	r0, #0
 8000826:	e7e0      	b.n	80007ea <writeHreg+0x26>
        result = hregFunc.Write( instance, hregP, value );
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <writeHreg+0x84>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	462a      	mov	r2, r5
 800082e:	4621      	mov	r1, r4
 8000830:	4638      	mov	r0, r7
 8000832:	4798      	blx	r3
 8000834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000836:	bf00      	nop
 8000838:	20000000 	.word	0x20000000
 800083c:	08006a7c 	.word	0x08006a7c
 8000840:	08006a9c 	.word	0x08006a9c
 8000844:	08006be4 	.word	0x08006be4
 8000848:	08006b5c 	.word	0x08006b5c

0800084c <writeShellHreg>:
 *
 * @return  success or not.
 *
 ****************************************************************************/
eError writeShellHreg( uint8_t instance, uint16_t hregIndex , uint32_t hregValue)
{
 800084c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000850:	4680      	mov	r8, r0
 8000852:	460d      	mov	r5, r1
 8000854:	4617      	mov	r7, r2
    uint8_t tablePointer = 0;
    uint16_t tableCount = 0;
    uint16_t previousTableCount = 0;
    uint8_t registerFound = FALSE;
    uint8_t result = RET_FAIL;
 8000856:	f04f 0e01 	mov.w	lr, #1
    uint8_t registerFound = FALSE;
 800085a:	2000      	movs	r0, #0
    uint16_t previousTableCount = 0;
 800085c:	4606      	mov	r6, r0
    uint16_t tableCount = 0;
 800085e:	4681      	mov	r9, r0
    uint8_t tablePointer = 0;
 8000860:	4604      	mov	r4, r0

    /* Table count */
    while ((hregTableList[tablePointer].TableHreg != HREG_NULL) && (registerFound == FALSE))
 8000862:	e00a      	b.n	800087a <writeShellHreg+0x2e>
    {
        tableCount += hregTableList[tablePointer].TableSize;
        if( hregIndex <= (tableCount - 1))
        {
            /* Group found */
            result = writeHreg(instance, &(hregTableList[tablePointer].TableHreg)[hregIndex-previousTableCount], hregValue);
 8000864:	1bab      	subs	r3, r5, r6
 8000866:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800086a:	0098      	lsls	r0, r3, #2
 800086c:	463a      	mov	r2, r7
 800086e:	4401      	add	r1, r0
 8000870:	4640      	mov	r0, r8
 8000872:	f7ff ffa7 	bl	80007c4 <writeHreg>
 8000876:	4686      	mov	lr, r0
            registerFound = TRUE;
 8000878:	2001      	movs	r0, #1
    while ((hregTableList[tablePointer].TableHreg != HREG_NULL) && (registerFound == FALSE))
 800087a:	46a4      	mov	ip, r4
 800087c:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <writeShellHreg+0x60>)
 800087e:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
 8000882:	b179      	cbz	r1, 80008a4 <writeShellHreg+0x58>
 8000884:	b970      	cbnz	r0, 80008a4 <writeShellHreg+0x58>
        tableCount += hregTableList[tablePointer].TableSize;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <writeShellHreg+0x60>)
 8000888:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	444b      	add	r3, r9
 8000890:	fa1f f983 	uxth.w	r9, r3
        if( hregIndex <= (tableCount - 1))
 8000894:	f109 33ff 	add.w	r3, r9, #4294967295
 8000898:	429d      	cmp	r5, r3
 800089a:	dde3      	ble.n	8000864 <writeShellHreg+0x18>
        }
        else
        {
            /* Try next group */
            previousTableCount = tableCount;
            tablePointer++;
 800089c:	3401      	adds	r4, #1
 800089e:	b2e4      	uxtb	r4, r4
            previousTableCount = tableCount;
 80008a0:	464e      	mov	r6, r9
 80008a2:	e7ea      	b.n	800087a <writeShellHreg+0x2e>
        }
    }
    return result;
}
 80008a4:	4670      	mov	r0, lr
 80008a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008aa:	bf00      	nop
 80008ac:	08006b64 	.word	0x08006b64

080008b0 <readHreg>:
 *
 * @return  value of HREG.
 *
 ****************************************************************************/
eError readHreg( uint8_t instance, const HREG *hregP, void *value )
{
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	4606      	mov	r6, r0
 80008b4:	460c      	mov	r4, r1
 80008b6:	4615      	mov	r5, r2
    eError result = RET_OK;
    uint8_t size = 0;

    /* Check OnRead function availability*/
    if ( ( hregP->OnRead != HREG_NOP ) &&
 80008b8:	7c0b      	ldrb	r3, [r1, #16]
 80008ba:	2bff      	cmp	r3, #255	; 0xff
 80008bc:	d004      	beq.n	80008c8 <readHreg+0x18>
         ( hregGroupsState[hregP->GroupId].hregGroupEnabled == HREG_GROUP_STARTED ) &&
 80008be:	7c8b      	ldrb	r3, [r1, #18]
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <readHreg+0x80>)
 80008c2:	5cd3      	ldrb	r3, [r2, r3]
    if ( ( hregP->OnRead != HREG_NOP ) &&
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d007      	beq.n	80008d8 <readHreg+0x28>
    {
        result = onReadHregFunc[hregP->OnRead].Read(instance, hregP, value);
    }
    else
    {
		size = SIZE_OF_HREG( hregP );
 80008c8:	6863      	ldr	r3, [r4, #4]
 80008ca:	2bff      	cmp	r3, #255	; 0xff
 80008cc:	d911      	bls.n	80008f2 <readHreg+0x42>
 80008ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d2:	d31b      	bcc.n	800090c <readHreg+0x5c>
 80008d4:	2303      	movs	r3, #3
 80008d6:	e00d      	b.n	80008f4 <readHreg+0x44>
         ( shellGetDebugState() == FALSE) )
 80008d8:	f000 fcbe 	bl	8001258 <shellGetDebugState>
         ( hregGroupsState[hregP->GroupId].hregGroupEnabled == HREG_GROUP_STARTED ) &&
 80008dc:	2800      	cmp	r0, #0
 80008de:	d1f3      	bne.n	80008c8 <readHreg+0x18>
        result = onReadHregFunc[hregP->OnRead].Read(instance, hregP, value);
 80008e0:	7c22      	ldrb	r2, [r4, #16]
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <readHreg+0x84>)
 80008e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e8:	462a      	mov	r2, r5
 80008ea:	4621      	mov	r1, r4
 80008ec:	4630      	mov	r0, r6
 80008ee:	4798      	blx	r3
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
		size = SIZE_OF_HREG( hregP );
 80008f2:	2301      	movs	r3, #1

		switch(size)
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d00b      	beq.n	8000910 <readHreg+0x60>
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d011      	beq.n	8000920 <readHreg+0x70>
		{
			case 1:		*(uint8_t*)value = (uint8_t)hregFunc.Read( instance, hregP );		break;
			case 2:		*(uint16_t*)value = (uint16_t)hregFunc.Read( instance, hregP );		break;
			default:	*(uint32_t*)value = (uint32_t)hregFunc.Read( instance, hregP );		break;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <readHreg+0x88>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4621      	mov	r1, r4
 8000902:	4630      	mov	r0, r6
 8000904:	4798      	blx	r3
 8000906:	6028      	str	r0, [r5, #0]
    eError result = RET_OK;
 8000908:	2000      	movs	r0, #0
        }
    }

    return result;
}
 800090a:	bd70      	pop	{r4, r5, r6, pc}
		size = SIZE_OF_HREG( hregP );
 800090c:	2302      	movs	r3, #2
 800090e:	e7f1      	b.n	80008f4 <readHreg+0x44>
			case 1:		*(uint8_t*)value = (uint8_t)hregFunc.Read( instance, hregP );		break;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <readHreg+0x88>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4621      	mov	r1, r4
 8000916:	4630      	mov	r0, r6
 8000918:	4798      	blx	r3
 800091a:	7028      	strb	r0, [r5, #0]
    eError result = RET_OK;
 800091c:	2000      	movs	r0, #0
			case 1:		*(uint8_t*)value = (uint8_t)hregFunc.Read( instance, hregP );		break;
 800091e:	bd70      	pop	{r4, r5, r6, pc}
			case 2:		*(uint16_t*)value = (uint16_t)hregFunc.Read( instance, hregP );		break;
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <readHreg+0x88>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4621      	mov	r1, r4
 8000926:	4630      	mov	r0, r6
 8000928:	4798      	blx	r3
 800092a:	8028      	strh	r0, [r5, #0]
    eError result = RET_OK;
 800092c:	2000      	movs	r0, #0
			case 2:		*(uint16_t*)value = (uint16_t)hregFunc.Read( instance, hregP );		break;
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	20000000 	.word	0x20000000
 8000934:	08006ba4 	.word	0x08006ba4
 8000938:	08006b5c 	.word	0x08006b5c

0800093c <readShellHreg>:
 *
 * @return  value of HREG.
 *
 ****************************************************************************/
eError readShellHreg( uint8_t instance, uint16_t hregIndex, uint32_t *hregValue)
{
 800093c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000940:	4680      	mov	r8, r0
 8000942:	460d      	mov	r5, r1
 8000944:	4617      	mov	r7, r2
    eError result = RET_OK;
    uint8_t tablePointer = 0;
    uint16_t tableCount = 0;
    uint16_t previousTableCount = 0;
    uint8_t registerFound = FALSE;
 8000946:	2000      	movs	r0, #0
    uint16_t previousTableCount = 0;
 8000948:	4606      	mov	r6, r0
    uint16_t tableCount = 0;
 800094a:	4681      	mov	r9, r0
    uint8_t tablePointer = 0;
 800094c:	4604      	mov	r4, r0
    eError result = RET_OK;
 800094e:	4686      	mov	lr, r0

    /* Table count */
    while ((hregTableList[tablePointer].TableHreg != HREG_NULL) && (registerFound == FALSE))
 8000950:	e00a      	b.n	8000968 <readShellHreg+0x2c>
    {
        tableCount += hregTableList[tablePointer].TableSize;
        if( hregIndex <= (tableCount - 1))
        {
			/* Group found */
			result = readHreg(instance, &(hregTableList[tablePointer].TableHreg)[hregIndex-previousTableCount], hregValue);
 8000952:	1bab      	subs	r3, r5, r6
 8000954:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000958:	0098      	lsls	r0, r3, #2
 800095a:	463a      	mov	r2, r7
 800095c:	4401      	add	r1, r0
 800095e:	4640      	mov	r0, r8
 8000960:	f7ff ffa6 	bl	80008b0 <readHreg>
 8000964:	4686      	mov	lr, r0
			registerFound = TRUE;
 8000966:	2001      	movs	r0, #1
    while ((hregTableList[tablePointer].TableHreg != HREG_NULL) && (registerFound == FALSE))
 8000968:	46a4      	mov	ip, r4
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <readShellHreg+0x5c>)
 800096c:	f852 1034 	ldr.w	r1, [r2, r4, lsl #3]
 8000970:	b179      	cbz	r1, 8000992 <readShellHreg+0x56>
 8000972:	b970      	cbnz	r0, 8000992 <readShellHreg+0x56>
        tableCount += hregTableList[tablePointer].TableSize;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <readShellHreg+0x5c>)
 8000976:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800097a:	791b      	ldrb	r3, [r3, #4]
 800097c:	444b      	add	r3, r9
 800097e:	fa1f f983 	uxth.w	r9, r3
        if( hregIndex <= (tableCount - 1))
 8000982:	f109 33ff 	add.w	r3, r9, #4294967295
 8000986:	429d      	cmp	r5, r3
 8000988:	dde3      	ble.n	8000952 <readShellHreg+0x16>
        }
        else
        {
			/* Try next group */
			previousTableCount = tableCount;
			tablePointer++;
 800098a:	3401      	adds	r4, #1
 800098c:	b2e4      	uxtb	r4, r4
			previousTableCount = tableCount;
 800098e:	464e      	mov	r6, r9
 8000990:	e7ea      	b.n	8000968 <readShellHreg+0x2c>
        }
    }
    return result;
}
 8000992:	4670      	mov	r0, lr
 8000994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000998:	08006b64 	.word	0x08006b64

0800099c <getNumOfHregs>:
 *
 ****************************************************************************/
uint8_t getNumOfHregs( void )
{
    return numOfHregs;
}
 800099c:	4b01      	ldr	r3, [pc, #4]	; (80009a4 <getNumOfHregs+0x8>)
 800099e:	7818      	ldrb	r0, [r3, #0]
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	200001ec 	.word	0x200001ec

080009a8 <readHregTableStd>:
{
    uint32_t ret_data = 0xffffffff;
    uint8_t size = 0;

    /* Read according to the data size (1byte/2byte) */
    size = SIZE_OF_HREG( hregPtr );
 80009a8:	684b      	ldr	r3, [r1, #4]
 80009aa:	2bff      	cmp	r3, #255	; 0xff
 80009ac:	d904      	bls.n	80009b8 <readHregTableStd+0x10>
 80009ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009b2:	d30a      	bcc.n	80009ca <readHregTableStd+0x22>
 80009b4:	2303      	movs	r3, #3
 80009b6:	e000      	b.n	80009ba <readHregTableStd+0x12>
 80009b8:	2301      	movs	r3, #1
	switch(size)
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d007      	beq.n	80009ce <readHregTableStd+0x26>
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d008      	beq.n	80009d4 <readHregTableStd+0x2c>
	{
		case 1:		ret_data = ( uint32_t )( *( (uint8_t *)(hregPtr->data) + instance ) );		break;
		case 2:		ret_data = ( uint32_t )( *( (uint16_t *)(hregPtr->data) + instance ) );		break;
		default:	ret_data = ( uint32_t )( *( (uint32_t *)(hregPtr->data) + instance ) );		break;
 80009c2:	680b      	ldr	r3, [r1, #0]
 80009c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
	}

    return ret_data;
}
 80009c8:	4770      	bx	lr
    size = SIZE_OF_HREG( hregPtr );
 80009ca:	2302      	movs	r3, #2
 80009cc:	e7f5      	b.n	80009ba <readHregTableStd+0x12>
		case 1:		ret_data = ( uint32_t )( *( (uint8_t *)(hregPtr->data) + instance ) );		break;
 80009ce:	680b      	ldr	r3, [r1, #0]
 80009d0:	5c18      	ldrb	r0, [r3, r0]
 80009d2:	4770      	bx	lr
		case 2:		ret_data = ( uint32_t )( *( (uint16_t *)(hregPtr->data) + instance ) );		break;
 80009d4:	680b      	ldr	r3, [r1, #0]
 80009d6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80009da:	4770      	bx	lr

080009dc <writeHregTableStd>:
eError writeHregTableStd( uint8_t instance, const HREG *hregPtr, uint32_t value )
{
    eError ret = RET_OK;
    uint8_t size = 0;

    size = SIZE_OF_HREG( hregPtr );
 80009dc:	684b      	ldr	r3, [r1, #4]
 80009de:	2bff      	cmp	r3, #255	; 0xff
 80009e0:	d904      	bls.n	80009ec <writeHregTableStd+0x10>
 80009e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e6:	d30a      	bcc.n	80009fe <writeHregTableStd+0x22>
 80009e8:	2303      	movs	r3, #3
 80009ea:	e000      	b.n	80009ee <writeHregTableStd+0x12>
 80009ec:	2301      	movs	r3, #1

	switch(size)
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d007      	beq.n	8000a02 <writeHregTableStd+0x26>
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d009      	beq.n	8000a0a <writeHregTableStd+0x2e>
	{
		case 1:		*( (uint8_t *)(hregPtr->data) + instance ) = (uint8_t)value;	break;
		case 2:		*( (uint16_t *)(hregPtr->data) + instance ) = (uint16_t)value;	break;
		default:	*( (uint32_t *)(hregPtr->data) + instance ) = (uint32_t)value;	break;
 80009f6:	680b      	ldr	r3, [r1, #0]
 80009f8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80009fc:	e003      	b.n	8000a06 <writeHregTableStd+0x2a>
    size = SIZE_OF_HREG( hregPtr );
 80009fe:	2302      	movs	r3, #2
 8000a00:	e7f5      	b.n	80009ee <writeHregTableStd+0x12>
		case 1:		*( (uint8_t *)(hregPtr->data) + instance ) = (uint8_t)value;	break;
 8000a02:	680b      	ldr	r3, [r1, #0]
 8000a04:	541a      	strb	r2, [r3, r0]
	}

    return ret;
}
 8000a06:	2000      	movs	r0, #0
 8000a08:	4770      	bx	lr
		case 2:		*( (uint16_t *)(hregPtr->data) + instance ) = (uint16_t)value;	break;
 8000a0a:	680b      	ldr	r3, [r1, #0]
 8000a0c:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
 8000a10:	e7f9      	b.n	8000a06 <writeHregTableStd+0x2a>

08000a12 <getNumOfSregs>:
 * @return  number of SREGs.  
 ****************************************************************************/
uint8_t getNumOfSregs( void )
{
	return NUM_OF_SREGS;
}
 8000a12:	2009      	movs	r0, #9
 8000a14:	4770      	bx	lr
	...

08000a18 <sregWrite>:
eError sregWrite(SREG sreg, uint32_t value)
{
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <sregWrite+0x38>)
 8000a1a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000a1e:	7852      	ldrb	r2, [r2, #1]
	switch(SREGInstanceMap[sreg].type)
 8000a20:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d008      	beq.n	8000a3a <sregWrite+0x22>
 8000a28:	b11b      	cbz	r3, 8000a32 <sregWrite+0x1a>
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d00a      	beq.n	8000a44 <sregWrite+0x2c>
			break;
		case SREG_UINT32:
			SREG32Context[index] = (uint32_t)value;
			break;
		default:
			success = RET_INVALID_PARAMETER;
 8000a2e:	2005      	movs	r0, #5
			break;
	}

	return success;
}
 8000a30:	4770      	bx	lr
			SREG8Context[index] = (uint8_t)value;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <sregWrite+0x3c>)
 8000a34:	5499      	strb	r1, [r3, r2]
	eError success = RET_OK;
 8000a36:	2000      	movs	r0, #0
			break;
 8000a38:	4770      	bx	lr
			SREG16Context[index] = (uint16_t)value;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <sregWrite+0x40>)
 8000a3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	eError success = RET_OK;
 8000a40:	2000      	movs	r0, #0
			break;
 8000a42:	4770      	bx	lr
			SREG32Context[index] = (uint32_t)value;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <sregWrite+0x44>)
 8000a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eError success = RET_OK;
 8000a4a:	2000      	movs	r0, #0
			break;
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	08006e18 	.word	0x08006e18
 8000a54:	200004a0 	.word	0x200004a0
 8000a58:	200004b0 	.word	0x200004b0
 8000a5c:	200004a8 	.word	0x200004a8

08000a60 <sregReadParam>:
 * @param	sreg
 * @param	sregParam struct
 * @return  RET_OK or RET_FAIL
 ****************************************************************************/
eError sregReadParam(SREG sreg, tSREGParam *sregParam)
{
 8000a60:	b430      	push	{r4, r5}
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 8000a62:	4a22      	ldr	r2, [pc, #136]	; (8000aec <sregReadParam+0x8c>)
 8000a64:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8000a68:	785b      	ldrb	r3, [r3, #1]
	switch(SREGInstanceMap[sreg].type)
 8000a6a:	f812 2020 	ldrb.w	r2, [r2, r0, lsl #2]
 8000a6e:	2a01      	cmp	r2, #1
 8000a70:	d014      	beq.n	8000a9c <sregReadParam+0x3c>
 8000a72:	b11a      	cbz	r2, 8000a7c <sregReadParam+0x1c>
 8000a74:	2a02      	cmp	r2, #2
 8000a76:	d025      	beq.n	8000ac4 <sregReadParam+0x64>
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
			break;
		default:
			success = RET_INVALID_PARAMETER;
 8000a78:	2005      	movs	r0, #5
 8000a7a:	e00d      	b.n	8000a98 <sregReadParam+0x38>
			sregParam->Data = (uint32_t)SREG8Context[index];
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <sregReadParam+0x90>)
 8000a7e:	5cd2      	ldrb	r2, [r2, r3]
 8000a80:	600a      	str	r2, [r1, #0]
			sregParam->Init = (uint32_t)(SREG8InstanceMap[index].Init);
 8000a82:	481c      	ldr	r0, [pc, #112]	; (8000af4 <sregReadParam+0x94>)
 8000a84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a88:	18c2      	adds	r2, r0, r3
 8000a8a:	7894      	ldrb	r4, [r2, #2]
 8000a8c:	60cc      	str	r4, [r1, #12]
			sregParam->Max  = (uint32_t)(SREG8InstanceMap[index].Max);
 8000a8e:	5cc3      	ldrb	r3, [r0, r3]
 8000a90:	604b      	str	r3, [r1, #4]
			sregParam->Min  = (uint32_t)(SREG8InstanceMap[index].Min);
 8000a92:	7853      	ldrb	r3, [r2, #1]
 8000a94:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000a96:	2000      	movs	r0, #0
			break;
	}

	return success;
}
 8000a98:	bc30      	pop	{r4, r5}
 8000a9a:	4770      	bx	lr
			sregParam->Data  = (uint32_t)SREG16Context[index];
 8000a9c:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <sregReadParam+0x98>)
 8000a9e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000aa2:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG16InstanceMap[index].Init);
 8000aa4:	4a15      	ldr	r2, [pc, #84]	; (8000afc <sregReadParam+0x9c>)
 8000aa6:	0058      	lsls	r0, r3, #1
 8000aa8:	18c5      	adds	r5, r0, r3
 8000aaa:	006c      	lsls	r4, r5, #1
 8000aac:	1915      	adds	r5, r2, r4
 8000aae:	88ad      	ldrh	r5, [r5, #4]
 8000ab0:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG16InstanceMap[index].Max);
 8000ab2:	5b14      	ldrh	r4, [r2, r4]
 8000ab4:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG16InstanceMap[index].Min);
 8000ab6:	4403      	add	r3, r0
 8000ab8:	0058      	lsls	r0, r3, #1
 8000aba:	4402      	add	r2, r0
 8000abc:	8853      	ldrh	r3, [r2, #2]
 8000abe:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000ac0:	2000      	movs	r0, #0
			break;
 8000ac2:	e7e9      	b.n	8000a98 <sregReadParam+0x38>
			sregParam->Data  = (uint32_t)SREG32Context[index];
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <sregReadParam+0xa0>)
 8000ac6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aca:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <sregReadParam+0xa4>)
 8000ace:	0058      	lsls	r0, r3, #1
 8000ad0:	18c5      	adds	r5, r0, r3
 8000ad2:	00ac      	lsls	r4, r5, #2
 8000ad4:	1915      	adds	r5, r2, r4
 8000ad6:	68ad      	ldr	r5, [r5, #8]
 8000ad8:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
 8000ada:	5914      	ldr	r4, [r2, r4]
 8000adc:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
 8000ade:	4403      	add	r3, r0
 8000ae0:	0098      	lsls	r0, r3, #2
 8000ae2:	4402      	add	r2, r0
 8000ae4:	6853      	ldr	r3, [r2, #4]
 8000ae6:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000ae8:	2000      	movs	r0, #0
			break;
 8000aea:	e7d5      	b.n	8000a98 <sregReadParam+0x38>
 8000aec:	08006e18 	.word	0x08006e18
 8000af0:	200004a0 	.word	0x200004a0
 8000af4:	08006e00 	.word	0x08006e00
 8000af8:	200004b0 	.word	0x200004b0
 8000afc:	08006de8 	.word	0x08006de8
 8000b00:	200004a8 	.word	0x200004a8
 8000b04:	08006de8 	.word	0x08006de8

08000b08 <initSregAll>:
{
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	b084      	sub	sp, #16
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 8000b0c:	2400      	movs	r4, #0
 8000b0e:	e009      	b.n	8000b24 <initSregAll+0x1c>
		sregReadParam(sreg, &sregParam);
 8000b10:	4669      	mov	r1, sp
 8000b12:	4620      	mov	r0, r4
 8000b14:	f7ff ffa4 	bl	8000a60 <sregReadParam>
		sregWrite(sreg, sregParam.Init);
 8000b18:	9903      	ldr	r1, [sp, #12]
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f7ff ff7c 	bl	8000a18 <sregWrite>
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 8000b20:	3401      	adds	r4, #1
 8000b22:	b2e4      	uxtb	r4, r4
 8000b24:	2c08      	cmp	r4, #8
 8000b26:	d9f3      	bls.n	8000b10 <initSregAll+0x8>
}
 8000b28:	b004      	add	sp, #16
 8000b2a:	bd10      	pop	{r4, pc}

08000b2c <readSregTableStd>:
{
 8000b2c:	b500      	push	{lr}
 8000b2e:	b085      	sub	sp, #20
	success = sregReadParam(sreg, &sregParam);
 8000b30:	4669      	mov	r1, sp
 8000b32:	f7ff ff95 	bl	8000a60 <sregReadParam>
	if ( success == RET_OK )
 8000b36:	b120      	cbz	r0, 8000b42 <readSregTableStd+0x16>
    uint32_t ret_data = 0xffffffff;
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000b3c:	b005      	add	sp, #20
 8000b3e:	f85d fb04 	ldr.w	pc, [sp], #4
		ret_data = sregParam.Data;
 8000b42:	9800      	ldr	r0, [sp, #0]
 8000b44:	e7fa      	b.n	8000b3c <readSregTableStd+0x10>

08000b46 <readSreg>:
{
 8000b46:	b508      	push	{r3, lr}
	return readSregTableStd(sreg);
 8000b48:	f7ff fff0 	bl	8000b2c <readSregTableStd>
}
 8000b4c:	bd08      	pop	{r3, pc}

08000b4e <readShellSreg>:
{	
 8000b4e:	b508      	push	{r3, lr}
	sregValue = readSreg( (SREG)sregIndex );
 8000b50:	b2c0      	uxtb	r0, r0
 8000b52:	f7ff fff8 	bl	8000b46 <readSreg>
}
 8000b56:	bd08      	pop	{r3, pc}

08000b58 <writeSregTableStd>:
{
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	460d      	mov	r5, r1
	result = sregReadParam(sreg, &sregParam);
 8000b60:	4669      	mov	r1, sp
 8000b62:	f7ff ff7d 	bl	8000a60 <sregReadParam>
 8000b66:	4604      	mov	r4, r0
	if ( value > sregParam.Max )
 8000b68:	9901      	ldr	r1, [sp, #4]
 8000b6a:	42a9      	cmp	r1, r5
 8000b6c:	d303      	bcc.n	8000b76 <writeSregTableStd+0x1e>
	else if ( value < sregParam.Min )
 8000b6e:	9902      	ldr	r1, [sp, #8]
 8000b70:	428d      	cmp	r5, r1
 8000b72:	d300      	bcc.n	8000b76 <writeSregTableStd+0x1e>
 8000b74:	4629      	mov	r1, r5
	if ( result == RET_OK )
 8000b76:	b114      	cbz	r4, 8000b7e <writeSregTableStd+0x26>
}
 8000b78:	4620      	mov	r0, r4
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
		sregWrite(sreg, value);
 8000b7e:	4630      	mov	r0, r6
 8000b80:	f7ff ff4a 	bl	8000a18 <sregWrite>
 8000b84:	e7f8      	b.n	8000b78 <writeSregTableStd+0x20>

08000b86 <writeSreg>:
{
 8000b86:	b508      	push	{r3, lr}
	return writeSregTableStd( sreg, value );
 8000b88:	f7ff ffe6 	bl	8000b58 <writeSregTableStd>
}
 8000b8c:	bd08      	pop	{r3, pc}

08000b8e <writeShellSreg>:
{	
 8000b8e:	b508      	push	{r3, lr}
	result = writeSreg( (SREG)sregIndex, sregValue );
 8000b90:	b2c0      	uxtb	r0, r0
 8000b92:	f7ff fff8 	bl	8000b86 <writeSreg>
}
 8000b96:	bd08      	pop	{r3, pc}

08000b98 <SchedulerResetProcessTable>:
 ****************************************************************************/
void SchedulerResetProcessTable(void)
{
	uint8_t i;

	ptrTask	= 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <SchedulerResetProcessTable+0x5c>)
 8000b9c:	7013      	strb	r3, [r2, #0]

 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000b9e:	2b03      	cmp	r3, #3
 8000ba0:	d826      	bhi.n	8000bf0 <SchedulerResetProcessTable+0x58>
{
 8000ba2:	b430      	push	{r4, r5}
 	{
		schedulerProcess[i].uiTimeProcessCounter	= 0;
 8000ba4:	4914      	ldr	r1, [pc, #80]	; (8000bf8 <SchedulerResetProcessTable+0x60>)
 8000ba6:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8000baa:	f36f 020d 	bfc	r2, #0, #14
 8000bae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		schedulerProcess[i].bEnabledSystemTask	= SchedulerInstanceMap[i].initState;
 8000bb2:	005a      	lsls	r2, r3, #1
 8000bb4:	18d0      	adds	r0, r2, r3
 8000bb6:	0084      	lsls	r4, r0, #2
 8000bb8:	4810      	ldr	r0, [pc, #64]	; (8000bfc <SchedulerResetProcessTable+0x64>)
 8000bba:	4420      	add	r0, r4
 8000bbc:	7a84      	ldrb	r4, [r0, #10]
 8000bbe:	4411      	add	r1, r2
 8000bc0:	7848      	ldrb	r0, [r1, #1]
 8000bc2:	f364 1086 	bfi	r0, r4, #6, #1
		schedulerProcess[i].bEnabledUrgentSystemTask = FALSE;
 8000bc6:	f36f 10c7 	bfc	r0, #7, #1
 8000bca:	7048      	strb	r0, [r1, #1]

		schedulerContext[i].maxDelayProcessCtn = 0;
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <SchedulerResetProcessTable+0x68>)
 8000bce:	18d0      	adds	r0, r2, r3
 8000bd0:	00c5      	lsls	r5, r0, #3
 8000bd2:	194c      	adds	r4, r1, r5
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	81a0      	strh	r0, [r4, #12]
		schedulerContext[i].maximumTaskTime_us = 0;
 8000bd8:	60a0      	str	r0, [r4, #8]
		schedulerContext[i].averageTaskTime_us = 0;
 8000bda:	5148      	str	r0, [r1, r5]
		schedulerContext[i].currentTaskTime_us = 0;
 8000bdc:	6060      	str	r0, [r4, #4]
		schedulerContext[i].cntTaskTime = 0;
 8000bde:	6120      	str	r0, [r4, #16]
		schedulerContext[i].userEnabled = TRUE;
 8000be0:	2201      	movs	r2, #1
 8000be2:	7562      	strb	r2, [r4, #21]
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000be4:	4413      	add	r3, r2
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d9db      	bls.n	8000ba4 <SchedulerResetProcessTable+0xc>
 	}
}
 8000bec:	bc30      	pop	{r4, r5}
 8000bee:	4770      	bx	lr
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000514 	.word	0x20000514
 8000bf8:	20000518 	.word	0x20000518
 8000bfc:	08006e3c 	.word	0x08006e3c
 8000c00:	200004b4 	.word	0x200004b4

08000c04 <SchedulerInit>:
{
 8000c04:	b510      	push	{r4, lr}
	SchedulerResetProcessTable();
 8000c06:	f7ff ffc7 	bl	8000b98 <SchedulerResetProcessTable>
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000c0a:	2400      	movs	r4, #0
 8000c0c:	e001      	b.n	8000c12 <SchedulerInit+0xe>
 8000c0e:	3401      	adds	r4, #1
 8000c10:	b2e4      	uxtb	r4, r4
 8000c12:	2c03      	cmp	r4, #3
 8000c14:	d808      	bhi.n	8000c28 <SchedulerInit+0x24>
		if(SchedulerInstanceMap[i].InitProcess != NULL)
 8000c16:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000c1a:	0093      	lsls	r3, r2, #2
 8000c1c:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <SchedulerInit+0x3c>)
 8000c1e:	58d3      	ldr	r3, [r2, r3]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f4      	beq.n	8000c0e <SchedulerInit+0xa>
			(*(SchedulerInstanceMap[i].InitProcess))();
 8000c24:	4798      	blx	r3
 8000c26:	e7f2      	b.n	8000c0e <SchedulerInit+0xa>
    systemGetCLkFreq(&ticks_per_us);
 8000c28:	4c06      	ldr	r4, [pc, #24]	; (8000c44 <SchedulerInit+0x40>)
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f002 f928 	bl	8002e80 <systemGetCLkFreq>
    ticks_per_us /= 1000000;
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SchedulerInit+0x44>)
 8000c34:	fba2 2303 	umull	r2, r3, r2, r3
 8000c38:	0c9b      	lsrs	r3, r3, #18
 8000c3a:	6023      	str	r3, [r4, #0]
 8000c3c:	bd10      	pop	{r4, pc}
 8000c3e:	bf00      	nop
 8000c40:	08006e3c 	.word	0x08006e3c
 8000c44:	200004b0 	.word	0x200004b0
 8000c48:	431bde83 	.word	0x431bde83

08000c4c <SchedulerProcessesAutoEnable>:
 ****************************************************************************/
void SchedulerProcessesAutoEnable(void)
{
	uint8_t i;

	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d825      	bhi.n	8000c9e <SchedulerProcessesAutoEnable+0x52>
{
 8000c52:	b430      	push	{r4, r5}
 8000c54:	e003      	b.n	8000c5e <SchedulerProcessesAutoEnable+0x12>
	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000c56:	3301      	adds	r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d81d      	bhi.n	8000c9a <SchedulerProcessesAutoEnable+0x4e>
	{
		schedulerProcess[i].uiTimeProcessCounter++;
 8000c5e:	4810      	ldr	r0, [pc, #64]	; (8000ca0 <SchedulerProcessesAutoEnable+0x54>)
 8000c60:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 8000c64:	f3c2 010d 	ubfx	r1, r2, #0, #14
 8000c68:	3101      	adds	r1, #1
 8000c6a:	f361 020d 	bfi	r2, r1, #0, #14
 8000c6e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

		// If currentTaskTime it's enable, update 1000uS=1mS
		if (schedulerContext[i].taskActive == TRUE && schedulerContext[i].userEnabled == TRUE )
 8000c72:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000c76:	00d1      	lsls	r1, r2, #3
 8000c78:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <SchedulerProcessesAutoEnable+0x58>)
 8000c7a:	440a      	add	r2, r1
 8000c7c:	7d12      	ldrb	r2, [r2, #20]
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d0e9      	beq.n	8000c56 <SchedulerProcessesAutoEnable+0xa>
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <SchedulerProcessesAutoEnable+0x58>)
 8000c84:	440a      	add	r2, r1
 8000c86:	7d52      	ldrb	r2, [r2, #21]
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d0e4      	beq.n	8000c56 <SchedulerProcessesAutoEnable+0xa>
		{
			schedulerContext[i].currentTaskTime_us += 1000;
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <SchedulerProcessesAutoEnable+0x58>)
 8000c8e:	4401      	add	r1, r0
 8000c90:	684a      	ldr	r2, [r1, #4]
 8000c92:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000c96:	604a      	str	r2, [r1, #4]
 8000c98:	e7dd      	b.n	8000c56 <SchedulerProcessesAutoEnable+0xa>
		}
	}
}
 8000c9a:	bc30      	pop	{r4, r5}
 8000c9c:	4770      	bx	lr
 8000c9e:	4770      	bx	lr
 8000ca0:	20000518 	.word	0x20000518
 8000ca4:	200004b4 	.word	0x200004b4

08000ca8 <SchedulerUpdateTaskTime>:
 * @brief  	Update average task time, maximum task time
 * @param   process, initTime, finalTime
 * @return  none
 ****************************************************************************/
void SchedulerUpdateTaskTime(int32_t initTimeTaskScheduler, int32_t finalTimeTaskScheduler)
{
 8000ca8:	b4f0      	push	{r4, r5, r6, r7}
	uint64_t averageTaskTemp;
	schedulerContext[ptrTask].currentTaskTime_us += ((initTimeTaskScheduler - finalTimeTaskScheduler)/(int32_t)(ticks_per_us));
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <SchedulerUpdateTaskTime+0x48>)
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	1a41      	subs	r1, r0, r1
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <SchedulerUpdateTaskTime+0x4c>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	fb91 f1f0 	sdiv	r1, r1, r0
 8000cb8:	4e0f      	ldr	r6, [pc, #60]	; (8000cf8 <SchedulerUpdateTaskTime+0x50>)
 8000cba:	0053      	lsls	r3, r2, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	00dd      	lsls	r5, r3, #3
 8000cc0:	1974      	adds	r4, r6, r5
 8000cc2:	6863      	ldr	r3, [r4, #4]
 8000cc4:	4419      	add	r1, r3
 8000cc6:	6061      	str	r1, [r4, #4]
	schedulerContext[ptrTask].cntTaskTime %= MAX_TASK_TIME_CNT;
 8000cc8:	6923      	ldr	r3, [r4, #16]
 8000cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cce:	bf28      	it	cs
 8000cd0:	3301      	addcs	r3, #1
	schedulerContext[ptrTask].cntTaskTime++;
 8000cd2:	1c58      	adds	r0, r3, #1
 8000cd4:	6120      	str	r0, [r4, #16]

	/* Calculate the average task time */
	averageTaskTemp = (uint64_t)(schedulerContext[ptrTask].averageTaskTime_us*(schedulerContext[ptrTask].cntTaskTime-1));
 8000cd6:	5977      	ldr	r7, [r6, r5]
	schedulerContext[ptrTask].averageTaskTime_us = (uint32_t)(averageTaskTemp + schedulerContext[ptrTask].currentTaskTime_us) / schedulerContext[ptrTask].cntTaskTime;
 8000cd8:	fb07 1303 	mla	r3, r7, r3, r1
 8000cdc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ce0:	5173      	str	r3, [r6, r5]

    /* If current Task Time is higher than maximum, update maximum task time */
    if ( schedulerContext[ptrTask].currentTaskTime_us > schedulerContext[ptrTask].maximumTaskTime_us )
 8000ce2:	68a3      	ldr	r3, [r4, #8]
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d900      	bls.n	8000cea <SchedulerUpdateTaskTime+0x42>
    {
    	schedulerContext[ptrTask].maximumTaskTime_us = schedulerContext[ptrTask].currentTaskTime_us;
 8000ce8:	60a1      	str	r1, [r4, #8]
    }

}
 8000cea:	bcf0      	pop	{r4, r5, r6, r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000514 	.word	0x20000514
 8000cf4:	200004b0 	.word	0x200004b0
 8000cf8:	200004b4 	.word	0x200004b4

08000cfc <SchedulerExecuteSystemProcess>:
{
 8000cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	schedulerContext[ptrTask].currentTaskTime_us = 0;
 8000d00:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8000d5c <SchedulerExecuteSystemProcess+0x60>
 8000d04:	f898 1000 	ldrb.w	r1, [r8]
 8000d08:	4c11      	ldr	r4, [pc, #68]	; (8000d50 <SchedulerExecuteSystemProcess+0x54>)
 8000d0a:	004b      	lsls	r3, r1, #1
 8000d0c:	1858      	adds	r0, r3, r1
 8000d0e:	00c2      	lsls	r2, r0, #3
 8000d10:	4422      	add	r2, r4
 8000d12:	2700      	movs	r7, #0
 8000d14:	6057      	str	r7, [r2, #4]
	initTimeTaskScheduler =  SYSTEM_TICK;
 8000d16:	4e0f      	ldr	r6, [pc, #60]	; (8000d54 <SchedulerExecuteSystemProcess+0x58>)
 8000d18:	68b5      	ldr	r5, [r6, #8]
	schedulerContext[ptrTask].taskActive = TRUE;
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	7510      	strb	r0, [r2, #20]
    (*(SchedulerInstanceMap[ptrTask].CallProcess))();
 8000d1e:	440b      	add	r3, r1
 8000d20:	009a      	lsls	r2, r3, #2
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <SchedulerExecuteSystemProcess+0x5c>)
 8000d24:	4413      	add	r3, r2
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4798      	blx	r3
	schedulerContext[ptrTask].taskActive = FALSE;
 8000d2a:	f898 0000 	ldrb.w	r0, [r8]
 8000d2e:	0043      	lsls	r3, r0, #1
 8000d30:	1819      	adds	r1, r3, r0
 8000d32:	00ca      	lsls	r2, r1, #3
 8000d34:	4422      	add	r2, r4
 8000d36:	7517      	strb	r7, [r2, #20]
    finalTimeTaskScheduler = SYSTEM_TICK;
 8000d38:	68b1      	ldr	r1, [r6, #8]
    if ( schedulerContext[ptrTask].userEnabled == TRUE )
 8000d3a:	4403      	add	r3, r0
 8000d3c:	00da      	lsls	r2, r3, #3
 8000d3e:	4414      	add	r4, r2
 8000d40:	7d63      	ldrb	r3, [r4, #21]
 8000d42:	b90b      	cbnz	r3, 8000d48 <SchedulerExecuteSystemProcess+0x4c>
 8000d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	SchedulerUpdateTaskTime(initTimeTaskScheduler, finalTimeTaskScheduler);
 8000d48:	4628      	mov	r0, r5
 8000d4a:	f7ff ffad 	bl	8000ca8 <SchedulerUpdateTaskTime>
}
 8000d4e:	e7f9      	b.n	8000d44 <SchedulerExecuteSystemProcess+0x48>
 8000d50:	200004b4 	.word	0x200004b4
 8000d54:	e000e010 	.word	0xe000e010
 8000d58:	08006e3c 	.word	0x08006e3c
 8000d5c:	20000514 	.word	0x20000514

08000d60 <SchedulerNextSystemProcess>:
{
 8000d60:	b570      	push	{r4, r5, r6, lr}
    uint8_t i			= 0;
 8000d62:	2400      	movs	r4, #0
    bool taskExecuted	= FALSE;
 8000d64:	4620      	mov	r0, r4
 8000d66:	e027      	b.n	8000db8 <SchedulerNextSystemProcess+0x58>
			if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE )
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d148      	bne.n	8000dfe <SchedulerNextSystemProcess+0x9e>
				schedulerProcess[ptrTask].uiTimeProcessCounter = 0;
 8000d6c:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <SchedulerNextSystemProcess+0xb0>)
 8000d6e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d72:	f36f 010d 	bfc	r1, #0, #14
 8000d76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (schedulerContext[ptrTask].maxDelayProcessCtn < (schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess))
 8000d7a:	005a      	lsls	r2, r3, #1
 8000d7c:	18d1      	adds	r1, r2, r3
 8000d7e:	00c8      	lsls	r0, r1, #3
 8000d80:	4924      	ldr	r1, [pc, #144]	; (8000e14 <SchedulerNextSystemProcess+0xb4>)
 8000d82:	4401      	add	r1, r0
 8000d84:	898d      	ldrh	r5, [r1, #12]
 8000d86:	4922      	ldr	r1, [pc, #136]	; (8000e10 <SchedulerNextSystemProcess+0xb0>)
 8000d88:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000d8c:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000d90:	441a      	add	r2, r3
 8000d92:	0090      	lsls	r0, r2, #2
 8000d94:	4a20      	ldr	r2, [pc, #128]	; (8000e18 <SchedulerNextSystemProcess+0xb8>)
 8000d96:	4402      	add	r2, r0
 8000d98:	8912      	ldrh	r2, [r2, #8]
 8000d9a:	1a88      	subs	r0, r1, r2
 8000d9c:	4285      	cmp	r5, r0
 8000d9e:	da05      	bge.n	8000dac <SchedulerNextSystemProcess+0x4c>
				schedulerContext[ptrTask].maxDelayProcessCtn = schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess;
 8000da0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000da4:	00da      	lsls	r2, r3, #3
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <SchedulerNextSystemProcess+0xb4>)
 8000da8:	4413      	add	r3, r2
 8000daa:	8198      	strh	r0, [r3, #12]
			SchedulerExecuteSystemProcess();
 8000dac:	f7ff ffa6 	bl	8000cfc <SchedulerExecuteSystemProcess>
			taskExecuted = TRUE;
 8000db0:	2001      	movs	r0, #1
	while ( ( taskExecuted == FALSE ) && ( i <= NUM_OF_SCHED_TASKS ) );
 8000db2:	bb60      	cbnz	r0, 8000e0e <SchedulerNextSystemProcess+0xae>
 8000db4:	2c04      	cmp	r4, #4
 8000db6:	d82a      	bhi.n	8000e0e <SchedulerNextSystemProcess+0xae>
        i++;
 8000db8:	3401      	adds	r4, #1
 8000dba:	b2e4      	uxtb	r4, r4
        ptrTask++;
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <SchedulerNextSystemProcess+0xbc>)
 8000dbe:	7813      	ldrb	r3, [r2, #0]
 8000dc0:	3301      	adds	r3, #1
		ptrTask %= NUM_OF_SCHED_TASKS;
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	7013      	strb	r3, [r2, #0]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000dc8:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <SchedulerNextSystemProcess+0xb0>)
 8000dca:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000dce:	7852      	ldrb	r2, [r2, #1]
 8000dd0:	09d2      	lsrs	r2, r2, #7
 8000dd2:	d1c9      	bne.n	8000d68 <SchedulerNextSystemProcess+0x8>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000dd4:	490e      	ldr	r1, [pc, #56]	; (8000e10 <SchedulerNextSystemProcess+0xb0>)
 8000dd6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8000dda:	7849      	ldrb	r1, [r1, #1]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000ddc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000de0:	d0e7      	beq.n	8000db2 <SchedulerNextSystemProcess+0x52>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000de2:	490b      	ldr	r1, [pc, #44]	; (8000e10 <SchedulerNextSystemProcess+0xb0>)
 8000de4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8000de8:	f3c1 010d 	ubfx	r1, r1, #0, #14
 8000dec:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8000df0:	00ae      	lsls	r6, r5, #2
 8000df2:	4d09      	ldr	r5, [pc, #36]	; (8000e18 <SchedulerNextSystemProcess+0xb8>)
 8000df4:	4435      	add	r5, r6
 8000df6:	892d      	ldrh	r5, [r5, #8]
 8000df8:	42a9      	cmp	r1, r5
 8000dfa:	dbda      	blt.n	8000db2 <SchedulerNextSystemProcess+0x52>
 8000dfc:	e7b4      	b.n	8000d68 <SchedulerNextSystemProcess+0x8>
				schedulerProcess[ptrTask].bEnabledUrgentSystemTask = FALSE;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <SchedulerNextSystemProcess+0xb0>)
 8000e00:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000e04:	7851      	ldrb	r1, [r2, #1]
 8000e06:	f36f 11c7 	bfc	r1, #7, #1
 8000e0a:	7051      	strb	r1, [r2, #1]
 8000e0c:	e7b5      	b.n	8000d7a <SchedulerNextSystemProcess+0x1a>
}
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
 8000e10:	20000518 	.word	0x20000518
 8000e14:	200004b4 	.word	0x200004b4
 8000e18:	08006e3c 	.word	0x08006e3c
 8000e1c:	20000514 	.word	0x20000514

08000e20 <SchedulerDisableTask>:
 * @param   Process number that is going to be disabled.
 * @return  None
 ****************************************************************************/
void SchedulerDisableTask(tScheduler processId)
{
	schedulerProcess[processId].bEnabledSystemTask	= FALSE;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <SchedulerDisableTask+0x10>)
 8000e22:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8000e26:	7843      	ldrb	r3, [r0, #1]
 8000e28:	f36f 1386 	bfc	r3, #6, #1
 8000e2c:	7043      	strb	r3, [r0, #1]
 8000e2e:	4770      	bx	lr
 8000e30:	20000518 	.word	0x20000518

08000e34 <SchedulerEnableTask>:
 * @param   Process number that is going to be enabled.
 * @return  None
 ****************************************************************************/
void SchedulerEnableTask(tScheduler processId)
{
	schedulerProcess[processId].bEnabledSystemTask	= TRUE;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <SchedulerEnableTask+0x10>)
 8000e36:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8000e3a:	7843      	ldrb	r3, [r0, #1]
 8000e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e40:	7043      	strb	r3, [r0, #1]
 8000e42:	4770      	bx	lr
 8000e44:	20000518 	.word	0x20000518

08000e48 <shellSetVerboseLevel>:
 * @param	lvl New verbose level
 * @return  None.
 ****************************************************************************/
void shellSetVerboseLevel(tVerboseLevels lvl)
{
    verboseLevel = lvl;
 8000e48:	4b01      	ldr	r3, [pc, #4]	; (8000e50 <shellSetVerboseLevel+0x8>)
 8000e4a:	7018      	strb	r0, [r3, #0]
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <tokenizeShellCommand>:
 * @param[out]  size Amount of tokens parsed
 * @return  nothing
 *
 ****************************************************************************/
void tokenizeShellCommand(uint8_t *commandBuffer, tShellToken *tokens, uint8_t* size )
{
 8000e54:	b4f0      	push	{r4, r5, r6, r7}
    uint8_t counter = 0;
    uint8_t currentToken = 0;
    uint8_t elementCounter = 0;

    *size = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	7013      	strb	r3, [r2, #0]

    //Strip leading
    while (commandBuffer[counter] == ' '){
 8000e5a:	e001      	b.n	8000e60 <tokenizeShellCommand+0xc>
        counter++;
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
    while (commandBuffer[counter] == ' '){
 8000e60:	5cc4      	ldrb	r4, [r0, r3]
 8000e62:	2c20      	cmp	r4, #32
 8000e64:	d0fa      	beq.n	8000e5c <tokenizeShellCommand+0x8>
 8000e66:	2400      	movs	r4, #0
 8000e68:	4627      	mov	r7, r4
 8000e6a:	e00d      	b.n	8000e88 <tokenizeShellCommand+0x34>

    /* allocate received string on diferent buffers separeted by space chararcter*/
    while (counter < SHELL_INPUT_COMMANDBUFFER){
        //space -> New parameter
        if (commandBuffer[counter] == ' '){
            tokens[currentToken].size = elementCounter;
 8000e6c:	eb07 15c7 	add.w	r5, r7, r7, lsl #7
 8000e70:	440d      	add	r5, r1
 8000e72:	f885 4080 	strb.w	r4, [r5, #128]	; 0x80
            tokens[currentToken].string[elementCounter] = '\0';
 8000e76:	2600      	movs	r6, #0
 8000e78:	552e      	strb	r6, [r5, r4]
            elementCounter = 0;
            currentToken++;
 8000e7a:	3701      	adds	r7, #1
 8000e7c:	b2ff      	uxtb	r7, r7

            if ( currentToken == SHELL_NUMBER_OF_PARAMETERS + 1 ){
 8000e7e:	2f05      	cmp	r7, #5
 8000e80:	d01a      	beq.n	8000eb8 <tokenizeShellCommand+0x64>
				break;
            }
            counter++;
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2db      	uxtb	r3, r3
            elementCounter = 0;
 8000e86:	4634      	mov	r4, r6
    while (counter < SHELL_INPUT_COMMANDBUFFER){
 8000e88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e8c:	d114      	bne.n	8000eb8 <tokenizeShellCommand+0x64>
        if (commandBuffer[counter] == ' '){
 8000e8e:	5cc5      	ldrb	r5, [r0, r3]
 8000e90:	2d20      	cmp	r5, #32
 8000e92:	d0eb      	beq.n	8000e6c <tokenizeShellCommand+0x18>
        }
        //EOL -> End of command
		else if(commandBuffer[counter] == END_OF_LINE_CHARACTER){
 8000e94:	2d0d      	cmp	r5, #13
 8000e96:	d008      	beq.n	8000eaa <tokenizeShellCommand+0x56>
			    break;
        }
        //Otherwise, copy the character to its own parameter
        else{
            //@todo What if parameter bigger than expected?
            tokens[currentToken].string[elementCounter] = commandBuffer[counter];
 8000e98:	eb07 16c7 	add.w	r6, r7, r7, lsl #7
 8000e9c:	440e      	add	r6, r1
 8000e9e:	5535      	strb	r5, [r6, r4]
            elementCounter++;
 8000ea0:	3401      	adds	r4, #1
 8000ea2:	b2e4      	uxtb	r4, r4
            counter++;
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	e7ee      	b.n	8000e88 <tokenizeShellCommand+0x34>
			    tokens[currentToken].size = elementCounter;
 8000eaa:	eb07 13c7 	add.w	r3, r7, r7, lsl #7
 8000eae:	4419      	add	r1, r3
 8000eb0:	f881 4080 	strb.w	r4, [r1, #128]	; 0x80
	            tokens[currentToken].string[elementCounter] = '\0';
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	550b      	strb	r3, [r1, r4]
        }
    }

    *size = currentToken;
 8000eb8:	7017      	strb	r7, [r2, #0]
}
 8000eba:	bcf0      	pop	{r4, r5, r6, r7}
 8000ebc:	4770      	bx	lr
	...

08000ec0 <shellCommandIdFromToken>:
 * @param	[r] A shell Token with a string command
 * @return  Enum value with the shell command
 *
 ****************************************************************************/
uint32_t shellCommandIdFromToken(tShellToken* token)
{
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	4606      	mov	r6, r0
    uint8_t i;

    //Check which command matches
    for (i = 0; i < shellGetNumOfCommands(); i++){
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	4625      	mov	r5, r4
 8000ec8:	f000 fae2 	bl	8001490 <shellGetNumOfCommands>
 8000ecc:	4284      	cmp	r4, r0
 8000ece:	d20a      	bcs.n	8000ee6 <shellCommandIdFromToken+0x26>
        if(!strncmp((char*)token->string, (char*)shellCommandsTable[i].command, SHELL_MAX_COMMAND_NAME_SIZE)){
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	4907      	ldr	r1, [pc, #28]	; (8000ef0 <shellCommandIdFromToken+0x30>)
 8000ed4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8000ed8:	4630      	mov	r0, r6
 8000eda:	f005 f98a 	bl	80061f2 <strncmp>
 8000ede:	b128      	cbz	r0, 8000eec <shellCommandIdFromToken+0x2c>
    for (i = 0; i < shellGetNumOfCommands(); i++){
 8000ee0:	3401      	adds	r4, #1
 8000ee2:	b2e4      	uxtb	r4, r4
 8000ee4:	e7ef      	b.n	8000ec6 <shellCommandIdFromToken+0x6>
            return i; //This is the command
        }
    }

    //None found, return a number not corresponding with any command
    return shellGetNumOfCommands() + 1;
 8000ee6:	f000 fad3 	bl	8001490 <shellGetNumOfCommands>
 8000eea:	1c45      	adds	r5, r0, #1
}
 8000eec:	4628      	mov	r0, r5
 8000eee:	bd70      	pop	{r4, r5, r6, pc}
 8000ef0:	2000000c 	.word	0x2000000c

08000ef4 <parseShellParamToken>:
 * @param[out]	bufferWrSize Number of bytes written into the buffer
 * @return      String ID with the error ocurred. Or SHELL_NO_MESSAGE if everything OK
 *
 ****************************************************************************/
tShellStringId parseShellParamToken(const tShellToken* token, tShellParam* sParam, uint8_t* wrBuffer, uint8_t* bufferWrSize)
{
 8000ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	4605      	mov	r5, r0
 8000efa:	460c      	mov	r4, r1
 8000efc:	461f      	mov	r7, r3
    uint8_t size;

    //This is a type string
    if(token->string[0] == '"'){
 8000efe:	f990 3000 	ldrsb.w	r3, [r0]
 8000f02:	2b22      	cmp	r3, #34	; 0x22
 8000f04:	d00e      	beq.n	8000f24 <parseShellParamToken+0x30>
        //Update shellDataBufferPointer
        *bufferWrSize = token->size - 2;
    }
    //Default is treated as Unsigned int
    else{
        size = token->size;
 8000f06:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8000f0a:	aa02      	add	r2, sp, #8
 8000f0c:	f802 3d01 	strb.w	r3, [r2, #-1]!
        sParam->type  = PARAM_UINT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f801 3b04 	strb.w	r3, [r1], #4
        _atoi( &(token->string), &(sParam->value), &size);
 8000f16:	f000 fdc7 	bl	8001aa8 <_atoi>
        if ( size != 0 ){
 8000f1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000f1e:	b9d3      	cbnz	r3, 8000f56 <parseShellParamToken+0x62>
            return SHELL_INVALID_REGISTER;
        }
    }

    return SHELL_NO_MESSAGE;
 8000f20:	2008      	movs	r0, #8
 8000f22:	e005      	b.n	8000f30 <parseShellParamToken+0x3c>
 8000f24:	4616      	mov	r6, r2
        if(token->size > MON_SHELL_PARAM_BUFFER_SIZE){
 8000f26:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8000f2a:	2a80      	cmp	r2, #128	; 0x80
 8000f2c:	d902      	bls.n	8000f34 <parseShellParamToken+0x40>
            return SHELL_BUFFER_TOO_BIG;
 8000f2e:	2006      	movs	r0, #6
}
 8000f30:	b003      	add	sp, #12
 8000f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(wrBuffer, token->string + 1, token->size - 2 );
 8000f34:	3a02      	subs	r2, #2
 8000f36:	1c41      	adds	r1, r0, #1
 8000f38:	4630      	mov	r0, r6
 8000f3a:	f005 f947 	bl	80061cc <memcpy>
        sParam->type  = PARAM_DATA;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	7023      	strb	r3, [r4, #0]
        sParam->value = (uint32_t) wrBuffer; //Integer from pointer
 8000f42:	6066      	str	r6, [r4, #4]
        sParam->size = token->size;
 8000f44:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8000f48:	7223      	strb	r3, [r4, #8]
        *bufferWrSize = token->size - 2;
 8000f4a:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	703b      	strb	r3, [r7, #0]
    return SHELL_NO_MESSAGE;
 8000f52:	2008      	movs	r0, #8
 8000f54:	e7ec      	b.n	8000f30 <parseShellParamToken+0x3c>
            return SHELL_INVALID_REGISTER;
 8000f56:	2000      	movs	r0, #0
 8000f58:	e7ea      	b.n	8000f30 <parseShellParamToken+0x3c>
	...

08000f5c <parseShellCommand>:
 *
 * @return  StringId with the parsing error, or OK
 *
 ****************************************************************************/
tShellStringId parseShellCommand(uint8_t *commandBuffer, tParsedCommand *commandParsed )
{
 8000f5c:	b570      	push	{r4, r5, r6, lr}
 8000f5e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8000f62:	460e      	mov	r6, r1

    //The buffer is by default the initi of the shell buffer
    shellDataBufferWrPtr = shellDataBuffer;

    //Tokenize from input
    tokenizeShellCommand(commandBuffer, elements, &numOfParams);
 8000f64:	f10d 0206 	add.w	r2, sp, #6
 8000f68:	a902      	add	r1, sp, #8
 8000f6a:	f7ff ff73 	bl	8000e54 <tokenizeShellCommand>

    /**COMMAND PARSING (the first parameter)*/
    sCommand = shellCommandIdFromToken(&(elements[0]));
 8000f6e:	a802      	add	r0, sp, #8
 8000f70:	f7ff ffa6 	bl	8000ec0 <shellCommandIdFromToken>
 8000f74:	4604      	mov	r4, r0

    //If it does not match any command, or the parameters do not match. Fail!
    if ( (sCommand >= shellGetNumOfCommands())
 8000f76:	f000 fa8b 	bl	8001490 <shellGetNumOfCommands>
 8000f7a:	4284      	cmp	r4, r0
 8000f7c:	d303      	bcc.n	8000f86 <parseShellCommand+0x2a>
         || (numOfParams != shellCommandsTable[sCommand].numOfParams) ){
        return SHELL_INVALID_COMMAND;
 8000f7e:	2004      	movs	r0, #4
            return retString;
        }
    }

    return SHELL_COMPLETED;
}
 8000f80:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8000f84:	bd70      	pop	{r4, r5, r6, pc}
         || (numOfParams != shellCommandsTable[sCommand].numOfParams) ){
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <parseShellCommand+0x90>)
 8000f88:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000f8c:	7a1a      	ldrb	r2, [r3, #8]
 8000f8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d001      	beq.n	8000f9a <parseShellCommand+0x3e>
        return SHELL_INVALID_COMMAND;
 8000f96:	2004      	movs	r0, #4
 8000f98:	e7f2      	b.n	8000f80 <parseShellCommand+0x24>
        commandParsed->command = sCommand;
 8000f9a:	6034      	str	r4, [r6, #0]
    shellDataBufferWrPtr = shellDataBuffer;
 8000f9c:	4d14      	ldr	r5, [pc, #80]	; (8000ff0 <parseShellCommand+0x94>)
    for(i=0; i < numOfParams; i++){
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	e001      	b.n	8000fa6 <parseShellCommand+0x4a>
 8000fa2:	3401      	adds	r4, #1
 8000fa4:	b2e4      	uxtb	r4, r4
 8000fa6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000faa:	429c      	cmp	r4, r3
 8000fac:	d21a      	bcs.n	8000fe4 <parseShellCommand+0x88>
        pElement = &(elements[i+1]);
 8000fae:	1c60      	adds	r0, r4, #1
 8000fb0:	eb00 10c0 	add.w	r0, r0, r0, lsl #7
 8000fb4:	ab02      	add	r3, sp, #8
 8000fb6:	4418      	add	r0, r3
        sParam   = &(commandParsed->params[i]);
 8000fb8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000fbc:	0099      	lsls	r1, r3, #2
 8000fbe:	4431      	add	r1, r6
 8000fc0:	3104      	adds	r1, #4
        if((uint32_t)(shellDataBufferWrPtr + pElement->size) > (uint32_t)(&(shellDataBuffer) + SHELL_INPUT_COMMANDBUFFER)){
 8000fc2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8000fc6:	442b      	add	r3, r5
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <parseShellCommand+0x98>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d80c      	bhi.n	8000fe8 <parseShellCommand+0x8c>
        retString = parseShellParamToken(pElement, sParam, shellDataBufferWrPtr, &size);
 8000fce:	f10d 0307 	add.w	r3, sp, #7
 8000fd2:	462a      	mov	r2, r5
 8000fd4:	f7ff ff8e 	bl	8000ef4 <parseShellParamToken>
        shellDataBufferWrPtr += size;
 8000fd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000fdc:	441d      	add	r5, r3
        if(retString != SHELL_NO_MESSAGE) {
 8000fde:	2808      	cmp	r0, #8
 8000fe0:	d0df      	beq.n	8000fa2 <parseShellCommand+0x46>
 8000fe2:	e7cd      	b.n	8000f80 <parseShellCommand+0x24>
    return SHELL_COMPLETED;
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	e7cb      	b.n	8000f80 <parseShellCommand+0x24>
            return SHELL_BUFFER_TOO_BIG;
 8000fe8:	2006      	movs	r0, #6
 8000fea:	e7c9      	b.n	8000f80 <parseShellCommand+0x24>
 8000fec:	2000000c 	.word	0x2000000c
 8000ff0:	20000520 	.word	0x20000520
 8000ff4:	20004520 	.word	0x20004520

08000ff8 <printShellString>:
 *
 * @details This function is protected against SHELL not initialised.
 *
 ****************************************************************************/
void printShellString ( int8_t* buffer, tVerboseLevels vLevel )
{
 8000ff8:	b538      	push	{r3, r4, r5, lr}

    if ( vLevel >= verboseLevel )
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <printShellString+0x34>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	428b      	cmp	r3, r1
 8001000:	d803      	bhi.n	800100a <printShellString+0x12>
    {
        /* Init protection */
        if( shellState == SHELL_STACK_READY )
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <printShellString+0x38>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d000      	beq.n	800100c <printShellString+0x14>
 800100a:	bd38      	pop	{r3, r4, r5, pc}
 800100c:	4604      	mov	r4, r0
        {
#ifdef UART_LOG
            WRITE_HREG(UART_LOG, HREG_UART_BUFFER_SIZE, strlen((char* )buffer));
 800100e:	f7ff f8e7 	bl	80001e0 <strlen>
 8001012:	4d08      	ldr	r5, [pc, #32]	; (8001034 <printShellString+0x3c>)
 8001014:	4602      	mov	r2, r0
 8001016:	4629      	mov	r1, r5
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff fbd3 	bl	80007c4 <writeHreg>
            WRITE_HREG(UART_LOG, HREG_UART_DATA, buffer);
 800101e:	4622      	mov	r2, r4
 8001020:	f105 0114 	add.w	r1, r5, #20
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fbcd 	bl	80007c4 <writeHreg>
#ifdef CAN_LOG
            ProtocolTraceSend((uint8_t *)buffer, 0, strlen((char* )buffer));
#endif
        }
    }
}
 800102a:	e7ee      	b.n	800100a <printShellString+0x12>
 800102c:	20000008 	.word	0x20000008
 8001030:	200002f9 	.word	0x200002f9
 8001034:	08006d70 	.word	0x08006d70

08001038 <runShellCommandUnknown>:
 * @todo    review. Why do we need readShellSreg? and not simply read an sreg?
 * @param	command Pointer to command
 * @return  None.
 ****************************************************************************/
static void runShellCommandUnknown(tParsedCommand* command)
{
 8001038:	b508      	push	{r3, lr}
    printShellString((int8_t*)"\r\nUNKNOWN COMMAND\n", VERBOSE_WARNING);
 800103a:	2103      	movs	r1, #3
 800103c:	4801      	ldr	r0, [pc, #4]	; (8001044 <runShellCommandUnknown+0xc>)
 800103e:	f7ff ffdb 	bl	8000ff8 <printShellString>
 8001042:	bd08      	pop	{r3, pc}
 8001044:	08006ef0 	.word	0x08006ef0

08001048 <printShellValue>:
{
 8001048:	b510      	push	{r4, lr}
 800104a:	b08e      	sub	sp, #56	; 0x38
 800104c:	4614      	mov	r4, r2
	itos( value , type , buffer );
 800104e:	aa01      	add	r2, sp, #4
 8001050:	f000 fcdc 	bl	8001a0c <itos>
	printShellString( buffer, vLevel );
 8001054:	4621      	mov	r1, r4
 8001056:	a801      	add	r0, sp, #4
 8001058:	f7ff ffce 	bl	8000ff8 <printShellString>
}
 800105c:	b00e      	add	sp, #56	; 0x38
 800105e:	bd10      	pop	{r4, pc}

08001060 <printStartingMessage>:
{
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	4606      	mov	r6, r0
    tPowerUpReasons reason = 0;
 8001066:	2500      	movs	r5, #0
 8001068:	ac02      	add	r4, sp, #8
 800106a:	f804 5d01 	strb.w	r5, [r4, #-1]!
    printShellString((int8_t*)"\n", VERBOSE_GENERAL);
 800106e:	2101      	movs	r1, #1
 8001070:	4821      	ldr	r0, [pc, #132]	; (80010f8 <printStartingMessage+0x98>)
 8001072:	f7ff ffc1 	bl	8000ff8 <printShellString>
    printShellString(((int8_t *)START_APPLICATION_MESSAGE), VERBOSE_GENERAL);
 8001076:	2101      	movs	r1, #1
 8001078:	4820      	ldr	r0, [pc, #128]	; (80010fc <printStartingMessage+0x9c>)
 800107a:	f7ff ffbd 	bl	8000ff8 <printShellString>
    READ_HREG( UNIQUE_INSTANCE, HREG_SYSTEM_POWER_UP_REASON, &reason );
 800107e:	4622      	mov	r2, r4
 8001080:	491f      	ldr	r1, [pc, #124]	; (8001100 <printStartingMessage+0xa0>)
 8001082:	4628      	mov	r0, r5
 8001084:	f7ff fc14 	bl	80008b0 <readHreg>
    if (  reason == SYSTEM_FIRST_POWER_UP )
 8001088:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800108c:	bb2b      	cbnz	r3, 80010da <printStartingMessage+0x7a>
		printShellString((int8_t*)"\nPowering up first time.", VERBOSE_GENERAL);
 800108e:	2101      	movs	r1, #1
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <printStartingMessage+0xa4>)
 8001092:	f7ff ffb1 	bl	8000ff8 <printShellString>
    printShellString((int8_t*)"\nHW Version : ", VERBOSE_GENERAL);
 8001096:	2101      	movs	r1, #1
 8001098:	481b      	ldr	r0, [pc, #108]	; (8001108 <printStartingMessage+0xa8>)
 800109a:	f7ff ffad 	bl	8000ff8 <printShellString>
    printShellString((int8_t*)"\nFW Version : V.", VERBOSE_GENERAL);
 800109e:	2101      	movs	r1, #1
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <printStartingMessage+0xac>)
 80010a2:	f7ff ffa9 	bl	8000ff8 <printShellString>
    printShellValue(FW_MAJOR_VERSION, TYPE_DECIMAL, VERBOSE_GENERAL);
 80010a6:	2201      	movs	r2, #1
 80010a8:	2100      	movs	r1, #0
 80010aa:	4608      	mov	r0, r1
 80010ac:	f7ff ffcc 	bl	8001048 <printShellValue>
    printShellString((int8_t*)".", VERBOSE_GENERAL);
 80010b0:	2101      	movs	r1, #1
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <printStartingMessage+0xb0>)
 80010b4:	f7ff ffa0 	bl	8000ff8 <printShellString>
    printShellValue(FW_MINOR_VERSION, TYPE_DECIMAL, VERBOSE_GENERAL);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2100      	movs	r1, #0
 80010bc:	4610      	mov	r0, r2
 80010be:	f7ff ffc3 	bl	8001048 <printShellValue>
    if ( fullVersion == TRUE )
 80010c2:	2e01      	cmp	r6, #1
 80010c4:	d00e      	beq.n	80010e4 <printStartingMessage+0x84>
    printShellString((int8_t*)"\nNVM Version : ", VERBOSE_GENERAL);
 80010c6:	2101      	movs	r1, #1
 80010c8:	4812      	ldr	r0, [pc, #72]	; (8001114 <printStartingMessage+0xb4>)
 80010ca:	f7ff ff95 	bl	8000ff8 <printShellString>
    printShellString((int8_t*)"\n", VERBOSE_GENERAL);
 80010ce:	2101      	movs	r1, #1
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <printStartingMessage+0x98>)
 80010d2:	f7ff ff91 	bl	8000ff8 <printShellString>
}
 80010d6:	b002      	add	sp, #8
 80010d8:	bd70      	pop	{r4, r5, r6, pc}
		printShellString((int8_t*)"\nPowering up from reset.", VERBOSE_GENERAL);
 80010da:	2101      	movs	r1, #1
 80010dc:	480e      	ldr	r0, [pc, #56]	; (8001118 <printStartingMessage+0xb8>)
 80010de:	f7ff ff8b 	bl	8000ff8 <printShellString>
 80010e2:	e7d8      	b.n	8001096 <printStartingMessage+0x36>
    	printShellString((int8_t*)".RC", VERBOSE_GENERAL);
 80010e4:	2101      	movs	r1, #1
 80010e6:	480d      	ldr	r0, [pc, #52]	; (800111c <printStartingMessage+0xbc>)
 80010e8:	f7ff ff86 	bl	8000ff8 <printShellString>
    	printShellValue(FW_RC_VERSION, TYPE_DECIMAL, VERBOSE_GENERAL);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2100      	movs	r1, #0
 80010f0:	4608      	mov	r0, r1
 80010f2:	f7ff ffa9 	bl	8001048 <printShellValue>
 80010f6:	e7e6      	b.n	80010c6 <printStartingMessage+0x66>
 80010f8:	0800713c 	.word	0x0800713c
 80010fc:	08006e6c 	.word	0x08006e6c
 8001100:	08006d20 	.word	0x08006d20
 8001104:	08006e7c 	.word	0x08006e7c
 8001108:	08006eb4 	.word	0x08006eb4
 800110c:	08006ec4 	.word	0x08006ec4
 8001110:	08006ed8 	.word	0x08006ed8
 8001114:	08006ee0 	.word	0x08006ee0
 8001118:	08006e98 	.word	0x08006e98
 800111c:	08006edc 	.word	0x08006edc

08001120 <printCommonString>:
    if( index != SHELL_NO_MESSAGE)
 8001120:	2808      	cmp	r0, #8
 8001122:	d009      	beq.n	8001138 <printCommonString+0x18>
{
 8001124:	b508      	push	{r3, lr}
        printShellString((int8_t*)shellCommonMessages[index].message, vLevel);
 8001126:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800112a:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
 800112e:	4b03      	ldr	r3, [pc, #12]	; (800113c <printCommonString+0x1c>)
 8001130:	4418      	add	r0, r3
 8001132:	f7ff ff61 	bl	8000ff8 <printShellString>
 8001136:	bd08      	pop	{r3, pc}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	08006f04 	.word	0x08006f04

08001140 <initShellStack>:
{
 8001140:	b510      	push	{r4, lr}
    verboseLevel = VERBOSE_GENERAL;
 8001142:	2401      	movs	r4, #1
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <initShellStack+0x28>)
 8001146:	701c      	strb	r4, [r3, #0]
    debugEnable = FALSE;
 8001148:	2000      	movs	r0, #0
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <initShellStack+0x2c>)
 800114c:	7018      	strb	r0, [r3, #0]
    shellState = SHELL_STACK_READY;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <initShellStack+0x30>)
 8001150:	701c      	strb	r4, [r3, #0]
    printStartingMessage(FALSE);
 8001152:	f7ff ff85 	bl	8001060 <printStartingMessage>
    printCommonString(SHELL_COMPLETED, VERBOSE_GENERAL);
 8001156:	4621      	mov	r1, r4
 8001158:	2003      	movs	r0, #3
 800115a:	f7ff ffe1 	bl	8001120 <printCommonString>
    printShellString((int8_t*)"\r\nSHELL-> \0", VERBOSE_GENERAL);
 800115e:	4621      	mov	r1, r4
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <initShellStack+0x34>)
 8001162:	f7ff ff49 	bl	8000ff8 <printShellString>
 8001166:	bd10      	pop	{r4, pc}
 8001168:	20000008 	.word	0x20000008
 800116c:	200002f8 	.word	0x200002f8
 8001170:	200002f9 	.word	0x200002f9
 8001174:	08006a6c 	.word	0x08006a6c

08001178 <parseShellStack>:
 *
 * @return  None.
 *
 ****************************************************************************/
static void parseShellStack ( void )
{
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
    uint8_t  parseError = SHELL_NO_MESSAGE;
    tParsedCommand commandParsed;
    uint8_t  numberOfCommands = 1;
    uint8_t  offset[2];

    offset[0] = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	f88d 3000 	strb.w	r3, [sp]
    uint8_t  numberOfCommands = 1;
 8001182:	2501      	movs	r5, #1
    /* Check if it is a double command */
    while( command[i] != END_OF_LINE_CHARACTER )
 8001184:	e001      	b.n	800118a <parseShellStack+0x12>
        {
			numberOfCommands = 2;
			command[i - 1] = END_OF_LINE_CHARACTER;
			offset[1] = i + 2;
        }
        i++;
 8001186:	3301      	adds	r3, #1
 8001188:	b2db      	uxtb	r3, r3
    while( command[i] != END_OF_LINE_CHARACTER )
 800118a:	4619      	mov	r1, r3
 800118c:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <parseShellStack+0x90>)
 800118e:	5cd2      	ldrb	r2, [r2, r3]
 8001190:	2a0d      	cmp	r2, #13
 8001192:	d00c      	beq.n	80011ae <parseShellStack+0x36>
        if ( command[i] == '&' && i >= 1 )
 8001194:	2a26      	cmp	r2, #38	; 0x26
 8001196:	d1f6      	bne.n	8001186 <parseShellStack+0xe>
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f4      	beq.n	8001186 <parseShellStack+0xe>
			command[i - 1] = END_OF_LINE_CHARACTER;
 800119c:	3901      	subs	r1, #1
 800119e:	200d      	movs	r0, #13
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <parseShellStack+0x90>)
 80011a2:	5450      	strb	r0, [r2, r1]
			offset[1] = i + 2;
 80011a4:	1c9a      	adds	r2, r3, #2
 80011a6:	f88d 2001 	strb.w	r2, [sp, #1]
			numberOfCommands = 2;
 80011aa:	2502      	movs	r5, #2
 80011ac:	e7eb      	b.n	8001186 <parseShellStack+0xe>
 80011ae:	2400      	movs	r4, #0
 80011b0:	e009      	b.n	80011c6 <parseShellStack+0x4e>
    {
        parseError = parseShellCommand(&command[offset[i]], &commandParsed );

        if ( parseError == SHELL_COMPLETED )
        {
            if(shellCommandsTable[commandParsed.command].run != NULL){
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <parseShellStack+0x94>)
 80011b4:	9a01      	ldr	r2, [sp, #4]
 80011b6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	b1d3      	cbz	r3, 80011f4 <parseShellStack+0x7c>
                shellCommandsTable[commandParsed.command].run(&commandParsed);
 80011be:	a801      	add	r0, sp, #4
 80011c0:	4798      	blx	r3
        else{
            /* Error parsing the Shell command*/
			printShellString((int8_t*)"\r\n", VERBOSE_ERROR);
			printCommonString(parseError, VERBOSE_ERROR);
        }
        i++;
 80011c2:	3401      	adds	r4, #1
 80011c4:	b2e4      	uxtb	r4, r4
    while ( i < numberOfCommands )
 80011c6:	42ac      	cmp	r4, r5
 80011c8:	d218      	bcs.n	80011fc <parseShellStack+0x84>
        parseError = parseShellCommand(&command[offset[i]], &commandParsed );
 80011ca:	ab0e      	add	r3, sp, #56	; 0x38
 80011cc:	4423      	add	r3, r4
 80011ce:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80011d2:	a901      	add	r1, sp, #4
 80011d4:	480c      	ldr	r0, [pc, #48]	; (8001208 <parseShellStack+0x90>)
 80011d6:	4418      	add	r0, r3
 80011d8:	f7ff fec0 	bl	8000f5c <parseShellCommand>
 80011dc:	4606      	mov	r6, r0
        if ( parseError == SHELL_COMPLETED )
 80011de:	2803      	cmp	r0, #3
 80011e0:	d0e7      	beq.n	80011b2 <parseShellStack+0x3a>
			printShellString((int8_t*)"\r\n", VERBOSE_ERROR);
 80011e2:	2104      	movs	r1, #4
 80011e4:	480a      	ldr	r0, [pc, #40]	; (8001210 <parseShellStack+0x98>)
 80011e6:	f7ff ff07 	bl	8000ff8 <printShellString>
			printCommonString(parseError, VERBOSE_ERROR);
 80011ea:	2104      	movs	r1, #4
 80011ec:	4630      	mov	r0, r6
 80011ee:	f7ff ff97 	bl	8001120 <printCommonString>
 80011f2:	e7e6      	b.n	80011c2 <parseShellStack+0x4a>
                runShellCommandUnknown(&commandParsed);
 80011f4:	a801      	add	r0, sp, #4
 80011f6:	f7ff ff1f 	bl	8001038 <runShellCommandUnknown>
 80011fa:	e7e2      	b.n	80011c2 <parseShellStack+0x4a>
    }
    printShellString((int8_t*)"\r\nSHELL-> \0", VERBOSE_EVENT);
 80011fc:	2102      	movs	r1, #2
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <parseShellStack+0x9c>)
 8001200:	f7ff fefa 	bl	8000ff8 <printShellString>
}
 8001204:	b00e      	add	sp, #56	; 0x38
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	20000278 	.word	0x20000278
 800120c:	2000000c 	.word	0x2000000c
 8001210:	08007130 	.word	0x08007130
 8001214:	08006a6c 	.word	0x08006a6c

08001218 <callShellStackTask>:
{
 8001218:	b500      	push	{lr}
 800121a:	b085      	sub	sp, #20
    uint8_t bytesCount = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	f88d 300f 	strb.w	r3, [sp, #15]
    int8_t pattern[2] = { 0x0D, 0x0A };
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <callShellStackTask+0x38>)
 8001224:	899b      	ldrh	r3, [r3, #12]
 8001226:	f8ad 300c 	strh.w	r3, [sp, #12]
    while ( pipeDeviceParseCommand( PIPE_LOG, command, SHELL_INPUT_COMMANDBUFFER, pattern, 2, &bytesCount) )
 800122a:	e001      	b.n	8001230 <callShellStackTask+0x18>
        parseShellStack();
 800122c:	f7ff ffa4 	bl	8001178 <parseShellStack>
    while ( pipeDeviceParseCommand( PIPE_LOG, command, SHELL_INPUT_COMMANDBUFFER, pattern, 2, &bytesCount) )
 8001230:	f10d 030f 	add.w	r3, sp, #15
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2302      	movs	r3, #2
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	ab03      	add	r3, sp, #12
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	4905      	ldr	r1, [pc, #20]	; (8001254 <callShellStackTask+0x3c>)
 8001240:	2000      	movs	r0, #0
 8001242:	f001 f8bd 	bl	80023c0 <pipeDeviceParseCommand>
 8001246:	2800      	cmp	r0, #0
 8001248:	d1f0      	bne.n	800122c <callShellStackTask+0x14>
}
 800124a:	b005      	add	sp, #20
 800124c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001250:	08006a6c 	.word	0x08006a6c
 8001254:	20000278 	.word	0x20000278

08001258 <shellGetDebugState>:
 *
 ****************************************************************************/
BOOL shellGetDebugState( void )
{
    return debugEnable;
}
 8001258:	4b01      	ldr	r3, [pc, #4]	; (8001260 <shellGetDebugState+0x8>)
 800125a:	7818      	ldrb	r0, [r3, #0]
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200002f8 	.word	0x200002f8

08001264 <runShellCommandHelp>:
 * @brief   Shell help command prints all the valid commands
 * @param	command Pointer to command
 * @return  None.
 ****************************************************************************/
void runShellCommandHelp(tParsedCommand* command)
{
 8001264:	b538      	push	{r3, r4, r5, lr}
    uint8_t i;
    const tShellCommandTableEntry *sCommand;

    printShellString((int8_t*)"\r\nAVAILABLE COMMANDS\n", VERBOSE_EVENT);
 8001266:	2102      	movs	r1, #2
 8001268:	4811      	ldr	r0, [pc, #68]	; (80012b0 <runShellCommandHelp+0x4c>)
 800126a:	f7ff fec5 	bl	8000ff8 <printShellString>

    for(i=0;i<shellGetNumOfCommands();i++){
 800126e:	2400      	movs	r4, #0
 8001270:	e018      	b.n	80012a4 <runShellCommandHelp+0x40>
        sCommand = &shellCommandsTable[i];
        printShellString((int8_t*)sCommand->command, VERBOSE_EVENT);
 8001272:	4d10      	ldr	r5, [pc, #64]	; (80012b4 <runShellCommandHelp+0x50>)
 8001274:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 8001278:	2102      	movs	r1, #2
 800127a:	4628      	mov	r0, r5
 800127c:	f7ff febc 	bl	8000ff8 <printShellString>
        printShellString((int8_t*)"[", VERBOSE_EVENT);
 8001280:	2102      	movs	r1, #2
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <runShellCommandHelp+0x54>)
 8001284:	f7ff feb8 	bl	8000ff8 <printShellString>
        printShellValue(sCommand->numOfParams, TYPE_DECIMAL, VERBOSE_EVENT);
 8001288:	2202      	movs	r2, #2
 800128a:	2100      	movs	r1, #0
 800128c:	7a28      	ldrb	r0, [r5, #8]
 800128e:	f7ff fedb 	bl	8001048 <printShellValue>
        printShellString((int8_t*)"]\n", VERBOSE_EVENT);
 8001292:	2102      	movs	r1, #2
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <runShellCommandHelp+0x58>)
 8001296:	f7ff feaf 	bl	8000ff8 <printShellString>
        HAL_Delay(10);
 800129a:	200a      	movs	r0, #10
 800129c:	f002 fa22 	bl	80036e4 <HAL_Delay>
    for(i=0;i<shellGetNumOfCommands();i++){
 80012a0:	3401      	adds	r4, #1
 80012a2:	b2e4      	uxtb	r4, r4
 80012a4:	f000 f8f4 	bl	8001490 <shellGetNumOfCommands>
 80012a8:	4284      	cmp	r4, r0
 80012aa:	d3e2      	bcc.n	8001272 <runShellCommandHelp+0xe>
    }
}
 80012ac:	bd38      	pop	{r3, r4, r5, pc}
 80012ae:	bf00      	nop
 80012b0:	0800703c 	.word	0x0800703c
 80012b4:	2000000c 	.word	0x2000000c
 80012b8:	08007054 	.word	0x08007054
 80012bc:	08007058 	.word	0x08007058

080012c0 <runShellCommandReadSreg>:
 * @brief   Reads an sreg and prints its value.
 * @param	command Pointer to command
 * @return  None.
 ****************************************************************************/
void runShellCommandReadSreg(tParsedCommand* command)
{
 80012c0:	b510      	push	{r4, lr}
    uint16_t regIndex;

    regIndex = command->params[0].value;
 80012c2:	8904      	ldrh	r4, [r0, #8]

    if( regIndex >= getNumOfSregs() ){
 80012c4:	f7ff fba5 	bl	8000a12 <getNumOfSregs>
 80012c8:	b280      	uxth	r0, r0
 80012ca:	4284      	cmp	r4, r0
 80012cc:	d207      	bcs.n	80012de <runShellCommandReadSreg+0x1e>
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
    }
    else{
        printShellValue(readShellSreg(regIndex), TYPE_DECIMAL, VERBOSE_EVENT);
 80012ce:	4620      	mov	r0, r4
 80012d0:	f7ff fc3d 	bl	8000b4e <readShellSreg>
 80012d4:	2202      	movs	r2, #2
 80012d6:	2100      	movs	r1, #0
 80012d8:	f7ff feb6 	bl	8001048 <printShellValue>
 80012dc:	bd10      	pop	{r4, pc}
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
 80012de:	2104      	movs	r1, #4
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ff1d 	bl	8001120 <printCommonString>
 80012e6:	bd10      	pop	{r4, pc}

080012e8 <runShellCommandReadHreg>:
 * @brief   Reads an sreg and prints its value.
 * @param	command Pointer to command
 * @return  None.
 ****************************************************************************/
void runShellCommandReadHreg(tParsedCommand* command)
{
 80012e8:	b530      	push	{r4, r5, lr}
 80012ea:	b083      	sub	sp, #12
    uint16_t instance, regIndex;
    uint32_t value = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	9301      	str	r3, [sp, #4]
    eError err;

    instance = command->params[0].value;
 80012f0:	6885      	ldr	r5, [r0, #8]
    regIndex = command->params[1].value;
 80012f2:	8a04      	ldrh	r4, [r0, #16]

    if( regIndex >= getNumOfHregs() )
 80012f4:	f7ff fb52 	bl	800099c <getNumOfHregs>
 80012f8:	b280      	uxth	r0, r0
 80012fa:	4284      	cmp	r4, r0
 80012fc:	d20b      	bcs.n	8001316 <runShellCommandReadHreg+0x2e>
    {
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
    }
    else
    {
        err = readShellHreg(instance, regIndex, &value);
 80012fe:	aa01      	add	r2, sp, #4
 8001300:	4621      	mov	r1, r4
 8001302:	b2e8      	uxtb	r0, r5
 8001304:	f7ff fb1a 	bl	800093c <readShellHreg>
        if(err != RET_OK)
 8001308:	b958      	cbnz	r0, 8001322 <runShellCommandReadHreg+0x3a>
        {
            printCommonString(SHELL_READ_ERROR, VERBOSE_ERROR);
        }
        else
        {
            printShellValue(value, TYPE_DECIMAL, VERBOSE_EVENT);
 800130a:	2202      	movs	r2, #2
 800130c:	2100      	movs	r1, #0
 800130e:	9801      	ldr	r0, [sp, #4]
 8001310:	f7ff fe9a 	bl	8001048 <printShellValue>
        }
    }
}
 8001314:	e003      	b.n	800131e <runShellCommandReadHreg+0x36>
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
 8001316:	2104      	movs	r1, #4
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff ff01 	bl	8001120 <printCommonString>
}
 800131e:	b003      	add	sp, #12
 8001320:	bd30      	pop	{r4, r5, pc}
            printCommonString(SHELL_READ_ERROR, VERBOSE_ERROR);
 8001322:	2104      	movs	r1, #4
 8001324:	2007      	movs	r0, #7
 8001326:	f7ff fefb 	bl	8001120 <printCommonString>
 800132a:	e7f8      	b.n	800131e <runShellCommandReadHreg+0x36>

0800132c <runShellCommandWriteSreg>:
 * @brief       Write an sreg.
 * @param[in]	command Pointer to command
 * @return      None.
 ****************************************************************************/
void runShellCommandWriteSreg(tParsedCommand* command)
{
 800132c:	b508      	push	{r3, lr}
    uint32_t regValue;

    regIndex = command->params[0].value;
    regValue = command->params[1].value;

    if( writeShellSreg(regIndex, regValue) ){
 800132e:	6901      	ldr	r1, [r0, #16]
 8001330:	8900      	ldrh	r0, [r0, #8]
 8001332:	f7ff fc2c 	bl	8000b8e <writeShellSreg>
 8001336:	b900      	cbnz	r0, 800133a <runShellCommandWriteSreg+0xe>
 8001338:	bd08      	pop	{r3, pc}
        printCommonString(SHELL_WRITE_ERROR, VERBOSE_ERROR);
 800133a:	2104      	movs	r1, #4
 800133c:	2001      	movs	r0, #1
 800133e:	f7ff feef 	bl	8001120 <printCommonString>
    }
}
 8001342:	e7f9      	b.n	8001338 <runShellCommandWriteSreg+0xc>

08001344 <runShellCommandWriteHreg>:
 * @brief   Reads an sreg and prints its value.
 * @param	command Pointer to command
 * @return  None.
 ****************************************************************************/
void runShellCommandWriteHreg(tParsedCommand* command)
{
 8001344:	b570      	push	{r4, r5, r6, lr}
    uint16_t instance, regIndex;
    uint32_t regValue;

    instance = command->params[0].value;
 8001346:	6885      	ldr	r5, [r0, #8]
    regIndex = command->params[1].value;
 8001348:	8a04      	ldrh	r4, [r0, #16]
    regValue = command->params[2].value;
 800134a:	6986      	ldr	r6, [r0, #24]

    if( regIndex >= getNumOfHregs() ){
 800134c:	f7ff fb26 	bl	800099c <getNumOfHregs>
 8001350:	b280      	uxth	r0, r0
 8001352:	4284      	cmp	r4, r0
 8001354:	d206      	bcs.n	8001364 <runShellCommandWriteHreg+0x20>
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
    }
    else{
        if( writeShellHreg( instance, regIndex, regValue ) != RET_OK ){
 8001356:	4632      	mov	r2, r6
 8001358:	4621      	mov	r1, r4
 800135a:	b2e8      	uxtb	r0, r5
 800135c:	f7ff fa76 	bl	800084c <writeShellHreg>
 8001360:	b928      	cbnz	r0, 800136e <runShellCommandWriteHreg+0x2a>
 8001362:	bd70      	pop	{r4, r5, r6, pc}
        printCommonString(SHELL_INVALID_REGISTER, VERBOSE_ERROR);
 8001364:	2104      	movs	r1, #4
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff feda 	bl	8001120 <printCommonString>
 800136c:	bd70      	pop	{r4, r5, r6, pc}
            printCommonString(SHELL_WRITE_ERROR, VERBOSE_ERROR);
 800136e:	2104      	movs	r1, #4
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff fed5 	bl	8001120 <printCommonString>
        }
    }
}
 8001376:	e7f4      	b.n	8001362 <runShellCommandWriteHreg+0x1e>

08001378 <runShellCommandSetLogLevel>:
 * @todo        Maybe parse log level from string?
 * @param[in]	command Pointer to command
 * @return      None.
 ****************************************************************************/
void runShellCommandSetLogLevel(tParsedCommand* command)
{
 8001378:	b508      	push	{r3, lr}
    uint32_t regValue;

    regValue = command->params[0].value;
 800137a:	6880      	ldr	r0, [r0, #8]

    if( regValue > NUM_OF_VERBOSE_LEVELS ){
 800137c:	2805      	cmp	r0, #5
 800137e:	d803      	bhi.n	8001388 <runShellCommandSetLogLevel+0x10>
        printCommonString(SHELL_INVALID_PARAMETER, VERBOSE_ERROR);
    }
    else{
        shellSetVerboseLevel(regValue);
 8001380:	b2c0      	uxtb	r0, r0
 8001382:	f7ff fd61 	bl	8000e48 <shellSetVerboseLevel>
 8001386:	bd08      	pop	{r3, pc}
        printCommonString(SHELL_INVALID_PARAMETER, VERBOSE_ERROR);
 8001388:	2104      	movs	r1, #4
 800138a:	2005      	movs	r0, #5
 800138c:	f7ff fec8 	bl	8001120 <printCommonString>
 8001390:	bd08      	pop	{r3, pc}

08001392 <runShellCommandSchedulerStartTask>:
#endif

#ifdef MON_SHELL_COMMAND_SCHEDULER_TASKS

void runShellCommandSchedulerStartTask(tParsedCommand* command)
{
 8001392:	b508      	push	{r3, lr}
    if ( command->params[0].value < NUM_OF_SCHED_TASKS ){
 8001394:	6880      	ldr	r0, [r0, #8]
 8001396:	2803      	cmp	r0, #3
 8001398:	d904      	bls.n	80013a4 <runShellCommandSchedulerStartTask+0x12>
    	SchedulerEnableTask(command->params[0].value);
    }
    else{
        printCommonString(SHELL_INVALID_PARAMETER, VERBOSE_ERROR);
 800139a:	2104      	movs	r1, #4
 800139c:	2005      	movs	r0, #5
 800139e:	f7ff febf 	bl	8001120 <printCommonString>
 80013a2:	bd08      	pop	{r3, pc}
    	SchedulerEnableTask(command->params[0].value);
 80013a4:	b240      	sxtb	r0, r0
 80013a6:	f7ff fd45 	bl	8000e34 <SchedulerEnableTask>
 80013aa:	bd08      	pop	{r3, pc}

080013ac <runShellCommandSchedulerStopTask>:
    }
}

void runShellCommandSchedulerStopTask(tParsedCommand* command)
{
 80013ac:	b508      	push	{r3, lr}
    if ( command->params[0].value < NUM_OF_SCHED_TASKS ){
 80013ae:	6880      	ldr	r0, [r0, #8]
 80013b0:	2803      	cmp	r0, #3
 80013b2:	d904      	bls.n	80013be <runShellCommandSchedulerStopTask+0x12>
    	SchedulerDisableTask(command->params[0].value);
    }
    else{
        printCommonString(SHELL_INVALID_PARAMETER, VERBOSE_ERROR);
 80013b4:	2104      	movs	r1, #4
 80013b6:	2005      	movs	r0, #5
 80013b8:	f7ff feb2 	bl	8001120 <printCommonString>
 80013bc:	bd08      	pop	{r3, pc}
    	SchedulerDisableTask(command->params[0].value);
 80013be:	b240      	sxtb	r0, r0
 80013c0:	f7ff fd2e 	bl	8000e20 <SchedulerDisableTask>
 80013c4:	bd08      	pop	{r3, pc}

080013c6 <projectExampleCommand2>:
 * @brief       Example command without behaviour
 * @param[in]	command Pointer to command
 * @return      None.
 ****************************************************************************/
void projectExampleCommand2(tParsedCommand* command)
{
 80013c6:	4770      	bx	lr

080013c8 <projectAtCmd>:
 * @param[2]	timeout retries
 * @param[3]	command
 * @return      None.
 ****************************************************************************/
void projectAtCmd(tParsedCommand* command)
{
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	b0a4      	sub	sp, #144	; 0x90
 80013cc:	4604      	mov	r4, r0
	uint8_t cmd[128]={0};
 80013ce:	ae04      	add	r6, sp, #16
 80013d0:	2280      	movs	r2, #128	; 0x80
 80013d2:	2100      	movs	r1, #0
 80013d4:	4630      	mov	r0, r6
 80013d6:	f004 ff04 	bl	80061e2 <memset>
	uint8_t size = command->params[3].size - 2;
 80013da:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80013de:	3a02      	subs	r2, #2
	tAtRequest req;/* = {0, 0, 0, 0, cmd};*/
	req.delay = 0;
 80013e0:	2500      	movs	r5, #0
 80013e2:	f8ad 5008 	strh.w	r5, [sp, #8]
	req.errorRetries = 0;
 80013e6:	f88d 5004 	strb.w	r5, [sp, #4]
	req.timeout = command->params[1].value;
 80013ea:	6963      	ldr	r3, [r4, #20]
 80013ec:	f8ad 3006 	strh.w	r3, [sp, #6]
	req.timeoutRetries = command->params[2].value;
 80013f0:	6a23      	ldr	r3, [r4, #32]
 80013f2:	f88d 3005 	strb.w	r3, [sp, #5]
	req.mode = command->params[0].value;
 80013f6:	7a23      	ldrb	r3, [r4, #8]
 80013f8:	f88d 300a 	strb.w	r3, [sp, #10]
	req.command = (uint8_t *) "AT+dummy";

	memcpy(cmd, (uint8_t *)command->params[3].value, size);
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001400:	4630      	mov	r0, r6
 8001402:	f004 fee3 	bl	80061cc <memcpy>
	req.command = cmd;
 8001406:	9603      	str	r6, [sp, #12]
	ATCommandSetRequest(AT_CLIENT_SHELL, req);
 8001408:	ab01      	add	r3, sp, #4
 800140a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140c:	4628      	mov	r0, r5
 800140e:	f000 fd97 	bl	8001f40 <ATCommandSetRequest>
	//printShellString((int8_t *) cmd, VERBOSE_GENERAL);
}
 8001412:	b024      	add	sp, #144	; 0x90
 8001414:	bd70      	pop	{r4, r5, r6, pc}
	...

08001418 <ATShellCallback>:

void ATShellCallback(tAtResponseID eventID, uint8_t *buffer, uint16_t length)
{
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	460d      	mov	r5, r1
 800141c:	4616      	mov	r6, r2
	switch(eventID)
 800141e:	2804      	cmp	r0, #4
 8001420:	d808      	bhi.n	8001434 <ATShellCallback+0x1c>
 8001422:	e8df f000 	tbb	[pc, r0]
 8001426:	1903      	.short	0x1903
 8001428:	1e14      	.short	0x1e14
 800142a:	23          	.byte	0x23
 800142b:	00          	.byte	0x00
	{
		case AT_RESP_OK:
			printShellString((int8_t *)"AT_RESP_OK:\n", VERBOSE_GENERAL);
 800142c:	2101      	movs	r1, #1
 800142e:	4812      	ldr	r0, [pc, #72]	; (8001478 <ATShellCallback+0x60>)
 8001430:	f7ff fde2 	bl	8000ff8 <printShellString>
			break;
		case AT_RESP_URC:
			printShellString((int8_t *)"AT_RESP_URC:\n", VERBOSE_GENERAL);
			break;
	}
	WRITE_HREG(UART_LOG, HREG_UART_BUFFER_SIZE, length);
 8001434:	4c11      	ldr	r4, [pc, #68]	; (800147c <ATShellCallback+0x64>)
 8001436:	4632      	mov	r2, r6
 8001438:	4621      	mov	r1, r4
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff f9c2 	bl	80007c4 <writeHreg>
	WRITE_HREG(UART_LOG, HREG_UART_DATA, buffer);
 8001440:	462a      	mov	r2, r5
 8001442:	f104 0114 	add.w	r1, r4, #20
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff f9bc 	bl	80007c4 <writeHreg>
 800144c:	bd70      	pop	{r4, r5, r6, pc}
			printShellString((int8_t *)"AT_RESP_DATA:\n", VERBOSE_GENERAL);
 800144e:	2101      	movs	r1, #1
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <ATShellCallback+0x68>)
 8001452:	f7ff fdd1 	bl	8000ff8 <printShellString>
			break;
 8001456:	e7ed      	b.n	8001434 <ATShellCallback+0x1c>
			printShellString((int8_t *)"AT_RESP_ERROR:\n", VERBOSE_GENERAL);
 8001458:	2101      	movs	r1, #1
 800145a:	480a      	ldr	r0, [pc, #40]	; (8001484 <ATShellCallback+0x6c>)
 800145c:	f7ff fdcc 	bl	8000ff8 <printShellString>
			break;
 8001460:	e7e8      	b.n	8001434 <ATShellCallback+0x1c>
			printShellString((int8_t *)"AT_RESP_TIMEOUT:\n", VERBOSE_GENERAL);
 8001462:	2101      	movs	r1, #1
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <ATShellCallback+0x70>)
 8001466:	f7ff fdc7 	bl	8000ff8 <printShellString>
			break;
 800146a:	e7e3      	b.n	8001434 <ATShellCallback+0x1c>
			printShellString((int8_t *)"AT_RESP_URC:\n", VERBOSE_GENERAL);
 800146c:	2101      	movs	r1, #1
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <ATShellCallback+0x74>)
 8001470:	f7ff fdc2 	bl	8000ff8 <printShellString>
			break;
 8001474:	e7de      	b.n	8001434 <ATShellCallback+0x1c>
 8001476:	bf00      	nop
 8001478:	0800705c 	.word	0x0800705c
 800147c:	08006d70 	.word	0x08006d70
 8001480:	0800706c 	.word	0x0800706c
 8001484:	0800707c 	.word	0x0800707c
 8001488:	0800708c 	.word	0x0800708c
 800148c:	080070a0 	.word	0x080070a0

08001490 <shellGetNumOfCommands>:
 * @return  Total number of commands defined for this shell
 ****************************************************************************/
inline uint32_t shellGetNumOfCommands( void )
{
    return (sizeof(shellCommandsTable) / sizeof(tShellCommandTableEntry));
}
 8001490:	200a      	movs	r0, #10
 8001492:	4770      	bx	lr

08001494 <checkCondition>:
 * @param  instance of fsm
 * @param  index of transition
 * @return TRUE or FALSE
 ****************************************************************************/
static tBool checkCondition( tFsm * fsm,uint8_t trans)
{
 8001494:	b508      	push	{r3, lr}
	tBool value = TRUE;

	if ( fsm->listState[fsm->currentState].state->transition[trans].condition != NULL)
 8001496:	6883      	ldr	r3, [r0, #8]
 8001498:	7c82      	ldrb	r2, [r0, #18]
 800149a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80014a2:	004a      	lsls	r2, r1, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80014aa:	b113      	cbz	r3, 80014b2 <checkCondition+0x1e>
	{
		uint8_t numFsm = fsm->numFsm;
		value = fsm->listState[fsm->currentState].state->transition[trans].condition(numFsm);
 80014ac:	7800      	ldrb	r0, [r0, #0]
 80014ae:	4798      	blx	r3
 80014b0:	bd08      	pop	{r3, pc}
	tBool value = TRUE;
 80014b2:	2001      	movs	r0, #1
	}


	return value;
}
 80014b4:	bd08      	pop	{r3, pc}
	...

080014b8 <checkEvent>:
 * @return TRUE or FALSE
 ****************************************************************************/
static tBool checkEvent( uint8_t instance,uint8_t eventId)
{
	tBool value = FALSE;
	if (eventId < fsmContext[instance].fsm->numOfEvents)
 80014b8:	0103      	lsls	r3, r0, #4
 80014ba:	4a16      	ldr	r2, [pc, #88]	; (8001514 <checkEvent+0x5c>)
 80014bc:	58d3      	ldr	r3, [r2, r3]
 80014be:	7c1a      	ldrb	r2, [r3, #16]
 80014c0:	428a      	cmp	r2, r1
 80014c2:	d90e      	bls.n	80014e2 <checkEvent+0x2a>
	{
		switch (fsmContext[instance].fsm->event[eventId].type)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80014ca:	790b      	ldrb	r3, [r1, #4]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d004      	beq.n	80014da <checkEvent+0x22>
 80014d0:	b1cb      	cbz	r3, 8001506 <checkEvent+0x4e>
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d003      	beq.n	80014de <checkEvent+0x26>
	tBool value = FALSE;
 80014d6:	2000      	movs	r0, #0
 80014d8:	4770      	bx	lr
		{
			case ANY:
				value = TRUE;
				break;
			case TIMING:
				value = fsmContext[instance].fsm->event[eventId].value;
 80014da:	7b08      	ldrb	r0, [r1, #12]
				break;
 80014dc:	4770      	bx	lr
			case CALLBACK:
				value = fsmContext[instance].fsm->event[eventId].value;
 80014de:	7b08      	ldrb	r0, [r1, #12]
				break;
 80014e0:	4770      	bx	lr
			default:
				break;
		}
	} else if(eventId == DO_EVENT)
 80014e2:	29ff      	cmp	r1, #255	; 0xff
 80014e4:	d001      	beq.n	80014ea <checkEvent+0x32>
	tBool value = FALSE;
 80014e6:	2000      	movs	r0, #0
 80014e8:	4770      	bx	lr
	{
		if(((fsmContext[instance].timeElapsed%fsmContext[instance].loopTiming)==0) || (fsmContext[instance].timeElapsed == 1))
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <checkEvent+0x5c>)
 80014ec:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80014f0:	68c2      	ldr	r2, [r0, #12]
 80014f2:	8901      	ldrh	r1, [r0, #8]
 80014f4:	fbb2 f3f1 	udiv	r3, r2, r1
 80014f8:	fb01 2313 	mls	r3, r1, r3, r2
 80014fc:	b12b      	cbz	r3, 800150a <checkEvent+0x52>
 80014fe:	2a01      	cmp	r2, #1
 8001500:	d005      	beq.n	800150e <checkEvent+0x56>
	tBool value = FALSE;
 8001502:	2000      	movs	r0, #0
 8001504:	4770      	bx	lr
				value = TRUE;
 8001506:	2001      	movs	r0, #1
 8001508:	4770      	bx	lr
		{
			value = TRUE;
 800150a:	2001      	movs	r0, #1
 800150c:	4770      	bx	lr
 800150e:	2001      	movs	r0, #1
		}
	}
	return value;
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200002fc 	.word	0x200002fc

08001518 <checkAction>:
 * @param  instance of fsm
 * @param  index of transition
 * @return RET_OK or RET_FAIL
 ****************************************************************************/
static eError checkAction (tFsm * fsm,uint8_t trans)
{
 8001518:	b508      	push	{r3, lr}
	eError retValue = RET_OK;

	if ( fsm->listState[fsm->currentState].state->transition[trans].action != NULL)
 800151a:	6883      	ldr	r3, [r0, #8]
 800151c:	7c82      	ldrb	r2, [r0, #18]
 800151e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001522:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8001526:	004a      	lsls	r2, r1, #1
 8001528:	4413      	add	r3, r2
 800152a:	f8d3 3012 	ldr.w	r3, [r3, #18]
 800152e:	b113      	cbz	r3, 8001536 <checkAction+0x1e>
	{
		uint8_t numFsm = fsm->numFsm;
		retValue = fsm->listState[fsm->currentState].state->transition[trans].action(numFsm);
 8001530:	7800      	ldrb	r0, [r0, #0]
 8001532:	4798      	blx	r3
 8001534:	bd08      	pop	{r3, pc}
	eError retValue = RET_OK;
 8001536:	2000      	movs	r0, #0
	}

	return retValue;
}
 8001538:	bd08      	pop	{r3, pc}

0800153a <checkExitAction>:
/*****************************************************************************
 * @brief  call the action function linked to exit action of the state
 * @param  instance of fsm
 ****************************************************************************/
static void checkExitAction(tFsm * fsm)
{
 800153a:	b508      	push	{r3, lr}
	if ( fsm->listState[fsm->currentState].state->exitAction != NULL)
 800153c:	6883      	ldr	r3, [r0, #8]
 800153e:	7c82      	ldrb	r2, [r0, #18]
 8001540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	b10b      	cbz	r3, 800154c <checkExitAction+0x12>
	{
		uint8_t numFsm = fsm->numFsm;
		fsm->listState[fsm->currentState].state->exitAction(numFsm);
 8001548:	7800      	ldrb	r0, [r0, #0]
 800154a:	4798      	blx	r3
 800154c:	bd08      	pop	{r3, pc}

0800154e <checkEntryAction>:
/*****************************************************************************
 * @brief  call the action function linked to entry action of the state
 * @param  instance of fsm
 ****************************************************************************/
static void checkEntryAction(tFsm * fsm)
{
 800154e:	b508      	push	{r3, lr}
	if ( fsm->listState[fsm->currentState].state->entryAction != NULL)
 8001550:	6883      	ldr	r3, [r0, #8]
 8001552:	7c82      	ldrb	r2, [r0, #18]
 8001554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	b10b      	cbz	r3, 8001560 <checkEntryAction+0x12>
	{
		uint8_t numFsm = fsm->numFsm;
		fsm->listState[fsm->currentState].state->entryAction(numFsm);
 800155c:	7800      	ldrb	r0, [r0, #0]
 800155e:	4798      	blx	r3
 8001560:	bd08      	pop	{r3, pc}

08001562 <clearEvents>:
 ****************************************************************************/
static void clearEvents(tFsm * fsm)
{
	uint8_t i;

	for (i=0;i<fsm->numOfEvents;i++)
 8001562:	2300      	movs	r3, #0
 8001564:	e006      	b.n	8001574 <clearEvents+0x12>
	{
		fsm->event[i].value = FALSE;
 8001566:	68c2      	ldr	r2, [r0, #12]
 8001568:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800156c:	2100      	movs	r1, #0
 800156e:	7311      	strb	r1, [r2, #12]
	for (i=0;i<fsm->numOfEvents;i++)
 8001570:	3301      	adds	r3, #1
 8001572:	b2db      	uxtb	r3, r3
 8001574:	7c02      	ldrb	r2, [r0, #16]
 8001576:	4293      	cmp	r3, r2
 8001578:	d3f5      	bcc.n	8001566 <clearEvents+0x4>
	}

}
 800157a:	4770      	bx	lr

0800157c <clearEvent>:
 * @param  instance of fsm
 * @param  Event Id
 ****************************************************************************/
static void clearEvent(tFsm * fsm,uint8_t event_id)
{
	fsm->event[event_id].value = FALSE;
 800157c:	68c3      	ldr	r3, [r0, #12]
 800157e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8001582:	2300      	movs	r3, #0
 8001584:	730b      	strb	r3, [r1, #12]
 8001586:	4770      	bx	lr

08001588 <checkTimingEvents>:
/*****************************************************************************
 * @brief  The algorithm evaluates the Time Events to check if the timeOut expired
 * @param  instance of fsm
 ****************************************************************************/
static void checkTimingEvents(uint8_t instance)
{
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t var;
	for (var = 0; var < fsmContext[instance].fsm->numOfEvents; ++var)
 800158a:	2300      	movs	r3, #0
 800158c:	e001      	b.n	8001592 <checkTimingEvents+0xa>
 800158e:	3301      	adds	r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	0102      	lsls	r2, r0, #4
 8001594:	4911      	ldr	r1, [pc, #68]	; (80015dc <checkTimingEvents+0x54>)
 8001596:	588a      	ldr	r2, [r1, r2]
 8001598:	7c11      	ldrb	r1, [r2, #16]
 800159a:	428b      	cmp	r3, r1
 800159c:	d21c      	bcs.n	80015d8 <checkTimingEvents+0x50>
	{
		if (fsmContext[instance].fsm->event[var].type == TIMING)
 800159e:	68d2      	ldr	r2, [r2, #12]
 80015a0:	0119      	lsls	r1, r3, #4
 80015a2:	440a      	add	r2, r1
 80015a4:	7914      	ldrb	r4, [r2, #4]
 80015a6:	2c01      	cmp	r4, #1
 80015a8:	d1f1      	bne.n	800158e <checkTimingEvents+0x6>
		{
			fsmContext[instance].fsm->event[var].value = ((fsmContext[instance].timeElapsed%fsmContext[instance].fsm->event[var].timeOut)==0);
 80015aa:	4f0c      	ldr	r7, [pc, #48]	; (80015dc <checkTimingEvents+0x54>)
 80015ac:	0106      	lsls	r6, r0, #4
 80015ae:	19bd      	adds	r5, r7, r6
 80015b0:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80015b4:	f8d2 e008 	ldr.w	lr, [r2, #8]
 80015b8:	fbbc f4fe 	udiv	r4, ip, lr
 80015bc:	fb0e c414 	mls	r4, lr, r4, ip
 80015c0:	fab4 f484 	clz	r4, r4
 80015c4:	0964      	lsrs	r4, r4, #5
 80015c6:	7314      	strb	r4, [r2, #12]
			fsmContext[instance].newEvent |= fsmContext[instance].fsm->event[var].value;
 80015c8:	59ba      	ldr	r2, [r7, r6]
 80015ca:	68d2      	ldr	r2, [r2, #12]
 80015cc:	4411      	add	r1, r2
 80015ce:	7b0a      	ldrb	r2, [r1, #12]
 80015d0:	79a9      	ldrb	r1, [r5, #6]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	71aa      	strb	r2, [r5, #6]
 80015d6:	e7da      	b.n	800158e <checkTimingEvents+0x6>
		}
	}

}
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002fc 	.word	0x200002fc

080015e0 <checkDestination>:
{
 80015e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015e4:	b086      	sub	sp, #24
	if (stateDestination < fsmContext[instance].fsm->numOfStates)
 80015e6:	0103      	lsls	r3, r0, #4
 80015e8:	4c26      	ldr	r4, [pc, #152]	; (8001684 <checkDestination+0xa4>)
 80015ea:	58e3      	ldr	r3, [r4, r3]
 80015ec:	7c5c      	ldrb	r4, [r3, #17]
 80015ee:	428c      	cmp	r4, r1
 80015f0:	d803      	bhi.n	80015fa <checkDestination+0x1a>
	tBool value = FALSE;
 80015f2:	2000      	movs	r0, #0
}
 80015f4:	b006      	add	sp, #24
 80015f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015fa:	4616      	mov	r6, r2
 80015fc:	460d      	mov	r5, r1
 80015fe:	4604      	mov	r4, r0
		checkExitAction(fsmContext[instance].fsm);
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff9a 	bl	800153a <checkExitAction>
		fsmContext[instance].timeElapsed = 0;
 8001606:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001684 <checkDestination+0xa4>
 800160a:	0127      	lsls	r7, r4, #4
 800160c:	eb08 0307 	add.w	r3, r8, r7
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
		fsmContext[instance].newEvent = TRUE;
 8001614:	2201      	movs	r2, #1
 8001616:	719a      	strb	r2, [r3, #6]
		clearEvents(fsmContext[instance].fsm);
 8001618:	f858 0007 	ldr.w	r0, [r8, r7]
 800161c:	f7ff ffa1 	bl	8001562 <clearEvents>
		if ((fsmContext[instance].fsm->logEnable & FSM_TRACE) == FSM_TRACE)
 8001620:	f858 3007 	ldr.w	r3, [r8, r7]
 8001624:	7e1a      	ldrb	r2, [r3, #24]
 8001626:	f012 0f02 	tst.w	r2, #2
 800162a:	d118      	bne.n	800165e <checkDestination+0x7e>
		fsmContext[instance].fsm->currentState = stateDestination;
 800162c:	4f15      	ldr	r7, [pc, #84]	; (8001684 <checkDestination+0xa4>)
 800162e:	0124      	lsls	r4, r4, #4
 8001630:	593b      	ldr	r3, [r7, r4]
 8001632:	749d      	strb	r5, [r3, #18]
		my_printf((fsmContext[instance].fsm->logEnable & FSM_LOG) == FSM_LOG,VERBOSE_GENERAL, "FSM %s num : %d Transition %d change State %s.\n",fsmContext[instance].fsm->name,fsmContext[instance].fsm->numFsm,transition,fsmContext[instance].fsm->listState[stateDestination].state->StateName);
 8001634:	593b      	ldr	r3, [r7, r4]
 8001636:	7e18      	ldrb	r0, [r3, #24]
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	6809      	ldr	r1, [r1, #0]
 8001644:	9102      	str	r1, [sp, #8]
 8001646:	9601      	str	r6, [sp, #4]
 8001648:	9200      	str	r2, [sp, #0]
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <checkDestination+0xa8>)
 800164c:	2101      	movs	r1, #1
 800164e:	4008      	ands	r0, r1
 8001650:	f000 fa4f 	bl	8001af2 <my_printf>
		checkEntryAction(fsmContext[instance].fsm);
 8001654:	5938      	ldr	r0, [r7, r4]
 8001656:	f7ff ff7a 	bl	800154e <checkEntryAction>
		value = TRUE;
 800165a:	2001      	movs	r0, #1
 800165c:	e7ca      	b.n	80015f4 <checkDestination+0x14>
			BufferSetData8(buffer, 0, instance);
 800165e:	f88d 4010 	strb.w	r4, [sp, #16]
			BufferSetData8(buffer, 1, FSM_TRACE_TRANSITION);
 8001662:	2201      	movs	r2, #1
 8001664:	f88d 2011 	strb.w	r2, [sp, #17]
			BufferSetData8(buffer, 2, fsmContext[instance].fsm->currentState);
 8001668:	7c9b      	ldrb	r3, [r3, #18]
 800166a:	f88d 3012 	strb.w	r3, [sp, #18]
			BufferSetData8(buffer, 3, transition);
 800166e:	f88d 6013 	strb.w	r6, [sp, #19]
			BufferSetData8(buffer, 4, stateDestination);
 8001672:	f88d 5014 	strb.w	r5, [sp, #20]
			my_printTraceBin(FSM_PARAMETERS*10 + PROTOCOL_DEVICE_INSTANCE,buffer,5);
 8001676:	2205      	movs	r2, #5
 8001678:	a904      	add	r1, sp, #16
 800167a:	2000      	movs	r0, #0
 800167c:	f000 fa4a 	bl	8001b14 <my_printTraceBin>
 8001680:	e7d4      	b.n	800162c <checkDestination+0x4c>
 8001682:	bf00      	nop
 8001684:	200002fc 	.word	0x200002fc
 8001688:	080070d4 	.word	0x080070d4

0800168c <executeFsm>:
{
 800168c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001690:	4680      	mov	r8, r0
	currentState = fsmContext[instance].fsm->currentState;
 8001692:	4607      	mov	r7, r0
 8001694:	0103      	lsls	r3, r0, #4
 8001696:	4a27      	ldr	r2, [pc, #156]	; (8001734 <executeFsm+0xa8>)
 8001698:	58d3      	ldr	r3, [r2, r3]
 800169a:	f893 a012 	ldrb.w	sl, [r3, #18]
	tBool changeState = FALSE;
 800169e:	f04f 0900 	mov.w	r9, #0
	uint8_t i =0,currentState;
 80016a2:	464c      	mov	r4, r9
	while (i<fsmContext[instance].fsm->listState[currentState].state->numOfTransition && !changeState)
 80016a4:	e00e      	b.n	80016c4 <executeFsm+0x38>
					clearEvent(fsmContext[instance].fsm,fsmContext[instance].fsm->listState[currentState].state->transition[i].eventId);
 80016a6:	013b      	lsls	r3, r7, #4
 80016a8:	4a22      	ldr	r2, [pc, #136]	; (8001734 <executeFsm+0xa8>)
 80016aa:	58d0      	ldr	r0, [r2, r3]
 80016ac:	6883      	ldr	r3, [r0, #8]
 80016ae:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80016b2:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 80016b6:	0072      	lsls	r2, r6, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	7b59      	ldrb	r1, [r3, #13]
 80016bc:	f7ff ff5e 	bl	800157c <clearEvent>
		i++;
 80016c0:	3401      	adds	r4, #1
 80016c2:	b2e4      	uxtb	r4, r4
	while (i<fsmContext[instance].fsm->listState[currentState].state->numOfTransition && !changeState)
 80016c4:	013b      	lsls	r3, r7, #4
 80016c6:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <executeFsm+0xa8>)
 80016c8:	58d5      	ldr	r5, [r2, r3]
 80016ca:	68ab      	ldr	r3, [r5, #8]
 80016cc:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 80016d0:	7b1a      	ldrb	r2, [r3, #12]
 80016d2:	4294      	cmp	r4, r2
 80016d4:	d22b      	bcs.n	800172e <executeFsm+0xa2>
 80016d6:	f1b9 0f00 	cmp.w	r9, #0
 80016da:	d128      	bne.n	800172e <executeFsm+0xa2>
		if (checkEvent(instance,fsmContext[instance].fsm->listState[currentState].state->transition[i].eventId))
 80016dc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80016e0:	004a      	lsls	r2, r1, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	7b59      	ldrb	r1, [r3, #13]
 80016e6:	4640      	mov	r0, r8
 80016e8:	f7ff fee6 	bl	80014b8 <checkEvent>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d0e7      	beq.n	80016c0 <executeFsm+0x34>
			if (checkCondition(fsmContext[instance].fsm,i))
 80016f0:	4621      	mov	r1, r4
 80016f2:	4628      	mov	r0, r5
 80016f4:	f7ff fece 	bl	8001494 <checkCondition>
 80016f8:	2800      	cmp	r0, #0
 80016fa:	d0e1      	beq.n	80016c0 <executeFsm+0x34>
				eError retAction = checkAction(fsmContext[instance].fsm,i);
 80016fc:	013b      	lsls	r3, r7, #4
 80016fe:	4621      	mov	r1, r4
 8001700:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <executeFsm+0xa8>)
 8001702:	58d0      	ldr	r0, [r2, r3]
 8001704:	f7ff ff08 	bl	8001518 <checkAction>
				if (retAction == RET_OK)
 8001708:	2800      	cmp	r0, #0
 800170a:	d1cc      	bne.n	80016a6 <executeFsm+0x1a>
					changeState = checkDestination(instance,fsmContext[instance].fsm->listState[currentState].state->transition[i].destination,i);
 800170c:	013b      	lsls	r3, r7, #4
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <executeFsm+0xa8>)
 8001710:	58d3      	ldr	r3, [r2, r3]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8001718:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 800171c:	0072      	lsls	r2, r6, #1
 800171e:	4413      	add	r3, r2
 8001720:	4622      	mov	r2, r4
 8001722:	7d99      	ldrb	r1, [r3, #22]
 8001724:	4640      	mov	r0, r8
 8001726:	f7ff ff5b 	bl	80015e0 <checkDestination>
 800172a:	4681      	mov	r9, r0
 800172c:	e7c8      	b.n	80016c0 <executeFsm+0x34>
}
 800172e:	2000      	movs	r0, #0
 8001730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001734:	200002fc 	.word	0x200002fc

08001738 <startFsm>:
{
 8001738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173a:	b083      	sub	sp, #12
	fsmContext[instance].fsm->currentState = fsmContext[instance].fsm->initState;
 800173c:	4d10      	ldr	r5, [pc, #64]	; (8001780 <startFsm+0x48>)
 800173e:	0104      	lsls	r4, r0, #4
 8001740:	192f      	adds	r7, r5, r4
 8001742:	592b      	ldr	r3, [r5, r4]
 8001744:	7cda      	ldrb	r2, [r3, #19]
 8001746:	749a      	strb	r2, [r3, #18]
	fsmContext[instance].timeElapsed = 0;
 8001748:	2600      	movs	r6, #0
 800174a:	60fe      	str	r6, [r7, #12]
	my_printf((fsmContext[instance].fsm->logEnable & FSM_LOG) == FSM_LOG,VERBOSE_GENERAL, "FSM : %s num : %d init setToState %s.\n",fsmContext[instance].fsm->name,fsmContext[instance].fsm->numFsm,fsmContext[instance].fsm->listState[fsmContext[instance].fsm->currentState].state->StateName);
 800174c:	592b      	ldr	r3, [r5, r4]
 800174e:	7e18      	ldrb	r0, [r3, #24]
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	6899      	ldr	r1, [r3, #8]
 8001754:	f893 e012 	ldrb.w	lr, [r3, #18]
 8001758:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	6809      	ldr	r1, [r1, #0]
 8001760:	9101      	str	r1, [sp, #4]
 8001762:	9200      	str	r2, [sp, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	; (8001784 <startFsm+0x4c>)
 8001766:	2101      	movs	r1, #1
 8001768:	4008      	ands	r0, r1
 800176a:	f000 f9c2 	bl	8001af2 <my_printf>
	fsmContext[instance].started = TRUE;
 800176e:	2301      	movs	r3, #1
 8001770:	717b      	strb	r3, [r7, #5]
	checkEntryAction(fsmContext[instance].fsm);
 8001772:	5928      	ldr	r0, [r5, r4]
 8001774:	f7ff feeb 	bl	800154e <checkEntryAction>
}
 8001778:	4630      	mov	r0, r6
 800177a:	b003      	add	sp, #12
 800177c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177e:	bf00      	nop
 8001780:	200002fc 	.word	0x200002fc
 8001784:	08007104 	.word	0x08007104

08001788 <initFsm>:
	for (var = 0; var < MAX_NUM_OF_FSM; ++var) {
 8001788:	2200      	movs	r2, #0
 800178a:	e00a      	b.n	80017a2 <initFsm+0x1a>
		fsmContext[var].configured = FALSE;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <initFsm+0x20>)
 800178e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8001792:	2100      	movs	r1, #0
 8001794:	7119      	strb	r1, [r3, #4]
		fsmContext[var].loopTiming = 0;
 8001796:	8119      	strh	r1, [r3, #8]
		fsmContext[var].newEvent = FALSE;
 8001798:	7199      	strb	r1, [r3, #6]
		fsmContext[var].started = FALSE;
 800179a:	7159      	strb	r1, [r3, #5]
		fsmContext[var].timeElapsed = 0;
 800179c:	60d9      	str	r1, [r3, #12]
	for (var = 0; var < MAX_NUM_OF_FSM; ++var) {
 800179e:	3201      	adds	r2, #1
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	2a13      	cmp	r2, #19
 80017a4:	d9f2      	bls.n	800178c <initFsm+0x4>
}
 80017a6:	4770      	bx	lr
 80017a8:	200002fc 	.word	0x200002fc

080017ac <callFsmTask>:
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
	for (var = 0; var < MAX_NUM_OF_FSM; ++var)
 80017ae:	2400      	movs	r4, #0
 80017b0:	e009      	b.n	80017c6 <callFsmTask+0x1a>
				fsmContext[var].newEvent = FALSE;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <callFsmTask+0x64>)
 80017b4:	eb03 1505 	add.w	r5, r3, r5, lsl #4
 80017b8:	2300      	movs	r3, #0
 80017ba:	71ab      	strb	r3, [r5, #6]
				executeFsm(var);
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff ff65 	bl	800168c <executeFsm>
	for (var = 0; var < MAX_NUM_OF_FSM; ++var)
 80017c2:	3401      	adds	r4, #1
 80017c4:	b2e4      	uxtb	r4, r4
 80017c6:	2c13      	cmp	r4, #19
 80017c8:	d821      	bhi.n	800180e <callFsmTask+0x62>
		if (fsmContext[var].configured && fsmContext[var].started)
 80017ca:	4625      	mov	r5, r4
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <callFsmTask+0x64>)
 80017ce:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80017d2:	791b      	ldrb	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f4      	beq.n	80017c2 <callFsmTask+0x16>
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <callFsmTask+0x64>)
 80017da:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80017de:	795b      	ldrb	r3, [r3, #5]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ee      	beq.n	80017c2 <callFsmTask+0x16>
			fsmContext[var].timeElapsed ++;
 80017e4:	4e0a      	ldr	r6, [pc, #40]	; (8001810 <callFsmTask+0x64>)
 80017e6:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80017ea:	68f3      	ldr	r3, [r6, #12]
 80017ec:	3301      	adds	r3, #1
 80017ee:	60f3      	str	r3, [r6, #12]
			checkTimingEvents(var);
 80017f0:	4620      	mov	r0, r4
 80017f2:	f7ff fec9 	bl	8001588 <checkTimingEvents>
			if ((fsmContext[var].timeElapsed%fsmContext[var].loopTiming)==0 || fsmContext[var].newEvent)
 80017f6:	68f1      	ldr	r1, [r6, #12]
 80017f8:	8932      	ldrh	r2, [r6, #8]
 80017fa:	fbb1 f3f2 	udiv	r3, r1, r2
 80017fe:	fb02 1313 	mls	r3, r2, r3, r1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0d5      	beq.n	80017b2 <callFsmTask+0x6>
 8001806:	79b3      	ldrb	r3, [r6, #6]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0da      	beq.n	80017c2 <callFsmTask+0x16>
 800180c:	e7d1      	b.n	80017b2 <callFsmTask+0x6>
}
 800180e:	bd70      	pop	{r4, r5, r6, pc}
 8001810:	200002fc 	.word	0x200002fc

08001814 <configureFsm>:
	tBool found = FALSE;
 8001814:	2200      	movs	r2, #0
	uint8_t var =0;
 8001816:	4613      	mov	r3, r2
	while (var<MAX_NUM_OF_FSM && !found)
 8001818:	e008      	b.n	800182c <configureFsm+0x18>
		found = !fsmContext[var].configured;
 800181a:	4a11      	ldr	r2, [pc, #68]	; (8001860 <configureFsm+0x4c>)
 800181c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001820:	7912      	ldrb	r2, [r2, #4]
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	0952      	lsrs	r2, r2, #5
		var++;
 8001828:	3301      	adds	r3, #1
 800182a:	b2db      	uxtb	r3, r3
	while (var<MAX_NUM_OF_FSM && !found)
 800182c:	2b13      	cmp	r3, #19
 800182e:	d801      	bhi.n	8001834 <configureFsm+0x20>
 8001830:	2a00      	cmp	r2, #0
 8001832:	d0f2      	beq.n	800181a <configureFsm+0x6>
	var--;
 8001834:	3b01      	subs	r3, #1
 8001836:	b2db      	uxtb	r3, r3
	if (found)
 8001838:	b16a      	cbz	r2, 8001856 <configureFsm+0x42>
{
 800183a:	b430      	push	{r4, r5}
		fsmContext[var].fsm = fsm;
 800183c:	4d08      	ldr	r5, [pc, #32]	; (8001860 <configureFsm+0x4c>)
 800183e:	011c      	lsls	r4, r3, #4
 8001840:	192a      	adds	r2, r5, r4
 8001842:	5128      	str	r0, [r5, r4]
		fsmContext[var].configured = TRUE;
 8001844:	2001      	movs	r0, #1
 8001846:	7110      	strb	r0, [r2, #4]
		fsmContext[var].loopTiming = loopTiming;
 8001848:	8111      	strh	r1, [r2, #8]
		ret = RET_OK;
 800184a:	2200      	movs	r2, #0
	if (ret!=RET_OK)
 800184c:	b102      	cbz	r2, 8001850 <configureFsm+0x3c>
		var = 255;
 800184e:	23ff      	movs	r3, #255	; 0xff
}
 8001850:	4618      	mov	r0, r3
 8001852:	bc30      	pop	{r4, r5}
 8001854:	4770      	bx	lr
	eError ret = RET_FAIL;
 8001856:	2201      	movs	r2, #1
	if (ret!=RET_OK)
 8001858:	b102      	cbz	r2, 800185c <configureFsm+0x48>
		var = 255;
 800185a:	23ff      	movs	r3, #255	; 0xff
}
 800185c:	4618      	mov	r0, r3
 800185e:	4770      	bx	lr
 8001860:	200002fc 	.word	0x200002fc

08001864 <resetFsm>:
	if (fsmContext[instance].configured)
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <resetFsm+0x24>)
 8001866:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800186a:	791b      	ldrb	r3, [r3, #4]
 800186c:	b90b      	cbnz	r3, 8001872 <resetFsm+0xe>
	eError ret = RET_FAIL;
 800186e:	2001      	movs	r0, #1
 8001870:	4770      	bx	lr
{
 8001872:	b510      	push	{r4, lr}
 8001874:	4604      	mov	r4, r0
		clearEvents(fsmContext[instance].fsm);
 8001876:	0103      	lsls	r3, r0, #4
 8001878:	4a03      	ldr	r2, [pc, #12]	; (8001888 <resetFsm+0x24>)
 800187a:	58d0      	ldr	r0, [r2, r3]
 800187c:	f7ff fe71 	bl	8001562 <clearEvents>
		ret = startFsm(instance);
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff ff59 	bl	8001738 <startFsm>
 8001886:	bd10      	pop	{r4, pc}
 8001888:	200002fc 	.word	0x200002fc

0800188c <announceFsmEvent>:
	if (fsmContext[instance].configured && fsmContext[instance].started && fsmContext[instance].fsm->event[eventId].type==CALLBACK)
 800188c:	4b26      	ldr	r3, [pc, #152]	; (8001928 <announceFsmEvent+0x9c>)
 800188e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8001892:	791b      	ldrb	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d043      	beq.n	8001920 <announceFsmEvent+0x94>
 8001898:	4b23      	ldr	r3, [pc, #140]	; (8001928 <announceFsmEvent+0x9c>)
 800189a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800189e:	795b      	ldrb	r3, [r3, #5]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03f      	beq.n	8001924 <announceFsmEvent+0x98>
{
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	b085      	sub	sp, #20
	if (fsmContext[instance].configured && fsmContext[instance].started && fsmContext[instance].fsm->event[eventId].type==CALLBACK)
 80018a8:	0103      	lsls	r3, r0, #4
 80018aa:	4a1f      	ldr	r2, [pc, #124]	; (8001928 <announceFsmEvent+0x9c>)
 80018ac:	58d3      	ldr	r3, [r2, r3]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	010a      	lsls	r2, r1, #4
 80018b2:	4413      	add	r3, r2
 80018b4:	791c      	ldrb	r4, [r3, #4]
 80018b6:	2c02      	cmp	r4, #2
 80018b8:	d002      	beq.n	80018c0 <announceFsmEvent+0x34>
	eError retValue = RET_FAIL;
 80018ba:	2001      	movs	r0, #1
}
 80018bc:	b005      	add	sp, #20
 80018be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018c0:	460e      	mov	r6, r1
 80018c2:	4607      	mov	r7, r0
		fsmContext[instance].fsm->event[eventId].value = TRUE;
 80018c4:	2101      	movs	r1, #1
 80018c6:	7319      	strb	r1, [r3, #12]
		fsmContext[instance].newEvent = TRUE;
 80018c8:	4d17      	ldr	r5, [pc, #92]	; (8001928 <announceFsmEvent+0x9c>)
 80018ca:	0104      	lsls	r4, r0, #4
 80018cc:	192b      	adds	r3, r5, r4
 80018ce:	7199      	strb	r1, [r3, #6]
		my_printf((fsmContext[instance].fsm->logEnable & FSM_LOG) == FSM_LOG,VERBOSE_GENERAL, "FSM %s num : %d announce event %s.\n",fsmContext[instance].fsm->name,fsmContext[instance].fsm->numFsm,fsmContext[instance].fsm->event[eventId].EventName);
 80018d0:	592b      	ldr	r3, [r5, r4]
 80018d2:	7e18      	ldrb	r0, [r3, #24]
 80018d4:	f893 e000 	ldrb.w	lr, [r3]
 80018d8:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f85c 2002 	ldr.w	r2, [ip, r2]
 80018e2:	9201      	str	r2, [sp, #4]
 80018e4:	f8cd e000 	str.w	lr, [sp]
 80018e8:	4a10      	ldr	r2, [pc, #64]	; (800192c <announceFsmEvent+0xa0>)
 80018ea:	4008      	ands	r0, r1
 80018ec:	f000 f901 	bl	8001af2 <my_printf>
		if ((fsmContext[instance].fsm->logEnable & FSM_TRACE) == FSM_TRACE)
 80018f0:	592b      	ldr	r3, [r5, r4]
 80018f2:	7e1a      	ldrb	r2, [r3, #24]
 80018f4:	f012 0f02 	tst.w	r2, #2
 80018f8:	d101      	bne.n	80018fe <announceFsmEvent+0x72>
		retValue = RET_OK;
 80018fa:	2000      	movs	r0, #0
 80018fc:	e7de      	b.n	80018bc <announceFsmEvent+0x30>
			BufferSetData8(buffer, 0, instance);
 80018fe:	f88d 700c 	strb.w	r7, [sp, #12]
			BufferSetData8(buffer, 1, FSM_TRACE_EVENT);
 8001902:	2400      	movs	r4, #0
 8001904:	f88d 400d 	strb.w	r4, [sp, #13]
			BufferSetData8(buffer, 2, fsmContext[instance].fsm->currentState);
 8001908:	7c9b      	ldrb	r3, [r3, #18]
 800190a:	f88d 300e 	strb.w	r3, [sp, #14]
			BufferSetData8(buffer, 3, eventId);
 800190e:	f88d 600f 	strb.w	r6, [sp, #15]
			my_printTraceBin(FSM_PARAMETERS*10 + PROTOCOL_DEVICE_INSTANCE,buffer,4);
 8001912:	2204      	movs	r2, #4
 8001914:	a903      	add	r1, sp, #12
 8001916:	4620      	mov	r0, r4
 8001918:	f000 f8fc 	bl	8001b14 <my_printTraceBin>
		retValue = RET_OK;
 800191c:	4620      	mov	r0, r4
 800191e:	e7cd      	b.n	80018bc <announceFsmEvent+0x30>
	eError retValue = RET_FAIL;
 8001920:	2001      	movs	r0, #1
 8001922:	4770      	bx	lr
 8001924:	2001      	movs	r0, #1
 8001926:	4770      	bx	lr
 8001928:	200002fc 	.word	0x200002fc
 800192c:	080070b0 	.word	0x080070b0

08001930 <setLogFsm>:
	if (fsmContext[instance].configured)
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <setLogFsm+0x1c>)
 8001932:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8001936:	791b      	ldrb	r3, [r3, #4]
 8001938:	b12b      	cbz	r3, 8001946 <setLogFsm+0x16>
		fsmContext[instance].fsm->logEnable = value;
 800193a:	0100      	lsls	r0, r0, #4
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <setLogFsm+0x1c>)
 800193e:	581b      	ldr	r3, [r3, r0]
 8001940:	7619      	strb	r1, [r3, #24]
		ret = RET_OK;
 8001942:	2000      	movs	r0, #0
 8001944:	4770      	bx	lr
	eError ret = RET_FAIL;
 8001946:	2001      	movs	r0, #1
}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	200002fc 	.word	0x200002fc

08001950 <CreateQueue>:
 * @return  None.
 *
 ****************************************************************************/
void CreateQueue(tCircularBuffer* buffer, uint8_t* bufferPtr, uint16_t size)
{
	buffer->bufferPtr = bufferPtr;
 8001950:	6081      	str	r1, [r0, #8]
	buffer->bufferLen = size;
 8001952:	80c2      	strh	r2, [r0, #6]
	buffer->readPtr = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	8043      	strh	r3, [r0, #2]
	buffer->writePtr = 0;
 8001958:	8083      	strh	r3, [r0, #4]
    buffer->numOfBytes = 0;
 800195a:	8003      	strh	r3, [r0, #0]
 800195c:	4770      	bx	lr

0800195e <AddQueueByte>:
 *
 * @return  None.
 *
 ****************************************************************************/
void AddQueueByte(tCircularBuffer* buffer, uint8_t data)
{
 800195e:	b538      	push	{r3, r4, r5, lr}
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
	interruptsDisable();
 8001964:	f001 f85c 	bl	8002a20 <interruptsDisable>
    buffer->bufferPtr[buffer->writePtr]= data;
 8001968:	68a2      	ldr	r2, [r4, #8]
 800196a:	88a3      	ldrh	r3, [r4, #4]
 800196c:	54d5      	strb	r5, [r2, r3]
    buffer->numOfBytes++;
 800196e:	8823      	ldrh	r3, [r4, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	8023      	strh	r3, [r4, #0]
    buffer->writePtr++;
 8001974:	88a3      	ldrh	r3, [r4, #4]
 8001976:	3301      	adds	r3, #1
 8001978:	b29b      	uxth	r3, r3
    buffer->writePtr %= buffer->bufferLen;
 800197a:	88e1      	ldrh	r1, [r4, #6]
 800197c:	fbb3 f2f1 	udiv	r2, r3, r1
 8001980:	fb01 3312 	mls	r3, r1, r2, r3
 8001984:	80a3      	strh	r3, [r4, #4]
	interruptsEnable();
 8001986:	f001 f837 	bl	80029f8 <interruptsEnable>
 800198a:	bd38      	pop	{r3, r4, r5, pc}

0800198c <GetQueueByte>:
 *
 * @return  Next byte into queue
 *
 ****************************************************************************/
uint8_t GetQueueByte(tCircularBuffer* buffer)
{
 800198c:	b538      	push	{r3, r4, r5, lr}
 800198e:	4604      	mov	r4, r0
    uint8_t result;
	interruptsDisable();
 8001990:	f001 f846 	bl	8002a20 <interruptsDisable>
    result = buffer->bufferPtr[buffer->readPtr];
 8001994:	68a2      	ldr	r2, [r4, #8]
 8001996:	8863      	ldrh	r3, [r4, #2]
 8001998:	5cd5      	ldrb	r5, [r2, r3]
    buffer->numOfBytes--;
 800199a:	8822      	ldrh	r2, [r4, #0]
 800199c:	3a01      	subs	r2, #1
 800199e:	8022      	strh	r2, [r4, #0]
    buffer->readPtr++;
 80019a0:	3301      	adds	r3, #1
 80019a2:	b29b      	uxth	r3, r3
    buffer->readPtr %= buffer->bufferLen;
 80019a4:	88e1      	ldrh	r1, [r4, #6]
 80019a6:	fbb3 f2f1 	udiv	r2, r3, r1
 80019aa:	fb01 3312 	mls	r3, r1, r2, r3
 80019ae:	8063      	strh	r3, [r4, #2]
    interruptsEnable();
 80019b0:	f001 f822 	bl	80029f8 <interruptsEnable>
    return result;
}
 80019b4:	4628      	mov	r0, r5
 80019b6:	bd38      	pop	{r3, r4, r5, pc}

080019b8 <GetQueuePendingBytes>:
 *
 ****************************************************************************/
uint16_t GetQueuePendingBytes(tCircularBuffer* buffer)
{
    return buffer->numOfBytes;
}
 80019b8:	8800      	ldrh	r0, [r0, #0]
 80019ba:	4770      	bx	lr

080019bc <GetQueueFreeBytes>:
 * @return  Free spaces in queue
 *
 ****************************************************************************/
uint16_t GetQueueFreeBytes(tCircularBuffer* buffer)
{
    return (buffer->bufferLen-buffer->numOfBytes);
 80019bc:	88c3      	ldrh	r3, [r0, #6]
 80019be:	8800      	ldrh	r0, [r0, #0]
 80019c0:	1a18      	subs	r0, r3, r0
}
 80019c2:	b280      	uxth	r0, r0
 80019c4:	4770      	bx	lr

080019c6 <vprint>:
/****************************************************************************
 *  PRIVATE FUNCTIONS
 ***************************************************************************/

static void vprint(eVerboseLevels level,const char *fmt, va_list argp)
{
 80019c6:	b500      	push	{lr}
 80019c8:	b0ff      	sub	sp, #508	; 0x1fc
    char string[500];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80019ca:	a801      	add	r0, sp, #4
 80019cc:	f004 fc3c 	bl	8006248 <vsiprintf>
    {
    	//printShellString((int8_t*)string,level);
    }
}
 80019d0:	b07f      	add	sp, #508	; 0x1fc
 80019d2:	f85d fb04 	ldr.w	pc, [sp], #4

080019d6 <dtoh>:
{
 80019d6:	b430      	push	{r4, r5}
 80019d8:	4604      	mov	r4, r0
    uint8_t i, index = 0;
 80019da:	2000      	movs	r0, #0
	for(i=length; i>0; i--)
 80019dc:	e005      	b.n	80019ea <dtoh+0x14>
			out[index++] = nibbleData - 10 + 'A';
 80019de:	1c45      	adds	r5, r0, #1
 80019e0:	3337      	adds	r3, #55	; 0x37
 80019e2:	540b      	strb	r3, [r1, r0]
 80019e4:	b2e8      	uxtb	r0, r5
	for(i=length; i>0; i--)
 80019e6:	3a01      	subs	r2, #1
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	b162      	cbz	r2, 8001a06 <dtoh+0x30>
		nibbleData = MON_GET_NIBBLE(in, i-1);
 80019ec:	1e53      	subs	r3, r2, #1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa44 f303 	asr.w	r3, r4, r3
 80019f4:	f003 030f 	and.w	r3, r3, #15
		if (nibbleData < 10)
 80019f8:	2b09      	cmp	r3, #9
 80019fa:	d8f0      	bhi.n	80019de <dtoh+0x8>
			out[index++] = nibbleData + '0';
 80019fc:	1c45      	adds	r5, r0, #1
 80019fe:	3330      	adds	r3, #48	; 0x30
 8001a00:	540b      	strb	r3, [r1, r0]
 8001a02:	b2e8      	uxtb	r0, r5
 8001a04:	e7ef      	b.n	80019e6 <dtoh+0x10>
}
 8001a06:	bc30      	pop	{r4, r5}
 8001a08:	4770      	bx	lr
	...

08001a0c <itos>:
{
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0e:	b085      	sub	sp, #20
    if(sign < 0)
 8001a10:	f1b0 0e00 	subs.w	lr, r0, #0
 8001a14:	db0d      	blt.n	8001a32 <itos+0x26>
 8001a16:	4670      	mov	r0, lr
	switch(type)
 8001a18:	b171      	cbz	r1, 8001a38 <itos+0x2c>
 8001a1a:	2901      	cmp	r1, #1
 8001a1c:	d107      	bne.n	8001a2e <itos+0x22>
 8001a1e:	4614      	mov	r4, r2
							j = dtoh(value, buffer, 8);
 8001a20:	2208      	movs	r2, #8
 8001a22:	4621      	mov	r1, r4
 8001a24:	f7ff ffd7 	bl	80019d6 <dtoh>
 8001a28:	b240      	sxtb	r0, r0
							buffer[j] = '\0';
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	5423      	strb	r3, [r4, r0]
}
 8001a2e:	b005      	add	sp, #20
 8001a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        value= -value;
 8001a32:	f1ce 0000 	rsb	r0, lr, #0
 8001a36:	e7ef      	b.n	8001a18 <itos+0xc>
	switch(type)
 8001a38:	2500      	movs	r5, #0
								str[i++] = value % 10 + '0';
 8001a3a:	b2ef      	uxtb	r7, r5
 8001a3c:	1c7c      	adds	r4, r7, #1
 8001a3e:	b264      	sxtb	r4, r4
 8001a40:	4918      	ldr	r1, [pc, #96]	; (8001aa4 <itos+0x98>)
 8001a42:	fb81 3100 	smull	r3, r1, r1, r0
 8001a46:	17c3      	asrs	r3, r0, #31
 8001a48:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a52:	005e      	lsls	r6, r3, #1
 8001a54:	1b83      	subs	r3, r0, r6
 8001a56:	3330      	adds	r3, #48	; 0x30
 8001a58:	a804      	add	r0, sp, #16
 8001a5a:	4405      	add	r5, r0
 8001a5c:	f805 3c0c 	strb.w	r3, [r5, #-12]
							} while ((value /= 10) > 0);
 8001a60:	4608      	mov	r0, r1
								str[i++] = value % 10 + '0';
 8001a62:	4625      	mov	r5, r4
							} while ((value /= 10) > 0);
 8001a64:	2900      	cmp	r1, #0
 8001a66:	dce8      	bgt.n	8001a3a <itos+0x2e>
							if (sign < 0)
 8001a68:	f1be 0f00 	cmp.w	lr, #0
 8001a6c:	db03      	blt.n	8001a76 <itos+0x6a>
							for(i--,j=0;i>=0;i--,j++)
 8001a6e:	1e63      	subs	r3, r4, #1
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	2000      	movs	r0, #0
 8001a74:	e010      	b.n	8001a98 <itos+0x8c>
								str[i++] = '-';
 8001a76:	3702      	adds	r7, #2
 8001a78:	ab04      	add	r3, sp, #16
 8001a7a:	441c      	add	r4, r3
 8001a7c:	232d      	movs	r3, #45	; 0x2d
 8001a7e:	f804 3c0c 	strb.w	r3, [r4, #-12]
 8001a82:	b27c      	sxtb	r4, r7
 8001a84:	e7f3      	b.n	8001a6e <itos+0x62>
								buffer[j] = str[i];
 8001a86:	a904      	add	r1, sp, #16
 8001a88:	4419      	add	r1, r3
 8001a8a:	f911 1c0c 	ldrsb.w	r1, [r1, #-12]
 8001a8e:	5411      	strb	r1, [r2, r0]
							for(i--,j=0;i>=0;i--,j++)
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	3001      	adds	r0, #1
 8001a96:	b240      	sxtb	r0, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	daf4      	bge.n	8001a86 <itos+0x7a>
							buffer[j]  = '\0';
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	5413      	strb	r3, [r2, r0]
}
 8001aa0:	e7c5      	b.n	8001a2e <itos+0x22>
 8001aa2:	bf00      	nop
 8001aa4:	66666667 	.word	0x66666667

08001aa8 <_atoi>:
    *result = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	600b      	str	r3, [r1, #0]
    while(*length > 0)
 8001aac:	7813      	ldrb	r3, [r2, #0]
 8001aae:	b1fb      	cbz	r3, 8001af0 <_atoi+0x48>
        if ((*pointer >= '0') && (*pointer <= '9'))
 8001ab0:	f990 3000 	ldrsb.w	r3, [r0]
 8001ab4:	3b30      	subs	r3, #48	; 0x30
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b09      	cmp	r3, #9
 8001aba:	d818      	bhi.n	8001aee <_atoi+0x46>
{
 8001abc:	b430      	push	{r4, r5}
 8001abe:	e005      	b.n	8001acc <_atoi+0x24>
        if ((*pointer >= '0') && (*pointer <= '9'))
 8001ac0:	f990 3000 	ldrsb.w	r3, [r0]
 8001ac4:	3b30      	subs	r3, #48	; 0x30
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	d80f      	bhi.n	8001aec <_atoi+0x44>
            *result *= 10;
 8001acc:	680c      	ldr	r4, [r1, #0]
 8001ace:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8001ad2:	0065      	lsls	r5, r4, #1
 8001ad4:	600d      	str	r5, [r1, #0]
            *result += *pointer - '0';
 8001ad6:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8001ada:	442b      	add	r3, r5
 8001adc:	3b30      	subs	r3, #48	; 0x30
 8001ade:	600b      	str	r3, [r1, #0]
            (*length)--;
 8001ae0:	7813      	ldrb	r3, [r2, #0]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	7013      	strb	r3, [r2, #0]
    while(*length > 0)
 8001ae6:	7813      	ldrb	r3, [r2, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e9      	bne.n	8001ac0 <_atoi+0x18>
}
 8001aec:	bc30      	pop	{r4, r5}
 8001aee:	4770      	bx	lr
 8001af0:	4770      	bx	lr

08001af2 <my_printf>:
	if ((enable) || (level != VERBOSE_GENERAL))
 8001af2:	b908      	cbnz	r0, 8001af8 <my_printf+0x6>
 8001af4:	2901      	cmp	r1, #1
 8001af6:	d00c      	beq.n	8001b12 <my_printf+0x20>
{
 8001af8:	b40c      	push	{r2, r3}
 8001afa:	b500      	push	{lr}
 8001afc:	b083      	sub	sp, #12
 8001afe:	4608      	mov	r0, r1
		va_start(argp, fmt);
 8001b00:	aa05      	add	r2, sp, #20
 8001b02:	9201      	str	r2, [sp, #4]
		vprint(level, fmt, argp);
 8001b04:	9904      	ldr	r1, [sp, #16]
 8001b06:	f7ff ff5e 	bl	80019c6 <vprint>
}
 8001b0a:	b003      	add	sp, #12
 8001b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b10:	b002      	add	sp, #8
 8001b12:	4770      	bx	lr

08001b14 <my_printTraceBin>:
{
 8001b14:	4770      	bx	lr
	...

08001b18 <AtTimeoutCallback>:

	return ret;
}

tBool AtTimeoutCallback(tSwTimerIndex SwTimerIndex)
{
 8001b18:	b508      	push	{r3, lr}
	if(isRequestInProgress)
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <AtTimeoutCallback+0x18>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b90b      	cbnz	r3, 8001b24 <AtTimeoutCallback+0xc>
	{
		announceFsmEvent(indexfsmATCmd, AT_RESP_TIMEOUT_EVENT);
	}

	return FALSE;
}
 8001b20:	2000      	movs	r0, #0
 8001b22:	bd08      	pop	{r3, pc}
		announceFsmEvent(indexfsmATCmd, AT_RESP_TIMEOUT_EVENT);
 8001b24:	2101      	movs	r1, #1
 8001b26:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <AtTimeoutCallback+0x1c>)
 8001b28:	7818      	ldrb	r0, [r3, #0]
 8001b2a:	f7ff feaf 	bl	800188c <announceFsmEvent>
 8001b2e:	e7f7      	b.n	8001b20 <AtTimeoutCallback+0x8>
 8001b30:	20000475 	.word	0x20000475
 8001b34:	20000474 	.word	0x20000474

08001b38 <ATCommandParse>:
{
 8001b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	commandSize = strlen(ATActualRequest.command);
 8001b3a:	4e2a      	ldr	r6, [pc, #168]	; (8001be4 <ATCommandParse+0xac>)
 8001b3c:	68b5      	ldr	r5, [r6, #8]
 8001b3e:	4628      	mov	r0, r5
 8001b40:	f7fe fb4e 	bl	80001e0 <strlen>
 8001b44:	b284      	uxth	r4, r0
 8001b46:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <ATCommandParse+0xb0>)
 8001b48:	801c      	strh	r4, [r3, #0]
	if(ATActualRequest.mode == AT_REQ_CMD)
 8001b4a:	79b3      	ldrb	r3, [r6, #6]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d136      	bne.n	8001bbe <ATCommandParse+0x86>
		if((ATActualRequest.command[0] == 'A') && (ATActualRequest.command[1] == 'T'))
 8001b50:	782b      	ldrb	r3, [r5, #0]
 8001b52:	2b41      	cmp	r3, #65	; 0x41
 8001b54:	d001      	beq.n	8001b5a <ATCommandParse+0x22>
	eError ret = RET_INVALID_COMMAND;
 8001b56:	2704      	movs	r7, #4
 8001b58:	e034      	b.n	8001bc4 <ATCommandParse+0x8c>
		if((ATActualRequest.command[0] == 'A') && (ATActualRequest.command[1] == 'T'))
 8001b5a:	786b      	ldrb	r3, [r5, #1]
 8001b5c:	2b54      	cmp	r3, #84	; 0x54
 8001b5e:	d001      	beq.n	8001b64 <ATCommandParse+0x2c>
	eError ret = RET_INVALID_COMMAND;
 8001b60:	2704      	movs	r7, #4
 8001b62:	e02f      	b.n	8001bc4 <ATCommandParse+0x8c>
			memset(commandHeader, 0, 15);
 8001b64:	4b21      	ldr	r3, [pc, #132]	; (8001bec <ATCommandParse+0xb4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	f8c3 200b 	str.w	r2, [r3, #11]
			if((commandSize+2) <= AT_CMD_BUFFER_SIZE)
 8001b72:	1ca3      	adds	r3, r4, #2
 8001b74:	2bff      	cmp	r3, #255	; 0xff
 8001b76:	dd18      	ble.n	8001baa <ATCommandParse+0x72>
	eError ret = RET_INVALID_COMMAND;
 8001b78:	2704      	movs	r7, #4
 8001b7a:	e023      	b.n	8001bc4 <ATCommandParse+0x8c>
					else if(initOffset)
 8001b7c:	b9c9      	cbnz	r1, 8001bb2 <ATCommandParse+0x7a>
				for(i=2; i<commandSize; i++)
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	b298      	uxth	r0, r3
 8001b84:	4284      	cmp	r4, r0
 8001b86:	d914      	bls.n	8001bb2 <ATCommandParse+0x7a>
					if((ATActualRequest.command[i]!='+') && (ATActualRequest.command[i]!='#') && (ATActualRequest.command[i]!=0)
 8001b88:	5ce8      	ldrb	r0, [r5, r3]
 8001b8a:	282b      	cmp	r0, #43	; 0x2b
 8001b8c:	d0f6      	beq.n	8001b7c <ATCommandParse+0x44>
 8001b8e:	2823      	cmp	r0, #35	; 0x23
 8001b90:	d0f4      	beq.n	8001b7c <ATCommandParse+0x44>
 8001b92:	2800      	cmp	r0, #0
 8001b94:	d0f2      	beq.n	8001b7c <ATCommandParse+0x44>
						&& (ATActualRequest.command[i]!='=') && (ATActualRequest.command[i]!='?'))
 8001b96:	283d      	cmp	r0, #61	; 0x3d
 8001b98:	d0f0      	beq.n	8001b7c <ATCommandParse+0x44>
 8001b9a:	283f      	cmp	r0, #63	; 0x3f
 8001b9c:	d0ee      	beq.n	8001b7c <ATCommandParse+0x44>
						headerSize++;
 8001b9e:	3201      	adds	r2, #1
 8001ba0:	b2d2      	uxtb	r2, r2
						if(!initOffset)
 8001ba2:	2900      	cmp	r1, #0
 8001ba4:	d1eb      	bne.n	8001b7e <ATCommandParse+0x46>
							initOffset = i;
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	e7e9      	b.n	8001b7e <ATCommandParse+0x46>
 8001baa:	2302      	movs	r3, #2
 8001bac:	2200      	movs	r2, #0
 8001bae:	4611      	mov	r1, r2
 8001bb0:	e7e7      	b.n	8001b82 <ATCommandParse+0x4a>
				memcpy(commandHeader, &ATActualRequest.command[initOffset], headerSize);
 8001bb2:	4429      	add	r1, r5
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <ATCommandParse+0xb4>)
 8001bb6:	f004 fb09 	bl	80061cc <memcpy>
				ret = RET_OK;
 8001bba:	2700      	movs	r7, #0
 8001bbc:	e002      	b.n	8001bc4 <ATCommandParse+0x8c>
	else if(ATActualRequest.mode == AT_REQ_TEXT)
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d00e      	beq.n	8001be0 <ATCommandParse+0xa8>
	eError ret = RET_INVALID_COMMAND;
 8001bc2:	2704      	movs	r7, #4
	memcpy(actualCommand, ATActualRequest.command, commandSize);
 8001bc4:	4e0a      	ldr	r6, [pc, #40]	; (8001bf0 <ATCommandParse+0xb8>)
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	4630      	mov	r0, r6
 8001bcc:	f004 fafe 	bl	80061cc <memcpy>
	memcpy(&actualCommand[commandSize], "\r\n", 2);
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <ATCommandParse+0xbc>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	53a3      	strh	r3, [r4, r6]
	commandSize += 2;
 8001bd6:	3402      	adds	r4, #2
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <ATCommandParse+0xb0>)
 8001bda:	801c      	strh	r4, [r3, #0]
}
 8001bdc:	4638      	mov	r0, r7
 8001bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ret = RET_OK;
 8001be0:	2700      	movs	r7, #0
 8001be2:	e7ef      	b.n	8001bc4 <ATCommandParse+0x8c>
 8001be4:	2000043c 	.word	0x2000043c
 8001be8:	200007a4 	.word	0x200007a4
 8001bec:	20000448 	.word	0x20000448
 8001bf0:	200006a4 	.word	0x200006a4
 8001bf4:	08007130 	.word	0x08007130

08001bf8 <AtProcessResponse>:
{
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	460e      	mov	r6, r1
	if(ATClient[client].pipe == ATClient[ATActualClient].pipe)
 8001bfc:	4605      	mov	r5, r0
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <AtProcessResponse+0xa0>)
 8001c00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001c04:	0082      	lsls	r2, r0, #2
 8001c06:	441a      	add	r2, r3
 8001c08:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8001c0c:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <AtProcessResponse+0xa4>)
 8001c0e:	7812      	ldrb	r2, [r2, #0]
 8001c10:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8001c14:	00a1      	lsls	r1, r4, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c1c:	4298      	cmp	r0, r3
 8001c1e:	d001      	beq.n	8001c24 <AtProcessResponse+0x2c>
 8001c20:	2400      	movs	r4, #0
 8001c22:	e014      	b.n	8001c4e <AtProcessResponse+0x56>
		if(isRequestInProgress)
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <AtProcessResponse+0xa8>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b933      	cbnz	r3, 8001c38 <AtProcessResponse+0x40>
	announceFsmEvent(indexfsmATCmd, AT_RESPONSE_REC_EVENT);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <AtProcessResponse+0xac>)
 8001c2e:	7818      	ldrb	r0, [r3, #0]
 8001c30:	f7ff fe2c 	bl	800188c <announceFsmEvent>
}
 8001c34:	2000      	movs	r0, #0
 8001c36:	bd70      	pop	{r4, r5, r6, pc}
			ATClient[ATActualClient].callback(event, AtRxBuffer, AtRxBufferBytes);
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <AtProcessResponse+0xa0>)
 8001c3a:	440b      	add	r3, r1
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ca8 <AtProcessResponse+0xb0>)
 8001c40:	7812      	ldrb	r2, [r2, #0]
 8001c42:	491a      	ldr	r1, [pc, #104]	; (8001cac <AtProcessResponse+0xb4>)
 8001c44:	4630      	mov	r0, r6
 8001c46:	4798      	blx	r3
 8001c48:	e7ef      	b.n	8001c2a <AtProcessResponse+0x32>
		for(clientPipe=0; clientPipe<NUM_OF_AT_CLIENTS; clientPipe++)
 8001c4a:	3401      	adds	r4, #1
 8001c4c:	b2e4      	uxtb	r4, r4
 8001c4e:	2c02      	cmp	r4, #2
 8001c50:	d8eb      	bhi.n	8001c2a <AtProcessResponse+0x32>
			if(ATClient[clientPipe].pipe == ATClient[client].pipe)
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <AtProcessResponse+0xa0>)
 8001c54:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8001c58:	008a      	lsls	r2, r1, #2
 8001c5a:	441a      	add	r2, r3
 8001c5c:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8001c60:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8001c64:	008a      	lsls	r2, r1, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c6c:	4298      	cmp	r0, r3
 8001c6e:	d1ec      	bne.n	8001c4a <AtProcessResponse+0x52>
				if(ATClient[clientPipe].isURCSubscribed)
 8001c70:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001c74:	0093      	lsls	r3, r2, #2
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <AtProcessResponse+0xa0>)
 8001c78:	5cd3      	ldrb	r3, [r2, r3]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0e5      	beq.n	8001c4a <AtProcessResponse+0x52>
					ATClient[clientPipe].callback(AT_RESP_URC, AtRxBuffer, AtRxBufferBytes);
 8001c7e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8001c82:	00b2      	lsls	r2, r6, #2
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <AtProcessResponse+0xa0>)
 8001c86:	4413      	add	r3, r2
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <AtProcessResponse+0xb0>)
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	4907      	ldr	r1, [pc, #28]	; (8001cac <AtProcessResponse+0xb4>)
 8001c90:	2004      	movs	r0, #4
 8001c92:	4798      	blx	r3
 8001c94:	e7d9      	b.n	8001c4a <AtProcessResponse+0x52>
 8001c96:	bf00      	nop
 8001c98:	200000b0 	.word	0x200000b0
 8001c9c:	200000ac 	.word	0x200000ac
 8001ca0:	20000475 	.word	0x20000475
 8001ca4:	20000474 	.word	0x20000474
 8001ca8:	200007a6 	.word	0x200007a6
 8001cac:	200005a4 	.word	0x200005a4

08001cb0 <AtCheckMaxRetries>:
	if(toRetries >= ATActualRequest.timeoutRetries)
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <AtCheckMaxRetries+0x1c>)
 8001cb2:	785a      	ldrb	r2, [r3, #1]
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <AtCheckMaxRetries+0x20>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d804      	bhi.n	8001cc6 <AtCheckMaxRetries+0x16>
		toRetries = 0;
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <AtCheckMaxRetries+0x20>)
 8001cc0:	701a      	strb	r2, [r3, #0]
		ret = TRUE;
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	4770      	bx	lr
	tBool ret = FALSE;
 8001cc6:	2000      	movs	r0, #0
}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000043c 	.word	0x2000043c
 8001cd0:	20000476 	.word	0x20000476

08001cd4 <AtCheckNoMaxRetries>:
	if(toRetries < ATActualRequest.timeoutRetries)
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <AtCheckNoMaxRetries+0x1c>)
 8001cd6:	785a      	ldrb	r2, [r3, #1]
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <AtCheckNoMaxRetries+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d904      	bls.n	8001cea <AtCheckNoMaxRetries+0x16>
		toRetries++;
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <AtCheckNoMaxRetries+0x20>)
 8001ce4:	7013      	strb	r3, [r2, #0]
		ret = TRUE;
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	4770      	bx	lr
	tBool ret = FALSE;
 8001cea:	2000      	movs	r0, #0
}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000043c 	.word	0x2000043c
 8001cf4:	20000476 	.word	0x20000476

08001cf8 <AtCheckExpectedResponse>:
}
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	4770      	bx	lr

08001cfc <AtCheckNoExpectedResponse>:
}
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	4770      	bx	lr

08001d00 <AtSendCommand>:
{
 8001d00:	b570      	push	{r4, r5, r6, lr}
	WRITE_HREG(ATClient[ATActualClient].UARTInstance, HREG_UART_BUFFER_SIZE, commandSize);
 8001d02:	4c15      	ldr	r4, [pc, #84]	; (8001d58 <AtSendCommand+0x58>)
 8001d04:	4e15      	ldr	r6, [pc, #84]	; (8001d5c <AtSendCommand+0x5c>)
 8001d06:	7833      	ldrb	r3, [r6, #0]
 8001d08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d0c:	009a      	lsls	r2, r3, #2
 8001d0e:	18a3      	adds	r3, r4, r2
 8001d10:	4d13      	ldr	r5, [pc, #76]	; (8001d60 <AtSendCommand+0x60>)
 8001d12:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <AtSendCommand+0x64>)
 8001d14:	8812      	ldrh	r2, [r2, #0]
 8001d16:	4629      	mov	r1, r5
 8001d18:	7a18      	ldrb	r0, [r3, #8]
 8001d1a:	f7fe fd53 	bl	80007c4 <writeHreg>
	WRITE_HREG(ATClient[ATActualClient].UARTInstance, HREG_UART_DATA, actualCommand);
 8001d1e:	7833      	ldrb	r3, [r6, #0]
 8001d20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d24:	009a      	lsls	r2, r3, #2
 8001d26:	4414      	add	r4, r2
 8001d28:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <AtSendCommand+0x68>)
 8001d2a:	f105 0114 	add.w	r1, r5, #20
 8001d2e:	7a20      	ldrb	r0, [r4, #8]
 8001d30:	f7fe fd48 	bl	80007c4 <writeHreg>
	if(ATActualRequest.timeout > 0)
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <AtSendCommand+0x6c>)
 8001d36:	885a      	ldrh	r2, [r3, #2]
 8001d38:	b90a      	cbnz	r2, 8001d3e <AtSendCommand+0x3e>
}
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	bd70      	pop	{r4, r5, r6, pc}
		WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_SET, ATActualRequest.timeout);
 8001d3e:	4c0c      	ldr	r4, [pc, #48]	; (8001d70 <AtSendCommand+0x70>)
 8001d40:	4621      	mov	r1, r4
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7fe fd3e 	bl	80007c4 <writeHreg>
		WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_STATE, SW_TIMER_STATE_STARTED);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f1a4 0128 	sub.w	r1, r4, #40	; 0x28
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7fe fd38 	bl	80007c4 <writeHreg>
 8001d54:	e7f1      	b.n	8001d3a <AtSendCommand+0x3a>
 8001d56:	bf00      	nop
 8001d58:	200000b0 	.word	0x200000b0
 8001d5c:	200000ac 	.word	0x200000ac
 8001d60:	08006d70 	.word	0x08006d70
 8001d64:	200007a4 	.word	0x200007a4
 8001d68:	200006a4 	.word	0x200006a4
 8001d6c:	2000043c 	.word	0x2000043c
 8001d70:	08006d0c 	.word	0x08006d0c

08001d74 <AtCheckResponse>:
{
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	b082      	sub	sp, #8
	for(client=0; client<NUM_OF_AT_CLIENTS; client++)
 8001d78:	2400      	movs	r4, #0
	eError ret = RET_OK;
 8001d7a:	4626      	mov	r6, r4
	for(client=0; client<NUM_OF_AT_CLIENTS; client++)
 8001d7c:	e01c      	b.n	8001db8 <AtCheckResponse+0x44>
		else if(pipeDeviceParseCommand(ATClient[client].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE,(int8_t *) "\r\nERROR\r\n", 9, &AtRxBufferBytes))
 8001d7e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001d82:	009a      	lsls	r2, r3, #2
 8001d84:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <AtCheckResponse+0xc4>)
 8001d86:	4413      	add	r3, r2
 8001d88:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <AtCheckResponse+0xc8>)
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	2309      	movs	r3, #9
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <AtCheckResponse+0xcc>)
 8001d96:	22ff      	movs	r2, #255	; 0xff
 8001d98:	492a      	ldr	r1, [pc, #168]	; (8001e44 <AtCheckResponse+0xd0>)
 8001d9a:	f000 fb11 	bl	80023c0 <pipeDeviceParseCommand>
 8001d9e:	b350      	cbz	r0, 8001df6 <AtCheckResponse+0x82>
			ret = AtProcessResponse(client, AT_RESP_ERROR);
 8001da0:	2101      	movs	r1, #1
 8001da2:	4620      	mov	r0, r4
 8001da4:	f7ff ff28 	bl	8001bf8 <AtProcessResponse>
 8001da8:	4606      	mov	r6, r0
			WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_STATE, SW_TIMER_STATE_CANCELLED);
 8001daa:	2202      	movs	r2, #2
 8001dac:	4926      	ldr	r1, [pc, #152]	; (8001e48 <AtCheckResponse+0xd4>)
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7fe fd08 	bl	80007c4 <writeHreg>
	for(client=0; client<NUM_OF_AT_CLIENTS; client++)
 8001db4:	3401      	adds	r4, #1
 8001db6:	b2e4      	uxtb	r4, r4
 8001db8:	2c02      	cmp	r4, #2
 8001dba:	d839      	bhi.n	8001e30 <AtCheckResponse+0xbc>
		if(pipeDeviceParseCommand(ATClient[client].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE,(int8_t *) "\r\nOK\r\n", 6, &AtRxBufferBytes))
 8001dbc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001dc0:	009a      	lsls	r2, r3, #2
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <AtCheckResponse+0xc4>)
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <AtCheckResponse+0xc8>)
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	2306      	movs	r3, #6
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <AtCheckResponse+0xd8>)
 8001dd4:	22ff      	movs	r2, #255	; 0xff
 8001dd6:	491b      	ldr	r1, [pc, #108]	; (8001e44 <AtCheckResponse+0xd0>)
 8001dd8:	f000 faf2 	bl	80023c0 <pipeDeviceParseCommand>
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d0ce      	beq.n	8001d7e <AtCheckResponse+0xa>
			ret = AtProcessResponse(client, AT_RESP_OK);
 8001de0:	2100      	movs	r1, #0
 8001de2:	4620      	mov	r0, r4
 8001de4:	f7ff ff08 	bl	8001bf8 <AtProcessResponse>
 8001de8:	4606      	mov	r6, r0
			WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_STATE, SW_TIMER_STATE_CANCELLED);
 8001dea:	2202      	movs	r2, #2
 8001dec:	4916      	ldr	r1, [pc, #88]	; (8001e48 <AtCheckResponse+0xd4>)
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7fe fce8 	bl	80007c4 <writeHreg>
 8001df4:	e7de      	b.n	8001db4 <AtCheckResponse+0x40>
		else if(pipeDeviceParseCommand(ATClient[client].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE,(int8_t *) "\r\n", 2, &AtRxBufferBytes))
 8001df6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8001dfa:	00aa      	lsls	r2, r5, #2
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <AtCheckResponse+0xc4>)
 8001dfe:	4413      	add	r3, r2
 8001e00:	f993 0001 	ldrsb.w	r0, [r3, #1]
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <AtCheckResponse+0xc8>)
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	2302      	movs	r3, #2
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <AtCheckResponse+0xdc>)
 8001e0e:	22ff      	movs	r2, #255	; 0xff
 8001e10:	490c      	ldr	r1, [pc, #48]	; (8001e44 <AtCheckResponse+0xd0>)
 8001e12:	f000 fad5 	bl	80023c0 <pipeDeviceParseCommand>
 8001e16:	2800      	cmp	r0, #0
 8001e18:	d0cc      	beq.n	8001db4 <AtCheckResponse+0x40>
			ret = AtProcessResponse(client, AT_RESP_DATA);
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7ff feeb 	bl	8001bf8 <AtProcessResponse>
 8001e22:	4606      	mov	r6, r0
			WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_STATE, SW_TIMER_STATE_CANCELLED);
 8001e24:	2202      	movs	r2, #2
 8001e26:	4908      	ldr	r1, [pc, #32]	; (8001e48 <AtCheckResponse+0xd4>)
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7fe fccb 	bl	80007c4 <writeHreg>
 8001e2e:	e7c1      	b.n	8001db4 <AtCheckResponse+0x40>
}
 8001e30:	4630      	mov	r0, r6
 8001e32:	b002      	add	sp, #8
 8001e34:	bd70      	pop	{r4, r5, r6, pc}
 8001e36:	bf00      	nop
 8001e38:	200000b0 	.word	0x200000b0
 8001e3c:	200007a6 	.word	0x200007a6
 8001e40:	08007134 	.word	0x08007134
 8001e44:	200005a4 	.word	0x200005a4
 8001e48:	08006ce4 	.word	0x08006ce4
 8001e4c:	0800712c 	.word	0x0800712c
 8001e50:	08007130 	.word	0x08007130

08001e54 <AtReportTimeout>:
{
 8001e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	isRequestInProgress = FALSE;
 8001e58:	2500      	movs	r5, #0
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <AtReportTimeout+0x4c>)
 8001e5c:	701d      	strb	r5, [r3, #0]
	pipeDeviceExtractData(ATClient[ATActualClient].pipe, AtRxBuffer, AT_CMD_BUFFER_SIZE, &AtRxBufferBytes);
 8001e5e:	4e11      	ldr	r6, [pc, #68]	; (8001ea4 <AtReportTimeout+0x50>)
 8001e60:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001eb0 <AtReportTimeout+0x5c>
 8001e64:	4c10      	ldr	r4, [pc, #64]	; (8001ea8 <AtReportTimeout+0x54>)
 8001e66:	4f11      	ldr	r7, [pc, #68]	; (8001eac <AtReportTimeout+0x58>)
 8001e68:	783b      	ldrb	r3, [r7, #0]
 8001e6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e6e:	009a      	lsls	r2, r3, #2
 8001e70:	18a0      	adds	r0, r4, r2
 8001e72:	4633      	mov	r3, r6
 8001e74:	22ff      	movs	r2, #255	; 0xff
 8001e76:	4641      	mov	r1, r8
 8001e78:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8001e7c:	f000 fb18 	bl	80024b0 <pipeDeviceExtractData>
	ATClient[ATActualClient].callback(AT_RESP_TIMEOUT, AtRxBuffer, AtRxBufferBytes);
 8001e80:	783b      	ldrb	r3, [r7, #0]
 8001e82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e86:	009a      	lsls	r2, r3, #2
 8001e88:	4414      	add	r4, r2
 8001e8a:	6863      	ldr	r3, [r4, #4]
 8001e8c:	7832      	ldrb	r2, [r6, #0]
 8001e8e:	4641      	mov	r1, r8
 8001e90:	2003      	movs	r0, #3
 8001e92:	4798      	blx	r3
	ATActualClient = NUM_OF_AT_CLIENTS;
 8001e94:	2303      	movs	r3, #3
 8001e96:	703b      	strb	r3, [r7, #0]
	AtRxBufferBytes = 0;
 8001e98:	7035      	strb	r5, [r6, #0]
}
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ea0:	20000475 	.word	0x20000475
 8001ea4:	200007a6 	.word	0x200007a6
 8001ea8:	200000b0 	.word	0x200000b0
 8001eac:	200000ac 	.word	0x200000ac
 8001eb0:	200005a4 	.word	0x200005a4

08001eb4 <AtReportResponse>:
	ATActualClient = NUM_OF_AT_CLIENTS;
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <AtReportResponse+0x14>)
 8001eb8:	701a      	strb	r2, [r3, #0]
	isRequestInProgress = FALSE;
 8001eba:	2000      	movs	r0, #0
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <AtReportResponse+0x18>)
 8001ebe:	7018      	strb	r0, [r3, #0]
	AtRxBufferBytes = 0;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <AtReportResponse+0x1c>)
 8001ec2:	7018      	strb	r0, [r3, #0]
}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200000ac 	.word	0x200000ac
 8001ecc:	20000475 	.word	0x20000475
 8001ed0:	200007a6 	.word	0x200007a6

08001ed4 <AtPublishURC>:
	AtRxBufferBytes = 0;
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	4b01      	ldr	r3, [pc, #4]	; (8001edc <AtPublishURC+0x8>)
 8001ed8:	7018      	strb	r0, [r3, #0]
}
 8001eda:	4770      	bx	lr
 8001edc:	200007a6 	.word	0x200007a6

08001ee0 <AtCommandStart>:
{
 8001ee0:	b538      	push	{r3, r4, r5, lr}
	fsmATCmd.listState = fsmStateATCommand;
 8001ee2:	4810      	ldr	r0, [pc, #64]	; (8001f24 <AtCommandStart+0x44>)
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <AtCommandStart+0x48>)
 8001ee6:	6083      	str	r3, [r0, #8]
	fsmATCmd.event = fsmEventATCommand;
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <AtCommandStart+0x4c>)
 8001eea:	60c3      	str	r3, [r0, #12]
	fsmATCmd.numOfEvents = NUM_OF_ATCOMMAND_FSM_EVENTS;
 8001eec:	2303      	movs	r3, #3
 8001eee:	7403      	strb	r3, [r0, #16]
	fsmATCmd.numOfStates = NUM_OF_ATCOMMAND_FSM_STATES;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	7443      	strb	r3, [r0, #17]
	fsmATCmd.numFsm = 0;
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	7004      	strb	r4, [r0, #0]
	fsmATCmd.initState = AT_IDLE_STATE;
 8001ef8:	74c4      	strb	r4, [r0, #19]
	fsmATCmd.name = (uint8_t *)"FSM AT_CMD";
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <AtCommandStart+0x50>)
 8001efc:	6043      	str	r3, [r0, #4]
	indexfsmATCmd = configureFsm(&fsmATCmd, FSM_ATCOMMAND_FSM_LOOP_TIME);
 8001efe:	2132      	movs	r1, #50	; 0x32
 8001f00:	f7ff fc88 	bl	8001814 <configureFsm>
 8001f04:	4d0b      	ldr	r5, [pc, #44]	; (8001f34 <AtCommandStart+0x54>)
 8001f06:	7028      	strb	r0, [r5, #0]
	setLogFsm(indexfsmATCmd, FALSE);
 8001f08:	4621      	mov	r1, r4
 8001f0a:	f7ff fd11 	bl	8001930 <setLogFsm>
	resetFsm(indexfsmATCmd);
 8001f0e:	7828      	ldrb	r0, [r5, #0]
 8001f10:	f7ff fca8 	bl	8001864 <resetFsm>
	WRITE_HREG(SW_TIMER_AT, HREG_SWTIMER_CALLBACK_FUNCTION, AtTimeoutCallback);
 8001f14:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <AtCommandStart+0x58>)
 8001f16:	4909      	ldr	r1, [pc, #36]	; (8001f3c <AtCommandStart+0x5c>)
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7fe fc53 	bl	80007c4 <writeHreg>
}
 8001f1e:	4620      	mov	r0, r4
 8001f20:	bd38      	pop	{r3, r4, r5, pc}
 8001f22:	bf00      	nop
 8001f24:	20000458 	.word	0x20000458
 8001f28:	080071c0 	.word	0x080071c0
 8001f2c:	200000d4 	.word	0x200000d4
 8001f30:	08007140 	.word	0x08007140
 8001f34:	20000474 	.word	0x20000474
 8001f38:	08001b19 	.word	0x08001b19
 8001f3c:	08006cbc 	.word	0x08006cbc

08001f40 <ATCommandSetRequest>:
{
 8001f40:	b510      	push	{r4, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	ac04      	add	r4, sp, #16
 8001f46:	e904 000e 	stmdb	r4, {r1, r2, r3}
	if(!isRequestInProgress)
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <ATCommandSetRequest+0x50>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b11b      	cbz	r3, 8001f58 <ATCommandSetRequest+0x18>
	eError ret = RET_BUSY;
 8001f50:	2309      	movs	r3, #9
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	b004      	add	sp, #16
 8001f56:	bd10      	pop	{r4, pc}
 8001f58:	4603      	mov	r3, r0
		isRequestInProgress = TRUE;
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <ATCommandSetRequest+0x50>)
 8001f5e:	7011      	strb	r1, [r2, #0]
		ATActualRequest = ATRequest;
 8001f60:	4c0c      	ldr	r4, [pc, #48]	; (8001f94 <ATCommandSetRequest+0x54>)
 8001f62:	aa04      	add	r2, sp, #16
 8001f64:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8001f68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		ATActualClient = ATClient;
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <ATCommandSetRequest+0x58>)
 8001f6e:	7013      	strb	r3, [r2, #0]
		toRetries = 0;
 8001f70:	2200      	movs	r2, #0
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <ATCommandSetRequest+0x5c>)
 8001f74:	701a      	strb	r2, [r3, #0]
		ret = ATCommandParse();
 8001f76:	f7ff fddf 	bl	8001b38 <ATCommandParse>
		if(ret == RET_OK)
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d1e8      	bne.n	8001f52 <ATCommandSetRequest+0x12>
			ret = announceFsmEvent(indexfsmATCmd, AT_COMMAND_REQ_EVENT);
 8001f80:	2102      	movs	r1, #2
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <ATCommandSetRequest+0x60>)
 8001f84:	7818      	ldrb	r0, [r3, #0]
 8001f86:	f7ff fc81 	bl	800188c <announceFsmEvent>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	e7e1      	b.n	8001f52 <ATCommandSetRequest+0x12>
 8001f8e:	bf00      	nop
 8001f90:	20000475 	.word	0x20000475
 8001f94:	2000043c 	.word	0x2000043c
 8001f98:	200000ac 	.word	0x200000ac
 8001f9c:	20000476 	.word	0x20000476
 8001fa0:	20000474 	.word	0x20000474

08001fa4 <diffTime>:
 **********************************************************************/
static uint32_t diffTime( uint32_t timeA, uint32_t timeB )
{
    uint32_t retVal = 0;

    if( timeA >= timeB )
 8001fa4:	4288      	cmp	r0, r1
 8001fa6:	d202      	bcs.n	8001fae <diffTime+0xa>
    {
            retVal = timeA - timeB;
    }
    else
    {
            retVal = UINT32_MAX - (timeB - timeA);
 8001fa8:	1a09      	subs	r1, r1, r0
 8001faa:	43c8      	mvns	r0, r1
    }

    return retVal;
}
 8001fac:	4770      	bx	lr
            retVal = timeA - timeB;
 8001fae:	1a40      	subs	r0, r0, r1
 8001fb0:	4770      	bx	lr
	...

08001fb4 <getTime>:
    uint32_t retVal = 0;

    retVal = timeMs;

    return retVal;
}
 8001fb4:	4b01      	ldr	r3, [pc, #4]	; (8001fbc <getTime+0x8>)
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000488 	.word	0x20000488

08001fc0 <SwTimerInit>:
eError SwTimerInit( void )
{
    eError result = RET_OK;
    uint8_t i;

    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	b10b      	cbz	r3, 8001fc8 <SwTimerInit+0x8>
    {
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
    }

    return result;
}
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	4770      	bx	lr
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
 8001fc8:	4a03      	ldr	r2, [pc, #12]	; (8001fd8 <SwTimerInit+0x18>)
 8001fca:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8001fce:	2100      	movs	r1, #0
 8001fd0:	7211      	strb	r1, [r2, #8]
    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	e7f4      	b.n	8001fc2 <SwTimerInit+0x2>
 8001fd8:	20000478 	.word	0x20000478

08001fdc <SwTimerStart>:
eError SwTimerStart()
{
    eError result = RET_OK;

    return result;
}
 8001fdc:	2000      	movs	r0, #0
 8001fde:	4770      	bx	lr

08001fe0 <SwTimerStop>:
eError SwTimerStop()
{
    eError result = RET_OK;

    return result;
}
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	4770      	bx	lr

08001fe4 <SwTimerSleep>:
eError SwTimerSleep()
{
    eError result = RET_OK;

    return result;
}
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	4770      	bx	lr

08001fe8 <SwTimerWake>:
eError SwTimerWake()
{
    eError result = RET_OK;

    return result;
}
 8001fe8:	2000      	movs	r0, #0
 8001fea:	4770      	bx	lr

08001fec <SwTimerStopTimer>:
eError SwTimerStopTimer( tSwTimerIndex SwTimerIndex )
{
    eError result = RET_OK;

    // Change timer state.
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_STOPPED;
 8001fec:	4b02      	ldr	r3, [pc, #8]	; (8001ff8 <SwTimerStopTimer+0xc>)
 8001fee:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	7218      	strb	r0, [r3, #8]
    
    return result;
}
 8001ff6:	4770      	bx	lr
 8001ff8:	20000478 	.word	0x20000478

08001ffc <SwTimerResetTimer>:
/**********************************************************************
 * @brief  Reset and start the timer
 * @param  pTimer:	Pointer to timer to be restart.
 **********************************************************************/
eError SwTimerResetTimer( tSwTimerIndex SwTimerIndex )
{
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	4604      	mov	r4, r0
    eError result = RET_OK;

    // Reset the timer.
    SwTimersArray[SwTimerIndex].startMs = getTime();
 8002000:	f7ff ffd8 	bl	8001fb4 <getTime>
 8002004:	0124      	lsls	r4, r4, #4
 8002006:	4b02      	ldr	r3, [pc, #8]	; (8002010 <SwTimerResetTimer+0x14>)
 8002008:	5118      	str	r0, [r3, r4]

    return result;
}
 800200a:	2000      	movs	r0, #0
 800200c:	bd10      	pop	{r4, pc}
 800200e:	bf00      	nop
 8002010:	20000478 	.word	0x20000478

08002014 <SwTimerStartTimer>:
{
 8002014:	b510      	push	{r4, lr}
 8002016:	4604      	mov	r4, r0
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_CANCELLED ||
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <SwTimerStartTimer+0x28>)
 800201a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800201e:	7a1b      	ldrb	r3, [r3, #8]
 8002020:	3b02      	subs	r3, #2
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d906      	bls.n	8002036 <SwTimerStartTimer+0x22>
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_STARTED;
 8002028:	4804      	ldr	r0, [pc, #16]	; (800203c <SwTimerStartTimer+0x28>)
 800202a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800202e:	2301      	movs	r3, #1
 8002030:	7203      	strb	r3, [r0, #8]
}
 8002032:	2000      	movs	r0, #0
 8002034:	bd10      	pop	{r4, pc}
        SwTimerResetTimer( SwTimerIndex );
 8002036:	f7ff ffe1 	bl	8001ffc <SwTimerResetTimer>
 800203a:	e7f5      	b.n	8002028 <SwTimerStartTimer+0x14>
 800203c:	20000478 	.word	0x20000478

08002040 <SwTimerUpdateTimer>:
 * @brief  Updates all timers every millisecond
 * @param
 * @retval
 **********************************************************************/
eError SwTimerUpdateTimer( tSwTimerIndex SwTimerIndex )
{
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	4604      	mov	r4, r0
    eError result = RET_OK;
    tBool restartTimer = FALSE;

    // If timer is started, check timeout.
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STARTED )
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <SwTimerUpdateTimer+0x60>)
 8002046:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800204a:	7a1b      	ldrb	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d00a      	beq.n	8002066 <SwTimerUpdateTimer+0x26>
            }
        }
    }
    // If the timer is stopped, simply shifts the start time,
    // this keeps the elapsed time.
    else if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STOPPED )
 8002050:	b9fb      	cbnz	r3, 8002092 <SwTimerUpdateTimer+0x52>
    {
        SwTimersArray[SwTimerIndex].startMs++;
 8002052:	4913      	ldr	r1, [pc, #76]	; (80020a0 <SwTimerUpdateTimer+0x60>)
 8002054:	0102      	lsls	r2, r0, #4
 8002056:	588b      	ldr	r3, [r1, r2]
 8002058:	3301      	adds	r3, #1
 800205a:	508b      	str	r3, [r1, r2]
    tBool restartTimer = FALSE;
 800205c:	2000      	movs	r0, #0
    }

    if ( restartTimer == TRUE )
 800205e:	2801      	cmp	r0, #1
 8002060:	d019      	beq.n	8002096 <SwTimerUpdateTimer+0x56>
    {
        SwTimerStartTimer(SwTimerIndex);
    }

    return result;
}
 8002062:	2000      	movs	r0, #0
 8002064:	bd38      	pop	{r3, r4, r5, pc}
        if( diffTime( timeMs, SwTimersArray[SwTimerIndex].startMs ) >= SwTimersArray[SwTimerIndex].timeoutMs )
 8002066:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <SwTimerUpdateTimer+0x60>)
 8002068:	0103      	lsls	r3, r0, #4
 800206a:	18d5      	adds	r5, r2, r3
 800206c:	58d1      	ldr	r1, [r2, r3]
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <SwTimerUpdateTimer+0x64>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	f7ff ff97 	bl	8001fa4 <diffTime>
 8002076:	686b      	ldr	r3, [r5, #4]
 8002078:	4298      	cmp	r0, r3
 800207a:	d306      	bcc.n	800208a <SwTimerUpdateTimer+0x4a>
            SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_EXPIRED;
 800207c:	2203      	movs	r2, #3
 800207e:	722a      	strb	r2, [r5, #8]
            if( NULL != SwTimersArray[SwTimerIndex].pFuncCB )
 8002080:	68eb      	ldr	r3, [r5, #12]
 8002082:	b123      	cbz	r3, 800208e <SwTimerUpdateTimer+0x4e>
                    restartTimer = SwTimersArray[SwTimerIndex].pFuncCB(SwTimerIndex);
 8002084:	4620      	mov	r0, r4
 8002086:	4798      	blx	r3
 8002088:	e7e9      	b.n	800205e <SwTimerUpdateTimer+0x1e>
    tBool restartTimer = FALSE;
 800208a:	2000      	movs	r0, #0
 800208c:	e7e7      	b.n	800205e <SwTimerUpdateTimer+0x1e>
 800208e:	2000      	movs	r0, #0
 8002090:	e7e5      	b.n	800205e <SwTimerUpdateTimer+0x1e>
 8002092:	2000      	movs	r0, #0
 8002094:	e7e3      	b.n	800205e <SwTimerUpdateTimer+0x1e>
        SwTimerStartTimer(SwTimerIndex);
 8002096:	4620      	mov	r0, r4
 8002098:	f7ff ffbc 	bl	8002014 <SwTimerStartTimer>
 800209c:	e7e1      	b.n	8002062 <SwTimerUpdateTimer+0x22>
 800209e:	bf00      	nop
 80020a0:	20000478 	.word	0x20000478
 80020a4:	20000488 	.word	0x20000488

080020a8 <SwTimerCancelTimer>:
eError SwTimerCancelTimer( tSwTimerIndex SwTimerIndex )
{
    eError result = RET_OK;

    // Change timer state.
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_CANCELLED;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <SwTimerCancelTimer+0x10>)
 80020aa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80020ae:	2302      	movs	r3, #2
 80020b0:	7203      	strb	r3, [r0, #8]
    
    return result;
}
 80020b2:	2000      	movs	r0, #0
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000478 	.word	0x20000478

080020bc <SwTimerSetTimeout>:
    eError result = RET_OK;
    // Reset the timer.
    //timersArray[timerIndex].startMs = getTime();

    // Set timer timeout
    SwTimersArray[SwTimerIndex].timeoutMs = TIME_TO_TICKS(timeoutMs);
 80020bc:	4b02      	ldr	r3, [pc, #8]	; (80020c8 <SwTimerSetTimeout+0xc>)
 80020be:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80020c2:	6041      	str	r1, [r0, #4]
    return result ;
}
 80020c4:	2000      	movs	r0, #0
 80020c6:	4770      	bx	lr
 80020c8:	20000478 	.word	0x20000478

080020cc <SwTimerGetElapsed>:
 * @brief  Get timer elapsed time
 * @param  pTimer:	Pointer to timer to be used.
 * @retval			Elapsed timer in milliseconds
 **********************************************************************/
uint32_t SwTimerGetElapsed( tSwTimerIndex SwTimerIndex )
{
 80020cc:	b510      	push	{r4, lr}
 80020ce:	4604      	mov	r4, r0
    uint32_t retVal = 0;

    // Compute elapsed time.
    retVal = diffTime( getTime(), SwTimersArray[SwTimerIndex].startMs );
 80020d0:	f7ff ff70 	bl	8001fb4 <getTime>
 80020d4:	0124      	lsls	r4, r4, #4
 80020d6:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <SwTimerGetElapsed+0x14>)
 80020d8:	5919      	ldr	r1, [r3, r4]
 80020da:	f7ff ff63 	bl	8001fa4 <diffTime>

    return retVal;
}
 80020de:	bd10      	pop	{r4, pc}
 80020e0:	20000478 	.word	0x20000478

080020e4 <SwTimerGetPending>:
uint32_t SwTimerGetPending( tSwTimerIndex SwTimerIndex )
{
    uint32_t retVal = 0;

    // Compute elapsed time.
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STARTED )
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <SwTimerGetPending+0x28>)
 80020e6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80020ea:	7a1b      	ldrb	r3, [r3, #8]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d001      	beq.n	80020f4 <SwTimerGetPending+0x10>
    {
        retVal = SwTimersArray[SwTimerIndex].timeoutMs - diffTime( getTime(), SwTimersArray[SwTimerIndex].startMs );
    }
    else
    {
        retVal = 0;
 80020f0:	2000      	movs	r0, #0
    }

    return retVal;
 80020f2:	4770      	bx	lr
{
 80020f4:	b570      	push	{r4, r5, r6, lr}
        retVal = SwTimersArray[SwTimerIndex].timeoutMs - diffTime( getTime(), SwTimersArray[SwTimerIndex].startMs );
 80020f6:	4e05      	ldr	r6, [pc, #20]	; (800210c <SwTimerGetPending+0x28>)
 80020f8:	0104      	lsls	r4, r0, #4
 80020fa:	1933      	adds	r3, r6, r4
 80020fc:	685d      	ldr	r5, [r3, #4]
 80020fe:	f7ff ff59 	bl	8001fb4 <getTime>
 8002102:	5931      	ldr	r1, [r6, r4]
 8002104:	f7ff ff4e 	bl	8001fa4 <diffTime>
 8002108:	1a28      	subs	r0, r5, r0
 800210a:	bd70      	pop	{r4, r5, r6, pc}
 800210c:	20000478 	.word	0x20000478

08002110 <SwTimerGetState>:
tSwTimerState SwTimerGetState( tSwTimerIndex SwTimerIndex  )
{
    tSwTimerState retVal = SW_TIMER_STATE_STOPPED;

    // Read timer state
    retVal = SwTimersArray[SwTimerIndex].state;
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <SwTimerGetState+0xc>)
 8002112:	eb03 1000 	add.w	r0, r3, r0, lsl #4

    return retVal;
}
 8002116:	7a00      	ldrb	r0, [r0, #8]
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000478 	.word	0x20000478

08002120 <SwTimerSetState>:
 * @brief  Set timer state
 * @param  pTimer:	Pointer to timer to be used.
 * @param  state:	New timer state.
 **********************************************************************/
eError SwTimerSetState( tSwTimerIndex SwTimerIndex, tSwTimerState state )
{
 8002120:	b538      	push	{r3, r4, r5, lr}
 8002122:	4605      	mov	r5, r0
 8002124:	460c      	mov	r4, r1
    eError result = RET_OK;

    switch( state )
 8002126:	2901      	cmp	r1, #1
 8002128:	d00b      	beq.n	8002142 <SwTimerSetState+0x22>
 800212a:	b139      	cbz	r1, 800213c <SwTimerSetState+0x1c>
 800212c:	2902      	cmp	r1, #2
 800212e:	d00b      	beq.n	8002148 <SwTimerSetState+0x28>
            default:
                    break;
    }

    // Change timer state.
    SwTimersArray[SwTimerIndex].state = state;
 8002130:	4807      	ldr	r0, [pc, #28]	; (8002150 <SwTimerSetState+0x30>)
 8002132:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8002136:	7204      	strb	r4, [r0, #8]

    return result;
}
 8002138:	2000      	movs	r0, #0
 800213a:	bd38      	pop	{r3, r4, r5, pc}
                    SwTimerStopTimer( SwTimerIndex );
 800213c:	f7ff ff56 	bl	8001fec <SwTimerStopTimer>
                    break;
 8002140:	e7f6      	b.n	8002130 <SwTimerSetState+0x10>
                    SwTimerStartTimer( SwTimerIndex );
 8002142:	f7ff ff67 	bl	8002014 <SwTimerStartTimer>
                    break;
 8002146:	e7f3      	b.n	8002130 <SwTimerSetState+0x10>
                    SwTimerCancelTimer( SwTimerIndex );
 8002148:	f7ff ffae 	bl	80020a8 <SwTimerCancelTimer>
                    break;
 800214c:	e7f0      	b.n	8002130 <SwTimerSetState+0x10>
 800214e:	bf00      	nop
 8002150:	20000478 	.word	0x20000478

08002154 <SwTimerSetCallbackFunction>:
 **********************************************************************/
eError SwTimerSetCallbackFunction ( tSwTimerIndex SwTimerIndex, tBool (*callbackFunction)(tSwTimerIndex SwTimerIndex) )
{
    eError result = RET_OK;

    if ( callbackFunction == NULL )
 8002154:	b129      	cbz	r1, 8002162 <SwTimerSetCallbackFunction+0xe>
    {
        result = RET_BAD_POINTER_ADDRESS;
    }
    else
    {
        SwTimersArray[SwTimerIndex].pFuncCB = callbackFunction;
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SwTimerSetCallbackFunction+0x14>)
 8002158:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800215c:	60c1      	str	r1, [r0, #12]
    eError result = RET_OK;
 800215e:	2000      	movs	r0, #0
 8002160:	4770      	bx	lr
        result = RET_BAD_POINTER_ADDRESS;
 8002162:	2006      	movs	r0, #6
    }
    
    return result;
    
}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000478 	.word	0x20000478

0800216c <SwTimerIrq>:
 * @brief  Interrupt request rutine for periodic tick
 * @param  None.
 * @retval None.
 **********************************************************************/
void SwTimerIrq( void )
{
 800216c:	b510      	push	{r4, lr}
    uint8_t SwTimerIndex = 0;

    // Increment time global variable.
    timeMs = timeMs + TIMER_PERIOD; //timeMs++;
 800216e:	4a06      	ldr	r2, [pc, #24]	; (8002188 <SwTimerIrq+0x1c>)
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	6013      	str	r3, [r2, #0]

    // Update timers
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8002176:	2400      	movs	r4, #0
 8002178:	b104      	cbz	r4, 800217c <SwTimerIrq+0x10>
    {
        SwTimerUpdateTimer( SwTimerIndex );
    }
}
 800217a:	bd10      	pop	{r4, pc}
        SwTimerUpdateTimer( SwTimerIndex );
 800217c:	4620      	mov	r0, r4
 800217e:	f7ff ff5f 	bl	8002040 <SwTimerUpdateTimer>
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8002182:	3401      	adds	r4, #1
 8002184:	b2e4      	uxtb	r4, r4
 8002186:	e7f7      	b.n	8002178 <SwTimerIrq+0xc>
 8002188:	20000488 	.word	0x20000488

0800218c <initHregSwTimer>:
/***********************************************************************
 * @brief	API for init Timer.
 *
 **********************************************************************/
__weak eError initHregSwTimer( void )
{
 800218c:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerInit();
 800218e:	f7ff ff17 	bl	8001fc0 <SwTimerInit>

	return result;
}
 8002192:	bd08      	pop	{r3, pc}

08002194 <startHregSwTimer>:
/***********************************************************************
 * @brief	API for start Timer.
 *
 **********************************************************************/
__weak eError startHregSwTimer( void )
{
 8002194:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerStart();
 8002196:	f7ff ff21 	bl	8001fdc <SwTimerStart>

	return result;
}
 800219a:	bd08      	pop	{r3, pc}

0800219c <stopHregSwTimer>:
/***********************************************************************
 * @brief	API for stop Timer.
 *
 **********************************************************************/
__weak eError stopHregSwTimer( void )
{
 800219c:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerStop();
 800219e:	f7ff ff1f 	bl	8001fe0 <SwTimerStop>

	return result;
}
 80021a2:	bd08      	pop	{r3, pc}

080021a4 <sleepHregSwTimer>:
/***********************************************************************
 * @brief	API for sleep Timer.
 *
 **********************************************************************/
__weak eError sleepHregSwTimer( void )
{
 80021a4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerSleep();
 80021a6:	f7ff ff1d 	bl	8001fe4 <SwTimerSleep>

	return result;
}
 80021aa:	bd08      	pop	{r3, pc}

080021ac <wakeHregSwTimer>:
/***********************************************************************
 * @brief	API for wake Timer.
 *
 **********************************************************************/
__weak eError wakeHregSwTimer( void )
{
 80021ac:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerWake();
 80021ae:	f7ff ff1b 	bl	8001fe8 <SwTimerWake>

	return result;
}
 80021b2:	bd08      	pop	{r3, pc}

080021b4 <onWriteHregSwTimerCallbackFunction>:
/***********************************************************************
 * @brief	On Write function for Timer callbackFunction.
 *
 **********************************************************************/
__weak eError onWriteHregSwTimerCallbackFunction( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 80021b4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerSetCallbackFunction( instance, (void*)param1 );
 80021b6:	4611      	mov	r1, r2
 80021b8:	f7ff ffcc 	bl	8002154 <SwTimerSetCallbackFunction>

	return result;
}
 80021bc:	bd08      	pop	{r3, pc}

080021be <onReadHregSwTimerGetPending>:
/***********************************************************************
 * @brief	On Read function for Timer getPending.
 *
 **********************************************************************/
__weak eError onReadHregSwTimerGetPending( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 80021be:	b510      	push	{r4, lr}
 80021c0:	4614      	mov	r4, r2
	eError result = RET_OK;

	*(uint32_t*)param1 = SwTimerGetPending( instance );
 80021c2:	f7ff ff8f 	bl	80020e4 <SwTimerGetPending>
 80021c6:	6020      	str	r0, [r4, #0]

	return result;
}
 80021c8:	2000      	movs	r0, #0
 80021ca:	bd10      	pop	{r4, pc}

080021cc <onReadHregSwTimerState>:
/***********************************************************************
 * @brief	On Read function for Timer getState.
 *
 **********************************************************************/
__weak eError onReadHregSwTimerState( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 80021cc:	b510      	push	{r4, lr}
 80021ce:	4614      	mov	r4, r2
	eError result = RET_OK;

	*(tSwTimerState*)param1 = SwTimerGetState( instance );
 80021d0:	f7ff ff9e 	bl	8002110 <SwTimerGetState>
 80021d4:	7020      	strb	r0, [r4, #0]

	return result;
}
 80021d6:	2000      	movs	r0, #0
 80021d8:	bd10      	pop	{r4, pc}

080021da <onWriteHregSwTimerState>:
/***********************************************************************
 * @brief	On Write function for Timer setState.
 *
 **********************************************************************/
__weak eError onWriteHregSwTimerState( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 80021da:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerSetState( instance, param1 );
 80021dc:	b2d1      	uxtb	r1, r2
 80021de:	f7ff ff9f 	bl	8002120 <SwTimerSetState>

	return result;
}
 80021e2:	bd08      	pop	{r3, pc}

080021e4 <onReadHregSwTimerGetElapsed>:
/***********************************************************************
 * @brief	On Read function for Timer getElapsed.
 *
 **********************************************************************/
__weak eError onReadHregSwTimerGetElapsed( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 80021e4:	b510      	push	{r4, lr}
 80021e6:	4614      	mov	r4, r2
	eError result = RET_OK;

	*(uint32_t *)param1 = SwTimerGetElapsed( instance );
 80021e8:	f7ff ff70 	bl	80020cc <SwTimerGetElapsed>
 80021ec:	6020      	str	r0, [r4, #0]

	return result;
}
 80021ee:	2000      	movs	r0, #0
 80021f0:	bd10      	pop	{r4, pc}

080021f2 <onWriteHregSwTimerSet>:
/***********************************************************************
 * @brief	On Write function for Timer set.
 *
 **********************************************************************/
__weak eError onWriteHregSwTimerSet( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 80021f2:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = SwTimerSetTimeout( instance, param1 );
 80021f4:	4611      	mov	r1, r2
 80021f6:	f7ff ff61 	bl	80020bc <SwTimerSetTimeout>

	return result;
}
 80021fa:	bd08      	pop	{r3, pc}

080021fc <EEPROMGetNumOfInstances>:
 * @return num of instances
 ***************************************************************************/
static uint8_t EEPROMGetNumOfInstances(tVirtualEEPROM eeprom, uint16_t reg)
{
	uint8_t num;
	if (VirtualEEPROMInstanceMap[eeprom].typeArea == EEPROM_AREA_INST)
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <EEPROMGetNumOfInstances+0x20>)
 80021fe:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002202:	789b      	ldrb	r3, [r3, #2]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d001      	beq.n	800220c <EEPROMGetNumOfInstances+0x10>
	{
		num = VirtualEEPROMInstanceMap[eeprom].regTable.withInst[reg].numOfInstances;
	}
	else
	{
		num = UNIQUE_EEPROM_INSTANCE;
 8002208:	2001      	movs	r0, #1
	}
	return num;
}
 800220a:	4770      	bx	lr
		num = VirtualEEPROMInstanceMap[eeprom].regTable.withInst[reg].numOfInstances;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <EEPROMGetNumOfInstances+0x20>)
 800220e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002212:	6843      	ldr	r3, [r0, #4]
 8002214:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	08007260 	.word	0x08007260

08002220 <EEPROMGetAreaSize>:
 * @return size
 ***************************************************************************/
static uint16_t EEPROMGetAreaSize(tVirtualEEPROM eeprom, uint16_t reg)
{
	uint16_t size;
	if (VirtualEEPROMInstanceMap[eeprom].typeArea == EEPROM_AREA_INST)
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <EEPROMGetAreaSize+0x2c>)
 8002222:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8002226:	789b      	ldrb	r3, [r3, #2]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d006      	beq.n	800223a <EEPROMGetAreaSize+0x1a>
	{
		size = VirtualEEPROMInstanceMap[eeprom].regTable.withInst[reg].sizeOfInstance;
	}
	else
	{
		size = VirtualEEPROMInstanceMap[eeprom].regTable.noInst[reg].sizeOfInstance;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <EEPROMGetAreaSize+0x2c>)
 800222e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002232:	6843      	ldr	r3, [r0, #4]
 8002234:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}
	return size;
}
 8002238:	4770      	bx	lr
		size = VirtualEEPROMInstanceMap[eeprom].regTable.withInst[reg].sizeOfInstance;
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <EEPROMGetAreaSize+0x2c>)
 800223c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002240:	6843      	ldr	r3, [r0, #4]
 8002242:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8002246:	7848      	ldrb	r0, [r1, #1]
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	08007260 	.word	0x08007260

08002250 <VirtualEEPROMinit>:
{
 8002250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002254:	b083      	sub	sp, #12
	uint16_t nextVirtOffset = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	9300      	str	r3, [sp, #0]
	for (eeprom = 0; eeprom < NUM_OF_TABLE_EEPROM; eeprom++)
 800225a:	461e      	mov	r6, r3
 800225c:	e031      	b.n	80022c2 <VirtualEEPROMinit+0x72>
				virtualEEPROMareaContext[eeprom].areaEEPROM[reg].virtualOffset = nextVirtOffset;
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <VirtualEEPROMinit+0x9c>)
 8002260:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	eb03 0984 	add.w	r9, r3, r4, lsl #2
 800226a:	f823 7024 	strh.w	r7, [r3, r4, lsl #2]
				virtualEEPROMareaContext[eeprom].areaEEPROM[reg].size = EEPROMGetAreaSize(eeprom,reg);
 800226e:	4641      	mov	r1, r8
 8002270:	4630      	mov	r0, r6
 8002272:	f7ff ffd5 	bl	8002220 <EEPROMGetAreaSize>
 8002276:	4605      	mov	r5, r0
 8002278:	f8a9 0002 	strh.w	r0, [r9, #2]
				nextNumInst = EEPROMGetNumOfInstances(eeprom,reg);
 800227c:	4641      	mov	r1, r8
 800227e:	4630      	mov	r0, r6
 8002280:	f7ff ffbc 	bl	80021fc <EEPROMGetNumOfInstances>
				nextVirtOffset = virtualEEPROMareaContext[eeprom].areaEEPROM[reg].virtualOffset + nextNumInst * virtualEEPROMareaContext[eeprom].areaEEPROM[reg].size;
 8002284:	fb10 f005 	smulbb	r0, r0, r5
 8002288:	fa17 f780 	uxtah	r7, r7, r0
 800228c:	b2bf      	uxth	r7, r7
			for (reg = 0; reg < areaSize; reg++ )
 800228e:	3401      	adds	r4, #1
 8002290:	b2e4      	uxtb	r4, r4
 8002292:	fa1f f884 	uxth.w	r8, r4
 8002296:	4554      	cmp	r4, sl
 8002298:	d3e1      	bcc.n	800225e <VirtualEEPROMinit+0xe>
			if ( nextVirtOffset > (VirtualEEPROMInstanceMap[eeprom].offsetArea + lastOffsetArea))
 800229a:	9a00      	ldr	r2, [sp, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	9901      	ldr	r1, [sp, #4]
 80022a0:	440b      	add	r3, r1
 80022a2:	429f      	cmp	r7, r3
 80022a4:	dc20      	bgt.n	80022e8 <VirtualEEPROMinit+0x98>
				nextVirtOffset = VirtualEEPROMInstanceMap[eeprom].offsetArea + lastOffsetArea;
 80022a6:	4613      	mov	r3, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	e006      	b.n	80022be <VirtualEEPROMinit+0x6e>
			virtualEEPROMareaContext[eeprom].areaEEPROM[0].virtualOffset = 0xFFFF;
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <VirtualEEPROMinit+0x9c>)
 80022b2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022bc:	801a      	strh	r2, [r3, #0]
	for (eeprom = 0; eeprom < NUM_OF_TABLE_EEPROM; eeprom++)
 80022be:	3601      	adds	r6, #1
 80022c0:	b2f6      	uxtb	r6, r6
 80022c2:	2e04      	cmp	r6, #4
 80022c4:	d80c      	bhi.n	80022e0 <VirtualEEPROMinit+0x90>
		if ( VirtualEEPROMInstanceMap[eeprom].offsetArea != 0 )
 80022c6:	46b3      	mov	fp, r6
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <VirtualEEPROMinit+0xa0>)
 80022ca:	f833 3036 	ldrh.w	r3, [r3, r6, lsl #3]
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ed      	beq.n	80022b0 <VirtualEEPROMinit+0x60>
			areaSize = virtualEEPROMareaContext[eeprom].areaSize;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <VirtualEEPROMinit+0x9c>)
 80022d6:	f813 a036 	ldrb.w	sl, [r3, r6, lsl #3]
			for (reg = 0; reg < areaSize; reg++ )
 80022da:	9f00      	ldr	r7, [sp, #0]
 80022dc:	2400      	movs	r4, #0
 80022de:	e7d8      	b.n	8002292 <VirtualEEPROMinit+0x42>
	return success;
 80022e0:	2000      	movs	r0, #0
}
 80022e2:	b003      	add	sp, #12
 80022e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				return RET_NOT_INITIALIZED;
 80022e8:	2002      	movs	r0, #2
 80022ea:	e7fa      	b.n	80022e2 <VirtualEEPROMinit+0x92>
 80022ec:	08007238 	.word	0x08007238
 80022f0:	08007260 	.word	0x08007260

080022f4 <VirtualEEPROMStart>:
}
 80022f4:	2000      	movs	r0, #0
 80022f6:	4770      	bx	lr

080022f8 <VirtualEEPROMStop>:
}
 80022f8:	2000      	movs	r0, #0
 80022fa:	4770      	bx	lr

080022fc <VirtualEEPROMSleep>:
}
 80022fc:	2000      	movs	r0, #0
 80022fe:	4770      	bx	lr

08002300 <VirtualEEPROMWake>:
}
 8002300:	2000      	movs	r0, #0
 8002302:	4770      	bx	lr

08002304 <initHregVirtualEEPROM>:
/***********************************************************************
 * @brief	API for init EEPROM.
 *
 **********************************************************************/
__weak eError initHregVirtualEEPROM( void )
{
 8002304:	b508      	push	{r3, lr}
	eError result = RET_OK;

	VirtualEEPROMinit();
 8002306:	f7ff ffa3 	bl	8002250 <VirtualEEPROMinit>

	return result;
}
 800230a:	2000      	movs	r0, #0
 800230c:	bd08      	pop	{r3, pc}

0800230e <startHregVirtualEEPROM>:
/***********************************************************************
 * @brief	API for start EEPROM.
 *
 **********************************************************************/
__weak eError startHregVirtualEEPROM( void )
{
 800230e:	b508      	push	{r3, lr}
	eError result = RET_OK;

	VirtualEEPROMStart();
 8002310:	f7ff fff0 	bl	80022f4 <VirtualEEPROMStart>

	return result;
}
 8002314:	2000      	movs	r0, #0
 8002316:	bd08      	pop	{r3, pc}

08002318 <stopHregVirtualEEPROM>:
/***********************************************************************
 * @brief	API for stop EEPROM.
 *
 **********************************************************************/
__weak eError stopHregVirtualEEPROM( void )
{
 8002318:	b508      	push	{r3, lr}
	eError result = RET_OK;

	VirtualEEPROMStop();
 800231a:	f7ff ffed 	bl	80022f8 <VirtualEEPROMStop>

	return result;
}
 800231e:	2000      	movs	r0, #0
 8002320:	bd08      	pop	{r3, pc}

08002322 <sleepHregVirtualEEPROM>:
/***********************************************************************
 * @brief	API for sleep EEPROM.
 *
 **********************************************************************/
__weak eError sleepHregVirtualEEPROM( void )
{
 8002322:	b508      	push	{r3, lr}
	eError result = RET_OK;

	VirtualEEPROMSleep();
 8002324:	f7ff ffea 	bl	80022fc <VirtualEEPROMSleep>

	return result;
}
 8002328:	2000      	movs	r0, #0
 800232a:	bd08      	pop	{r3, pc}

0800232c <wakeHregVirtualEEPROM>:
/***********************************************************************
 * @brief	API for wake EEPROM.
 *
 **********************************************************************/
__weak eError wakeHregVirtualEEPROM( void )
{
 800232c:	b508      	push	{r3, lr}
	eError result = RET_OK;

	VirtualEEPROMWake();
 800232e:	f7ff ffe7 	bl	8002300 <VirtualEEPROMWake>

	return result;
}
 8002332:	2000      	movs	r0, #0
 8002334:	bd08      	pop	{r3, pc}

08002336 <onReadHregVirtualEEPROMData>:
//	READ_HREG( instance, HREG_VIRTUALEEPROM_INSTANCE_REG, &instanceReg);
//	READ_HREG( instance, HREG_VIRTUALEEPROM_REGISTER, &VirtualEepromReg);
//	result = VirtualEEPROMReadRegister((eEEVDeviceMap)instance, (tEEPROMMap)VirtualEepromReg, (uint8_t)instanceReg, (uint32_t*) param1);


	*(uint32_t*)param1 = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	6013      	str	r3, [r2, #0]
	result = RET_FAIL;

	return result;
}
 800233a:	2001      	movs	r0, #1
 800233c:	4770      	bx	lr

0800233e <onWriteHregVirtualEEPROMData>:
//	result = VirtualEEPROMWriteRegister((tEEPROMInstance)instance, (tEEPROMMap)VirtualEepromReg, (uint8_t)instanceReg, (uint32_t) param1);

	result = RET_FAIL;

	return result;
}
 800233e:	2001      	movs	r0, #1
 8002340:	4770      	bx	lr
	...

08002344 <pipeDeviceInit>:
 ****************************************************************************/
eError pipeDeviceInit( void )
{
	uint8_t i;

	for(i = 0; i < NUM_OF_PIPES; i++)
 8002344:	2300      	movs	r3, #0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d817      	bhi.n	800237a <pipeDeviceInit+0x36>
{
 800234a:	b430      	push	{r4, r5}
	{
		pipes[i].bufferRxPtr = 0;
 800234c:	4c0c      	ldr	r4, [pc, #48]	; (8002380 <pipeDeviceInit+0x3c>)
 800234e:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
 8002352:	2200      	movs	r2, #0
 8002354:	7142      	strb	r2, [r0, #5]
		pipes[i].bufferStartingPosition = 0;
 8002356:	7102      	strb	r2, [r0, #4]
		pipes[i].bufferLength = pipeMap[i].bufferSize;
 8002358:	0059      	lsls	r1, r3, #1
 800235a:	4419      	add	r1, r3
 800235c:	008d      	lsls	r5, r1, #2
 800235e:	4a09      	ldr	r2, [pc, #36]	; (8002384 <pipeDeviceInit+0x40>)
 8002360:	442a      	add	r2, r5
 8002362:	7a11      	ldrb	r1, [r2, #8]
 8002364:	7181      	strb	r1, [r0, #6]
		pipes[i].buffer = pipeMap[i].bufferPtr;
 8002366:	6852      	ldr	r2, [r2, #4]
 8002368:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
	for(i = 0; i < NUM_OF_PIPES; i++)
 800236c:	3301      	adds	r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d9eb      	bls.n	800234c <pipeDeviceInit+0x8>
	}

	return RET_OK;
}
 8002374:	2000      	movs	r0, #0
 8002376:	bc30      	pop	{r4, r5}
 8002378:	4770      	bx	lr
 800237a:	2000      	movs	r0, #0
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000930 	.word	0x20000930
 8002384:	080072b0 	.word	0x080072b0

08002388 <pipeDeviceStart>:
 *
 ****************************************************************************/
eError pipeDeviceStart( void )
{
	return RET_OK;
}
 8002388:	2000      	movs	r0, #0
 800238a:	4770      	bx	lr

0800238c <pipeDeviceByteReceived>:
 * @param	data to be saved.
 * @return  None.
 ****************************************************************************/
eError pipeDeviceByteReceived(ePipes id, uint8_t data)
{
    pipes[id].buffer[pipes[id].bufferRxPtr] = data;
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <pipeDeviceByteReceived+0x30>)
 800238e:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8002392:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8002396:	7943      	ldrb	r3, [r0, #5]
 8002398:	54d1      	strb	r1, [r2, r3]
    pipes[id].bufferRxPtr = (pipes[id].bufferRxPtr + 1) % (pipes[id].bufferLength);
 800239a:	7943      	ldrb	r3, [r0, #5]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	7981      	ldrb	r1, [r0, #6]
 80023a0:	fb92 f3f1 	sdiv	r3, r2, r1
 80023a4:	fb01 2313 	mls	r3, r1, r3, r2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	7143      	strb	r3, [r0, #5]
    if ( pipes[id].bufferRxPtr == pipes[id].bufferStartingPosition )
 80023ac:	7902      	ldrb	r2, [r0, #4]
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d001      	beq.n	80023b6 <pipeDeviceByteReceived+0x2a>
    {
        return RET_BUFFER_FULL;
    }

    return RET_OK;
 80023b2:	2000      	movs	r0, #0
}
 80023b4:	4770      	bx	lr
        return RET_BUFFER_FULL;
 80023b6:	2008      	movs	r0, #8
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000930 	.word	0x20000930

080023c0 <pipeDeviceParseCommand>:
 *
 * @return  Success.
 *
 ****************************************************************************/
uint8_t pipeDeviceParseCommand(ePipes id, uint8_t *command, uint8_t length, int8_t *pattern, uint8_t patternSize,  uint8_t *commandSize)
{
 80023c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023c4:	4680      	mov	r8, r0
 80023c6:	f89d 9020 	ldrb.w	r9, [sp, #32]
 80023ca:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    uint8_t success 		= FALSE;
    uint8_t bFound 			= FALSE;
    uint8_t patternIndex 	= 0;
    uint8_t bufferUsed 		= 0;
    uint8_t bufferPos 		= /*DmaChnGetDstPnt(DMA_CHANNEL1);*/pipes[id].bufferRxPtr;
 80023ce:	4684      	mov	ip, r0
 80023d0:	4836      	ldr	r0, [pc, #216]	; (80024ac <pipeDeviceParseCommand+0xec>)
 80023d2:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 80023d6:	7945      	ldrb	r5, [r0, #5]
    uint8_t bufferStart 	= pipes[id].bufferStartingPosition;
 80023d8:	7904      	ldrb	r4, [r0, #4]

    *commandSize = 0;
 80023da:	2600      	movs	r6, #0
 80023dc:	f88e 6000 	strb.w	r6, [lr]
    bufferUsed 	= (uint8_t)((pipes[id].bufferLength - bufferStart + bufferPos) % pipes[id].bufferLength);
 80023e0:	7986      	ldrb	r6, [r0, #6]
 80023e2:	1b30      	subs	r0, r6, r4
 80023e4:	4428      	add	r0, r5
 80023e6:	fb90 f5f6 	sdiv	r5, r0, r6
 80023ea:	fb06 0515 	mls	r5, r6, r5, r0

    if ( patternSize > 0 && bufferUsed >= patternSize  )
 80023ee:	f1b9 0f00 	cmp.w	r9, #0
 80023f2:	d057      	beq.n	80024a4 <pipeDeviceParseCommand+0xe4>
 80023f4:	b2ed      	uxtb	r5, r5
 80023f6:	454d      	cmp	r5, r9
 80023f8:	d302      	bcc.n	8002400 <pipeDeviceParseCommand+0x40>
 80023fa:	2600      	movs	r6, #0
 80023fc:	4630      	mov	r0, r6
 80023fe:	e02a      	b.n	8002456 <pipeDeviceParseCommand+0x96>
    uint8_t success 		= FALSE;
 8002400:	2000      	movs	r0, #0
 8002402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            {
                command[(*commandSize)] = pipes[id].buffer[bufferStart];
                (*commandSize)++;
            }

            if ( pipes[id].buffer[bufferStart] == pattern[patternIndex] )
 8002406:	4f29      	ldr	r7, [pc, #164]	; (80024ac <pipeDeviceParseCommand+0xec>)
 8002408:	f857 703c 	ldr.w	r7, [r7, ip, lsl #3]
 800240c:	f817 a004 	ldrb.w	sl, [r7, r4]
 8002410:	579f      	ldrsb	r7, [r3, r6]
 8002412:	45ba      	cmp	sl, r7
 8002414:	d033      	beq.n	800247e <pipeDeviceParseCommand+0xbe>
                patternIndex++;
                bFound 			= (uint8_t)(patternIndex >= patternSize);
            }
            else
            {
                bufferStart 	= (uint8_t)((bufferStart + pipes[id].bufferLength - patternIndex) % pipes[id].bufferLength);
 8002416:	4f25      	ldr	r7, [pc, #148]	; (80024ac <pipeDeviceParseCommand+0xec>)
 8002418:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 800241c:	79bf      	ldrb	r7, [r7, #6]
 800241e:	443c      	add	r4, r7
 8002420:	1ba4      	subs	r4, r4, r6
 8002422:	fb94 faf7 	sdiv	sl, r4, r7
 8002426:	fb07 441a 	mls	r4, r7, sl, r4
 800242a:	b2e4      	uxtb	r4, r4
                bufferUsed		+= patternIndex;
 800242c:	4435      	add	r5, r6
 800242e:	b2ed      	uxtb	r5, r5
                (*commandSize)	-= patternIndex;
 8002430:	f89e 7000 	ldrb.w	r7, [lr]
 8002434:	1bbe      	subs	r6, r7, r6
 8002436:	f88e 6000 	strb.w	r6, [lr]
                patternIndex 	= 0;
 800243a:	4606      	mov	r6, r0
            }

            bufferStart		= (uint8_t)((bufferStart + 1) % pipes[id].bufferLength);
 800243c:	f104 0a01 	add.w	sl, r4, #1
 8002440:	4f1a      	ldr	r7, [pc, #104]	; (80024ac <pipeDeviceParseCommand+0xec>)
 8002442:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 8002446:	79bf      	ldrb	r7, [r7, #6]
 8002448:	fb9a f4f7 	sdiv	r4, sl, r7
 800244c:	fb07 a414 	mls	r4, r7, r4, sl
 8002450:	b2e4      	uxtb	r4, r4
            bufferUsed--;
 8002452:	3d01      	subs	r5, #1
 8002454:	b2ed      	uxtb	r5, r5
        while ( bufferUsed > 0 && bFound == FALSE )
 8002456:	b1cd      	cbz	r5, 800248c <pipeDeviceParseCommand+0xcc>
 8002458:	b9c0      	cbnz	r0, 800248c <pipeDeviceParseCommand+0xcc>
            if ( *commandSize < length )
 800245a:	f89e 7000 	ldrb.w	r7, [lr]
 800245e:	4297      	cmp	r7, r2
 8002460:	d2d1      	bcs.n	8002406 <pipeDeviceParseCommand+0x46>
                command[(*commandSize)] = pipes[id].buffer[bufferStart];
 8002462:	f8df a048 	ldr.w	sl, [pc, #72]	; 80024ac <pipeDeviceParseCommand+0xec>
 8002466:	f85a a03c 	ldr.w	sl, [sl, ip, lsl #3]
 800246a:	f81a a004 	ldrb.w	sl, [sl, r4]
 800246e:	f801 a007 	strb.w	sl, [r1, r7]
                (*commandSize)++;
 8002472:	f89e 7000 	ldrb.w	r7, [lr]
 8002476:	3701      	adds	r7, #1
 8002478:	f88e 7000 	strb.w	r7, [lr]
 800247c:	e7c3      	b.n	8002406 <pipeDeviceParseCommand+0x46>
                patternIndex++;
 800247e:	3601      	adds	r6, #1
 8002480:	b2f6      	uxtb	r6, r6
                bFound 			= (uint8_t)(patternIndex >= patternSize);
 8002482:	45b1      	cmp	r9, r6
 8002484:	bf8c      	ite	hi
 8002486:	2000      	movhi	r0, #0
 8002488:	2001      	movls	r0, #1
 800248a:	e7d7      	b.n	800243c <pipeDeviceParseCommand+0x7c>
        }

        if ( bFound == TRUE )
 800248c:	2801      	cmp	r0, #1
 800248e:	d002      	beq.n	8002496 <pipeDeviceParseCommand+0xd6>
    uint8_t success 		= FALSE;
 8002490:	2000      	movs	r0, #0
            success = TRUE;
        }
    }

    return success;
}
 8002492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            pipes[id].bufferStartingPosition = bufferStart;
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <pipeDeviceParseCommand+0xec>)
 8002498:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800249c:	f888 4004 	strb.w	r4, [r8, #4]
 80024a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t success 		= FALSE;
 80024a4:	4648      	mov	r0, r9
 80024a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024aa:	bf00      	nop
 80024ac:	20000930 	.word	0x20000930

080024b0 <pipeDeviceExtractData>:
 * Params:
 * Return: Nothing
 * Note :
 *****************************************************************************/
void pipeDeviceExtractData(ePipes id, uint8_t *command, uint8_t length, uint8_t *commandSize)
{
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t bufferUsed 		= 0;
	uint8_t bufferPos 		= pipes[id].bufferRxPtr;
 80024b2:	4686      	mov	lr, r0
 80024b4:	4d16      	ldr	r5, [pc, #88]	; (8002510 <pipeDeviceExtractData+0x60>)
 80024b6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 80024ba:	796f      	ldrb	r7, [r5, #5]
	uint8_t bufferStart 	= pipes[id].bufferStartingPosition;
 80024bc:	792c      	ldrb	r4, [r5, #4]

	*commandSize 			= 0;
 80024be:	2600      	movs	r6, #0
 80024c0:	701e      	strb	r6, [r3, #0]
	bufferUsed 				= (uint8_t)((pipes[id].bufferLength - bufferStart + bufferPos) % pipes[id].bufferLength);
 80024c2:	79ae      	ldrb	r6, [r5, #6]
 80024c4:	1b35      	subs	r5, r6, r4
 80024c6:	443d      	add	r5, r7
 80024c8:	fb95 f7f6 	sdiv	r7, r5, r6
 80024cc:	fb06 5717 	mls	r7, r6, r7, r5
 80024d0:	b2ff      	uxtb	r7, r7

	while ( bufferUsed > 0)
 80024d2:	e00b      	b.n	80024ec <pipeDeviceExtractData+0x3c>
		{
			command[(*commandSize)] = pipes[id].buffer[bufferStart];
			(*commandSize)++;
		}

		bufferStart		= (uint8_t)((bufferStart + 1) % pipes[id].bufferLength);
 80024d4:	1c66      	adds	r6, r4, #1
 80024d6:	4d0e      	ldr	r5, [pc, #56]	; (8002510 <pipeDeviceExtractData+0x60>)
 80024d8:	eb05 05ce 	add.w	r5, r5, lr, lsl #3
 80024dc:	79ad      	ldrb	r5, [r5, #6]
 80024de:	fb96 f4f5 	sdiv	r4, r6, r5
 80024e2:	fb05 6414 	mls	r4, r5, r4, r6
 80024e6:	b2e4      	uxtb	r4, r4
		bufferUsed--;
 80024e8:	3f01      	subs	r7, #1
 80024ea:	b2ff      	uxtb	r7, r7
	while ( bufferUsed > 0)
 80024ec:	b15f      	cbz	r7, 8002506 <pipeDeviceExtractData+0x56>
		if ( *commandSize < length )
 80024ee:	781d      	ldrb	r5, [r3, #0]
 80024f0:	4295      	cmp	r5, r2
 80024f2:	d2ef      	bcs.n	80024d4 <pipeDeviceExtractData+0x24>
			command[(*commandSize)] = pipes[id].buffer[bufferStart];
 80024f4:	4e06      	ldr	r6, [pc, #24]	; (8002510 <pipeDeviceExtractData+0x60>)
 80024f6:	f856 603e 	ldr.w	r6, [r6, lr, lsl #3]
 80024fa:	5d36      	ldrb	r6, [r6, r4]
 80024fc:	554e      	strb	r6, [r1, r5]
			(*commandSize)++;
 80024fe:	781d      	ldrb	r5, [r3, #0]
 8002500:	3501      	adds	r5, #1
 8002502:	701d      	strb	r5, [r3, #0]
 8002504:	e7e6      	b.n	80024d4 <pipeDeviceExtractData+0x24>
	}

	pipes[id].bufferStartingPosition = bufferStart;
 8002506:	4b02      	ldr	r3, [pc, #8]	; (8002510 <pipeDeviceExtractData+0x60>)
 8002508:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800250c:	7104      	strb	r4, [r0, #4]
 800250e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002510:	20000930 	.word	0x20000930

08002514 <pipeDevice1ByteReceived>:


/**Helper functions to access each pipe */
#ifdef IS_PIPE1
inline eError pipeDevice1ByteReceived(uint8_t data)
{
 8002514:	b508      	push	{r3, lr}
	return pipeDeviceByteReceived(PIPE_1, data);
 8002516:	4601      	mov	r1, r0
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff ff37 	bl	800238c <pipeDeviceByteReceived>
}
 800251e:	bd08      	pop	{r3, pc}

08002520 <pipeDevice2ByteReceived>:
#endif

#ifdef IS_PIPE2
inline eError pipeDevice2ByteReceived(uint8_t data)
{
 8002520:	b508      	push	{r3, lr}
	return pipeDeviceByteReceived(PIPE_2, data);
 8002522:	4601      	mov	r1, r0
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff ff31 	bl	800238c <pipeDeviceByteReceived>
}
 800252a:	bd08      	pop	{r3, pc}

0800252c <FlashCalcOffset>:
 ****************************************************************************/
uint32_t FlashCalcOffset ( uint32_t initSector, uint32_t finalSector )
{
	uint32_t offset = 0;

	offset = (finalSector - initSector) * (FLASH_SECTOR_SIZE);
 800252c:	1a08      	subs	r0, r1, r0

	return offset;
}
 800252e:	00c0      	lsls	r0, r0, #3
 8002530:	4770      	bx	lr
	...

08002534 <FlashInit>:
{
 8002534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FlashContext[i].initAddress = FLASH_BASE;
 8002538:	4c26      	ldr	r4, [pc, #152]	; (80025d4 <FlashInit+0xa0>)
 800253a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800253e:	6063      	str	r3, [r4, #4]
	FlashContext[i].initSector = 0;
 8002540:	2600      	movs	r6, #0
 8002542:	6026      	str	r6, [r4, #0]
	FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, FlashInstanceMap[0].sectors);
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <FlashInit+0xa4>)
 8002546:	681f      	ldr	r7, [r3, #0]
 8002548:	4639      	mov	r1, r7
 800254a:	4630      	mov	r0, r6
 800254c:	f7ff ffee 	bl	800252c <FlashCalcOffset>
 8002550:	60a0      	str	r0, [r4, #8]
	for (i = 1; i < NUM_OF_FLASH; i++)
 8002552:	2401      	movs	r4, #1
 8002554:	e005      	b.n	8002562 <FlashInit+0x2e>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8002556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800255a:	e00f      	b.n	800257c <FlashInit+0x48>
			success = RET_FAIL;
 800255c:	2601      	movs	r6, #1
	for (i = 1; i < NUM_OF_FLASH; i++)
 800255e:	3401      	adds	r4, #1
 8002560:	b2e4      	uxtb	r4, r4
 8002562:	2c03      	cmp	r4, #3
 8002564:	d833      	bhi.n	80025ce <FlashInit+0x9a>
		if ( sectorUsed < FLASH_MAX_SECTORS )
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <FlashInit+0xa8>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800256e:	429a      	cmp	r2, r3
 8002570:	d0f1      	beq.n	8002556 <FlashInit+0x22>
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <FlashInit+0xac>)
 8002574:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8002578:	0adb      	lsrs	r3, r3, #11
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	429f      	cmp	r7, r3
 800257e:	d2ed      	bcs.n	800255c <FlashInit+0x28>
			FlashContext[i].initSector = sectorUsed;
 8002580:	4d14      	ldr	r5, [pc, #80]	; (80025d4 <FlashInit+0xa0>)
 8002582:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8002586:	eb08 0204 	add.w	r2, r8, r4
 800258a:	0093      	lsls	r3, r2, #2
 800258c:	18e8      	adds	r0, r5, r3
 800258e:	50ef      	str	r7, [r5, r3]
			FlashContext[i].initAddress = FlashContext[i-1].initAddress + FlashContext[i-1].maxOffset;
 8002590:	f104 3eff 	add.w	lr, r4, #4294967295
 8002594:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8002598:	eb03 010e 	add.w	r1, r3, lr
 800259c:	008a      	lsls	r2, r1, #2
 800259e:	442a      	add	r2, r5
 80025a0:	6851      	ldr	r1, [r2, #4]
 80025a2:	4473      	add	r3, lr
 80025a4:	009a      	lsls	r2, r3, #2
 80025a6:	442a      	add	r2, r5
 80025a8:	6893      	ldr	r3, [r2, #8]
 80025aa:	440b      	add	r3, r1
 80025ac:	6043      	str	r3, [r0, #4]
			FlashContext[i].maxOffset = FlashCalcOffset(sectorUsed, (sectorUsed + FlashInstanceMap[i].sectors));
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <FlashInit+0xa4>)
 80025b0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80025b4:	eb07 0903 	add.w	r9, r7, r3
 80025b8:	4649      	mov	r1, r9
 80025ba:	4638      	mov	r0, r7
 80025bc:	f7ff ffb6 	bl	800252c <FlashCalcOffset>
 80025c0:	44a0      	add	r8, r4
 80025c2:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80025c6:	441d      	add	r5, r3
 80025c8:	60a8      	str	r0, [r5, #8]
			sectorUsed +=  FlashInstanceMap[i].sectors;
 80025ca:	464f      	mov	r7, r9
 80025cc:	e7c7      	b.n	800255e <FlashInit+0x2a>
}
 80025ce:	4630      	mov	r0, r6
 80025d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025d4:	20000a70 	.word	0x20000a70
 80025d8:	080072c8 	.word	0x080072c8
 80025dc:	1fff75e0 	.word	0x1fff75e0
 80025e0:	003ffc00 	.word	0x003ffc00

080025e4 <FlashStop>:
eError FlashStop( void )
{
	eError 	success = RET_OK;

	return success;
}
 80025e4:	2000      	movs	r0, #0
 80025e6:	4770      	bx	lr

080025e8 <FlashStart>:
eError FlashStart( void )
{
	eError 	success = RET_OK;

	return success;
}
 80025e8:	2000      	movs	r0, #0
 80025ea:	4770      	bx	lr

080025ec <FlashSleep>:
eError FlashSleep( void )
{
	eError 	success = RET_OK;

	return success;
}
 80025ec:	2000      	movs	r0, #0
 80025ee:	4770      	bx	lr

080025f0 <FlashWake>:
eError FlashWake( void )
{
	eError 	success = RET_OK;

	return success;
}
 80025f0:	2000      	movs	r0, #0
 80025f2:	4770      	bx	lr

080025f4 <FlashLock>:
 * @param
 * @return 	Success or error status.
 *
 ****************************************************************************/
eError FlashLock( void)
{
 80025f4:	b508      	push	{r3, lr}
	eError success = RET_FAIL;

	HAL_StatusTypeDef flashStatus = HAL_ERROR;

	flashStatus = HAL_FLASH_Lock();
 80025f6:	f001 f96d 	bl	80038d4 <HAL_FLASH_Lock>
	if(flashStatus == HAL_OK)
 80025fa:	b908      	cbnz	r0, 8002600 <FlashLock+0xc>
	{
		success = RET_OK;
 80025fc:	2000      	movs	r0, #0
	}

	return success;
}
 80025fe:	bd08      	pop	{r3, pc}
	eError success = RET_FAIL;
 8002600:	2001      	movs	r0, #1
 8002602:	bd08      	pop	{r3, pc}

08002604 <FlashUnlock>:
 * @param
 * @return 	Success or error status.
 *
 ****************************************************************************/
eError FlashUnlock( void)
{
 8002604:	b508      	push	{r3, lr}
	eError success = RET_FAIL;

	HAL_StatusTypeDef flashStatus = HAL_ERROR;

	flashStatus = HAL_FLASH_Unlock();
 8002606:	f001 f94d 	bl	80038a4 <HAL_FLASH_Unlock>
	if(flashStatus == HAL_OK)
 800260a:	b908      	cbnz	r0, 8002610 <FlashUnlock+0xc>
	{
		success = RET_OK;
 800260c:	2000      	movs	r0, #0
	}

	return success;
}
 800260e:	bd08      	pop	{r3, pc}
	eError success = RET_FAIL;
 8002610:	2001      	movs	r0, #1
 8002612:	bd08      	pop	{r3, pc}

08002614 <FlashReadData>:
 * 			offset: from 0 - to total flash area size
 * 			flashArea: Specifies the flash area.
 * @return 	Success or error status.
 ****************************************************************************/
eError FlashReadData(tFlash flashArea, uint32_t *data, uint32_t offset)
{
 8002614:	b410      	push	{r4}
	eError 	success = RET_OK;

	uint32_t address = FLASH_DEFAULT_ADDRESS;

	if(offset>FlashContext[flashArea].maxOffset)
 8002616:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800261a:	009c      	lsls	r4, r3, #2
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <FlashReadData+0x28>)
 800261e:	4423      	add	r3, r4
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4293      	cmp	r3, r2
 8002624:	d308      	bcc.n	8002638 <FlashReadData+0x24>
	{
		success = RET_FAIL;
	}
	else
	{
		address = FlashContext[flashArea].initAddress + offset;
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <FlashReadData+0x28>)
 8002628:	4423      	add	r3, r4
 800262a:	685b      	ldr	r3, [r3, #4]
		*data = (*(uint32_t*)(address));
 800262c:	58d3      	ldr	r3, [r2, r3]
 800262e:	600b      	str	r3, [r1, #0]
	eError 	success = RET_OK;
 8002630:	2000      	movs	r0, #0
	}

	return success;
}
 8002632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002636:	4770      	bx	lr
		success = RET_FAIL;
 8002638:	2001      	movs	r0, #1
 800263a:	e7fa      	b.n	8002632 <FlashReadData+0x1e>
 800263c:	20000a70 	.word	0x20000a70

08002640 <FlashProgramData>:
 *
 * @return 	success or error status.
 *
 ****************************************************************************/
eError FlashProgramData( tFlash flashArea, uint64_t data, uint32_t offset)
{
 8002640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002642:	461f      	mov	r7, r3
 8002644:	9d06      	ldr	r5, [sp, #24]
	eError 	success = RET_OK;

	HAL_StatusTypeDef status = HAL_OK;

	/* Check the offset is valid */
	if(offset>FlashContext[flashArea].maxOffset)
 8002646:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800264a:	0099      	lsls	r1, r3, #2
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <FlashProgramData+0x54>)
 800264e:	440b      	add	r3, r1
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	42ab      	cmp	r3, r5
 8002654:	d202      	bcs.n	800265c <FlashProgramData+0x1c>
	{
		success = RET_FAIL;
 8002656:	2301      	movs	r3, #1
			success = FlashLock();
		}
	}

	return success;
}
 8002658:	4618      	mov	r0, r3
 800265a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800265c:	4616      	mov	r6, r2
 800265e:	4604      	mov	r4, r0
		success = FlashUnlock();
 8002660:	f7ff ffd0 	bl	8002604 <FlashUnlock>
		if(success == RET_OK)
 8002664:	4603      	mov	r3, r0
 8002666:	2800      	cmp	r0, #0
 8002668:	d1f6      	bne.n	8002658 <FlashProgramData+0x18>
			status =  HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (FlashContext[flashArea].initAddress + offset), data);
 800266a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800266e:	0082      	lsls	r2, r0, #2
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <FlashProgramData+0x54>)
 8002672:	4413      	add	r3, r2
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	4632      	mov	r2, r6
 8002678:	463b      	mov	r3, r7
 800267a:	4429      	add	r1, r5
 800267c:	2000      	movs	r0, #0
 800267e:	f001 f97b 	bl	8003978 <HAL_FLASH_Program>
			if(status != HAL_OK)
 8002682:	b918      	cbnz	r0, 800268c <FlashProgramData+0x4c>
			success = FlashLock();
 8002684:	f7ff ffb6 	bl	80025f4 <FlashLock>
 8002688:	4603      	mov	r3, r0
 800268a:	e7e5      	b.n	8002658 <FlashProgramData+0x18>
				success = FlashLock();
 800268c:	f7ff ffb2 	bl	80025f4 <FlashLock>
				return RET_FAIL;
 8002690:	2301      	movs	r3, #1
 8002692:	e7e1      	b.n	8002658 <FlashProgramData+0x18>
 8002694:	20000a70 	.word	0x20000a70

08002698 <FlashGetSize>:
 * @param
 * @return Success or error status.
 ****************************************************************************/
void FlashGetSize( tFlash flashArea, uint32_t *size)
{
	*size =   FlashContext[flashArea].maxOffset;
 8002698:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800269c:	0082      	lsls	r2, r0, #2
 800269e:	4b02      	ldr	r3, [pc, #8]	; (80026a8 <FlashGetSize+0x10>)
 80026a0:	4413      	add	r3, r2
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	600b      	str	r3, [r1, #0]
 80026a6:	4770      	bx	lr
 80026a8:	20000a70 	.word	0x20000a70

080026ac <initHregFlash>:
/***********************************************************************
 * @brief	API for init Flash.
 *
 **********************************************************************/
__weak eError initHregFlash( void )
{
 80026ac:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = FlashInit();
 80026ae:	f7ff ff41 	bl	8002534 <FlashInit>

	return result;
}
 80026b2:	bd08      	pop	{r3, pc}

080026b4 <startHregFlash>:
/***********************************************************************
 * @brief	API for start Flash.
 *
 **********************************************************************/
__weak eError startHregFlash( void )
{
 80026b4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = FlashStart();
 80026b6:	f7ff ff97 	bl	80025e8 <FlashStart>

	return result;
}
 80026ba:	bd08      	pop	{r3, pc}

080026bc <stopHregFlash>:
/***********************************************************************
 * @brief	API for stop Flash.
 *
 **********************************************************************/
__weak eError stopHregFlash( void )
{
 80026bc:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = FlashStop();
 80026be:	f7ff ff91 	bl	80025e4 <FlashStop>

	return result;
}
 80026c2:	bd08      	pop	{r3, pc}

080026c4 <sleepHregFlash>:
/***********************************************************************
 * @brief	API for sleep Flash.
 *
 **********************************************************************/
__weak eError sleepHregFlash( void )
{
 80026c4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = FlashSleep();
 80026c6:	f7ff ff91 	bl	80025ec <FlashSleep>

	return result;
}
 80026ca:	bd08      	pop	{r3, pc}

080026cc <wakeHregFlash>:
/***********************************************************************
 * @brief	API for wake Flash.
 *
 **********************************************************************/
__weak eError wakeHregFlash( void )
{
 80026cc:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = FlashWake();
 80026ce:	f7ff ff8f 	bl	80025f0 <FlashWake>

	return result;
}
 80026d2:	bd08      	pop	{r3, pc}

080026d4 <onReadHregFlashSize>:
/***********************************************************************
 * @brief	On Read function for Flash size.
 *
 **********************************************************************/
__weak eError onReadHregFlashSize( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 80026d4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	FlashGetSize( (tFlash)instance, (uint32_t*) param1);
 80026d6:	4611      	mov	r1, r2
 80026d8:	f7ff ffde 	bl	8002698 <FlashGetSize>

	return result;
}
 80026dc:	2000      	movs	r0, #0
 80026de:	bd08      	pop	{r3, pc}

080026e0 <onReadHregFlashData>:
/***********************************************************************
 * @brief	On Read function for Flash data.
 *
 **********************************************************************/
__weak eError onReadHregFlashData( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 80026e0:	b530      	push	{r4, r5, lr}
 80026e2:	b083      	sub	sp, #12
 80026e4:	4604      	mov	r4, r0
 80026e6:	4615      	mov	r5, r2
	eError result = RET_OK;

	uint32_t offset;
	READ_HREG( instance, HREG_FLASH_OFFSET, &offset);
 80026e8:	aa01      	add	r2, sp, #4
 80026ea:	4905      	ldr	r1, [pc, #20]	; (8002700 <onReadHregFlashData+0x20>)
 80026ec:	f7fe f8e0 	bl	80008b0 <readHreg>
	result = FlashReadData((tFlash)instance, (uint32_t*) param1, offset);
 80026f0:	9a01      	ldr	r2, [sp, #4]
 80026f2:	4629      	mov	r1, r5
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff ff8d 	bl	8002614 <FlashReadData>

	return result;
}
 80026fa:	b003      	add	sp, #12
 80026fc:	bd30      	pop	{r4, r5, pc}
 80026fe:	bf00      	nop
 8002700:	08006c44 	.word	0x08006c44

08002704 <onWriteHregFlashData>:
/***********************************************************************
 * @brief	On Write function for Flash data.
 *
 **********************************************************************/
__weak eError onWriteHregFlashData( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8002704:	b530      	push	{r4, r5, lr}
 8002706:	b085      	sub	sp, #20
 8002708:	4604      	mov	r4, r0
 800270a:	4615      	mov	r5, r2
	eError result = RET_OK;

	uint32_t offset;
	READ_HREG( instance, HREG_FLASH_OFFSET, &offset);
 800270c:	aa03      	add	r2, sp, #12
 800270e:	4906      	ldr	r1, [pc, #24]	; (8002728 <onWriteHregFlashData+0x24>)
 8002710:	f7fe f8ce 	bl	80008b0 <readHreg>
	result = FlashProgramData((tFlash)instance, (uint64_t) param1, offset);
 8002714:	9b03      	ldr	r3, [sp, #12]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	462a      	mov	r2, r5
 800271a:	2300      	movs	r3, #0
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff ff8f 	bl	8002640 <FlashProgramData>

	return result;
}
 8002722:	b005      	add	sp, #20
 8002724:	bd30      	pop	{r4, r5, pc}
 8002726:	bf00      	nop
 8002728:	08006c44 	.word	0x08006c44

0800272c <GPIOStop>:
eError GPIOStop( void )
{
	eError 	success = RET_OK;

	return success;
}
 800272c:	2000      	movs	r0, #0
 800272e:	4770      	bx	lr

08002730 <GPIOStart>:
eError GPIOStart( void )
{
	eError 	success = RET_OK;

	return success;
}
 8002730:	2000      	movs	r0, #0
 8002732:	4770      	bx	lr

08002734 <GPIOSleep>:
eError GPIOSleep( void )
{
	eError 	success = RET_OK;

	return success;
}
 8002734:	2000      	movs	r0, #0
 8002736:	4770      	bx	lr

08002738 <GPIOWake>:
eError GPIOWake( void )
{
	eError 	success = RET_OK;

	return success;
}
 8002738:	2000      	movs	r0, #0
 800273a:	4770      	bx	lr

0800273c <GPIOWritePort>:
 ****************************************************************************/
eError GPIOWritePort(tGPIO port, tGPIOValue value)
{
	eError 	success = RET_OK;

	if ( value == GPIO_DEFAULT )
 800273c:	2903      	cmp	r1, #3
 800273e:	d015      	beq.n	800276c <GPIOWritePort+0x30>
{
 8002740:	b508      	push	{r3, lr}
 8002742:	460a      	mov	r2, r1
		success = RET_INVALID_PARAMETER;
		return success;
	}


	if ( value != GPIO_TOGGLE )
 8002744:	2902      	cmp	r1, #2
 8002746:	d008      	beq.n	800275a <GPIOWritePort+0x1e>
	{
		HAL_GPIO_WritePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin, value);
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <GPIOWritePort+0x34>)
 800274a:	0100      	lsls	r0, r0, #4
 800274c:	1819      	adds	r1, r3, r0
 800274e:	8889      	ldrh	r1, [r1, #4]
 8002750:	5818      	ldr	r0, [r3, r0]
 8002752:	f001 fa70 	bl	8003c36 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
	}

	return success;
 8002756:	2000      	movs	r0, #0
 8002758:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <GPIOWritePort+0x34>)
 800275c:	0100      	lsls	r0, r0, #4
 800275e:	181a      	adds	r2, r3, r0
 8002760:	8891      	ldrh	r1, [r2, #4]
 8002762:	5818      	ldr	r0, [r3, r0]
 8002764:	f001 fa6c 	bl	8003c40 <HAL_GPIO_TogglePin>
	return success;
 8002768:	2000      	movs	r0, #0
 800276a:	bd08      	pop	{r3, pc}
		return success;
 800276c:	2005      	movs	r0, #5
 800276e:	4770      	bx	lr
 8002770:	080072d8 	.word	0x080072d8

08002774 <GPIOReadPort>:
 * @param	port to read.
 * @param   value
 * @return  success.
 ****************************************************************************/
eError GPIOReadPort(tGPIO port,  tGPIOValue *value)
{
 8002774:	b510      	push	{r4, lr}
 8002776:	460c      	mov	r4, r1
	eError 	success = RET_OK;

	*value = HAL_GPIO_ReadPin(GPIOInstanceMap[port].port, GPIOInstanceMap[port].pin);
 8002778:	4b04      	ldr	r3, [pc, #16]	; (800278c <GPIOReadPort+0x18>)
 800277a:	0100      	lsls	r0, r0, #4
 800277c:	181a      	adds	r2, r3, r0
 800277e:	8891      	ldrh	r1, [r2, #4]
 8002780:	5818      	ldr	r0, [r3, r0]
 8002782:	f001 fa51 	bl	8003c28 <HAL_GPIO_ReadPin>
 8002786:	7020      	strb	r0, [r4, #0]

	return success;
}
 8002788:	2000      	movs	r0, #0
 800278a:	bd10      	pop	{r4, pc}
 800278c:	080072d8 	.word	0x080072d8

08002790 <InitGPIOClock>:
 * @brief  Enable GPIO clock.
 * @param	port to enable clock.
 * @return  None.
 ****************************************************************************/
void InitGPIOClock(tGPIO port)
{
 8002790:	b086      	sub	sp, #24
	/* Enable the GPIO Clock */
#ifdef GPIOA
	if ( GPIOInstanceMap[port].port == GPIOA ){
 8002792:	0103      	lsls	r3, r0, #4
 8002794:	4a3c      	ldr	r2, [pc, #240]	; (8002888 <InitGPIOClock+0xf8>)
 8002796:	58d3      	ldr	r3, [r2, r3]
 8002798:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800279c:	d01f      	beq.n	80027de <InitGPIOClock+0x4e>
		__GPIOA_CLK_ENABLE();
	}
#endif //GPIOA

#ifdef GPIOB
	if( GPIOInstanceMap[port].port == GPIOB ){
 800279e:	0103      	lsls	r3, r0, #4
 80027a0:	4a39      	ldr	r2, [pc, #228]	; (8002888 <InitGPIOClock+0xf8>)
 80027a2:	58d2      	ldr	r2, [r2, r3]
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <InitGPIOClock+0xfc>)
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d027      	beq.n	80027fa <InitGPIOClock+0x6a>
		__GPIOB_CLK_ENABLE();
	}
#endif //GPIOB

#ifdef GPIOC
	if( GPIOInstanceMap[port].port == GPIOC ){
 80027aa:	0103      	lsls	r3, r0, #4
 80027ac:	4a36      	ldr	r2, [pc, #216]	; (8002888 <InitGPIOClock+0xf8>)
 80027ae:	58d2      	ldr	r2, [r2, r3]
 80027b0:	4b37      	ldr	r3, [pc, #220]	; (8002890 <InitGPIOClock+0x100>)
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d02f      	beq.n	8002816 <InitGPIOClock+0x86>
		__GPIOC_CLK_ENABLE();
	}
#endif //GPIOC

#ifdef GPIOD
	if( GPIOInstanceMap[port].port == GPIOD ){
 80027b6:	0103      	lsls	r3, r0, #4
 80027b8:	4a33      	ldr	r2, [pc, #204]	; (8002888 <InitGPIOClock+0xf8>)
 80027ba:	58d2      	ldr	r2, [r2, r3]
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <InitGPIOClock+0x104>)
 80027be:	429a      	cmp	r2, r3
 80027c0:	d037      	beq.n	8002832 <InitGPIOClock+0xa2>
		__GPIOD_CLK_ENABLE();
	}
#endif //GPIOD

#ifdef GPIOE
	if( GPIOInstanceMap[port].port == GPIOE ){
 80027c2:	0103      	lsls	r3, r0, #4
 80027c4:	4a30      	ldr	r2, [pc, #192]	; (8002888 <InitGPIOClock+0xf8>)
 80027c6:	58d2      	ldr	r2, [r2, r3]
 80027c8:	4b33      	ldr	r3, [pc, #204]	; (8002898 <InitGPIOClock+0x108>)
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d03f      	beq.n	800284e <InitGPIOClock+0xbe>
		__GPIOG_CLK_ENABLE();
	}
#endif //GPIOG

#ifdef GPIOH
	if( GPIOInstanceMap[port].port == GPIOH ){
 80027ce:	0100      	lsls	r0, r0, #4
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <InitGPIOClock+0xf8>)
 80027d2:	581a      	ldr	r2, [r3, r0]
 80027d4:	4b31      	ldr	r3, [pc, #196]	; (800289c <InitGPIOClock+0x10c>)
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d047      	beq.n	800286a <InitGPIOClock+0xda>
		__GPIOI_CLK_ENABLE();
	}
#endif //GPIOI


}
 80027da:	b006      	add	sp, #24
 80027dc:	4770      	bx	lr
		__GPIOA_CLK_ENABLE();
 80027de:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80027e2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80027e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80027ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	9b00      	ldr	r3, [sp, #0]
 80027f8:	e7d1      	b.n	800279e <InitGPIOClock+0xe>
		__GPIOB_CLK_ENABLE();
 80027fa:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80027fe:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002802:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002804:	f042 0202 	orr.w	r2, r2, #2
 8002808:	64da      	str	r2, [r3, #76]	; 0x4c
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	9b01      	ldr	r3, [sp, #4]
 8002814:	e7c9      	b.n	80027aa <InitGPIOClock+0x1a>
		__GPIOC_CLK_ENABLE();
 8002816:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800281a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800281e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002820:	f042 0204 	orr.w	r2, r2, #4
 8002824:	64da      	str	r2, [r3, #76]	; 0x4c
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	9302      	str	r3, [sp, #8]
 800282e:	9b02      	ldr	r3, [sp, #8]
 8002830:	e7c1      	b.n	80027b6 <InitGPIOClock+0x26>
		__GPIOD_CLK_ENABLE();
 8002832:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002836:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 800283a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800283c:	f042 0208 	orr.w	r2, r2, #8
 8002840:	64da      	str	r2, [r3, #76]	; 0x4c
 8002842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	9303      	str	r3, [sp, #12]
 800284a:	9b03      	ldr	r3, [sp, #12]
 800284c:	e7b9      	b.n	80027c2 <InitGPIOClock+0x32>
		__GPIOE_CLK_ENABLE();
 800284e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002852:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002858:	f042 0210 	orr.w	r2, r2, #16
 800285c:	64da      	str	r2, [r3, #76]	; 0x4c
 800285e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	9304      	str	r3, [sp, #16]
 8002866:	9b04      	ldr	r3, [sp, #16]
 8002868:	e7b1      	b.n	80027ce <InitGPIOClock+0x3e>
		__GPIOH_CLK_ENABLE();
 800286a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800286e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002874:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002878:	64da      	str	r2, [r3, #76]	; 0x4c
 800287a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002880:	9305      	str	r3, [sp, #20]
 8002882:	9b05      	ldr	r3, [sp, #20]
}
 8002884:	e7a9      	b.n	80027da <InitGPIOClock+0x4a>
 8002886:	bf00      	nop
 8002888:	080072d8 	.word	0x080072d8
 800288c:	48000400 	.word	0x48000400
 8002890:	48000800 	.word	0x48000800
 8002894:	48000c00 	.word	0x48000c00
 8002898:	48001000 	.word	0x48001000
 800289c:	48001c00 	.word	0x48001c00

080028a0 <GPIOInit>:
{
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	b086      	sub	sp, #24
	for (port = 0; port < NUM_OF_GPIO; port++)
 80028a4:	2400      	movs	r4, #0
	eError 				success = RET_OK;
 80028a6:	4626      	mov	r6, r4
	for (port = 0; port < NUM_OF_GPIO; port++)
 80028a8:	e001      	b.n	80028ae <GPIOInit+0xe>
 80028aa:	3401      	adds	r4, #1
 80028ac:	b2e4      	uxtb	r4, r4
 80028ae:	2c05      	cmp	r4, #5
 80028b0:	d81b      	bhi.n	80028ea <GPIOInit+0x4a>
		InitGPIOClock(port);
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff ff6c 	bl	8002790 <InitGPIOClock>
        GPIO_InitStructure.Pin =  	(uint32_t)GPIOInstanceMap[port].pin;
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <GPIOInit+0x50>)
 80028ba:	0123      	lsls	r3, r4, #4
 80028bc:	18d5      	adds	r5, r2, r3
 80028be:	88a9      	ldrh	r1, [r5, #4]
 80028c0:	9101      	str	r1, [sp, #4]
		GPIO_InitStructure.Mode = 	(uint32_t)GPIOInstanceMap[port].mode;
 80028c2:	68a9      	ldr	r1, [r5, #8]
 80028c4:	9102      	str	r1, [sp, #8]
		GPIO_InitStructure.Speed = 	(uint32_t)GPIOInstanceMap[port].speed;
 80028c6:	7b29      	ldrb	r1, [r5, #12]
 80028c8:	9104      	str	r1, [sp, #16]
		GPIO_InitStructure.Pull = 	(uint32_t)GPIOInstanceMap[port].pupd;
 80028ca:	7b69      	ldrb	r1, [r5, #13]
 80028cc:	9103      	str	r1, [sp, #12]
		GPIO_InitStructure.Alternate = (uint32_t)GPIOInstanceMap[port].alternate;
 80028ce:	7ba9      	ldrb	r1, [r5, #14]
 80028d0:	9105      	str	r1, [sp, #20]
		HAL_GPIO_Init(GPIOInstanceMap[port].port, &GPIO_InitStructure);
 80028d2:	a901      	add	r1, sp, #4
 80028d4:	58d0      	ldr	r0, [r2, r3]
 80028d6:	f001 f8d7 	bl	8003a88 <HAL_GPIO_Init>
		if ( GPIOInstanceMap[port].initialValue != GPIO_DEFAULT )
 80028da:	7be9      	ldrb	r1, [r5, #15]
 80028dc:	2903      	cmp	r1, #3
 80028de:	d0e4      	beq.n	80028aa <GPIOInit+0xa>
			success = GPIOWritePort(port, GPIOInstanceMap[port].initialValue);
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff ff2b 	bl	800273c <GPIOWritePort>
 80028e6:	4606      	mov	r6, r0
 80028e8:	e7df      	b.n	80028aa <GPIOInit+0xa>
}
 80028ea:	4630      	mov	r0, r6
 80028ec:	b006      	add	sp, #24
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
 80028f0:	080072d8 	.word	0x080072d8

080028f4 <initHregGPIO>:
/***********************************************************************
 * @brief	API for init Gpio.
 *
 **********************************************************************/
__weak eError initHregGPIO( void )
{
 80028f4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOInit();
 80028f6:	f7ff ffd3 	bl	80028a0 <GPIOInit>

	return result;
}
 80028fa:	bd08      	pop	{r3, pc}

080028fc <startHregGPIO>:
/***********************************************************************
 * @brief	API for start Gpio.
 *
 **********************************************************************/
__weak eError startHregGPIO( void )
{
 80028fc:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOStart();
 80028fe:	f7ff ff17 	bl	8002730 <GPIOStart>

	return result;
}
 8002902:	bd08      	pop	{r3, pc}

08002904 <stopHregGPIO>:
/***********************************************************************
 * @brief	API for stop Gpio.
 *
 **********************************************************************/
__weak eError stopHregGPIO( void )
{
 8002904:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOStop();
 8002906:	f7ff ff11 	bl	800272c <GPIOStop>

	return result;
}
 800290a:	bd08      	pop	{r3, pc}

0800290c <sleepHregGPIO>:
/***********************************************************************
 * @brief	API for sleep Gpio.
 *
 **********************************************************************/
__weak eError sleepHregGPIO( void )
{
 800290c:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOSleep();
 800290e:	f7ff ff11 	bl	8002734 <GPIOSleep>

	return result;
}
 8002912:	bd08      	pop	{r3, pc}

08002914 <wakeHregGPIO>:
/***********************************************************************
 * @brief	API for wake Gpio.
 *
 **********************************************************************/
__weak eError wakeHregGPIO( void )
{
 8002914:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOWake();
 8002916:	f7ff ff0f 	bl	8002738 <GPIOWake>

	return result;
}
 800291a:	bd08      	pop	{r3, pc}

0800291c <onReadHregGPIOValue>:
/***********************************************************************
 * @brief	On Read function for Gpio value.
 *
 **********************************************************************/
__weak eError onReadHregGPIOValue( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 800291c:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOReadPort((tGPIO)instance, (uint8_t*) param1);
 800291e:	4611      	mov	r1, r2
 8002920:	f7ff ff28 	bl	8002774 <GPIOReadPort>

	return result;
}
 8002924:	bd08      	pop	{r3, pc}

08002926 <onWriteHregGPIOValue>:
/***********************************************************************
 * @brief	On Write function for Gpio value.
 *
 **********************************************************************/
__weak eError onWriteHregGPIOValue( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8002926:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = GPIOWritePort( instance ,param1);
 8002928:	b2d1      	uxtb	r1, r2
 800292a:	f7ff ff07 	bl	800273c <GPIOWritePort>

	return result;
}
 800292e:	bd08      	pop	{r3, pc}

08002930 <interruptsInit>:
 * @brief  Init interrupts driver
 * 		   Configure all IRQ Channels declared on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsInit( void )
{
 8002930:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 8002932:	2400      	movs	r4, #0
 8002934:	e001      	b.n	800293a <interruptsInit+0xa>
 8002936:	3401      	adds	r4, #1
 8002938:	b2e4      	uxtb	r4, r4
 800293a:	2c10      	cmp	r4, #16
 800293c:	d80c      	bhi.n	8002958 <interruptsInit+0x28>
	{
		if (IS_SETTABLE_PRIORITY_IRQ(interruptsInstanceMap[i].IRQn))
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <interruptsInit+0x2c>)
 8002940:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8002944:	f110 0f05 	cmn.w	r0, #5
 8002948:	dbf5      	blt.n	8002936 <interruptsInit+0x6>
		{
			HAL_NVIC_SetPriority(interruptsInstanceMap[i].IRQn, (uint32_t)interruptsInstanceMap[i].PreemptPriority, (uint32_t)interruptsInstanceMap[i].SubPriority);
 800294a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800294e:	789a      	ldrb	r2, [r3, #2]
 8002950:	7859      	ldrb	r1, [r3, #1]
 8002952:	f000 fee7 	bl	8003724 <HAL_NVIC_SetPriority>
 8002956:	e7ee      	b.n	8002936 <interruptsInit+0x6>
		}
	}
	return result;
}
 8002958:	2000      	movs	r0, #0
 800295a:	bd10      	pop	{r4, pc}
 800295c:	20000104 	.word	0x20000104

08002960 <interruptsStart>:
 * @brief  Start interrupts driver
 * 		   Enable all IRQ Channels configured as ENABLE on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsStart( void )
{
 8002960:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 8002962:	2400      	movs	r4, #0
 8002964:	e001      	b.n	800296a <interruptsStart+0xa>
 8002966:	3401      	adds	r4, #1
 8002968:	b2e4      	uxtb	r4, r4
 800296a:	2c10      	cmp	r4, #16
 800296c:	d80d      	bhi.n	800298a <interruptsStart+0x2a>
	{
		if (interruptsInstanceMap[i].State == IRQ_ENABLE)
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <interruptsStart+0x30>)
 8002970:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d1f5      	bne.n	8002966 <interruptsStart+0x6>
		{
			if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[i].IRQn))
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <interruptsStart+0x30>)
 800297c:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 8002980:	2800      	cmp	r0, #0
 8002982:	dbf0      	blt.n	8002966 <interruptsStart+0x6>
			{
				HAL_NVIC_EnableIRQ(interruptsInstanceMap[i].IRQn);
 8002984:	f000 ff00 	bl	8003788 <HAL_NVIC_EnableIRQ>
 8002988:	e7ed      	b.n	8002966 <interruptsStart+0x6>

		}
	}

	return result;
}
 800298a:	2000      	movs	r0, #0
 800298c:	bd10      	pop	{r4, pc}
 800298e:	bf00      	nop
 8002990:	20000104 	.word	0x20000104

08002994 <interruptsStop>:
 * @brief  Stop interrupts driver
 * 		   Disable all IRQ Channels declared on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsStop( void )
{
 8002994:	b510      	push	{r4, lr}
	eError result = RET_OK;

	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 8002996:	2400      	movs	r4, #0
 8002998:	e001      	b.n	800299e <interruptsStop+0xa>
 800299a:	3401      	adds	r4, #1
 800299c:	b2e4      	uxtb	r4, r4
 800299e:	2c10      	cmp	r4, #16
 80029a0:	d807      	bhi.n	80029b2 <interruptsStop+0x1e>
	{
		if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[i].IRQn))
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <interruptsStop+0x24>)
 80029a4:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 80029a8:	2800      	cmp	r0, #0
 80029aa:	dbf6      	blt.n	800299a <interruptsStop+0x6>
		{
			HAL_NVIC_DisableIRQ(interruptsInstanceMap[i].IRQn);
 80029ac:	f000 fef8 	bl	80037a0 <HAL_NVIC_DisableIRQ>
 80029b0:	e7f3      	b.n	800299a <interruptsStop+0x6>
		}
	}

	return result;
}
 80029b2:	2000      	movs	r0, #0
 80029b4:	bd10      	pop	{r4, pc}
 80029b6:	bf00      	nop
 80029b8:	20000104 	.word	0x20000104

080029bc <interruptsSleep>:
 * @brief  Sleep interrupts driver
 * 		   Disable all IRQ Channels declared on intPriorityMap list
 * @return eError :
 ****************************************************************************/
eError interruptsSleep( void )
{
 80029bc:	b508      	push	{r3, lr}
	eError result = RET_OK;

    interruptsStop();
 80029be:	f7ff ffe9 	bl	8002994 <interruptsStop>

	return result;
}
 80029c2:	2000      	movs	r0, #0
 80029c4:	bd08      	pop	{r3, pc}

080029c6 <interruptsWake>:
/*************************************************************************//**
 * @brief  Wake the interrupts driver
 * @return eError :
 ****************************************************************************/
eError interruptsWake( void )
{
 80029c6:	b508      	push	{r3, lr}
	eError result = RET_OK;

    interruptsStart();
 80029c8:	f7ff ffca 	bl	8002960 <interruptsStart>

	return result;
}
 80029cc:	2000      	movs	r0, #0
 80029ce:	bd08      	pop	{r3, pc}

080029d0 <interruptsGetState>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029d0:	f3ef 8310 	mrs	r3, PRIMASK
tIRQState interruptsGetState(tInterrupts indexIRQ)
{
	tIRQState state = IRQ_DISABLE;


	if (__get_PRIMASK()==0)
 80029d4:	b953      	cbnz	r3, 80029ec <interruptsGetState+0x1c>
	{
		if (indexIRQ < MAX_IRQ)
 80029d6:	2810      	cmp	r0, #16
 80029d8:	d903      	bls.n	80029e2 <interruptsGetState+0x12>
		{
			state = interruptsInstanceMap[indexIRQ].State;
		}
		else if (indexIRQ==IRQ_ALL)
 80029da:	2811      	cmp	r0, #17
 80029dc:	d008      	beq.n	80029f0 <interruptsGetState+0x20>
	tIRQState state = IRQ_DISABLE;
 80029de:	2000      	movs	r0, #0
 80029e0:	4770      	bx	lr
			state = interruptsInstanceMap[indexIRQ].State;
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <interruptsGetState+0x24>)
 80029e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80029e8:	78c0      	ldrb	r0, [r0, #3]
 80029ea:	4770      	bx	lr
	tIRQState state = IRQ_DISABLE;
 80029ec:	2000      	movs	r0, #0
 80029ee:	4770      	bx	lr
		{
			state = IRQ_ENABLE;
 80029f0:	2001      	movs	r0, #1
		}
	}

	return state;

}
 80029f2:	4770      	bx	lr
 80029f4:	20000104 	.word	0x20000104

080029f8 <interruptsEnable>:
 * @param	None.
 * @return  None.
 ****************************************************************************/
void interruptsEnable( void )
{
	if (countIrqAllDisable<=1)
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <interruptsEnable+0x24>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d906      	bls.n	8002a10 <interruptsEnable+0x18>
		countIrqAllDisable=0;
		__enable_irq();
	}
	else
	{
		countIrqAllDisable--;
 8002a02:	4a06      	ldr	r2, [pc, #24]	; (8002a1c <interruptsEnable+0x24>)
 8002a04:	8813      	ldrh	r3, [r2, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	8013      	strh	r3, [r2, #0]
 8002a0e:	4770      	bx	lr
		countIrqAllDisable=0;
 8002a10:	2200      	movs	r2, #0
 8002a12:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <interruptsEnable+0x24>)
 8002a14:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a16:	b662      	cpsie	i
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000048c 	.word	0x2000048c

08002a20 <interruptsDisable>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002a20:	b672      	cpsid	i
 * @return  None.
 ****************************************************************************/
void interruptsDisable( void )
{
	__disable_irq();
	countIrqAllDisable++;
 8002a22:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <interruptsDisable+0x10>)
 8002a24:	8813      	ldrh	r3, [r2, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8013      	strh	r3, [r2, #0]
 8002a2e:	4770      	bx	lr
 8002a30:	2000048c 	.word	0x2000048c

08002a34 <interruptsSetState>:
	if (indexIRQ > MAX_IRQ)
 8002a34:	2811      	cmp	r0, #17
 8002a36:	d901      	bls.n	8002a3c <interruptsSetState+0x8>
		result = RET_INVALID_PARAMETER;
 8002a38:	2005      	movs	r0, #5
 8002a3a:	4770      	bx	lr
{
 8002a3c:	b538      	push	{r3, r4, r5, lr}
 8002a3e:	460d      	mov	r5, r1
 8002a40:	4604      	mov	r4, r0
	else if (indexIRQ == IRQ_ALL)
 8002a42:	d00e      	beq.n	8002a62 <interruptsSetState+0x2e>
	else if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[indexIRQ].IRQn))
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <interruptsSetState+0x6c>)
 8002a46:	f913 0020 	ldrsb.w	r0, [r3, r0, lsl #2]
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	db16      	blt.n	8002a7c <interruptsSetState+0x48>
		if (state == IRQ_ENABLE)
 8002a4e:	2901      	cmp	r1, #1
 8002a50:	d011      	beq.n	8002a76 <interruptsSetState+0x42>
			HAL_NVIC_DisableIRQ(interruptsInstanceMap[indexIRQ].IRQn);
 8002a52:	f000 fea5 	bl	80037a0 <HAL_NVIC_DisableIRQ>
		interruptsInstanceMap[indexIRQ].State = state;
 8002a56:	4812      	ldr	r0, [pc, #72]	; (8002aa0 <interruptsSetState+0x6c>)
 8002a58:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002a5c:	70c5      	strb	r5, [r0, #3]
	eError result = RET_OK;
 8002a5e:	2000      	movs	r0, #0
 8002a60:	bd38      	pop	{r3, r4, r5, pc}
		if (state == IRQ_ENABLE)
 8002a62:	2901      	cmp	r1, #1
 8002a64:	d003      	beq.n	8002a6e <interruptsSetState+0x3a>
			interruptsDisable();
 8002a66:	f7ff ffdb 	bl	8002a20 <interruptsDisable>
	eError result = RET_OK;
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	bd38      	pop	{r3, r4, r5, pc}
			interruptsEnable();
 8002a6e:	f7ff ffc3 	bl	80029f8 <interruptsEnable>
	eError result = RET_OK;
 8002a72:	2000      	movs	r0, #0
 8002a74:	bd38      	pop	{r3, r4, r5, pc}
			HAL_NVIC_EnableIRQ(interruptsInstanceMap[indexIRQ].IRQn);
 8002a76:	f000 fe87 	bl	8003788 <HAL_NVIC_EnableIRQ>
 8002a7a:	e7ec      	b.n	8002a56 <interruptsSetState+0x22>
	else if (interruptsInstanceMap[indexIRQ].IRQn == SysTick_IRQn)
 8002a7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a80:	d001      	beq.n	8002a86 <interruptsSetState+0x52>
		result = RET_INVALID_PARAMETER;
 8002a82:	2005      	movs	r0, #5
}
 8002a84:	bd38      	pop	{r3, r4, r5, pc}
		if (state == IRQ_ENABLE)
 8002a86:	2901      	cmp	r1, #1
 8002a88:	d007      	beq.n	8002a9a <interruptsSetState+0x66>
			HAL_SuspendTick();
 8002a8a:	f000 fe3b 	bl	8003704 <HAL_SuspendTick>
		interruptsInstanceMap[indexIRQ].State = state;
 8002a8e:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <interruptsSetState+0x6c>)
 8002a90:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002a94:	70c5      	strb	r5, [r0, #3]
	eError result = RET_OK;
 8002a96:	2000      	movs	r0, #0
 8002a98:	bd38      	pop	{r3, r4, r5, pc}
			HAL_ResumeTick();
 8002a9a:	f000 fe3b 	bl	8003714 <HAL_ResumeTick>
 8002a9e:	e7f6      	b.n	8002a8e <interruptsSetState+0x5a>
 8002aa0:	20000104 	.word	0x20000104

08002aa4 <initHregInterrupts>:
/***********************************************************************
 * @brief	API for init Interruptions.
 *
 **********************************************************************/
__weak eError initHregInterrupts( void )
{
 8002aa4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	interruptsInit();
 8002aa6:	f7ff ff43 	bl	8002930 <interruptsInit>

	return result;
}
 8002aaa:	2000      	movs	r0, #0
 8002aac:	bd08      	pop	{r3, pc}

08002aae <startHregInterrupts>:
/***********************************************************************
 * @brief	API for start Interruptions.
 *
 **********************************************************************/
__weak eError startHregInterrupts( void )
{
 8002aae:	b508      	push	{r3, lr}
	eError result = RET_OK;

	interruptsStart();
 8002ab0:	f7ff ff56 	bl	8002960 <interruptsStart>

	return result;
}
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	bd08      	pop	{r3, pc}

08002ab8 <stopHregInterrupts>:
/***********************************************************************
 * @brief	API for stop Interruptions.
 *
 **********************************************************************/
__weak eError stopHregInterrupts( void )
{
 8002ab8:	b508      	push	{r3, lr}
	eError result = RET_OK;

	interruptsStop();
 8002aba:	f7ff ff6b 	bl	8002994 <interruptsStop>

	return result;
}
 8002abe:	2000      	movs	r0, #0
 8002ac0:	bd08      	pop	{r3, pc}

08002ac2 <sleepHregInterrupts>:
/***********************************************************************
 * @brief	API for sleep Interruptions.
 *
 **********************************************************************/
__weak eError sleepHregInterrupts( void )
{
 8002ac2:	b508      	push	{r3, lr}
	eError result = RET_OK;

	interruptsSleep();
 8002ac4:	f7ff ff7a 	bl	80029bc <interruptsSleep>

	return result;
}
 8002ac8:	2000      	movs	r0, #0
 8002aca:	bd08      	pop	{r3, pc}

08002acc <wakeHregInterrupts>:
/***********************************************************************
 * @brief	API for wake Interruptions.
 *
 **********************************************************************/
__weak eError wakeHregInterrupts( void )
{
 8002acc:	b508      	push	{r3, lr}
	eError result = RET_OK;

	interruptsWake();
 8002ace:	f7ff ff7a 	bl	80029c6 <interruptsWake>

	return result;
}
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	bd08      	pop	{r3, pc}

08002ad6 <onReadHregInterruptsState>:
/***********************************************************************
 * @brief	On Read function for Interruptions enable.
 *
 **********************************************************************/
__weak eError onReadHregInterruptsState( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8002ad6:	b510      	push	{r4, lr}
 8002ad8:	4614      	mov	r4, r2
	eError result = RET_OK;

	*(uint8_t*)param1 = interruptsGetState(instance);
 8002ada:	f7ff ff79 	bl	80029d0 <interruptsGetState>
 8002ade:	7020      	strb	r0, [r4, #0]

	return result;
}
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	bd10      	pop	{r4, pc}

08002ae4 <onWriteHregInterruptsState>:
/***********************************************************************
 * @brief	On Write function for Interruptions enable.
 *
 **********************************************************************/
__weak eError onWriteHregInterruptsState( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8002ae4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = interruptsSetState(instance,param1);
 8002ae6:	b2d1      	uxtb	r1, r2
 8002ae8:	f7ff ffa4 	bl	8002a34 <interruptsSetState>

	return result;
}
 8002aec:	bd08      	pop	{r3, pc}

08002aee <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 8002aee:	4770      	bx	lr

08002af0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002af0:	e7fe      	b.n	8002af0 <HardFault_Handler>

08002af2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002af2:	e7fe      	b.n	8002af2 <MemManage_Handler>

08002af4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002af4:	e7fe      	b.n	8002af4 <BusFault_Handler>

08002af6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002af6:	e7fe      	b.n	8002af6 <UsageFault_Handler>

08002af8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002af8:	4770      	bx	lr

08002afa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002afa:	4770      	bx	lr

08002afc <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 8002afc:	b508      	push	{r3, lr}

	HAL_SYSTICK_IRQHandler();
 8002afe:	f000 fe83 	bl	8003808 <HAL_SYSTICK_IRQHandler>
 8002b02:	bd08      	pop	{r3, pc}

08002b04 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 8002b04:	4770      	bx	lr

08002b06 <EXTI0_IRQHandler>:
 * @brief  This function handles external line 0 and 1 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
 8002b06:	4770      	bx	lr

08002b08 <EXTI1_IRQHandler>:
 * @brief  This function handles external line 0 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void)
{
 8002b08:	4770      	bx	lr

08002b0a <EXTI9_5_IRQHandler>:
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
}

void EXTI9_5_IRQHandler(void)
{
 8002b0a:	b508      	push	{r3, lr}
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002b0c:	2020      	movs	r0, #32
 8002b0e:	f001 f89b 	bl	8003c48 <HAL_GPIO_EXTI_IRQHandler>
 8002b12:	bd08      	pop	{r3, pc}

08002b14 <USART1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USART1_IRQHandler(void)
{
 8002b14:	b508      	push	{r3, lr}
	HAL_UART1_Callback();
 8002b16:	f000 f824 	bl	8002b62 <HAL_UART1_Callback>
 8002b1a:	bd08      	pop	{r3, pc}

08002b1c <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */

void USART2_IRQHandler(void)
{
 8002b1c:	b508      	push	{r3, lr}
	HAL_UART2_Callback();
 8002b1e:	f000 f825 	bl	8002b6c <HAL_UART2_Callback>
 8002b22:	bd08      	pop	{r3, pc}

08002b24 <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C1_EV_IRQHandler(void)
{
 8002b24:	b508      	push	{r3, lr}
	HAL_I2C1_Callback();
 8002b26:	f000 f826 	bl	8002b76 <HAL_I2C1_Callback>
 8002b2a:	bd08      	pop	{r3, pc}

08002b2c <I2C2_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C2_EV_IRQHandler(void)
{
 8002b2c:	b508      	push	{r3, lr}
	HAL_I2C2_Callback();
 8002b2e:	f000 f823 	bl	8002b78 <HAL_I2C2_Callback>
 8002b32:	bd08      	pop	{r3, pc}

08002b34 <SPI1_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_IRQHandler(void)
{
 8002b34:	b508      	push	{r3, lr}
    HAL_SPI1_Callback();
 8002b36:	f000 f820 	bl	8002b7a <HAL_SPI1_Callback>
 8002b3a:	bd08      	pop	{r3, pc}

08002b3c <SPI2_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI2_IRQHandler(void)
{
 8002b3c:	b508      	push	{r3, lr}
    HAL_SPI2_Callback();
 8002b3e:	f000 f81d 	bl	8002b7c <HAL_SPI2_Callback>
 8002b42:	bd08      	pop	{r3, pc}

08002b44 <SPI3_IRQHandler>:
}

void SPI3_IRQHandler(void)
{
 8002b44:	b508      	push	{r3, lr}
    HAL_SPI3_Callback();
 8002b46:	f000 f81a 	bl	8002b7e <HAL_SPI3_Callback>
 8002b4a:	bd08      	pop	{r3, pc}

08002b4c <TIM2_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8002b4c:	4770      	bx	lr

08002b4e <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8002b4e:	4770      	bx	lr

08002b50 <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8002b50:	b508      	push	{r3, lr}
	HAL_IncTick();
 8002b52:	f000 fdb9 	bl	80036c8 <HAL_IncTick>

	SchedulerProcessesAutoEnable();
 8002b56:	f7fe f879 	bl	8000c4c <SchedulerProcessesAutoEnable>
#ifdef SW_TIMER_AVAILABLE
	SwTimerIrq();
 8002b5a:	f7ff fb07 	bl	800216c <SwTimerIrq>
 8002b5e:	bd08      	pop	{r3, pc}

08002b60 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b60:	4770      	bx	lr

08002b62 <HAL_UART1_Callback>:
  * @brief UART1 callback
  * @param None
  * @retval None
  */
void HAL_UART1_Callback(void)
{
 8002b62:	b508      	push	{r3, lr}
#ifdef IS_UART1
   uartDriverMainIRQHandler(UART_1);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f000 fbfb 	bl	8003360 <uartDriverMainIRQHandler>
 8002b6a:	bd08      	pop	{r3, pc}

08002b6c <HAL_UART2_Callback>:
  * @brief UART2 callback
  * @param None
  * @retval None
  */
void HAL_UART2_Callback(void)
{
 8002b6c:	b508      	push	{r3, lr}
#ifdef IS_UART2
	uartDriverMainIRQHandler(UART_2);
 8002b6e:	2001      	movs	r0, #1
 8002b70:	f000 fbf6 	bl	8003360 <uartDriverMainIRQHandler>
 8002b74:	bd08      	pop	{r3, pc}

08002b76 <HAL_I2C1_Callback>:
#endif
}


void HAL_I2C1_Callback(void)
{
 8002b76:	4770      	bx	lr

08002b78 <HAL_I2C2_Callback>:
	i2cDriverMainIRQHandler(I2C_1);
#endif
}

void HAL_I2C2_Callback(void)
{
 8002b78:	4770      	bx	lr

08002b7a <HAL_SPI1_Callback>:
	i2cDriverMainIRQHandler(I2C_2);
#endif
}

void HAL_SPI1_Callback(void)
{
 8002b7a:	4770      	bx	lr

08002b7c <HAL_SPI2_Callback>:
    spiDriverMainIRQHandler(SPI_1);
#endif
}

void HAL_SPI2_Callback(void)
{
 8002b7c:	4770      	bx	lr

08002b7e <HAL_SPI3_Callback>:
    spiDriverMainIRQHandler(SPI_2);
#endif
}

void HAL_SPI3_Callback(void)
{
 8002b7e:	4770      	bx	lr

08002b80 <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b80:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b84:	4905      	ldr	r1, [pc, #20]	; (8002b9c <NVIC_SystemReset+0x1c>)
 8002b86:	68ca      	ldr	r2, [r1, #12]
 8002b88:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b8c:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <NVIC_SystemReset+0x20>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60cb      	str	r3, [r1, #12]
 8002b92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8002b96:	bf00      	nop
 8002b98:	e7fd      	b.n	8002b96 <NVIC_SystemReset+0x16>
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00
 8002ba0:	05fa0004 	.word	0x05fa0004

08002ba4 <storePowerUpReason>:
 *
 ****************************************************************************/
static void storePowerUpReason( void )
{
	/* Check if the StandBy flag is set */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8002ba4:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <storePowerUpReason+0xa8>)
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002bac:	d126      	bne.n	8002bfc <storePowerUpReason+0x58>

		powerUpReason = SYSTEM_RESET_POWER_UP;
	}
	else
	{
		if ( __HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET )
 8002bae:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <storePowerUpReason+0xac>)
 8002bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8002bb8:	d12f      	bne.n	8002c1a <storePowerUpReason+0x76>
		{
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
		}
		else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <storePowerUpReason+0xac>)
 8002bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc0:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8002bc4:	d12d      	bne.n	8002c22 <storePowerUpReason+0x7e>
		{
			powerUpReason = SYSTEM_RESET_WATCHDOG;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET )
 8002bc6:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <storePowerUpReason+0xac>)
 8002bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bcc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002bd0:	d12b      	bne.n	8002c2a <storePowerUpReason+0x86>
		{
			powerUpReason = SYSTEM_RESET_SOFTWARE;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET )
 8002bd2:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <storePowerUpReason+0xac>)
 8002bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd8:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002bdc:	d129      	bne.n	8002c32 <storePowerUpReason+0x8e>
		{
			powerUpReason = SYSTEM_RESET_POWER_UP;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET )
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <storePowerUpReason+0xac>)
 8002be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002be8:	d127      	bne.n	8002c3a <storePowerUpReason+0x96>
		{
			powerUpReason = SYSTEM_BOR_RESET;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET )
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <storePowerUpReason+0xac>)
 8002bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	db26      	blt.n	8002c42 <storePowerUpReason+0x9e>
		{
			powerUpReason = SYSTEM_LOW_POWER_RESET;
		}
		else
		{
			powerUpReason = SYSTEM_FIRST_POWER_UP;
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <storePowerUpReason+0xb0>)
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e006      	b.n	8002c0a <storePowerUpReason+0x66>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8002bfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <storePowerUpReason+0xa8>)
 8002c02:	619a      	str	r2, [r3, #24]
		powerUpReason = SYSTEM_RESET_POWER_UP;
 8002c04:	2201      	movs	r2, #1
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <storePowerUpReason+0xb0>)
 8002c08:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
 8002c0a:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <storePowerUpReason+0xac>)
 8002c0c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8002c10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002c18:	4770      	bx	lr
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
 8002c1a:	2207      	movs	r2, #7
 8002c1c:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <storePowerUpReason+0xb0>)
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e7f3      	b.n	8002c0a <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_WATCHDOG;
 8002c22:	2202      	movs	r2, #2
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <storePowerUpReason+0xb0>)
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e7ef      	b.n	8002c0a <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_SOFTWARE;
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <storePowerUpReason+0xb0>)
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e7eb      	b.n	8002c0a <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_POWER_UP;
 8002c32:	2201      	movs	r2, #1
 8002c34:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <storePowerUpReason+0xb0>)
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e7e7      	b.n	8002c0a <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_BOR_RESET;
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <storePowerUpReason+0xb0>)
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e7e3      	b.n	8002c0a <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_LOW_POWER_RESET;
 8002c42:	2206      	movs	r2, #6
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <storePowerUpReason+0xb0>)
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e7df      	b.n	8002c0a <storePowerUpReason+0x66>
 8002c4a:	bf00      	nop
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	40021000 	.word	0x40021000
 8002c54:	2000048e 	.word	0x2000048e

08002c58 <watchdogInit>:
	{
		result = WWDGInit();
	}
#endif
	return result;
}
 8002c58:	2000      	movs	r0, #0
 8002c5a:	4770      	bx	lr

08002c5c <SystemClock_Config>:
 *
 * @return  None.
 *
 ****************************************************************************/
static eError SystemClock_Config(void)
{
 8002c5c:	b500      	push	{lr}
 8002c5e:	b0b3      	sub	sp, #204	; 0xcc
	RCC_PeriphCLKInitTypeDef PeriphClkInit;
#endif

	do
	{
		RCC_OscInitStruct.OscillatorType = SystemMap.OscillatorType;
 8002c60:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <SystemClock_Config+0xc8>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	9221      	str	r2, [sp, #132]	; 0x84
		RCC_OscInitStruct.HSEState	= SystemMap.HSEState;
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	9222      	str	r2, [sp, #136]	; 0x88
		RCC_OscInitStruct.HSICalibrationValue = SystemMap.HSICalibrationValue;
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	9225      	str	r2, [sp, #148]	; 0x94
		RCC_OscInitStruct.HSIState 	= SystemMap.HSIState;
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	9224      	str	r2, [sp, #144]	; 0x90
		RCC_OscInitStruct.LSEState = SystemMap.LSEState;
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	9223      	str	r2, [sp, #140]	; 0x8c
		RCC_OscInitStruct.LSIState = SystemMap.LSIState;
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	9226      	str	r2, [sp, #152]	; 0x98
		RCC_OscInitStruct.MSIState = SystemMap.MSIState;
 8002c7a:	699a      	ldr	r2, [r3, #24]
 8002c7c:	9227      	str	r2, [sp, #156]	; 0x9c
		RCC_OscInitStruct.MSICalibrationValue = SystemMap.MSICalibrationValue;
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	9228      	str	r2, [sp, #160]	; 0xa0
		RCC_OscInitStruct.MSIClockRange= SystemMap.MSIClockRange;
 8002c82:	6a1a      	ldr	r2, [r3, #32]
 8002c84:	9229      	str	r2, [sp, #164]	; 0xa4

		RCC_OscInitStruct.PLL.PLLState 	= SystemMap.PLLState;
 8002c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c88:	922b      	str	r2, [sp, #172]	; 0xac
		RCC_OscInitStruct.PLL.PLLSource = SystemMap.PLLSource;
 8002c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c8c:	922c      	str	r2, [sp, #176]	; 0xb0
		RCC_OscInitStruct.PLL.PLLM 		= SystemMap.PLLM;
 8002c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c90:	922d      	str	r2, [sp, #180]	; 0xb4
		RCC_OscInitStruct.PLL.PLLN		= SystemMap.PLLN;
 8002c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c94:	922e      	str	r2, [sp, #184]	; 0xb8
		RCC_OscInitStruct.PLL.PLLP		= SystemMap.PLLP;
 8002c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c98:	922f      	str	r2, [sp, #188]	; 0xbc
		RCC_OscInitStruct.PLL.PLLQ		= SystemMap.PLLQ;
 8002c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c9c:	9230      	str	r2, [sp, #192]	; 0xc0
		RCC_OscInitStruct.PLL.PLLR		= SystemMap.PLLR;
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	9331      	str	r3, [sp, #196]	; 0xc4
	#if (INDEPENDENT_WATCHDOG == 1)//Assure that LSI is configured ON (needed by IWDG)
		RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_LSI;
		RCC_OscInitStruct.LSIState |= RCC_LSI_ON;
	#endif

		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ca2:	a821      	add	r0, sp, #132	; 0x84
 8002ca4:	f001 f918 	bl	8003ed8 <HAL_RCC_OscConfig>
 8002ca8:	b118      	cbz	r0, 8002cb2 <SystemClock_Config+0x56>
		{
			result = RET_FAIL;
 8002caa:	2001      	movs	r0, #1
		__HAL_RCC_SYSCFG_CLK_ENABLE();
	} while (0);

	return result;

}
 8002cac:	b033      	add	sp, #204	; 0xcc
 8002cae:	f85d fb04 	ldr.w	pc, [sp], #4
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002cb2:	230f      	movs	r3, #15
 8002cb4:	931c      	str	r3, [sp, #112]	; 0x70
		RCC_ClkInitStruct.SYSCLKSource 	 = SystemMap.SYSCLKSource;
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <SystemClock_Config+0xc8>)
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cba:	921d      	str	r2, [sp, #116]	; 0x74
		RCC_ClkInitStruct.AHBCLKDivider  = SystemMap.AHBCLKDivider;
 8002cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cbe:	921e      	str	r2, [sp, #120]	; 0x78
		RCC_ClkInitStruct.APB1CLKDivider = SystemMap.APB1CLKDivider;
 8002cc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cc2:	921f      	str	r2, [sp, #124]	; 0x7c
		RCC_ClkInitStruct.APB2CLKDivider = SystemMap.APB2CLKDivider;
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	9320      	str	r3, [sp, #128]	; 0x80
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002cc8:	2104      	movs	r1, #4
 8002cca:	a81c      	add	r0, sp, #112	; 0x70
 8002ccc:	f001 fbf0 	bl	80044b0 <HAL_RCC_ClockConfig>
 8002cd0:	b108      	cbz	r0, 8002cd6 <SystemClock_Config+0x7a>
			result = RET_FAIL;
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	e7ea      	b.n	8002cac <SystemClock_Config+0x50>
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002cd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002cda:	f000 ffed 	bl	8003cb8 <HAL_PWREx_ControlVoltageScaling>
 8002cde:	b108      	cbz	r0, 8002ce4 <SystemClock_Config+0x88>
			result = RET_FAIL;
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	e7e3      	b.n	8002cac <SystemClock_Config+0x50>
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ce8:	9302      	str	r3, [sp, #8]
		PeriphClkInit.RTCClockSelection = SystemMap.RTCClockSelection;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <SystemClock_Config+0xc8>)
 8002cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cee:	931b      	str	r3, [sp, #108]	; 0x6c
		HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002cf0:	a802      	add	r0, sp, #8
 8002cf2:	f001 fd69 	bl	80047c8 <HAL_RCCEx_PeriphCLKConfig>
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002cf6:	f001 fc83 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <SystemClock_Config+0xcc>)
 8002cfc:	fba3 3000 	umull	r3, r0, r3, r0
 8002d00:	0980      	lsrs	r0, r0, #6
 8002d02:	f000 fd5b 	bl	80037bc <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002d06:	2004      	movs	r0, #4
 8002d08:	f000 fd6e 	bl	80037e8 <HAL_SYSTICK_CLKSourceConfig>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <SystemClock_Config+0xd0>)
 8002d0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	661a      	str	r2, [r3, #96]	; 0x60
 8002d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	9b01      	ldr	r3, [sp, #4]
	eError result = RET_OK;
 8002d20:	2000      	movs	r0, #0
 8002d22:	e7c3      	b.n	8002cac <SystemClock_Config+0x50>
 8002d24:	08007338 	.word	0x08007338
 8002d28:	10624dd3 	.word	0x10624dd3
 8002d2c:	40021000 	.word	0x40021000

08002d30 <RTCSetInitDateTime>:
{
 8002d30:	b510      	push	{r4, lr}
 8002d32:	b086      	sub	sp, #24
	sTime.Hours = 0x0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	f88d 3004 	strb.w	r3, [sp, #4]
	sTime.Minutes = 0x0;
 8002d3a:	f88d 3005 	strb.w	r3, [sp, #5]
	sTime.Seconds = 0x0;
 8002d3e:	f88d 3006 	strb.w	r3, [sp, #6]
	sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 8002d42:	2240      	movs	r2, #64	; 0x40
 8002d44:	f88d 2007 	strb.w	r2, [sp, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d48:	9304      	str	r3, [sp, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d4a:	9305      	str	r3, [sp, #20]
	if (RTCHandler.Instance != NULL) //RTC initialized
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <RTCSetInitDateTime+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	b1f3      	cbz	r3, 8002d90 <RTCSetInitDateTime+0x60>
		if (HAL_RTC_SetTime(&RTCHandler, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002d52:	2201      	movs	r2, #1
 8002d54:	a901      	add	r1, sp, #4
 8002d56:	480f      	ldr	r0, [pc, #60]	; (8002d94 <RTCSetInitDateTime+0x64>)
 8002d58:	f001 ffaf 	bl	8004cba <HAL_RTC_SetTime>
 8002d5c:	b920      	cbnz	r0, 8002d68 <RTCSetInitDateTime+0x38>
	eError result = RET_OK;
 8002d5e:	2400      	movs	r4, #0
		if (result == RET_OK)
 8002d60:	b124      	cbz	r4, 8002d6c <RTCSetInitDateTime+0x3c>
}
 8002d62:	4620      	mov	r0, r4
 8002d64:	b006      	add	sp, #24
 8002d66:	bd10      	pop	{r4, pc}
			result = RET_FAIL;
 8002d68:	2401      	movs	r4, #1
 8002d6a:	e7f9      	b.n	8002d60 <RTCSetInitDateTime+0x30>
			sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f88d 2000 	strb.w	r2, [sp]
			sDate.Month = RTC_MONTH_JANUARY;
 8002d72:	f88d 2001 	strb.w	r2, [sp, #1]
			sDate.Date = 0x1;
 8002d76:	f88d 2002 	strb.w	r2, [sp, #2]
			sDate.Year = 0x0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f88d 3003 	strb.w	r3, [sp, #3]
			if (HAL_RTC_SetDate(&RTCHandler, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002d80:	4669      	mov	r1, sp
 8002d82:	4804      	ldr	r0, [pc, #16]	; (8002d94 <RTCSetInitDateTime+0x64>)
 8002d84:	f002 f821 	bl	8004dca <HAL_RTC_SetDate>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d0ea      	beq.n	8002d62 <RTCSetInitDateTime+0x32>
				result = RET_FAIL;
 8002d8c:	2401      	movs	r4, #1
 8002d8e:	e7e8      	b.n	8002d62 <RTCSetInitDateTime+0x32>
	eError result = RET_OK;
 8002d90:	2400      	movs	r4, #0
 8002d92:	e7e6      	b.n	8002d62 <RTCSetInitDateTime+0x32>
 8002d94:	20000aa0 	.word	0x20000aa0

08002d98 <RTCInit>:
{
 8002d98:	b500      	push	{lr}
 8002d9a:	b083      	sub	sp, #12
	__HAL_RCC_PWR_CLK_ENABLE();
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <RTCInit+0x50>)
 8002d9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002da0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002da4:	659a      	str	r2, [r3, #88]	; 0x58
 8002da6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002da8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002dac:	9201      	str	r2, [sp, #4]
 8002dae:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_RTC_ENABLE();
 8002db0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002db4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	__HAL_RTC_RESET_HANDLE_STATE(&RTCHandler);
 8002dbc:	480b      	ldr	r0, [pc, #44]	; (8002dec <RTCInit+0x54>)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	RTCHandler.Instance = RTC;
 8002dc4:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <RTCInit+0x58>)
 8002dc6:	6002      	str	r2, [r0, #0]
	RTCHandler.Init.HourFormat = RTC_HOURFORMAT_24;
 8002dc8:	6043      	str	r3, [r0, #4]
	RTCHandler.Init.AsynchPrediv = 127;
 8002dca:	227f      	movs	r2, #127	; 0x7f
 8002dcc:	6082      	str	r2, [r0, #8]
	RTCHandler.Init.SynchPrediv = 0xF9;//aux;
 8002dce:	22f9      	movs	r2, #249	; 0xf9
 8002dd0:	60c2      	str	r2, [r0, #12]
	RTCHandler.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dd2:	6103      	str	r3, [r0, #16]
	RTCHandler.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dd4:	6183      	str	r3, [r0, #24]
	RTCHandler.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dd6:	61c3      	str	r3, [r0, #28]
	HAL_RTC_Init(&RTCHandler);
 8002dd8:	f001 fefa 	bl	8004bd0 <HAL_RTC_Init>
	RTCSetInitDateTime();
 8002ddc:	f7ff ffa8 	bl	8002d30 <RTCSetInitDateTime>
}
 8002de0:	b003      	add	sp, #12
 8002de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	20000aa0 	.word	0x20000aa0
 8002df0:	40002800 	.word	0x40002800

08002df4 <stm32L4Init>:
{
 8002df4:	b508      	push	{r3, lr}
	storePowerUpReason();
 8002df6:	f7ff fed5 	bl	8002ba4 <storePowerUpReason>
	result = SystemClock_Config();
 8002dfa:	f7ff ff2f 	bl	8002c5c <SystemClock_Config>
	if (result == RET_OK)
 8002dfe:	4603      	mov	r3, r0
 8002e00:	b108      	cbz	r0, 8002e06 <stm32L4Init+0x12>
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	bd08      	pop	{r3, pc}
			RTCInit();
 8002e06:	f7ff ffc7 	bl	8002d98 <RTCInit>
			result = watchdogInit();
 8002e0a:	f7ff ff25 	bl	8002c58 <watchdogInit>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	e7f7      	b.n	8002e02 <stm32L4Init+0xe>

08002e12 <stm32L4Start>:
}
 8002e12:	2000      	movs	r0, #0
 8002e14:	4770      	bx	lr

08002e16 <stm32L4Wake>:
}
 8002e16:	2000      	movs	r0, #0
 8002e18:	4770      	bx	lr
	...

08002e1c <stm32L4SetPowerMode>:
	if (IS_POWER_MODE(powerMode))
 8002e1c:	2803      	cmp	r0, #3
 8002e1e:	d81e      	bhi.n	8002e5e <stm32L4SetPowerMode+0x42>
{
 8002e20:	b500      	push	{lr}
 8002e22:	b083      	sub	sp, #12
		switch ( powerMode )
 8002e24:	2801      	cmp	r0, #1
 8002e26:	d005      	beq.n	8002e34 <stm32L4SetPowerMode+0x18>
 8002e28:	2803      	cmp	r0, #3
 8002e2a:	d016      	beq.n	8002e5a <stm32L4SetPowerMode+0x3e>
}
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	b003      	add	sp, #12
 8002e30:	f85d fb04 	ldr.w	pc, [sp], #4
			__PWR_CLK_ENABLE();
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <stm32L4SetPowerMode+0x48>)
 8002e36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e3c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	9301      	str	r3, [sp, #4]
 8002e46:	9b01      	ldr	r3, [sp, #4]
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002e48:	221f      	movs	r2, #31
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <stm32L4SetPowerMode+0x4c>)
 8002e4c:	619a      	str	r2, [r3, #24]
			HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002e4e:	2001      	movs	r0, #1
 8002e50:	f000 ff08 	bl	8003c64 <HAL_PWR_EnableWakeUpPin>
			HAL_PWR_EnterSTANDBYMode();
 8002e54:	f000 ff16 	bl	8003c84 <HAL_PWR_EnterSTANDBYMode>
 8002e58:	e7fe      	b.n	8002e58 <stm32L4SetPowerMode+0x3c>
			NVIC_SystemReset();
 8002e5a:	f7ff fe91 	bl	8002b80 <NVIC_SystemReset>
}
 8002e5e:	2000      	movs	r0, #0
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40007000 	.word	0x40007000

08002e6c <stm32L4Stop>:
{
 8002e6c:	b508      	push	{r3, lr}
	result = stm32L4SetPowerMode(SYSTEM_EXECUTE_STANDBY);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7ff ffd4 	bl	8002e1c <stm32L4SetPowerMode>
}
 8002e74:	bd08      	pop	{r3, pc}

08002e76 <stm32L4Sleep>:
{
 8002e76:	b508      	push	{r3, lr}
	result = stm32L4SetPowerMode(SYSTEM_EXECUTE_SLEEP);
 8002e78:	2002      	movs	r0, #2
 8002e7a:	f7ff ffcf 	bl	8002e1c <stm32L4SetPowerMode>
}
 8002e7e:	bd08      	pop	{r3, pc}

08002e80 <systemGetCLkFreq>:
 * @brief   Get the System CLK Frequency
 * @param   ClockFrequency.
 * @return  eError.
 ****************************************************************************/
eError systemGetCLkFreq(uint32_t *ClockFrequency)
{
 8002e80:	b510      	push	{r4, lr}
 8002e82:	4604      	mov	r4, r0
    eError result = RET_OK;

    *ClockFrequency = HAL_RCC_GetHCLKFreq();
 8002e84:	f001 fbbc 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8002e88:	6020      	str	r0, [r4, #0]

    return result;
}
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	bd10      	pop	{r4, pc}

08002e8e <systemPreConfiguration>:
 *    then it will jump to execute the interrupt handler located in the Flash
 * @param	None.
 * @return  None.
 ****************************************************************************/
void systemPreConfiguration( void )
{
 8002e8e:	4770      	bx	lr

08002e90 <initHregSystem>:
/***********************************************************************
 * @brief	API for init System.
 *
 **********************************************************************/
__weak eError initHregSystem( void )
{
 8002e90:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = stm32L4Init();
 8002e92:	f7ff ffaf 	bl	8002df4 <stm32L4Init>

	return result;
}
 8002e96:	bd08      	pop	{r3, pc}

08002e98 <startHregSystem>:
/***********************************************************************
 * @brief	API for start System.
 *
 **********************************************************************/
__weak eError startHregSystem( void )
{
 8002e98:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = stm32L4Start();
 8002e9a:	f7ff ffba 	bl	8002e12 <stm32L4Start>

	return result;
}
 8002e9e:	bd08      	pop	{r3, pc}

08002ea0 <stopHregSystem>:
/***********************************************************************
 * @brief	API for stop System.
 *
 **********************************************************************/
__weak eError stopHregSystem( void )
{
 8002ea0:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = stm32L4Stop();
 8002ea2:	f7ff ffe3 	bl	8002e6c <stm32L4Stop>

	return result;
}
 8002ea6:	bd08      	pop	{r3, pc}

08002ea8 <sleepHregSystem>:
/***********************************************************************
 * @brief	API for sleep System.
 *
 **********************************************************************/
__weak eError sleepHregSystem( void )
{
 8002ea8:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = stm32L4Sleep();
 8002eaa:	f7ff ffe4 	bl	8002e76 <stm32L4Sleep>

	return result;
}
 8002eae:	bd08      	pop	{r3, pc}

08002eb0 <wakeHregSystem>:
/***********************************************************************
 * @brief	API for wake System.
 *
 **********************************************************************/
__weak eError wakeHregSystem( void )
{
 8002eb0:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result =  stm32L4Wake();
 8002eb2:	f7ff ffb0 	bl	8002e16 <stm32L4Wake>

	return result;
}
 8002eb6:	bd08      	pop	{r3, pc}

08002eb8 <onWriteHregSystemPowerMode>:
/***********************************************************************
 * @brief	On Write function for System powerMode.
 *
 **********************************************************************/
__weak eError onWriteHregSystemPowerMode( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8002eb8:	b508      	push	{r3, lr}
	eError result = RET_OK;

	result = stm32L4SetPowerMode(param1);
 8002eba:	b2d0      	uxtb	r0, r2
 8002ebc:	f7ff ffae 	bl	8002e1c <stm32L4SetPowerMode>

	return result;
}
 8002ec0:	bd08      	pop	{r3, pc}

08002ec2 <onReadHregSystemDate>:
	eError result = RET_OK;
#ifdef MON_RTC_ENABLED
	result = RTCGetDate(param1);
#endif
	return result;
}
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	4770      	bx	lr

08002ec6 <onWriteHregSystemDate>:
	eError result = RET_OK;
#ifdef MON_RTC_ENABLED
	result = RTCSetDate(param1);
#endif
	return result;
}
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	4770      	bx	lr

08002eca <onReadHregSystemTime>:
	eError result = RET_OK;
#ifdef MON_RTC_ENABLED
	result = RTCGetTime(param1);
#endif
	return result;
}
 8002eca:	2000      	movs	r0, #0
 8002ecc:	4770      	bx	lr

08002ece <onWriteHregSystemTime>:
	eError result = RET_OK;
#ifdef MON_RTC_ENABLED
	result = RTCSetTime(param1);
#endif
	return result;
}
 8002ece:	2000      	movs	r0, #0
 8002ed0:	4770      	bx	lr
	...

08002ed4 <spiRestartSlaveMode>:
/****************************************************************************
 *    PUBLIC FUNCTIONS
 ****************************************************************************/

static void spiRestartSlaveMode(SPI_HandleTypeDef *hspi)
{
 8002ed4:	b508      	push	{r3, lr}
    if (hspi->Instance == SPI3){
        i = SPI_3;
    }
#endif

    if(hspi->Init.Mode == SPI_MODE_SLAVE) {
 8002ed6:	6843      	ldr	r3, [r0, #4]
 8002ed8:	b103      	cbz	r3, 8002edc <spiRestartSlaveMode+0x8>
 8002eda:	bd08      	pop	{r3, pc}
        HAL_SPI_Receive_IT(hspi, halRxSlaveBuffer[i], SPIInstanceMap[i].rxBufferSize);
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <spiRestartSlaveMode+0x18>)
 8002ede:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ee2:	4903      	ldr	r1, [pc, #12]	; (8002ef0 <spiRestartSlaveMode+0x1c>)
 8002ee4:	f002 f9ca 	bl	800527c <HAL_SPI_Receive_IT>
    }
}
 8002ee8:	e7f7      	b.n	8002eda <spiRestartSlaveMode+0x6>
 8002eea:	bf00      	nop
 8002eec:	0800738c 	.word	0x0800738c
 8002ef0:	20000ac4 	.word	0x20000ac4

08002ef4 <spiDriverReadITMasterMode>:
 * @param  rdBuffer Buffer where we want to get the data written to
 * @param  rdSize Amount of bytes to read
 * @return eError RET_OK if read process started successfully, RET_FAIL otherwise
 ****************************************************************************/
static eError spiDriverReadITMasterMode(tSpi spiDevice, uint8_t* rdBuffer , uint32_t rdSize)
{
 8002ef4:	b510      	push	{r4, lr}
    eError result = RET_OK;
    SPI_HandleTypeDef* hspi;
    tSpiPort spiPort;

    spiPort = SPIPeripheralMap[spiDevice].port;
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <spiDriverReadITMasterMode+0x1c>)
 8002ef8:	5618      	ldrsb	r0, [r3, r0]
    hspi     = &ST_SpiHandlers[spiPort];

    if(HAL_SPI_Receive_IT(hspi, rdBuffer, rdSize) != HAL_OK){
 8002efa:	b292      	uxth	r2, r2
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <spiDriverReadITMasterMode+0x20>)
 8002efe:	2464      	movs	r4, #100	; 0x64
 8002f00:	fb04 3000 	mla	r0, r4, r0, r3
 8002f04:	f002 f9ba 	bl	800527c <HAL_SPI_Receive_IT>
 8002f08:	b100      	cbz	r0, 8002f0c <spiDriverReadITMasterMode+0x18>
        result = RET_FAIL;
 8002f0a:	2001      	movs	r0, #1
    }

    return result;
}
 8002f0c:	bd10      	pop	{r4, pc}
 8002f0e:	bf00      	nop
 8002f10:	0800738c 	.word	0x0800738c
 8002f14:	20000ac4 	.word	0x20000ac4

08002f18 <spiDriverWriteIT>:
{
 8002f18:	b570      	push	{r4, r5, r6, lr}
    spiPort = SPIPeripheralMap[spiDevice].port;
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <spiDriverWriteIT+0x38>)
 8002f1c:	561c      	ldrsb	r4, [r3, r0]
    hspi     = &ST_SpiHandlers[spiPort];
 8002f1e:	480d      	ldr	r0, [pc, #52]	; (8002f54 <spiDriverWriteIT+0x3c>)
 8002f20:	2364      	movs	r3, #100	; 0x64
 8002f22:	fb03 0004 	mla	r0, r3, r4, r0
    if(hspi->Init.Mode == SPI_MODE_SLAVE){
 8002f26:	6843      	ldr	r3, [r0, #4]
 8002f28:	b95b      	cbnz	r3, 8002f42 <spiDriverWriteIT+0x2a>
        hspi->State = HAL_SPI_STATE_READY;
 8002f2a:	4d0a      	ldr	r5, [pc, #40]	; (8002f54 <spiDriverWriteIT+0x3c>)
 8002f2c:	2364      	movs	r3, #100	; 0x64
 8002f2e:	fb03 f304 	mul.w	r3, r3, r4
 8002f32:	2601      	movs	r6, #1
 8002f34:	f880 605d 	strb.w	r6, [r0, #93]	; 0x5d
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR)); //Do NOT READ DATA!
 8002f38:	58ec      	ldr	r4, [r5, r3]
 8002f3a:	6863      	ldr	r3, [r4, #4]
 8002f3c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002f40:	6063      	str	r3, [r4, #4]
    if(HAL_SPI_Transmit_IT(hspi, buffer, size) != HAL_OK){
 8002f42:	b292      	uxth	r2, r2
 8002f44:	f002 f8ca 	bl	80050dc <HAL_SPI_Transmit_IT>
 8002f48:	b100      	cbz	r0, 8002f4c <spiDriverWriteIT+0x34>
        result = RET_BUSY;
 8002f4a:	2009      	movs	r0, #9
}
 8002f4c:	bd70      	pop	{r4, r5, r6, pc}
 8002f4e:	bf00      	nop
 8002f50:	0800738c 	.word	0x0800738c
 8002f54:	20000ac4 	.word	0x20000ac4

08002f58 <spiDriverReadITSlaveMode>:
{
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	460f      	mov	r7, r1
 8002f5c:	4616      	mov	r6, r2
    spiPort = SPIPeripheralMap[spiDevice].port;
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <spiDriverReadITSlaveMode+0x38>)
 8002f60:	561b      	ldrsb	r3, [r3, r0]
    if(GetQueuePendingBytes(&spiCBuffers[spiPort].rxBuffer) < rdSize ){
 8002f62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002f66:	00dd      	lsls	r5, r3, #3
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <spiDriverReadITSlaveMode+0x3c>)
 8002f6a:	441d      	add	r5, r3
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	f7fe fd23 	bl	80019b8 <GetQueuePendingBytes>
 8002f72:	42b0      	cmp	r0, r6
 8002f74:	d30a      	bcc.n	8002f8c <spiDriverReadITSlaveMode+0x34>
 8002f76:	2400      	movs	r4, #0
 8002f78:	e004      	b.n	8002f84 <spiDriverReadITSlaveMode+0x2c>
            byte = GetQueueByte(&spiCBuffers[spiPort].rxBuffer);
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f7fe fd06 	bl	800198c <GetQueueByte>
            rdBuffer[i] = byte;
 8002f80:	5538      	strb	r0, [r7, r4]
        for(i=0; i<rdSize; i++){
 8002f82:	3401      	adds	r4, #1
 8002f84:	42b4      	cmp	r4, r6
 8002f86:	d3f8      	bcc.n	8002f7a <spiDriverReadITSlaveMode+0x22>
        result = RET_OK;
 8002f88:	2000      	movs	r0, #0
 8002f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result =  RET_FAIL;
 8002f8c:	2001      	movs	r0, #1
}
 8002f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f90:	0800738c 	.word	0x0800738c
 8002f94:	20000ac4 	.word	0x20000ac4

08002f98 <HAL_SPI_TxCpltCallback>:
void  HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi){
 8002f98:	b508      	push	{r3, lr}
    spiRestartSlaveMode(hspi);
 8002f9a:	f7ff ff9b 	bl	8002ed4 <spiRestartSlaveMode>
 8002f9e:	bd08      	pop	{r3, pc}

08002fa0 <HAL_SPI_ErrorCallback>:
void  HAL_SPI_ErrorCallback (SPI_HandleTypeDef *hspi){
 8002fa0:	b508      	push	{r3, lr}
    spiRestartSlaveMode(hspi);
 8002fa2:	f7ff ff97 	bl	8002ed4 <spiRestartSlaveMode>
 8002fa6:	bd08      	pop	{r3, pc}

08002fa8 <spiInit>:
}
 8002fa8:	2000      	movs	r0, #0
 8002faa:	4770      	bx	lr

08002fac <spiStop>:
}
 8002fac:	2000      	movs	r0, #0
 8002fae:	4770      	bx	lr

08002fb0 <spiStart>:
}
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	4770      	bx	lr

08002fb4 <spiSleep>:
}
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	4770      	bx	lr

08002fb8 <spiWake>:
}
 8002fb8:	2000      	movs	r0, #0
 8002fba:	4770      	bx	lr

08002fbc <spiDriverStatus>:
{
 8002fbc:	b508      	push	{r3, lr}
    spiPort = SPIPeripheralMap[spiDevice].port;
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <spiDriverStatus+0x38>)
 8002fc0:	561a      	ldrsb	r2, [r3, r0]
    switch (HAL_SPI_GetState(hspi)){
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <spiDriverStatus+0x3c>)
 8002fc4:	2064      	movs	r0, #100	; 0x64
 8002fc6:	fb00 3002 	mla	r0, r0, r2, r3
 8002fca:	f002 fb3b 	bl	8005644 <HAL_SPI_GetState>
 8002fce:	2807      	cmp	r0, #7
 8002fd0:	d80b      	bhi.n	8002fea <spiDriverStatus+0x2e>
 8002fd2:	e8df f000 	tbb	[pc, r0]
 8002fd6:	0c04      	.short	0x0c04
 8002fd8:	06060606 	.word	0x06060606
 8002fdc:	0808      	.short	0x0808
            return RET_NOT_INITIALIZED;
 8002fde:	2002      	movs	r0, #2
 8002fe0:	bd08      	pop	{r3, pc}
            return RET_BUSY;
 8002fe2:	2009      	movs	r0, #9
 8002fe4:	bd08      	pop	{r3, pc}
            return RET_FAIL;
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	bd08      	pop	{r3, pc}
    return RET_FAIL; //Default case, we don't know what happened
 8002fea:	2001      	movs	r0, #1
 8002fec:	bd08      	pop	{r3, pc}
            return RET_OK;
 8002fee:	2000      	movs	r0, #0
}
 8002ff0:	bd08      	pop	{r3, pc}
 8002ff2:	bf00      	nop
 8002ff4:	0800738c 	.word	0x0800738c
 8002ff8:	20000ac4 	.word	0x20000ac4

08002ffc <spiDriverWrite>:
{
 8002ffc:	b538      	push	{r3, r4, r5, lr}
    spiPort = SPIPeripheralMap[spiDevice].port;
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <spiDriverWrite+0x74>)
 8003000:	561c      	ldrsb	r4, [r3, r0]
    bufferSize = spiBufferSize[spiPort];
 8003002:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <spiDriverWrite+0x78>)
 8003004:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if(bufferSize == 0){
 8003008:	b90d      	cbnz	r5, 800300e <spiDriverWrite+0x12>
        return RET_INVALID_PARAMETER;
 800300a:	2005      	movs	r0, #5
 800300c:	bd38      	pop	{r3, r4, r5, pc}
    if(bufferSize > SPIInstanceMap[spiPort].txBufferSize){
 800300e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003012:	011a      	lsls	r2, r3, #4
 8003014:	4b18      	ldr	r3, [pc, #96]	; (8003078 <spiDriverWrite+0x7c>)
 8003016:	4413      	add	r3, r2
 8003018:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800301a:	429d      	cmp	r5, r3
 800301c:	d901      	bls.n	8003022 <spiDriverWrite+0x26>
        return RET_INVALID_PARAMETER;
 800301e:	2005      	movs	r0, #5
 8003020:	bd38      	pop	{r3, r4, r5, pc}
    	if ( SPIInstanceMap[spiPort].dataSize == SPI_DATASIZE_8BIT){
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <spiDriverWrite+0x7c>)
 8003024:	4413      	add	r3, r2
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800302c:	d004      	beq.n	8003038 <spiDriverWrite+0x3c>
    	else if(SPIInstanceMap[spiPort].dataSize == SPI_DATASIZE_16BIT)
 800302e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003032:	d008      	beq.n	8003046 <spiDriverWrite+0x4a>
    		return RET_FAIL;
 8003034:	2001      	movs	r0, #1
}
 8003036:	bd38      	pop	{r3, r4, r5, pc}
    		memcpy(SPIInstanceMap[spiPort].txBufferPtr, buffer, bufferSize);
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <spiDriverWrite+0x7c>)
 800303a:	4413      	add	r3, r2
 800303c:	462a      	mov	r2, r5
 800303e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003040:	f003 f8c4 	bl	80061cc <memcpy>
 8003044:	e008      	b.n	8003058 <spiDriverWrite+0x5c>
    		memcpy(SPIInstanceMap[spiPort].txBufferPtr, buffer, bufferSize*2);
 8003046:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800304a:	011a      	lsls	r2, r3, #4
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <spiDriverWrite+0x7c>)
 800304e:	4413      	add	r3, r2
 8003050:	006a      	lsls	r2, r5, #1
 8003052:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003054:	f003 f8ba 	bl	80061cc <memcpy>
    result = spiDriverWriteIT(spiPort, SPIInstanceMap[spiPort].txBufferPtr, bufferSize);
 8003058:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800305c:	011a      	lsls	r2, r3, #4
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <spiDriverWrite+0x7c>)
 8003060:	4413      	add	r3, r2
 8003062:	462a      	mov	r2, r5
 8003064:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003066:	b2e0      	uxtb	r0, r4
 8003068:	f7ff ff56 	bl	8002f18 <spiDriverWriteIT>
    return result;
 800306c:	bd38      	pop	{r3, r4, r5, pc}
 800306e:	bf00      	nop
 8003070:	0800738c 	.word	0x0800738c
 8003074:	20000ac4 	.word	0x20000ac4
 8003078:	0800738c 	.word	0x0800738c

0800307c <spiDriverRead>:
eError spiDriverRead(tSpi spiDevice, uint8_t* buffer)
{
    uint32_t rdSize;
    tSpiPort spiPort;

    spiPort = SPIPeripheralMap[spiDevice].port;
 800307c:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <spiDriverRead+0x34>)
 800307e:	5618      	ldrsb	r0, [r3, r0]
    rdSize = spiBufferSize[spiPort];
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <spiDriverRead+0x38>)
 8003082:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]

    if(rdSize == 0){
 8003086:	b90a      	cbnz	r2, 800308c <spiDriverRead+0x10>
        return RET_INVALID_PARAMETER;
 8003088:	2005      	movs	r0, #5
 800308a:	4770      	bx	lr
{
 800308c:	b510      	push	{r4, lr}
    }

#if defined(MON_SPI_RX_IT)
    if(SPIInstanceMap[spiPort].mode == SPI_MODE_MASTER){
 800308e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8003092:	011c      	lsls	r4, r3, #4
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <spiDriverRead+0x3c>)
 8003096:	4423      	add	r3, r4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309e:	d003      	beq.n	80030a8 <spiDriverRead+0x2c>
        return spiDriverReadITMasterMode(spiPort, buffer, rdSize);
    }
    else{
        return spiDriverReadITSlaveMode(spiPort, buffer, rdSize);
 80030a0:	b2c0      	uxtb	r0, r0
 80030a2:	f7ff ff59 	bl	8002f58 <spiDriverReadITSlaveMode>
 80030a6:	bd10      	pop	{r4, pc}
        return spiDriverReadITMasterMode(spiPort, buffer, rdSize);
 80030a8:	b2c0      	uxtb	r0, r0
 80030aa:	f7ff ff23 	bl	8002ef4 <spiDriverReadITMasterMode>
 80030ae:	bd10      	pop	{r4, pc}
 80030b0:	0800738c 	.word	0x0800738c
 80030b4:	20000ac4 	.word	0x20000ac4
 80030b8:	0800738c 	.word	0x0800738c

080030bc <spiDriverSetBufferSize>:
eError spiDriverSetBufferSize(tSpi spiDevice, uint32_t bufferSize )
{
    eError result = RET_OK;
    tSpiPort spiPort;

    spiPort = SPIPeripheralMap[spiDevice].port;
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <spiDriverSetBufferSize+0x10>)
 80030be:	561a      	ldrsb	r2, [r3, r0]

    spiBufferSize[spiPort] = bufferSize;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <spiDriverSetBufferSize+0x14>)
 80030c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return result;
}
 80030c6:	2000      	movs	r0, #0
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	0800738c 	.word	0x0800738c
 80030d0:	20000ac4 	.word	0x20000ac4

080030d4 <spiDriverGetBufferSize>:
 * @return  error state.
 *
 * @todo    pending implementation
 ****************************************************************************/
uint32_t spiDriverGetBufferSize(tSpi spiDevice)
{
 80030d4:	b508      	push	{r3, lr}

#if defined(MON_SPI_RX_IT) || defined(MON_SPI_RX_DMA)
    tSpiPort spiPort;

    spiPort = SPIPeripheralMap[spiDevice].port;
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <spiDriverGetBufferSize+0x18>)
 80030d8:	561b      	ldrsb	r3, [r3, r0]

    return (GetQueuePendingBytes(&spiCBuffers[spiPort].rxBuffer));
 80030da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80030de:	00da      	lsls	r2, r3, #3
 80030e0:	4803      	ldr	r0, [pc, #12]	; (80030f0 <spiDriverGetBufferSize+0x1c>)
 80030e2:	4410      	add	r0, r2
 80030e4:	f7fe fc68 	bl	80019b8 <GetQueuePendingBytes>
#else
    return 0; //If it's Polling there are no buffers
#endif
}
 80030e8:	bd08      	pop	{r3, pc}
 80030ea:	bf00      	nop
 80030ec:	0800738c 	.word	0x0800738c
 80030f0:	20000ac4 	.word	0x20000ac4

080030f4 <initHregSpi>:
/***********************************************************************
 * @brief	API for init Spi.
 *
 **********************************************************************/
__weak eError initHregSpi( void )
{
 80030f4:	b508      	push	{r3, lr}
	eError result = RET_OK;

    spiInit();
 80030f6:	f7ff ff57 	bl	8002fa8 <spiInit>

	return result;
}
 80030fa:	2000      	movs	r0, #0
 80030fc:	bd08      	pop	{r3, pc}

080030fe <startHregSpi>:
/***********************************************************************
 * @brief	API for start Spi.
 *
 **********************************************************************/
__weak eError startHregSpi( void )
{
 80030fe:	b508      	push	{r3, lr}
	eError result = RET_OK;

    spiStart();
 8003100:	f7ff ff56 	bl	8002fb0 <spiStart>

	return result;
}
 8003104:	2000      	movs	r0, #0
 8003106:	bd08      	pop	{r3, pc}

08003108 <stopHregSpi>:
/***********************************************************************
 * @brief	API for stop Spi.
 *
 **********************************************************************/
__weak eError stopHregSpi( void )
{
 8003108:	b508      	push	{r3, lr}
	eError result = RET_OK;

    spiStop();
 800310a:	f7ff ff4f 	bl	8002fac <spiStop>

	return result;
}
 800310e:	2000      	movs	r0, #0
 8003110:	bd08      	pop	{r3, pc}

08003112 <sleepHregSpi>:
/***********************************************************************
 * @brief	API for sleep Spi.
 *
 **********************************************************************/
__weak eError sleepHregSpi( void )
{
 8003112:	b508      	push	{r3, lr}
	eError result = RET_OK;

    spiSleep();
 8003114:	f7ff ff4e 	bl	8002fb4 <spiSleep>

	return result;
}
 8003118:	2000      	movs	r0, #0
 800311a:	bd08      	pop	{r3, pc}

0800311c <wakeHregSpi>:
/***********************************************************************
 * @brief	API for wake Spi.
 *
 **********************************************************************/
__weak eError wakeHregSpi( void )
{
 800311c:	b508      	push	{r3, lr}
	eError result = RET_OK;

    spiWake();
 800311e:	f7ff ff4b 	bl	8002fb8 <spiWake>

	return result;
}
 8003122:	2000      	movs	r0, #0
 8003124:	bd08      	pop	{r3, pc}

08003126 <onReadHregSpiBufferSize>:
/***********************************************************************
 * @brief	On Read function for Spi bufferSize.
 *
 **********************************************************************/
__weak eError onReadHregSpiBufferSize( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003126:	b510      	push	{r4, lr}
 8003128:	4614      	mov	r4, r2
	eError result = RET_OK;

    *(uint32_t*)param1 = spiDriverGetBufferSize((tSpi)instance);
 800312a:	f7ff ffd3 	bl	80030d4 <spiDriverGetBufferSize>
 800312e:	6020      	str	r0, [r4, #0]

	return result;
}
 8003130:	2000      	movs	r0, #0
 8003132:	bd10      	pop	{r4, pc}

08003134 <onWriteHregSpiBufferSize>:
/***********************************************************************
 * @brief	On Write function for Spi bufferSize.
 *
 **********************************************************************/
__weak eError onWriteHregSpiBufferSize( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8003134:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = spiDriverSetBufferSize((tSpi)instance, param1);
 8003136:	4611      	mov	r1, r2
 8003138:	f7ff ffc0 	bl	80030bc <spiDriverSetBufferSize>

	return result;
}
 800313c:	bd08      	pop	{r3, pc}

0800313e <onReadHregSpiData>:
/***********************************************************************
 * @brief	On Read function for Spi data.
 *
 **********************************************************************/
__weak eError onReadHregSpiData( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 800313e:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = spiDriverRead((tSpi)instance, (uint8_t*) param1);
 8003140:	4611      	mov	r1, r2
 8003142:	f7ff ff9b 	bl	800307c <spiDriverRead>

	return result;
}
 8003146:	bd08      	pop	{r3, pc}

08003148 <onWriteHregSpiData>:
/***********************************************************************
 * @brief	On Write function for Spi data.
 *
 **********************************************************************/
__weak eError onWriteHregSpiData( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8003148:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = spiDriverWrite((tSpi)instance, (uint8_t*) param1);
 800314a:	4611      	mov	r1, r2
 800314c:	f7ff ff56 	bl	8002ffc <spiDriverWrite>

	return result;
}
 8003150:	bd08      	pop	{r3, pc}

08003152 <onReadHregSpiStatus>:
/***********************************************************************
 * @brief	On Read function for Spi status.
 *
 **********************************************************************/
__weak eError onReadHregSpiStatus( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003152:	b510      	push	{r4, lr}
 8003154:	4614      	mov	r4, r2
	eError result = RET_OK;

    *(uint8_t*)param1 = spiDriverStatus((tSpi)instance);
 8003156:	f7ff ff31 	bl	8002fbc <spiDriverStatus>
 800315a:	7020      	strb	r0, [r4, #0]

	return result;
}
 800315c:	2000      	movs	r0, #0
 800315e:	bd10      	pop	{r4, pc}

08003160 <uartDriverReadIT>:
 * @param Buffer where we want to get the data written to
 * @param rdSize Amount of bytes to read
 * @return eError RET_OK if read successful, RET_FAIL otherwise
 ****************************************************************************/
static eError uartDriverReadIT(tUart uartPort, uint8_t* rdBuffer , uint32_t rdSize)
{
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	460f      	mov	r7, r1
 8003164:	4616      	mov	r6, r2
    eError result = RET_FAIL;
    uint32_t i;
    uint8_t byte;

    if(GetQueuePendingBytes(&uartCBuffers[uartPort].rxBuffer) < rdSize ){
 8003166:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800316a:	00c5      	lsls	r5, r0, #3
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <uartDriverReadIT+0x34>)
 800316e:	441d      	add	r5, r3
 8003170:	4628      	mov	r0, r5
 8003172:	f7fe fc21 	bl	80019b8 <GetQueuePendingBytes>
 8003176:	42b0      	cmp	r0, r6
 8003178:	d30a      	bcc.n	8003190 <uartDriverReadIT+0x30>
 800317a:	2400      	movs	r4, #0
 800317c:	e004      	b.n	8003188 <uartDriverReadIT+0x28>
        result =  RET_FAIL;
    }else{
        for(i=0; i<rdSize; i++){
            byte = GetQueueByte(&uartCBuffers[uartPort].rxBuffer);
 800317e:	4628      	mov	r0, r5
 8003180:	f7fe fc04 	bl	800198c <GetQueueByte>
            rdBuffer[i] = byte;
 8003184:	5538      	strb	r0, [r7, r4]
        for(i=0; i<rdSize; i++){
 8003186:	3401      	adds	r4, #1
 8003188:	42b4      	cmp	r4, r6
 800318a:	d3f8      	bcc.n	800317e <uartDriverReadIT+0x1e>
        }
        result = RET_OK;
 800318c:	2000      	movs	r0, #0
 800318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result =  RET_FAIL;
 8003190:	2001      	movs	r0, #1
    }

    return result;
}
 8003192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003194:	20000ac4 	.word	0x20000ac4

08003198 <uartDriverWritePolling>:
{
 8003198:	b538      	push	{r3, r4, r5, lr}
    bufferSize = uartBufferSize[uartPort];
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <uartDriverWritePolling+0x30>)
 800319c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    huart = &ST_UartHandlers[uartPort];
 80031a0:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 80031a4:	00dc      	lsls	r4, r3, #3
    timeout = (bufferSize * 8) * UARTInstanceMap[uartPort].baudRate;
 80031a6:	252c      	movs	r5, #44	; 0x2c
 80031a8:	4b08      	ldr	r3, [pc, #32]	; (80031cc <uartDriverWritePolling+0x34>)
 80031aa:	fb05 3000 	mla	r0, r5, r0, r3
 80031ae:	6843      	ldr	r3, [r0, #4]
 80031b0:	fb03 f302 	mul.w	r3, r3, r2
    if (HAL_UART_Transmit(huart, buffer, bufferSize, timeout) != HAL_OK){
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	b292      	uxth	r2, r2
 80031b8:	4805      	ldr	r0, [pc, #20]	; (80031d0 <uartDriverWritePolling+0x38>)
 80031ba:	4420      	add	r0, r4
 80031bc:	f002 ff0d 	bl	8005fda <HAL_UART_Transmit>
 80031c0:	b100      	cbz	r0, 80031c4 <uartDriverWritePolling+0x2c>
        result = RET_FAIL;
 80031c2:	2001      	movs	r0, #1
}
 80031c4:	bd38      	pop	{r3, r4, r5, pc}
 80031c6:	bf00      	nop
 80031c8:	20000af8 	.word	0x20000af8
 80031cc:	08007390 	.word	0x08007390
 80031d0:	20000b00 	.word	0x20000b00

080031d4 <HAL_UART_MspInit>:
{
 80031d4:	b082      	sub	sp, #8
    if(huart->Instance == USART1){
 80031d6:	6803      	ldr	r3, [r0, #0]
 80031d8:	4a11      	ldr	r2, [pc, #68]	; (8003220 <HAL_UART_MspInit+0x4c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <HAL_UART_MspInit+0x14>
    else if (huart->Instance == USART2){
 80031de:	4a11      	ldr	r2, [pc, #68]	; (8003224 <HAL_UART_MspInit+0x50>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00c      	beq.n	80031fe <HAL_UART_MspInit+0x2a>
}
 80031e4:	b002      	add	sp, #8
 80031e6:	4770      	bx	lr
        __HAL_RCC_USART1_CLK_ENABLE();
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_UART_MspInit+0x54>)
 80031ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031f0:	661a      	str	r2, [r3, #96]	; 0x60
 80031f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	9b00      	ldr	r3, [sp, #0]
 80031fc:	e009      	b.n	8003212 <HAL_UART_MspInit+0x3e>
        __HAL_RCC_USART2_CLK_ENABLE();
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_UART_MspInit+0x54>)
 8003200:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003202:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003206:	659a      	str	r2, [r3, #88]	; 0x58
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	9b01      	ldr	r3, [sp, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003212:	6802      	ldr	r2, [r0, #0]
 8003214:	6813      	ldr	r3, [r2, #0]
 8003216:	f043 0320 	orr.w	r3, r3, #32
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	e7e2      	b.n	80031e4 <HAL_UART_MspInit+0x10>
 800321e:	bf00      	nop
 8003220:	40013800 	.word	0x40013800
 8003224:	40004400 	.word	0x40004400
 8003228:	40021000 	.word	0x40021000

0800322c <HAL_UART_MspDeInit>:
    if(huart->Instance == USART1){
 800322c:	6803      	ldr	r3, [r0, #0]
 800322e:	4a0d      	ldr	r2, [pc, #52]	; (8003264 <HAL_UART_MspDeInit+0x38>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <HAL_UART_MspDeInit+0x10>
    else if (huart->Instance == USART2){
 8003234:	4a0c      	ldr	r2, [pc, #48]	; (8003268 <HAL_UART_MspDeInit+0x3c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00a      	beq.n	8003250 <HAL_UART_MspDeInit+0x24>
 800323a:	4770      	bx	lr
        __HAL_RCC_USART1_FORCE_RESET();
 800323c:	4b0b      	ldr	r3, [pc, #44]	; (800326c <HAL_UART_MspDeInit+0x40>)
 800323e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_RCC_USART1_RELEASE_RESET();
 8003246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
 800324e:	4770      	bx	lr
        __HAL_RCC_USART2_FORCE_RESET();
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_UART_MspDeInit+0x40>)
 8003252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003254:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003258:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_USART2_RELEASE_RESET();
 800325a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800325c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003262:	e7ea      	b.n	800323a <HAL_UART_MspDeInit+0xe>
 8003264:	40013800 	.word	0x40013800
 8003268:	40004400 	.word	0x40004400
 800326c:	40021000 	.word	0x40021000

08003270 <HAL_UART_TxCpltCallback>:
{
 8003270:	b510      	push	{r4, lr}
 8003272:	b082      	sub	sp, #8
	if ( GetQueuePendingBytes(&uartCBuffers[uartPortIrq].txBuffer) != 0)
 8003274:	4b1a      	ldr	r3, [pc, #104]	; (80032e0 <HAL_UART_TxCpltCallback+0x70>)
 8003276:	f993 3000 	ldrsb.w	r3, [r3]
 800327a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800327e:	00d8      	lsls	r0, r3, #3
 8003280:	3008      	adds	r0, #8
 8003282:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <HAL_UART_TxCpltCallback+0x74>)
 8003284:	4418      	add	r0, r3
 8003286:	3004      	adds	r0, #4
 8003288:	f7fe fb96 	bl	80019b8 <GetQueuePendingBytes>
 800328c:	b968      	cbnz	r0, 80032aa <HAL_UART_TxCpltCallback+0x3a>
		 __HAL_UART_DISABLE_IT(&ST_UartHandlers[uartPortIrq], UART_IT_TXE);
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <HAL_UART_TxCpltCallback+0x70>)
 8003290:	f993 3000 	ldrsb.w	r3, [r3]
 8003294:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8003298:	00da      	lsls	r2, r3, #3
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <HAL_UART_TxCpltCallback+0x78>)
 800329c:	589a      	ldr	r2, [r3, r2]
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a4:	6013      	str	r3, [r2, #0]
}
 80032a6:	b002      	add	sp, #8
 80032a8:	bd10      	pop	{r4, pc}
		 byte = (uint8_t)(GetQueueByte(&uartCBuffers[uartPortIrq].txBuffer) & (uint8_t)0xFF);
 80032aa:	4c0d      	ldr	r4, [pc, #52]	; (80032e0 <HAL_UART_TxCpltCallback+0x70>)
 80032ac:	f994 3000 	ldrsb.w	r3, [r4]
 80032b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80032b4:	00d8      	lsls	r0, r3, #3
 80032b6:	3008      	adds	r0, #8
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_UART_TxCpltCallback+0x74>)
 80032ba:	4418      	add	r0, r3
 80032bc:	3004      	adds	r0, #4
 80032be:	f7fe fb65 	bl	800198c <GetQueueByte>
 80032c2:	a902      	add	r1, sp, #8
 80032c4:	f801 0d01 	strb.w	r0, [r1, #-1]!
		 HAL_UART_Transmit_IT(&ST_UartHandlers[uartPortIrq], &byte, 1);
 80032c8:	f994 3000 	ldrsb.w	r3, [r4]
 80032cc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80032d0:	00d8      	lsls	r0, r3, #3
 80032d2:	2201      	movs	r2, #1
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <HAL_UART_TxCpltCallback+0x78>)
 80032d6:	4418      	add	r0, r3
 80032d8:	f002 fa30 	bl	800573c <HAL_UART_Transmit_IT>
 80032dc:	e7e3      	b.n	80032a6 <HAL_UART_TxCpltCallback+0x36>
 80032de:	bf00      	nop
 80032e0:	2000048f 	.word	0x2000048f
 80032e4:	20000ac4 	.word	0x20000ac4
 80032e8:	20000b00 	.word	0x20000b00

080032ec <HAL_UART_RxCpltCallback>:
{
 80032ec:	b510      	push	{r4, lr}
 80032ee:	4604      	mov	r4, r0
	muart = &UARTInstanceMap[uartPortIrq];
 80032f0:	4b16      	ldr	r3, [pc, #88]	; (800334c <HAL_UART_RxCpltCallback+0x60>)
 80032f2:	f993 2000 	ldrsb.w	r2, [r3]
	if(muart->rxCallback != NULL){
 80032f6:	232c      	movs	r3, #44	; 0x2c
 80032f8:	4915      	ldr	r1, [pc, #84]	; (8003350 <HAL_UART_RxCpltCallback+0x64>)
 80032fa:	fb03 1302 	mla	r3, r3, r2, r1
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	b143      	cbz	r3, 8003314 <HAL_UART_RxCpltCallback+0x28>
		muart->rxCallback(byteRxBuffer);
 8003302:	4a14      	ldr	r2, [pc, #80]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 8003304:	7810      	ldrb	r0, [r2, #0]
 8003306:	4798      	blx	r3
	 HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8003308:	2201      	movs	r2, #1
 800330a:	4912      	ldr	r1, [pc, #72]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 800330c:	4620      	mov	r0, r4
 800330e:	f002 fa51 	bl	80057b4 <HAL_UART_Receive_IT>
 8003312:	bd10      	pop	{r4, pc}
		if(GetQueueFreeBytes(&uartCBuffers[uartPortIrq].rxBuffer) > 0){
 8003314:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003318:	00d3      	lsls	r3, r2, #3
 800331a:	480f      	ldr	r0, [pc, #60]	; (8003358 <HAL_UART_RxCpltCallback+0x6c>)
 800331c:	4418      	add	r0, r3
 800331e:	f7fe fb4d 	bl	80019bc <GetQueueFreeBytes>
 8003322:	b930      	cbnz	r0, 8003332 <HAL_UART_RxCpltCallback+0x46>
			uartStatus[uartPortIrq] = RET_BUFFER_FULL;
 8003324:	4b09      	ldr	r3, [pc, #36]	; (800334c <HAL_UART_RxCpltCallback+0x60>)
 8003326:	f993 3000 	ldrsb.w	r3, [r3]
 800332a:	2108      	movs	r1, #8
 800332c:	4a0b      	ldr	r2, [pc, #44]	; (800335c <HAL_UART_RxCpltCallback+0x70>)
 800332e:	54d1      	strb	r1, [r2, r3]
 8003330:	e7ea      	b.n	8003308 <HAL_UART_RxCpltCallback+0x1c>
			AddQueueByte(&uartCBuffers[uartPortIrq].rxBuffer, byteRxBuffer);
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_UART_RxCpltCallback+0x60>)
 8003334:	f993 3000 	ldrsb.w	r3, [r3]
 8003338:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800333c:	00da      	lsls	r2, r3, #3
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_UART_RxCpltCallback+0x68>)
 8003340:	7819      	ldrb	r1, [r3, #0]
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <HAL_UART_RxCpltCallback+0x6c>)
 8003344:	4410      	add	r0, r2
 8003346:	f7fe fb0a 	bl	800195e <AddQueueByte>
 800334a:	e7dd      	b.n	8003308 <HAL_UART_RxCpltCallback+0x1c>
 800334c:	2000048f 	.word	0x2000048f
 8003350:	08007390 	.word	0x08007390
 8003354:	20000bf0 	.word	0x20000bf0
 8003358:	20000ac4 	.word	0x20000ac4
 800335c:	20000af4 	.word	0x20000af4

08003360 <uartDriverMainIRQHandler>:
{
 8003360:	b508      	push	{r3, lr}
    huart = &ST_UartHandlers[uartPort];
 8003362:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 8003366:	00d3      	lsls	r3, r2, #3
    uartPortIrq = uartPort;
 8003368:	4a03      	ldr	r2, [pc, #12]	; (8003378 <uartDriverMainIRQHandler+0x18>)
 800336a:	7010      	strb	r0, [r2, #0]
    HAL_UART_IRQHandler(huart);
 800336c:	4803      	ldr	r0, [pc, #12]	; (800337c <uartDriverMainIRQHandler+0x1c>)
 800336e:	4418      	add	r0, r3
 8003370:	f002 fafc 	bl	800596c <HAL_UART_IRQHandler>
 8003374:	bd08      	pop	{r3, pc}
 8003376:	bf00      	nop
 8003378:	2000048f 	.word	0x2000048f
 800337c:	20000b00 	.word	0x20000b00

08003380 <HAL_UART_ErrorCallback>:
{
 8003380:	4770      	bx	lr
	...

08003384 <uartInit>:
{
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(i=0; i<NUM_OF_UART; i++) {
 8003386:	2400      	movs	r4, #0
 8003388:	e02c      	b.n	80033e4 <uartInit+0x60>
        huart->Instance        = muart->port;
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <uartInit+0x68>)
 800338c:	232c      	movs	r3, #44	; 0x2c
 800338e:	fb03 f304 	mul.w	r3, r3, r4
 8003392:	18d5      	adds	r5, r2, r3
 8003394:	58d0      	ldr	r0, [r2, r3]
 8003396:	4916      	ldr	r1, [pc, #88]	; (80033f0 <uartInit+0x6c>)
 8003398:	0123      	lsls	r3, r4, #4
 800339a:	1b1b      	subs	r3, r3, r4
 800339c:	00da      	lsls	r2, r3, #3
 800339e:	188b      	adds	r3, r1, r2
 80033a0:	5088      	str	r0, [r1, r2]
        huart->Init.BaudRate   = muart->baudRate;
 80033a2:	686a      	ldr	r2, [r5, #4]
 80033a4:	605a      	str	r2, [r3, #4]
        huart->Init.WordLength = muart->dataSize;
 80033a6:	7a2a      	ldrb	r2, [r5, #8]
 80033a8:	609a      	str	r2, [r3, #8]
        huart->Init.StopBits   = muart->stopBits;
 80033aa:	7aaa      	ldrb	r2, [r5, #10]
 80033ac:	60da      	str	r2, [r3, #12]
        huart->Init.Parity     = muart->parity;
 80033ae:	7a6a      	ldrb	r2, [r5, #9]
 80033b0:	611a      	str	r2, [r3, #16]
        huart->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80033b2:	2200      	movs	r2, #0
 80033b4:	619a      	str	r2, [r3, #24]
        huart->Init.Mode       = UART_MODE_TX_RX;
 80033b6:	210c      	movs	r1, #12
 80033b8:	6159      	str	r1, [r3, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80033ba:	61da      	str	r2, [r3, #28]
		CreateQueue(&uartCBuffers[i].rxBuffer,
 80033bc:	0066      	lsls	r6, r4, #1
 80033be:	1933      	adds	r3, r6, r4
 80033c0:	00d8      	lsls	r0, r3, #3
 80033c2:	4f0c      	ldr	r7, [pc, #48]	; (80033f4 <uartInit+0x70>)
 80033c4:	8aaa      	ldrh	r2, [r5, #20]
 80033c6:	69a9      	ldr	r1, [r5, #24]
 80033c8:	4438      	add	r0, r7
 80033ca:	f7fe fac1 	bl	8001950 <CreateQueue>
		CreateQueue(&uartCBuffers[i].txBuffer,
 80033ce:	4426      	add	r6, r4
 80033d0:	00f0      	lsls	r0, r6, #3
 80033d2:	3008      	adds	r0, #8
 80033d4:	4438      	add	r0, r7
 80033d6:	89aa      	ldrh	r2, [r5, #12]
 80033d8:	6929      	ldr	r1, [r5, #16]
 80033da:	3004      	adds	r0, #4
 80033dc:	f7fe fab8 	bl	8001950 <CreateQueue>
    for(i=0; i<NUM_OF_UART; i++) {
 80033e0:	3401      	adds	r4, #1
 80033e2:	b2e4      	uxtb	r4, r4
 80033e4:	2c01      	cmp	r4, #1
 80033e6:	d9d0      	bls.n	800338a <uartInit+0x6>
}
 80033e8:	2000      	movs	r0, #0
 80033ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ec:	08007390 	.word	0x08007390
 80033f0:	20000b00 	.word	0x20000b00
 80033f4:	20000ac4 	.word	0x20000ac4

080033f8 <uartStop>:
{
 80033f8:	b510      	push	{r4, lr}
    for(i=0; i<NUM_OF_UART; i++){
 80033fa:	2400      	movs	r4, #0
 80033fc:	2c01      	cmp	r4, #1
 80033fe:	d80a      	bhi.n	8003416 <uartStop+0x1e>
        huart = &ST_UartHandlers[i];
 8003400:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
 8003404:	00d3      	lsls	r3, r2, #3
        if(HAL_UART_DeInit(huart) != HAL_OK)
 8003406:	4806      	ldr	r0, [pc, #24]	; (8003420 <uartStop+0x28>)
 8003408:	4418      	add	r0, r3
 800340a:	f002 f977 	bl	80056fc <HAL_UART_DeInit>
 800340e:	b920      	cbnz	r0, 800341a <uartStop+0x22>
    for(i=0; i<NUM_OF_UART; i++){
 8003410:	3401      	adds	r4, #1
 8003412:	b2e4      	uxtb	r4, r4
 8003414:	e7f2      	b.n	80033fc <uartStop+0x4>
    return result;
 8003416:	2000      	movs	r0, #0
 8003418:	bd10      	pop	{r4, pc}
            return RET_FAIL;
 800341a:	2001      	movs	r0, #1
}
 800341c:	bd10      	pop	{r4, pc}
 800341e:	bf00      	nop
 8003420:	20000b00 	.word	0x20000b00

08003424 <uartStart>:
{
 8003424:	b538      	push	{r3, r4, r5, lr}
    for(i=0; i<NUM_OF_UART; i++){
 8003426:	2400      	movs	r4, #0
 8003428:	2c01      	cmp	r4, #1
 800342a:	d814      	bhi.n	8003456 <uartStart+0x32>
        huart = &ST_UartHandlers[i];
 800342c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8003430:	00dd      	lsls	r5, r3, #3
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <uartStart+0x40>)
 8003434:	441d      	add	r5, r3
        if(HAL_UART_DeInit(huart) != HAL_OK)
 8003436:	4628      	mov	r0, r5
 8003438:	f002 f960 	bl	80056fc <HAL_UART_DeInit>
 800343c:	b968      	cbnz	r0, 800345a <uartStart+0x36>
        if(HAL_UART_Init(huart) != HAL_OK)
 800343e:	4628      	mov	r0, r5
 8003440:	f002 fe6b 	bl	800611a <HAL_UART_Init>
 8003444:	b958      	cbnz	r0, 800345e <uartStart+0x3a>
        HAL_UART_Receive_IT(huart, &byteRxBuffer, 1 );
 8003446:	2201      	movs	r2, #1
 8003448:	4907      	ldr	r1, [pc, #28]	; (8003468 <uartStart+0x44>)
 800344a:	4628      	mov	r0, r5
 800344c:	f002 f9b2 	bl	80057b4 <HAL_UART_Receive_IT>
    for(i=0; i<NUM_OF_UART; i++){
 8003450:	3401      	adds	r4, #1
 8003452:	b2e4      	uxtb	r4, r4
 8003454:	e7e8      	b.n	8003428 <uartStart+0x4>
    return result;
 8003456:	2000      	movs	r0, #0
 8003458:	bd38      	pop	{r3, r4, r5, pc}
            return RET_FAIL;
 800345a:	2001      	movs	r0, #1
 800345c:	bd38      	pop	{r3, r4, r5, pc}
            return RET_FAIL;
 800345e:	2001      	movs	r0, #1
}
 8003460:	bd38      	pop	{r3, r4, r5, pc}
 8003462:	bf00      	nop
 8003464:	20000b00 	.word	0x20000b00
 8003468:	20000bf0 	.word	0x20000bf0

0800346c <uartSleep>:
}
 800346c:	2000      	movs	r0, #0
 800346e:	4770      	bx	lr

08003470 <uartDriverSetBufferSize>:
    uartBufferSize[uartPort] = bufferSize;
 8003470:	4b02      	ldr	r3, [pc, #8]	; (800347c <uartDriverSetBufferSize+0xc>)
 8003472:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8003476:	2000      	movs	r0, #0
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000af8 	.word	0x20000af8

08003480 <uartDriverGetBufferSize>:
{
 8003480:	b508      	push	{r3, lr}
    return (GetQueuePendingBytes(&uartCBuffers[uartPort].rxBuffer));
 8003482:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003486:	00c3      	lsls	r3, r0, #3
 8003488:	4802      	ldr	r0, [pc, #8]	; (8003494 <uartDriverGetBufferSize+0x14>)
 800348a:	4418      	add	r0, r3
 800348c:	f7fe fa94 	bl	80019b8 <GetQueuePendingBytes>
}
 8003490:	bd08      	pop	{r3, pc}
 8003492:	bf00      	nop
 8003494:	20000ac4 	.word	0x20000ac4

08003498 <uartDriverWrite>:
{
 8003498:	b508      	push	{r3, lr}
    bufferSize = uartBufferSize[uartPort];
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <uartDriverWrite+0x14>)
 800349c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    if(bufferSize == 0){
 80034a0:	b90a      	cbnz	r2, 80034a6 <uartDriverWrite+0xe>
        return RET_INVALID_PARAMETER;
 80034a2:	2005      	movs	r0, #5
}
 80034a4:	bd08      	pop	{r3, pc}
    result = uartDriverWritePolling(uartPort, buffer, bufferSize);
 80034a6:	f7ff fe77 	bl	8003198 <uartDriverWritePolling>
    return result;
 80034aa:	bd08      	pop	{r3, pc}
 80034ac:	20000af8 	.word	0x20000af8

080034b0 <uartDriverRead>:
 * @param uartPort UART port to read from
 * @param buffer Buffer where to write the data to
 * @return eError RET_OK if read successful, RET_FAIL otherwise
 ****************************************************************************/
eError uartDriverRead(tUart uartPort, uint8_t* buffer)
{
 80034b0:	b508      	push	{r3, lr}
    uint32_t rdSize;

    rdSize = uartBufferSize[uartPort];

#if defined(MON_UART_RX_IT)
    return uartDriverReadIT(uartPort, buffer, rdSize);
 80034b2:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <uartDriverRead+0x10>)
 80034b4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 80034b8:	f7ff fe52 	bl	8003160 <uartDriverReadIT>
    return uartDriverReadPolling(uartPort, buffer, rdSize );
#else
#endif

    return result;
}
 80034bc:	bd08      	pop	{r3, pc}
 80034be:	bf00      	nop
 80034c0:	20000af8 	.word	0x20000af8

080034c4 <uartDriverStatus>:
#if defined(MON_UART_RX_IT) || defined(MON_UART_TX_IT)
    return uartStatus[uartPort];
#else
    return RET_OK;
#endif
}
 80034c4:	4b01      	ldr	r3, [pc, #4]	; (80034cc <uartDriverStatus+0x8>)
 80034c6:	5c18      	ldrb	r0, [r3, r0]
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000af4 	.word	0x20000af4

080034d0 <initHregUart>:
/***********************************************************************
 * @brief	API for init Uart.
 *
 **********************************************************************/
__weak eError initHregUart( void )
{
 80034d0:	b508      	push	{r3, lr}
	eError result = RET_OK;

	uartInit();
 80034d2:	f7ff ff57 	bl	8003384 <uartInit>

	return result;
}
 80034d6:	2000      	movs	r0, #0
 80034d8:	bd08      	pop	{r3, pc}

080034da <startHregUart>:
/***********************************************************************
 * @brief	API for start Uart.
 *
 **********************************************************************/
__weak eError startHregUart( void )
{
 80034da:	b508      	push	{r3, lr}
	eError result = RET_OK;

	uartStart();
 80034dc:	f7ff ffa2 	bl	8003424 <uartStart>

	return result;
}
 80034e0:	2000      	movs	r0, #0
 80034e2:	bd08      	pop	{r3, pc}

080034e4 <stopHregUart>:
/***********************************************************************
 * @brief	API for stop Uart.
 *
 **********************************************************************/
__weak eError stopHregUart( void )
{
 80034e4:	b508      	push	{r3, lr}
	eError result = RET_OK;

	uartStop();
 80034e6:	f7ff ff87 	bl	80033f8 <uartStop>

	return result;
}
 80034ea:	2000      	movs	r0, #0
 80034ec:	bd08      	pop	{r3, pc}

080034ee <sleepHregUart>:
/***********************************************************************
 * @brief	API for sleep Uart.
 *
 **********************************************************************/
__weak eError sleepHregUart( void )
{
 80034ee:	b508      	push	{r3, lr}
	eError result = RET_OK;

	uartSleep();
 80034f0:	f7ff ffbc 	bl	800346c <uartSleep>

	return result;
}
 80034f4:	2000      	movs	r0, #0
 80034f6:	bd08      	pop	{r3, pc}

080034f8 <wakeHregUart>:
	eError result = RET_OK;

	//Add your code here.

	return result;
}
 80034f8:	2000      	movs	r0, #0
 80034fa:	4770      	bx	lr

080034fc <onReadHregUartBufferSize>:
/***********************************************************************
 * @brief	On Read function for Uart bufferSize.
 *
 **********************************************************************/
__weak eError onReadHregUartBufferSize( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 80034fc:	b510      	push	{r4, lr}
 80034fe:	4614      	mov	r4, r2
	eError result = RET_OK;

    *(uint32_t*)param1 = uartDriverGetBufferSize((tUart)instance);
 8003500:	b240      	sxtb	r0, r0
 8003502:	f7ff ffbd 	bl	8003480 <uartDriverGetBufferSize>
 8003506:	6020      	str	r0, [r4, #0]

	return result;
}
 8003508:	2000      	movs	r0, #0
 800350a:	bd10      	pop	{r4, pc}

0800350c <onWriteHregUartBufferSize>:
/***********************************************************************
 * @brief	On Write function for Uart bufferSize.
 *
 **********************************************************************/
__weak eError onWriteHregUartBufferSize( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 800350c:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = uartDriverSetBufferSize((tUart)instance, param1);
 800350e:	4611      	mov	r1, r2
 8003510:	b240      	sxtb	r0, r0
 8003512:	f7ff ffad 	bl	8003470 <uartDriverSetBufferSize>

	return result;
}
 8003516:	bd08      	pop	{r3, pc}

08003518 <onReadHregUartData>:
/***********************************************************************
 * @brief	On Read function for Uart data.
 *
 **********************************************************************/
__weak eError onReadHregUartData( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003518:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = uartDriverRead((tUart)instance, (uint8_t*) param1);
 800351a:	4611      	mov	r1, r2
 800351c:	b240      	sxtb	r0, r0
 800351e:	f7ff ffc7 	bl	80034b0 <uartDriverRead>

	return result;
}
 8003522:	bd08      	pop	{r3, pc}

08003524 <onWriteHregUartData>:
/***********************************************************************
 * @brief	On Write function for Uart data.
 *
 **********************************************************************/
__weak eError onWriteHregUartData( uint8_t instance, const HREG* hregPtr, uint32_t param1 )
{
 8003524:	b508      	push	{r3, lr}
	eError result = RET_OK;

    result = uartDriverWrite((tUart)instance, (uint8_t*) param1);
 8003526:	4611      	mov	r1, r2
 8003528:	b240      	sxtb	r0, r0
 800352a:	f7ff ffb5 	bl	8003498 <uartDriverWrite>

	return result;
}
 800352e:	bd08      	pop	{r3, pc}

08003530 <onReadHregUartStatus>:
/***********************************************************************
 * @brief	On Read function for Uart status.
 *
 **********************************************************************/
__weak eError onReadHregUartStatus( uint8_t instance, const HREG* hregPtr, void* param1 )
{
 8003530:	b510      	push	{r4, lr}
 8003532:	4614      	mov	r4, r2
	eError result = RET_OK;

    *(uint8_t*)param1 = uartDriverStatus((tUart)instance);
 8003534:	b240      	sxtb	r0, r0
 8003536:	f7ff ffc5 	bl	80034c4 <uartDriverStatus>
 800353a:	7020      	strb	r0, [r4, #0]

	return result;
}
 800353c:	2000      	movs	r0, #0
 800353e:	bd10      	pop	{r4, pc}

08003540 <initSystemMw>:
 *
 * @return  None.
 *
 ****************************************************************************/
void initSystemMw( void )
{
 8003540:	b508      	push	{r3, lr}
	/* Initialise the HREG layer */
	initHregAll();
 8003542:	f7fd f889 	bl	8000658 <initHregAll>

	/* Initialise pipe Device */
    pipeDeviceInit();
 8003546:	f7fe fefd 	bl	8002344 <pipeDeviceInit>

    /* Start HREG layer */
	startHregGroupAll();
 800354a:	f7fd f8b9 	bl	80006c0 <startHregGroupAll>

	/* Start pipe Device */
    pipeDeviceStart();
 800354e:	f7fe ff1b 	bl	8002388 <pipeDeviceStart>
 8003552:	bd08      	pop	{r3, pc}

08003554 <callSystemMwTask>:
 *
 * @return  None.
 *
 ****************************************************************************/
void callSystemMwTask( void )
{
 8003554:	b508      	push	{r3, lr}
	uint8_t    value;

	value = READ_SREG(SREG_SYSTEM_MW_NOTIF);
 8003556:	2005      	movs	r0, #5
 8003558:	f7fd faf5 	bl	8000b46 <readSreg>

	switch (value)
 800355c:	b2c0      	uxtb	r0, r0
 800355e:	3801      	subs	r0, #1
 8003560:	2809      	cmp	r0, #9
 8003562:	d841      	bhi.n	80035e8 <callSystemMwTask+0x94>
 8003564:	e8df f000 	tbb	[pc, r0]
 8003568:	4033101e 	.word	0x4033101e
 800356c:	40404040 	.word	0x40404040
 8003570:	0540      	.short	0x0540
	{
		case NOTIF_SYSTEM_MW_POWER_OFF:
			/* Debug info */
			printShellString((int8_t *)"System OFF ...", VERBOSE_GENERAL);
 8003572:	2101      	movs	r1, #1
 8003574:	481d      	ldr	r0, [pc, #116]	; (80035ec <callSystemMwTask+0x98>)
 8003576:	f7fd fd3f 	bl	8000ff8 <printShellString>
			/* Stop all drivers */
			stopHregGroupAll();
 800357a:	f7fd f887 	bl	800068c <stopHregGroupAll>
			/* Clear */
			WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_NO_REQUEST);
 800357e:	2100      	movs	r1, #0
 8003580:	2005      	movs	r0, #5
 8003582:	f7fd fb00 	bl	8000b86 <writeSreg>
			break;
 8003586:	bd08      	pop	{r3, pc}

		case NOTIF_SYSTEM_MW_BOOTLOADER:
			/* Debug info */
			printShellString((int8_t *)"System BOOT ...", VERBOSE_GENERAL);
 8003588:	2101      	movs	r1, #1
 800358a:	4819      	ldr	r0, [pc, #100]	; (80035f0 <callSystemMwTask+0x9c>)
 800358c:	f7fd fd34 	bl	8000ff8 <printShellString>
			/* Notify driver level about the bootloader process */
			WRITE_HREG(UNIQUE_INSTANCE, HREG_SYSTEM_POWER_MODE, NOTIF_SYSTEM_MW_BOOTLOADER);
 8003590:	2202      	movs	r2, #2
 8003592:	4918      	ldr	r1, [pc, #96]	; (80035f4 <callSystemMwTask+0xa0>)
 8003594:	2000      	movs	r0, #0
 8003596:	f7fd f915 	bl	80007c4 <writeHreg>
			/* Clear */
			WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_NO_REQUEST);
 800359a:	2100      	movs	r1, #0
 800359c:	2005      	movs	r0, #5
 800359e:	f7fd faf2 	bl	8000b86 <writeSreg>
			break;
 80035a2:	bd08      	pop	{r3, pc}

		case NOTIF_SYSTEM_MW_SLEEP:
			/* Debug info */
			printShellString((int8_t *)"System SLEEP ...", VERBOSE_GENERAL);
 80035a4:	2101      	movs	r1, #1
 80035a6:	4814      	ldr	r0, [pc, #80]	; (80035f8 <callSystemMwTask+0xa4>)
 80035a8:	f7fd fd26 	bl	8000ff8 <printShellString>
			/* Sleep all HREG groups */
			sleepHregGroupAll();
 80035ac:	f7fd f8de 	bl	800076c <sleepHregGroupAll>
			/* Clear */
			WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_NO_REQUEST);
 80035b0:	2100      	movs	r1, #0
 80035b2:	2005      	movs	r0, #5
 80035b4:	f7fd fae7 	bl	8000b86 <writeSreg>

			/* Execute Sleep routine*/
			WRITE_HREG(UNIQUE_INSTANCE, HREG_SYSTEM_POWER_MODE, NOTIF_SYSTEM_MW_SLEEP);
 80035b8:	2201      	movs	r2, #1
 80035ba:	490e      	ldr	r1, [pc, #56]	; (80035f4 <callSystemMwTask+0xa0>)
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fd f901 	bl	80007c4 <writeHreg>

			/* Wake up all HREG groups */
			wakeHregGroupAll();
 80035c2:	f7fd f8e9 	bl	8000798 <wakeHregGroupAll>
			/* Wake Up condition */
			requestSystemAppPowerState(POWER_STATE_WAKE_UP);
 80035c6:	2002      	movs	r0, #2
 80035c8:	f7fd f83e 	bl	8000648 <requestSystemAppPowerState>
			break;
 80035cc:	bd08      	pop	{r3, pc}

		case NOTIF_SYSTEM_MW_RESET:
			/* Debug info */
			printShellString((int8_t *)"System RESET ...", VERBOSE_GENERAL);
 80035ce:	2101      	movs	r1, #1
 80035d0:	480a      	ldr	r0, [pc, #40]	; (80035fc <callSystemMwTask+0xa8>)
 80035d2:	f7fd fd11 	bl	8000ff8 <printShellString>
			/* Notify driver level about the reset process */
			WRITE_HREG(UNIQUE_INSTANCE, HREG_SYSTEM_POWER_MODE, NOTIF_SYSTEM_MW_RESET);
 80035d6:	2203      	movs	r2, #3
 80035d8:	4906      	ldr	r1, [pc, #24]	; (80035f4 <callSystemMwTask+0xa0>)
 80035da:	2000      	movs	r0, #0
 80035dc:	f7fd f8f2 	bl	80007c4 <writeHreg>
			/* Clear */
			WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_NO_REQUEST);
 80035e0:	2100      	movs	r1, #0
 80035e2:	2005      	movs	r0, #5
 80035e4:	f7fd facf 	bl	8000b86 <writeSreg>
 80035e8:	bd08      	pop	{r3, pc}
 80035ea:	bf00      	nop
 80035ec:	080073e8 	.word	0x080073e8
 80035f0:	080073f8 	.word	0x080073f8
 80035f4:	08006d34 	.word	0x08006d34
 80035f8:	08007408 	.word	0x08007408
 80035fc:	0800741c 	.word	0x0800741c

08003600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003638 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003604:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003606:	e003      	b.n	8003610 <LoopCopyDataInit>

08003608 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800360a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800360c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800360e:	3104      	adds	r1, #4

08003610 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003610:	480b      	ldr	r0, [pc, #44]	; (8003640 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003614:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003616:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003618:	d3f6      	bcc.n	8003608 <CopyDataInit>
	ldr	r2, =_sbss
 800361a:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <LoopForever+0x12>)
	b	LoopFillZerobss
 800361c:	e002      	b.n	8003624 <LoopFillZerobss>

0800361e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800361e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003620:	f842 3b04 	str.w	r3, [r2], #4

08003624 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <LoopForever+0x16>)
	cmp	r2, r3
 8003626:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003628:	d3f9      	bcc.n	800361e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800362a:	f000 f813 	bl	8003654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800362e:	f002 fda9 	bl	8006184 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003632:	f7fc ffb5 	bl	80005a0 <main>

08003636 <LoopForever>:

LoopForever:
    b LoopForever
 8003636:	e7fe      	b.n	8003636 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003638:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 800363c:	080074bc 	.word	0x080074bc
	ldr	r0, =_sdata
 8003640:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003644:	200001d0 	.word	0x200001d0
	ldr	r2, =_sbss
 8003648:	200001d0 	.word	0x200001d0
	ldr	r3, = _ebss
 800364c:	20000ec4 	.word	0x20000ec4

08003650 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003650:	e7fe      	b.n	8003650 <ADC1_IRQHandler>
	...

08003654 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003654:	490f      	ldr	r1, [pc, #60]	; (8003694 <SystemInit+0x40>)
 8003656:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800365a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <SystemInit+0x44>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800366c:	2000      	movs	r0, #0
 800366e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003676:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800367a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800367c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003680:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003688:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800368a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800368c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003690:	608b      	str	r3, [r1, #8]
 8003692:	4770      	bx	lr
 8003694:	e000ed00 	.word	0xe000ed00
 8003698:	40021000 	.word	0x40021000

0800369c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800369c:	b510      	push	{r4, lr}
 800369e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80036a0:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <HAL_InitTick+0x24>)
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <HAL_InitTick+0x28>)
 80036a6:	fba3 3000 	umull	r3, r0, r3, r0
 80036aa:	0980      	lsrs	r0, r0, #6
 80036ac:	f000 f886 	bl	80037bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80036b0:	2200      	movs	r2, #0
 80036b2:	4621      	mov	r1, r4
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	f000 f834 	bl	8003724 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80036bc:	2000      	movs	r0, #0
 80036be:	bd10      	pop	{r4, pc}
 80036c0:	20000148 	.word	0x20000148
 80036c4:	10624dd3 	.word	0x10624dd3

080036c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80036c8:	4a02      	ldr	r2, [pc, #8]	; (80036d4 <HAL_IncTick+0xc>)
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000ebc 	.word	0x20000ebc

080036d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80036d8:	4b01      	ldr	r3, [pc, #4]	; (80036e0 <HAL_GetTick+0x8>)
 80036da:	6818      	ldr	r0, [r3, #0]
}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000ebc 	.word	0x20000ebc

080036e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80036e8:	f7ff fff6 	bl	80036d8 <HAL_GetTick>
 80036ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ee:	f1b4 3fff 	cmp.w	r4, #4294967295
 80036f2:	d000      	beq.n	80036f6 <HAL_Delay+0x12>
  {
    wait++;
 80036f4:	3401      	adds	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 80036f6:	f7ff ffef 	bl	80036d8 <HAL_GetTick>
 80036fa:	1b40      	subs	r0, r0, r5
 80036fc:	4284      	cmp	r4, r0
 80036fe:	d8fa      	bhi.n	80036f6 <HAL_Delay+0x12>
  {
  }
}
 8003700:	bd38      	pop	{r3, r4, r5, pc}
	...

08003704 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003704:	4a02      	ldr	r2, [pc, #8]	; (8003710 <HAL_SuspendTick+0xc>)
 8003706:	6813      	ldr	r3, [r2, #0]
 8003708:	f023 0302 	bic.w	r3, r3, #2
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4770      	bx	lr
 8003710:	e000e010 	.word	0xe000e010

08003714 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003714:	4a02      	ldr	r2, [pc, #8]	; (8003720 <HAL_ResumeTick+0xc>)
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	f043 0302 	orr.w	r3, r3, #2
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4770      	bx	lr
 8003720:	e000e010 	.word	0xe000e010

08003724 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003724:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <HAL_NVIC_SetPriority+0x5c>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800372e:	f1c3 0407 	rsb	r4, r3, #7
 8003732:	2c04      	cmp	r4, #4
 8003734:	bf28      	it	cs
 8003736:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003738:	1d1d      	adds	r5, r3, #4
 800373a:	2d06      	cmp	r5, #6
 800373c:	d917      	bls.n	800376e <HAL_NVIC_SetPriority+0x4a>
 800373e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	2501      	movs	r5, #1
 8003742:	fa05 f404 	lsl.w	r4, r5, r4
 8003746:	3c01      	subs	r4, #1
 8003748:	4021      	ands	r1, r4
 800374a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800374c:	fa05 f303 	lsl.w	r3, r5, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003754:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8003756:	2800      	cmp	r0, #0
 8003758:	db0b      	blt.n	8003772 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375a:	0109      	lsls	r1, r1, #4
 800375c:	b2c9      	uxtb	r1, r1
 800375e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003762:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003766:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800376a:	bc30      	pop	{r4, r5}
 800376c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376e:	2300      	movs	r3, #0
 8003770:	e7e6      	b.n	8003740 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003772:	f000 000f 	and.w	r0, r0, #15
 8003776:	0109      	lsls	r1, r1, #4
 8003778:	b2c9      	uxtb	r1, r1
 800377a:	4b02      	ldr	r3, [pc, #8]	; (8003784 <HAL_NVIC_SetPriority+0x60>)
 800377c:	5419      	strb	r1, [r3, r0]
 800377e:	e7f4      	b.n	800376a <HAL_NVIC_SetPriority+0x46>
 8003780:	e000ed00 	.word	0xe000ed00
 8003784:	e000ed14 	.word	0xe000ed14

08003788 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003788:	0942      	lsrs	r2, r0, #5
 800378a:	f000 001f 	and.w	r0, r0, #31
 800378e:	2301      	movs	r3, #1
 8003790:	fa03 f000 	lsl.w	r0, r3, r0
 8003794:	4b01      	ldr	r3, [pc, #4]	; (800379c <HAL_NVIC_EnableIRQ+0x14>)
 8003796:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100

080037a0 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80037a0:	0943      	lsrs	r3, r0, #5
 80037a2:	f000 001f 	and.w	r0, r0, #31
 80037a6:	2201      	movs	r2, #1
 80037a8:	fa02 f000 	lsl.w	r0, r2, r0
 80037ac:	3320      	adds	r3, #32
 80037ae:	4a02      	ldr	r2, [pc, #8]	; (80037b8 <HAL_NVIC_DisableIRQ+0x18>)
 80037b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	e000e100 	.word	0xe000e100

080037bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037bc:	3801      	subs	r0, #1
 80037be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80037c2:	d20a      	bcs.n	80037da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c4:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_SYSTICK_Config+0x24>)
 80037c6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c8:	21f0      	movs	r1, #240	; 0xf0
 80037ca:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <HAL_SYSTICK_Config+0x28>)
 80037cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d0:	2000      	movs	r0, #0
 80037d2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037d4:	2207      	movs	r2, #7
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80037da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80037e8:	2804      	cmp	r0, #4
 80037ea:	d005      	beq.n	80037f8 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80037ec:	4a05      	ldr	r2, [pc, #20]	; (8003804 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80037ee:	6813      	ldr	r3, [r2, #0]
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80037f8:	4a02      	ldr	r2, [pc, #8]	; (8003804 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	f043 0304 	orr.w	r3, r3, #4
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4770      	bx	lr
 8003804:	e000e010 	.word	0xe000e010

08003808 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003808:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800380a:	f7ff f9a1 	bl	8002b50 <HAL_SYSTICK_Callback>
 800380e:	bd08      	pop	{r3, pc}

08003810 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003810:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003812:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d003      	beq.n	8003824 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800381c:	2304      	movs	r3, #4
 800381e:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8003820:	2001      	movs	r0, #1
 8003822:	bd08      	pop	{r3, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003824:	6802      	ldr	r2, [r0, #0]
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	f023 030e 	bic.w	r3, r3, #14
 800382c:	6013      	str	r3, [r2, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800382e:	6802      	ldr	r2, [r0, #0]
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003838:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800383a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800383c:	f003 031c 	and.w	r3, r3, #28
 8003840:	2201      	movs	r2, #1
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	604b      	str	r3, [r1, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003848:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800384c:	2300      	movs	r3, #0
 800384e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003852:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003854:	b113      	cbz	r3, 800385c <HAL_DMA_Abort_IT+0x4c>
    {
      hdma->XferAbortCallback(hdma);
 8003856:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2000      	movs	r0, #0
 800385a:	bd08      	pop	{r3, pc}
 800385c:	2000      	movs	r0, #0
    }
  }
  return status;
}
 800385e:	bd08      	pop	{r3, pc}

08003860 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003860:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003862:	4c05      	ldr	r4, [pc, #20]	; (8003878 <FLASH_Program_DoubleWord+0x18>)
 8003864:	6961      	ldr	r1, [r4, #20]
 8003866:	f041 0101 	orr.w	r1, r1, #1
 800386a:	6161      	str	r1, [r4, #20]

  /* Program the double word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800386c:	6002      	str	r2, [r0, #0]
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800386e:	6043      	str	r3, [r0, #4]
}
 8003870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40022000 	.word	0x40022000

0800387c <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800387c:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <FLASH_Program_Fast+0x24>)
 800387e:	6953      	ldr	r3, [r2, #20]
 8003880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003884:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003886:	b672      	cpsid	i
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003888:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800388a:	f851 2b04 	ldr.w	r2, [r1], #4
 800388e:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003892:	3b01      	subs	r3, #1
  } while (row_index != 0U);
 8003894:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003898:	d1f7      	bne.n	800388a <FLASH_Program_Fast+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 800389a:	b662      	cpsie	i
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40022000 	.word	0x40022000

080038a4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_FLASH_Unlock+0x28>)
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	db01      	blt.n	80038b0 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80038ac:	2000      	movs	r0, #0
 80038ae:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_FLASH_Unlock+0x28>)
 80038b2:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <HAL_FLASH_Unlock+0x2c>)
 80038b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80038b6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80038ba:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db01      	blt.n	80038c6 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2000      	movs	r0, #0
 80038c4:	4770      	bx	lr
      status = HAL_ERROR;
 80038c6:	2001      	movs	r0, #1
}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40022000 	.word	0x40022000
 80038d0:	45670123 	.word	0x45670123

080038d4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80038d4:	4a03      	ldr	r2, [pc, #12]	; (80038e4 <HAL_FLASH_Lock+0x10>)
 80038d6:	6953      	ldr	r3, [r2, #20]
 80038d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038dc:	6153      	str	r3, [r2, #20]
}
 80038de:	2000      	movs	r0, #0
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40022000 	.word	0x40022000

080038e8 <FLASH_WaitForLastOperation>:
{
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80038ec:	f7ff fef4 	bl	80036d8 <HAL_GetTick>
 80038f0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80038f2:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <FLASH_WaitForLastOperation+0x88>)
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80038fa:	d009      	beq.n	8003910 <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 80038fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003900:	d0f7      	beq.n	80038f2 <FLASH_WaitForLastOperation+0xa>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8003902:	f7ff fee9 	bl	80036d8 <HAL_GetTick>
 8003906:	1b40      	subs	r0, r0, r5
 8003908:	4284      	cmp	r4, r0
 800390a:	d8f2      	bhi.n	80038f2 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800390c:	2003      	movs	r0, #3
 800390e:	bd38      	pop	{r3, r4, r5, pc}
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003910:	4a17      	ldr	r2, [pc, #92]	; (8003970 <FLASH_WaitForLastOperation+0x88>)
 8003912:	6913      	ldr	r3, [r2, #16]
 8003914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003918:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800391c:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8003920:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8003924:	6992      	ldr	r2, [r2, #24]
 8003926:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
  if(error != 0u)
 800392a:	4313      	orrs	r3, r2
 800392c:	d011      	beq.n	8003952 <FLASH_WaitForLastOperation+0x6a>
    pFlash.ErrorCode |= error;
 800392e:	4911      	ldr	r1, [pc, #68]	; (8003974 <FLASH_WaitForLastOperation+0x8c>)
 8003930:	684a      	ldr	r2, [r1, #4]
 8003932:	431a      	orrs	r2, r3
 8003934:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8003936:	f013 4240 	ands.w	r2, r3, #3221225472	; 0xc0000000
 800393a:	d003      	beq.n	8003944 <FLASH_WaitForLastOperation+0x5c>
 800393c:	490c      	ldr	r1, [pc, #48]	; (8003970 <FLASH_WaitForLastOperation+0x88>)
 800393e:	6988      	ldr	r0, [r1, #24]
 8003940:	4302      	orrs	r2, r0
 8003942:	618a      	str	r2, [r1, #24]
 8003944:	f033 4340 	bics.w	r3, r3, #3221225472	; 0xc0000000
 8003948:	d00d      	beq.n	8003966 <FLASH_WaitForLastOperation+0x7e>
 800394a:	4a09      	ldr	r2, [pc, #36]	; (8003970 <FLASH_WaitForLastOperation+0x88>)
 800394c:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 800394e:	2001      	movs	r0, #1
 8003950:	bd38      	pop	{r3, r4, r5, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <FLASH_WaitForLastOperation+0x88>)
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f013 0f01 	tst.w	r3, #1
 800395a:	d006      	beq.n	800396a <FLASH_WaitForLastOperation+0x82>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800395c:	2201      	movs	r2, #1
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <FLASH_WaitForLastOperation+0x88>)
 8003960:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8003962:	2000      	movs	r0, #0
 8003964:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003966:	2001      	movs	r0, #1
 8003968:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800396a:	2000      	movs	r0, #0
}
 800396c:	bd38      	pop	{r3, r4, r5, pc}
 800396e:	bf00      	nop
 8003970:	40022000 	.word	0x40022000
 8003974:	2000014c 	.word	0x2000014c

08003978 <HAL_FLASH_Program>:
{
 8003978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800397c:	4c28      	ldr	r4, [pc, #160]	; (8003a20 <HAL_FLASH_Program+0xa8>)
 800397e:	7824      	ldrb	r4, [r4, #0]
 8003980:	2c01      	cmp	r4, #1
 8003982:	d103      	bne.n	800398c <HAL_FLASH_Program+0x14>
 8003984:	2402      	movs	r4, #2
}
 8003986:	4620      	mov	r0, r4
 8003988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800398c:	4698      	mov	r8, r3
 800398e:	4617      	mov	r7, r2
 8003990:	460e      	mov	r6, r1
 8003992:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8003994:	2201      	movs	r2, #1
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <HAL_FLASH_Program+0xa8>)
 8003998:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800399a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800399e:	f7ff ffa3 	bl	80038e8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80039a2:	4604      	mov	r4, r0
 80039a4:	bb08      	cbnz	r0, 80039ea <HAL_FLASH_Program+0x72>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039a6:	2200      	movs	r2, #0
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <HAL_FLASH_Program+0xa8>)
 80039aa:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80039ac:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_FLASH_Program+0xac>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80039b4:	d01d      	beq.n	80039f2 <HAL_FLASH_Program+0x7a>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80039b6:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <HAL_FLASH_Program+0xac>)
 80039b8:	6813      	ldr	r3, [r2, #0]
 80039ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039be:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80039c0:	2202      	movs	r2, #2
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <HAL_FLASH_Program+0xa8>)
 80039c4:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80039c6:	b1c5      	cbz	r5, 80039fa <HAL_FLASH_Program+0x82>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80039c8:	1e6b      	subs	r3, r5, #1
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d91c      	bls.n	8003a08 <HAL_FLASH_Program+0x90>
  uint32_t prog_bit = 0;
 80039ce:	2500      	movs	r5, #0
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80039d4:	f7ff ff88 	bl	80038e8 <FLASH_WaitForLastOperation>
 80039d8:	4604      	mov	r4, r0
    if (prog_bit != 0U)
 80039da:	b125      	cbz	r5, 80039e6 <HAL_FLASH_Program+0x6e>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80039dc:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <HAL_FLASH_Program+0xac>)
 80039de:	6953      	ldr	r3, [r2, #20]
 80039e0:	ea23 0505 	bic.w	r5, r3, r5
 80039e4:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 80039e6:	f000 f81f 	bl	8003a28 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80039ea:	2200      	movs	r2, #0
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <HAL_FLASH_Program+0xa8>)
 80039ee:	701a      	strb	r2, [r3, #0]
  return status;
 80039f0:	e7c9      	b.n	8003986 <HAL_FLASH_Program+0xe>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80039f2:	2200      	movs	r2, #0
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_FLASH_Program+0xa8>)
 80039f6:	771a      	strb	r2, [r3, #28]
 80039f8:	e7e5      	b.n	80039c6 <HAL_FLASH_Program+0x4e>
      FLASH_Program_DoubleWord(Address, Data);
 80039fa:	463a      	mov	r2, r7
 80039fc:	4643      	mov	r3, r8
 80039fe:	4630      	mov	r0, r6
 8003a00:	f7ff ff2e 	bl	8003860 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003a04:	2501      	movs	r5, #1
 8003a06:	e7e3      	b.n	80039d0 <HAL_FLASH_Program+0x58>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003a08:	4639      	mov	r1, r7
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f7ff ff36 	bl	800387c <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003a10:	2d02      	cmp	r5, #2
 8003a12:	d001      	beq.n	8003a18 <HAL_FLASH_Program+0xa0>
  uint32_t prog_bit = 0;
 8003a14:	2500      	movs	r5, #0
 8003a16:	e7db      	b.n	80039d0 <HAL_FLASH_Program+0x58>
        prog_bit = FLASH_CR_FSTPG;
 8003a18:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8003a1c:	e7d8      	b.n	80039d0 <HAL_FLASH_Program+0x58>
 8003a1e:	bf00      	nop
 8003a20:	2000014c 	.word	0x2000014c
 8003a24:	40022000 	.word	0x40022000

08003a28 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003a28:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <FLASH_FlushCaches+0x58>)
 8003a2a:	7f1b      	ldrb	r3, [r3, #28]
 8003a2c:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d009      	beq.n	8003a46 <FLASH_FlushCaches+0x1e>
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d007      	beq.n	8003a46 <FLASH_FlushCaches+0x1e>
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 8003a36:	3b02      	subs	r3, #2
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d911      	bls.n	8003a62 <FLASH_FlushCaches+0x3a>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003a3e:	2200      	movs	r2, #0
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <FLASH_FlushCaches+0x58>)
 8003a42:	771a      	strb	r2, [r3, #28]
 8003a44:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003a46:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <FLASH_FlushCaches+0x5c>)
 8003a48:	6811      	ldr	r1, [r2, #0]
 8003a4a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003a4e:	6011      	str	r1, [r2, #0]
 8003a50:	6811      	ldr	r1, [r2, #0]
 8003a52:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003a56:	6011      	str	r1, [r2, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a58:	6811      	ldr	r1, [r2, #0]
 8003a5a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003a5e:	6011      	str	r1, [r2, #0]
 8003a60:	e7e9      	b.n	8003a36 <FLASH_FlushCaches+0xe>
    __HAL_FLASH_DATA_CACHE_RESET();
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <FLASH_FlushCaches+0x5c>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a72:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e7df      	b.n	8003a3e <FLASH_FlushCaches+0x16>
 8003a7e:	bf00      	nop
 8003a80:	2000014c 	.word	0x2000014c
 8003a84:	40022000 	.word	0x40022000

08003a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8a:	b083      	sub	sp, #12
  uint32_t position = 0x00;
 8003a8c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003a8e:	e08c      	b.n	8003baa <HAL_GPIO_Init+0x122>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a90:	08de      	lsrs	r6, r3, #3
 8003a92:	3608      	adds	r6, #8
 8003a94:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a98:	f003 0e07 	and.w	lr, r3, #7
 8003a9c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003aa0:	270f      	movs	r7, #15
 8003aa2:	fa07 f70e 	lsl.w	r7, r7, lr
 8003aa6:	ea24 0407 	bic.w	r4, r4, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003aaa:	690f      	ldr	r7, [r1, #16]
 8003aac:	fa07 f70e 	lsl.w	r7, r7, lr
 8003ab0:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3] = temp;
 8003ab2:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
 8003ab6:	e087      	b.n	8003bc8 <HAL_GPIO_Init+0x140>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8003aba:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8003abc:	68cf      	ldr	r7, [r1, #12]
 8003abe:	fa07 f70e 	lsl.w	r7, r7, lr
 8003ac2:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8003ac4:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ac8:	ea26 0505 	bic.w	r5, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003acc:	684e      	ldr	r6, [r1, #4]
 8003ace:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8003ad2:	409e      	lsls	r6, r3
 8003ad4:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8003ad6:	6045      	str	r5, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ad8:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8003ada:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003adc:	688d      	ldr	r5, [r1, #8]
 8003ade:	fa05 f50e 	lsl.w	r5, r5, lr
 8003ae2:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8003ae4:	60c4      	str	r4, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ae6:	684c      	ldr	r4, [r1, #4]
 8003ae8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8003aec:	d05c      	beq.n	8003ba8 <HAL_GPIO_Init+0x120>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aee:	4c4a      	ldr	r4, [pc, #296]	; (8003c18 <HAL_GPIO_Init+0x190>)
 8003af0:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003af2:	f045 0501 	orr.w	r5, r5, #1
 8003af6:	6625      	str	r5, [r4, #96]	; 0x60
 8003af8:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8003afa:	f004 0401 	and.w	r4, r4, #1
 8003afe:	9401      	str	r4, [sp, #4]
 8003b00:	9c01      	ldr	r4, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b02:	089d      	lsrs	r5, r3, #2
 8003b04:	1cae      	adds	r6, r5, #2
 8003b06:	4c45      	ldr	r4, [pc, #276]	; (8003c1c <HAL_GPIO_Init+0x194>)
 8003b08:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b0c:	f003 0603 	and.w	r6, r3, #3
 8003b10:	00b6      	lsls	r6, r6, #2
 8003b12:	270f      	movs	r7, #15
 8003b14:	40b7      	lsls	r7, r6
 8003b16:	ea24 0407 	bic.w	r4, r4, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8003b1a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003b1e:	d070      	beq.n	8003c02 <HAL_GPIO_Init+0x17a>
 8003b20:	4f3f      	ldr	r7, [pc, #252]	; (8003c20 <HAL_GPIO_Init+0x198>)
 8003b22:	42b8      	cmp	r0, r7
 8003b24:	d06f      	beq.n	8003c06 <HAL_GPIO_Init+0x17e>
 8003b26:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003b2a:	42b8      	cmp	r0, r7
 8003b2c:	d06d      	beq.n	8003c0a <HAL_GPIO_Init+0x182>
 8003b2e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003b32:	42b8      	cmp	r0, r7
 8003b34:	d06b      	beq.n	8003c0e <HAL_GPIO_Init+0x186>
 8003b36:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003b3a:	42b8      	cmp	r0, r7
 8003b3c:	d05f      	beq.n	8003bfe <HAL_GPIO_Init+0x176>
 8003b3e:	2707      	movs	r7, #7
 8003b40:	fa07 f606 	lsl.w	r6, r7, r6
 8003b44:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8003b46:	3502      	adds	r5, #2
 8003b48:	4e34      	ldr	r6, [pc, #208]	; (8003c1c <HAL_GPIO_Init+0x194>)
 8003b4a:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b4e:	4c35      	ldr	r4, [pc, #212]	; (8003c24 <HAL_GPIO_Init+0x19c>)
 8003b50:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8003b52:	43d4      	mvns	r4, r2
 8003b54:	ea05 0604 	and.w	r6, r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b58:	684f      	ldr	r7, [r1, #4]
 8003b5a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003b5e:	d001      	beq.n	8003b64 <HAL_GPIO_Init+0xdc>
        {
          temp |= iocurrent;
 8003b60:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 8003b64:	4d2f      	ldr	r5, [pc, #188]	; (8003c24 <HAL_GPIO_Init+0x19c>)
 8003b66:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR1;
 8003b68:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8003b6a:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b6e:	684f      	ldr	r7, [r1, #4]
 8003b70:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003b74:	d001      	beq.n	8003b7a <HAL_GPIO_Init+0xf2>
        {
          temp |= iocurrent;
 8003b76:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8003b7a:	4d2a      	ldr	r5, [pc, #168]	; (8003c24 <HAL_GPIO_Init+0x19c>)
 8003b7c:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b7e:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8003b80:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b84:	684f      	ldr	r7, [r1, #4]
 8003b86:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003b8a:	d001      	beq.n	8003b90 <HAL_GPIO_Init+0x108>
        {
          temp |= iocurrent;
 8003b8c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003b90:	4d24      	ldr	r5, [pc, #144]	; (8003c24 <HAL_GPIO_Init+0x19c>)
 8003b92:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8003b94:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8003b96:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b98:	684e      	ldr	r6, [r1, #4]
 8003b9a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003b9e:	d001      	beq.n	8003ba4 <HAL_GPIO_Init+0x11c>
        {
          temp |= iocurrent;
 8003ba0:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_GPIO_Init+0x19c>)
 8003ba6:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8003ba8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003baa:	680a      	ldr	r2, [r1, #0]
 8003bac:	fa32 f403 	lsrs.w	r4, r2, r3
 8003bb0:	d02f      	beq.n	8003c12 <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003bb2:	2501      	movs	r5, #1
 8003bb4:	409d      	lsls	r5, r3
    if(iocurrent)
 8003bb6:	402a      	ands	r2, r5
 8003bb8:	d0f6      	beq.n	8003ba8 <HAL_GPIO_Init+0x120>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bba:	684c      	ldr	r4, [r1, #4]
 8003bbc:	2c02      	cmp	r4, #2
 8003bbe:	f43f af67 	beq.w	8003a90 <HAL_GPIO_Init+0x8>
 8003bc2:	2c12      	cmp	r4, #18
 8003bc4:	f43f af64 	beq.w	8003a90 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8003bc8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8003bca:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003bce:	2403      	movs	r4, #3
 8003bd0:	fa04 f40e 	lsl.w	r4, r4, lr
 8003bd4:	43e4      	mvns	r4, r4
 8003bd6:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bd8:	684f      	ldr	r7, [r1, #4]
 8003bda:	f007 0703 	and.w	r7, r7, #3
 8003bde:	fa07 f70e 	lsl.w	r7, r7, lr
 8003be2:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 8003be4:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003be6:	684e      	ldr	r6, [r1, #4]
 8003be8:	1e77      	subs	r7, r6, #1
 8003bea:	2f01      	cmp	r7, #1
 8003bec:	f67f af64 	bls.w	8003ab8 <HAL_GPIO_Init+0x30>
 8003bf0:	2e11      	cmp	r6, #17
 8003bf2:	f43f af61 	beq.w	8003ab8 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bf6:	2e12      	cmp	r6, #18
 8003bf8:	f47f af6e 	bne.w	8003ad8 <HAL_GPIO_Init+0x50>
 8003bfc:	e75c      	b.n	8003ab8 <HAL_GPIO_Init+0x30>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8003bfe:	2704      	movs	r7, #4
 8003c00:	e79e      	b.n	8003b40 <HAL_GPIO_Init+0xb8>
 8003c02:	2700      	movs	r7, #0
 8003c04:	e79c      	b.n	8003b40 <HAL_GPIO_Init+0xb8>
 8003c06:	2701      	movs	r7, #1
 8003c08:	e79a      	b.n	8003b40 <HAL_GPIO_Init+0xb8>
 8003c0a:	2702      	movs	r7, #2
 8003c0c:	e798      	b.n	8003b40 <HAL_GPIO_Init+0xb8>
 8003c0e:	2703      	movs	r7, #3
 8003c10:	e796      	b.n	8003b40 <HAL_GPIO_Init+0xb8>
  }
}
 8003c12:	b003      	add	sp, #12
 8003c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40010000 	.word	0x40010000
 8003c20:	48000400 	.word	0x48000400
 8003c24:	40010400 	.word	0x40010400

08003c28 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c28:	6903      	ldr	r3, [r0, #16]
 8003c2a:	4219      	tst	r1, r3
 8003c2c:	d101      	bne.n	8003c32 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c2e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003c30:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8003c32:	2001      	movs	r0, #1
 8003c34:	4770      	bx	lr

08003c36 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c36:	b90a      	cbnz	r2, 8003c3c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c38:	6281      	str	r1, [r0, #40]	; 0x28
 8003c3a:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c3c:	6181      	str	r1, [r0, #24]
 8003c3e:	4770      	bx	lr

08003c40 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003c40:	6943      	ldr	r3, [r0, #20]
 8003c42:	4059      	eors	r1, r3
 8003c44:	6141      	str	r1, [r0, #20]
 8003c46:	4770      	bx	lr

08003c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c48:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	4203      	tst	r3, r0
 8003c50:	d100      	bne.n	8003c54 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8003c52:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003c56:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c58:	f7fe ff82 	bl	8002b60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c5c:	e7f9      	b.n	8003c52 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003c5e:	bf00      	nop
 8003c60:	40010400 	.word	0x40010400

08003c64 <HAL_PWR_EnableWakeUpPin>:
{
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity)); 
  
  /* Specifies the Wake-Up pin polarity for the event detection 
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT)); 
 8003c64:	4a06      	ldr	r2, [pc, #24]	; (8003c80 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8003c66:	68d3      	ldr	r3, [r2, #12]
 8003c68:	f000 011f 	and.w	r1, r0, #31
 8003c6c:	ea23 0301 	bic.w	r3, r3, r1
 8003c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8003c74:	60d0      	str	r0, [r2, #12]
    
  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8003c76:	6893      	ldr	r3, [r2, #8]
 8003c78:	4319      	orrs	r1, r3
 8003c7a:	6091      	str	r1, [r2, #8]
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40007000 	.word	0x40007000

08003c84 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8003c84:	4a06      	ldr	r2, [pc, #24]	; (8003ca0 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 8003c86:	6813      	ldr	r3, [r2, #0]
 8003c88:	f023 0307 	bic.w	r3, r3, #7
 8003c8c:	f043 0303 	orr.w	r3, r3, #3
 8003c90:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003c92:	4a04      	ldr	r2, [pc, #16]	; (8003ca4 <HAL_PWR_EnterSTANDBYMode+0x20>)
 8003c94:	6913      	ldr	r3, [r2, #16]
 8003c96:	f043 0304 	orr.w	r3, r3, #4
 8003c9a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 8003c9c:	bf30      	wfi
 8003c9e:	4770      	bx	lr
 8003ca0:	40007000 	.word	0x40007000
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ca8:	4b02      	ldr	r3, [pc, #8]	; (8003cb4 <HAL_PWREx_GetVoltageRange+0xc>)
 8003caa:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8003cac:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40007000 	.word	0x40007000

08003cb8 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cb8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003cbc:	d00f      	beq.n	8003cde <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cca:	d037      	beq.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x84>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cd8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8003cda:	2000      	movs	r0, #0
 8003cdc:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cde:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cea:	d023      	beq.n	8003d34 <HAL_PWREx_ControlVoltageScaling+0x7c>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003cee:	6813      	ldr	r3, [r2, #0]
 8003cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cf8:	6013      	str	r3, [r2, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8003d02:	f502 325b 	add.w	r2, r2, #224256	; 0x36c00
 8003d06:	f202 2283 	addw	r2, r2, #643	; 0x283
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0c9a      	lsrs	r2, r3, #18
 8003d10:	2332      	movs	r3, #50	; 0x32
 8003d12:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8003d16:	e000      	b.n	8003d1a <HAL_PWREx_ControlVoltageScaling+0x62>
        wait_loop_index--;
 8003d18:	3b01      	subs	r3, #1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8003d1a:	b123      	cbz	r3, 8003d26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d1c:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003d1e:	6952      	ldr	r2, [r2, #20]
 8003d20:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003d24:	d1f8      	bne.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d2e:	d003      	beq.n	8003d38 <HAL_PWREx_ControlVoltageScaling+0x80>
        return HAL_TIMEOUT;
 8003d30:	2003      	movs	r0, #3
 8003d32:	4770      	bx	lr
  return HAL_OK;
 8003d34:	2000      	movs	r0, #0
 8003d36:	4770      	bx	lr
 8003d38:	2000      	movs	r0, #0
 8003d3a:	4770      	bx	lr
 8003d3c:	2000      	movs	r0, #0
}  
 8003d3e:	4770      	bx	lr
 8003d40:	40007000 	.word	0x40007000
 8003d44:	20000148 	.word	0x20000148

08003d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d48:	b530      	push	{r4, r5, lr}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	4605      	mov	r5, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d52:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003d56:	d00b      	beq.n	8003d70 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d58:	f7ff ffa6 	bl	8003ca8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d5c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003d60:	d017      	beq.n	8003d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d62:	2d80      	cmp	r5, #128	; 0x80
 8003d64:	d81f      	bhi.n	8003da6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d66:	d02d      	beq.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d68:	2d70      	cmp	r5, #112	; 0x70
 8003d6a:	d02d      	beq.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	e01b      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4c17      	ldr	r4, [pc, #92]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8003d72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d78:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d80:	9301      	str	r3, [sp, #4]
 8003d82:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003d84:	f7ff ff90 	bl	8003ca8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d90:	e7e4      	b.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8003d92:	2d80      	cmp	r5, #128	; 0x80
 8003d94:	d903      	bls.n	8003d9e <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8003d96:	2da0      	cmp	r5, #160	; 0xa0
 8003d98:	d903      	bls.n	8003da2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	e004      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d9e:	2100      	movs	r1, #0
 8003da0:	e002      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da2:	2101      	movs	r1, #1
 8003da4:	e000      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003da6:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003da8:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8003daa:	6813      	ldr	r3, [r2, #0]
 8003dac:	f023 0307 	bic.w	r3, r3, #7
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003db4:	6813      	ldr	r3, [r2, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	4299      	cmp	r1, r3
 8003dbc:	d006      	beq.n	8003dcc <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8003dbe:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8003dc0:	b003      	add	sp, #12
 8003dc2:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	e7ef      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dc8:	2101      	movs	r1, #1
 8003dca:	e7ed      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8003dcc:	2000      	movs	r0, #0
 8003dce:	e7f7      	b.n	8003dc0 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40022000 	.word	0x40022000

08003dd8 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003dd8:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f013 0f0c 	tst.w	r3, #12
 8003de0:	d01a      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x40>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003de2:	4b39      	ldr	r3, [pc, #228]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d00e      	beq.n	8003e0c <HAL_RCC_GetSysClockFreq+0x34>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003dee:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d02f      	beq.n	8003e5a <HAL_RCC_GetSysClockFreq+0x82>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003dfa:	4b33      	ldr	r3, [pc, #204]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d02c      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8003e06:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8003e08:	4601      	mov	r1, r0
 8003e0a:	e018      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x66>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8003e0c:	4b2e      	ldr	r3, [pc, #184]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d1ea      	bne.n	8003dee <HAL_RCC_GetSysClockFreq+0x16>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8003e18:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f013 0f08 	tst.w	r3, #8
 8003e20:	d114      	bne.n	8003e4c <HAL_RCC_GetSysClockFreq+0x74>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e22:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e28:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 8003e2c:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8003e32:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f013 0f0c 	tst.w	r3, #12
 8003e3a:	d00c      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x7e>
  uint32_t sysclockfreq = 0U;
 8003e3c:	2000      	movs	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003e3e:	4a22      	ldr	r2, [pc, #136]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e40:	6893      	ldr	r3, [r2, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	d00d      	beq.n	8003e66 <HAL_RCC_GetSysClockFreq+0x8e>
}
 8003e4a:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e54:	e7ea      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = msirange;
 8003e56:	4608      	mov	r0, r1
 8003e58:	e7f1      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSI_VALUE;
 8003e5a:	481d      	ldr	r0, [pc, #116]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	e7ee      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSE_VALUE;
 8003e60:	481c      	ldr	r0, [pc, #112]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xfc>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8003e62:	2100      	movs	r1, #0
 8003e64:	e7eb      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e66:	4613      	mov	r3, r2
 8003e68:	68d2      	ldr	r2, [r2, #12]
 8003e6a:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003e74:	3301      	adds	r3, #1
    switch (pllsource)
 8003e76:	2a02      	cmp	r2, #2
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0xb8>
 8003e7a:	2a03      	cmp	r2, #3
 8003e7c:	d01a      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xdc>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e82:	4a11      	ldr	r2, [pc, #68]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e84:	68d0      	ldr	r0, [r2, #12]
 8003e86:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003e8a:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0xca>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e90:	480f      	ldr	r0, [pc, #60]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	4a0c      	ldr	r2, [pc, #48]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e98:	68d0      	ldr	r0, [r2, #12]
 8003e9a:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003e9e:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003eaa:	3301      	adds	r3, #1
 8003eac:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003eae:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003eb2:	e7ca      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x72>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eb4:	4807      	ldr	r0, [pc, #28]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eba:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003ebc:	68d0      	ldr	r0, [r2, #12]
 8003ebe:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003ec2:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8003ec6:	e7ec      	b.n	8003ea2 <HAL_RCC_GetSysClockFreq+0xca>
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	08007448 	.word	0x08007448
 8003ed0:	00f42400 	.word	0x00f42400
 8003ed4:	007a1200 	.word	0x007a1200

08003ed8 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	f000 82d7 	beq.w	800448c <HAL_RCC_OscConfig+0x5b4>
{
 8003ede:	b570      	push	{r4, r5, r6, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ee4:	6803      	ldr	r3, [r0, #0]
 8003ee6:	f013 0f10 	tst.w	r3, #16
 8003eea:	d03f      	beq.n	8003f6c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8003eec:	4b97      	ldr	r3, [pc, #604]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f013 0f0c 	tst.w	r3, #12
 8003ef4:	f040 8092 	bne.w	800401c <HAL_RCC_OscConfig+0x144>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ef8:	4b94      	ldr	r3, [pc, #592]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f013 0f02 	tst.w	r3, #2
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_OscConfig+0x32>
 8003f02:	6983      	ldr	r3, [r0, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 82c3 	beq.w	8004490 <HAL_RCC_OscConfig+0x5b8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f0a:	6a20      	ldr	r0, [r4, #32]
 8003f0c:	4b8f      	ldr	r3, [pc, #572]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f013 0f08 	tst.w	r3, #8
 8003f14:	d062      	beq.n	8003fdc <HAL_RCC_OscConfig+0x104>
 8003f16:	4b8d      	ldr	r3, [pc, #564]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f1e:	4283      	cmp	r3, r0
 8003f20:	d263      	bcs.n	8003fea <HAL_RCC_OscConfig+0x112>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f22:	f7ff ff11 	bl	8003d48 <RCC_SetFlashLatencyFromMSIRange>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	f040 82b4 	bne.w	8004494 <HAL_RCC_OscConfig+0x5bc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f2c:	4b87      	ldr	r3, [pc, #540]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	f042 0208 	orr.w	r2, r2, #8
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003f3c:	6a21      	ldr	r1, [r4, #32]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003f48:	69e1      	ldr	r1, [r4, #28]
 8003f4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f4e:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f50:	f7ff ff42 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003f54:	4b7d      	ldr	r3, [pc, #500]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003f5c:	4a7c      	ldr	r2, [pc, #496]	; (8004150 <HAL_RCC_OscConfig+0x278>)
 8003f5e:	5cd3      	ldrb	r3, [r2, r3]
 8003f60:	40d8      	lsrs	r0, r3
 8003f62:	4b7c      	ldr	r3, [pc, #496]	; (8004154 <HAL_RCC_OscConfig+0x27c>)
 8003f64:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8003f66:	2000      	movs	r0, #0
 8003f68:	f7ff fb98 	bl	800369c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	f013 0f01 	tst.w	r3, #1
 8003f72:	f000 80a1 	beq.w	80040b8 <HAL_RCC_OscConfig+0x1e0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8003f76:	4b75      	ldr	r3, [pc, #468]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	f000 8091 	beq.w	80040a6 <HAL_RCC_OscConfig+0x1ce>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f84:	4b71      	ldr	r3, [pc, #452]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8003f8c:	2b0c      	cmp	r3, #12
 8003f8e:	f000 8083 	beq.w	8004098 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f92:	6863      	ldr	r3, [r4, #4]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	f000 80b5 	beq.w	8004106 <HAL_RCC_OscConfig+0x22e>
 8003f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa0:	f000 80b7 	beq.w	8004112 <HAL_RCC_OscConfig+0x23a>
 8003fa4:	4b69      	ldr	r3, [pc, #420]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fb4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80b7 	beq.w	800412c <HAL_RCC_OscConfig+0x254>
        tickstart = HAL_GetTick();
 8003fbe:	f7ff fb8b 	bl	80036d8 <HAL_GetTick>
 8003fc2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003fc4:	4b61      	ldr	r3, [pc, #388]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fcc:	d174      	bne.n	80040b8 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fce:	f7ff fb83 	bl	80036d8 <HAL_GetTick>
 8003fd2:	1b40      	subs	r0, r0, r5
 8003fd4:	2864      	cmp	r0, #100	; 0x64
 8003fd6:	d9f5      	bls.n	8003fc4 <HAL_RCC_OscConfig+0xec>
            return HAL_TIMEOUT;
 8003fd8:	2003      	movs	r0, #3
 8003fda:	e262      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fdc:	4b5b      	ldr	r3, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe8:	e799      	b.n	8003f1e <HAL_RCC_OscConfig+0x46>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fea:	4b58      	ldr	r3, [pc, #352]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	f042 0208 	orr.w	r2, r2, #8
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003ffa:	6a21      	ldr	r1, [r4, #32]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004006:	69e1      	ldr	r1, [r4, #28]
 8004008:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800400c:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800400e:	6a20      	ldr	r0, [r4, #32]
 8004010:	f7ff fe9a 	bl	8003d48 <RCC_SetFlashLatencyFromMSIRange>
 8004014:	2800      	cmp	r0, #0
 8004016:	d09b      	beq.n	8003f50 <HAL_RCC_OscConfig+0x78>
            return HAL_ERROR;
 8004018:	2001      	movs	r0, #1
 800401a:	e242      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800401c:	6983      	ldr	r3, [r0, #24]
 800401e:	b333      	cbz	r3, 800406e <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_MSI_ENABLE();
 8004020:	4a4a      	ldr	r2, [pc, #296]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800402a:	f7ff fb55 	bl	80036d8 <HAL_GetTick>
 800402e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8004030:	4b46      	ldr	r3, [pc, #280]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f013 0f02 	tst.w	r3, #2
 8004038:	d106      	bne.n	8004048 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800403a:	f7ff fb4d 	bl	80036d8 <HAL_GetTick>
 800403e:	1b40      	subs	r0, r0, r5
 8004040:	2802      	cmp	r0, #2
 8004042:	d9f5      	bls.n	8004030 <HAL_RCC_OscConfig+0x158>
            return HAL_TIMEOUT;
 8004044:	2003      	movs	r0, #3
 8004046:	e22c      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004048:	4b40      	ldr	r3, [pc, #256]	; (800414c <HAL_RCC_OscConfig+0x274>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	f042 0208 	orr.w	r2, r2, #8
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004058:	6a21      	ldr	r1, [r4, #32]
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004064:	69e1      	ldr	r1, [r4, #28]
 8004066:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	e77e      	b.n	8003f6c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_MSI_DISABLE();
 800406e:	4a37      	ldr	r2, [pc, #220]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8004070:	6813      	ldr	r3, [r2, #0]
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004078:	f7ff fb2e 	bl	80036d8 <HAL_GetTick>
 800407c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 800407e:	4b33      	ldr	r3, [pc, #204]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f013 0f02 	tst.w	r3, #2
 8004086:	f43f af71 	beq.w	8003f6c <HAL_RCC_OscConfig+0x94>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800408a:	f7ff fb25 	bl	80036d8 <HAL_GetTick>
 800408e:	1b40      	subs	r0, r0, r5
 8004090:	2802      	cmp	r0, #2
 8004092:	d9f4      	bls.n	800407e <HAL_RCC_OscConfig+0x1a6>
            return HAL_TIMEOUT;
 8004094:	2003      	movs	r0, #3
 8004096:	e204      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004098:	4b2c      	ldr	r3, [pc, #176]	; (800414c <HAL_RCC_OscConfig+0x274>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	f47f af76 	bne.w	8003f92 <HAL_RCC_OscConfig+0xba>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a6:	4b29      	ldr	r3, [pc, #164]	; (800414c <HAL_RCC_OscConfig+0x274>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_OscConfig+0x1e0>
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 81f0 	beq.w	8004498 <HAL_RCC_OscConfig+0x5c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	f013 0f02 	tst.w	r3, #2
 80040be:	d062      	beq.n	8004186 <HAL_RCC_OscConfig+0x2ae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80040c0:	4b22      	ldr	r3, [pc, #136]	; (800414c <HAL_RCC_OscConfig+0x274>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d04b      	beq.n	8004164 <HAL_RCC_OscConfig+0x28c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80040cc:	4b1f      	ldr	r3, [pc, #124]	; (800414c <HAL_RCC_OscConfig+0x274>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 80040d4:	2b0c      	cmp	r3, #12
 80040d6:	d03f      	beq.n	8004158 <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d8:	68e3      	ldr	r3, [r4, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d079      	beq.n	80041d2 <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_HSI_ENABLE();
 80040de:	4a1b      	ldr	r2, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x274>)
 80040e0:	6813      	ldr	r3, [r2, #0]
 80040e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040e8:	f7ff faf6 	bl	80036d8 <HAL_GetTick>
 80040ec:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80040ee:	4b17      	ldr	r3, [pc, #92]	; (800414c <HAL_RCC_OscConfig+0x274>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80040f6:	d163      	bne.n	80041c0 <HAL_RCC_OscConfig+0x2e8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f8:	f7ff faee 	bl	80036d8 <HAL_GetTick>
 80040fc:	1b40      	subs	r0, r0, r5
 80040fe:	2802      	cmp	r0, #2
 8004100:	d9f5      	bls.n	80040ee <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8004102:	2003      	movs	r0, #3
 8004104:	e1cd      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004106:	4a11      	ldr	r2, [pc, #68]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8004108:	6813      	ldr	r3, [r2, #0]
 800410a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	e751      	b.n	8003fb6 <HAL_RCC_OscConfig+0xde>
 8004112:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004116:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e744      	b.n	8003fb6 <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 800412c:	f7ff fad4 	bl	80036d8 <HAL_GetTick>
 8004130:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x274>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800413a:	d0bd      	beq.n	80040b8 <HAL_RCC_OscConfig+0x1e0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800413c:	f7ff facc 	bl	80036d8 <HAL_GetTick>
 8004140:	1b40      	subs	r0, r0, r5
 8004142:	2864      	cmp	r0, #100	; 0x64
 8004144:	d9f5      	bls.n	8004132 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8004146:	2003      	movs	r0, #3
 8004148:	e1ab      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
 8004150:	08007430 	.word	0x08007430
 8004154:	20000148 	.word	0x20000148
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004158:	4bb1      	ldr	r3, [pc, #708]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d1b9      	bne.n	80040d8 <HAL_RCC_OscConfig+0x200>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004164:	4bae      	ldr	r3, [pc, #696]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800416c:	d003      	beq.n	8004176 <HAL_RCC_OscConfig+0x29e>
 800416e:	68e3      	ldr	r3, [r4, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8193 	beq.w	800449c <HAL_RCC_OscConfig+0x5c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004176:	4aaa      	ldr	r2, [pc, #680]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004178:	6853      	ldr	r3, [r2, #4]
 800417a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800417e:	6921      	ldr	r1, [r4, #16]
 8004180:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004184:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	f013 0f08 	tst.w	r3, #8
 800418c:	d04c      	beq.n	8004228 <HAL_RCC_OscConfig+0x350>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800418e:	6963      	ldr	r3, [r4, #20]
 8004190:	b39b      	cbz	r3, 80041fa <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_LSI_ENABLE();
 8004192:	4aa3      	ldr	r2, [pc, #652]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004194:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80041a0:	f7ff fa9a 	bl	80036d8 <HAL_GetTick>
 80041a4:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80041a6:	4b9e      	ldr	r3, [pc, #632]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80041a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ac:	f013 0f02 	tst.w	r3, #2
 80041b0:	d13a      	bne.n	8004228 <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b2:	f7ff fa91 	bl	80036d8 <HAL_GetTick>
 80041b6:	1b40      	subs	r0, r0, r5
 80041b8:	2802      	cmp	r0, #2
 80041ba:	d9f4      	bls.n	80041a6 <HAL_RCC_OscConfig+0x2ce>
          return HAL_TIMEOUT;
 80041bc:	2003      	movs	r0, #3
 80041be:	e170      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c0:	4a97      	ldr	r2, [pc, #604]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80041c2:	6853      	ldr	r3, [r2, #4]
 80041c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041c8:	6921      	ldr	r1, [r4, #16]
 80041ca:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80041ce:	6053      	str	r3, [r2, #4]
 80041d0:	e7d9      	b.n	8004186 <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_HSI_DISABLE();
 80041d2:	4a93      	ldr	r2, [pc, #588]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80041d4:	6813      	ldr	r3, [r2, #0]
 80041d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041da:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80041dc:	f7ff fa7c 	bl	80036d8 <HAL_GetTick>
 80041e0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80041e2:	4b8f      	ldr	r3, [pc, #572]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80041ea:	d0cc      	beq.n	8004186 <HAL_RCC_OscConfig+0x2ae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ec:	f7ff fa74 	bl	80036d8 <HAL_GetTick>
 80041f0:	1b40      	subs	r0, r0, r5
 80041f2:	2802      	cmp	r0, #2
 80041f4:	d9f5      	bls.n	80041e2 <HAL_RCC_OscConfig+0x30a>
            return HAL_TIMEOUT;
 80041f6:	2003      	movs	r0, #3
 80041f8:	e153      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_LSI_DISABLE();
 80041fa:	4a89      	ldr	r2, [pc, #548]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80041fc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004200:	f023 0301 	bic.w	r3, r3, #1
 8004204:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004208:	f7ff fa66 	bl	80036d8 <HAL_GetTick>
 800420c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800420e:	4b84      	ldr	r3, [pc, #528]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004214:	f013 0f02 	tst.w	r3, #2
 8004218:	d006      	beq.n	8004228 <HAL_RCC_OscConfig+0x350>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421a:	f7ff fa5d 	bl	80036d8 <HAL_GetTick>
 800421e:	1b40      	subs	r0, r0, r5
 8004220:	2802      	cmp	r0, #2
 8004222:	d9f4      	bls.n	800420e <HAL_RCC_OscConfig+0x336>
          return HAL_TIMEOUT;
 8004224:	2003      	movs	r0, #3
 8004226:	e13c      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	f013 0f04 	tst.w	r3, #4
 800422e:	d07a      	beq.n	8004326 <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004230:	4b7b      	ldr	r3, [pc, #492]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004238:	d136      	bne.n	80042a8 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	4b79      	ldr	r3, [pc, #484]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 800423c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800423e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004242:	659a      	str	r2, [r3, #88]	; 0x58
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800424e:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	4b74      	ldr	r3, [pc, #464]	; (8004424 <HAL_RCC_OscConfig+0x54c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004258:	d028      	beq.n	80042ac <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425a:	68a3      	ldr	r3, [r4, #8]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d039      	beq.n	80042d4 <HAL_RCC_OscConfig+0x3fc>
 8004260:	2b05      	cmp	r3, #5
 8004262:	d03f      	beq.n	80042e4 <HAL_RCC_OscConfig+0x40c>
 8004264:	4b6e      	ldr	r3, [pc, #440]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004266:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004272:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004276:	f022 0204 	bic.w	r2, r2, #4
 800427a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800427e:	68a3      	ldr	r3, [r4, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d03d      	beq.n	8004300 <HAL_RCC_OscConfig+0x428>
      tickstart = HAL_GetTick();
 8004284:	f7ff fa28 	bl	80036d8 <HAL_GetTick>
 8004288:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800428a:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004290:	f013 0f02 	tst.w	r3, #2
 8004294:	d146      	bne.n	8004324 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7ff fa1f 	bl	80036d8 <HAL_GetTick>
 800429a:	1b80      	subs	r0, r0, r6
 800429c:	f241 3388 	movw	r3, #5000	; 0x1388
 80042a0:	4298      	cmp	r0, r3
 80042a2:	d9f2      	bls.n	800428a <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 80042a4:	2003      	movs	r0, #3
 80042a6:	e0fc      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
    FlagStatus       pwrclkchanged = RESET;
 80042a8:	2500      	movs	r5, #0
 80042aa:	e7d1      	b.n	8004250 <HAL_RCC_OscConfig+0x378>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042ac:	4a5d      	ldr	r2, [pc, #372]	; (8004424 <HAL_RCC_OscConfig+0x54c>)
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80042b6:	f7ff fa0f 	bl	80036d8 <HAL_GetTick>
 80042ba:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042bc:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_RCC_OscConfig+0x54c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80042c4:	d1c9      	bne.n	800425a <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c6:	f7ff fa07 	bl	80036d8 <HAL_GetTick>
 80042ca:	1b80      	subs	r0, r0, r6
 80042cc:	2802      	cmp	r0, #2
 80042ce:	d9f5      	bls.n	80042bc <HAL_RCC_OscConfig+0x3e4>
          return HAL_TIMEOUT;
 80042d0:	2003      	movs	r0, #3
 80042d2:	e0e6      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d4:	4a52      	ldr	r2, [pc, #328]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80042d6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e2:	e7cc      	b.n	800427e <HAL_RCC_OscConfig+0x3a6>
 80042e4:	4b4e      	ldr	r3, [pc, #312]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80042e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042ea:	f042 0204 	orr.w	r2, r2, #4
 80042ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80042f2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80042fe:	e7be      	b.n	800427e <HAL_RCC_OscConfig+0x3a6>
      tickstart = HAL_GetTick();
 8004300:	f7ff f9ea 	bl	80036d8 <HAL_GetTick>
 8004304:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8004306:	4b46      	ldr	r3, [pc, #280]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	f013 0f02 	tst.w	r3, #2
 8004310:	d008      	beq.n	8004324 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004312:	f7ff f9e1 	bl	80036d8 <HAL_GetTick>
 8004316:	1b80      	subs	r0, r0, r6
 8004318:	f241 3388 	movw	r3, #5000	; 0x1388
 800431c:	4298      	cmp	r0, r3
 800431e:	d9f2      	bls.n	8004306 <HAL_RCC_OscConfig+0x42e>
          return HAL_TIMEOUT;
 8004320:	2003      	movs	r0, #3
 8004322:	e0be      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
    if(pwrclkchanged == SET)
 8004324:	b9e5      	cbnz	r5, 8004360 <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	f013 0f20 	tst.w	r3, #32
 800432c:	d035      	beq.n	800439a <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800432e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004330:	b1e3      	cbz	r3, 800436c <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 8004332:	4a3b      	ldr	r2, [pc, #236]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004334:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004340:	f7ff f9ca 	bl	80036d8 <HAL_GetTick>
 8004344:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8004346:	4b36      	ldr	r3, [pc, #216]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800434c:	f013 0f02 	tst.w	r3, #2
 8004350:	d123      	bne.n	800439a <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004352:	f7ff f9c1 	bl	80036d8 <HAL_GetTick>
 8004356:	1b40      	subs	r0, r0, r5
 8004358:	2802      	cmp	r0, #2
 800435a:	d9f4      	bls.n	8004346 <HAL_RCC_OscConfig+0x46e>
          return HAL_TIMEOUT;
 800435c:	2003      	movs	r0, #3
 800435e:	e0a0      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004360:	4a2f      	ldr	r2, [pc, #188]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004362:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004368:	6593      	str	r3, [r2, #88]	; 0x58
 800436a:	e7dc      	b.n	8004326 <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 800436c:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 800436e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8004372:	f023 0301 	bic.w	r3, r3, #1
 8004376:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 800437a:	f7ff f9ad 	bl	80036d8 <HAL_GetTick>
 800437e:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8004380:	4b27      	ldr	r3, [pc, #156]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004386:	f013 0f02 	tst.w	r3, #2
 800438a:	d006      	beq.n	800439a <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800438c:	f7ff f9a4 	bl	80036d8 <HAL_GetTick>
 8004390:	1b40      	subs	r0, r0, r5
 8004392:	2802      	cmp	r0, #2
 8004394:	d9f4      	bls.n	8004380 <HAL_RCC_OscConfig+0x4a8>
          return HAL_TIMEOUT;
 8004396:	2003      	movs	r0, #3
 8004398:	e083      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800439a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d07f      	beq.n	80044a0 <HAL_RCC_OscConfig+0x5c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043a0:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80043a2:	6892      	ldr	r2, [r2, #8]
 80043a4:	f002 020c 	and.w	r2, r2, #12
 80043a8:	2a0c      	cmp	r2, #12
 80043aa:	d07c      	beq.n	80044a6 <HAL_RCC_OscConfig+0x5ce>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d023      	beq.n	80043f8 <HAL_RCC_OscConfig+0x520>
        __HAL_RCC_PLL_DISABLE();
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80043b8:	601a      	str	r2, [r3, #0]
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80043c0:	d104      	bne.n	80043cc <HAL_RCC_OscConfig+0x4f4>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80043c2:	4a17      	ldr	r2, [pc, #92]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80043c4:	68d3      	ldr	r3, [r2, #12]
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80043cc:	4a14      	ldr	r2, [pc, #80]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80043ce:	68d3      	ldr	r3, [r2, #12]
 80043d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d8:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80043da:	f7ff f97d 	bl	80036d8 <HAL_GetTick>
 80043de:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80043e8:	d04e      	beq.n	8004488 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ea:	f7ff f975 	bl	80036d8 <HAL_GetTick>
 80043ee:	1b00      	subs	r0, r0, r4
 80043f0:	2802      	cmp	r0, #2
 80043f2:	d9f5      	bls.n	80043e0 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80043f4:	2003      	movs	r0, #3
 80043f6:	e054      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
        __HAL_RCC_PLL_DISABLE();
 80043f8:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 80043fa:	6813      	ldr	r3, [r2, #0]
 80043fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004400:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004402:	f7ff f969 	bl	80036d8 <HAL_GetTick>
 8004406:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_OscConfig+0x548>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004410:	d00a      	beq.n	8004428 <HAL_RCC_OscConfig+0x550>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004412:	f7ff f961 	bl	80036d8 <HAL_GetTick>
 8004416:	1b40      	subs	r0, r0, r5
 8004418:	2802      	cmp	r0, #2
 800441a:	d9f5      	bls.n	8004408 <HAL_RCC_OscConfig+0x530>
            return HAL_TIMEOUT;
 800441c:	2003      	movs	r0, #3
 800441e:	e040      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
 8004420:	40021000 	.word	0x40021000
 8004424:	40007000 	.word	0x40007000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004428:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800442a:	1e5a      	subs	r2, r3, #1
 800442c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004434:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004436:	4313      	orrs	r3, r2
 8004438:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800443a:	0852      	lsrs	r2, r2, #1
 800443c:	3a01      	subs	r2, #1
 800443e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004442:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004444:	0852      	lsrs	r2, r2, #1
 8004446:	3a01      	subs	r2, #1
 8004448:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800444c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800444e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004452:	4a16      	ldr	r2, [pc, #88]	; (80044ac <HAL_RCC_OscConfig+0x5d4>)
 8004454:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004456:	6813      	ldr	r3, [r2, #0]
 8004458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800445c:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800445e:	68d3      	ldr	r3, [r2, #12]
 8004460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004464:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004466:	f7ff f937 	bl	80036d8 <HAL_GetTick>
 800446a:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <HAL_RCC_OscConfig+0x5d4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004474:	d106      	bne.n	8004484 <HAL_RCC_OscConfig+0x5ac>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004476:	f7ff f92f 	bl	80036d8 <HAL_GetTick>
 800447a:	1b00      	subs	r0, r0, r4
 800447c:	2802      	cmp	r0, #2
 800447e:	d9f5      	bls.n	800446c <HAL_RCC_OscConfig+0x594>
            return HAL_TIMEOUT;
 8004480:	2003      	movs	r0, #3
 8004482:	e00e      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 8004484:	2000      	movs	r0, #0
 8004486:	e00c      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
 8004488:	2000      	movs	r0, #0
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
    return HAL_ERROR;
 800448c:	2001      	movs	r0, #1
 800448e:	4770      	bx	lr
        return HAL_ERROR;
 8004490:	2001      	movs	r0, #1
 8004492:	e006      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
            return HAL_ERROR;
 8004494:	2001      	movs	r0, #1
 8004496:	e004      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 8004498:	2001      	movs	r0, #1
 800449a:	e002      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
        return HAL_ERROR;
 800449c:	2001      	movs	r0, #1
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
  return HAL_OK;
 80044a0:	2000      	movs	r0, #0
}
 80044a2:	b002      	add	sp, #8
 80044a4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80044a6:	2001      	movs	r0, #1
 80044a8:	e7fb      	b.n	80044a2 <HAL_RCC_OscConfig+0x5ca>
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000

080044b0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80044b0:	2800      	cmp	r0, #0
 80044b2:	f000 8099 	beq.w	80045e8 <HAL_RCC_ClockConfig+0x138>
{
 80044b6:	b570      	push	{r4, r5, r6, lr}
 80044b8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044ba:	4b4d      	ldr	r3, [pc, #308]	; (80045f0 <HAL_RCC_ClockConfig+0x140>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	428b      	cmp	r3, r1
 80044c4:	d20c      	bcs.n	80044e0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4a4a      	ldr	r2, [pc, #296]	; (80045f0 <HAL_RCC_ClockConfig+0x140>)
 80044c8:	6813      	ldr	r3, [r2, #0]
 80044ca:	f023 0307 	bic.w	r3, r3, #7
 80044ce:	430b      	orrs	r3, r1
 80044d0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4299      	cmp	r1, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80044dc:	2001      	movs	r0, #1
 80044de:	bd70      	pop	{r4, r5, r6, pc}
 80044e0:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	f013 0f01 	tst.w	r3, #1
 80044e8:	d039      	beq.n	800455e <HAL_RCC_ClockConfig+0xae>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ea:	6863      	ldr	r3, [r4, #4]
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d009      	beq.n	8004504 <HAL_RCC_ClockConfig+0x54>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d026      	beq.n	8004542 <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044f4:	bb63      	cbnz	r3, 8004550 <HAL_RCC_ClockConfig+0xa0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 80044f6:	4a3f      	ldr	r2, [pc, #252]	; (80045f4 <HAL_RCC_ClockConfig+0x144>)
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	f012 0f02 	tst.w	r2, #2
 80044fe:	d106      	bne.n	800450e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 8004500:	2001      	movs	r0, #1
 8004502:	bd70      	pop	{r4, r5, r6, pc}
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8004504:	4a3b      	ldr	r2, [pc, #236]	; (80045f4 <HAL_RCC_ClockConfig+0x144>)
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800450c:	d06e      	beq.n	80045ec <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800450e:	4939      	ldr	r1, [pc, #228]	; (80045f4 <HAL_RCC_ClockConfig+0x144>)
 8004510:	688a      	ldr	r2, [r1, #8]
 8004512:	f022 0203 	bic.w	r2, r2, #3
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800451a:	f7ff f8dd 	bl	80036d8 <HAL_GetTick>
 800451e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004520:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <HAL_RCC_ClockConfig+0x144>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 030c 	and.w	r3, r3, #12
 8004528:	6862      	ldr	r2, [r4, #4]
 800452a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800452e:	d016      	beq.n	800455e <HAL_RCC_ClockConfig+0xae>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004530:	f7ff f8d2 	bl	80036d8 <HAL_GetTick>
 8004534:	1b80      	subs	r0, r0, r6
 8004536:	f241 3388 	movw	r3, #5000	; 0x1388
 800453a:	4298      	cmp	r0, r3
 800453c:	d9f0      	bls.n	8004520 <HAL_RCC_ClockConfig+0x70>
        return HAL_TIMEOUT;
 800453e:	2003      	movs	r0, #3
 8004540:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8004542:	4a2c      	ldr	r2, [pc, #176]	; (80045f4 <HAL_RCC_ClockConfig+0x144>)
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800454a:	d1e0      	bne.n	800450e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 800454c:	2001      	movs	r0, #1
 800454e:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004550:	4a28      	ldr	r2, [pc, #160]	; (80045f4 <HAL_RCC_ClockConfig+0x144>)
 8004552:	6812      	ldr	r2, [r2, #0]
 8004554:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004558:	d1d9      	bne.n	800450e <HAL_RCC_ClockConfig+0x5e>
          return HAL_ERROR;
 800455a:	2001      	movs	r0, #1
 800455c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f013 0f02 	tst.w	r3, #2
 8004564:	d006      	beq.n	8004574 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004566:	4a23      	ldr	r2, [pc, #140]	; (80045f4 <HAL_RCC_ClockConfig+0x144>)
 8004568:	6893      	ldr	r3, [r2, #8]
 800456a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800456e:	68a1      	ldr	r1, [r4, #8]
 8004570:	430b      	orrs	r3, r1
 8004572:	6093      	str	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <HAL_RCC_ClockConfig+0x140>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	429d      	cmp	r5, r3
 800457e:	d20c      	bcs.n	800459a <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_RCC_ClockConfig+0x140>)
 8004582:	6813      	ldr	r3, [r2, #0]
 8004584:	f023 0307 	bic.w	r3, r3, #7
 8004588:	432b      	orrs	r3, r5
 800458a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800458c:	6813      	ldr	r3, [r2, #0]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	429d      	cmp	r5, r3
 8004594:	d001      	beq.n	800459a <HAL_RCC_ClockConfig+0xea>
      return HAL_ERROR;
 8004596:	2001      	movs	r0, #1
}
 8004598:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	f013 0f04 	tst.w	r3, #4
 80045a0:	d006      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a2:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <HAL_RCC_ClockConfig+0x144>)
 80045a4:	6893      	ldr	r3, [r2, #8]
 80045a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045aa:	68e1      	ldr	r1, [r4, #12]
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	f013 0f08 	tst.w	r3, #8
 80045b6:	d007      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x118>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b8:	4a0e      	ldr	r2, [pc, #56]	; (80045f4 <HAL_RCC_ClockConfig+0x144>)
 80045ba:	6893      	ldr	r3, [r2, #8]
 80045bc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80045c0:	6921      	ldr	r1, [r4, #16]
 80045c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80045c6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045c8:	f7ff fc06 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 80045cc:	4b09      	ldr	r3, [pc, #36]	; (80045f4 <HAL_RCC_ClockConfig+0x144>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80045d4:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <HAL_RCC_ClockConfig+0x148>)
 80045d6:	5cd3      	ldrb	r3, [r2, r3]
 80045d8:	40d8      	lsrs	r0, r3
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCC_ClockConfig+0x14c>)
 80045dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80045de:	2000      	movs	r0, #0
 80045e0:	f7ff f85c 	bl	800369c <HAL_InitTick>
  return HAL_OK;
 80045e4:	2000      	movs	r0, #0
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80045e8:	2001      	movs	r0, #1
 80045ea:	4770      	bx	lr
        return HAL_ERROR;
 80045ec:	2001      	movs	r0, #1
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	40022000 	.word	0x40022000
 80045f4:	40021000 	.word	0x40021000
 80045f8:	08007430 	.word	0x08007430
 80045fc:	20000148 	.word	0x20000148

08004600 <HAL_RCC_GetHCLKFreq>:
}
 8004600:	4b01      	ldr	r3, [pc, #4]	; (8004608 <HAL_RCC_GetHCLKFreq+0x8>)
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000148 	.word	0x20000148

0800460c <HAL_RCC_GetPCLK1Freq>:
{
 800460c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800460e:	f7ff fff7 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004612:	4b04      	ldr	r3, [pc, #16]	; (8004624 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800461a:	4a03      	ldr	r2, [pc, #12]	; (8004628 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800461c:	5cd3      	ldrb	r3, [r2, r3]
}
 800461e:	40d8      	lsrs	r0, r3
 8004620:	bd08      	pop	{r3, pc}
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000
 8004628:	08007440 	.word	0x08007440

0800462c <HAL_RCC_GetPCLK2Freq>:
{
 800462c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800462e:	f7ff ffe7 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800463a:	4a03      	ldr	r2, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800463c:	5cd3      	ldrb	r3, [r2, r3]
}
 800463e:	40d8      	lsrs	r0, r3
 8004640:	bd08      	pop	{r3, pc}
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000
 8004648:	08007440 	.word	0x08007440

0800464c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800464e:	4b5d      	ldr	r3, [pc, #372]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f013 0f03 	tst.w	r3, #3
 8004656:	d019      	beq.n	800468c <RCCEx_PLLSAI1_Config+0x40>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004658:	4b5a      	ldr	r3, [pc, #360]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	6802      	ldr	r2, [r0, #0]
 8004662:	4293      	cmp	r3, r2
 8004664:	d004      	beq.n	8004670 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004666:	2401      	movs	r4, #1
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004668:	2c00      	cmp	r4, #0
 800466a:	d048      	beq.n	80046fe <RCCEx_PLLSAI1_Config+0xb2>
      }
    }
  }

  return status;
}
 800466c:	4620      	mov	r0, r4
 800466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8004670:	2a00      	cmp	r2, #0
 8004672:	d042      	beq.n	80046fa <RCCEx_PLLSAI1_Config+0xae>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004674:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800467c:	3301      	adds	r3, #1
 800467e:	6842      	ldr	r2, [r0, #4]
       ||
 8004680:	4293      	cmp	r3, r2
 8004682:	d001      	beq.n	8004688 <RCCEx_PLLSAI1_Config+0x3c>
      status = HAL_ERROR;
 8004684:	2401      	movs	r4, #1
 8004686:	e7ef      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x1c>
  HAL_StatusTypeDef status = HAL_OK;
 8004688:	2400      	movs	r4, #0
 800468a:	e7ed      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x1c>
    switch(PllSai1->PLLSAI1Source)
 800468c:	6803      	ldr	r3, [r0, #0]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d018      	beq.n	80046c4 <RCCEx_PLLSAI1_Config+0x78>
 8004692:	2b03      	cmp	r3, #3
 8004694:	d01d      	beq.n	80046d2 <RCCEx_PLLSAI1_Config+0x86>
 8004696:	2b01      	cmp	r3, #1
 8004698:	d00d      	beq.n	80046b6 <RCCEx_PLLSAI1_Config+0x6a>
      status = HAL_ERROR;
 800469a:	2401      	movs	r4, #1
    if(status == HAL_OK)
 800469c:	2c00      	cmp	r4, #0
 800469e:	d1e3      	bne.n	8004668 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046a0:	4e48      	ldr	r6, [pc, #288]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 80046a2:	68f2      	ldr	r2, [r6, #12]
 80046a4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80046a8:	6845      	ldr	r5, [r0, #4]
 80046aa:	3d01      	subs	r5, #1
 80046ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60f3      	str	r3, [r6, #12]
 80046b4:	e7d8      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046b6:	4a43      	ldr	r2, [pc, #268]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	f012 0f02 	tst.w	r2, #2
 80046be:	d014      	beq.n	80046ea <RCCEx_PLLSAI1_Config+0x9e>
  HAL_StatusTypeDef status = HAL_OK;
 80046c0:	2400      	movs	r4, #0
 80046c2:	e7eb      	b.n	800469c <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046c4:	4a3f      	ldr	r2, [pc, #252]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80046cc:	d00f      	beq.n	80046ee <RCCEx_PLLSAI1_Config+0xa2>
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2400      	movs	r4, #0
 80046d0:	e7e4      	b.n	800469c <RCCEx_PLLSAI1_Config+0x50>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046d2:	4a3c      	ldr	r2, [pc, #240]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80046da:	d10a      	bne.n	80046f2 <RCCEx_PLLSAI1_Config+0xa6>
 80046dc:	4a39      	ldr	r2, [pc, #228]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80046e4:	d007      	beq.n	80046f6 <RCCEx_PLLSAI1_Config+0xaa>
  HAL_StatusTypeDef status = HAL_OK;
 80046e6:	2400      	movs	r4, #0
 80046e8:	e7d8      	b.n	800469c <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80046ea:	2401      	movs	r4, #1
 80046ec:	e7d6      	b.n	800469c <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80046ee:	2401      	movs	r4, #1
 80046f0:	e7d4      	b.n	800469c <RCCEx_PLLSAI1_Config+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80046f2:	2400      	movs	r4, #0
 80046f4:	e7d2      	b.n	800469c <RCCEx_PLLSAI1_Config+0x50>
        status = HAL_ERROR;
 80046f6:	2401      	movs	r4, #1
 80046f8:	e7d0      	b.n	800469c <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 80046fa:	2401      	movs	r4, #1
 80046fc:	e7b4      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x1c>
 80046fe:	460f      	mov	r7, r1
 8004700:	4605      	mov	r5, r0
    __HAL_RCC_PLLSAI1_DISABLE();
 8004702:	4a30      	ldr	r2, [pc, #192]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 8004704:	6813      	ldr	r3, [r2, #0]
 8004706:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800470a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800470c:	f7fe ffe4 	bl	80036d8 <HAL_GetTick>
 8004710:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8004712:	4b2c      	ldr	r3, [pc, #176]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800471a:	d005      	beq.n	8004728 <RCCEx_PLLSAI1_Config+0xdc>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800471c:	f7fe ffdc 	bl	80036d8 <HAL_GetTick>
 8004720:	1b80      	subs	r0, r0, r6
 8004722:	2802      	cmp	r0, #2
 8004724:	d9f5      	bls.n	8004712 <RCCEx_PLLSAI1_Config+0xc6>
        status = HAL_TIMEOUT;
 8004726:	2403      	movs	r4, #3
    if(status == HAL_OK)
 8004728:	2c00      	cmp	r4, #0
 800472a:	d19f      	bne.n	800466c <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800472c:	bb47      	cbnz	r7, 8004780 <RCCEx_PLLSAI1_Config+0x134>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800472e:	4925      	ldr	r1, [pc, #148]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 8004730:	690b      	ldr	r3, [r1, #16]
 8004732:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004736:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800473a:	68a8      	ldr	r0, [r5, #8]
 800473c:	68ea      	ldr	r2, [r5, #12]
 800473e:	06d2      	lsls	r2, r2, #27
 8004740:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004744:	4313      	orrs	r3, r2
 8004746:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8004748:	4a1e      	ldr	r2, [pc, #120]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004750:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004752:	f7fe ffc1 	bl	80036d8 <HAL_GetTick>
 8004756:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8004760:	d105      	bne.n	800476e <RCCEx_PLLSAI1_Config+0x122>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004762:	f7fe ffb9 	bl	80036d8 <HAL_GetTick>
 8004766:	1b80      	subs	r0, r0, r6
 8004768:	2802      	cmp	r0, #2
 800476a:	d9f5      	bls.n	8004758 <RCCEx_PLLSAI1_Config+0x10c>
          status = HAL_TIMEOUT;
 800476c:	2403      	movs	r4, #3
      if(status == HAL_OK)
 800476e:	2c00      	cmp	r4, #0
 8004770:	f47f af7c 	bne.w	800466c <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004774:	4a13      	ldr	r2, [pc, #76]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 8004776:	6913      	ldr	r3, [r2, #16]
 8004778:	69a9      	ldr	r1, [r5, #24]
 800477a:	430b      	orrs	r3, r1
 800477c:	6113      	str	r3, [r2, #16]
 800477e:	e775      	b.n	800466c <RCCEx_PLLSAI1_Config+0x20>
      else if(Divider == DIVIDER_Q_UPDATE)
 8004780:	2f01      	cmp	r7, #1
 8004782:	d00f      	beq.n	80047a4 <RCCEx_PLLSAI1_Config+0x158>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004784:	480f      	ldr	r0, [pc, #60]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 8004786:	6902      	ldr	r2, [r0, #16]
 8004788:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800478c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004790:	68a9      	ldr	r1, [r5, #8]
 8004792:	696b      	ldr	r3, [r5, #20]
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	3b01      	subs	r3, #1
 8004798:	065b      	lsls	r3, r3, #25
 800479a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800479e:	4313      	orrs	r3, r2
 80047a0:	6103      	str	r3, [r0, #16]
 80047a2:	e7d1      	b.n	8004748 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047a4:	4807      	ldr	r0, [pc, #28]	; (80047c4 <RCCEx_PLLSAI1_Config+0x178>)
 80047a6:	6902      	ldr	r2, [r0, #16]
 80047a8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80047ac:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80047b0:	68a9      	ldr	r1, [r5, #8]
 80047b2:	692b      	ldr	r3, [r5, #16]
 80047b4:	085b      	lsrs	r3, r3, #1
 80047b6:	3b01      	subs	r3, #1
 80047b8:	055b      	lsls	r3, r3, #21
 80047ba:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80047be:	4313      	orrs	r3, r2
 80047c0:	6103      	str	r3, [r0, #16]
 80047c2:	e7c1      	b.n	8004748 <RCCEx_PLLSAI1_Config+0xfc>
 80047c4:	40021000 	.word	0x40021000

080047c8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80047c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047d0:	6803      	ldr	r3, [r0, #0]
 80047d2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80047d6:	d024      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch(PeriphClkInit->Sai1ClockSelection)
 80047d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80047da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047de:	d013      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80047e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047e4:	d002      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x24>
 80047e6:	b1b3      	cbz	r3, 8004816 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      ret = HAL_ERROR;
 80047e8:	2701      	movs	r7, #1
 80047ea:	e000      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047ec:	2700      	movs	r7, #0
    if(ret == HAL_OK)
 80047ee:	2f00      	cmp	r7, #0
 80047f0:	d16f      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047f2:	4abd      	ldr	r2, [pc, #756]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80047f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80047f8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80047fc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80047fe:	430b      	orrs	r3, r1
 8004800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004804:	463e      	mov	r6, r7
 8004806:	e00e      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004808:	4ab7      	ldr	r2, [pc, #732]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800480a:	68d3      	ldr	r3, [r2, #12]
 800480c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004810:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004812:	2700      	movs	r7, #0
      break;
 8004814:	e7eb      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x26>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004816:	2100      	movs	r1, #0
 8004818:	3004      	adds	r0, #4
 800481a:	f7ff ff17 	bl	800464c <RCCEx_PLLSAI1_Config>
 800481e:	4607      	mov	r7, r0
      break;
 8004820:	e7e5      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x26>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004822:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004824:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800482c:	d06d      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482e:	4bae      	ldr	r3, [pc, #696]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004832:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004836:	d14e      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004838:	4bab      	ldr	r3, [pc, #684]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800483a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800483c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004840:	659a      	str	r2, [r3, #88]	; 0x58
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800484c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004850:	4aa6      	ldr	r2, [pc, #664]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004858:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800485a:	f7fe ff3d 	bl	80036d8 <HAL_GetTick>
 800485e:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8004860:	4ba2      	ldr	r3, [pc, #648]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004868:	d105      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xae>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486a:	f7fe ff35 	bl	80036d8 <HAL_GetTick>
 800486e:	1b40      	subs	r0, r0, r5
 8004870:	2802      	cmp	r0, #2
 8004872:	d9f5      	bls.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x98>
        ret = HAL_TIMEOUT;
 8004874:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 8004876:	2f00      	cmp	r7, #0
 8004878:	d142      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800487a:	4b9b      	ldr	r3, [pc, #620]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004880:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004884:	d015      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004888:	4293      	cmp	r3, r2
 800488a:	d012      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800488c:	4a96      	ldr	r2, [pc, #600]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800488e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8004896:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800489a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800489e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048a2:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80048a6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80048aa:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80048ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048b2:	f013 0f01 	tst.w	r3, #1
 80048b6:	d111      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	f040 8113 	bne.w	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048be:	4a8a      	ldr	r2, [pc, #552]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048c0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80048ca:	430b      	orrs	r3, r1
 80048cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048d0:	e017      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      status = ret;
 80048d2:	463e      	mov	r6, r7
 80048d4:	e7a7      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;
 80048d6:	f04f 0800 	mov.w	r8, #0
 80048da:	e7b9      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x88>
        tickstart = HAL_GetTick();
 80048dc:	f7fe fefc 	bl	80036d8 <HAL_GetTick>
 80048e0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80048e2:	4b81      	ldr	r3, [pc, #516]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f013 0f02 	tst.w	r3, #2
 80048ec:	d1e4      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ee:	f7fe fef3 	bl	80036d8 <HAL_GetTick>
 80048f2:	1b40      	subs	r0, r0, r5
 80048f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80048f8:	4298      	cmp	r0, r3
 80048fa:	d9f2      	bls.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 80048fc:	2703      	movs	r7, #3
 80048fe:	e7db      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      status = ret;
 8004900:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 8004902:	f1b8 0f00 	cmp.w	r8, #0
 8004906:	f040 80f3 	bne.w	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	f013 0f01 	tst.w	r3, #1
 8004910:	d008      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004912:	4a75      	ldr	r2, [pc, #468]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004914:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004918:	f023 0303 	bic.w	r3, r3, #3
 800491c:	6a21      	ldr	r1, [r4, #32]
 800491e:	430b      	orrs	r3, r1
 8004920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	f013 0f02 	tst.w	r3, #2
 800492a:	d008      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800492c:	4a6e      	ldr	r2, [pc, #440]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800492e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004932:	f023 030c 	bic.w	r3, r3, #12
 8004936:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004938:	430b      	orrs	r3, r1
 800493a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	f013 0f04 	tst.w	r3, #4
 8004944:	d008      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004946:	4a68      	ldr	r2, [pc, #416]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004948:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800494c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004950:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004952:	430b      	orrs	r3, r1
 8004954:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	f013 0f08 	tst.w	r3, #8
 800495e:	d008      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004960:	4a61      	ldr	r2, [pc, #388]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004962:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004966:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800496a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800496c:	430b      	orrs	r3, r1
 800496e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	f013 0f20 	tst.w	r3, #32
 8004978:	d008      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800497a:	4a5b      	ldr	r2, [pc, #364]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800497c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004980:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004984:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004986:	430b      	orrs	r3, r1
 8004988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004992:	d008      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004994:	4a54      	ldr	r2, [pc, #336]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004996:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800499a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800499e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80049a0:	430b      	orrs	r3, r1
 80049a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80049ac:	d008      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049ae:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80049ba:	430b      	orrs	r3, r1
 80049bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049c6:	d008      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049c8:	4a47      	ldr	r2, [pc, #284]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049d4:	430b      	orrs	r3, r1
 80049d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049e0:	d008      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049e2:	4a41      	ldr	r2, [pc, #260]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80049e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80049ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049ee:	430b      	orrs	r3, r1
 80049f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049fa:	d008      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049fc:	4a3a      	ldr	r2, [pc, #232]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a06:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004a14:	d008      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x260>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a16:	4a34      	ldr	r2, [pc, #208]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a18:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004a1c:	f023 0303 	bic.w	r3, r3, #3
 8004a20:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004a22:	430b      	orrs	r3, r1
 8004a24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8004a2e:	d00f      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a30:	4a2d      	ldr	r2, [pc, #180]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a32:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a36:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004a3a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a42:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a48:	d058      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x334>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a4e:	d05a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x33e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004a56:	d00f      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a58:	4a23      	ldr	r2, [pc, #140]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a5e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004a62:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004a64:	430b      	orrs	r3, r1
 8004a66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a70:	d051      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a76:	d053      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x358>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004a7e:	d00f      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004a86:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004a8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a98:	d04a      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a9e:	d04c      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x372>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004aa6:	d00c      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004aa8:	4a0f      	ldr	r2, [pc, #60]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004aaa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004aae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004ab2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004aba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ac0:	d043      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x382>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004ac8:	d008      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aca:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004acc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ad4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8004adc:	4630      	mov	r0, r6
 8004ade:	b002      	add	sp, #8
 8004ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 8004ae4:	463e      	mov	r6, r7
 8004ae6:	e70c      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af0:	4a1a      	ldr	r2, [pc, #104]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004af2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6593      	str	r3, [r2, #88]	; 0x58
 8004afa:	e706      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004afc:	68d3      	ldr	r3, [r2, #12]
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b02:	60d3      	str	r3, [r2, #12]
 8004b04:	e7a4      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x288>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b06:	2101      	movs	r1, #1
 8004b08:	1d20      	adds	r0, r4, #4
 8004b0a:	f7ff fd9f 	bl	800464c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d09e      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x288>
          status = ret;
 8004b12:	4606      	mov	r6, r0
 8004b14:	e79c      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b16:	68d3      	ldr	r3, [r2, #12]
 8004b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b1c:	60d3      	str	r3, [r2, #12]
 8004b1e:	e7ab      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b20:	2101      	movs	r1, #1
 8004b22:	1d20      	adds	r0, r4, #4
 8004b24:	f7ff fd92 	bl	800464c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d0a5      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        status = ret;
 8004b2c:	4606      	mov	r6, r0
 8004b2e:	e7a3      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b30:	68d3      	ldr	r3, [r2, #12]
 8004b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b36:	60d3      	str	r3, [r2, #12]
 8004b38:	e7b2      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	1d20      	adds	r0, r4, #4
 8004b3e:	f7ff fd85 	bl	800464c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d0ac      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
        status = ret;
 8004b46:	4606      	mov	r6, r0
 8004b48:	e7aa      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	1d20      	adds	r0, r4, #4
 8004b4e:	f7ff fd7d 	bl	800464c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d0b5      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
        status = ret;
 8004b56:	4606      	mov	r6, r0
 8004b58:	e7b3      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8004b5a:	bf00      	nop
 8004b5c:	40021000 	.word	0x40021000

08004b60 <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc: RTC handle  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004b60:	4770      	bx	lr

08004b62 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004b62:	b538      	push	{r3, r4, r5, lr}
 8004b64:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004b66:	6802      	ldr	r2, [r0, #0]
 8004b68:	68d3      	ldr	r3, [r2, #12]
 8004b6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b6e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004b70:	f7fe fdb2 	bl	80036d8 <HAL_GetTick>
 8004b74:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f013 0f20 	tst.w	r3, #32
 8004b7e:	d107      	bne.n	8004b90 <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b80:	f7fe fdaa 	bl	80036d8 <HAL_GetTick>
 8004b84:	1b40      	subs	r0, r0, r5
 8004b86:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004b8a:	d9f4      	bls.n	8004b76 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8004b8c:	2003      	movs	r0, #3
    }
  }

  return HAL_OK;
}
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004b90:	2000      	movs	r0, #0
 8004b92:	bd38      	pop	{r3, r4, r5, pc}

08004b94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004b94:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004b96:	6803      	ldr	r3, [r0, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b9e:	d001      	beq.n	8004ba4 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	bd38      	pop	{r3, r4, r5, pc}
 8004ba4:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8004baa:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004bac:	f7fe fd94 	bl	80036d8 <HAL_GetTick>
 8004bb0:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bba:	d107      	bne.n	8004bcc <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bbc:	f7fe fd8c 	bl	80036d8 <HAL_GetTick>
 8004bc0:	1b40      	subs	r0, r0, r5
 8004bc2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004bc6:	d9f4      	bls.n	8004bb2 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8004bc8:	2003      	movs	r0, #3
}
 8004bca:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004bcc:	2000      	movs	r0, #0
 8004bce:	bd38      	pop	{r3, r4, r5, pc}

08004bd0 <HAL_RTC_Init>:
{
 8004bd0:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	d064      	beq.n	8004ca0 <HAL_RTC_Init+0xd0>
 8004bd6:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004bd8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d045      	beq.n	8004c6c <HAL_RTC_Init+0x9c>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004be0:	2302      	movs	r3, #2
 8004be2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	22ca      	movs	r2, #202	; 0xca
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	2253      	movs	r2, #83	; 0x53
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff ffce 	bl	8004b94 <RTC_EnterInitMode>
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d13b      	bne.n	8004c76 <HAL_RTC_Init+0xa6>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004bfe:	6822      	ldr	r2, [r4, #0]
 8004c00:	6893      	ldr	r3, [r2, #8]
 8004c02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c0a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c0c:	6821      	ldr	r1, [r4, #0]
 8004c0e:	688a      	ldr	r2, [r1, #8]
 8004c10:	6863      	ldr	r3, [r4, #4]
 8004c12:	6920      	ldr	r0, [r4, #16]
 8004c14:	4303      	orrs	r3, r0
 8004c16:	69a0      	ldr	r0, [r4, #24]
 8004c18:	4303      	orrs	r3, r0
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	68e2      	ldr	r2, [r4, #12]
 8004c22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	6913      	ldr	r3, [r2, #16]
 8004c28:	68a1      	ldr	r1, [r4, #8]
 8004c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004c2e:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004c30:	6822      	ldr	r2, [r4, #0]
 8004c32:	68d3      	ldr	r3, [r2, #12]
 8004c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c38:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c3a:	6823      	ldr	r3, [r4, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f013 0f20 	tst.w	r3, #32
 8004c42:	d020      	beq.n	8004c86 <HAL_RTC_Init+0xb6>
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004c44:	6822      	ldr	r2, [r4, #0]
 8004c46:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004c48:	f023 0303 	bic.w	r3, r3, #3
 8004c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c4e:	6821      	ldr	r1, [r4, #0]
 8004c50:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8004c52:	69e2      	ldr	r2, [r4, #28]
 8004c54:	6960      	ldr	r0, [r4, #20]
 8004c56:	4302      	orrs	r2, r0
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	64cb      	str	r3, [r1, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	22ff      	movs	r2, #255	; 0xff
 8004c60:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8004c68:	4628      	mov	r0, r5
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8004c6c:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_RTC_MspInit(hrtc);
 8004c70:	f7ff ff76 	bl	8004b60 <HAL_RTC_MspInit>
 8004c74:	e7b4      	b.n	8004be0 <HAL_RTC_Init+0x10>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	22ff      	movs	r2, #255	; 0xff
 8004c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return HAL_ERROR;
 8004c82:	2501      	movs	r5, #1
 8004c84:	e7f0      	b.n	8004c68 <HAL_RTC_Init+0x98>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7ff ff6b 	bl	8004b62 <HAL_RTC_WaitForSynchro>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d0d9      	beq.n	8004c44 <HAL_RTC_Init+0x74>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	22ff      	movs	r2, #255	; 0xff
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c96:	2304      	movs	r3, #4
 8004c98:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return HAL_ERROR;
 8004c9c:	2501      	movs	r5, #1
 8004c9e:	e7e3      	b.n	8004c68 <HAL_RTC_Init+0x98>
     return HAL_ERROR;
 8004ca0:	2501      	movs	r5, #1
 8004ca2:	e7e1      	b.n	8004c68 <HAL_RTC_Init+0x98>

08004ca4 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8004ca4:	2300      	movs	r3, #0

  while(Value >= 10)
 8004ca6:	e002      	b.n	8004cae <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8004ca8:	3301      	adds	r3, #1
    Value -= 10;
 8004caa:	380a      	subs	r0, #10
 8004cac:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8004cae:	2809      	cmp	r0, #9
 8004cb0:	d8fa      	bhi.n	8004ca8 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	b2db      	uxtb	r3, r3
}
 8004cb6:	4318      	orrs	r0, r3
 8004cb8:	4770      	bx	lr

08004cba <HAL_RTC_SetTime>:
{
 8004cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004cbc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d07f      	beq.n	8004dc4 <HAL_RTC_SetTime+0x10a>
 8004cc4:	460e      	mov	r6, r1
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if(Format == RTC_FORMAT_BIN)
 8004cd4:	2a00      	cmp	r2, #0
 8004cd6:	d148      	bne.n	8004d6a <HAL_RTC_SetTime+0xb0>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004cd8:	6803      	ldr	r3, [r0, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RTC_SetTime+0x2c>
      sTime->TimeFormat = 0x00;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004ce6:	7830      	ldrb	r0, [r6, #0]
 8004ce8:	f7ff ffdc 	bl	8004ca4 <RTC_ByteToBcd2>
 8004cec:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004cee:	7870      	ldrb	r0, [r6, #1]
 8004cf0:	f7ff ffd8 	bl	8004ca4 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004cf4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004cf8:	78b0      	ldrb	r0, [r6, #2]
 8004cfa:	f7ff ffd3 	bl	8004ca4 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8004cfe:	4328      	orrs	r0, r5
                        (((uint32_t)sTime->TimeFormat) << 16));
 8004d00:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8004d02:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	22ca      	movs	r2, #202	; 0xca
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	2253      	movs	r2, #83	; 0x53
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d12:	4620      	mov	r0, r4
 8004d14:	f7ff ff3e 	bl	8004b94 <RTC_EnterInitMode>
 8004d18:	4607      	mov	r7, r0
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d137      	bne.n	8004d8e <HAL_RTC_SetTime+0xd4>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8004d24:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8004d28:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8004d2a:	6822      	ldr	r2, [r4, #0]
 8004d2c:	6893      	ldr	r3, [r2, #8]
 8004d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d32:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d34:	6821      	ldr	r1, [r4, #0]
 8004d36:	688b      	ldr	r3, [r1, #8]
 8004d38:	68f2      	ldr	r2, [r6, #12]
 8004d3a:	6930      	ldr	r0, [r6, #16]
 8004d3c:	4302      	orrs	r2, r0
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d42:	6822      	ldr	r2, [r4, #0]
 8004d44:	68d3      	ldr	r3, [r2, #12]
 8004d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d4a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f013 0f20 	tst.w	r3, #32
 8004d54:	d026      	beq.n	8004da4 <HAL_RTC_SetTime+0xea>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	22ff      	movs	r2, #255	; 0xff
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   __HAL_UNLOCK(hrtc); 
 8004d62:	2300      	movs	r3, #0
 8004d64:	f884 3020 	strb.w	r3, [r4, #32]
   return HAL_OK;
 8004d68:	e02d      	b.n	8004dc6 <HAL_RTC_SetTime+0x10c>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d6a:	6803      	ldr	r3, [r0, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d72:	d101      	bne.n	8004d78 <HAL_RTC_SetTime+0xbe>
      sTime->TimeFormat = 0x00;
 8004d74:	2300      	movs	r3, #0
 8004d76:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004d78:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004d7a:	7870      	ldrb	r0, [r6, #1]
 8004d7c:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004d7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8004d82:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8004d84:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16));
 8004d86:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8004d88:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8004d8c:	e7bb      	b.n	8004d06 <HAL_RTC_SetTime+0x4c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	22ff      	movs	r2, #255	; 0xff
 8004d92:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d94:	2304      	movs	r3, #4
 8004d96:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8004da0:	2701      	movs	r7, #1
 8004da2:	e010      	b.n	8004dc6 <HAL_RTC_SetTime+0x10c>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004da4:	4620      	mov	r0, r4
 8004da6:	f7ff fedc 	bl	8004b62 <HAL_RTC_WaitForSynchro>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d0d3      	beq.n	8004d56 <HAL_RTC_SetTime+0x9c>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	22ff      	movs	r2, #255	; 0xff
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004db4:	2304      	movs	r3, #4
 8004db6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8004dc0:	2701      	movs	r7, #1
 8004dc2:	e000      	b.n	8004dc6 <HAL_RTC_SetTime+0x10c>
  __HAL_LOCK(hrtc);
 8004dc4:	2702      	movs	r7, #2
}
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dca <HAL_RTC_SetDate>:
{
 8004dca:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8004dcc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d06d      	beq.n	8004eb0 <HAL_RTC_SetDate+0xe6>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004de0:	b93a      	cbnz	r2, 8004df2 <HAL_RTC_SetDate+0x28>
 8004de2:	784b      	ldrb	r3, [r1, #1]
 8004de4:	f013 0f10 	tst.w	r3, #16
 8004de8:	d003      	beq.n	8004df2 <HAL_RTC_SetDate+0x28>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004dea:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004dee:	330a      	adds	r3, #10
 8004df0:	704b      	strb	r3, [r1, #1]
 8004df2:	460e      	mov	r6, r1
 8004df4:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	d134      	bne.n	8004e64 <HAL_RTC_SetDate+0x9a>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004dfa:	78c8      	ldrb	r0, [r1, #3]
 8004dfc:	f7ff ff52 	bl	8004ca4 <RTC_ByteToBcd2>
 8004e00:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004e02:	7870      	ldrb	r0, [r6, #1]
 8004e04:	f7ff ff4e 	bl	8004ca4 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004e08:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004e0c:	78b0      	ldrb	r0, [r6, #2]
 8004e0e:	f7ff ff49 	bl	8004ca4 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8004e12:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13));
 8004e14:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8004e16:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	22ca      	movs	r2, #202	; 0xca
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	2253      	movs	r2, #83	; 0x53
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e26:	4620      	mov	r0, r4
 8004e28:	f7ff feb4 	bl	8004b94 <RTC_EnterInitMode>
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	bb20      	cbnz	r0, 8004e7a <HAL_RTC_SetDate+0xb0>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004e36:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8004e3a:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e3c:	6822      	ldr	r2, [r4, #0]
 8004e3e:	68d3      	ldr	r3, [r2, #12]
 8004e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e44:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f013 0f20 	tst.w	r3, #32
 8004e4e:	d01f      	beq.n	8004e90 <HAL_RTC_SetDate+0xc6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	22ff      	movs	r2, #255	; 0xff
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8004e56:	2301      	movs	r3, #1
 8004e58:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_OK;
 8004e62:	e026      	b.n	8004eb2 <HAL_RTC_SetDate+0xe8>
    datetmpreg = RTC_Bcd2ToByte(sDate->Month);
 8004e64:	7848      	ldrb	r0, [r1, #1]
    datetmpreg = RTC_Bcd2ToByte(sDate->Date);
 8004e66:	788d      	ldrb	r5, [r1, #2]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004e68:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << 8) | \
 8004e6a:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004e6c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8004e70:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13));
 8004e72:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8004e74:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8004e78:	e7cf      	b.n	8004e1a <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	22ff      	movs	r2, #255	; 0xff
 8004e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e80:	2304      	movs	r3, #4
 8004e82:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_UNLOCK(hrtc);
 8004e86:	2300      	movs	r3, #0
 8004e88:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8004e8c:	2601      	movs	r6, #1
 8004e8e:	e010      	b.n	8004eb2 <HAL_RTC_SetDate+0xe8>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e90:	4620      	mov	r0, r4
 8004e92:	f7ff fe66 	bl	8004b62 <HAL_RTC_WaitForSynchro>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	d0da      	beq.n	8004e50 <HAL_RTC_SetDate+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	22ff      	movs	r2, #255	; 0xff
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        __HAL_UNLOCK(hrtc);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8004eac:	2601      	movs	r6, #1
 8004eae:	e000      	b.n	8004eb2 <HAL_RTC_SetDate+0xe8>
 __HAL_LOCK(hrtc);
 8004eb0:	2602      	movs	r6, #2
}
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}

08004eb6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb8:	4605      	mov	r5, r0
 8004eba:	460f      	mov	r7, r1
 8004ebc:	4616      	mov	r6, r2
 8004ebe:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ec0:	e039      	b.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0x80>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004ec2:	b12c      	cbz	r4, 8004ed0 <SPI_WaitFlagStateUntilTimeout+0x1a>
 8004ec4:	f7fe fc08 	bl	80036d8 <HAL_GetTick>
 8004ec8:	9b06      	ldr	r3, [sp, #24]
 8004eca:	1ac0      	subs	r0, r0, r3
 8004ecc:	4284      	cmp	r4, r0
 8004ece:	d832      	bhi.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0x80>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ed0:	682a      	ldr	r2, [r5, #0]
 8004ed2:	6853      	ldr	r3, [r2, #4]
 8004ed4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004ed8:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eda:	686b      	ldr	r3, [r5, #4]
 8004edc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee0:	d00b      	beq.n	8004efa <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ee2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ee8:	d014      	beq.n	8004f14 <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ef6:	2003      	movs	r0, #3
 8004ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004efa:	68ab      	ldr	r3, [r5, #8]
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f00:	d002      	beq.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0x52>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f06:	d1ec      	bne.n	8004ee2 <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8004f08:	682a      	ldr	r2, [r5, #0]
 8004f0a:	6813      	ldr	r3, [r2, #0]
 8004f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	e7e6      	b.n	8004ee2 <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 8004f14:	682a      	ldr	r2, [r5, #0]
 8004f16:	6813      	ldr	r3, [r2, #0]
 8004f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	682a      	ldr	r2, [r5, #0]
 8004f20:	6813      	ldr	r3, [r2, #0]
 8004f22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	e7df      	b.n	8004eea <SPI_WaitFlagStateUntilTimeout+0x34>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	42b3      	cmp	r3, r6
 8004f2e:	d009      	beq.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x8e>
    if (Timeout != HAL_MAX_DELAY)
 8004f30:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004f34:	d1c5      	bne.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	ea37 0303 	bics.w	r3, r7, r3
 8004f3e:	d0f4      	beq.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0x74>
 8004f40:	2300      	movs	r3, #0
 8004f42:	e7f3      	b.n	8004f2c <SPI_WaitFlagStateUntilTimeout+0x76>
      }
    }
  }

  return HAL_OK;
 8004f44:	2000      	movs	r0, #0
}
 8004f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	4615      	mov	r5, r2
 8004f52:	461e      	mov	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8004f54:	e002      	b.n	8004f5c <SPI_WaitFifoStateUntilTimeout+0x14>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f56:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004f5a:	d110      	bne.n	8004f7e <SPI_WaitFifoStateUntilTimeout+0x36>
  while ((hspi->Instance->SR & Fifo) != State)
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	6893      	ldr	r3, [r2, #8]
 8004f60:	4023      	ands	r3, r4
 8004f62:	42ab      	cmp	r3, r5
 8004f64:	d03f      	beq.n	8004fe6 <SPI_WaitFifoStateUntilTimeout+0x9e>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f66:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8004f6a:	d1f4      	bne.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0xe>
 8004f6c:	2d00      	cmp	r5, #0
 8004f6e:	d1f2      	bne.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8004f70:	7b13      	ldrb	r3, [r2, #12]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f88d 3007 	strb.w	r3, [sp, #7]
      UNUSED(tmpreg);
 8004f78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f7c:	e7eb      	b.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8004f7e:	b12e      	cbz	r6, 8004f8c <SPI_WaitFifoStateUntilTimeout+0x44>
 8004f80:	f7fe fbaa 	bl	80036d8 <HAL_GetTick>
 8004f84:	9b08      	ldr	r3, [sp, #32]
 8004f86:	1ac0      	subs	r0, r0, r3
 8004f88:	4286      	cmp	r6, r0
 8004f8a:	d8e7      	bhi.n	8004f5c <SPI_WaitFifoStateUntilTimeout+0x14>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	6853      	ldr	r3, [r2, #4]
 8004f90:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004f94:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f9c:	d00b      	beq.n	8004fb6 <SPI_WaitFifoStateUntilTimeout+0x6e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa4:	d014      	beq.n	8004fd0 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fb2:	2003      	movs	r0, #3
 8004fb4:	e018      	b.n	8004fe8 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fbc:	d002      	beq.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x7c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc2:	d1ec      	bne.n	8004f9e <SPI_WaitFifoStateUntilTimeout+0x56>
          __HAL_SPI_DISABLE(hspi);
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	6813      	ldr	r3, [r2, #0]
 8004fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e7e6      	b.n	8004f9e <SPI_WaitFifoStateUntilTimeout+0x56>
          SPI_RESET_CRC(hspi);
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	6813      	ldr	r3, [r2, #0]
 8004fd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	6813      	ldr	r3, [r2, #0]
 8004fde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e7df      	b.n	8004fa6 <SPI_WaitFifoStateUntilTimeout+0x5e>
      }
    }
  }

  return HAL_OK;
 8004fe6:	2000      	movs	r0, #0
}
 8004fe8:	b003      	add	sp, #12
 8004fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	460d      	mov	r5, r1
 8004ff4:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ff6:	9200      	str	r2, [sp, #0]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005000:	f7ff ffa2 	bl	8004f48 <SPI_WaitFifoStateUntilTimeout>
 8005004:	b138      	cbz	r0, 8005016 <SPI_EndRxTxTransaction+0x2a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005006:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005008:	f043 0320 	orr.w	r3, r3, #32
 800500c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005010:	4618      	mov	r0, r3
 8005012:	b002      	add	sp, #8
 8005014:	bd70      	pop	{r4, r5, r6, pc}
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005016:	9600      	str	r6, [sp, #0]
 8005018:	462b      	mov	r3, r5
 800501a:	2200      	movs	r2, #0
 800501c:	2180      	movs	r1, #128	; 0x80
 800501e:	4620      	mov	r0, r4
 8005020:	f7ff ff49 	bl	8004eb6 <SPI_WaitFlagStateUntilTimeout>
 8005024:	b128      	cbz	r0, 8005032 <SPI_EndRxTxTransaction+0x46>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005026:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005028:	f043 0320 	orr.w	r3, r3, #32
 800502c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e7ee      	b.n	8005010 <SPI_EndRxTxTransaction+0x24>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005032:	9600      	str	r6, [sp, #0]
 8005034:	462b      	mov	r3, r5
 8005036:	2200      	movs	r2, #0
 8005038:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800503c:	4620      	mov	r0, r4
 800503e:	f7ff ff83 	bl	8004f48 <SPI_WaitFifoStateUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2800      	cmp	r0, #0
 8005046:	d0e3      	beq.n	8005010 <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005048:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800504a:	f043 0320 	orr.w	r3, r3, #32
 800504e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e7dd      	b.n	8005010 <SPI_EndRxTxTransaction+0x24>

08005054 <SPI_EndRxTransaction>:
{
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	4604      	mov	r4, r0
 800505a:	460d      	mov	r5, r1
 800505c:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800505e:	6843      	ldr	r3, [r0, #4]
 8005060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005064:	d010      	beq.n	8005088 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005066:	9600      	str	r6, [sp, #0]
 8005068:	462b      	mov	r3, r5
 800506a:	2200      	movs	r2, #0
 800506c:	2180      	movs	r1, #128	; 0x80
 800506e:	4620      	mov	r0, r4
 8005070:	f7ff ff21 	bl	8004eb6 <SPI_WaitFlagStateUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	b1a0      	cbz	r0, 80050a2 <SPI_EndRxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005078:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800507a:	f043 0320 	orr.w	r3, r3, #32
 800507e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
}
 8005082:	4618      	mov	r0, r3
 8005084:	b002      	add	sp, #8
 8005086:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005088:	6883      	ldr	r3, [r0, #8]
 800508a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508e:	d002      	beq.n	8005096 <SPI_EndRxTransaction+0x42>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005094:	d1e7      	bne.n	8005066 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	6813      	ldr	r3, [r2, #0]
 800509a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	e7e1      	b.n	8005066 <SPI_EndRxTransaction+0x12>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a2:	6862      	ldr	r2, [r4, #4]
 80050a4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80050a8:	d1eb      	bne.n	8005082 <SPI_EndRxTransaction+0x2e>
 80050aa:	68a2      	ldr	r2, [r4, #8]
 80050ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80050b0:	d002      	beq.n	80050b8 <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80050b6:	d1e4      	bne.n	8005082 <SPI_EndRxTransaction+0x2e>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050b8:	9600      	str	r6, [sp, #0]
 80050ba:	462b      	mov	r3, r5
 80050bc:	2200      	movs	r2, #0
 80050be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7ff ff40 	bl	8004f48 <SPI_WaitFifoStateUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d0d9      	beq.n	8005082 <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80050d0:	f043 0320 	orr.w	r3, r3, #32
 80050d4:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e7d3      	b.n	8005082 <SPI_EndRxTransaction+0x2e>
	...

080050dc <HAL_SPI_Transmit_IT>:
{
 80050dc:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 80050de:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80050e2:	2801      	cmp	r0, #1
 80050e4:	d047      	beq.n	8005176 <HAL_SPI_Transmit_IT+0x9a>
 80050e6:	2001      	movs	r0, #1
 80050e8:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d039      	beq.n	8005164 <HAL_SPI_Transmit_IT+0x88>
 80050f0:	2a00      	cmp	r2, #0
 80050f2:	d039      	beq.n	8005168 <HAL_SPI_Transmit_IT+0x8c>
  if (hspi->State != HAL_SPI_STATE_READY)
 80050f4:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 80050f8:	b2c0      	uxtb	r0, r0
 80050fa:	2801      	cmp	r0, #1
 80050fc:	d001      	beq.n	8005102 <HAL_SPI_Transmit_IT+0x26>
    errorcode = HAL_BUSY;
 80050fe:	2002      	movs	r0, #2
 8005100:	e033      	b.n	800516a <HAL_SPI_Transmit_IT+0x8e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005102:	2003      	movs	r0, #3
 8005104:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005108:	2000      	movs	r0, #0
 800510a:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800510c:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800510e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005110:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005112:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005114:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005118:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800511c:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8005124:	d915      	bls.n	8005152 <HAL_SPI_Transmit_IT+0x76>
    hspi->TxISR = SPI_TxISR_16BIT;
 8005126:	4a15      	ldr	r2, [pc, #84]	; (800517c <HAL_SPI_Transmit_IT+0xa0>)
 8005128:	651a      	str	r2, [r3, #80]	; 0x50
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005130:	d012      	beq.n	8005158 <HAL_SPI_Transmit_IT+0x7c>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	684a      	ldr	r2, [r1, #4]
 8005136:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800513a:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	6811      	ldr	r1, [r2, #0]
 8005140:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005144:	d115      	bne.n	8005172 <HAL_SPI_Transmit_IT+0x96>
    __HAL_SPI_ENABLE(hspi);
 8005146:	6811      	ldr	r1, [r2, #0]
 8005148:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800514c:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800514e:	2000      	movs	r0, #0
 8005150:	e00b      	b.n	800516a <HAL_SPI_Transmit_IT+0x8e>
    hspi->TxISR = SPI_TxISR_8BIT;
 8005152:	4a0b      	ldr	r2, [pc, #44]	; (8005180 <HAL_SPI_Transmit_IT+0xa4>)
 8005154:	651a      	str	r2, [r3, #80]	; 0x50
 8005156:	e7e8      	b.n	800512a <HAL_SPI_Transmit_IT+0x4e>
    SPI_1LINE_TX(hspi);
 8005158:	6819      	ldr	r1, [r3, #0]
 800515a:	680a      	ldr	r2, [r1, #0]
 800515c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005160:	600a      	str	r2, [r1, #0]
 8005162:	e7e6      	b.n	8005132 <HAL_SPI_Transmit_IT+0x56>
    errorcode = HAL_ERROR;
 8005164:	2001      	movs	r0, #1
 8005166:	e000      	b.n	800516a <HAL_SPI_Transmit_IT+0x8e>
 8005168:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 800516a:	2200      	movs	r2, #0
 800516c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005170:	4770      	bx	lr
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005172:	2000      	movs	r0, #0
 8005174:	e7f9      	b.n	800516a <HAL_SPI_Transmit_IT+0x8e>
  __HAL_LOCK(hspi);
 8005176:	2002      	movs	r0, #2
}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	080053d9 	.word	0x080053d9
 8005180:	080053b3 	.word	0x080053b3

08005184 <HAL_SPI_TransmitReceive_IT>:
{
 8005184:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 8005186:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 800518a:	2c01      	cmp	r4, #1
 800518c:	d06c      	beq.n	8005268 <HAL_SPI_TransmitReceive_IT+0xe4>
 800518e:	2401      	movs	r4, #1
 8005190:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp  = hspi->State;
 8005194:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 8005198:	b2e4      	uxtb	r4, r4
  tmp1 = hspi->Init.Mode;
 800519a:	6845      	ldr	r5, [r0, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800519c:	2c01      	cmp	r4, #1
 800519e:	d010      	beq.n	80051c2 <HAL_SPI_TransmitReceive_IT+0x3e>
 80051a0:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 80051a4:	d006      	beq.n	80051b4 <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 80051a6:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 80051a8:	2200      	movs	r2, #0
 80051aa:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	bc30      	pop	{r4, r5}
 80051b2:	4770      	bx	lr
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80051b4:	6885      	ldr	r5, [r0, #8]
 80051b6:	2d00      	cmp	r5, #0
 80051b8:	d14c      	bne.n	8005254 <HAL_SPI_TransmitReceive_IT+0xd0>
 80051ba:	2c04      	cmp	r4, #4
 80051bc:	d001      	beq.n	80051c2 <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 80051be:	2302      	movs	r3, #2
 80051c0:	e7f2      	b.n	80051a8 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051c2:	2900      	cmp	r1, #0
 80051c4:	d048      	beq.n	8005258 <HAL_SPI_TransmitReceive_IT+0xd4>
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	d048      	beq.n	800525c <HAL_SPI_TransmitReceive_IT+0xd8>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d048      	beq.n	8005260 <HAL_SPI_TransmitReceive_IT+0xdc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051ce:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
 80051d2:	b2e4      	uxtb	r4, r4
 80051d4:	2c04      	cmp	r4, #4
 80051d6:	d002      	beq.n	80051de <HAL_SPI_TransmitReceive_IT+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051d8:	2405      	movs	r4, #5
 80051da:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051de:	2400      	movs	r4, #0
 80051e0:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051e2:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80051e4:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80051e6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051e8:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80051ea:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 80051ee:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051f2:	68c3      	ldr	r3, [r0, #12]
 80051f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051f8:	d921      	bls.n	800523e <HAL_SPI_TransmitReceive_IT+0xba>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80051fa:	4b1c      	ldr	r3, [pc, #112]	; (800526c <HAL_SPI_TransmitReceive_IT+0xe8>)
 80051fc:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80051fe:	4b1c      	ldr	r3, [pc, #112]	; (8005270 <HAL_SPI_TransmitReceive_IT+0xec>)
 8005200:	6503      	str	r3, [r0, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount >= 2U))
 8005202:	68c3      	ldr	r3, [r0, #12]
 8005204:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005208:	d804      	bhi.n	8005214 <HAL_SPI_TransmitReceive_IT+0x90>
 800520a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d919      	bls.n	8005248 <HAL_SPI_TransmitReceive_IT+0xc4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005214:	6802      	ldr	r2, [r0, #0]
 8005216:	6853      	ldr	r3, [r2, #4]
 8005218:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800521c:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800521e:	6802      	ldr	r2, [r0, #0]
 8005220:	6853      	ldr	r3, [r2, #4]
 8005222:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8005226:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005228:	6803      	ldr	r3, [r0, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005230:	d118      	bne.n	8005264 <HAL_SPI_TransmitReceive_IT+0xe0>
    __HAL_SPI_ENABLE(hspi);
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005238:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	e7b4      	b.n	80051a8 <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <HAL_SPI_TransmitReceive_IT+0xf0>)
 8005240:	64c3      	str	r3, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005242:	4b0d      	ldr	r3, [pc, #52]	; (8005278 <HAL_SPI_TransmitReceive_IT+0xf4>)
 8005244:	6503      	str	r3, [r0, #80]	; 0x50
 8005246:	e7dc      	b.n	8005202 <HAL_SPI_TransmitReceive_IT+0x7e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005248:	6802      	ldr	r2, [r0, #0]
 800524a:	6853      	ldr	r3, [r2, #4]
 800524c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005250:	6053      	str	r3, [r2, #4]
 8005252:	e7e4      	b.n	800521e <HAL_SPI_TransmitReceive_IT+0x9a>
    errorcode = HAL_BUSY;
 8005254:	2302      	movs	r3, #2
 8005256:	e7a7      	b.n	80051a8 <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e7a5      	b.n	80051a8 <HAL_SPI_TransmitReceive_IT+0x24>
 800525c:	2301      	movs	r3, #1
 800525e:	e7a3      	b.n	80051a8 <HAL_SPI_TransmitReceive_IT+0x24>
 8005260:	2301      	movs	r3, #1
 8005262:	e7a1      	b.n	80051a8 <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	e79f      	b.n	80051a8 <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 8005268:	2302      	movs	r3, #2
 800526a:	e7a0      	b.n	80051ae <HAL_SPI_TransmitReceive_IT+0x2a>
 800526c:	08005607 	.word	0x08005607
 8005270:	080055cd 	.word	0x080055cd
 8005274:	08005553 	.word	0x08005553
 8005278:	080054f9 	.word	0x080054f9

0800527c <HAL_SPI_Receive_IT>:
{
 800527c:	b510      	push	{r4, lr}
 800527e:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005280:	6880      	ldr	r0, [r0, #8]
 8005282:	b918      	cbnz	r0, 800528c <HAL_SPI_Receive_IT+0x10>
 8005284:	6863      	ldr	r3, [r4, #4]
 8005286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800528a:	d010      	beq.n	80052ae <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 800528c:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8005290:	2801      	cmp	r0, #1
 8005292:	d05a      	beq.n	800534a <HAL_SPI_Receive_IT+0xce>
 8005294:	2301      	movs	r3, #1
 8005296:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 800529a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800529e:	b2c0      	uxtb	r0, r0
 80052a0:	4298      	cmp	r0, r3
 80052a2:	d00d      	beq.n	80052c0 <HAL_SPI_Receive_IT+0x44>
    errorcode = HAL_BUSY;
 80052a4:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80052a6:	2300      	movs	r3, #0
 80052a8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 80052ac:	bd10      	pop	{r4, pc}
 80052ae:	4613      	mov	r3, r2
 80052b0:	4620      	mov	r0, r4
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052b2:	2204      	movs	r2, #4
 80052b4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80052b8:	460a      	mov	r2, r1
 80052ba:	f7ff ff63 	bl	8005184 <HAL_SPI_TransmitReceive_IT>
 80052be:	bd10      	pop	{r4, pc}
  if ((pData == NULL) || (Size == 0U))
 80052c0:	2900      	cmp	r1, #0
 80052c2:	d03c      	beq.n	800533e <HAL_SPI_Receive_IT+0xc2>
 80052c4:	2a00      	cmp	r2, #0
 80052c6:	d03c      	beq.n	8005342 <HAL_SPI_Receive_IT+0xc6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052c8:	2304      	movs	r3, #4
 80052ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052d2:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80052d4:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 80052d8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052dc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80052de:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80052e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052e2:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052e4:	68e3      	ldr	r3, [r4, #12]
 80052e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052ea:	d91a      	bls.n	8005322 <HAL_SPI_Receive_IT+0xa6>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	6853      	ldr	r3, [r2, #4]
 80052f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052f4:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80052f6:	4b16      	ldr	r3, [pc, #88]	; (8005350 <HAL_SPI_Receive_IT+0xd4>)
 80052f8:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005300:	d017      	beq.n	8005332 <HAL_SPI_Receive_IT+0xb6>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005302:	6822      	ldr	r2, [r4, #0]
 8005304:	6853      	ldr	r3, [r2, #4]
 8005306:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800530a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005314:	d117      	bne.n	8005346 <HAL_SPI_Receive_IT+0xca>
    __HAL_SPI_ENABLE(hspi);
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800531c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800531e:	2000      	movs	r0, #0
 8005320:	e7c1      	b.n	80052a6 <HAL_SPI_Receive_IT+0x2a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	6853      	ldr	r3, [r2, #4]
 8005326:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800532a:	6053      	str	r3, [r2, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800532c:	4b09      	ldr	r3, [pc, #36]	; (8005354 <HAL_SPI_Receive_IT+0xd8>)
 800532e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005330:	e7e3      	b.n	80052fa <HAL_SPI_Receive_IT+0x7e>
    SPI_1LINE_RX(hspi);
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e7e1      	b.n	8005302 <HAL_SPI_Receive_IT+0x86>
    errorcode = HAL_ERROR;
 800533e:	2001      	movs	r0, #1
 8005340:	e7b1      	b.n	80052a6 <HAL_SPI_Receive_IT+0x2a>
 8005342:	2001      	movs	r0, #1
 8005344:	e7af      	b.n	80052a6 <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005346:	2000      	movs	r0, #0
 8005348:	e7ad      	b.n	80052a6 <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 800534a:	2002      	movs	r0, #2
}
 800534c:	bd10      	pop	{r4, pc}
 800534e:	bf00      	nop
 8005350:	0800546d 	.word	0x0800546d
 8005354:	08005441 	.word	0x08005441

08005358 <HAL_SPI_RxCpltCallback>:
{
 8005358:	4770      	bx	lr

0800535a <HAL_SPI_TxRxCpltCallback>:
{
 800535a:	4770      	bx	lr

0800535c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800535c:	b510      	push	{r4, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005362:	f7fe f9b9 	bl	80036d8 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	6853      	ldr	r3, [r2, #4]
 800536a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800536e:	6053      	str	r3, [r2, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005370:	4602      	mov	r2, r0
 8005372:	2164      	movs	r1, #100	; 0x64
 8005374:	4620      	mov	r0, r4
 8005376:	f7ff fe39 	bl	8004fec <SPI_EndRxTxTransaction>
 800537a:	b118      	cbz	r0, 8005384 <SPI_CloseTx_ISR+0x28>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800537c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800537e:	f043 0320 	orr.w	r3, r3, #32
 8005382:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005384:	68a3      	ldr	r3, [r4, #8]
 8005386:	b933      	cbnz	r3, 8005396 <SPI_CloseTx_ISR+0x3a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	9201      	str	r2, [sp, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005396:	2301      	movs	r3, #1
 8005398:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800539c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800539e:	b923      	cbnz	r3, 80053aa <SPI_CloseTx_ISR+0x4e>
  {
    /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
 80053a0:	4620      	mov	r0, r4
 80053a2:	f7fd fdf9 	bl	8002f98 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80053a6:	b002      	add	sp, #8
 80053a8:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 80053aa:	4620      	mov	r0, r4
 80053ac:	f7fd fdf8 	bl	8002fa0 <HAL_SPI_ErrorCallback>
 80053b0:	e7f9      	b.n	80053a6 <SPI_CloseTx_ISR+0x4a>

080053b2 <SPI_TxISR_8BIT>:
{
 80053b2:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80053b4:	6802      	ldr	r2, [r0, #0]
 80053b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80053b8:	1c59      	adds	r1, r3, #1
 80053ba:	6381      	str	r1, [r0, #56]	; 0x38
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	7313      	strb	r3, [r2, #12]
  hspi->TxXferCount--;
 80053c0:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80053ca:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	b103      	cbz	r3, 80053d2 <SPI_TxISR_8BIT+0x20>
 80053d0:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 80053d2:	f7ff ffc3 	bl	800535c <SPI_CloseTx_ISR>
}
 80053d6:	e7fb      	b.n	80053d0 <SPI_TxISR_8BIT+0x1e>

080053d8 <SPI_TxISR_16BIT>:
{
 80053d8:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053da:	6803      	ldr	r3, [r0, #0]
 80053dc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80053de:	8812      	ldrh	r2, [r2, #0]
 80053e0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80053e4:	3302      	adds	r3, #2
 80053e6:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80053e8:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80053f2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	b103      	cbz	r3, 80053fa <SPI_TxISR_16BIT+0x22>
 80053f8:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 80053fa:	f7ff ffaf 	bl	800535c <SPI_CloseTx_ISR>
}
 80053fe:	e7fb      	b.n	80053f8 <SPI_TxISR_16BIT+0x20>

08005400 <SPI_CloseRx_ISR>:
{
 8005400:	b510      	push	{r4, lr}
 8005402:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005404:	6802      	ldr	r2, [r0, #0]
 8005406:	6853      	ldr	r3, [r2, #4]
 8005408:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800540c:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800540e:	f7fe f963 	bl	80036d8 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	2164      	movs	r1, #100	; 0x64
 8005416:	4620      	mov	r0, r4
 8005418:	f7ff fe1c 	bl	8005054 <SPI_EndRxTransaction>
 800541c:	b118      	cbz	r0, 8005426 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005420:	f043 0320 	orr.w	r3, r3, #32
 8005424:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005426:	2301      	movs	r3, #1
 8005428:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800542c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800542e:	b11b      	cbz	r3, 8005438 <SPI_CloseRx_ISR+0x38>
      HAL_SPI_ErrorCallback(hspi);
 8005430:	4620      	mov	r0, r4
 8005432:	f7fd fdb5 	bl	8002fa0 <HAL_SPI_ErrorCallback>
 8005436:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8005438:	4620      	mov	r0, r4
 800543a:	f7ff ff8d 	bl	8005358 <HAL_SPI_RxCpltCallback>
 800543e:	bd10      	pop	{r4, pc}

08005440 <SPI_RxISR_8BIT>:
{
 8005440:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr++ = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005442:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	6402      	str	r2, [r0, #64]	; 0x40
 8005448:	6802      	ldr	r2, [r0, #0]
 800544a:	7b12      	ldrb	r2, [r2, #12]
 800544c:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount--;
 800544e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005452:	b29b      	uxth	r3, r3
 8005454:	3b01      	subs	r3, #1
 8005456:	b29b      	uxth	r3, r3
 8005458:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800545c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005460:	b29b      	uxth	r3, r3
 8005462:	b103      	cbz	r3, 8005466 <SPI_RxISR_8BIT+0x26>
 8005464:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8005466:	f7ff ffcb 	bl	8005400 <SPI_CloseRx_ISR>
}
 800546a:	e7fb      	b.n	8005464 <SPI_RxISR_8BIT+0x24>

0800546c <SPI_RxISR_16BIT>:
{
 800546c:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800546e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005470:	6802      	ldr	r2, [r0, #0]
 8005472:	68d2      	ldr	r2, [r2, #12]
 8005474:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005476:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005478:	3302      	adds	r3, #2
 800547a:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800547c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29b      	uxth	r3, r3
 8005486:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800548a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800548e:	b29b      	uxth	r3, r3
 8005490:	b103      	cbz	r3, 8005494 <SPI_RxISR_16BIT+0x28>
 8005492:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8005494:	f7ff ffb4 	bl	8005400 <SPI_CloseRx_ISR>
}
 8005498:	e7fb      	b.n	8005492 <SPI_RxISR_16BIT+0x26>

0800549a <SPI_CloseRxTx_ISR>:
{
 800549a:	b510      	push	{r4, lr}
 800549c:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 800549e:	f7fe f91b 	bl	80036d8 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	6853      	ldr	r3, [r2, #4]
 80054a6:	f023 0320 	bic.w	r3, r3, #32
 80054aa:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80054ac:	4602      	mov	r2, r0
 80054ae:	2164      	movs	r1, #100	; 0x64
 80054b0:	4620      	mov	r0, r4
 80054b2:	f7ff fd9b 	bl	8004fec <SPI_EndRxTxTransaction>
 80054b6:	b118      	cbz	r0, 80054c0 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80054ba:	f043 0320 	orr.w	r3, r3, #32
 80054be:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80054c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80054c2:	b993      	cbnz	r3, 80054ea <SPI_CloseRxTx_ISR+0x50>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80054c4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d006      	beq.n	80054dc <SPI_CloseRxTx_ISR+0x42>
        hspi->State = HAL_SPI_STATE_READY;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80054d4:	4620      	mov	r0, r4
 80054d6:	f7ff ff40 	bl	800535a <HAL_SPI_TxRxCpltCallback>
 80054da:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 80054dc:	2301      	movs	r3, #1
 80054de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 80054e2:	4620      	mov	r0, r4
 80054e4:	f7ff ff38 	bl	8005358 <HAL_SPI_RxCpltCallback>
 80054e8:	bd10      	pop	{r4, pc}
      hspi->State = HAL_SPI_STATE_READY;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80054f0:	4620      	mov	r0, r4
 80054f2:	f7fd fd55 	bl	8002fa0 <HAL_SPI_ErrorCallback>
 80054f6:	bd10      	pop	{r4, pc}

080054f8 <SPI_2linesTxISR_8BIT>:
{
 80054f8:	b508      	push	{r3, lr}
  if (hspi->TxXferCount >= 2U)
 80054fa:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d918      	bls.n	8005534 <SPI_2linesTxISR_8BIT+0x3c>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005502:	6803      	ldr	r3, [r0, #0]
 8005504:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005506:	8812      	ldrh	r2, [r2, #0]
 8005508:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800550a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800550c:	3302      	adds	r3, #2
 800550e:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005510:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b02      	subs	r3, #2
 8005516:	b29b      	uxth	r3, r3
 8005518:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800551a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800551c:	b29b      	uxth	r3, r3
 800551e:	b943      	cbnz	r3, 8005532 <SPI_2linesTxISR_8BIT+0x3a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005520:	6802      	ldr	r2, [r0, #0]
 8005522:	6853      	ldr	r3, [r2, #4]
 8005524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005528:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800552a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800552e:	b29b      	uxth	r3, r3
 8005530:	b163      	cbz	r3, 800554c <SPI_2linesTxISR_8BIT+0x54>
 8005532:	bd08      	pop	{r3, pc}
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8005534:	6802      	ldr	r2, [r0, #0]
 8005536:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005538:	1c59      	adds	r1, r3, #1
 800553a:	6381      	str	r1, [r0, #56]	; 0x38
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	7313      	strb	r3, [r2, #12]
    hspi->TxXferCount--;
 8005540:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29b      	uxth	r3, r3
 8005548:	87c3      	strh	r3, [r0, #62]	; 0x3e
 800554a:	e7e6      	b.n	800551a <SPI_2linesTxISR_8BIT+0x22>
      SPI_CloseRxTx_ISR(hspi);
 800554c:	f7ff ffa5 	bl	800549a <SPI_CloseRxTx_ISR>
}
 8005550:	e7ef      	b.n	8005532 <SPI_2linesTxISR_8BIT+0x3a>

08005552 <SPI_2linesRxISR_8BIT>:
{
 8005552:	b508      	push	{r3, lr}
  if (hspi->RxXferCount > 1U)
 8005554:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b01      	cmp	r3, #1
 800555c:	d925      	bls.n	80055aa <SPI_2linesRxISR_8BIT+0x58>
    *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800555e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005560:	6802      	ldr	r2, [r0, #0]
 8005562:	68d2      	ldr	r2, [r2, #12]
 8005564:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005566:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005568:	3302      	adds	r3, #2
 800556a:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800556c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b02      	subs	r3, #2
 8005574:	b29b      	uxth	r3, r3
 8005576:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800557a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	d00c      	beq.n	800559e <SPI_2linesRxISR_8BIT+0x4c>
  if (hspi->RxXferCount == 0U)
 8005584:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005588:	b29b      	uxth	r3, r3
 800558a:	b93b      	cbnz	r3, 800559c <SPI_2linesRxISR_8BIT+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800558c:	6802      	ldr	r2, [r0, #0]
 800558e:	6853      	ldr	r3, [r2, #4]
 8005590:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005594:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8005596:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005598:	b29b      	uxth	r3, r3
 800559a:	b1a3      	cbz	r3, 80055c6 <SPI_2linesRxISR_8BIT+0x74>
 800559c:	bd08      	pop	{r3, pc}
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800559e:	6802      	ldr	r2, [r0, #0]
 80055a0:	6853      	ldr	r3, [r2, #4]
 80055a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055a6:	6053      	str	r3, [r2, #4]
 80055a8:	e7ec      	b.n	8005584 <SPI_2linesRxISR_8BIT+0x32>
    *hspi->pRxBuffPtr++ = *((__IO uint8_t *)&hspi->Instance->DR);
 80055aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	6402      	str	r2, [r0, #64]	; 0x40
 80055b0:	6802      	ldr	r2, [r0, #0]
 80055b2:	7b12      	ldrb	r2, [r2, #12]
 80055b4:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 80055b6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29b      	uxth	r3, r3
 80055c0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 80055c4:	e7de      	b.n	8005584 <SPI_2linesRxISR_8BIT+0x32>
      SPI_CloseRxTx_ISR(hspi);
 80055c6:	f7ff ff68 	bl	800549a <SPI_CloseRxTx_ISR>
}
 80055ca:	e7e7      	b.n	800559c <SPI_2linesRxISR_8BIT+0x4a>

080055cc <SPI_2linesTxISR_16BIT>:
{
 80055cc:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ce:	6803      	ldr	r3, [r0, #0]
 80055d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80055d2:	8812      	ldrh	r2, [r2, #0]
 80055d4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80055d8:	3302      	adds	r3, #2
 80055da:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80055dc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80055e6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	b943      	cbnz	r3, 80055fe <SPI_2linesTxISR_16BIT+0x32>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80055ec:	6802      	ldr	r2, [r0, #0]
 80055ee:	6853      	ldr	r3, [r2, #4]
 80055f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f4:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80055f6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	b103      	cbz	r3, 8005600 <SPI_2linesTxISR_16BIT+0x34>
 80055fe:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8005600:	f7ff ff4b 	bl	800549a <SPI_CloseRxTx_ISR>
}
 8005604:	e7fb      	b.n	80055fe <SPI_2linesTxISR_16BIT+0x32>

08005606 <SPI_2linesRxISR_16BIT>:
{
 8005606:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005608:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800560a:	6802      	ldr	r2, [r0, #0]
 800560c:	68d2      	ldr	r2, [r2, #12]
 800560e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005610:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005612:	3302      	adds	r3, #2
 8005614:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8005616:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29b      	uxth	r3, r3
 8005620:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 8005624:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8005628:	b29b      	uxth	r3, r3
 800562a:	b93b      	cbnz	r3, 800563c <SPI_2linesRxISR_16BIT+0x36>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800562c:	6802      	ldr	r2, [r0, #0]
 800562e:	6853      	ldr	r3, [r2, #4]
 8005630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005634:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 8005636:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005638:	b29b      	uxth	r3, r3
 800563a:	b103      	cbz	r3, 800563e <SPI_2linesRxISR_16BIT+0x38>
 800563c:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 800563e:	f7ff ff2c 	bl	800549a <SPI_CloseRxTx_ISR>
}
 8005642:	e7fb      	b.n	800563c <SPI_2linesRxISR_16BIT+0x36>

08005644 <HAL_SPI_GetState>:
  return hspi->State;
 8005644:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8005648:	4770      	bx	lr

0800564a <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564a:	6802      	ldr	r2, [r0, #0]
 800564c:	6813      	ldr	r3, [r2, #0]
 800564e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005652:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005654:	6802      	ldr	r2, [r0, #0]
 8005656:	6893      	ldr	r3, [r2, #8]
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	6093      	str	r3, [r2, #8]
#endif

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800565e:	2320      	movs	r3, #32
 8005660:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	6603      	str	r3, [r0, #96]	; 0x60
 8005668:	4770      	bx	lr

0800566a <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800566a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b21      	cmp	r3, #33	; 0x21
 8005672:	d000      	beq.n	8005676 <UART_TxISR_8BIT+0xc>
 8005674:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 8005676:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800567a:	b29b      	uxth	r3, r3
 800567c:	b16b      	cbz	r3, 800569a <UART_TxISR_8BIT+0x30>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 800567e:	6802      	ldr	r2, [r0, #0]
 8005680:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005682:	1c59      	adds	r1, r3, #1
 8005684:	64c1      	str	r1, [r0, #76]	; 0x4c
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800568a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29b      	uxth	r3, r3
 8005694:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 8005698:	e7ec      	b.n	8005674 <UART_TxISR_8BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800569a:	6802      	ldr	r2, [r0, #0]
 800569c:	6813      	ldr	r3, [r2, #0]
 800569e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056a4:	6802      	ldr	r2, [r0, #0]
 80056a6:	6813      	ldr	r3, [r2, #0]
 80056a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4770      	bx	lr

080056b0 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056b0:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b21      	cmp	r3, #33	; 0x21
 80056b8:	d000      	beq.n	80056bc <UART_TxISR_16BIT+0xc>
 80056ba:	4770      	bx	lr
  {
    if (huart->TxXferCount == 0)
 80056bc:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	b183      	cbz	r3, 80056e6 <UART_TxISR_16BIT+0x36>
      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
    }
    else
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80056c6:	6802      	ldr	r2, [r0, #0]
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ce:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2;
 80056d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80056d2:	3302      	adds	r3, #2
 80056d4:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80056d6:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    }
  }
}
 80056e4:	e7e9      	b.n	80056ba <UART_TxISR_16BIT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80056e6:	6802      	ldr	r2, [r0, #0]
 80056e8:	6813      	ldr	r3, [r2, #0]
 80056ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ee:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056f0:	6802      	ldr	r2, [r0, #0]
 80056f2:	6813      	ldr	r3, [r2, #0]
 80056f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4770      	bx	lr

080056fc <HAL_UART_DeInit>:
  if (huart == NULL)
 80056fc:	b1d8      	cbz	r0, 8005736 <HAL_UART_DeInit+0x3a>
{
 80056fe:	b538      	push	{r3, r4, r5, lr}
 8005700:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8005702:	2324      	movs	r3, #36	; 0x24
 8005704:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8005708:	6802      	ldr	r2, [r0, #0]
 800570a:	6813      	ldr	r3, [r2, #0]
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8005712:	6803      	ldr	r3, [r0, #0]
 8005714:	2500      	movs	r5, #0
 8005716:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005718:	6803      	ldr	r3, [r0, #0]
 800571a:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800571c:	6803      	ldr	r3, [r0, #0]
 800571e:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8005720:	f7fd fd84 	bl	800322c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	6765      	str	r5, [r4, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 8005726:	f884 5071 	strb.w	r5, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_RESET;
 800572a:	f884 5072 	strb.w	r5, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 800572e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  return HAL_OK;
 8005732:	4628      	mov	r0, r5
 8005734:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005736:	2001      	movs	r0, #1
 8005738:	4770      	bx	lr
	...

0800573c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800573c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b20      	cmp	r3, #32
 8005744:	d001      	beq.n	800574a <HAL_UART_Transmit_IT+0xe>
    return HAL_BUSY;
 8005746:	2002      	movs	r0, #2
 8005748:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 800574a:	b341      	cbz	r1, 800579e <HAL_UART_Transmit_IT+0x62>
 800574c:	b34a      	cbz	r2, 80057a2 <HAL_UART_Transmit_IT+0x66>
    __HAL_LOCK(huart);
 800574e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005752:	2b01      	cmp	r3, #1
 8005754:	d027      	beq.n	80057a6 <HAL_UART_Transmit_IT+0x6a>
 8005756:	2301      	movs	r3, #1
 8005758:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 800575c:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800575e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8005762:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800576c:	2321      	movs	r3, #33	; 0x21
 800576e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005772:	6883      	ldr	r3, [r0, #8]
 8005774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005778:	d00b      	beq.n	8005792 <HAL_UART_Transmit_IT+0x56>
        huart->TxISR = UART_TxISR_8BIT;
 800577a:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <HAL_UART_Transmit_IT+0x70>)
 800577c:	6643      	str	r3, [r0, #100]	; 0x64
      __HAL_UNLOCK(huart);
 800577e:	2300      	movs	r3, #0
 8005780:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005784:	6801      	ldr	r1, [r0, #0]
 8005786:	680a      	ldr	r2, [r1, #0]
 8005788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800578c:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800578e:	4618      	mov	r0, r3
 8005790:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005792:	6903      	ldr	r3, [r0, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_UART_Transmit_IT+0x3e>
        huart->TxISR = UART_TxISR_16BIT;
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_UART_Transmit_IT+0x74>)
 800579a:	6643      	str	r3, [r0, #100]	; 0x64
 800579c:	e7ef      	b.n	800577e <HAL_UART_Transmit_IT+0x42>
      return HAL_ERROR;
 800579e:	2001      	movs	r0, #1
 80057a0:	4770      	bx	lr
 80057a2:	2001      	movs	r0, #1
 80057a4:	4770      	bx	lr
    __HAL_LOCK(huart);
 80057a6:	2002      	movs	r0, #2
}
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	0800566b 	.word	0x0800566b
 80057b0:	080056b1 	.word	0x080056b1

080057b4 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80057b4:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b20      	cmp	r3, #32
 80057bc:	d001      	beq.n	80057c2 <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 80057be:	2002      	movs	r0, #2
 80057c0:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 80057c2:	2900      	cmp	r1, #0
 80057c4:	d056      	beq.n	8005874 <HAL_UART_Receive_IT+0xc0>
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	d056      	beq.n	8005878 <HAL_UART_Receive_IT+0xc4>
    __HAL_LOCK(huart);
 80057ca:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d054      	beq.n	800587c <HAL_UART_Receive_IT+0xc8>
 80057d2:	2301      	movs	r3, #1
 80057d4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pRxBuffPtr  = pData;
 80057d8:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 80057da:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 80057de:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    huart->RxISR       = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 80057e6:	6883      	ldr	r3, [r0, #8]
 80057e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ec:	d006      	beq.n	80057fc <HAL_UART_Receive_IT+0x48>
 80057ee:	b9a3      	cbnz	r3, 800581a <HAL_UART_Receive_IT+0x66>
 80057f0:	6903      	ldr	r3, [r0, #16]
 80057f2:	b973      	cbnz	r3, 8005812 <HAL_UART_Receive_IT+0x5e>
 80057f4:	23ff      	movs	r3, #255	; 0xff
 80057f6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80057fa:	e011      	b.n	8005820 <HAL_UART_Receive_IT+0x6c>
 80057fc:	6903      	ldr	r3, [r0, #16]
 80057fe:	b923      	cbnz	r3, 800580a <HAL_UART_Receive_IT+0x56>
 8005800:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005804:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005808:	e00a      	b.n	8005820 <HAL_UART_Receive_IT+0x6c>
 800580a:	23ff      	movs	r3, #255	; 0xff
 800580c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005810:	e006      	b.n	8005820 <HAL_UART_Receive_IT+0x6c>
 8005812:	237f      	movs	r3, #127	; 0x7f
 8005814:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005818:	e002      	b.n	8005820 <HAL_UART_Receive_IT+0x6c>
 800581a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800581e:	d019      	beq.n	8005854 <HAL_UART_Receive_IT+0xa0>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005820:	2300      	movs	r3, #0
 8005822:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005824:	2322      	movs	r3, #34	; 0x22
 8005826:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582a:	6802      	ldr	r2, [r0, #0]
 800582c:	6893      	ldr	r3, [r2, #8]
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	6093      	str	r3, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005834:	6883      	ldr	r3, [r0, #8]
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583a:	d015      	beq.n	8005868 <HAL_UART_Receive_IT+0xb4>
        huart->RxISR = UART_RxISR_8BIT;
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <HAL_UART_Receive_IT+0xcc>)
 800583e:	6603      	str	r3, [r0, #96]	; 0x60
      __HAL_UNLOCK(huart);
 8005840:	2300      	movs	r3, #0
 8005842:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005846:	6801      	ldr	r1, [r0, #0]
 8005848:	680a      	ldr	r2, [r1, #0]
 800584a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800584e:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8005850:	4618      	mov	r0, r3
 8005852:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8005854:	6903      	ldr	r3, [r0, #16]
 8005856:	b91b      	cbnz	r3, 8005860 <HAL_UART_Receive_IT+0xac>
 8005858:	237f      	movs	r3, #127	; 0x7f
 800585a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 800585e:	e7df      	b.n	8005820 <HAL_UART_Receive_IT+0x6c>
 8005860:	233f      	movs	r3, #63	; 0x3f
 8005862:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8005866:	e7db      	b.n	8005820 <HAL_UART_Receive_IT+0x6c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005868:	6903      	ldr	r3, [r0, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e6      	bne.n	800583c <HAL_UART_Receive_IT+0x88>
        huart->RxISR = UART_RxISR_16BIT;
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <HAL_UART_Receive_IT+0xd0>)
 8005870:	6603      	str	r3, [r0, #96]	; 0x60
 8005872:	e7e5      	b.n	8005840 <HAL_UART_Receive_IT+0x8c>
      return HAL_ERROR;
 8005874:	2001      	movs	r0, #1
 8005876:	4770      	bx	lr
 8005878:	2001      	movs	r0, #1
 800587a:	4770      	bx	lr
    __HAL_LOCK(huart);
 800587c:	2002      	movs	r0, #2
}
 800587e:	4770      	bx	lr
 8005880:	080058a5 	.word	0x080058a5
 8005884:	08005909 	.word	0x08005909

08005888 <UART_EndTransmit_IT>:
  * @param huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005888:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800588a:	6801      	ldr	r1, [r0, #0]
 800588c:	680a      	ldr	r2, [r1, #0]
 800588e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005892:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005894:	2220      	movs	r2, #32
 8005896:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800589a:	2200      	movs	r2, #0
 800589c:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800589e:	f7fd fce7 	bl	8003270 <HAL_UART_TxCpltCallback>
 80058a2:	bd08      	pop	{r3, pc}

080058a4 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 80058a4:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058a8:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b22      	cmp	r3, #34	; 0x22
 80058b0:	d006      	beq.n	80058c0 <UART_RxISR_8BIT+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058b2:	6802      	ldr	r2, [r0, #0]
 80058b4:	8b13      	ldrh	r3, [r2, #24]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f043 0308 	orr.w	r3, r3, #8
 80058bc:	8313      	strh	r3, [r2, #24]
  }
}
 80058be:	4770      	bx	lr
{
 80058c0:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058c2:	6803      	ldr	r3, [r0, #0]
 80058c4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058c6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80058c8:	1c5c      	adds	r4, r3, #1
 80058ca:	6544      	str	r4, [r0, #84]	; 0x54
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	400a      	ands	r2, r1
 80058d0:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0)
 80058d2:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29b      	uxth	r3, r3
 80058dc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80058e0:	b103      	cbz	r3, 80058e4 <UART_RxISR_8BIT+0x40>
 80058e2:	bd10      	pop	{r4, pc}
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e4:	6802      	ldr	r2, [r0, #0]
 80058e6:	6813      	ldr	r3, [r2, #0]
 80058e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058ec:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ee:	6802      	ldr	r2, [r0, #0]
 80058f0:	6893      	ldr	r3, [r2, #8]
 80058f2:	f023 0301 	bic.w	r3, r3, #1
 80058f6:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80058f8:	2320      	movs	r3, #32
 80058fa:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8005902:	f7fd fcf3 	bl	80032ec <HAL_UART_RxCpltCallback>
 8005906:	bd10      	pop	{r4, pc}

08005908 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005908:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800590a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800590e:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b22      	cmp	r3, #34	; 0x22
 8005916:	d006      	beq.n	8005926 <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005918:	6802      	ldr	r2, [r0, #0]
 800591a:	8b13      	ldrh	r3, [r2, #24]
 800591c:	b29b      	uxth	r3, r3
 800591e:	f043 0308 	orr.w	r3, r3, #8
 8005922:	8313      	strh	r3, [r2, #24]
 8005924:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005926:	6803      	ldr	r3, [r0, #0]
 8005928:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800592a:	6d43      	ldr	r3, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 800592c:	400a      	ands	r2, r1
 800592e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2;
 8005930:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005932:	3302      	adds	r3, #2
 8005934:	6543      	str	r3, [r0, #84]	; 0x54
    if (--huart->RxXferCount == 0)
 8005936:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29b      	uxth	r3, r3
 8005940:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1ed      	bne.n	8005924 <UART_RxISR_16BIT+0x1c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005948:	6802      	ldr	r2, [r0, #0]
 800594a:	6813      	ldr	r3, [r2, #0]
 800594c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005950:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005952:	6802      	ldr	r2, [r0, #0]
 8005954:	6893      	ldr	r3, [r2, #8]
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800595c:	2320      	movs	r3, #32
 800595e:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
      huart->RxISR = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8005966:	f7fd fcc1 	bl	80032ec <HAL_UART_RxCpltCallback>
 800596a:	bd08      	pop	{r3, pc}

0800596c <HAL_UART_IRQHandler>:
{
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005970:	6802      	ldr	r2, [r0, #0]
 8005972:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005974:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005976:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 8005978:	f013 050f 	ands.w	r5, r3, #15
 800597c:	d10c      	bne.n	8005998 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != RESET)
 800597e:	f013 0f20 	tst.w	r3, #32
 8005982:	d009      	beq.n	8005998 <HAL_UART_IRQHandler+0x2c>
        && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005984:	f011 0f20 	tst.w	r1, #32
 8005988:	d006      	beq.n	8005998 <HAL_UART_IRQHandler+0x2c>
      if (huart->RxISR != NULL)
 800598a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8093 	beq.w	8005ab8 <HAL_UART_IRQHandler+0x14c>
        huart->RxISR(huart);
 8005992:	4620      	mov	r0, r4
 8005994:	4798      	blx	r3
 8005996:	bd38      	pop	{r3, r4, r5, pc}
  if ((errorflags != RESET)
 8005998:	2d00      	cmp	r5, #0
 800599a:	d06f      	beq.n	8005a7c <HAL_UART_IRQHandler+0x110>
      && (((cr3its & USART_CR3_EIE) != RESET)
 800599c:	f010 0501 	ands.w	r5, r0, #1
 80059a0:	d102      	bne.n	80059a8 <HAL_UART_IRQHandler+0x3c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059a2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80059a6:	d069      	beq.n	8005a7c <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059a8:	f013 0f01 	tst.w	r3, #1
 80059ac:	d007      	beq.n	80059be <HAL_UART_IRQHandler+0x52>
 80059ae:	f411 7f80 	tst.w	r1, #256	; 0x100
 80059b2:	d004      	beq.n	80059be <HAL_UART_IRQHandler+0x52>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059b4:	2001      	movs	r0, #1
 80059b6:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059b8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80059ba:	4302      	orrs	r2, r0
 80059bc:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059be:	f013 0f02 	tst.w	r3, #2
 80059c2:	d007      	beq.n	80059d4 <HAL_UART_IRQHandler+0x68>
 80059c4:	b135      	cbz	r5, 80059d4 <HAL_UART_IRQHandler+0x68>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	2002      	movs	r0, #2
 80059ca:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059cc:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80059ce:	f042 0204 	orr.w	r2, r2, #4
 80059d2:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059d4:	f013 0f04 	tst.w	r3, #4
 80059d8:	d007      	beq.n	80059ea <HAL_UART_IRQHandler+0x7e>
 80059da:	b135      	cbz	r5, 80059ea <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059dc:	6822      	ldr	r2, [r4, #0]
 80059de:	2004      	movs	r0, #4
 80059e0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80059e4:	f042 0202 	orr.w	r2, r2, #2
 80059e8:	6762      	str	r2, [r4, #116]	; 0x74
    if (((isrflags & USART_ISR_ORE) != RESET)
 80059ea:	f013 0f08 	tst.w	r3, #8
 80059ee:	d009      	beq.n	8005a04 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != RESET) ||
 80059f0:	f011 0f20 	tst.w	r1, #32
 80059f4:	d100      	bne.n	80059f8 <HAL_UART_IRQHandler+0x8c>
 80059f6:	b12d      	cbz	r5, 8005a04 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	2008      	movs	r0, #8
 80059fc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059fe:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005a00:	4302      	orrs	r2, r0
 8005a02:	6762      	str	r2, [r4, #116]	; 0x74
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a04:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	d056      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x14c>
      if (((isrflags & USART_ISR_RXNE) != RESET)
 8005a0a:	f013 0f20 	tst.w	r3, #32
 8005a0e:	d006      	beq.n	8005a1e <HAL_UART_IRQHandler+0xb2>
          && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a10:	f011 0f20 	tst.w	r1, #32
 8005a14:	d003      	beq.n	8005a1e <HAL_UART_IRQHandler+0xb2>
        if (huart->RxISR != NULL)
 8005a16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005a18:	b10b      	cbz	r3, 8005a1e <HAL_UART_IRQHandler+0xb2>
          huart->RxISR(huart);
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005a1e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005a20:	f013 0f08 	tst.w	r3, #8
 8005a24:	d104      	bne.n	8005a30 <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8005a2a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a2e:	d01f      	beq.n	8005a70 <HAL_UART_IRQHandler+0x104>
        UART_EndRxTransfer(huart);
 8005a30:	4620      	mov	r0, r4
 8005a32:	f7ff fe0a 	bl	800564a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a3e:	d013      	beq.n	8005a68 <HAL_UART_IRQHandler+0xfc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a40:	689a      	ldr	r2, [r3, #8]
 8005a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a46:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8005a48:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005a4a:	b14b      	cbz	r3, 8005a60 <HAL_UART_IRQHandler+0xf4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_UART_IRQHandler+0x158>)
 8005a4e:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a50:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005a52:	f7fd fedd 	bl	8003810 <HAL_DMA_Abort_IT>
 8005a56:	b378      	cbz	r0, 8005ab8 <HAL_UART_IRQHandler+0x14c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a58:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005a5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005a5c:	4798      	blx	r3
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
            HAL_UART_ErrorCallback(huart);
 8005a60:	4620      	mov	r0, r4
 8005a62:	f7fd fc8d 	bl	8003380 <HAL_UART_ErrorCallback>
 8005a66:	bd38      	pop	{r3, r4, r5, pc}
          HAL_UART_ErrorCallback(huart);
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f7fd fc89 	bl	8003380 <HAL_UART_ErrorCallback>
 8005a6e:	bd38      	pop	{r3, r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8005a70:	4620      	mov	r0, r4
 8005a72:	f7fd fc85 	bl	8003380 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a76:	2300      	movs	r3, #0
 8005a78:	6763      	str	r3, [r4, #116]	; 0x74
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8005a7c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005a80:	d002      	beq.n	8005a88 <HAL_UART_IRQHandler+0x11c>
 8005a82:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8005a86:	d10a      	bne.n	8005a9e <HAL_UART_IRQHandler+0x132>
  if (((isrflags & USART_ISR_TXE) != RESET)
 8005a88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a8c:	d00e      	beq.n	8005aac <HAL_UART_IRQHandler+0x140>
      && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a8e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005a92:	d00b      	beq.n	8005aac <HAL_UART_IRQHandler+0x140>
    if (huart->TxISR != NULL)
 8005a94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a96:	b17b      	cbz	r3, 8005ab8 <HAL_UART_IRQHandler+0x14c>
      huart->TxISR(huart);
 8005a98:	4620      	mov	r0, r4
 8005a9a:	4798      	blx	r3
 8005a9c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005aa2:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f000 fb6c 	bl	8006182 <HAL_UARTEx_WakeupCallback>
    return;
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
  if (((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aac:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ab0:	d002      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x14c>
 8005ab2:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005ab6:	d100      	bne.n	8005aba <HAL_UART_IRQHandler+0x14e>
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7ff fee4 	bl	8005888 <UART_EndTransmit_IT>
    return;
 8005ac0:	e7fa      	b.n	8005ab8 <HAL_UART_IRQHandler+0x14c>
 8005ac2:	bf00      	nop
 8005ac4:	08005ac9 	.word	0x08005ac9

08005ac8 <UART_DMAAbortOnError>:
{
 8005ac8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005aca:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ad2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8005ad6:	f7fd fc53 	bl	8003380 <HAL_UART_ErrorCallback>
 8005ada:	bd08      	pop	{r3, pc}

08005adc <UART_SetConfig>:
{
 8005adc:	e92d 4b78 	stmdb	sp!, {r3, r4, r5, r6, r8, r9, fp, lr}
 8005ae0:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ae2:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ae4:	6883      	ldr	r3, [r0, #8]
 8005ae6:	6902      	ldr	r2, [r0, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	6942      	ldr	r2, [r0, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	69c2      	ldr	r2, [r0, #28]
 8005af0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005af2:	6808      	ldr	r0, [r1, #0]
 8005af4:	4a9b      	ldr	r2, [pc, #620]	; (8005d64 <UART_SetConfig+0x288>)
 8005af6:	4002      	ands	r2, r0
 8005af8:	4313      	orrs	r3, r2
 8005afa:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005afc:	6822      	ldr	r2, [r4, #0]
 8005afe:	6853      	ldr	r3, [r2, #4]
 8005b00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b04:	68e1      	ldr	r1, [r4, #12]
 8005b06:	430b      	orrs	r3, r1
 8005b08:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b0a:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b0c:	6822      	ldr	r2, [r4, #0]
 8005b0e:	4996      	ldr	r1, [pc, #600]	; (8005d68 <UART_SetConfig+0x28c>)
 8005b10:	428a      	cmp	r2, r1
 8005b12:	d001      	beq.n	8005b18 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 8005b14:	6a21      	ldr	r1, [r4, #32]
 8005b16:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b18:	6891      	ldr	r1, [r2, #8]
 8005b1a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	4a91      	ldr	r2, [pc, #580]	; (8005d6c <UART_SetConfig+0x290>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d023      	beq.n	8005b72 <UART_SetConfig+0x96>
 8005b2a:	4a91      	ldr	r2, [pc, #580]	; (8005d70 <UART_SetConfig+0x294>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d034      	beq.n	8005b9a <UART_SetConfig+0xbe>
 8005b30:	4a90      	ldr	r2, [pc, #576]	; (8005d74 <UART_SetConfig+0x298>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d04a      	beq.n	8005bcc <UART_SetConfig+0xf0>
 8005b36:	4a90      	ldr	r2, [pc, #576]	; (8005d78 <UART_SetConfig+0x29c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d05d      	beq.n	8005bf8 <UART_SetConfig+0x11c>
 8005b3c:	4a8a      	ldr	r2, [pc, #552]	; (8005d68 <UART_SetConfig+0x28c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d070      	beq.n	8005c24 <UART_SetConfig+0x148>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005b42:	2510      	movs	r5, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b44:	4a88      	ldr	r2, [pc, #544]	; (8005d68 <UART_SetConfig+0x28c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	f000 808f 	beq.w	8005c6a <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b4c:	69e3      	ldr	r3, [r4, #28]
 8005b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b52:	f000 80fd 	beq.w	8005d50 <UART_SetConfig+0x274>
    switch (clocksource)
 8005b56:	2d08      	cmp	r5, #8
 8005b58:	f200 819b 	bhi.w	8005e92 <UART_SetConfig+0x3b6>
 8005b5c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8005b60:	0171015a 	.word	0x0171015a
 8005b64:	0199017b 	.word	0x0199017b
 8005b68:	01990186 	.word	0x01990186
 8005b6c:	01990199 	.word	0x01990199
 8005b70:	0190      	.short	0x0190
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b72:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8005b76:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005b7a:	f002 0203 	and.w	r2, r2, #3
 8005b7e:	2a03      	cmp	r2, #3
 8005b80:	d809      	bhi.n	8005b96 <UART_SetConfig+0xba>
 8005b82:	e8df f002 	tbb	[pc, r2]
 8005b86:	0402      	.short	0x0402
 8005b88:	0668      	.short	0x0668
 8005b8a:	2501      	movs	r5, #1
 8005b8c:	e7da      	b.n	8005b44 <UART_SetConfig+0x68>
 8005b8e:	2504      	movs	r5, #4
 8005b90:	e7d8      	b.n	8005b44 <UART_SetConfig+0x68>
 8005b92:	2508      	movs	r5, #8
 8005b94:	e7d6      	b.n	8005b44 <UART_SetConfig+0x68>
 8005b96:	2510      	movs	r5, #16
 8005b98:	e7d4      	b.n	8005b44 <UART_SetConfig+0x68>
 8005b9a:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 8005b9e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005ba2:	f002 020c 	and.w	r2, r2, #12
 8005ba6:	2a0c      	cmp	r2, #12
 8005ba8:	d80e      	bhi.n	8005bc8 <UART_SetConfig+0xec>
 8005baa:	e8df f002 	tbb	[pc, r2]
 8005bae:	0d07      	.short	0x0d07
 8005bb0:	0d090d0d 	.word	0x0d090d0d
 8005bb4:	0d560d0d 	.word	0x0d560d0d
 8005bb8:	0d0d      	.short	0x0d0d
 8005bba:	0b          	.byte	0x0b
 8005bbb:	00          	.byte	0x00
 8005bbc:	2500      	movs	r5, #0
 8005bbe:	e7c1      	b.n	8005b44 <UART_SetConfig+0x68>
 8005bc0:	2504      	movs	r5, #4
 8005bc2:	e7bf      	b.n	8005b44 <UART_SetConfig+0x68>
 8005bc4:	2508      	movs	r5, #8
 8005bc6:	e7bd      	b.n	8005b44 <UART_SetConfig+0x68>
 8005bc8:	2510      	movs	r5, #16
 8005bca:	e7bb      	b.n	8005b44 <UART_SetConfig+0x68>
 8005bcc:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8005bd0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005bd4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005bd8:	2a10      	cmp	r2, #16
 8005bda:	d009      	beq.n	8005bf0 <UART_SetConfig+0x114>
 8005bdc:	d905      	bls.n	8005bea <UART_SetConfig+0x10e>
 8005bde:	2a20      	cmp	r2, #32
 8005be0:	d03d      	beq.n	8005c5e <UART_SetConfig+0x182>
 8005be2:	2a30      	cmp	r2, #48	; 0x30
 8005be4:	d106      	bne.n	8005bf4 <UART_SetConfig+0x118>
 8005be6:	2508      	movs	r5, #8
 8005be8:	e7ac      	b.n	8005b44 <UART_SetConfig+0x68>
 8005bea:	b91a      	cbnz	r2, 8005bf4 <UART_SetConfig+0x118>
 8005bec:	2500      	movs	r5, #0
 8005bee:	e7a9      	b.n	8005b44 <UART_SetConfig+0x68>
 8005bf0:	2504      	movs	r5, #4
 8005bf2:	e7a7      	b.n	8005b44 <UART_SetConfig+0x68>
 8005bf4:	2510      	movs	r5, #16
 8005bf6:	e7a5      	b.n	8005b44 <UART_SetConfig+0x68>
 8005bf8:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8005bfc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005c00:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005c04:	2a40      	cmp	r2, #64	; 0x40
 8005c06:	d009      	beq.n	8005c1c <UART_SetConfig+0x140>
 8005c08:	d905      	bls.n	8005c16 <UART_SetConfig+0x13a>
 8005c0a:	2a80      	cmp	r2, #128	; 0x80
 8005c0c:	d029      	beq.n	8005c62 <UART_SetConfig+0x186>
 8005c0e:	2ac0      	cmp	r2, #192	; 0xc0
 8005c10:	d106      	bne.n	8005c20 <UART_SetConfig+0x144>
 8005c12:	2508      	movs	r5, #8
 8005c14:	e796      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c16:	b91a      	cbnz	r2, 8005c20 <UART_SetConfig+0x144>
 8005c18:	2500      	movs	r5, #0
 8005c1a:	e793      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c1c:	2504      	movs	r5, #4
 8005c1e:	e791      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c20:	2510      	movs	r5, #16
 8005c22:	e78f      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c24:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 8005c28:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005c2c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005c30:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005c34:	d00b      	beq.n	8005c4e <UART_SetConfig+0x172>
 8005c36:	d907      	bls.n	8005c48 <UART_SetConfig+0x16c>
 8005c38:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005c3c:	d013      	beq.n	8005c66 <UART_SetConfig+0x18a>
 8005c3e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8005c42:	d106      	bne.n	8005c52 <UART_SetConfig+0x176>
 8005c44:	2508      	movs	r5, #8
 8005c46:	e77d      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c48:	b91a      	cbnz	r2, 8005c52 <UART_SetConfig+0x176>
 8005c4a:	2500      	movs	r5, #0
 8005c4c:	e77a      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c4e:	2504      	movs	r5, #4
 8005c50:	e778      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c52:	2510      	movs	r5, #16
 8005c54:	e776      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c56:	2502      	movs	r5, #2
 8005c58:	e774      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c5a:	2502      	movs	r5, #2
 8005c5c:	e772      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c5e:	2502      	movs	r5, #2
 8005c60:	e770      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c62:	2502      	movs	r5, #2
 8005c64:	e76e      	b.n	8005b44 <UART_SetConfig+0x68>
 8005c66:	2502      	movs	r5, #2
 8005c68:	e76c      	b.n	8005b44 <UART_SetConfig+0x68>
    switch (clocksource)
 8005c6a:	2d08      	cmp	r5, #8
 8005c6c:	d811      	bhi.n	8005c92 <UART_SetConfig+0x1b6>
 8005c6e:	e8df f005 	tbb	[pc, r5]
 8005c72:	1008      	.short	0x1008
 8005c74:	100c1005 	.word	0x100c1005
 8005c78:	1010      	.short	0x1010
 8005c7a:	13          	.byte	0x13
 8005c7b:	00          	.byte	0x00
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005c7c:	483f      	ldr	r0, [pc, #252]	; (8005d7c <UART_SetConfig+0x2a0>)
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c7e:	2600      	movs	r6, #0
 8005c80:	e00d      	b.n	8005c9e <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005c82:	f7fe fcc3 	bl	800460c <HAL_RCC_GetPCLK1Freq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c86:	2600      	movs	r6, #0
        break;
 8005c88:	e009      	b.n	8005c9e <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005c8a:	f7fe f8a5 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c8e:	2600      	movs	r6, #0
        break;
 8005c90:	e005      	b.n	8005c9e <UART_SetConfig+0x1c2>
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005c92:	2000      	movs	r0, #0
        ret = HAL_ERROR;
 8005c94:	2601      	movs	r6, #1
        break;
 8005c96:	e002      	b.n	8005c9e <UART_SetConfig+0x1c2>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005c98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c9c:	2600      	movs	r6, #0
    if (lpuart_ker_ck_pres != 0U)
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	f000 80c9 	beq.w	8005e36 <UART_SetConfig+0x35a>
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8005ca4:	6862      	ldr	r2, [r4, #4]
 8005ca6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8005caa:	4298      	cmp	r0, r3
 8005cac:	f0c0 80f4 	bcc.w	8005e98 <UART_SetConfig+0x3bc>
 8005cb0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005cb4:	f200 80f2 	bhi.w	8005e9c <UART_SetConfig+0x3c0>
        switch (clocksource)
 8005cb8:	2d08      	cmp	r5, #8
 8005cba:	d846      	bhi.n	8005d4a <UART_SetConfig+0x26e>
 8005cbc:	e8df f005 	tbb	[pc, r5]
 8005cc0:	451f4505 	.word	0x451f4505
 8005cc4:	45454529 	.word	0x45454529
 8005cc8:	3b          	.byte	0x3b
 8005cc9:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005cca:	f7fe fc9f 	bl	800460c <HAL_RCC_GetPCLK1Freq>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8005cd4:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8005cd8:	6862      	ldr	r2, [r4, #4]
 8005cda:	0850      	lsrs	r0, r2, #1
 8005cdc:	eb18 0b00 	adds.w	fp, r8, r0
 8005ce0:	f149 0c00 	adc.w	ip, r9, #0
 8005ce4:	4658      	mov	r0, fp
 8005ce6:	4661      	mov	r1, ip
 8005ce8:	f7fa fad2 	bl	8000290 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cec:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005cf0:	4b23      	ldr	r3, [pc, #140]	; (8005d80 <UART_SetConfig+0x2a4>)
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	f200 80d4 	bhi.w	8005ea0 <UART_SetConfig+0x3c4>
          huart->Instance->BRR = usartdiv;
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	60d8      	str	r0, [r3, #12]
 8005cfc:	e09b      	b.n	8005e36 <UART_SetConfig+0x35a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005cfe:	0855      	lsrs	r5, r2, #1
 8005d00:	2300      	movs	r3, #0
 8005d02:	4820      	ldr	r0, [pc, #128]	; (8005d84 <UART_SetConfig+0x2a8>)
 8005d04:	2100      	movs	r1, #0
 8005d06:	1940      	adds	r0, r0, r5
 8005d08:	f141 0100 	adc.w	r1, r1, #0
 8005d0c:	f7fa fac0 	bl	8000290 <__aeabi_uldivmod>
            break;
 8005d10:	e7ec      	b.n	8005cec <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005d12:	f7fe f861 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8005d16:	2300      	movs	r3, #0
 8005d18:	ea4f 6910 	mov.w	r9, r0, lsr #24
 8005d1c:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8005d20:	6862      	ldr	r2, [r4, #4]
 8005d22:	0850      	lsrs	r0, r2, #1
 8005d24:	eb18 0b00 	adds.w	fp, r8, r0
 8005d28:	f149 0c00 	adc.w	ip, r9, #0
 8005d2c:	4658      	mov	r0, fp
 8005d2e:	4661      	mov	r1, ip
 8005d30:	f7fa faae 	bl	8000290 <__aeabi_uldivmod>
            break;
 8005d34:	e7da      	b.n	8005cec <UART_SetConfig+0x210>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005d36:	0850      	lsrs	r0, r2, #1
 8005d38:	2100      	movs	r1, #0
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8005d40:	f141 0100 	adc.w	r1, r1, #0
 8005d44:	f7fa faa4 	bl	8000290 <__aeabi_uldivmod>
            break;
 8005d48:	e7d0      	b.n	8005cec <UART_SetConfig+0x210>
            ret = HAL_ERROR;
 8005d4a:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	e7cd      	b.n	8005cec <UART_SetConfig+0x210>
    switch (clocksource)
 8005d50:	2d08      	cmp	r5, #8
 8005d52:	d85c      	bhi.n	8005e0e <UART_SetConfig+0x332>
 8005d54:	e8df f005 	tbb	[pc, r5]
 8005d58:	5b3c3118 	.word	0x5b3c3118
 8005d5c:	5b5b5b47 	.word	0x5b5b5b47
 8005d60:	52          	.byte	0x52
 8005d61:	00          	.byte	0x00
 8005d62:	bf00      	nop
 8005d64:	efff69f3 	.word	0xefff69f3
 8005d68:	40008000 	.word	0x40008000
 8005d6c:	40013800 	.word	0x40013800
 8005d70:	40004400 	.word	0x40004400
 8005d74:	40004800 	.word	0x40004800
 8005d78:	40004c00 	.word	0x40004c00
 8005d7c:	00f42400 	.word	0x00f42400
 8005d80:	000ffcff 	.word	0x000ffcff
 8005d84:	f4240000 	.word	0xf4240000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005d88:	f7fe fc40 	bl	800460c <HAL_RCC_GetPCLK1Freq>
 8005d8c:	6862      	ldr	r2, [r4, #4]
 8005d8e:	0853      	lsrs	r3, r2, #1
 8005d90:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d98:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d9a:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d9c:	f1a3 0110 	sub.w	r1, r3, #16
 8005da0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005da4:	4291      	cmp	r1, r2
 8005da6:	d87d      	bhi.n	8005ea4 <UART_SetConfig+0x3c8>
      brrtemp = usartdiv & 0xFFF0U;
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dae:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005db2:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8005db4:	6822      	ldr	r2, [r4, #0]
 8005db6:	60d3      	str	r3, [r2, #12]
 8005db8:	e03d      	b.n	8005e36 <UART_SetConfig+0x35a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005dba:	f7fe fc37 	bl	800462c <HAL_RCC_GetPCLK2Freq>
 8005dbe:	6862      	ldr	r2, [r4, #4]
 8005dc0:	0853      	lsrs	r3, r2, #1
 8005dc2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dcc:	2600      	movs	r6, #0
        break;
 8005dce:	e7e5      	b.n	8005d9c <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005dd0:	6862      	ldr	r2, [r4, #4]
 8005dd2:	0853      	lsrs	r3, r2, #1
 8005dd4:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005dd8:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005de0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005de2:	2600      	movs	r6, #0
        break;
 8005de4:	e7da      	b.n	8005d9c <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005de6:	f7fd fff7 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8005dea:	6862      	ldr	r2, [r4, #4]
 8005dec:	0853      	lsrs	r3, r2, #1
 8005dee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005df6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005df8:	2600      	movs	r6, #0
        break;
 8005dfa:	e7cf      	b.n	8005d9c <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005dfc:	6862      	ldr	r2, [r4, #4]
 8005dfe:	0853      	lsrs	r3, r2, #1
 8005e00:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005e04:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e08:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e0a:	2600      	movs	r6, #0
        break;
 8005e0c:	e7c6      	b.n	8005d9c <UART_SetConfig+0x2c0>
        ret = HAL_ERROR;
 8005e0e:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	e7c3      	b.n	8005d9c <UART_SetConfig+0x2c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005e14:	f7fe fbfa 	bl	800460c <HAL_RCC_GetPCLK1Freq>
 8005e18:	6863      	ldr	r3, [r4, #4]
 8005e1a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005e1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005e22:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e24:	2600      	movs	r6, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e26:	f1a0 0210 	sub.w	r2, r0, #16
 8005e2a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d83a      	bhi.n	8005ea8 <UART_SetConfig+0x3cc>
      huart->Instance->BRR = usartdiv;
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005e3a:	6663      	str	r3, [r4, #100]	; 0x64
}
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	e8bd 8b78 	ldmia.w	sp!, {r3, r4, r5, r6, r8, r9, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005e42:	f7fe fbf3 	bl	800462c <HAL_RCC_GetPCLK2Freq>
 8005e46:	6863      	ldr	r3, [r4, #4]
 8005e48:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005e4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005e50:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e52:	2600      	movs	r6, #0
        break;
 8005e54:	e7e7      	b.n	8005e26 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005e56:	6863      	ldr	r3, [r4, #4]
 8005e58:	0858      	lsrs	r0, r3, #1
 8005e5a:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8005e5e:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 8005e62:	fbb0 f0f3 	udiv	r0, r0, r3
 8005e66:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e68:	2600      	movs	r6, #0
        break;
 8005e6a:	e7dc      	b.n	8005e26 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005e6c:	f7fd ffb4 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8005e70:	6863      	ldr	r3, [r4, #4]
 8005e72:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005e76:	fbb0 f0f3 	udiv	r0, r0, r3
 8005e7a:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e7c:	2600      	movs	r6, #0
        break;
 8005e7e:	e7d2      	b.n	8005e26 <UART_SetConfig+0x34a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005e80:	6863      	ldr	r3, [r4, #4]
 8005e82:	0858      	lsrs	r0, r3, #1
 8005e84:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8005e88:	fbb0 f0f3 	udiv	r0, r0, r3
 8005e8c:	b280      	uxth	r0, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e8e:	2600      	movs	r6, #0
        break;
 8005e90:	e7c9      	b.n	8005e26 <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 8005e92:	2601      	movs	r6, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005e94:	2000      	movs	r0, #0
 8005e96:	e7c6      	b.n	8005e26 <UART_SetConfig+0x34a>
        ret = HAL_ERROR;
 8005e98:	2601      	movs	r6, #1
 8005e9a:	e7cc      	b.n	8005e36 <UART_SetConfig+0x35a>
 8005e9c:	2601      	movs	r6, #1
 8005e9e:	e7ca      	b.n	8005e36 <UART_SetConfig+0x35a>
          ret = HAL_ERROR;
 8005ea0:	2601      	movs	r6, #1
 8005ea2:	e7c8      	b.n	8005e36 <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 8005ea4:	2601      	movs	r6, #1
 8005ea6:	e7c6      	b.n	8005e36 <UART_SetConfig+0x35a>
      ret = HAL_ERROR;
 8005ea8:	2601      	movs	r6, #1
 8005eaa:	e7c4      	b.n	8005e36 <UART_SetConfig+0x35a>

08005eac <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005eae:	f013 0f01 	tst.w	r3, #1
 8005eb2:	d006      	beq.n	8005ec2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb4:	6802      	ldr	r2, [r0, #0]
 8005eb6:	6853      	ldr	r3, [r2, #4]
 8005eb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ebc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ec2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ec4:	f013 0f02 	tst.w	r3, #2
 8005ec8:	d006      	beq.n	8005ed8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eca:	6802      	ldr	r2, [r0, #0]
 8005ecc:	6853      	ldr	r3, [r2, #4]
 8005ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ed8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005eda:	f013 0f04 	tst.w	r3, #4
 8005ede:	d006      	beq.n	8005eee <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ee0:	6802      	ldr	r2, [r0, #0]
 8005ee2:	6853      	ldr	r3, [r2, #4]
 8005ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ee8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005eea:	430b      	orrs	r3, r1
 8005eec:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ef0:	f013 0f08 	tst.w	r3, #8
 8005ef4:	d006      	beq.n	8005f04 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ef6:	6802      	ldr	r2, [r0, #0]
 8005ef8:	6853      	ldr	r3, [r2, #4]
 8005efa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005efe:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f06:	f013 0f10 	tst.w	r3, #16
 8005f0a:	d006      	beq.n	8005f1a <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f0c:	6802      	ldr	r2, [r0, #0]
 8005f0e:	6893      	ldr	r3, [r2, #8]
 8005f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f14:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005f16:	430b      	orrs	r3, r1
 8005f18:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f1c:	f013 0f20 	tst.w	r3, #32
 8005f20:	d006      	beq.n	8005f30 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f22:	6802      	ldr	r2, [r0, #0]
 8005f24:	6893      	ldr	r3, [r2, #8]
 8005f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f2a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f36:	d00a      	beq.n	8005f4e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f38:	6802      	ldr	r2, [r0, #0]
 8005f3a:	6853      	ldr	r3, [r2, #4]
 8005f3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f40:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005f42:	430b      	orrs	r3, r1
 8005f44:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f4c:	d00b      	beq.n	8005f66 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f54:	d006      	beq.n	8005f64 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f56:	6802      	ldr	r2, [r0, #0]
 8005f58:	6853      	ldr	r3, [r2, #4]
 8005f5a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005f5e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005f60:	430b      	orrs	r3, r1
 8005f62:	6053      	str	r3, [r2, #4]
 8005f64:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f66:	6802      	ldr	r2, [r0, #0]
 8005f68:	6853      	ldr	r3, [r2, #4]
 8005f6a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f6e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6053      	str	r3, [r2, #4]
 8005f74:	e7eb      	b.n	8005f4e <UART_AdvFeatureConfig+0xa2>

08005f76 <UART_WaitOnFlagUntilTimeout>:
{
 8005f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	460f      	mov	r7, r1
 8005f7e:	4616      	mov	r6, r2
 8005f80:	4698      	mov	r8, r3
 8005f82:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	ea37 0303 	bics.w	r3, r7, r3
 8005f8c:	bf0c      	ite	eq
 8005f8e:	2301      	moveq	r3, #1
 8005f90:	2300      	movne	r3, #0
 8005f92:	42b3      	cmp	r3, r6
 8005f94:	d11e      	bne.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8005f96:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005f9a:	d0f3      	beq.n	8005f84 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005f9c:	b12c      	cbz	r4, 8005faa <UART_WaitOnFlagUntilTimeout+0x34>
 8005f9e:	f7fd fb9b 	bl	80036d8 <HAL_GetTick>
 8005fa2:	eba0 0008 	sub.w	r0, r0, r8
 8005fa6:	4284      	cmp	r4, r0
 8005fa8:	d2ec      	bcs.n	8005f84 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005faa:	682a      	ldr	r2, [r5, #0]
 8005fac:	6813      	ldr	r3, [r2, #0]
 8005fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fb2:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb4:	682a      	ldr	r2, [r5, #0]
 8005fb6:	6893      	ldr	r3, [r2, #8]
 8005fb8:	f023 0301 	bic.w	r3, r3, #1
 8005fbc:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005fbe:	2320      	movs	r3, #32
 8005fc0:	f885 3071 	strb.w	r3, [r5, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	f885 3072 	strb.w	r3, [r5, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
        return HAL_TIMEOUT;
 8005fce:	2003      	movs	r0, #3
 8005fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8005fd4:	2000      	movs	r0, #0
}
 8005fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005fda <HAL_UART_Transmit>:
{
 8005fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005fe2:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d004      	beq.n	8005ff6 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8005fec:	2302      	movs	r3, #2
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	b002      	add	sp, #8
 8005ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	d04e      	beq.n	800609e <HAL_UART_Transmit+0xc4>
 8006000:	2a00      	cmp	r2, #0
 8006002:	d04e      	beq.n	80060a2 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8006004:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_UART_Transmit+0x36>
 800600c:	2302      	movs	r3, #2
 800600e:	e7ee      	b.n	8005fee <HAL_UART_Transmit+0x14>
 8006010:	2301      	movs	r3, #1
 8006012:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006016:	2300      	movs	r3, #0
 8006018:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800601a:	2321      	movs	r3, #33	; 0x21
 800601c:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8006020:	f7fd fb5a 	bl	80036d8 <HAL_GetTick>
 8006024:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006026:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 800602a:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800602e:	e00a      	b.n	8006046 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	782a      	ldrb	r2, [r5, #0]
 8006034:	851a      	strh	r2, [r3, #40]	; 0x28
 8006036:	3501      	adds	r5, #1
      huart->TxXferCount--;
 8006038:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800603c:	b29b      	uxth	r3, r3
 800603e:	3b01      	subs	r3, #1
 8006040:	b29b      	uxth	r3, r3
 8006042:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006046:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800604a:	b29b      	uxth	r3, r3
 800604c:	b1ab      	cbz	r3, 800607a <HAL_UART_Transmit+0xa0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800604e:	9600      	str	r6, [sp, #0]
 8006050:	463b      	mov	r3, r7
 8006052:	2200      	movs	r2, #0
 8006054:	2180      	movs	r1, #128	; 0x80
 8006056:	4620      	mov	r0, r4
 8006058:	f7ff ff8d 	bl	8005f76 <UART_WaitOnFlagUntilTimeout>
 800605c:	bb18      	cbnz	r0, 80060a6 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006064:	d1e4      	bne.n	8006030 <HAL_UART_Transmit+0x56>
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e1      	bne.n	8006030 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800606c:	6822      	ldr	r2, [r4, #0]
 800606e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006076:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8006078:	e7de      	b.n	8006038 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800607a:	9600      	str	r6, [sp, #0]
 800607c:	463b      	mov	r3, r7
 800607e:	2200      	movs	r2, #0
 8006080:	2140      	movs	r1, #64	; 0x40
 8006082:	4620      	mov	r0, r4
 8006084:	f7ff ff77 	bl	8005f76 <UART_WaitOnFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	b108      	cbz	r0, 8006090 <HAL_UART_Transmit+0xb6>
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e7ae      	b.n	8005fee <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8006090:	2220      	movs	r2, #32
 8006092:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8006096:	2200      	movs	r2, #0
 8006098:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 800609c:	e7a7      	b.n	8005fee <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e7a5      	b.n	8005fee <HAL_UART_Transmit+0x14>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e7a3      	b.n	8005fee <HAL_UART_Transmit+0x14>
        return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e7a1      	b.n	8005fee <HAL_UART_Transmit+0x14>

080060aa <UART_CheckIdleState>:
{
 80060aa:	b530      	push	{r4, r5, lr}
 80060ac:	b083      	sub	sp, #12
 80060ae:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	6743      	str	r3, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 80060b4:	f7fd fb10 	bl	80036d8 <HAL_GetTick>
 80060b8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f013 0f08 	tst.w	r3, #8
 80060c2:	d10e      	bne.n	80060e2 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f013 0f04 	tst.w	r3, #4
 80060cc:	d117      	bne.n	80060fe <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 80060ce:	2320      	movs	r3, #32
 80060d0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->RxState = HAL_UART_STATE_READY;
 80060d4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  __HAL_UNLOCK(huart);
 80060d8:	2000      	movs	r0, #0
 80060da:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 80060de:	b003      	add	sp, #12
 80060e0:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	4603      	mov	r3, r0
 80060ea:	2200      	movs	r2, #0
 80060ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7ff ff40 	bl	8005f76 <UART_WaitOnFlagUntilTimeout>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d0e4      	beq.n	80060c4 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80060fa:	2003      	movs	r0, #3
 80060fc:	e7ef      	b.n	80060de <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	462b      	mov	r3, r5
 8006106:	2200      	movs	r2, #0
 8006108:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800610c:	4620      	mov	r0, r4
 800610e:	f7ff ff32 	bl	8005f76 <UART_WaitOnFlagUntilTimeout>
 8006112:	2800      	cmp	r0, #0
 8006114:	d0db      	beq.n	80060ce <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8006116:	2003      	movs	r0, #3
 8006118:	e7e1      	b.n	80060de <UART_CheckIdleState+0x34>

0800611a <HAL_UART_Init>:
  if (huart == NULL)
 800611a:	b378      	cbz	r0, 800617c <HAL_UART_Init+0x62>
{
 800611c:	b510      	push	{r4, lr}
 800611e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006120:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8006124:	b30b      	cbz	r3, 800616a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006126:	2324      	movs	r3, #36	; 0x24
 8006128:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 800612c:	6822      	ldr	r2, [r4, #0]
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006136:	4620      	mov	r0, r4
 8006138:	f7ff fcd0 	bl	8005adc <UART_SetConfig>
 800613c:	2801      	cmp	r0, #1
 800613e:	d01f      	beq.n	8006180 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006142:	b9bb      	cbnz	r3, 8006174 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006144:	6822      	ldr	r2, [r4, #0]
 8006146:	6853      	ldr	r3, [r2, #4]
 8006148:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800614c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	6893      	ldr	r3, [r2, #8]
 8006152:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006156:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006158:	6822      	ldr	r2, [r4, #0]
 800615a:	6813      	ldr	r3, [r2, #0]
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006162:	4620      	mov	r0, r4
 8006164:	f7ff ffa1 	bl	80060aa <UART_CheckIdleState>
 8006168:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800616a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800616e:	f7fd f831 	bl	80031d4 <HAL_UART_MspInit>
 8006172:	e7d8      	b.n	8006126 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff fe99 	bl	8005eac <UART_AdvFeatureConfig>
 800617a:	e7e3      	b.n	8006144 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800617c:	2001      	movs	r0, #1
 800617e:	4770      	bx	lr
}
 8006180:	bd10      	pop	{r4, pc}

08006182 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006182:	4770      	bx	lr

08006184 <__libc_init_array>:
 8006184:	b570      	push	{r4, r5, r6, lr}
 8006186:	4e0d      	ldr	r6, [pc, #52]	; (80061bc <__libc_init_array+0x38>)
 8006188:	4c0d      	ldr	r4, [pc, #52]	; (80061c0 <__libc_init_array+0x3c>)
 800618a:	1ba4      	subs	r4, r4, r6
 800618c:	10a4      	asrs	r4, r4, #2
 800618e:	2500      	movs	r5, #0
 8006190:	42a5      	cmp	r5, r4
 8006192:	d109      	bne.n	80061a8 <__libc_init_array+0x24>
 8006194:	4e0b      	ldr	r6, [pc, #44]	; (80061c4 <__libc_init_array+0x40>)
 8006196:	4c0c      	ldr	r4, [pc, #48]	; (80061c8 <__libc_init_array+0x44>)
 8006198:	f000 fc5c 	bl	8006a54 <_init>
 800619c:	1ba4      	subs	r4, r4, r6
 800619e:	10a4      	asrs	r4, r4, #2
 80061a0:	2500      	movs	r5, #0
 80061a2:	42a5      	cmp	r5, r4
 80061a4:	d105      	bne.n	80061b2 <__libc_init_array+0x2e>
 80061a6:	bd70      	pop	{r4, r5, r6, pc}
 80061a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061ac:	4798      	blx	r3
 80061ae:	3501      	adds	r5, #1
 80061b0:	e7ee      	b.n	8006190 <__libc_init_array+0xc>
 80061b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061b6:	4798      	blx	r3
 80061b8:	3501      	adds	r5, #1
 80061ba:	e7f2      	b.n	80061a2 <__libc_init_array+0x1e>
 80061bc:	080074b4 	.word	0x080074b4
 80061c0:	080074b4 	.word	0x080074b4
 80061c4:	080074b4 	.word	0x080074b4
 80061c8:	080074b8 	.word	0x080074b8

080061cc <memcpy>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	1e43      	subs	r3, r0, #1
 80061d0:	440a      	add	r2, r1
 80061d2:	4291      	cmp	r1, r2
 80061d4:	d100      	bne.n	80061d8 <memcpy+0xc>
 80061d6:	bd10      	pop	{r4, pc}
 80061d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061e0:	e7f7      	b.n	80061d2 <memcpy+0x6>

080061e2 <memset>:
 80061e2:	4402      	add	r2, r0
 80061e4:	4603      	mov	r3, r0
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d100      	bne.n	80061ec <memset+0xa>
 80061ea:	4770      	bx	lr
 80061ec:	f803 1b01 	strb.w	r1, [r3], #1
 80061f0:	e7f9      	b.n	80061e6 <memset+0x4>

080061f2 <strncmp>:
 80061f2:	b510      	push	{r4, lr}
 80061f4:	b16a      	cbz	r2, 8006212 <strncmp+0x20>
 80061f6:	3901      	subs	r1, #1
 80061f8:	1884      	adds	r4, r0, r2
 80061fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 80061fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006202:	4293      	cmp	r3, r2
 8006204:	d103      	bne.n	800620e <strncmp+0x1c>
 8006206:	42a0      	cmp	r0, r4
 8006208:	d001      	beq.n	800620e <strncmp+0x1c>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f5      	bne.n	80061fa <strncmp+0x8>
 800620e:	1a98      	subs	r0, r3, r2
 8006210:	bd10      	pop	{r4, pc}
 8006212:	4610      	mov	r0, r2
 8006214:	bd10      	pop	{r4, pc}

08006216 <_vsiprintf_r>:
 8006216:	b510      	push	{r4, lr}
 8006218:	b09a      	sub	sp, #104	; 0x68
 800621a:	f44f 7402 	mov.w	r4, #520	; 0x208
 800621e:	9100      	str	r1, [sp, #0]
 8006220:	9104      	str	r1, [sp, #16]
 8006222:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006226:	9102      	str	r1, [sp, #8]
 8006228:	9105      	str	r1, [sp, #20]
 800622a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800622e:	f8ad 100e 	strh.w	r1, [sp, #14]
 8006232:	4669      	mov	r1, sp
 8006234:	f8ad 400c 	strh.w	r4, [sp, #12]
 8006238:	f000 f86c 	bl	8006314 <_svfiprintf_r>
 800623c:	9b00      	ldr	r3, [sp, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	b01a      	add	sp, #104	; 0x68
 8006244:	bd10      	pop	{r4, pc}
	...

08006248 <vsiprintf>:
 8006248:	4613      	mov	r3, r2
 800624a:	460a      	mov	r2, r1
 800624c:	4601      	mov	r1, r0
 800624e:	4802      	ldr	r0, [pc, #8]	; (8006258 <vsiprintf+0x10>)
 8006250:	6800      	ldr	r0, [r0, #0]
 8006252:	f7ff bfe0 	b.w	8006216 <_vsiprintf_r>
 8006256:	bf00      	nop
 8006258:	2000016c 	.word	0x2000016c

0800625c <__ssputs_r>:
 800625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006260:	688e      	ldr	r6, [r1, #8]
 8006262:	429e      	cmp	r6, r3
 8006264:	4682      	mov	sl, r0
 8006266:	460c      	mov	r4, r1
 8006268:	4691      	mov	r9, r2
 800626a:	4698      	mov	r8, r3
 800626c:	d835      	bhi.n	80062da <__ssputs_r+0x7e>
 800626e:	898a      	ldrh	r2, [r1, #12]
 8006270:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006274:	d031      	beq.n	80062da <__ssputs_r+0x7e>
 8006276:	6825      	ldr	r5, [r4, #0]
 8006278:	6909      	ldr	r1, [r1, #16]
 800627a:	1a6f      	subs	r7, r5, r1
 800627c:	6965      	ldr	r5, [r4, #20]
 800627e:	2302      	movs	r3, #2
 8006280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006284:	fb95 f5f3 	sdiv	r5, r5, r3
 8006288:	f108 0301 	add.w	r3, r8, #1
 800628c:	443b      	add	r3, r7
 800628e:	429d      	cmp	r5, r3
 8006290:	bf38      	it	cc
 8006292:	461d      	movcc	r5, r3
 8006294:	0553      	lsls	r3, r2, #21
 8006296:	d531      	bpl.n	80062fc <__ssputs_r+0xa0>
 8006298:	4629      	mov	r1, r5
 800629a:	f000 fb2d 	bl	80068f8 <_malloc_r>
 800629e:	4606      	mov	r6, r0
 80062a0:	b950      	cbnz	r0, 80062b8 <__ssputs_r+0x5c>
 80062a2:	230c      	movs	r3, #12
 80062a4:	f8ca 3000 	str.w	r3, [sl]
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ae:	81a3      	strh	r3, [r4, #12]
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295
 80062b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b8:	463a      	mov	r2, r7
 80062ba:	6921      	ldr	r1, [r4, #16]
 80062bc:	f7ff ff86 	bl	80061cc <memcpy>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	6126      	str	r6, [r4, #16]
 80062ce:	6165      	str	r5, [r4, #20]
 80062d0:	443e      	add	r6, r7
 80062d2:	1bed      	subs	r5, r5, r7
 80062d4:	6026      	str	r6, [r4, #0]
 80062d6:	60a5      	str	r5, [r4, #8]
 80062d8:	4646      	mov	r6, r8
 80062da:	4546      	cmp	r6, r8
 80062dc:	bf28      	it	cs
 80062de:	4646      	movcs	r6, r8
 80062e0:	4632      	mov	r2, r6
 80062e2:	4649      	mov	r1, r9
 80062e4:	6820      	ldr	r0, [r4, #0]
 80062e6:	f000 fa9f 	bl	8006828 <memmove>
 80062ea:	68a3      	ldr	r3, [r4, #8]
 80062ec:	1b9b      	subs	r3, r3, r6
 80062ee:	60a3      	str	r3, [r4, #8]
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	441e      	add	r6, r3
 80062f4:	6026      	str	r6, [r4, #0]
 80062f6:	2000      	movs	r0, #0
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	462a      	mov	r2, r5
 80062fe:	f000 fb59 	bl	80069b4 <_realloc_r>
 8006302:	4606      	mov	r6, r0
 8006304:	2800      	cmp	r0, #0
 8006306:	d1e1      	bne.n	80062cc <__ssputs_r+0x70>
 8006308:	6921      	ldr	r1, [r4, #16]
 800630a:	4650      	mov	r0, sl
 800630c:	f000 faa6 	bl	800685c <_free_r>
 8006310:	e7c7      	b.n	80062a2 <__ssputs_r+0x46>
	...

08006314 <_svfiprintf_r>:
 8006314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006318:	b09d      	sub	sp, #116	; 0x74
 800631a:	4680      	mov	r8, r0
 800631c:	9303      	str	r3, [sp, #12]
 800631e:	898b      	ldrh	r3, [r1, #12]
 8006320:	061c      	lsls	r4, r3, #24
 8006322:	460d      	mov	r5, r1
 8006324:	4616      	mov	r6, r2
 8006326:	d50f      	bpl.n	8006348 <_svfiprintf_r+0x34>
 8006328:	690b      	ldr	r3, [r1, #16]
 800632a:	b96b      	cbnz	r3, 8006348 <_svfiprintf_r+0x34>
 800632c:	2140      	movs	r1, #64	; 0x40
 800632e:	f000 fae3 	bl	80068f8 <_malloc_r>
 8006332:	6028      	str	r0, [r5, #0]
 8006334:	6128      	str	r0, [r5, #16]
 8006336:	b928      	cbnz	r0, 8006344 <_svfiprintf_r+0x30>
 8006338:	230c      	movs	r3, #12
 800633a:	f8c8 3000 	str.w	r3, [r8]
 800633e:	f04f 30ff 	mov.w	r0, #4294967295
 8006342:	e0c5      	b.n	80064d0 <_svfiprintf_r+0x1bc>
 8006344:	2340      	movs	r3, #64	; 0x40
 8006346:	616b      	str	r3, [r5, #20]
 8006348:	2300      	movs	r3, #0
 800634a:	9309      	str	r3, [sp, #36]	; 0x24
 800634c:	2320      	movs	r3, #32
 800634e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006352:	2330      	movs	r3, #48	; 0x30
 8006354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006358:	f04f 0b01 	mov.w	fp, #1
 800635c:	4637      	mov	r7, r6
 800635e:	463c      	mov	r4, r7
 8006360:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d13c      	bne.n	80063e2 <_svfiprintf_r+0xce>
 8006368:	ebb7 0a06 	subs.w	sl, r7, r6
 800636c:	d00b      	beq.n	8006386 <_svfiprintf_r+0x72>
 800636e:	4653      	mov	r3, sl
 8006370:	4632      	mov	r2, r6
 8006372:	4629      	mov	r1, r5
 8006374:	4640      	mov	r0, r8
 8006376:	f7ff ff71 	bl	800625c <__ssputs_r>
 800637a:	3001      	adds	r0, #1
 800637c:	f000 80a3 	beq.w	80064c6 <_svfiprintf_r+0x1b2>
 8006380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006382:	4453      	add	r3, sl
 8006384:	9309      	str	r3, [sp, #36]	; 0x24
 8006386:	783b      	ldrb	r3, [r7, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 809c 	beq.w	80064c6 <_svfiprintf_r+0x1b2>
 800638e:	2300      	movs	r3, #0
 8006390:	f04f 32ff 	mov.w	r2, #4294967295
 8006394:	9304      	str	r3, [sp, #16]
 8006396:	9307      	str	r3, [sp, #28]
 8006398:	9205      	str	r2, [sp, #20]
 800639a:	9306      	str	r3, [sp, #24]
 800639c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063a0:	931a      	str	r3, [sp, #104]	; 0x68
 80063a2:	2205      	movs	r2, #5
 80063a4:	7821      	ldrb	r1, [r4, #0]
 80063a6:	4850      	ldr	r0, [pc, #320]	; (80064e8 <_svfiprintf_r+0x1d4>)
 80063a8:	f7f9 ff22 	bl	80001f0 <memchr>
 80063ac:	1c67      	adds	r7, r4, #1
 80063ae:	9b04      	ldr	r3, [sp, #16]
 80063b0:	b9d8      	cbnz	r0, 80063ea <_svfiprintf_r+0xd6>
 80063b2:	06d9      	lsls	r1, r3, #27
 80063b4:	bf44      	itt	mi
 80063b6:	2220      	movmi	r2, #32
 80063b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063bc:	071a      	lsls	r2, r3, #28
 80063be:	bf44      	itt	mi
 80063c0:	222b      	movmi	r2, #43	; 0x2b
 80063c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063c6:	7822      	ldrb	r2, [r4, #0]
 80063c8:	2a2a      	cmp	r2, #42	; 0x2a
 80063ca:	d016      	beq.n	80063fa <_svfiprintf_r+0xe6>
 80063cc:	9a07      	ldr	r2, [sp, #28]
 80063ce:	2100      	movs	r1, #0
 80063d0:	200a      	movs	r0, #10
 80063d2:	4627      	mov	r7, r4
 80063d4:	3401      	adds	r4, #1
 80063d6:	783b      	ldrb	r3, [r7, #0]
 80063d8:	3b30      	subs	r3, #48	; 0x30
 80063da:	2b09      	cmp	r3, #9
 80063dc:	d951      	bls.n	8006482 <_svfiprintf_r+0x16e>
 80063de:	b1c9      	cbz	r1, 8006414 <_svfiprintf_r+0x100>
 80063e0:	e011      	b.n	8006406 <_svfiprintf_r+0xf2>
 80063e2:	2b25      	cmp	r3, #37	; 0x25
 80063e4:	d0c0      	beq.n	8006368 <_svfiprintf_r+0x54>
 80063e6:	4627      	mov	r7, r4
 80063e8:	e7b9      	b.n	800635e <_svfiprintf_r+0x4a>
 80063ea:	4a3f      	ldr	r2, [pc, #252]	; (80064e8 <_svfiprintf_r+0x1d4>)
 80063ec:	1a80      	subs	r0, r0, r2
 80063ee:	fa0b f000 	lsl.w	r0, fp, r0
 80063f2:	4318      	orrs	r0, r3
 80063f4:	9004      	str	r0, [sp, #16]
 80063f6:	463c      	mov	r4, r7
 80063f8:	e7d3      	b.n	80063a2 <_svfiprintf_r+0x8e>
 80063fa:	9a03      	ldr	r2, [sp, #12]
 80063fc:	1d11      	adds	r1, r2, #4
 80063fe:	6812      	ldr	r2, [r2, #0]
 8006400:	9103      	str	r1, [sp, #12]
 8006402:	2a00      	cmp	r2, #0
 8006404:	db01      	blt.n	800640a <_svfiprintf_r+0xf6>
 8006406:	9207      	str	r2, [sp, #28]
 8006408:	e004      	b.n	8006414 <_svfiprintf_r+0x100>
 800640a:	4252      	negs	r2, r2
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	9207      	str	r2, [sp, #28]
 8006412:	9304      	str	r3, [sp, #16]
 8006414:	783b      	ldrb	r3, [r7, #0]
 8006416:	2b2e      	cmp	r3, #46	; 0x2e
 8006418:	d10e      	bne.n	8006438 <_svfiprintf_r+0x124>
 800641a:	787b      	ldrb	r3, [r7, #1]
 800641c:	2b2a      	cmp	r3, #42	; 0x2a
 800641e:	f107 0101 	add.w	r1, r7, #1
 8006422:	d132      	bne.n	800648a <_svfiprintf_r+0x176>
 8006424:	9b03      	ldr	r3, [sp, #12]
 8006426:	1d1a      	adds	r2, r3, #4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	9203      	str	r2, [sp, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	bfb8      	it	lt
 8006430:	f04f 33ff 	movlt.w	r3, #4294967295
 8006434:	3702      	adds	r7, #2
 8006436:	9305      	str	r3, [sp, #20]
 8006438:	4c2c      	ldr	r4, [pc, #176]	; (80064ec <_svfiprintf_r+0x1d8>)
 800643a:	7839      	ldrb	r1, [r7, #0]
 800643c:	2203      	movs	r2, #3
 800643e:	4620      	mov	r0, r4
 8006440:	f7f9 fed6 	bl	80001f0 <memchr>
 8006444:	b138      	cbz	r0, 8006456 <_svfiprintf_r+0x142>
 8006446:	2340      	movs	r3, #64	; 0x40
 8006448:	1b00      	subs	r0, r0, r4
 800644a:	fa03 f000 	lsl.w	r0, r3, r0
 800644e:	9b04      	ldr	r3, [sp, #16]
 8006450:	4303      	orrs	r3, r0
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	3701      	adds	r7, #1
 8006456:	7839      	ldrb	r1, [r7, #0]
 8006458:	4825      	ldr	r0, [pc, #148]	; (80064f0 <_svfiprintf_r+0x1dc>)
 800645a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800645e:	2206      	movs	r2, #6
 8006460:	1c7e      	adds	r6, r7, #1
 8006462:	f7f9 fec5 	bl	80001f0 <memchr>
 8006466:	2800      	cmp	r0, #0
 8006468:	d035      	beq.n	80064d6 <_svfiprintf_r+0x1c2>
 800646a:	4b22      	ldr	r3, [pc, #136]	; (80064f4 <_svfiprintf_r+0x1e0>)
 800646c:	b9fb      	cbnz	r3, 80064ae <_svfiprintf_r+0x19a>
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	3307      	adds	r3, #7
 8006472:	f023 0307 	bic.w	r3, r3, #7
 8006476:	3308      	adds	r3, #8
 8006478:	9303      	str	r3, [sp, #12]
 800647a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647c:	444b      	add	r3, r9
 800647e:	9309      	str	r3, [sp, #36]	; 0x24
 8006480:	e76c      	b.n	800635c <_svfiprintf_r+0x48>
 8006482:	fb00 3202 	mla	r2, r0, r2, r3
 8006486:	2101      	movs	r1, #1
 8006488:	e7a3      	b.n	80063d2 <_svfiprintf_r+0xbe>
 800648a:	2300      	movs	r3, #0
 800648c:	9305      	str	r3, [sp, #20]
 800648e:	4618      	mov	r0, r3
 8006490:	240a      	movs	r4, #10
 8006492:	460f      	mov	r7, r1
 8006494:	3101      	adds	r1, #1
 8006496:	783a      	ldrb	r2, [r7, #0]
 8006498:	3a30      	subs	r2, #48	; 0x30
 800649a:	2a09      	cmp	r2, #9
 800649c:	d903      	bls.n	80064a6 <_svfiprintf_r+0x192>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0ca      	beq.n	8006438 <_svfiprintf_r+0x124>
 80064a2:	9005      	str	r0, [sp, #20]
 80064a4:	e7c8      	b.n	8006438 <_svfiprintf_r+0x124>
 80064a6:	fb04 2000 	mla	r0, r4, r0, r2
 80064aa:	2301      	movs	r3, #1
 80064ac:	e7f1      	b.n	8006492 <_svfiprintf_r+0x17e>
 80064ae:	ab03      	add	r3, sp, #12
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	462a      	mov	r2, r5
 80064b4:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <_svfiprintf_r+0x1e4>)
 80064b6:	a904      	add	r1, sp, #16
 80064b8:	4640      	mov	r0, r8
 80064ba:	f3af 8000 	nop.w
 80064be:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064c2:	4681      	mov	r9, r0
 80064c4:	d1d9      	bne.n	800647a <_svfiprintf_r+0x166>
 80064c6:	89ab      	ldrh	r3, [r5, #12]
 80064c8:	065b      	lsls	r3, r3, #25
 80064ca:	f53f af38 	bmi.w	800633e <_svfiprintf_r+0x2a>
 80064ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064d0:	b01d      	add	sp, #116	; 0x74
 80064d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d6:	ab03      	add	r3, sp, #12
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	462a      	mov	r2, r5
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <_svfiprintf_r+0x1e4>)
 80064de:	a904      	add	r1, sp, #16
 80064e0:	4640      	mov	r0, r8
 80064e2:	f000 f881 	bl	80065e8 <_printf_i>
 80064e6:	e7ea      	b.n	80064be <_svfiprintf_r+0x1aa>
 80064e8:	08007478 	.word	0x08007478
 80064ec:	0800747e 	.word	0x0800747e
 80064f0:	08007482 	.word	0x08007482
 80064f4:	00000000 	.word	0x00000000
 80064f8:	0800625d 	.word	0x0800625d

080064fc <_printf_common>:
 80064fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006500:	4691      	mov	r9, r2
 8006502:	461f      	mov	r7, r3
 8006504:	688a      	ldr	r2, [r1, #8]
 8006506:	690b      	ldr	r3, [r1, #16]
 8006508:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800650c:	4293      	cmp	r3, r2
 800650e:	bfb8      	it	lt
 8006510:	4613      	movlt	r3, r2
 8006512:	f8c9 3000 	str.w	r3, [r9]
 8006516:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800651a:	4606      	mov	r6, r0
 800651c:	460c      	mov	r4, r1
 800651e:	b112      	cbz	r2, 8006526 <_printf_common+0x2a>
 8006520:	3301      	adds	r3, #1
 8006522:	f8c9 3000 	str.w	r3, [r9]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	0699      	lsls	r1, r3, #26
 800652a:	bf42      	ittt	mi
 800652c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006530:	3302      	addmi	r3, #2
 8006532:	f8c9 3000 	strmi.w	r3, [r9]
 8006536:	6825      	ldr	r5, [r4, #0]
 8006538:	f015 0506 	ands.w	r5, r5, #6
 800653c:	d107      	bne.n	800654e <_printf_common+0x52>
 800653e:	f104 0a19 	add.w	sl, r4, #25
 8006542:	68e3      	ldr	r3, [r4, #12]
 8006544:	f8d9 2000 	ldr.w	r2, [r9]
 8006548:	1a9b      	subs	r3, r3, r2
 800654a:	429d      	cmp	r5, r3
 800654c:	db29      	blt.n	80065a2 <_printf_common+0xa6>
 800654e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	3300      	adds	r3, #0
 8006556:	bf18      	it	ne
 8006558:	2301      	movne	r3, #1
 800655a:	0692      	lsls	r2, r2, #26
 800655c:	d42e      	bmi.n	80065bc <_printf_common+0xc0>
 800655e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006562:	4639      	mov	r1, r7
 8006564:	4630      	mov	r0, r6
 8006566:	47c0      	blx	r8
 8006568:	3001      	adds	r0, #1
 800656a:	d021      	beq.n	80065b0 <_printf_common+0xb4>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	68e5      	ldr	r5, [r4, #12]
 8006570:	f8d9 2000 	ldr.w	r2, [r9]
 8006574:	f003 0306 	and.w	r3, r3, #6
 8006578:	2b04      	cmp	r3, #4
 800657a:	bf08      	it	eq
 800657c:	1aad      	subeq	r5, r5, r2
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	6922      	ldr	r2, [r4, #16]
 8006582:	bf0c      	ite	eq
 8006584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006588:	2500      	movne	r5, #0
 800658a:	4293      	cmp	r3, r2
 800658c:	bfc4      	itt	gt
 800658e:	1a9b      	subgt	r3, r3, r2
 8006590:	18ed      	addgt	r5, r5, r3
 8006592:	f04f 0900 	mov.w	r9, #0
 8006596:	341a      	adds	r4, #26
 8006598:	454d      	cmp	r5, r9
 800659a:	d11b      	bne.n	80065d4 <_printf_common+0xd8>
 800659c:	2000      	movs	r0, #0
 800659e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a2:	2301      	movs	r3, #1
 80065a4:	4652      	mov	r2, sl
 80065a6:	4639      	mov	r1, r7
 80065a8:	4630      	mov	r0, r6
 80065aa:	47c0      	blx	r8
 80065ac:	3001      	adds	r0, #1
 80065ae:	d103      	bne.n	80065b8 <_printf_common+0xbc>
 80065b0:	f04f 30ff 	mov.w	r0, #4294967295
 80065b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b8:	3501      	adds	r5, #1
 80065ba:	e7c2      	b.n	8006542 <_printf_common+0x46>
 80065bc:	18e1      	adds	r1, r4, r3
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	2030      	movs	r0, #48	; 0x30
 80065c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065c6:	4422      	add	r2, r4
 80065c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065d0:	3302      	adds	r3, #2
 80065d2:	e7c4      	b.n	800655e <_printf_common+0x62>
 80065d4:	2301      	movs	r3, #1
 80065d6:	4622      	mov	r2, r4
 80065d8:	4639      	mov	r1, r7
 80065da:	4630      	mov	r0, r6
 80065dc:	47c0      	blx	r8
 80065de:	3001      	adds	r0, #1
 80065e0:	d0e6      	beq.n	80065b0 <_printf_common+0xb4>
 80065e2:	f109 0901 	add.w	r9, r9, #1
 80065e6:	e7d7      	b.n	8006598 <_printf_common+0x9c>

080065e8 <_printf_i>:
 80065e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065ec:	4617      	mov	r7, r2
 80065ee:	7e0a      	ldrb	r2, [r1, #24]
 80065f0:	b085      	sub	sp, #20
 80065f2:	2a6e      	cmp	r2, #110	; 0x6e
 80065f4:	4698      	mov	r8, r3
 80065f6:	4606      	mov	r6, r0
 80065f8:	460c      	mov	r4, r1
 80065fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065fc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006600:	f000 80bc 	beq.w	800677c <_printf_i+0x194>
 8006604:	d81a      	bhi.n	800663c <_printf_i+0x54>
 8006606:	2a63      	cmp	r2, #99	; 0x63
 8006608:	d02e      	beq.n	8006668 <_printf_i+0x80>
 800660a:	d80a      	bhi.n	8006622 <_printf_i+0x3a>
 800660c:	2a00      	cmp	r2, #0
 800660e:	f000 80c8 	beq.w	80067a2 <_printf_i+0x1ba>
 8006612:	2a58      	cmp	r2, #88	; 0x58
 8006614:	f000 808a 	beq.w	800672c <_printf_i+0x144>
 8006618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800661c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006620:	e02a      	b.n	8006678 <_printf_i+0x90>
 8006622:	2a64      	cmp	r2, #100	; 0x64
 8006624:	d001      	beq.n	800662a <_printf_i+0x42>
 8006626:	2a69      	cmp	r2, #105	; 0x69
 8006628:	d1f6      	bne.n	8006618 <_printf_i+0x30>
 800662a:	6821      	ldr	r1, [r4, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006632:	d023      	beq.n	800667c <_printf_i+0x94>
 8006634:	1d11      	adds	r1, r2, #4
 8006636:	6019      	str	r1, [r3, #0]
 8006638:	6813      	ldr	r3, [r2, #0]
 800663a:	e027      	b.n	800668c <_printf_i+0xa4>
 800663c:	2a73      	cmp	r2, #115	; 0x73
 800663e:	f000 80b4 	beq.w	80067aa <_printf_i+0x1c2>
 8006642:	d808      	bhi.n	8006656 <_printf_i+0x6e>
 8006644:	2a6f      	cmp	r2, #111	; 0x6f
 8006646:	d02a      	beq.n	800669e <_printf_i+0xb6>
 8006648:	2a70      	cmp	r2, #112	; 0x70
 800664a:	d1e5      	bne.n	8006618 <_printf_i+0x30>
 800664c:	680a      	ldr	r2, [r1, #0]
 800664e:	f042 0220 	orr.w	r2, r2, #32
 8006652:	600a      	str	r2, [r1, #0]
 8006654:	e003      	b.n	800665e <_printf_i+0x76>
 8006656:	2a75      	cmp	r2, #117	; 0x75
 8006658:	d021      	beq.n	800669e <_printf_i+0xb6>
 800665a:	2a78      	cmp	r2, #120	; 0x78
 800665c:	d1dc      	bne.n	8006618 <_printf_i+0x30>
 800665e:	2278      	movs	r2, #120	; 0x78
 8006660:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006664:	496e      	ldr	r1, [pc, #440]	; (8006820 <_printf_i+0x238>)
 8006666:	e064      	b.n	8006732 <_printf_i+0x14a>
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800666e:	1d11      	adds	r1, r2, #4
 8006670:	6019      	str	r1, [r3, #0]
 8006672:	6813      	ldr	r3, [r2, #0]
 8006674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006678:	2301      	movs	r3, #1
 800667a:	e0a3      	b.n	80067c4 <_printf_i+0x1dc>
 800667c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006680:	f102 0104 	add.w	r1, r2, #4
 8006684:	6019      	str	r1, [r3, #0]
 8006686:	d0d7      	beq.n	8006638 <_printf_i+0x50>
 8006688:	f9b2 3000 	ldrsh.w	r3, [r2]
 800668c:	2b00      	cmp	r3, #0
 800668e:	da03      	bge.n	8006698 <_printf_i+0xb0>
 8006690:	222d      	movs	r2, #45	; 0x2d
 8006692:	425b      	negs	r3, r3
 8006694:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006698:	4962      	ldr	r1, [pc, #392]	; (8006824 <_printf_i+0x23c>)
 800669a:	220a      	movs	r2, #10
 800669c:	e017      	b.n	80066ce <_printf_i+0xe6>
 800669e:	6820      	ldr	r0, [r4, #0]
 80066a0:	6819      	ldr	r1, [r3, #0]
 80066a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80066a6:	d003      	beq.n	80066b0 <_printf_i+0xc8>
 80066a8:	1d08      	adds	r0, r1, #4
 80066aa:	6018      	str	r0, [r3, #0]
 80066ac:	680b      	ldr	r3, [r1, #0]
 80066ae:	e006      	b.n	80066be <_printf_i+0xd6>
 80066b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066b4:	f101 0004 	add.w	r0, r1, #4
 80066b8:	6018      	str	r0, [r3, #0]
 80066ba:	d0f7      	beq.n	80066ac <_printf_i+0xc4>
 80066bc:	880b      	ldrh	r3, [r1, #0]
 80066be:	4959      	ldr	r1, [pc, #356]	; (8006824 <_printf_i+0x23c>)
 80066c0:	2a6f      	cmp	r2, #111	; 0x6f
 80066c2:	bf14      	ite	ne
 80066c4:	220a      	movne	r2, #10
 80066c6:	2208      	moveq	r2, #8
 80066c8:	2000      	movs	r0, #0
 80066ca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80066ce:	6865      	ldr	r5, [r4, #4]
 80066d0:	60a5      	str	r5, [r4, #8]
 80066d2:	2d00      	cmp	r5, #0
 80066d4:	f2c0 809c 	blt.w	8006810 <_printf_i+0x228>
 80066d8:	6820      	ldr	r0, [r4, #0]
 80066da:	f020 0004 	bic.w	r0, r0, #4
 80066de:	6020      	str	r0, [r4, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d13f      	bne.n	8006764 <_printf_i+0x17c>
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	f040 8095 	bne.w	8006814 <_printf_i+0x22c>
 80066ea:	4675      	mov	r5, lr
 80066ec:	2a08      	cmp	r2, #8
 80066ee:	d10b      	bne.n	8006708 <_printf_i+0x120>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	07da      	lsls	r2, r3, #31
 80066f4:	d508      	bpl.n	8006708 <_printf_i+0x120>
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	6862      	ldr	r2, [r4, #4]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	bfde      	ittt	le
 80066fe:	2330      	movle	r3, #48	; 0x30
 8006700:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006704:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006708:	ebae 0305 	sub.w	r3, lr, r5
 800670c:	6123      	str	r3, [r4, #16]
 800670e:	f8cd 8000 	str.w	r8, [sp]
 8006712:	463b      	mov	r3, r7
 8006714:	aa03      	add	r2, sp, #12
 8006716:	4621      	mov	r1, r4
 8006718:	4630      	mov	r0, r6
 800671a:	f7ff feef 	bl	80064fc <_printf_common>
 800671e:	3001      	adds	r0, #1
 8006720:	d155      	bne.n	80067ce <_printf_i+0x1e6>
 8006722:	f04f 30ff 	mov.w	r0, #4294967295
 8006726:	b005      	add	sp, #20
 8006728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800672c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006730:	493c      	ldr	r1, [pc, #240]	; (8006824 <_printf_i+0x23c>)
 8006732:	6822      	ldr	r2, [r4, #0]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	f012 0f80 	tst.w	r2, #128	; 0x80
 800673a:	f100 0504 	add.w	r5, r0, #4
 800673e:	601d      	str	r5, [r3, #0]
 8006740:	d001      	beq.n	8006746 <_printf_i+0x15e>
 8006742:	6803      	ldr	r3, [r0, #0]
 8006744:	e002      	b.n	800674c <_printf_i+0x164>
 8006746:	0655      	lsls	r5, r2, #25
 8006748:	d5fb      	bpl.n	8006742 <_printf_i+0x15a>
 800674a:	8803      	ldrh	r3, [r0, #0]
 800674c:	07d0      	lsls	r0, r2, #31
 800674e:	bf44      	itt	mi
 8006750:	f042 0220 	orrmi.w	r2, r2, #32
 8006754:	6022      	strmi	r2, [r4, #0]
 8006756:	b91b      	cbnz	r3, 8006760 <_printf_i+0x178>
 8006758:	6822      	ldr	r2, [r4, #0]
 800675a:	f022 0220 	bic.w	r2, r2, #32
 800675e:	6022      	str	r2, [r4, #0]
 8006760:	2210      	movs	r2, #16
 8006762:	e7b1      	b.n	80066c8 <_printf_i+0xe0>
 8006764:	4675      	mov	r5, lr
 8006766:	fbb3 f0f2 	udiv	r0, r3, r2
 800676a:	fb02 3310 	mls	r3, r2, r0, r3
 800676e:	5ccb      	ldrb	r3, [r1, r3]
 8006770:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006774:	4603      	mov	r3, r0
 8006776:	2800      	cmp	r0, #0
 8006778:	d1f5      	bne.n	8006766 <_printf_i+0x17e>
 800677a:	e7b7      	b.n	80066ec <_printf_i+0x104>
 800677c:	6808      	ldr	r0, [r1, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	6949      	ldr	r1, [r1, #20]
 8006782:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006786:	d004      	beq.n	8006792 <_printf_i+0x1aa>
 8006788:	1d10      	adds	r0, r2, #4
 800678a:	6018      	str	r0, [r3, #0]
 800678c:	6813      	ldr	r3, [r2, #0]
 800678e:	6019      	str	r1, [r3, #0]
 8006790:	e007      	b.n	80067a2 <_printf_i+0x1ba>
 8006792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006796:	f102 0004 	add.w	r0, r2, #4
 800679a:	6018      	str	r0, [r3, #0]
 800679c:	6813      	ldr	r3, [r2, #0]
 800679e:	d0f6      	beq.n	800678e <_printf_i+0x1a6>
 80067a0:	8019      	strh	r1, [r3, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	4675      	mov	r5, lr
 80067a8:	e7b1      	b.n	800670e <_printf_i+0x126>
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	1d11      	adds	r1, r2, #4
 80067ae:	6019      	str	r1, [r3, #0]
 80067b0:	6815      	ldr	r5, [r2, #0]
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	2100      	movs	r1, #0
 80067b6:	4628      	mov	r0, r5
 80067b8:	f7f9 fd1a 	bl	80001f0 <memchr>
 80067bc:	b108      	cbz	r0, 80067c2 <_printf_i+0x1da>
 80067be:	1b40      	subs	r0, r0, r5
 80067c0:	6060      	str	r0, [r4, #4]
 80067c2:	6863      	ldr	r3, [r4, #4]
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	2300      	movs	r3, #0
 80067c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067cc:	e79f      	b.n	800670e <_printf_i+0x126>
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4639      	mov	r1, r7
 80067d4:	4630      	mov	r0, r6
 80067d6:	47c0      	blx	r8
 80067d8:	3001      	adds	r0, #1
 80067da:	d0a2      	beq.n	8006722 <_printf_i+0x13a>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	079b      	lsls	r3, r3, #30
 80067e0:	d507      	bpl.n	80067f2 <_printf_i+0x20a>
 80067e2:	2500      	movs	r5, #0
 80067e4:	f104 0919 	add.w	r9, r4, #25
 80067e8:	68e3      	ldr	r3, [r4, #12]
 80067ea:	9a03      	ldr	r2, [sp, #12]
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	429d      	cmp	r5, r3
 80067f0:	db05      	blt.n	80067fe <_printf_i+0x216>
 80067f2:	68e0      	ldr	r0, [r4, #12]
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	4298      	cmp	r0, r3
 80067f8:	bfb8      	it	lt
 80067fa:	4618      	movlt	r0, r3
 80067fc:	e793      	b.n	8006726 <_printf_i+0x13e>
 80067fe:	2301      	movs	r3, #1
 8006800:	464a      	mov	r2, r9
 8006802:	4639      	mov	r1, r7
 8006804:	4630      	mov	r0, r6
 8006806:	47c0      	blx	r8
 8006808:	3001      	adds	r0, #1
 800680a:	d08a      	beq.n	8006722 <_printf_i+0x13a>
 800680c:	3501      	adds	r5, #1
 800680e:	e7eb      	b.n	80067e8 <_printf_i+0x200>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1a7      	bne.n	8006764 <_printf_i+0x17c>
 8006814:	780b      	ldrb	r3, [r1, #0]
 8006816:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800681a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800681e:	e765      	b.n	80066ec <_printf_i+0x104>
 8006820:	0800749a 	.word	0x0800749a
 8006824:	08007489 	.word	0x08007489

08006828 <memmove>:
 8006828:	4288      	cmp	r0, r1
 800682a:	b510      	push	{r4, lr}
 800682c:	eb01 0302 	add.w	r3, r1, r2
 8006830:	d803      	bhi.n	800683a <memmove+0x12>
 8006832:	1e42      	subs	r2, r0, #1
 8006834:	4299      	cmp	r1, r3
 8006836:	d10c      	bne.n	8006852 <memmove+0x2a>
 8006838:	bd10      	pop	{r4, pc}
 800683a:	4298      	cmp	r0, r3
 800683c:	d2f9      	bcs.n	8006832 <memmove+0xa>
 800683e:	1881      	adds	r1, r0, r2
 8006840:	1ad2      	subs	r2, r2, r3
 8006842:	42d3      	cmn	r3, r2
 8006844:	d100      	bne.n	8006848 <memmove+0x20>
 8006846:	bd10      	pop	{r4, pc}
 8006848:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800684c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006850:	e7f7      	b.n	8006842 <memmove+0x1a>
 8006852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006856:	f802 4f01 	strb.w	r4, [r2, #1]!
 800685a:	e7eb      	b.n	8006834 <memmove+0xc>

0800685c <_free_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4605      	mov	r5, r0
 8006860:	2900      	cmp	r1, #0
 8006862:	d045      	beq.n	80068f0 <_free_r+0x94>
 8006864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006868:	1f0c      	subs	r4, r1, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	bfb8      	it	lt
 800686e:	18e4      	addlt	r4, r4, r3
 8006870:	f000 f8d6 	bl	8006a20 <__malloc_lock>
 8006874:	4a1f      	ldr	r2, [pc, #124]	; (80068f4 <_free_r+0x98>)
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	4610      	mov	r0, r2
 800687a:	b933      	cbnz	r3, 800688a <_free_r+0x2e>
 800687c:	6063      	str	r3, [r4, #4]
 800687e:	6014      	str	r4, [r2, #0]
 8006880:	4628      	mov	r0, r5
 8006882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006886:	f000 b8cc 	b.w	8006a22 <__malloc_unlock>
 800688a:	42a3      	cmp	r3, r4
 800688c:	d90c      	bls.n	80068a8 <_free_r+0x4c>
 800688e:	6821      	ldr	r1, [r4, #0]
 8006890:	1862      	adds	r2, r4, r1
 8006892:	4293      	cmp	r3, r2
 8006894:	bf04      	itt	eq
 8006896:	681a      	ldreq	r2, [r3, #0]
 8006898:	685b      	ldreq	r3, [r3, #4]
 800689a:	6063      	str	r3, [r4, #4]
 800689c:	bf04      	itt	eq
 800689e:	1852      	addeq	r2, r2, r1
 80068a0:	6022      	streq	r2, [r4, #0]
 80068a2:	6004      	str	r4, [r0, #0]
 80068a4:	e7ec      	b.n	8006880 <_free_r+0x24>
 80068a6:	4613      	mov	r3, r2
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	b10a      	cbz	r2, 80068b0 <_free_r+0x54>
 80068ac:	42a2      	cmp	r2, r4
 80068ae:	d9fa      	bls.n	80068a6 <_free_r+0x4a>
 80068b0:	6819      	ldr	r1, [r3, #0]
 80068b2:	1858      	adds	r0, r3, r1
 80068b4:	42a0      	cmp	r0, r4
 80068b6:	d10b      	bne.n	80068d0 <_free_r+0x74>
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	4401      	add	r1, r0
 80068bc:	1858      	adds	r0, r3, r1
 80068be:	4282      	cmp	r2, r0
 80068c0:	6019      	str	r1, [r3, #0]
 80068c2:	d1dd      	bne.n	8006880 <_free_r+0x24>
 80068c4:	6810      	ldr	r0, [r2, #0]
 80068c6:	6852      	ldr	r2, [r2, #4]
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	4401      	add	r1, r0
 80068cc:	6019      	str	r1, [r3, #0]
 80068ce:	e7d7      	b.n	8006880 <_free_r+0x24>
 80068d0:	d902      	bls.n	80068d8 <_free_r+0x7c>
 80068d2:	230c      	movs	r3, #12
 80068d4:	602b      	str	r3, [r5, #0]
 80068d6:	e7d3      	b.n	8006880 <_free_r+0x24>
 80068d8:	6820      	ldr	r0, [r4, #0]
 80068da:	1821      	adds	r1, r4, r0
 80068dc:	428a      	cmp	r2, r1
 80068de:	bf04      	itt	eq
 80068e0:	6811      	ldreq	r1, [r2, #0]
 80068e2:	6852      	ldreq	r2, [r2, #4]
 80068e4:	6062      	str	r2, [r4, #4]
 80068e6:	bf04      	itt	eq
 80068e8:	1809      	addeq	r1, r1, r0
 80068ea:	6021      	streq	r1, [r4, #0]
 80068ec:	605c      	str	r4, [r3, #4]
 80068ee:	e7c7      	b.n	8006880 <_free_r+0x24>
 80068f0:	bd38      	pop	{r3, r4, r5, pc}
 80068f2:	bf00      	nop
 80068f4:	20000490 	.word	0x20000490

080068f8 <_malloc_r>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	1ccd      	adds	r5, r1, #3
 80068fc:	f025 0503 	bic.w	r5, r5, #3
 8006900:	3508      	adds	r5, #8
 8006902:	2d0c      	cmp	r5, #12
 8006904:	bf38      	it	cc
 8006906:	250c      	movcc	r5, #12
 8006908:	2d00      	cmp	r5, #0
 800690a:	4606      	mov	r6, r0
 800690c:	db01      	blt.n	8006912 <_malloc_r+0x1a>
 800690e:	42a9      	cmp	r1, r5
 8006910:	d903      	bls.n	800691a <_malloc_r+0x22>
 8006912:	230c      	movs	r3, #12
 8006914:	6033      	str	r3, [r6, #0]
 8006916:	2000      	movs	r0, #0
 8006918:	bd70      	pop	{r4, r5, r6, pc}
 800691a:	f000 f881 	bl	8006a20 <__malloc_lock>
 800691e:	4a23      	ldr	r2, [pc, #140]	; (80069ac <_malloc_r+0xb4>)
 8006920:	6814      	ldr	r4, [r2, #0]
 8006922:	4621      	mov	r1, r4
 8006924:	b991      	cbnz	r1, 800694c <_malloc_r+0x54>
 8006926:	4c22      	ldr	r4, [pc, #136]	; (80069b0 <_malloc_r+0xb8>)
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	b91b      	cbnz	r3, 8006934 <_malloc_r+0x3c>
 800692c:	4630      	mov	r0, r6
 800692e:	f000 f867 	bl	8006a00 <_sbrk_r>
 8006932:	6020      	str	r0, [r4, #0]
 8006934:	4629      	mov	r1, r5
 8006936:	4630      	mov	r0, r6
 8006938:	f000 f862 	bl	8006a00 <_sbrk_r>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d126      	bne.n	800698e <_malloc_r+0x96>
 8006940:	230c      	movs	r3, #12
 8006942:	6033      	str	r3, [r6, #0]
 8006944:	4630      	mov	r0, r6
 8006946:	f000 f86c 	bl	8006a22 <__malloc_unlock>
 800694a:	e7e4      	b.n	8006916 <_malloc_r+0x1e>
 800694c:	680b      	ldr	r3, [r1, #0]
 800694e:	1b5b      	subs	r3, r3, r5
 8006950:	d41a      	bmi.n	8006988 <_malloc_r+0x90>
 8006952:	2b0b      	cmp	r3, #11
 8006954:	d90f      	bls.n	8006976 <_malloc_r+0x7e>
 8006956:	600b      	str	r3, [r1, #0]
 8006958:	50cd      	str	r5, [r1, r3]
 800695a:	18cc      	adds	r4, r1, r3
 800695c:	4630      	mov	r0, r6
 800695e:	f000 f860 	bl	8006a22 <__malloc_unlock>
 8006962:	f104 000b 	add.w	r0, r4, #11
 8006966:	1d23      	adds	r3, r4, #4
 8006968:	f020 0007 	bic.w	r0, r0, #7
 800696c:	1ac3      	subs	r3, r0, r3
 800696e:	d01b      	beq.n	80069a8 <_malloc_r+0xb0>
 8006970:	425a      	negs	r2, r3
 8006972:	50e2      	str	r2, [r4, r3]
 8006974:	bd70      	pop	{r4, r5, r6, pc}
 8006976:	428c      	cmp	r4, r1
 8006978:	bf0d      	iteet	eq
 800697a:	6863      	ldreq	r3, [r4, #4]
 800697c:	684b      	ldrne	r3, [r1, #4]
 800697e:	6063      	strne	r3, [r4, #4]
 8006980:	6013      	streq	r3, [r2, #0]
 8006982:	bf18      	it	ne
 8006984:	460c      	movne	r4, r1
 8006986:	e7e9      	b.n	800695c <_malloc_r+0x64>
 8006988:	460c      	mov	r4, r1
 800698a:	6849      	ldr	r1, [r1, #4]
 800698c:	e7ca      	b.n	8006924 <_malloc_r+0x2c>
 800698e:	1cc4      	adds	r4, r0, #3
 8006990:	f024 0403 	bic.w	r4, r4, #3
 8006994:	42a0      	cmp	r0, r4
 8006996:	d005      	beq.n	80069a4 <_malloc_r+0xac>
 8006998:	1a21      	subs	r1, r4, r0
 800699a:	4630      	mov	r0, r6
 800699c:	f000 f830 	bl	8006a00 <_sbrk_r>
 80069a0:	3001      	adds	r0, #1
 80069a2:	d0cd      	beq.n	8006940 <_malloc_r+0x48>
 80069a4:	6025      	str	r5, [r4, #0]
 80069a6:	e7d9      	b.n	800695c <_malloc_r+0x64>
 80069a8:	bd70      	pop	{r4, r5, r6, pc}
 80069aa:	bf00      	nop
 80069ac:	20000490 	.word	0x20000490
 80069b0:	20000494 	.word	0x20000494

080069b4 <_realloc_r>:
 80069b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b6:	4607      	mov	r7, r0
 80069b8:	4614      	mov	r4, r2
 80069ba:	460e      	mov	r6, r1
 80069bc:	b921      	cbnz	r1, 80069c8 <_realloc_r+0x14>
 80069be:	4611      	mov	r1, r2
 80069c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069c4:	f7ff bf98 	b.w	80068f8 <_malloc_r>
 80069c8:	b922      	cbnz	r2, 80069d4 <_realloc_r+0x20>
 80069ca:	f7ff ff47 	bl	800685c <_free_r>
 80069ce:	4625      	mov	r5, r4
 80069d0:	4628      	mov	r0, r5
 80069d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069d4:	f000 f826 	bl	8006a24 <_malloc_usable_size_r>
 80069d8:	4284      	cmp	r4, r0
 80069da:	d90f      	bls.n	80069fc <_realloc_r+0x48>
 80069dc:	4621      	mov	r1, r4
 80069de:	4638      	mov	r0, r7
 80069e0:	f7ff ff8a 	bl	80068f8 <_malloc_r>
 80069e4:	4605      	mov	r5, r0
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d0f2      	beq.n	80069d0 <_realloc_r+0x1c>
 80069ea:	4631      	mov	r1, r6
 80069ec:	4622      	mov	r2, r4
 80069ee:	f7ff fbed 	bl	80061cc <memcpy>
 80069f2:	4631      	mov	r1, r6
 80069f4:	4638      	mov	r0, r7
 80069f6:	f7ff ff31 	bl	800685c <_free_r>
 80069fa:	e7e9      	b.n	80069d0 <_realloc_r+0x1c>
 80069fc:	4635      	mov	r5, r6
 80069fe:	e7e7      	b.n	80069d0 <_realloc_r+0x1c>

08006a00 <_sbrk_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4c06      	ldr	r4, [pc, #24]	; (8006a1c <_sbrk_r+0x1c>)
 8006a04:	2300      	movs	r3, #0
 8006a06:	4605      	mov	r5, r0
 8006a08:	4608      	mov	r0, r1
 8006a0a:	6023      	str	r3, [r4, #0]
 8006a0c:	f000 f814 	bl	8006a38 <_sbrk>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d102      	bne.n	8006a1a <_sbrk_r+0x1a>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	b103      	cbz	r3, 8006a1a <_sbrk_r+0x1a>
 8006a18:	602b      	str	r3, [r5, #0]
 8006a1a:	bd38      	pop	{r3, r4, r5, pc}
 8006a1c:	20000ec0 	.word	0x20000ec0

08006a20 <__malloc_lock>:
 8006a20:	4770      	bx	lr

08006a22 <__malloc_unlock>:
 8006a22:	4770      	bx	lr

08006a24 <_malloc_usable_size_r>:
 8006a24:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f1a0 0004 	sub.w	r0, r0, #4
 8006a2e:	bfbc      	itt	lt
 8006a30:	580b      	ldrlt	r3, [r1, r0]
 8006a32:	18c0      	addlt	r0, r0, r3
 8006a34:	4770      	bx	lr
	...

08006a38 <_sbrk>:
 8006a38:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <_sbrk+0x14>)
 8006a3a:	6819      	ldr	r1, [r3, #0]
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	b909      	cbnz	r1, 8006a44 <_sbrk+0xc>
 8006a40:	4903      	ldr	r1, [pc, #12]	; (8006a50 <_sbrk+0x18>)
 8006a42:	6019      	str	r1, [r3, #0]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	4402      	add	r2, r0
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	4770      	bx	lr
 8006a4c:	20000498 	.word	0x20000498
 8006a50:	20000ec4 	.word	0x20000ec4

08006a54 <_init>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	bf00      	nop
 8006a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5a:	bc08      	pop	{r3}
 8006a5c:	469e      	mov	lr, r3
 8006a5e:	4770      	bx	lr

08006a60 <_fini>:
 8006a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a62:	bf00      	nop
 8006a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a66:	bc08      	pop	{r3}
 8006a68:	469e      	mov	lr, r3
 8006a6a:	4770      	bx	lr
