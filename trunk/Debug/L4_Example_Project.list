
L4_Example_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001448  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080015dc  080015dc  000115dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080016dc  080016dc  000116dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080016e0  080016e0  000116e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  080016e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  7 .bss          00000084  2000003c  2000003c  0002003c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000c0  200000c0  0002003c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000123a3  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b73  00000000  00000000  0003240f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000888  00000000  00000000  00034f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000820  00000000  00000000  00035810  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005898  00000000  00000000  00036030  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003738  00000000  00000000  0003b8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f000  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000011a8  00000000  00000000  0003f07c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00002a75  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080015c4 	.word	0x080015c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	080015c4 	.word	0x080015c4

080001d4 <main>:
 *
 * @details Initializes applications.
 * @details Call system application to execute active applications.
 ****************************************************************************/
int  main()
{
 80001d4:	b508      	push	{r3, lr}
	/* Call to initial specific platform configuration */
    systemPreConfiguration();
 80001d6:	f000 fc0e 	bl	80009f6 <systemPreConfiguration>

	/* Applications Initialization */
    SchedulerInit();
 80001da:	f000 f93d 	bl	8000458 <SchedulerInit>

    stm32L4Init();
 80001de:	f000 fbf7 	bl	80009d0 <stm32L4Init>
    interruptsInit();
 80001e2:	f000 fac9 	bl	8000778 <interruptsInit>
    interruptsStart();
 80001e6:	f000 fadf 	bl	80007a8 <interruptsStart>
    SwTimerInit();
 80001ea:	f000 fa51 	bl	8000690 <SwTimerInit>
    while (TRUE)
    {
        SchedulerNextSystemProcess();
 80001ee:	f000 f9e1 	bl	80005b4 <SchedulerNextSystemProcess>
 80001f2:	e7fc      	b.n	80001ee <main+0x1a>

080001f4 <initSystemApp>:
 *
 * @details Initializes HREG and SREG layers.
 * @details Initializes all applications
 ****************************************************************************/
void initSystemApp( void )
{
 80001f4:	b508      	push	{r3, lr}
    requestPowerState = POWER_STATE_NO_REQUEST;
 80001f6:	2200      	movs	r2, #0
 80001f8:	4b02      	ldr	r3, [pc, #8]	; (8000204 <initSystemApp+0x10>)
 80001fa:	701a      	strb	r2, [r3, #0]

    initSregAll();    /* Initialise the SREG layer */
 80001fc:	f000 f8b8 	bl	8000370 <initSregAll>
 8000200:	bd08      	pop	{r3, pc}
 8000202:	bf00      	nop
 8000204:	2000006d 	.word	0x2000006d

08000208 <callSystemApp>:
 *
 * @details depending on current state, executes active applications.
 * @details calls system middleware task
 ****************************************************************************/
void callSystemApp( void )
{
 8000208:	b508      	push	{r3, lr}
    uint8_t systemState;

    /* System state machine */
    systemState = READ_SREG(SREG_SYSTEM_STATE);
 800020a:	2004      	movs	r0, #4
 800020c:	f000 f8cf 	bl	80003ae <readSreg>
 8000210:	b2c1      	uxtb	r1, r0
    //systemState = SYSTEM_APP_INIT_SHELL;
    switch ( systemState )
 8000212:	2904      	cmp	r1, #4
 8000214:	d82e      	bhi.n	8000274 <callSystemApp+0x6c>
 8000216:	e8df f001 	tbb	[pc, r1]
 800021a:	032c      	.short	0x032c
 800021c:	2d0e      	.short	0x2d0e
 800021e:	05          	.byte	0x05
 800021f:	00          	.byte	0x00
			break;
        
		case SYSTEM_APP_INIT:
			/* Application init dispather */
			
			systemState = SYSTEM_APP_ON;
 8000220:	2102      	movs	r1, #2
            break;
 8000222:	e027      	b.n	8000274 <callSystemApp+0x6c>

        case SYSTEM_APP_SLEPT:
			/* Application sleep dispather */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_WAKE_UP ) 
 8000224:	4b15      	ldr	r3, [pc, #84]	; (800027c <callSystemApp+0x74>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b02      	cmp	r3, #2
 800022a:	d123      	bne.n	8000274 <callSystemApp+0x6c>
            {
				/* Wake up */
                systemState = SYSTEM_APP_ON;
                requestPowerState = POWER_STATE_NO_REQUEST;
 800022c:	2100      	movs	r1, #0
 800022e:	4a13      	ldr	r2, [pc, #76]	; (800027c <callSystemApp+0x74>)
 8000230:	7011      	strb	r1, [r2, #0]
                systemState = SYSTEM_APP_ON;
 8000232:	4619      	mov	r1, r3
 8000234:	e01e      	b.n	8000274 <callSystemApp+0x6c>

        case SYSTEM_APP_ON:
			/* Application dispatcher */

			/* Power Sequence control */
            if ( requestPowerState == POWER_STATE_START_SHUTDOWN )
 8000236:	4b11      	ldr	r3, [pc, #68]	; (800027c <callSystemApp+0x74>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d007      	beq.n	800024e <callSystemApp+0x46>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
                
                /* Power off */
                systemState = SYSTEM_APP_POWER_OFF;
            }
            else if ( requestPowerState == POWER_STATE_GO_TO_SLEEP )
 800023e:	2b03      	cmp	r3, #3
 8000240:	d00b      	beq.n	800025a <callSystemApp+0x52>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
                
                /* Slept */
                systemState = SYSTEM_APP_SLEPT;
            }
            else if ( requestPowerState == POWER_STATE_REBOOT )
 8000242:	2b04      	cmp	r3, #4
 8000244:	d00f      	beq.n	8000266 <callSystemApp+0x5e>
                systemState = SYSTEM_APP_REBOOT;
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
            }
            
            /* Reset power state request */
            requestPowerState = POWER_STATE_NO_REQUEST;
 8000246:	2200      	movs	r2, #0
 8000248:	4b0c      	ldr	r3, [pc, #48]	; (800027c <callSystemApp+0x74>)
 800024a:	701a      	strb	r2, [r3, #0]
            break;
 800024c:	e012      	b.n	8000274 <callSystemApp+0x6c>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_POWER_OFF);
 800024e:	210a      	movs	r1, #10
 8000250:	2005      	movs	r0, #5
 8000252:	f000 f8c7 	bl	80003e4 <writeSreg>
                systemState = SYSTEM_APP_POWER_OFF;
 8000256:	2103      	movs	r1, #3
 8000258:	e7f5      	b.n	8000246 <callSystemApp+0x3e>
                WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_SLEEP);
 800025a:	2101      	movs	r1, #1
 800025c:	2005      	movs	r0, #5
 800025e:	f000 f8c1 	bl	80003e4 <writeSreg>
                systemState = SYSTEM_APP_SLEPT;
 8000262:	2104      	movs	r1, #4
 8000264:	e7ef      	b.n	8000246 <callSystemApp+0x3e>
				WRITE_SREG(SREG_SYSTEM_MW_NOTIF, NOTIF_SYSTEM_MW_RESET);
 8000266:	2103      	movs	r1, #3
 8000268:	2005      	movs	r0, #5
 800026a:	f000 f8bb 	bl	80003e4 <writeSreg>
                systemState = SYSTEM_APP_REBOOT;
 800026e:	2105      	movs	r1, #5
 8000270:	e7e9      	b.n	8000246 <callSystemApp+0x3e>
			systemState = SYSTEM_APP_INIT;
 8000272:	2101      	movs	r1, #1
			break;
        
    }
    
    /* Update system state */
    WRITE_SREG(SREG_SYSTEM_STATE, systemState);
 8000274:	2004      	movs	r0, #4
 8000276:	f000 f8b5 	bl	80003e4 <writeSreg>
 800027a:	bd08      	pop	{r3, pc}
 800027c:	2000006d 	.word	0x2000006d

08000280 <sregWrite>:
eError sregWrite(SREG sreg, uint32_t value)
{
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 8000280:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <sregWrite+0x38>)
 8000282:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8000286:	7852      	ldrb	r2, [r2, #1]
	switch(SREGInstanceMap[sreg].type)
 8000288:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d008      	beq.n	80002a2 <sregWrite+0x22>
 8000290:	b11b      	cbz	r3, 800029a <sregWrite+0x1a>
 8000292:	2b02      	cmp	r3, #2
 8000294:	d00a      	beq.n	80002ac <sregWrite+0x2c>
			break;
		case SREG_UINT32:
			SREG32Context[index] = (uint32_t)value;
			break;
		default:
			success = RET_INVALID_PARAMETER;
 8000296:	2005      	movs	r0, #5
			break;
	}

	return success;
}
 8000298:	4770      	bx	lr
			SREG8Context[index] = (uint8_t)value;
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <sregWrite+0x3c>)
 800029c:	5499      	strb	r1, [r3, r2]
	eError success = RET_OK;
 800029e:	2000      	movs	r0, #0
			break;
 80002a0:	4770      	bx	lr
			SREG16Context[index] = (uint16_t)value;
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <sregWrite+0x40>)
 80002a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	eError success = RET_OK;
 80002a8:	2000      	movs	r0, #0
			break;
 80002aa:	4770      	bx	lr
			SREG32Context[index] = (uint32_t)value;
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <sregWrite+0x44>)
 80002ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eError success = RET_OK;
 80002b2:	2000      	movs	r0, #0
			break;
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	0800160c 	.word	0x0800160c
 80002bc:	20000070 	.word	0x20000070
 80002c0:	20000080 	.word	0x20000080
 80002c4:	20000078 	.word	0x20000078

080002c8 <sregReadParam>:
 * @param	sreg
 * @param	sregParam struct
 * @return  RET_OK or RET_FAIL
 ****************************************************************************/
eError sregReadParam(SREG sreg, tSREGParam *sregParam)
{
 80002c8:	b430      	push	{r4, r5}
	eError success = RET_OK;
	uint8_t index;

	index = SREGInstanceMap[sreg].indexSREGType;
 80002ca:	4a22      	ldr	r2, [pc, #136]	; (8000354 <sregReadParam+0x8c>)
 80002cc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 80002d0:	785b      	ldrb	r3, [r3, #1]
	switch(SREGInstanceMap[sreg].type)
 80002d2:	f812 2020 	ldrb.w	r2, [r2, r0, lsl #2]
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	d014      	beq.n	8000304 <sregReadParam+0x3c>
 80002da:	b11a      	cbz	r2, 80002e4 <sregReadParam+0x1c>
 80002dc:	2a02      	cmp	r2, #2
 80002de:	d025      	beq.n	800032c <sregReadParam+0x64>
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
			break;
		default:
			success = RET_INVALID_PARAMETER;
 80002e0:	2005      	movs	r0, #5
 80002e2:	e00d      	b.n	8000300 <sregReadParam+0x38>
			sregParam->Data = (uint32_t)SREG8Context[index];
 80002e4:	4a1c      	ldr	r2, [pc, #112]	; (8000358 <sregReadParam+0x90>)
 80002e6:	5cd2      	ldrb	r2, [r2, r3]
 80002e8:	600a      	str	r2, [r1, #0]
			sregParam->Init = (uint32_t)(SREG8InstanceMap[index].Init);
 80002ea:	481c      	ldr	r0, [pc, #112]	; (800035c <sregReadParam+0x94>)
 80002ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80002f0:	18c2      	adds	r2, r0, r3
 80002f2:	7894      	ldrb	r4, [r2, #2]
 80002f4:	60cc      	str	r4, [r1, #12]
			sregParam->Max  = (uint32_t)(SREG8InstanceMap[index].Max);
 80002f6:	5cc3      	ldrb	r3, [r0, r3]
 80002f8:	604b      	str	r3, [r1, #4]
			sregParam->Min  = (uint32_t)(SREG8InstanceMap[index].Min);
 80002fa:	7853      	ldrb	r3, [r2, #1]
 80002fc:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 80002fe:	2000      	movs	r0, #0
			break;
	}

	return success;
}
 8000300:	bc30      	pop	{r4, r5}
 8000302:	4770      	bx	lr
			sregParam->Data  = (uint32_t)SREG16Context[index];
 8000304:	4a16      	ldr	r2, [pc, #88]	; (8000360 <sregReadParam+0x98>)
 8000306:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800030a:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG16InstanceMap[index].Init);
 800030c:	4a15      	ldr	r2, [pc, #84]	; (8000364 <sregReadParam+0x9c>)
 800030e:	0058      	lsls	r0, r3, #1
 8000310:	18c5      	adds	r5, r0, r3
 8000312:	006c      	lsls	r4, r5, #1
 8000314:	1915      	adds	r5, r2, r4
 8000316:	88ad      	ldrh	r5, [r5, #4]
 8000318:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG16InstanceMap[index].Max);
 800031a:	5b14      	ldrh	r4, [r2, r4]
 800031c:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG16InstanceMap[index].Min);
 800031e:	4403      	add	r3, r0
 8000320:	0058      	lsls	r0, r3, #1
 8000322:	4402      	add	r2, r0
 8000324:	8853      	ldrh	r3, [r2, #2]
 8000326:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000328:	2000      	movs	r0, #0
			break;
 800032a:	e7e9      	b.n	8000300 <sregReadParam+0x38>
			sregParam->Data  = (uint32_t)SREG32Context[index];
 800032c:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <sregReadParam+0xa0>)
 800032e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000332:	600a      	str	r2, [r1, #0]
			sregParam->Init  = (uint32_t)(SREG32InstanceMap[index].Init);
 8000334:	4a0d      	ldr	r2, [pc, #52]	; (800036c <sregReadParam+0xa4>)
 8000336:	0058      	lsls	r0, r3, #1
 8000338:	18c5      	adds	r5, r0, r3
 800033a:	00ac      	lsls	r4, r5, #2
 800033c:	1915      	adds	r5, r2, r4
 800033e:	68ad      	ldr	r5, [r5, #8]
 8000340:	60cd      	str	r5, [r1, #12]
			sregParam->Max   = (uint32_t)(SREG32InstanceMap[index].Max);
 8000342:	5914      	ldr	r4, [r2, r4]
 8000344:	604c      	str	r4, [r1, #4]
			sregParam->Min   = (uint32_t)(SREG32InstanceMap[index].Min);
 8000346:	4403      	add	r3, r0
 8000348:	0098      	lsls	r0, r3, #2
 800034a:	4402      	add	r2, r0
 800034c:	6853      	ldr	r3, [r2, #4]
 800034e:	608b      	str	r3, [r1, #8]
	eError success = RET_OK;
 8000350:	2000      	movs	r0, #0
			break;
 8000352:	e7d5      	b.n	8000300 <sregReadParam+0x38>
 8000354:	0800160c 	.word	0x0800160c
 8000358:	20000070 	.word	0x20000070
 800035c:	080015f4 	.word	0x080015f4
 8000360:	20000080 	.word	0x20000080
 8000364:	080015dc 	.word	0x080015dc
 8000368:	20000078 	.word	0x20000078
 800036c:	080015dc 	.word	0x080015dc

08000370 <initSregAll>:
{
 8000370:	b510      	push	{r4, lr}
 8000372:	b084      	sub	sp, #16
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 8000374:	2400      	movs	r4, #0
 8000376:	e009      	b.n	800038c <initSregAll+0x1c>
		sregReadParam(sreg, &sregParam);
 8000378:	4669      	mov	r1, sp
 800037a:	4620      	mov	r0, r4
 800037c:	f7ff ffa4 	bl	80002c8 <sregReadParam>
		sregWrite(sreg, sregParam.Init);
 8000380:	9903      	ldr	r1, [sp, #12]
 8000382:	4620      	mov	r0, r4
 8000384:	f7ff ff7c 	bl	8000280 <sregWrite>
    for ( sreg = 0; sreg < NUM_OF_SREGS; sreg++ )
 8000388:	3401      	adds	r4, #1
 800038a:	b2e4      	uxtb	r4, r4
 800038c:	2c08      	cmp	r4, #8
 800038e:	d9f3      	bls.n	8000378 <initSregAll+0x8>
}
 8000390:	b004      	add	sp, #16
 8000392:	bd10      	pop	{r4, pc}

08000394 <readSregTableStd>:
{
 8000394:	b500      	push	{lr}
 8000396:	b085      	sub	sp, #20
	success = sregReadParam(sreg, &sregParam);
 8000398:	4669      	mov	r1, sp
 800039a:	f7ff ff95 	bl	80002c8 <sregReadParam>
	if ( success == RET_OK )
 800039e:	b120      	cbz	r0, 80003aa <readSregTableStd+0x16>
    uint32_t ret_data = 0xffffffff;
 80003a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80003a4:	b005      	add	sp, #20
 80003a6:	f85d fb04 	ldr.w	pc, [sp], #4
		ret_data = sregParam.Data;
 80003aa:	9800      	ldr	r0, [sp, #0]
 80003ac:	e7fa      	b.n	80003a4 <readSregTableStd+0x10>

080003ae <readSreg>:
{
 80003ae:	b508      	push	{r3, lr}
	return readSregTableStd(sreg);
 80003b0:	f7ff fff0 	bl	8000394 <readSregTableStd>
}
 80003b4:	bd08      	pop	{r3, pc}

080003b6 <writeSregTableStd>:
{
 80003b6:	b570      	push	{r4, r5, r6, lr}
 80003b8:	b084      	sub	sp, #16
 80003ba:	4606      	mov	r6, r0
 80003bc:	460d      	mov	r5, r1
	result = sregReadParam(sreg, &sregParam);
 80003be:	4669      	mov	r1, sp
 80003c0:	f7ff ff82 	bl	80002c8 <sregReadParam>
 80003c4:	4604      	mov	r4, r0
	if ( value > sregParam.Max )
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	42a9      	cmp	r1, r5
 80003ca:	d303      	bcc.n	80003d4 <writeSregTableStd+0x1e>
	else if ( value < sregParam.Min )
 80003cc:	9902      	ldr	r1, [sp, #8]
 80003ce:	428d      	cmp	r5, r1
 80003d0:	d300      	bcc.n	80003d4 <writeSregTableStd+0x1e>
 80003d2:	4629      	mov	r1, r5
	if ( result == RET_OK )
 80003d4:	b114      	cbz	r4, 80003dc <writeSregTableStd+0x26>
}
 80003d6:	4620      	mov	r0, r4
 80003d8:	b004      	add	sp, #16
 80003da:	bd70      	pop	{r4, r5, r6, pc}
		sregWrite(sreg, value);
 80003dc:	4630      	mov	r0, r6
 80003de:	f7ff ff4f 	bl	8000280 <sregWrite>
 80003e2:	e7f8      	b.n	80003d6 <writeSregTableStd+0x20>

080003e4 <writeSreg>:
{
 80003e4:	b508      	push	{r3, lr}
	return writeSregTableStd( sreg, value );
 80003e6:	f7ff ffe6 	bl	80003b6 <writeSregTableStd>
}
 80003ea:	bd08      	pop	{r3, pc}

080003ec <SchedulerResetProcessTable>:
 ****************************************************************************/
void SchedulerResetProcessTable(void)
{
	uint8_t i;

	ptrTask	= 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	4a16      	ldr	r2, [pc, #88]	; (8000448 <SchedulerResetProcessTable+0x5c>)
 80003f0:	7013      	strb	r3, [r2, #0]

 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d826      	bhi.n	8000444 <SchedulerResetProcessTable+0x58>
{
 80003f6:	b430      	push	{r4, r5}
 	{
		schedulerProcess[i].uiTimeProcessCounter	= 0;
 80003f8:	4914      	ldr	r1, [pc, #80]	; (800044c <SchedulerResetProcessTable+0x60>)
 80003fa:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 80003fe:	f36f 020d 	bfc	r2, #0, #14
 8000402:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		schedulerProcess[i].bEnabledSystemTask	= SchedulerInstanceMap[i].initState;
 8000406:	005a      	lsls	r2, r3, #1
 8000408:	18d0      	adds	r0, r2, r3
 800040a:	0084      	lsls	r4, r0, #2
 800040c:	4810      	ldr	r0, [pc, #64]	; (8000450 <SchedulerResetProcessTable+0x64>)
 800040e:	4420      	add	r0, r4
 8000410:	7a84      	ldrb	r4, [r0, #10]
 8000412:	4411      	add	r1, r2
 8000414:	7848      	ldrb	r0, [r1, #1]
 8000416:	f364 1086 	bfi	r0, r4, #6, #1
		schedulerProcess[i].bEnabledUrgentSystemTask = FALSE;
 800041a:	f36f 10c7 	bfc	r0, #7, #1
 800041e:	7048      	strb	r0, [r1, #1]

		schedulerContext[i].maxDelayProcessCtn = 0;
 8000420:	490c      	ldr	r1, [pc, #48]	; (8000454 <SchedulerResetProcessTable+0x68>)
 8000422:	18d0      	adds	r0, r2, r3
 8000424:	00c5      	lsls	r5, r0, #3
 8000426:	194c      	adds	r4, r1, r5
 8000428:	2000      	movs	r0, #0
 800042a:	81a0      	strh	r0, [r4, #12]
		schedulerContext[i].maximumTaskTime_us = 0;
 800042c:	60a0      	str	r0, [r4, #8]
		schedulerContext[i].averageTaskTime_us = 0;
 800042e:	5148      	str	r0, [r1, r5]
		schedulerContext[i].currentTaskTime_us = 0;
 8000430:	6060      	str	r0, [r4, #4]
		schedulerContext[i].cntTaskTime = 0;
 8000432:	6120      	str	r0, [r4, #16]
		schedulerContext[i].userEnabled = TRUE;
 8000434:	2201      	movs	r2, #1
 8000436:	7562      	strb	r2, [r4, #21]
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 8000438:	4413      	add	r3, r2
 800043a:	b2db      	uxtb	r3, r3
 800043c:	2b01      	cmp	r3, #1
 800043e:	d9db      	bls.n	80003f8 <SchedulerResetProcessTable+0xc>
 	}
}
 8000440:	bc30      	pop	{r4, r5}
 8000442:	4770      	bx	lr
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	200000b4 	.word	0x200000b4
 800044c:	200000b8 	.word	0x200000b8
 8000450:	08001630 	.word	0x08001630
 8000454:	20000084 	.word	0x20000084

08000458 <SchedulerInit>:
{
 8000458:	b510      	push	{r4, lr}
	SchedulerResetProcessTable();
 800045a:	f7ff ffc7 	bl	80003ec <SchedulerResetProcessTable>
 	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 800045e:	2400      	movs	r4, #0
 8000460:	e001      	b.n	8000466 <SchedulerInit+0xe>
 8000462:	3401      	adds	r4, #1
 8000464:	b2e4      	uxtb	r4, r4
 8000466:	2c01      	cmp	r4, #1
 8000468:	d808      	bhi.n	800047c <SchedulerInit+0x24>
		if(SchedulerInstanceMap[i].InitProcess != NULL)
 800046a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800046e:	0093      	lsls	r3, r2, #2
 8000470:	4a08      	ldr	r2, [pc, #32]	; (8000494 <SchedulerInit+0x3c>)
 8000472:	58d3      	ldr	r3, [r2, r3]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d0f4      	beq.n	8000462 <SchedulerInit+0xa>
			(*(SchedulerInstanceMap[i].InitProcess))();
 8000478:	4798      	blx	r3
 800047a:	e7f2      	b.n	8000462 <SchedulerInit+0xa>
    systemGetCLkFreq(&ticks_per_us);
 800047c:	4c06      	ldr	r4, [pc, #24]	; (8000498 <SchedulerInit+0x40>)
 800047e:	4620      	mov	r0, r4
 8000480:	f000 fab2 	bl	80009e8 <systemGetCLkFreq>
    ticks_per_us /= 1000000;
 8000484:	6823      	ldr	r3, [r4, #0]
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <SchedulerInit+0x44>)
 8000488:	fba2 2303 	umull	r2, r3, r2, r3
 800048c:	0c9b      	lsrs	r3, r3, #18
 800048e:	6023      	str	r3, [r4, #0]
 8000490:	bd10      	pop	{r4, pc}
 8000492:	bf00      	nop
 8000494:	08001630 	.word	0x08001630
 8000498:	20000080 	.word	0x20000080
 800049c:	431bde83 	.word	0x431bde83

080004a0 <SchedulerProcessesAutoEnable>:
 ****************************************************************************/
void SchedulerProcessesAutoEnable(void)
{
	uint8_t i;

	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80004a0:	2300      	movs	r3, #0
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d825      	bhi.n	80004f2 <SchedulerProcessesAutoEnable+0x52>
{
 80004a6:	b430      	push	{r4, r5}
 80004a8:	e003      	b.n	80004b2 <SchedulerProcessesAutoEnable+0x12>
	for (i = 0; i < NUM_OF_SCHED_TASKS; i++)
 80004aa:	3301      	adds	r3, #1
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d81d      	bhi.n	80004ee <SchedulerProcessesAutoEnable+0x4e>
	{
		schedulerProcess[i].uiTimeProcessCounter++;
 80004b2:	4810      	ldr	r0, [pc, #64]	; (80004f4 <SchedulerProcessesAutoEnable+0x54>)
 80004b4:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80004b8:	f3c2 010d 	ubfx	r1, r2, #0, #14
 80004bc:	3101      	adds	r1, #1
 80004be:	f361 020d 	bfi	r2, r1, #0, #14
 80004c2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]

		// If currentTaskTime it's enable, update 1000uS=1mS
		if (schedulerContext[i].taskActive == TRUE && schedulerContext[i].userEnabled == TRUE )
 80004c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80004ca:	00d1      	lsls	r1, r2, #3
 80004cc:	4a0a      	ldr	r2, [pc, #40]	; (80004f8 <SchedulerProcessesAutoEnable+0x58>)
 80004ce:	440a      	add	r2, r1
 80004d0:	7d12      	ldrb	r2, [r2, #20]
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d0e9      	beq.n	80004aa <SchedulerProcessesAutoEnable+0xa>
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <SchedulerProcessesAutoEnable+0x58>)
 80004d8:	440a      	add	r2, r1
 80004da:	7d52      	ldrb	r2, [r2, #21]
 80004dc:	2a00      	cmp	r2, #0
 80004de:	d0e4      	beq.n	80004aa <SchedulerProcessesAutoEnable+0xa>
		{
			schedulerContext[i].currentTaskTime_us += 1000;
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <SchedulerProcessesAutoEnable+0x58>)
 80004e2:	4401      	add	r1, r0
 80004e4:	684a      	ldr	r2, [r1, #4]
 80004e6:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80004ea:	604a      	str	r2, [r1, #4]
 80004ec:	e7dd      	b.n	80004aa <SchedulerProcessesAutoEnable+0xa>
		}
	}
}
 80004ee:	bc30      	pop	{r4, r5}
 80004f0:	4770      	bx	lr
 80004f2:	4770      	bx	lr
 80004f4:	200000b8 	.word	0x200000b8
 80004f8:	20000084 	.word	0x20000084

080004fc <SchedulerUpdateTaskTime>:
 * @brief  	Update average task time, maximum task time
 * @param   process, initTime, finalTime
 * @return  none
 ****************************************************************************/
void SchedulerUpdateTaskTime(int32_t initTimeTaskScheduler, int32_t finalTimeTaskScheduler)
{
 80004fc:	b4f0      	push	{r4, r5, r6, r7}
	uint64_t averageTaskTemp;
	schedulerContext[ptrTask].currentTaskTime_us += ((initTimeTaskScheduler - finalTimeTaskScheduler)/(int32_t)(ticks_per_us));
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <SchedulerUpdateTaskTime+0x48>)
 8000500:	781a      	ldrb	r2, [r3, #0]
 8000502:	1a41      	subs	r1, r0, r1
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <SchedulerUpdateTaskTime+0x4c>)
 8000506:	6818      	ldr	r0, [r3, #0]
 8000508:	fb91 f1f0 	sdiv	r1, r1, r0
 800050c:	4e0f      	ldr	r6, [pc, #60]	; (800054c <SchedulerUpdateTaskTime+0x50>)
 800050e:	0053      	lsls	r3, r2, #1
 8000510:	4413      	add	r3, r2
 8000512:	00dd      	lsls	r5, r3, #3
 8000514:	1974      	adds	r4, r6, r5
 8000516:	6863      	ldr	r3, [r4, #4]
 8000518:	4419      	add	r1, r3
 800051a:	6061      	str	r1, [r4, #4]
	schedulerContext[ptrTask].cntTaskTime %= MAX_TASK_TIME_CNT;
 800051c:	6923      	ldr	r3, [r4, #16]
 800051e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000522:	bf28      	it	cs
 8000524:	3301      	addcs	r3, #1
	schedulerContext[ptrTask].cntTaskTime++;
 8000526:	1c58      	adds	r0, r3, #1
 8000528:	6120      	str	r0, [r4, #16]

	/* Calculate the average task time */
	averageTaskTemp = (uint64_t)(schedulerContext[ptrTask].averageTaskTime_us*(schedulerContext[ptrTask].cntTaskTime-1));
 800052a:	5977      	ldr	r7, [r6, r5]
	schedulerContext[ptrTask].averageTaskTime_us = (uint32_t)(averageTaskTemp + schedulerContext[ptrTask].currentTaskTime_us) / schedulerContext[ptrTask].cntTaskTime;
 800052c:	fb07 1303 	mla	r3, r7, r3, r1
 8000530:	fbb3 f3f0 	udiv	r3, r3, r0
 8000534:	5173      	str	r3, [r6, r5]

    /* If current Task Time is higher than maximum, update maximum task time */
    if ( schedulerContext[ptrTask].currentTaskTime_us > schedulerContext[ptrTask].maximumTaskTime_us )
 8000536:	68a3      	ldr	r3, [r4, #8]
 8000538:	4299      	cmp	r1, r3
 800053a:	d900      	bls.n	800053e <SchedulerUpdateTaskTime+0x42>
    {
    	schedulerContext[ptrTask].maximumTaskTime_us = schedulerContext[ptrTask].currentTaskTime_us;
 800053c:	60a1      	str	r1, [r4, #8]
    }

}
 800053e:	bcf0      	pop	{r4, r5, r6, r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	200000b4 	.word	0x200000b4
 8000548:	20000080 	.word	0x20000080
 800054c:	20000084 	.word	0x20000084

08000550 <SchedulerExecuteSystemProcess>:
{
 8000550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	schedulerContext[ptrTask].currentTaskTime_us = 0;
 8000554:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80005b0 <SchedulerExecuteSystemProcess+0x60>
 8000558:	f898 1000 	ldrb.w	r1, [r8]
 800055c:	4c11      	ldr	r4, [pc, #68]	; (80005a4 <SchedulerExecuteSystemProcess+0x54>)
 800055e:	004b      	lsls	r3, r1, #1
 8000560:	1858      	adds	r0, r3, r1
 8000562:	00c2      	lsls	r2, r0, #3
 8000564:	4422      	add	r2, r4
 8000566:	2700      	movs	r7, #0
 8000568:	6057      	str	r7, [r2, #4]
	initTimeTaskScheduler =  SYSTEM_TICK;
 800056a:	4e0f      	ldr	r6, [pc, #60]	; (80005a8 <SchedulerExecuteSystemProcess+0x58>)
 800056c:	68b5      	ldr	r5, [r6, #8]
	schedulerContext[ptrTask].taskActive = TRUE;
 800056e:	2001      	movs	r0, #1
 8000570:	7510      	strb	r0, [r2, #20]
    (*(SchedulerInstanceMap[ptrTask].CallProcess))();
 8000572:	440b      	add	r3, r1
 8000574:	009a      	lsls	r2, r3, #2
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <SchedulerExecuteSystemProcess+0x5c>)
 8000578:	4413      	add	r3, r2
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4798      	blx	r3
	schedulerContext[ptrTask].taskActive = FALSE;
 800057e:	f898 0000 	ldrb.w	r0, [r8]
 8000582:	0043      	lsls	r3, r0, #1
 8000584:	1819      	adds	r1, r3, r0
 8000586:	00ca      	lsls	r2, r1, #3
 8000588:	4422      	add	r2, r4
 800058a:	7517      	strb	r7, [r2, #20]
    finalTimeTaskScheduler = SYSTEM_TICK;
 800058c:	68b1      	ldr	r1, [r6, #8]
    if ( schedulerContext[ptrTask].userEnabled == TRUE )
 800058e:	4403      	add	r3, r0
 8000590:	00da      	lsls	r2, r3, #3
 8000592:	4414      	add	r4, r2
 8000594:	7d63      	ldrb	r3, [r4, #21]
 8000596:	b90b      	cbnz	r3, 800059c <SchedulerExecuteSystemProcess+0x4c>
 8000598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	SchedulerUpdateTaskTime(initTimeTaskScheduler, finalTimeTaskScheduler);
 800059c:	4628      	mov	r0, r5
 800059e:	f7ff ffad 	bl	80004fc <SchedulerUpdateTaskTime>
}
 80005a2:	e7f9      	b.n	8000598 <SchedulerExecuteSystemProcess+0x48>
 80005a4:	20000084 	.word	0x20000084
 80005a8:	e000e010 	.word	0xe000e010
 80005ac:	08001630 	.word	0x08001630
 80005b0:	200000b4 	.word	0x200000b4

080005b4 <SchedulerNextSystemProcess>:
{
 80005b4:	b570      	push	{r4, r5, r6, lr}
    uint8_t i			= 0;
 80005b6:	2400      	movs	r4, #0
    bool taskExecuted	= FALSE;
 80005b8:	4620      	mov	r0, r4
 80005ba:	e027      	b.n	800060c <SchedulerNextSystemProcess+0x58>
			if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE )
 80005bc:	2a00      	cmp	r2, #0
 80005be:	d148      	bne.n	8000652 <SchedulerNextSystemProcess+0x9e>
				schedulerProcess[ptrTask].uiTimeProcessCounter = 0;
 80005c0:	4a28      	ldr	r2, [pc, #160]	; (8000664 <SchedulerNextSystemProcess+0xb0>)
 80005c2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005c6:	f36f 010d 	bfc	r1, #0, #14
 80005ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (schedulerContext[ptrTask].maxDelayProcessCtn < (schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess))
 80005ce:	005a      	lsls	r2, r3, #1
 80005d0:	18d1      	adds	r1, r2, r3
 80005d2:	00c8      	lsls	r0, r1, #3
 80005d4:	4924      	ldr	r1, [pc, #144]	; (8000668 <SchedulerNextSystemProcess+0xb4>)
 80005d6:	4401      	add	r1, r0
 80005d8:	898d      	ldrh	r5, [r1, #12]
 80005da:	4922      	ldr	r1, [pc, #136]	; (8000664 <SchedulerNextSystemProcess+0xb0>)
 80005dc:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80005e0:	f3c1 010d 	ubfx	r1, r1, #0, #14
 80005e4:	441a      	add	r2, r3
 80005e6:	0090      	lsls	r0, r2, #2
 80005e8:	4a20      	ldr	r2, [pc, #128]	; (800066c <SchedulerNextSystemProcess+0xb8>)
 80005ea:	4402      	add	r2, r0
 80005ec:	8912      	ldrh	r2, [r2, #8]
 80005ee:	1a88      	subs	r0, r1, r2
 80005f0:	4285      	cmp	r5, r0
 80005f2:	da05      	bge.n	8000600 <SchedulerNextSystemProcess+0x4c>
				schedulerContext[ptrTask].maxDelayProcessCtn = schedulerProcess[ptrTask].uiTimeProcessCounter - SchedulerInstanceMap[ptrTask].uiTimeProcess;
 80005f4:	005a      	lsls	r2, r3, #1
 80005f6:	4413      	add	r3, r2
 80005f8:	00da      	lsls	r2, r3, #3
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <SchedulerNextSystemProcess+0xb4>)
 80005fc:	4413      	add	r3, r2
 80005fe:	8198      	strh	r0, [r3, #12]
			SchedulerExecuteSystemProcess();
 8000600:	f7ff ffa6 	bl	8000550 <SchedulerExecuteSystemProcess>
			taskExecuted = TRUE;
 8000604:	2001      	movs	r0, #1
	while ( ( taskExecuted == FALSE ) && ( i <= NUM_OF_SCHED_TASKS ) );
 8000606:	bb60      	cbnz	r0, 8000662 <SchedulerNextSystemProcess+0xae>
 8000608:	2c02      	cmp	r4, #2
 800060a:	d82a      	bhi.n	8000662 <SchedulerNextSystemProcess+0xae>
        i++;
 800060c:	3401      	adds	r4, #1
 800060e:	b2e4      	uxtb	r4, r4
        ptrTask++;
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <SchedulerNextSystemProcess+0xbc>)
 8000612:	7813      	ldrb	r3, [r2, #0]
 8000614:	3301      	adds	r3, #1
		ptrTask %= NUM_OF_SCHED_TASKS;
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	7013      	strb	r3, [r2, #0]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 800061c:	4a11      	ldr	r2, [pc, #68]	; (8000664 <SchedulerNextSystemProcess+0xb0>)
 800061e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000622:	7852      	ldrb	r2, [r2, #1]
 8000624:	09d2      	lsrs	r2, r2, #7
 8000626:	d1c9      	bne.n	80005bc <SchedulerNextSystemProcess+0x8>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000628:	490e      	ldr	r1, [pc, #56]	; (8000664 <SchedulerNextSystemProcess+0xb0>)
 800062a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800062e:	7849      	ldrb	r1, [r1, #1]
		if ( schedulerProcess[ptrTask].bEnabledUrgentSystemTask == TRUE ||
 8000630:	f011 0f40 	tst.w	r1, #64	; 0x40
 8000634:	d0e7      	beq.n	8000606 <SchedulerNextSystemProcess+0x52>
			 ( schedulerProcess[ptrTask].bEnabledSystemTask == TRUE  && schedulerProcess[ptrTask].uiTimeProcessCounter >= SchedulerInstanceMap[ptrTask].uiTimeProcess ) )
 8000636:	490b      	ldr	r1, [pc, #44]	; (8000664 <SchedulerNextSystemProcess+0xb0>)
 8000638:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 800063c:	f3c5 050d 	ubfx	r5, r5, #0, #14
 8000640:	0059      	lsls	r1, r3, #1
 8000642:	4419      	add	r1, r3
 8000644:	008e      	lsls	r6, r1, #2
 8000646:	4909      	ldr	r1, [pc, #36]	; (800066c <SchedulerNextSystemProcess+0xb8>)
 8000648:	4431      	add	r1, r6
 800064a:	8909      	ldrh	r1, [r1, #8]
 800064c:	428d      	cmp	r5, r1
 800064e:	dbda      	blt.n	8000606 <SchedulerNextSystemProcess+0x52>
 8000650:	e7b4      	b.n	80005bc <SchedulerNextSystemProcess+0x8>
				schedulerProcess[ptrTask].bEnabledUrgentSystemTask = FALSE;
 8000652:	4a04      	ldr	r2, [pc, #16]	; (8000664 <SchedulerNextSystemProcess+0xb0>)
 8000654:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000658:	7851      	ldrb	r1, [r2, #1]
 800065a:	f36f 11c7 	bfc	r1, #7, #1
 800065e:	7051      	strb	r1, [r2, #1]
 8000660:	e7b5      	b.n	80005ce <SchedulerNextSystemProcess+0x1a>
}
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	200000b8 	.word	0x200000b8
 8000668:	20000084 	.word	0x20000084
 800066c:	08001630 	.word	0x08001630
 8000670:	200000b4 	.word	0x200000b4

08000674 <diffTime>:
 **********************************************************************/
static uint32_t diffTime( uint32_t timeA, uint32_t timeB )
{
    uint32_t retVal = 0;

    if( timeA >= timeB )
 8000674:	4288      	cmp	r0, r1
 8000676:	d202      	bcs.n	800067e <diffTime+0xa>
    {
            retVal = timeA - timeB;
    }
    else
    {
            retVal = UINT32_MAX - (timeB - timeA);
 8000678:	1a09      	subs	r1, r1, r0
 800067a:	43c8      	mvns	r0, r1
    }

    return retVal;
}
 800067c:	4770      	bx	lr
            retVal = timeA - timeB;
 800067e:	1a40      	subs	r0, r0, r1
 8000680:	4770      	bx	lr
	...

08000684 <getTime>:
    uint32_t retVal = 0;

    retVal = timeMs;

    return retVal;
}
 8000684:	4b01      	ldr	r3, [pc, #4]	; (800068c <getTime+0x8>)
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000068 	.word	0x20000068

08000690 <SwTimerInit>:
eError SwTimerInit( void )
{
    eError result = RET_OK;
    uint8_t i;

    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 8000690:	2300      	movs	r3, #0
 8000692:	b10b      	cbz	r3, 8000698 <SwTimerInit+0x8>
    {
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
    }

    return result;
}
 8000694:	2000      	movs	r0, #0
 8000696:	4770      	bx	lr
        SwTimersArray[i].state = SW_TIMER_STATE_STOPPED;
 8000698:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <SwTimerInit+0x18>)
 800069a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800069e:	2100      	movs	r1, #0
 80006a0:	7211      	strb	r1, [r2, #8]
    for( i = 0 ; i < NUM_OF_SW_TIMER ; i++ )
 80006a2:	3301      	adds	r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	e7f4      	b.n	8000692 <SwTimerInit+0x2>
 80006a8:	20000058 	.word	0x20000058

080006ac <SwTimerResetTimer>:
/**********************************************************************
 * @brief  Reset and start the timer
 * @param  pTimer:	Pointer to timer to be restart.
 **********************************************************************/
eError SwTimerResetTimer( tSwTimerIndex SwTimerIndex )
{
 80006ac:	b510      	push	{r4, lr}
 80006ae:	4604      	mov	r4, r0
    eError result = RET_OK;

    // Reset the timer.
    SwTimersArray[SwTimerIndex].startMs = getTime();
 80006b0:	f7ff ffe8 	bl	8000684 <getTime>
 80006b4:	0124      	lsls	r4, r4, #4
 80006b6:	4b02      	ldr	r3, [pc, #8]	; (80006c0 <SwTimerResetTimer+0x14>)
 80006b8:	5118      	str	r0, [r3, r4]

    return result;
}
 80006ba:	2000      	movs	r0, #0
 80006bc:	bd10      	pop	{r4, pc}
 80006be:	bf00      	nop
 80006c0:	20000058 	.word	0x20000058

080006c4 <SwTimerStartTimer>:
{
 80006c4:	b510      	push	{r4, lr}
 80006c6:	4604      	mov	r4, r0
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_CANCELLED ||
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <SwTimerStartTimer+0x28>)
 80006ca:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80006ce:	7a1b      	ldrb	r3, [r3, #8]
 80006d0:	3b02      	subs	r3, #2
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d906      	bls.n	80006e6 <SwTimerStartTimer+0x22>
    SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_STARTED;
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <SwTimerStartTimer+0x28>)
 80006da:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80006de:	2301      	movs	r3, #1
 80006e0:	7203      	strb	r3, [r0, #8]
}
 80006e2:	2000      	movs	r0, #0
 80006e4:	bd10      	pop	{r4, pc}
        SwTimerResetTimer( SwTimerIndex );
 80006e6:	f7ff ffe1 	bl	80006ac <SwTimerResetTimer>
 80006ea:	e7f5      	b.n	80006d8 <SwTimerStartTimer+0x14>
 80006ec:	20000058 	.word	0x20000058

080006f0 <SwTimerUpdateTimer>:
 * @brief  Updates all timers every millisecond
 * @param
 * @retval
 **********************************************************************/
eError SwTimerUpdateTimer( tSwTimerIndex SwTimerIndex )
{
 80006f0:	b538      	push	{r3, r4, r5, lr}
 80006f2:	4604      	mov	r4, r0
    eError result = RET_OK;
    tBool restartTimer = FALSE;

    // If timer is started, check timeout.
    if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STARTED )
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <SwTimerUpdateTimer+0x60>)
 80006f6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80006fa:	7a1b      	ldrb	r3, [r3, #8]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d00a      	beq.n	8000716 <SwTimerUpdateTimer+0x26>
            }
        }
    }
    // If the timer is stopped, simply shifts the start time,
    // this keeps the elapsed time.
    else if( SwTimersArray[SwTimerIndex].state == SW_TIMER_STATE_STOPPED )
 8000700:	b9fb      	cbnz	r3, 8000742 <SwTimerUpdateTimer+0x52>
    {
        SwTimersArray[SwTimerIndex].startMs++;
 8000702:	4913      	ldr	r1, [pc, #76]	; (8000750 <SwTimerUpdateTimer+0x60>)
 8000704:	0102      	lsls	r2, r0, #4
 8000706:	588b      	ldr	r3, [r1, r2]
 8000708:	3301      	adds	r3, #1
 800070a:	508b      	str	r3, [r1, r2]
    tBool restartTimer = FALSE;
 800070c:	2000      	movs	r0, #0
    }

    if ( restartTimer == TRUE )
 800070e:	2801      	cmp	r0, #1
 8000710:	d019      	beq.n	8000746 <SwTimerUpdateTimer+0x56>
    {
        SwTimerStartTimer(SwTimerIndex);
    }

    return result;
}
 8000712:	2000      	movs	r0, #0
 8000714:	bd38      	pop	{r3, r4, r5, pc}
        if( diffTime( timeMs, SwTimersArray[SwTimerIndex].startMs ) >= SwTimersArray[SwTimerIndex].timeoutMs )
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <SwTimerUpdateTimer+0x60>)
 8000718:	0103      	lsls	r3, r0, #4
 800071a:	18d5      	adds	r5, r2, r3
 800071c:	58d1      	ldr	r1, [r2, r3]
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <SwTimerUpdateTimer+0x64>)
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	f7ff ffa7 	bl	8000674 <diffTime>
 8000726:	686b      	ldr	r3, [r5, #4]
 8000728:	4298      	cmp	r0, r3
 800072a:	d306      	bcc.n	800073a <SwTimerUpdateTimer+0x4a>
            SwTimersArray[SwTimerIndex].state = SW_TIMER_STATE_EXPIRED;
 800072c:	2203      	movs	r2, #3
 800072e:	722a      	strb	r2, [r5, #8]
            if( NULL != SwTimersArray[SwTimerIndex].pFuncCB )
 8000730:	68eb      	ldr	r3, [r5, #12]
 8000732:	b123      	cbz	r3, 800073e <SwTimerUpdateTimer+0x4e>
                    restartTimer = SwTimersArray[SwTimerIndex].pFuncCB(SwTimerIndex);
 8000734:	4620      	mov	r0, r4
 8000736:	4798      	blx	r3
 8000738:	e7e9      	b.n	800070e <SwTimerUpdateTimer+0x1e>
    tBool restartTimer = FALSE;
 800073a:	2000      	movs	r0, #0
 800073c:	e7e7      	b.n	800070e <SwTimerUpdateTimer+0x1e>
 800073e:	2000      	movs	r0, #0
 8000740:	e7e5      	b.n	800070e <SwTimerUpdateTimer+0x1e>
 8000742:	2000      	movs	r0, #0
 8000744:	e7e3      	b.n	800070e <SwTimerUpdateTimer+0x1e>
        SwTimerStartTimer(SwTimerIndex);
 8000746:	4620      	mov	r0, r4
 8000748:	f7ff ffbc 	bl	80006c4 <SwTimerStartTimer>
 800074c:	e7e1      	b.n	8000712 <SwTimerUpdateTimer+0x22>
 800074e:	bf00      	nop
 8000750:	20000058 	.word	0x20000058
 8000754:	20000068 	.word	0x20000068

08000758 <SwTimerIrq>:
 * @brief  Interrupt request rutine for periodic tick
 * @param  None.
 * @retval None.
 **********************************************************************/
void SwTimerIrq( void )
{
 8000758:	b510      	push	{r4, lr}
    uint8_t SwTimerIndex = 0;

    // Increment time global variable.
    timeMs = timeMs + TIMER_PERIOD; //timeMs++;
 800075a:	4a06      	ldr	r2, [pc, #24]	; (8000774 <SwTimerIrq+0x1c>)
 800075c:	6813      	ldr	r3, [r2, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	6013      	str	r3, [r2, #0]

    // Update timers
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 8000762:	2400      	movs	r4, #0
 8000764:	b104      	cbz	r4, 8000768 <SwTimerIrq+0x10>
    {
        SwTimerUpdateTimer( SwTimerIndex );
    }
}
 8000766:	bd10      	pop	{r4, pc}
        SwTimerUpdateTimer( SwTimerIndex );
 8000768:	4620      	mov	r0, r4
 800076a:	f7ff ffc1 	bl	80006f0 <SwTimerUpdateTimer>
    for( SwTimerIndex = 0 ; SwTimerIndex < NUM_OF_SW_TIMER ; SwTimerIndex++ )
 800076e:	3401      	adds	r4, #1
 8000770:	b2e4      	uxtb	r4, r4
 8000772:	e7f7      	b.n	8000764 <SwTimerIrq+0xc>
 8000774:	20000068 	.word	0x20000068

08000778 <interruptsInit>:
 * @brief  Init interrupts driver
 * 		   Configure all IRQ Channels declared on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsInit( void )
{
 8000778:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 800077a:	2400      	movs	r4, #0
 800077c:	e001      	b.n	8000782 <interruptsInit+0xa>
 800077e:	3401      	adds	r4, #1
 8000780:	b2e4      	uxtb	r4, r4
 8000782:	2c0d      	cmp	r4, #13
 8000784:	d80c      	bhi.n	80007a0 <interruptsInit+0x28>
	{
		if (IS_SETTABLE_PRIORITY_IRQ(interruptsInstanceMap[i].IRQn))
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <interruptsInit+0x2c>)
 8000788:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 800078c:	f110 0f05 	cmn.w	r0, #5
 8000790:	dbf5      	blt.n	800077e <interruptsInit+0x6>
		{
			HAL_NVIC_SetPriority(interruptsInstanceMap[i].IRQn, (uint32_t)interruptsInstanceMap[i].PreemptPriority, (uint32_t)interruptsInstanceMap[i].SubPriority);
 8000792:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000796:	789a      	ldrb	r2, [r3, #2]
 8000798:	7859      	ldrb	r1, [r3, #1]
 800079a:	f000 f99f 	bl	8000adc <HAL_NVIC_SetPriority>
 800079e:	e7ee      	b.n	800077e <interruptsInit+0x6>
		}
	}
	return result;
}
 80007a0:	2000      	movs	r0, #0
 80007a2:	bd10      	pop	{r4, pc}
 80007a4:	20000000 	.word	0x20000000

080007a8 <interruptsStart>:
 * @brief  Start interrupts driver
 * 		   Enable all IRQ Channels configured as ENABLE on intPriorityMap list
 * @return eError :
 **********************************************************************/
eError interruptsStart( void )
{
 80007a8:	b510      	push	{r4, lr}
	eError result = RET_OK;
	uint8_t i;

	for(i = 0; i < MAX_IRQ; i++)
 80007aa:	2400      	movs	r4, #0
 80007ac:	e001      	b.n	80007b2 <interruptsStart+0xa>
 80007ae:	3401      	adds	r4, #1
 80007b0:	b2e4      	uxtb	r4, r4
 80007b2:	2c0d      	cmp	r4, #13
 80007b4:	d80d      	bhi.n	80007d2 <interruptsStart+0x2a>
	{
		if (interruptsInstanceMap[i].State == IRQ_ENABLE)
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <interruptsStart+0x30>)
 80007b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80007bc:	78db      	ldrb	r3, [r3, #3]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d1f5      	bne.n	80007ae <interruptsStart+0x6>
		{
			if (IS_NVIC_DEVICE_IRQ(interruptsInstanceMap[i].IRQn))
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <interruptsStart+0x30>)
 80007c4:	f913 0024 	ldrsb.w	r0, [r3, r4, lsl #2]
 80007c8:	2800      	cmp	r0, #0
 80007ca:	dbf0      	blt.n	80007ae <interruptsStart+0x6>
			{
				HAL_NVIC_EnableIRQ(interruptsInstanceMap[i].IRQn);
 80007cc:	f000 f9b8 	bl	8000b40 <HAL_NVIC_EnableIRQ>
 80007d0:	e7ed      	b.n	80007ae <interruptsStart+0x6>

		}
	}

	return result;
}
 80007d2:	2000      	movs	r0, #0
 80007d4:	bd10      	pop	{r4, pc}
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000

080007dc <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 80007dc:	4770      	bx	lr

080007de <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007de:	e7fe      	b.n	80007de <HardFault_Handler>

080007e0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007e0:	e7fe      	b.n	80007e0 <MemManage_Handler>

080007e2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007e2:	e7fe      	b.n	80007e2 <BusFault_Handler>

080007e4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler>

080007e6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007e6:	4770      	bx	lr

080007e8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007e8:	4770      	bx	lr

080007ea <SysTick_Handler>:
/**
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void) {
 80007ea:	b508      	push	{r3, lr}

	HAL_SYSTICK_IRQHandler();
 80007ec:	f000 f9da 	bl	8000ba4 <HAL_SYSTICK_IRQHandler>
 80007f0:	bd08      	pop	{r3, pc}

080007f2 <RTC_WKUP_IRQHandler>:
  * @brief  This function handles RTC Auto wake-up interrupt request.
  * @param  None
  * @retval None
  */
void RTC_WKUP_IRQHandler(void)
{
 80007f2:	4770      	bx	lr

080007f4 <EXTI0_IRQHandler>:
 * @brief  This function handles external line 0 and 1 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI0_IRQHandler(void)
{
 80007f4:	4770      	bx	lr

080007f6 <EXTI1_IRQHandler>:
 * @brief  This function handles external line 0 interrupt request.
 * @param  None
 * @retval None
 */
void EXTI1_IRQHandler(void)
{
 80007f6:	4770      	bx	lr

080007f8 <EXTI9_5_IRQHandler>:
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
}

void EXTI9_5_IRQHandler(void)
{
 80007f8:	b508      	push	{r3, lr}
	/*TODO : the HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_X) could be commented for GPIO_PIN unused */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80007fa:	2020      	movs	r0, #32
 80007fc:	f000 f9d6 	bl	8000bac <HAL_GPIO_EXTI_IRQHandler>
 8000800:	bd08      	pop	{r3, pc}

08000802 <USART1_IRQHandler>:
  * @retval None
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */
void USART1_IRQHandler(void)
{
 8000802:	b508      	push	{r3, lr}
	HAL_UART1_Callback();
 8000804:	f000 f820 	bl	8000848 <HAL_UART1_Callback>
 8000808:	bd08      	pop	{r3, pc}

0800080a <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA
  *         used for USART data transmission
  */

void USART2_IRQHandler(void)
{
 800080a:	b508      	push	{r3, lr}
	HAL_UART2_Callback();
 800080c:	f000 f81d 	bl	800084a <HAL_UART2_Callback>
 8000810:	bd08      	pop	{r3, pc}

08000812 <I2C1_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C1_EV_IRQHandler(void)
{
 8000812:	b508      	push	{r3, lr}
	HAL_I2C1_Callback();
 8000814:	f000 f81a 	bl	800084c <HAL_I2C1_Callback>
 8000818:	bd08      	pop	{r3, pc}

0800081a <I2C2_EV_IRQHandler>:
  * @brief  This function handles I2C1 interrupt request.
  * @param  None
  * @retval None
  */
void I2C2_EV_IRQHandler(void)
{
 800081a:	b508      	push	{r3, lr}
	HAL_I2C2_Callback();
 800081c:	f000 f817 	bl	800084e <HAL_I2C2_Callback>
 8000820:	bd08      	pop	{r3, pc}

08000822 <SPI1_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI1_IRQHandler(void)
{
 8000822:	b508      	push	{r3, lr}
    HAL_SPI1_Callback();
 8000824:	f000 f814 	bl	8000850 <HAL_SPI1_Callback>
 8000828:	bd08      	pop	{r3, pc}

0800082a <SPI2_IRQHandler>:
  * @brief  This function handles SPI2 interrupt request.
  * @param  None
  * @retval None
  */
void SPI2_IRQHandler(void)
{
 800082a:	b508      	push	{r3, lr}
    HAL_SPI2_Callback();
 800082c:	f000 f811 	bl	8000852 <HAL_SPI2_Callback>
 8000830:	bd08      	pop	{r3, pc}

08000832 <TIM2_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8000832:	4770      	bx	lr

08000834 <TIM3_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void)
{
 8000834:	4770      	bx	lr

08000836 <HAL_SYSTICK_Callback>:
  * @brief SYSTICK callback
  * @param None
  * @retval None
  */
void HAL_SYSTICK_Callback(void)
{
 8000836:	b508      	push	{r3, lr}
	HAL_IncTick();
 8000838:	f000 f942 	bl	8000ac0 <HAL_IncTick>

	SchedulerProcessesAutoEnable();
 800083c:	f7ff fe30 	bl	80004a0 <SchedulerProcessesAutoEnable>
#ifdef SW_TIMER_AVAILABLE
	SwTimerIrq();
 8000840:	f7ff ff8a 	bl	8000758 <SwTimerIrq>
 8000844:	bd08      	pop	{r3, pc}

08000846 <HAL_GPIO_EXTI_Callback>:
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000846:	4770      	bx	lr

08000848 <HAL_UART1_Callback>:
  * @brief UART1 callback
  * @param None
  * @retval None
  */
void HAL_UART1_Callback(void)
{
 8000848:	4770      	bx	lr

0800084a <HAL_UART2_Callback>:
  * @brief UART2 callback
  * @param None
  * @retval None
  */
void HAL_UART2_Callback(void)
{
 800084a:	4770      	bx	lr

0800084c <HAL_I2C1_Callback>:
#endif
}


void HAL_I2C1_Callback(void)
{
 800084c:	4770      	bx	lr

0800084e <HAL_I2C2_Callback>:
	i2cDriverMainIRQHandler(I2C_1);
#endif
}

void HAL_I2C2_Callback(void)
{
 800084e:	4770      	bx	lr

08000850 <HAL_SPI1_Callback>:
	i2cDriverMainIRQHandler(I2C_2);
#endif
}

void HAL_SPI1_Callback(void)
{
 8000850:	4770      	bx	lr

08000852 <HAL_SPI2_Callback>:
    spiDriverMainIRQHandler(SPI_1);
#endif
}

void HAL_SPI2_Callback(void)
{
 8000852:	4770      	bx	lr

08000854 <storePowerUpReason>:
 *
 ****************************************************************************/
static void storePowerUpReason( void )
{
	/* Check if the StandBy flag is set */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000854:	4b29      	ldr	r3, [pc, #164]	; (80008fc <storePowerUpReason+0xa8>)
 8000856:	691b      	ldr	r3, [r3, #16]
 8000858:	f413 7f80 	tst.w	r3, #256	; 0x100
 800085c:	d126      	bne.n	80008ac <storePowerUpReason+0x58>

		powerUpReason = SYSTEM_RESET_POWER_UP;
	}
	else
	{
		if ( __HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET )
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <storePowerUpReason+0xac>)
 8000860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000864:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8000868:	d12f      	bne.n	80008ca <storePowerUpReason+0x76>
		{
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
		}
		else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != RESET)
 800086a:	4b25      	ldr	r3, [pc, #148]	; (8000900 <storePowerUpReason+0xac>)
 800086c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000870:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000874:	d12d      	bne.n	80008d2 <storePowerUpReason+0x7e>
		{
			powerUpReason = SYSTEM_RESET_WATCHDOG;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != RESET )
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <storePowerUpReason+0xac>)
 8000878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800087c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000880:	d12b      	bne.n	80008da <storePowerUpReason+0x86>
		{
			powerUpReason = SYSTEM_RESET_SOFTWARE;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET )
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <storePowerUpReason+0xac>)
 8000884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000888:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800088c:	d129      	bne.n	80008e2 <storePowerUpReason+0x8e>
		{
			powerUpReason = SYSTEM_RESET_POWER_UP;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET )
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <storePowerUpReason+0xac>)
 8000890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000894:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8000898:	d127      	bne.n	80008ea <storePowerUpReason+0x96>
		{
			powerUpReason = SYSTEM_BOR_RESET;
		}
		else if ( __HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != RESET )
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <storePowerUpReason+0xac>)
 800089c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db26      	blt.n	80008f2 <storePowerUpReason+0x9e>
		{
			powerUpReason = SYSTEM_LOW_POWER_RESET;
		}
		else
		{
			powerUpReason = SYSTEM_FIRST_POWER_UP;
 80008a4:	2200      	movs	r2, #0
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <storePowerUpReason+0xb0>)
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	e006      	b.n	80008ba <storePowerUpReason+0x66>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80008ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <storePowerUpReason+0xa8>)
 80008b2:	619a      	str	r2, [r3, #24]
		powerUpReason = SYSTEM_RESET_POWER_UP;
 80008b4:	2201      	movs	r2, #1
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <storePowerUpReason+0xb0>)
 80008b8:	701a      	strb	r2, [r3, #0]
		}
	}

	__HAL_RCC_CLEAR_RESET_FLAGS();
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <storePowerUpReason+0xac>)
 80008bc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80008c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80008c8:	4770      	bx	lr
			powerUpReason = SYSTEM_RESET_WINDOW_WATCHDOG;
 80008ca:	2207      	movs	r2, #7
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <storePowerUpReason+0xb0>)
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	e7f3      	b.n	80008ba <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_WATCHDOG;
 80008d2:	2202      	movs	r2, #2
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <storePowerUpReason+0xb0>)
 80008d6:	701a      	strb	r2, [r3, #0]
 80008d8:	e7ef      	b.n	80008ba <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_SOFTWARE;
 80008da:	2203      	movs	r2, #3
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <storePowerUpReason+0xb0>)
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	e7eb      	b.n	80008ba <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_RESET_POWER_UP;
 80008e2:	2201      	movs	r2, #1
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <storePowerUpReason+0xb0>)
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	e7e7      	b.n	80008ba <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_BOR_RESET;
 80008ea:	2204      	movs	r2, #4
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <storePowerUpReason+0xb0>)
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e7e3      	b.n	80008ba <storePowerUpReason+0x66>
			powerUpReason = SYSTEM_LOW_POWER_RESET;
 80008f2:	2206      	movs	r2, #6
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <storePowerUpReason+0xb0>)
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e7df      	b.n	80008ba <storePowerUpReason+0x66>
 80008fa:	bf00      	nop
 80008fc:	40007000 	.word	0x40007000
 8000900:	40021000 	.word	0x40021000
 8000904:	2000006c 	.word	0x2000006c

08000908 <watchdogInit>:
	{
		result = WWDGInit();
	}
#endif
	return result;
}
 8000908:	2000      	movs	r0, #0
 800090a:	4770      	bx	lr

0800090c <SystemClock_Config>:
 *
 * @return  None.
 *
 ****************************************************************************/
static eError SystemClock_Config(void)
{
 800090c:	b500      	push	{lr}
 800090e:	b099      	sub	sp, #100	; 0x64
	RCC_PeriphCLKInitTypeDef PeriphClkInit;
#endif

	do
	{
		RCC_OscInitStruct.OscillatorType = SystemMap.OscillatorType;
 8000910:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <SystemClock_Config+0xb8>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	9207      	str	r2, [sp, #28]
		RCC_OscInitStruct.HSEState	= SystemMap.HSEState;
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	9208      	str	r2, [sp, #32]
		RCC_OscInitStruct.HSICalibrationValue = SystemMap.HSICalibrationValue;
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	920b      	str	r2, [sp, #44]	; 0x2c
		RCC_OscInitStruct.HSIState 	= SystemMap.HSIState;
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	920a      	str	r2, [sp, #40]	; 0x28
		RCC_OscInitStruct.LSEState = SystemMap.LSEState;
 8000922:	689a      	ldr	r2, [r3, #8]
 8000924:	9209      	str	r2, [sp, #36]	; 0x24
		RCC_OscInitStruct.LSIState = SystemMap.LSIState;
 8000926:	695a      	ldr	r2, [r3, #20]
 8000928:	920c      	str	r2, [sp, #48]	; 0x30
		RCC_OscInitStruct.MSIState = SystemMap.MSIState;
 800092a:	699a      	ldr	r2, [r3, #24]
 800092c:	920d      	str	r2, [sp, #52]	; 0x34
		RCC_OscInitStruct.MSICalibrationValue = SystemMap.MSICalibrationValue;
 800092e:	69da      	ldr	r2, [r3, #28]
 8000930:	920e      	str	r2, [sp, #56]	; 0x38
		RCC_OscInitStruct.MSIClockRange= SystemMap.MSIClockRange;
 8000932:	6a1a      	ldr	r2, [r3, #32]
 8000934:	920f      	str	r2, [sp, #60]	; 0x3c

		RCC_OscInitStruct.PLL.PLLState 	= SystemMap.PLLState;
 8000936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000938:	9211      	str	r2, [sp, #68]	; 0x44
		RCC_OscInitStruct.PLL.PLLSource = SystemMap.PLLSource;
 800093a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800093c:	9212      	str	r2, [sp, #72]	; 0x48
		RCC_OscInitStruct.PLL.PLLM 		= SystemMap.PLLM;
 800093e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000940:	9213      	str	r2, [sp, #76]	; 0x4c
		RCC_OscInitStruct.PLL.PLLN		= SystemMap.PLLN;
 8000942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000944:	9214      	str	r2, [sp, #80]	; 0x50
		RCC_OscInitStruct.PLL.PLLP		= SystemMap.PLLP;
 8000946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000948:	9215      	str	r2, [sp, #84]	; 0x54
		RCC_OscInitStruct.PLL.PLLQ		= SystemMap.PLLQ;
 800094a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800094c:	9216      	str	r2, [sp, #88]	; 0x58
		RCC_OscInitStruct.PLL.PLLR		= SystemMap.PLLR;
 800094e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000950:	9317      	str	r3, [sp, #92]	; 0x5c
	#if (INDEPENDENT_WATCHDOG == 1)//Assure that LSI is configured ON (needed by IWDG)
		RCC_OscInitStruct.OscillatorType |= RCC_OSCILLATORTYPE_LSI;
		RCC_OscInitStruct.LSIState |= RCC_LSI_ON;
	#endif

		if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	a807      	add	r0, sp, #28
 8000954:	f000 fa50 	bl	8000df8 <HAL_RCC_OscConfig>
 8000958:	b118      	cbz	r0, 8000962 <SystemClock_Config+0x56>
		{
			result = RET_FAIL;
 800095a:	2001      	movs	r0, #1
		__HAL_RCC_SYSCFG_CLK_ENABLE();
	} while (0);

	return result;

}
 800095c:	b019      	add	sp, #100	; 0x64
 800095e:	f85d fb04 	ldr.w	pc, [sp], #4
		RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000962:	230f      	movs	r3, #15
 8000964:	9302      	str	r3, [sp, #8]
		RCC_ClkInitStruct.SYSCLKSource 	 = SystemMap.SYSCLKSource;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <SystemClock_Config+0xb8>)
 8000968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800096a:	9203      	str	r2, [sp, #12]
		RCC_ClkInitStruct.AHBCLKDivider  = SystemMap.AHBCLKDivider;
 800096c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800096e:	9204      	str	r2, [sp, #16]
		RCC_ClkInitStruct.APB1CLKDivider = SystemMap.APB1CLKDivider;
 8000970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000972:	9205      	str	r2, [sp, #20]
		RCC_ClkInitStruct.APB2CLKDivider = SystemMap.APB2CLKDivider;
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	9306      	str	r3, [sp, #24]
		if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000978:	2104      	movs	r1, #4
 800097a:	a802      	add	r0, sp, #8
 800097c:	f000 fd22 	bl	80013c4 <HAL_RCC_ClockConfig>
 8000980:	b108      	cbz	r0, 8000986 <SystemClock_Config+0x7a>
			result = RET_FAIL;
 8000982:	2001      	movs	r0, #1
 8000984:	e7ea      	b.n	800095c <SystemClock_Config+0x50>
		if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000986:	f44f 7000 	mov.w	r0, #512	; 0x200
 800098a:	f000 f925 	bl	8000bd8 <HAL_PWREx_ControlVoltageScaling>
 800098e:	b108      	cbz	r0, 8000994 <SystemClock_Config+0x88>
			result = RET_FAIL;
 8000990:	2001      	movs	r0, #1
 8000992:	e7e3      	b.n	800095c <SystemClock_Config+0x50>
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000994:	f000 fdec 	bl	8001570 <HAL_RCC_GetHCLKFreq>
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <SystemClock_Config+0xbc>)
 800099a:	fba3 3000 	umull	r3, r0, r3, r0
 800099e:	0980      	lsrs	r0, r0, #6
 80009a0:	f000 f8da 	bl	8000b58 <HAL_SYSTICK_Config>
		HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80009a4:	2004      	movs	r0, #4
 80009a6:	f000 f8ed 	bl	8000b84 <HAL_SYSTICK_CLKSourceConfig>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <SystemClock_Config+0xc0>)
 80009ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009ae:	f042 0201 	orr.w	r2, r2, #1
 80009b2:	661a      	str	r2, [r3, #96]	; 0x60
 80009b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	9b01      	ldr	r3, [sp, #4]
	eError result = RET_OK;
 80009be:	2000      	movs	r0, #0
 80009c0:	e7cc      	b.n	800095c <SystemClock_Config+0x50>
 80009c2:	bf00      	nop
 80009c4:	08001648 	.word	0x08001648
 80009c8:	10624dd3 	.word	0x10624dd3
 80009cc:	40021000 	.word	0x40021000

080009d0 <stm32L4Init>:
{
 80009d0:	b508      	push	{r3, lr}
	storePowerUpReason();
 80009d2:	f7ff ff3f 	bl	8000854 <storePowerUpReason>
	result = SystemClock_Config();
 80009d6:	f7ff ff99 	bl	800090c <SystemClock_Config>
	if (result == RET_OK)
 80009da:	4603      	mov	r3, r0
 80009dc:	b910      	cbnz	r0, 80009e4 <stm32L4Init+0x14>
			result = watchdogInit();
 80009de:	f7ff ff93 	bl	8000908 <watchdogInit>
 80009e2:	4603      	mov	r3, r0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	bd08      	pop	{r3, pc}

080009e8 <systemGetCLkFreq>:
 * @brief   Get the System CLK Frequency
 * @param   ClockFrequency.
 * @return  eError.
 ****************************************************************************/
eError systemGetCLkFreq(uint32_t *ClockFrequency)
{
 80009e8:	b510      	push	{r4, lr}
 80009ea:	4604      	mov	r4, r0
    eError result = RET_OK;

    *ClockFrequency = HAL_RCC_GetHCLKFreq();
 80009ec:	f000 fdc0 	bl	8001570 <HAL_RCC_GetHCLKFreq>
 80009f0:	6020      	str	r0, [r4, #0]

    return result;
}
 80009f2:	2000      	movs	r0, #0
 80009f4:	bd10      	pop	{r4, pc}

080009f6 <systemPreConfiguration>:
 *    then it will jump to execute the interrupt handler located in the Flash
 * @param	None.
 * @return  None.
 ****************************************************************************/
void systemPreConfiguration( void )
{
 80009f6:	4770      	bx	lr

080009f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009fe:	e003      	b.n	8000a08 <LoopCopyDataInit>

08000a00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a06:	3104      	adds	r1, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a10:	d3f6      	bcc.n	8000a00 <CopyDataInit>
	ldr	r2, =_sbss
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a14:	e002      	b.n	8000a1c <LoopFillZerobss>

08000a16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a18:	f842 3b04 	str.w	r3, [r2], #4

08000a1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <LoopForever+0x16>)
	cmp	r2, r3
 8000a1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a20:	d3f9      	bcc.n	8000a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a22:	f000 f813 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a26:	f000 fda9 	bl	800157c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a2a:	f7ff fbd3 	bl	80001d4 <main>

08000a2e <LoopForever>:

LoopForever:
    b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a30:	20020000 	.word	0x20020000
	ldr	r3, =_sidata
 8000a34:	080016e4 	.word	0x080016e4
	ldr	r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a3c:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8000a40:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8000a44:	200000c0 	.word	0x200000c0

08000a48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_IRQHandler>
	...

08000a4c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	490f      	ldr	r1, [pc, #60]	; (8000a8c <SystemInit+0x40>)
 8000a4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000a52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <SystemInit+0x44>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	f042 0201 	orr.w	r2, r2, #1
 8000a62:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a64:	2000      	movs	r0, #0
 8000a66:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000a6e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000a72:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a78:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a80:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a82:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a88:	608b      	str	r3, [r1, #8]
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b510      	push	{r4, lr}
 8000a96:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <HAL_InitTick+0x24>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <HAL_InitTick+0x28>)
 8000a9e:	fba3 3000 	umull	r3, r0, r3, r0
 8000aa2:	0980      	lsrs	r0, r0, #6
 8000aa4:	f000 f858 	bl	8000b58 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4621      	mov	r1, r4
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f814 	bl	8000adc <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	bd10      	pop	{r4, pc}
 8000ab8:	20000038 	.word	0x20000038
 8000abc:	10624dd3 	.word	0x10624dd3

08000ac0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ac0:	4a02      	ldr	r2, [pc, #8]	; (8000acc <HAL_IncTick+0xc>)
 8000ac2:	6813      	ldr	r3, [r2, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000bc 	.word	0x200000bc

08000ad0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ad0:	4b01      	ldr	r3, [pc, #4]	; (8000ad8 <HAL_GetTick+0x8>)
 8000ad2:	6818      	ldr	r0, [r3, #0]
}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200000bc 	.word	0x200000bc

08000adc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_NVIC_SetPriority+0x5c>)
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae6:	f1c3 0407 	rsb	r4, r3, #7
 8000aea:	2c04      	cmp	r4, #4
 8000aec:	bf28      	it	cs
 8000aee:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af0:	1d1d      	adds	r5, r3, #4
 8000af2:	2d06      	cmp	r5, #6
 8000af4:	d917      	bls.n	8000b26 <HAL_NVIC_SetPriority+0x4a>
 8000af6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	2501      	movs	r5, #1
 8000afa:	fa05 f404 	lsl.w	r4, r5, r4
 8000afe:	3c01      	subs	r4, #1
 8000b00:	4021      	ands	r1, r4
 8000b02:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b04:	fa05 f303 	lsl.w	r3, r5, r3
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	db0b      	blt.n	8000b2a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	0109      	lsls	r1, r1, #4
 8000b14:	b2c9      	uxtb	r1, r1
 8000b16:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b1a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b1e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b22:	bc30      	pop	{r4, r5}
 8000b24:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	2300      	movs	r3, #0
 8000b28:	e7e6      	b.n	8000af8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	f000 000f 	and.w	r0, r0, #15
 8000b2e:	0109      	lsls	r1, r1, #4
 8000b30:	b2c9      	uxtb	r1, r1
 8000b32:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <HAL_NVIC_SetPriority+0x60>)
 8000b34:	5419      	strb	r1, [r3, r0]
 8000b36:	e7f4      	b.n	8000b22 <HAL_NVIC_SetPriority+0x46>
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	e000ed14 	.word	0xe000ed14

08000b40 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b40:	0942      	lsrs	r2, r0, #5
 8000b42:	f000 001f 	and.w	r0, r0, #31
 8000b46:	2301      	movs	r3, #1
 8000b48:	fa03 f000 	lsl.w	r0, r3, r0
 8000b4c:	4b01      	ldr	r3, [pc, #4]	; (8000b54 <HAL_NVIC_EnableIRQ+0x14>)
 8000b4e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b58:	3801      	subs	r0, #1
 8000b5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b5e:	d20a      	bcs.n	8000b76 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_SYSTICK_Config+0x24>)
 8000b62:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	21f0      	movs	r1, #240	; 0xf0
 8000b66:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_SYSTICK_Config+0x28>)
 8000b68:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b70:	2207      	movs	r2, #7
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b84:	2804      	cmp	r0, #4
 8000b86:	d005      	beq.n	8000b94 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000b8a:	6813      	ldr	r3, [r2, #0]
 8000b8c:	f023 0304 	bic.w	r3, r3, #4
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b94:	4a02      	ldr	r2, [pc, #8]	; (8000ba0 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8000b96:	6813      	ldr	r3, [r2, #0]
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ba4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ba6:	f7ff fe46 	bl	8000836 <HAL_SYSTICK_Callback>
 8000baa:	bd08      	pop	{r3, pc}

08000bac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bac:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	4203      	tst	r3, r0
 8000bb4:	d100      	bne.n	8000bb8 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8000bb6:	bd08      	pop	{r3, pc}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bb8:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000bba:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bbc:	f7ff fe43 	bl	8000846 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bc0:	e7f9      	b.n	8000bb6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000bc2:	bf00      	nop
 8000bc4:	40010400 	.word	0x40010400

08000bc8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_PWREx_GetVoltageRange+0xc>)
 8000bca:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8000bcc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40007000 	.word	0x40007000

08000bd8 <HAL_PWREx_ControlVoltageScaling>:
  }
  
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bd8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000bdc:	d00f      	beq.n	8000bfe <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bea:	d037      	beq.n	8000c5c <HAL_PWREx_ControlVoltageScaling+0x84>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bec:	4a1c      	ldr	r2, [pc, #112]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000bee:	6813      	ldr	r3, [r2, #0]
 8000bf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c0a:	d023      	beq.n	8000c54 <HAL_PWREx_ControlVoltageScaling+0x7c>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c18:	6013      	str	r3, [r2, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8000c22:	f502 325b 	add.w	r2, r2, #224256	; 0x36c00
 8000c26:	f202 2283 	addw	r2, r2, #643	; 0x283
 8000c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2e:	0c9a      	lsrs	r2, r3, #18
 8000c30:	2332      	movs	r3, #50	; 0x32
 8000c32:	fb03 f302 	mul.w	r3, r3, r2
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000c36:	e000      	b.n	8000c3a <HAL_PWREx_ControlVoltageScaling+0x62>
        wait_loop_index--;
 8000c38:	3b01      	subs	r3, #1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000c3a:	b123      	cbz	r3, 8000c46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000c3e:	6952      	ldr	r2, [r2, #20]
 8000c40:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000c44:	d1f8      	bne.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000c4e:	d003      	beq.n	8000c58 <HAL_PWREx_ControlVoltageScaling+0x80>
        return HAL_TIMEOUT;
 8000c50:	2003      	movs	r0, #3
 8000c52:	4770      	bx	lr
  return HAL_OK;
 8000c54:	2000      	movs	r0, #0
 8000c56:	4770      	bx	lr
 8000c58:	2000      	movs	r0, #0
 8000c5a:	4770      	bx	lr
 8000c5c:	2000      	movs	r0, #0
}  
 8000c5e:	4770      	bx	lr
 8000c60:	40007000 	.word	0x40007000
 8000c64:	20000038 	.word	0x20000038

08000c68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000c68:	b530      	push	{r4, r5, lr}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	4605      	mov	r5, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000c76:	d00b      	beq.n	8000c90 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000c78:	f7ff ffa6 	bl	8000bc8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c7c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000c80:	d017      	beq.n	8000cb2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8000c82:	2d80      	cmp	r5, #128	; 0x80
 8000c84:	d81f      	bhi.n	8000cc6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8000c86:	d02d      	beq.n	8000ce4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8000c88:	2d70      	cmp	r5, #112	; 0x70
 8000c8a:	d02d      	beq.n	8000ce8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e01b      	b.n	8000cc8 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c90:	4c17      	ldr	r4, [pc, #92]	; (8000cf0 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8000c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	65a3      	str	r3, [r4, #88]	; 0x58
 8000c9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000ca4:	f7ff ff90 	bl	8000bc8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000ca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cae:	65a3      	str	r3, [r4, #88]	; 0x58
 8000cb0:	e7e4      	b.n	8000c7c <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8000cb2:	2d80      	cmp	r5, #128	; 0x80
 8000cb4:	d903      	bls.n	8000cbe <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 8000cb6:	2da0      	cmp	r5, #160	; 0xa0
 8000cb8:	d903      	bls.n	8000cc2 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000cba:	2102      	movs	r1, #2
 8000cbc:	e004      	b.n	8000cc8 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	e002      	b.n	8000cc8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	e000      	b.n	8000cc8 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 8000cc6:	2103      	movs	r1, #3
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 8000cca:	6813      	ldr	r3, [r2, #0]
 8000ccc:	f023 0307 	bic.w	r3, r3, #7
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8000cd4:	6813      	ldr	r3, [r2, #0]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	d006      	beq.n	8000cec <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
 8000cde:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8000ce0:	b003      	add	sp, #12
 8000ce2:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	e7ef      	b.n	8000cc8 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 8000ce8:	2101      	movs	r1, #1
 8000cea:	e7ed      	b.n	8000cc8 <RCC_SetFlashLatencyFromMSIRange+0x60>
  return HAL_OK;
 8000cec:	2000      	movs	r0, #0
 8000cee:	e7f7      	b.n	8000ce0 <RCC_SetFlashLatencyFromMSIRange+0x78>
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40022000 	.word	0x40022000

08000cf8 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000cf8:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f013 0f0c 	tst.w	r3, #12
 8000d00:	d01a      	beq.n	8000d38 <HAL_RCC_GetSysClockFreq+0x40>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8000d0a:	2b0c      	cmp	r3, #12
 8000d0c:	d00e      	beq.n	8000d2c <HAL_RCC_GetSysClockFreq+0x34>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000d0e:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f003 030c 	and.w	r3, r3, #12
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d02f      	beq.n	8000d7a <HAL_RCC_GetSysClockFreq+0x82>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000d1a:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 030c 	and.w	r3, r3, #12
 8000d22:	2b08      	cmp	r3, #8
 8000d24:	d02c      	beq.n	8000d80 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8000d26:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000d28:	4601      	mov	r1, r0
 8000d2a:	e018      	b.n	8000d5e <HAL_RCC_GetSysClockFreq+0x66>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d1ea      	bne.n	8000d0e <HAL_RCC_GetSysClockFreq+0x16>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f013 0f08 	tst.w	r3, #8
 8000d40:	d114      	bne.n	8000d6c <HAL_RCC_GetSysClockFreq+0x74>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000d42:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d48:	f3c3 2303 	ubfx	r3, r3, #8, #4
    msirange = MSIRangeTable[msirange];
 8000d4c:	4a27      	ldr	r2, [pc, #156]	; (8000dec <HAL_RCC_GetSysClockFreq+0xf4>)
 8000d4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f013 0f0c 	tst.w	r3, #12
 8000d5a:	d00c      	beq.n	8000d76 <HAL_RCC_GetSysClockFreq+0x7e>
  uint32_t sysclockfreq = 0U;
 8000d5c:	2000      	movs	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000d5e:	4a22      	ldr	r2, [pc, #136]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000d60:	6893      	ldr	r3, [r2, #8]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b0c      	cmp	r3, #12
 8000d68:	d00d      	beq.n	8000d86 <HAL_RCC_GetSysClockFreq+0x8e>
}
 8000d6a:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d74:	e7ea      	b.n	8000d4c <HAL_RCC_GetSysClockFreq+0x54>
      sysclockfreq = msirange;
 8000d76:	4608      	mov	r0, r1
 8000d78:	e7f1      	b.n	8000d5e <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSI_VALUE;
 8000d7a:	481d      	ldr	r0, [pc, #116]	; (8000df0 <HAL_RCC_GetSysClockFreq+0xf8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e7ee      	b.n	8000d5e <HAL_RCC_GetSysClockFreq+0x66>
    sysclockfreq = HSE_VALUE;
 8000d80:	481c      	ldr	r0, [pc, #112]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xfc>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000d82:	2100      	movs	r1, #0
 8000d84:	e7eb      	b.n	8000d5e <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000d86:	4613      	mov	r3, r2
 8000d88:	68d2      	ldr	r2, [r2, #12]
 8000d8a:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8000d94:	3301      	adds	r3, #1
    switch (pllsource)
 8000d96:	2a02      	cmp	r2, #2
 8000d98:	d00a      	beq.n	8000db0 <HAL_RCC_GetSysClockFreq+0xb8>
 8000d9a:	2a03      	cmp	r2, #3
 8000d9c:	d01a      	beq.n	8000dd4 <HAL_RCC_GetSysClockFreq+0xdc>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000d9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da2:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000da4:	68d0      	ldr	r0, [r2, #12]
 8000da6:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000daa:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8000dae:	e008      	b.n	8000dc2 <HAL_RCC_GetSysClockFreq+0xca>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000db0:	480f      	ldr	r0, [pc, #60]	; (8000df0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000db6:	4a0c      	ldr	r2, [pc, #48]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000db8:	68d0      	ldr	r0, [r2, #12]
 8000dba:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000dbe:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000dca:	3301      	adds	r3, #1
 8000dcc:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000dce:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8000dd2:	e7ca      	b.n	8000d6a <HAL_RCC_GetSysClockFreq+0x72>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000dd4:	4807      	ldr	r0, [pc, #28]	; (8000df4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8000dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dda:	4a03      	ldr	r2, [pc, #12]	; (8000de8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8000ddc:	68d0      	ldr	r0, [r2, #12]
 8000dde:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8000de2:	fb00 f003 	mul.w	r0, r0, r3
      break;
 8000de6:	e7ec      	b.n	8000dc2 <HAL_RCC_GetSysClockFreq+0xca>
 8000de8:	40021000 	.word	0x40021000
 8000dec:	080016ac 	.word	0x080016ac
 8000df0:	00f42400 	.word	0x00f42400
 8000df4:	007a1200 	.word	0x007a1200

08000df8 <HAL_RCC_OscConfig>:
{
 8000df8:	b570      	push	{r4, r5, r6, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dfe:	6803      	ldr	r3, [r0, #0]
 8000e00:	f013 0f10 	tst.w	r3, #16
 8000e04:	d03f      	beq.n	8000e86 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000e06:	4b97      	ldr	r3, [pc, #604]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f013 0f0c 	tst.w	r3, #12
 8000e0e:	f040 8092 	bne.w	8000f36 <HAL_RCC_OscConfig+0x13e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e12:	4b94      	ldr	r3, [pc, #592]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f013 0f02 	tst.w	r3, #2
 8000e1a:	d003      	beq.n	8000e24 <HAL_RCC_OscConfig+0x2c>
 8000e1c:	6983      	ldr	r3, [r0, #24]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 82c0 	beq.w	80013a4 <HAL_RCC_OscConfig+0x5ac>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e24:	6a20      	ldr	r0, [r4, #32]
 8000e26:	4b8f      	ldr	r3, [pc, #572]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f013 0f08 	tst.w	r3, #8
 8000e2e:	d062      	beq.n	8000ef6 <HAL_RCC_OscConfig+0xfe>
 8000e30:	4b8c      	ldr	r3, [pc, #560]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e38:	4283      	cmp	r3, r0
 8000e3a:	d263      	bcs.n	8000f04 <HAL_RCC_OscConfig+0x10c>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e3c:	f7ff ff14 	bl	8000c68 <RCC_SetFlashLatencyFromMSIRange>
 8000e40:	2800      	cmp	r0, #0
 8000e42:	f040 82b1 	bne.w	80013a8 <HAL_RCC_OscConfig+0x5b0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e46:	4b87      	ldr	r3, [pc, #540]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	f042 0208 	orr.w	r2, r2, #8
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e56:	6a21      	ldr	r1, [r4, #32]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000e62:	69e1      	ldr	r1, [r4, #28]
 8000e64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e68:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e6a:	f7ff ff45 	bl	8000cf8 <HAL_RCC_GetSysClockFreq>
 8000e6e:	4b7d      	ldr	r3, [pc, #500]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e76:	4a7c      	ldr	r2, [pc, #496]	; (8001068 <HAL_RCC_OscConfig+0x270>)
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	40d8      	lsrs	r0, r3
 8000e7c:	4b7b      	ldr	r3, [pc, #492]	; (800106c <HAL_RCC_OscConfig+0x274>)
 8000e7e:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff fe07 	bl	8000a94 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	f013 0f01 	tst.w	r3, #1
 8000e8c:	f000 80a1 	beq.w	8000fd2 <HAL_RCC_OscConfig+0x1da>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000e90:	4b74      	ldr	r3, [pc, #464]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	f000 8091 	beq.w	8000fc0 <HAL_RCC_OscConfig+0x1c8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e9e:	4b71      	ldr	r3, [pc, #452]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8000ea6:	2b0c      	cmp	r3, #12
 8000ea8:	f000 8083 	beq.w	8000fb2 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eac:	6863      	ldr	r3, [r4, #4]
 8000eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb2:	f000 80b5 	beq.w	8001020 <HAL_RCC_OscConfig+0x228>
 8000eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eba:	f000 80b7 	beq.w	800102c <HAL_RCC_OscConfig+0x234>
 8000ebe:	4b69      	ldr	r3, [pc, #420]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ece:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed0:	6863      	ldr	r3, [r4, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 80b7 	beq.w	8001046 <HAL_RCC_OscConfig+0x24e>
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fdfa 	bl	8000ad0 <HAL_GetTick>
 8000edc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000ede:	4b61      	ldr	r3, [pc, #388]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ee6:	d174      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fdf2 	bl	8000ad0 <HAL_GetTick>
 8000eec:	1b40      	subs	r0, r0, r5
 8000eee:	2864      	cmp	r0, #100	; 0x64
 8000ef0:	d9f5      	bls.n	8000ede <HAL_RCC_OscConfig+0xe6>
            return HAL_TIMEOUT;
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	e25f      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ef6:	4b5b      	ldr	r3, [pc, #364]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f02:	e799      	b.n	8000e38 <HAL_RCC_OscConfig+0x40>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f04:	4b57      	ldr	r3, [pc, #348]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	f042 0208 	orr.w	r2, r2, #8
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f14:	6a21      	ldr	r1, [r4, #32]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000f20:	69e1      	ldr	r1, [r4, #28]
 8000f22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f26:	605a      	str	r2, [r3, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f28:	6a20      	ldr	r0, [r4, #32]
 8000f2a:	f7ff fe9d 	bl	8000c68 <RCC_SetFlashLatencyFromMSIRange>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d09b      	beq.n	8000e6a <HAL_RCC_OscConfig+0x72>
            return HAL_ERROR;
 8000f32:	2001      	movs	r0, #1
 8000f34:	e23f      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f36:	6983      	ldr	r3, [r0, #24]
 8000f38:	b333      	cbz	r3, 8000f88 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_MSI_ENABLE();
 8000f3a:	4a4a      	ldr	r2, [pc, #296]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	6813      	ldr	r3, [r2, #0]
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f44:	f7ff fdc4 	bl	8000ad0 <HAL_GetTick>
 8000f48:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f4a:	4b46      	ldr	r3, [pc, #280]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f013 0f02 	tst.w	r3, #2
 8000f52:	d106      	bne.n	8000f62 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f54:	f7ff fdbc 	bl	8000ad0 <HAL_GetTick>
 8000f58:	1b40      	subs	r0, r0, r5
 8000f5a:	2802      	cmp	r0, #2
 8000f5c:	d9f5      	bls.n	8000f4a <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 8000f5e:	2003      	movs	r0, #3
 8000f60:	e229      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f62:	4b40      	ldr	r3, [pc, #256]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	f042 0208 	orr.w	r2, r2, #8
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f72:	6a21      	ldr	r1, [r4, #32]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000f7e:	69e1      	ldr	r1, [r4, #28]
 8000f80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	e77e      	b.n	8000e86 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_MSI_DISABLE();
 8000f88:	4a36      	ldr	r2, [pc, #216]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f92:	f7ff fd9d 	bl	8000ad0 <HAL_GetTick>
 8000f96:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000f98:	4b32      	ldr	r3, [pc, #200]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f013 0f02 	tst.w	r3, #2
 8000fa0:	f43f af71 	beq.w	8000e86 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fd94 	bl	8000ad0 <HAL_GetTick>
 8000fa8:	1b40      	subs	r0, r0, r5
 8000faa:	2802      	cmp	r0, #2
 8000fac:	d9f4      	bls.n	8000f98 <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 8000fae:	2003      	movs	r0, #3
 8000fb0:	e201      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	f47f af76 	bne.w	8000eac <HAL_RCC_OscConfig+0xb4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fc8:	d003      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x1da>
 8000fca:	6863      	ldr	r3, [r4, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 81ed 	beq.w	80013ac <HAL_RCC_OscConfig+0x5b4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	f013 0f02 	tst.w	r3, #2
 8000fd8:	d061      	beq.n	800109e <HAL_RCC_OscConfig+0x2a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000fda:	4b22      	ldr	r3, [pc, #136]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d04a      	beq.n	800107c <HAL_RCC_OscConfig+0x284>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000fee:	2b0c      	cmp	r3, #12
 8000ff0:	d03e      	beq.n	8001070 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff2:	68e3      	ldr	r3, [r4, #12]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d078      	beq.n	80010ea <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_ENABLE();
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	6813      	ldr	r3, [r2, #0]
 8000ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001000:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001002:	f7ff fd65 	bl	8000ad0 <HAL_GetTick>
 8001006:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001010:	d162      	bne.n	80010d8 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fd5d 	bl	8000ad0 <HAL_GetTick>
 8001016:	1b40      	subs	r0, r0, r5
 8001018:	2802      	cmp	r0, #2
 800101a:	d9f5      	bls.n	8001008 <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 800101c:	2003      	movs	r0, #3
 800101e:	e1ca      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001020:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 8001022:	6813      	ldr	r3, [r2, #0]
 8001024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e751      	b.n	8000ed0 <HAL_RCC_OscConfig+0xd8>
 800102c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001030:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e744      	b.n	8000ed0 <HAL_RCC_OscConfig+0xd8>
        tickstart = HAL_GetTick();
 8001046:	f7ff fd43 	bl	8000ad0 <HAL_GetTick>
 800104a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001054:	d0bd      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001056:	f7ff fd3b 	bl	8000ad0 <HAL_GetTick>
 800105a:	1b40      	subs	r0, r0, r5
 800105c:	2864      	cmp	r0, #100	; 0x64
 800105e:	d9f5      	bls.n	800104c <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 8001060:	2003      	movs	r0, #3
 8001062:	e1a8      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
 8001064:	40021000 	.word	0x40021000
 8001068:	0800169c 	.word	0x0800169c
 800106c:	20000038 	.word	0x20000038
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001070:	4bb1      	ldr	r3, [pc, #708]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d1ba      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x1fa>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800107c:	4bae      	ldr	r3, [pc, #696]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001084:	d003      	beq.n	800108e <HAL_RCC_OscConfig+0x296>
 8001086:	68e3      	ldr	r3, [r4, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 8191 	beq.w	80013b0 <HAL_RCC_OscConfig+0x5b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4aaa      	ldr	r2, [pc, #680]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 8001090:	6853      	ldr	r3, [r2, #4]
 8001092:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001096:	6921      	ldr	r1, [r4, #16]
 8001098:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800109c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	f013 0f08 	tst.w	r3, #8
 80010a4:	d04c      	beq.n	8001140 <HAL_RCC_OscConfig+0x348>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010a6:	6963      	ldr	r3, [r4, #20]
 80010a8:	b39b      	cbz	r3, 8001112 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_LSI_ENABLE();
 80010aa:	4aa3      	ldr	r2, [pc, #652]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80010ac:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80010b8:	f7ff fd0a 	bl	8000ad0 <HAL_GetTick>
 80010bc:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 80010be:	4b9e      	ldr	r3, [pc, #632]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80010c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c4:	f013 0f02 	tst.w	r3, #2
 80010c8:	d13a      	bne.n	8001140 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ca:	f7ff fd01 	bl	8000ad0 <HAL_GetTick>
 80010ce:	1b40      	subs	r0, r0, r5
 80010d0:	2802      	cmp	r0, #2
 80010d2:	d9f4      	bls.n	80010be <HAL_RCC_OscConfig+0x2c6>
          return HAL_TIMEOUT;
 80010d4:	2003      	movs	r0, #3
 80010d6:	e16e      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4a97      	ldr	r2, [pc, #604]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80010da:	6853      	ldr	r3, [r2, #4]
 80010dc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80010e0:	6921      	ldr	r1, [r4, #16]
 80010e2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80010e6:	6053      	str	r3, [r2, #4]
 80010e8:	e7d9      	b.n	800109e <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_HSI_DISABLE();
 80010ea:	4a93      	ldr	r2, [pc, #588]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80010ec:	6813      	ldr	r3, [r2, #0]
 80010ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80010f4:	f7ff fcec 	bl	8000ad0 <HAL_GetTick>
 80010f8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80010fa:	4b8f      	ldr	r3, [pc, #572]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001102:	d0cc      	beq.n	800109e <HAL_RCC_OscConfig+0x2a6>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fce4 	bl	8000ad0 <HAL_GetTick>
 8001108:	1b40      	subs	r0, r0, r5
 800110a:	2802      	cmp	r0, #2
 800110c:	d9f5      	bls.n	80010fa <HAL_RCC_OscConfig+0x302>
            return HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
 8001110:	e151      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
      __HAL_RCC_LSI_DISABLE();
 8001112:	4a89      	ldr	r2, [pc, #548]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 8001114:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001120:	f7ff fcd6 	bl	8000ad0 <HAL_GetTick>
 8001124:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001126:	4b84      	ldr	r3, [pc, #528]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 8001128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112c:	f013 0f02 	tst.w	r3, #2
 8001130:	d006      	beq.n	8001140 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001132:	f7ff fccd 	bl	8000ad0 <HAL_GetTick>
 8001136:	1b40      	subs	r0, r0, r5
 8001138:	2802      	cmp	r0, #2
 800113a:	d9f4      	bls.n	8001126 <HAL_RCC_OscConfig+0x32e>
          return HAL_TIMEOUT;
 800113c:	2003      	movs	r0, #3
 800113e:	e13a      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	f013 0f04 	tst.w	r3, #4
 8001146:	d07a      	beq.n	800123e <HAL_RCC_OscConfig+0x446>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001148:	4b7b      	ldr	r3, [pc, #492]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001150:	d136      	bne.n	80011c0 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	4b79      	ldr	r3, [pc, #484]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 8001154:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001156:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800115a:	659a      	str	r2, [r3, #88]	; 0x58
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001166:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001168:	4b74      	ldr	r3, [pc, #464]	; (800133c <HAL_RCC_OscConfig+0x544>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001170:	d028      	beq.n	80011c4 <HAL_RCC_OscConfig+0x3cc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001172:	68a3      	ldr	r3, [r4, #8]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d039      	beq.n	80011ec <HAL_RCC_OscConfig+0x3f4>
 8001178:	2b05      	cmp	r3, #5
 800117a:	d03f      	beq.n	80011fc <HAL_RCC_OscConfig+0x404>
 800117c:	4b6e      	ldr	r3, [pc, #440]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 800117e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001182:	f022 0201 	bic.w	r2, r2, #1
 8001186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800118a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800118e:	f022 0204 	bic.w	r2, r2, #4
 8001192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001196:	68a3      	ldr	r3, [r4, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d03d      	beq.n	8001218 <HAL_RCC_OscConfig+0x420>
      tickstart = HAL_GetTick();
 800119c:	f7ff fc98 	bl	8000ad0 <HAL_GetTick>
 80011a0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80011a2:	4b65      	ldr	r3, [pc, #404]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80011a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a8:	f013 0f02 	tst.w	r3, #2
 80011ac:	d146      	bne.n	800123c <HAL_RCC_OscConfig+0x444>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ae:	f7ff fc8f 	bl	8000ad0 <HAL_GetTick>
 80011b2:	1b80      	subs	r0, r0, r6
 80011b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80011b8:	4298      	cmp	r0, r3
 80011ba:	d9f2      	bls.n	80011a2 <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 80011bc:	2003      	movs	r0, #3
 80011be:	e0fa      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
    FlagStatus       pwrclkchanged = RESET;
 80011c0:	2500      	movs	r5, #0
 80011c2:	e7d1      	b.n	8001168 <HAL_RCC_OscConfig+0x370>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011c4:	4a5d      	ldr	r2, [pc, #372]	; (800133c <HAL_RCC_OscConfig+0x544>)
 80011c6:	6813      	ldr	r3, [r2, #0]
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80011ce:	f7ff fc7f 	bl	8000ad0 <HAL_GetTick>
 80011d2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011d4:	4b59      	ldr	r3, [pc, #356]	; (800133c <HAL_RCC_OscConfig+0x544>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011dc:	d1c9      	bne.n	8001172 <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011de:	f7ff fc77 	bl	8000ad0 <HAL_GetTick>
 80011e2:	1b80      	subs	r0, r0, r6
 80011e4:	2802      	cmp	r0, #2
 80011e6:	d9f5      	bls.n	80011d4 <HAL_RCC_OscConfig+0x3dc>
          return HAL_TIMEOUT;
 80011e8:	2003      	movs	r0, #3
 80011ea:	e0e4      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ec:	4a52      	ldr	r2, [pc, #328]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80011ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011fa:	e7cc      	b.n	8001196 <HAL_RCC_OscConfig+0x39e>
 80011fc:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80011fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001202:	f042 0204 	orr.w	r2, r2, #4
 8001206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800120a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800120e:	f042 0201 	orr.w	r2, r2, #1
 8001212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001216:	e7be      	b.n	8001196 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8001218:	f7ff fc5a 	bl	8000ad0 <HAL_GetTick>
 800121c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 800121e:	4b46      	ldr	r3, [pc, #280]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 8001220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001224:	f013 0f02 	tst.w	r3, #2
 8001228:	d008      	beq.n	800123c <HAL_RCC_OscConfig+0x444>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff fc51 	bl	8000ad0 <HAL_GetTick>
 800122e:	1b80      	subs	r0, r0, r6
 8001230:	f241 3388 	movw	r3, #5000	; 0x1388
 8001234:	4298      	cmp	r0, r3
 8001236:	d9f2      	bls.n	800121e <HAL_RCC_OscConfig+0x426>
          return HAL_TIMEOUT;
 8001238:	2003      	movs	r0, #3
 800123a:	e0bc      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
    if(pwrclkchanged == SET)
 800123c:	b9e5      	cbnz	r5, 8001278 <HAL_RCC_OscConfig+0x480>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	f013 0f20 	tst.w	r3, #32
 8001244:	d035      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4ba>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001248:	b1e3      	cbz	r3, 8001284 <HAL_RCC_OscConfig+0x48c>
      __HAL_RCC_HSI48_ENABLE();
 800124a:	4a3b      	ldr	r2, [pc, #236]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 800124c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001258:	f7ff fc3a 	bl	8000ad0 <HAL_GetTick>
 800125c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 800125e:	4b36      	ldr	r3, [pc, #216]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 8001260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001264:	f013 0f02 	tst.w	r3, #2
 8001268:	d123      	bne.n	80012b2 <HAL_RCC_OscConfig+0x4ba>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800126a:	f7ff fc31 	bl	8000ad0 <HAL_GetTick>
 800126e:	1b40      	subs	r0, r0, r5
 8001270:	2802      	cmp	r0, #2
 8001272:	d9f4      	bls.n	800125e <HAL_RCC_OscConfig+0x466>
          return HAL_TIMEOUT;
 8001274:	2003      	movs	r0, #3
 8001276:	e09e      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001278:	4a2f      	ldr	r2, [pc, #188]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 800127a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800127c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001280:	6593      	str	r3, [r2, #88]	; 0x58
 8001282:	e7dc      	b.n	800123e <HAL_RCC_OscConfig+0x446>
      __HAL_RCC_HSI48_DISABLE();
 8001284:	4a2c      	ldr	r2, [pc, #176]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 8001286:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001292:	f7ff fc1d 	bl	8000ad0 <HAL_GetTick>
 8001296:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 800129a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800129e:	f013 0f02 	tst.w	r3, #2
 80012a2:	d006      	beq.n	80012b2 <HAL_RCC_OscConfig+0x4ba>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012a4:	f7ff fc14 	bl	8000ad0 <HAL_GetTick>
 80012a8:	1b40      	subs	r0, r0, r5
 80012aa:	2802      	cmp	r0, #2
 80012ac:	d9f4      	bls.n	8001298 <HAL_RCC_OscConfig+0x4a0>
          return HAL_TIMEOUT;
 80012ae:	2003      	movs	r0, #3
 80012b0:	e081      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d07d      	beq.n	80013b4 <HAL_RCC_OscConfig+0x5bc>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012b8:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80012ba:	6892      	ldr	r2, [r2, #8]
 80012bc:	f002 020c 	and.w	r2, r2, #12
 80012c0:	2a0c      	cmp	r2, #12
 80012c2:	d07a      	beq.n	80013ba <HAL_RCC_OscConfig+0x5c2>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d023      	beq.n	8001310 <HAL_RCC_OscConfig+0x518>
        __HAL_RCC_PLL_DISABLE();
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80012d0:	601a      	str	r2, [r3, #0]
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80012d8:	d104      	bne.n	80012e4 <HAL_RCC_OscConfig+0x4ec>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80012dc:	68d3      	ldr	r3, [r2, #12]
 80012de:	f023 0303 	bic.w	r3, r3, #3
 80012e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80012e6:	68d3      	ldr	r3, [r2, #12]
 80012e8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80012ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f0:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80012f2:	f7ff fbed 	bl	8000ad0 <HAL_GetTick>
 80012f6:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001300:	d04e      	beq.n	80013a0 <HAL_RCC_OscConfig+0x5a8>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fbe5 	bl	8000ad0 <HAL_GetTick>
 8001306:	1b00      	subs	r0, r0, r4
 8001308:	2802      	cmp	r0, #2
 800130a:	d9f5      	bls.n	80012f8 <HAL_RCC_OscConfig+0x500>
            return HAL_TIMEOUT;
 800130c:	2003      	movs	r0, #3
 800130e:	e052      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
        __HAL_RCC_PLL_DISABLE();
 8001310:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 8001312:	6813      	ldr	r3, [r2, #0]
 8001314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001318:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800131a:	f7ff fbd9 	bl	8000ad0 <HAL_GetTick>
 800131e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_RCC_OscConfig+0x540>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001328:	d00a      	beq.n	8001340 <HAL_RCC_OscConfig+0x548>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132a:	f7ff fbd1 	bl	8000ad0 <HAL_GetTick>
 800132e:	1b40      	subs	r0, r0, r5
 8001330:	2802      	cmp	r0, #2
 8001332:	d9f5      	bls.n	8001320 <HAL_RCC_OscConfig+0x528>
            return HAL_TIMEOUT;
 8001334:	2003      	movs	r0, #3
 8001336:	e03e      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
 8001338:	40021000 	.word	0x40021000
 800133c:	40007000 	.word	0x40007000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001340:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001342:	1e5a      	subs	r2, r3, #1
 8001344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800134c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800134e:	4313      	orrs	r3, r2
 8001350:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001352:	0852      	lsrs	r2, r2, #1
 8001354:	3a01      	subs	r2, #1
 8001356:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800135a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800135c:	0852      	lsrs	r2, r2, #1
 800135e:	3a01      	subs	r2, #1
 8001360:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001364:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001366:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_RCC_OscConfig+0x5c8>)
 800136c:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800136e:	6813      	ldr	r3, [r2, #0]
 8001370:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001374:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001376:	68d3      	ldr	r3, [r2, #12]
 8001378:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800137c:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800137e:	f7ff fba7 	bl	8000ad0 <HAL_GetTick>
 8001382:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_RCC_OscConfig+0x5c8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800138c:	d106      	bne.n	800139c <HAL_RCC_OscConfig+0x5a4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff fb9f 	bl	8000ad0 <HAL_GetTick>
 8001392:	1b00      	subs	r0, r0, r4
 8001394:	2802      	cmp	r0, #2
 8001396:	d9f5      	bls.n	8001384 <HAL_RCC_OscConfig+0x58c>
            return HAL_TIMEOUT;
 8001398:	2003      	movs	r0, #3
 800139a:	e00c      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
  return HAL_OK;
 800139c:	2000      	movs	r0, #0
 800139e:	e00a      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
 80013a0:	2000      	movs	r0, #0
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
        return HAL_ERROR;
 80013a4:	2001      	movs	r0, #1
 80013a6:	e006      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
            return HAL_ERROR;
 80013a8:	2001      	movs	r0, #1
 80013aa:	e004      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
        return HAL_ERROR;
 80013ac:	2001      	movs	r0, #1
 80013ae:	e002      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
        return HAL_ERROR;
 80013b0:	2001      	movs	r0, #1
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
  return HAL_OK;
 80013b4:	2000      	movs	r0, #0
}
 80013b6:	b002      	add	sp, #8
 80013b8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
 80013bc:	e7fb      	b.n	80013b6 <HAL_RCC_OscConfig+0x5be>
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80013c4:	4b66      	ldr	r3, [pc, #408]	; (8001560 <HAL_RCC_ClockConfig+0x19c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	428b      	cmp	r3, r1
 80013ce:	d20c      	bcs.n	80013ea <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d0:	4a63      	ldr	r2, [pc, #396]	; (8001560 <HAL_RCC_ClockConfig+0x19c>)
 80013d2:	6813      	ldr	r3, [r2, #0]
 80013d4:	f023 0307 	bic.w	r3, r3, #7
 80013d8:	430b      	orrs	r3, r1
 80013da:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80013dc:	6813      	ldr	r3, [r2, #0]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	4299      	cmp	r1, r3
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80013e6:	2001      	movs	r0, #1
 80013e8:	4770      	bx	lr
{
 80013ea:	b570      	push	{r4, r5, r6, lr}
 80013ec:	460d      	mov	r5, r1
 80013ee:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013f0:	6803      	ldr	r3, [r0, #0]
 80013f2:	f013 0f01 	tst.w	r3, #1
 80013f6:	d06c      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x10e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f8:	6843      	ldr	r3, [r0, #4]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d00a      	beq.n	8001414 <HAL_RCC_ClockConfig+0x50>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d02d      	beq.n	800145e <HAL_RCC_ClockConfig+0x9a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001402:	2b00      	cmp	r3, #0
 8001404:	d132      	bne.n	800146c <HAL_RCC_ClockConfig+0xa8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001406:	4a57      	ldr	r2, [pc, #348]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	f012 0f02 	tst.w	r2, #2
 800140e:	d107      	bne.n	8001420 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8001410:	2001      	movs	r0, #1
 8001412:	bd70      	pop	{r4, r5, r6, pc}
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001414:	4a53      	ldr	r2, [pc, #332]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800141c:	f000 809e 	beq.w	800155c <HAL_RCC_ClockConfig+0x198>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001420:	4950      	ldr	r1, [pc, #320]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 8001422:	688a      	ldr	r2, [r1, #8]
 8001424:	f022 0203 	bic.w	r2, r2, #3
 8001428:	4313      	orrs	r3, r2
 800142a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800142c:	f7ff fb50 	bl	8000ad0 <HAL_GetTick>
 8001430:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001432:	6863      	ldr	r3, [r4, #4]
 8001434:	2b03      	cmp	r3, #3
 8001436:	d020      	beq.n	800147a <HAL_RCC_ClockConfig+0xb6>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001438:	2b02      	cmp	r3, #2
 800143a:	d02d      	beq.n	8001498 <HAL_RCC_ClockConfig+0xd4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800143c:	2b00      	cmp	r3, #0
 800143e:	d03a      	beq.n	80014b6 <HAL_RCC_ClockConfig+0xf2>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001440:	4b48      	ldr	r3, [pc, #288]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b04      	cmp	r3, #4
 800144a:	d042      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x10e>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144c:	f7ff fb40 	bl	8000ad0 <HAL_GetTick>
 8001450:	1b80      	subs	r0, r0, r6
 8001452:	f241 3388 	movw	r3, #5000	; 0x1388
 8001456:	4298      	cmp	r0, r3
 8001458:	d9f2      	bls.n	8001440 <HAL_RCC_ClockConfig+0x7c>
            return HAL_TIMEOUT;
 800145a:	2003      	movs	r0, #3
 800145c:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800145e:	4a41      	ldr	r2, [pc, #260]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001466:	d1db      	bne.n	8001420 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8001468:	2001      	movs	r0, #1
 800146a:	bd70      	pop	{r4, r5, r6, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800146c:	4a3d      	ldr	r2, [pc, #244]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001474:	d1d4      	bne.n	8001420 <HAL_RCC_ClockConfig+0x5c>
          return HAL_ERROR;
 8001476:	2001      	movs	r0, #1
 8001478:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800147a:	4b3a      	ldr	r3, [pc, #232]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b0c      	cmp	r3, #12
 8001484:	d025      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x10e>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001486:	f7ff fb23 	bl	8000ad0 <HAL_GetTick>
 800148a:	1b80      	subs	r0, r0, r6
 800148c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001490:	4298      	cmp	r0, r3
 8001492:	d9f2      	bls.n	800147a <HAL_RCC_ClockConfig+0xb6>
          return HAL_TIMEOUT;
 8001494:	2003      	movs	r0, #3
 8001496:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001498:	4b32      	ldr	r3, [pc, #200]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d016      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x10e>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a4:	f7ff fb14 	bl	8000ad0 <HAL_GetTick>
 80014a8:	1b80      	subs	r0, r0, r6
 80014aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80014ae:	4298      	cmp	r0, r3
 80014b0:	d9f2      	bls.n	8001498 <HAL_RCC_ClockConfig+0xd4>
            return HAL_TIMEOUT;
 80014b2:	2003      	movs	r0, #3
 80014b4:	bd70      	pop	{r4, r5, r6, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f013 0f0c 	tst.w	r3, #12
 80014be:	d008      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x10e>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f7ff fb06 	bl	8000ad0 <HAL_GetTick>
 80014c4:	1b80      	subs	r0, r0, r6
 80014c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80014ca:	4298      	cmp	r0, r3
 80014cc:	d9f3      	bls.n	80014b6 <HAL_RCC_ClockConfig+0xf2>
            return HAL_TIMEOUT;
 80014ce:	2003      	movs	r0, #3
 80014d0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	f013 0f02 	tst.w	r3, #2
 80014d8:	d006      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014da:	4a22      	ldr	r2, [pc, #136]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 80014dc:	6893      	ldr	r3, [r2, #8]
 80014de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014e2:	68a1      	ldr	r1, [r4, #8]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	6093      	str	r3, [r2, #8]
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_RCC_ClockConfig+0x19c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	429d      	cmp	r5, r3
 80014f2:	d20c      	bcs.n	800150e <HAL_RCC_ClockConfig+0x14a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_RCC_ClockConfig+0x19c>)
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	f023 0307 	bic.w	r3, r3, #7
 80014fc:	432b      	orrs	r3, r5
 80014fe:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001500:	6813      	ldr	r3, [r2, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	429d      	cmp	r5, r3
 8001508:	d001      	beq.n	800150e <HAL_RCC_ClockConfig+0x14a>
      return HAL_ERROR;
 800150a:	2001      	movs	r0, #1
}
 800150c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	f013 0f04 	tst.w	r3, #4
 8001514:	d006      	beq.n	8001524 <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 8001518:	6893      	ldr	r3, [r2, #8]
 800151a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800151e:	68e1      	ldr	r1, [r4, #12]
 8001520:	430b      	orrs	r3, r1
 8001522:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	f013 0f08 	tst.w	r3, #8
 800152a:	d007      	beq.n	800153c <HAL_RCC_ClockConfig+0x178>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800152c:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 800152e:	6893      	ldr	r3, [r2, #8]
 8001530:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001534:	6921      	ldr	r1, [r4, #16]
 8001536:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800153a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800153c:	f7ff fbdc 	bl	8000cf8 <HAL_RCC_GetSysClockFreq>
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_RCC_ClockConfig+0x1a0>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_RCC_ClockConfig+0x1a4>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	40d8      	lsrs	r0, r3
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_RCC_ClockConfig+0x1a8>)
 8001550:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff fa9e 	bl	8000a94 <HAL_InitTick>
  return HAL_OK;
 8001558:	2000      	movs	r0, #0
 800155a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800155c:	2001      	movs	r0, #1
 800155e:	bd70      	pop	{r4, r5, r6, pc}
 8001560:	40022000 	.word	0x40022000
 8001564:	40021000 	.word	0x40021000
 8001568:	0800169c 	.word	0x0800169c
 800156c:	20000038 	.word	0x20000038

08001570 <HAL_RCC_GetHCLKFreq>:
}
 8001570:	4b01      	ldr	r3, [pc, #4]	; (8001578 <HAL_RCC_GetHCLKFreq+0x8>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000038 	.word	0x20000038

0800157c <__libc_init_array>:
 800157c:	b570      	push	{r4, r5, r6, lr}
 800157e:	4e0d      	ldr	r6, [pc, #52]	; (80015b4 <__libc_init_array+0x38>)
 8001580:	4c0d      	ldr	r4, [pc, #52]	; (80015b8 <__libc_init_array+0x3c>)
 8001582:	1ba4      	subs	r4, r4, r6
 8001584:	10a4      	asrs	r4, r4, #2
 8001586:	2500      	movs	r5, #0
 8001588:	42a5      	cmp	r5, r4
 800158a:	d109      	bne.n	80015a0 <__libc_init_array+0x24>
 800158c:	4e0b      	ldr	r6, [pc, #44]	; (80015bc <__libc_init_array+0x40>)
 800158e:	4c0c      	ldr	r4, [pc, #48]	; (80015c0 <__libc_init_array+0x44>)
 8001590:	f000 f818 	bl	80015c4 <_init>
 8001594:	1ba4      	subs	r4, r4, r6
 8001596:	10a4      	asrs	r4, r4, #2
 8001598:	2500      	movs	r5, #0
 800159a:	42a5      	cmp	r5, r4
 800159c:	d105      	bne.n	80015aa <__libc_init_array+0x2e>
 800159e:	bd70      	pop	{r4, r5, r6, pc}
 80015a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015a4:	4798      	blx	r3
 80015a6:	3501      	adds	r5, #1
 80015a8:	e7ee      	b.n	8001588 <__libc_init_array+0xc>
 80015aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ae:	4798      	blx	r3
 80015b0:	3501      	adds	r5, #1
 80015b2:	e7f2      	b.n	800159a <__libc_init_array+0x1e>
 80015b4:	080016dc 	.word	0x080016dc
 80015b8:	080016dc 	.word	0x080016dc
 80015bc:	080016dc 	.word	0x080016dc
 80015c0:	080016e0 	.word	0x080016e0

080015c4 <_init>:
 80015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c6:	bf00      	nop
 80015c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ca:	bc08      	pop	{r3}
 80015cc:	469e      	mov	lr, r3
 80015ce:	4770      	bx	lr

080015d0 <_fini>:
 80015d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d2:	bf00      	nop
 80015d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d6:	bc08      	pop	{r3}
 80015d8:	469e      	mov	lr, r3
 80015da:	4770      	bx	lr
