/**HEADER HERE*/

/***********************************************************************
* THIS FILE IS AUTOGENERATED
***********************************************************************/
#ifndef _HREG_API_H_
#define _HREG_API_H_


/***********************************************************************
* ARCHITECTURE INCLUDES
***********************************************************************/
#include "Common.h"
#include "Hreg.h"
#include "Hreg_dat.h"

/***********************************************************************
* PUBLIC FUNCTION DECLARATIONS
***********************************************************************/
// API FOR DRIVER SYSTEM
/***********************************************************************
 * @brief	API for Init System.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError initHregSystem( void );

/***********************************************************************
 * @brief	API for Start System.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError startHregSystem( void );

/***********************************************************************
 * @brief	API for Stop System.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError stopHregSystem( void );

/***********************************************************************
 * @brief	API for Sleep System.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError sleepHregSystem( void );

/***********************************************************************
 * @brief	API for Wake System.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError wakeHregSystem( void );

/***********************************************************************
 * @brief	On Read function for HregGroup : [System.h Enabled] Hregs: 4 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSystemPowerUpReason( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [System.h Enabled] Hregs: 4 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSystemPowerUpReason( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [System.h Enabled] Hregs: 4 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSystemPowerMode( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [System.h Enabled] Hregs: 4 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSystemPowerMode( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [System.h Enabled] Hregs: 4 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSystemDate( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [System.h Enabled] Hregs: 4 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSystemDate( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [System.h Enabled] Hregs: 4 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSystemTime( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [System.h Enabled] Hregs: 4 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSystemTime( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

// API FOR DRIVER FLASH
/***********************************************************************
 * @brief	API for Init Flash.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError initHregFlash( void );

/***********************************************************************
 * @brief	API for Start Flash.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError startHregFlash( void );

/***********************************************************************
 * @brief	API for Stop Flash.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError stopHregFlash( void );

/***********************************************************************
 * @brief	API for Sleep Flash.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError sleepHregFlash( void );

/***********************************************************************
 * @brief	API for Wake Flash.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError wakeHregFlash( void );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Flash.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregFlashSize( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Flash.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregFlashSize( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Flash.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregFlashData( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Flash.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregFlashData( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Flash.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregFlashOffset( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Flash.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregFlashOffset( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

// API FOR DRIVER GPIO
/***********************************************************************
 * @brief	API for Init GPIO.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError initHregGPIO( void );

/***********************************************************************
 * @brief	API for Start GPIO.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError startHregGPIO( void );

/***********************************************************************
 * @brief	API for Stop GPIO.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError stopHregGPIO( void );

/***********************************************************************
 * @brief	API for Sleep GPIO.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError sleepHregGPIO( void );

/***********************************************************************
 * @brief	API for Wake GPIO.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError wakeHregGPIO( void );

/***********************************************************************
 * @brief	On Read function for HregGroup : [GPIO.h Enabled] Hregs: 1 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregGPIOValue( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [GPIO.h Enabled] Hregs: 1 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregGPIOValue( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

// API FOR DRIVER UART
/***********************************************************************
 * @brief	API for Init Uart.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError initHregUart( void );

/***********************************************************************
 * @brief	API for Start Uart.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError startHregUart( void );

/***********************************************************************
 * @brief	API for Stop Uart.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError stopHregUart( void );

/***********************************************************************
 * @brief	API for Sleep Uart.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError sleepHregUart( void );

/***********************************************************************
 * @brief	API for Wake Uart.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError wakeHregUart( void );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Uart.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregUartBufferSize( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Uart.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregUartBufferSize( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Uart.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregUartData( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Uart.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregUartData( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Uart.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregUartStatus( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Uart.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregUartStatus( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

// API FOR DRIVER SPI
/***********************************************************************
 * @brief	API for Init Spi.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError initHregSpi( void );

/***********************************************************************
 * @brief	API for Start Spi.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError startHregSpi( void );

/***********************************************************************
 * @brief	API for Stop Spi.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError stopHregSpi( void );

/***********************************************************************
 * @brief	API for Sleep Spi.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError sleepHregSpi( void );

/***********************************************************************
 * @brief	API for Wake Spi.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError wakeHregSpi( void );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Spi.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSpiBufferSize( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Spi.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSpiBufferSize( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Spi.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSpiData( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Spi.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSpiData( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Spi.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSpiStatus( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Spi.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSpiStatus( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

// API FOR DRIVER INTERRUPTS
/***********************************************************************
 * @brief	API for Init Interrupts.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError initHregInterrupts( void );

/***********************************************************************
 * @brief	API for Start Interrupts.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError startHregInterrupts( void );

/***********************************************************************
 * @brief	API for Stop Interrupts.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError stopHregInterrupts( void );

/***********************************************************************
 * @brief	API for Sleep Interrupts.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError sleepHregInterrupts( void );

/***********************************************************************
 * @brief	API for Wake Interrupts.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError wakeHregInterrupts( void );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Interrupts.h Enabled] Hregs: 1 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregInterruptsState( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Interrupts.h Enabled] Hregs: 1 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregInterruptsState( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

// API FOR DRIVER BUTTONS
/***********************************************************************
 * @brief	API for Init Buttons.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError initHregButtons( void );

/***********************************************************************
 * @brief	API for Start Buttons.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError startHregButtons( void );

/***********************************************************************
 * @brief	API for Stop Buttons.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError stopHregButtons( void );

/***********************************************************************
 * @brief	API for Sleep Buttons.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError sleepHregButtons( void );

/***********************************************************************
 * @brief	API for Wake Buttons.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError wakeHregButtons( void );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Buttons.h Enabled] Hregs: 1 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregButtonsState( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Buttons.h Enabled] Hregs: 1 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregButtonsState( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

// API FOR DRIVER LEDS
/***********************************************************************
 * @brief	API for Init Leds.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError initHregLeds( void );

/***********************************************************************
 * @brief	API for Start Leds.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError startHregLeds( void );

/***********************************************************************
 * @brief	API for Stop Leds.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError stopHregLeds( void );

/***********************************************************************
 * @brief	API for Sleep Leds.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError sleepHregLeds( void );

/***********************************************************************
 * @brief	API for Wake Leds.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError wakeHregLeds( void );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Leds.h Enabled] Hregs: 2 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregLedsEffect( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Leds.h Enabled] Hregs: 2 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregLedsEffect( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [Leds.h Enabled] Hregs: 2 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregLedsState( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [Leds.h Enabled] Hregs: 2 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregLedsState( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

// API FOR DRIVER SWTIMER
/***********************************************************************
 * @brief	API for Init SwTimer.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError initHregSwTimer( void );

/***********************************************************************
 * @brief	API for Start SwTimer.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError startHregSwTimer( void );

/***********************************************************************
 * @brief	API for Stop SwTimer.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError stopHregSwTimer( void );

/***********************************************************************
 * @brief	API for Sleep SwTimer.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError sleepHregSwTimer( void );

/***********************************************************************
 * @brief	API for Wake SwTimer.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError wakeHregSwTimer( void );

/***********************************************************************
 * @brief	On Read function for HregGroup : [SwTimer.h Enabled] Hregs: 5 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSwTimerCallbackFunction( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [SwTimer.h Enabled] Hregs: 5 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSwTimerCallbackFunction( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [SwTimer.h Enabled] Hregs: 5 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSwTimerGetPending( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [SwTimer.h Enabled] Hregs: 5 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSwTimerGetPending( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [SwTimer.h Enabled] Hregs: 5 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSwTimerState( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [SwTimer.h Enabled] Hregs: 5 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSwTimerState( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [SwTimer.h Enabled] Hregs: 5 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSwTimerGetElapsed( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [SwTimer.h Enabled] Hregs: 5 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSwTimerGetElapsed( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [SwTimer.h Enabled] Hregs: 5 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregSwTimerSet( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [SwTimer.h Enabled] Hregs: 5 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregSwTimerSet( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

// API FOR DRIVER VIRTUALEEPROM
/***********************************************************************
 * @brief	API for Init VirtualEEPROM.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError initHregVirtualEEPROM( void );

/***********************************************************************
 * @brief	API for Start VirtualEEPROM.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError startHregVirtualEEPROM( void );

/***********************************************************************
 * @brief	API for Stop VirtualEEPROM.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError stopHregVirtualEEPROM( void );

/***********************************************************************
 * @brief	API for Sleep VirtualEEPROM.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError sleepHregVirtualEEPROM( void );

/***********************************************************************
 * @brief	API for Wake VirtualEEPROM.
 * @details	.
 *
 * @param	None.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError wakeHregVirtualEEPROM( void );

/***********************************************************************
 * @brief	On Read function for HregGroup : [VirtualEeprom.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregVirtualEEPROMRegister( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [VirtualEeprom.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregVirtualEEPROMRegister( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [VirtualEeprom.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregVirtualEEPROMInstanceReg( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [VirtualEeprom.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregVirtualEEPROMInstanceReg( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

/***********************************************************************
 * @brief	On Read function for HregGroup : [VirtualEeprom.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: address of variable to store the value of HREG.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onReadHregVirtualEEPROMData( uint8_t instance, const HREG* hregPtr, void* param1 );

/***********************************************************************
 * @brief	On Write function for HregGroup : [VirtualEeprom.h Enabled] Hregs: 3 data.
 * @details	.
 *
 * @param	instance: instance of the driver.
 * @param	hregPtr: HREG pointer.
 * @param	param1: value to write.
 *
 * @return	result: error code.
 *
 **********************************************************************/
eError onWriteHregVirtualEEPROMData( uint8_t instance, const HREG* hregPtr, uint32_t param1 );

#endif	/*_HREG_API_H_*/

